// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 31936;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([13,10,0,0,0,0,0,0,74,80,69,71,32,88,82,32,68,101,99,111,100,101,114,32,85,116,105,108,105,116,121,13,10,0,0,0,0,0,0,0,67,111,112,121,114,105,103,104,116,32,50,48,49,51,32,77,105,99,114,111,115,111,102,116,32,67,111,114,112,111,114,97,116,105,111,110,32,45,32,65,108,108,32,82,105,103,104,116,115,32,82,101,115,101,114,118,101,100,13,10,0,0,0,0,37,115,32,91,111,112,116,105,111,110,115,93,46,46,46,13,10,0,0,0,0,0,0,0,32,32,45,105,32,105,110,112,117,116,46,106,120,114,47,119,100,112,32,32,32,32,32,32,32,32,32,32,32,32,32,73,110,112,117,116,32,74,80,69,71,32,88,82,47,72,68,32,80,104,111,116,111,32,102,105,108,101,32,110,97,109,101,13,10,0,0,0,0,0,0,0,32,32,45,111,32,111,117,116,112,117,116,46,98,109,112,47,116,105,102,47,106,120,114,32,32,32,32,32,32,32,32,79,117,116,112,117,116,32,105,109,97,103,101,32,102,105,108,101,32,110,97,109,101,13,10,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,109,112,58,32,60,61,56,98,112,99,44,32,66,71,82,13,10,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,105,102,58,32,62,61,56,98,112,99,44,32,82,71,66,13,10,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,106,120,114,58,32,102,111,114,32,99,111,109,112,114,101,115,115,101,100,32,100,111,109,97,105,110,32,116,114,97,110,115,99,111,100,101,13,10,0,0,0,32,32,45,99,32,102,111,114,109,97,116,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,112,101,99,105,102,105,101,115,32,116,104,101,32,117,110,99,111,109,112,114,101,115,115,101,100,32,111,117,116,112,117,116,32,102,111,114,109,97,116,13,10,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,58,32,50,52,98,112,112,66,71,82,13,10,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,58,32,49,98,112,112,66,108,97,99,107,87,104,105,116,101,13,10,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,58,32,56,98,112,112,71,114,97,121,13,10,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,58,32,49,54,98,112,112,71,114,97,121,13,10,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,52,58,32,49,54,98,112,112,71,114,97,121,70,105,120,101,100,80,111,105,110,116,13,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,53,58,32,49,54,98,112,112,71,114,97,121,72,97,108,102,13,10,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,55,58,32,51,50,98,112,112,71,114,97,121,70,105,120,101,100,80,111,105,110,116,13,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,56,58,32,51,50,98,112,112,71,114,97,121,70,108,111,97,116,13,10,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,57,58,32,50,52,98,112,112,82,71,66,13,10,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,48,58,32,52,56,98,112,112,82,71,66,13,10,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,49,58,32,52,56,98,112,112,82,71,66,70,105,120,101,100,80,111,105,110,116,13,10,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,50,58,32,52,56,98,112,112,82,71,66,72,97,108,102,13,10,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,52,58,32,57,54,98,112,112,82,71,66,70,105,120,101,100,80,111,105,110,116,13,10,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,53,58,32,49,50,56,98,112,112,82,71,66,70,108,111,97,116,13,10,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,54,58,32,51,50,98,112,112,82,71,66,69,13,10,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,55,58,32,51,50,98,112,112,67,77,89,75,13,10,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,56,58,32,54,52,98,112,112,67,77,89,75,13,10,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,50,58,32,51,50,98,112,112,66,71,82,65,13,10,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,51,58,32,54,52,98,112,112,82,71,66,65,13,10,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,52,58,32,54,52,98,112,112,82,71,66,65,70,105,120,101,100,80,111,105,110,116,13,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,53,58,32,54,52,98,112,112,82,71,66,65,72,97,108,102,13,10,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,55,58,32,49,50,56,98,112,112,82,71,66,65,70,105,120,101,100,80,111,105,110,116,13,10,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,56,58,32,49,50,56,98,112,112,82,71,66,65,70,108,111,97,116,13,10,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,57,58,32,49,54,98,112,112,66,71,82,53,53,53,13,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,48,58,32,49,54,98,112,112,66,71,82,53,54,53,13,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,49,58,32,51,50,98,112,112,66,71,82,49,48,49,48,49,48,13,10,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,50,58,32,52,48,98,112,112,67,77,89,75,65,13,10,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,51,58,32,56,48,98,112,112,67,77,89,75,65,13,10,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,52,58,32,51,50,98,112,112,66,71,82,13,10,0,0,0,32,32,45,114,32,116,111,112,32,108,101,102,116,32,104,101,105,103,104,116,32,119,105,100,116,104,32,32,32,32,32,83,112,101,99,105,102,105,101,115,32,116,104,101,32,114,101,99,116,97,110,103,108,101,32,102,111,114,32,114,101,103,105,111,110,32,100,101,99,111,100,101,13,10,0,0,0,0,0,0,32,32,45,84,32,109,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,82,101,100,117,99,101,100,32,114,101,115,111,108,117,116,105,111,110,32,40,109,105,112,109,97,112,41,32,100,101,99,111,100,101,13,10,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,58,32,70,117,108,108,32,114,101,115,111,108,117,116,105,111,110,32,40,100,101,102,97,117,108,116,41,13,10,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,58,32,49,47,50,32,114,101,115,32,40,100,111,119,110,45,115,97,109,112,108,101,100,32,102,114,111,109,32,102,117,108,108,32,114,101,115,41,13,10,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,58,32,49,47,52,32,114,101,115,32,40,110,97,116,105,118,101,32,100,101,99,111,100,101,41,13,10,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,58,32,49,47,56,32,114,101,115,32,40,100,111,119,110,45,115,97,109,112,108,101,100,32,102,114,111,109,32,49,47,52,32,114,101,115,41,13,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,52,58,32,49,47,49,54,32,114,101,115,32,40,110,97,116,105,118,101,32,100,101,99,111,100,101,41,13,10,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,62,52,58,32,49,47,40,50,94,109,41,32,114,101,115,32,40,100,111,119,110,45,115,97,109,112,108,101,100,32,102,114,111,109,32,49,47,49,54,32,114,101,115,41,32,13,10,0,0,32,32,45,79,32,111,114,105,101,110,116,97,116,105,111,110,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,58,32,78,111,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,40,100,101,102,97,117,108,116,41,13,10,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,58,32,70,108,105,112,32,118,101,114,116,105,99,97,108,108,121,13,10,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,58,32,70,108,105,112,32,104,111,114,105,122,111,110,116,97,108,108,121,13,10,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,58,32,70,108,105,112,32,118,101,114,116,105,99,97,108,108,121,32,38,32,104,111,114,105,122,111,110,116,97,108,108,121,13,10,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,52,58,32,82,111,116,97,116,101,32,57,48,32,100,101,103,114,101,101,115,32,67,87,13,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,53,58,32,82,111,116,97,116,101,32,57,48,32,100,101,103,114,101,101,115,32,67,87,32,38,32,102,108,105,112,32,118,101,114,116,105,99,97,108,108,121,13,10,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,54,58,32,82,111,116,97,116,101,32,57,48,32,100,101,103,114,101,101,115,32,67,87,32,38,32,102,108,105,112,32,104,111,114,105,122,111,110,116,97,108,108,121,13,10,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,55,58,32,82,111,116,97,116,101,32,57,48,32,100,101,103,114,101,101,115,32,67,87,32,38,32,102,108,105,112,32,118,101,114,116,32,38,32,104,111,114,105,122,13,10,0,0,0,0,32,32,45,115,32,115,107,105,112,32,115,117,98,98,97,110,100,115,32,32,32,32,32,32,32,32,32,32,32,32,32,85,115,101,100,32,102,111,114,32,99,111,109,112,114,101,115,115,101,100,32,100,111,109,97,105,110,32,116,114,97,110,115,99,111,100,105,110,103,13,10,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,58,32,65,108,108,32,115,117,98,98,97,110,100,115,32,105,110,99,108,117,100,101,100,32,40,100,101,102,97,117,108,116,41,13,10,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,58,32,83,107,105,112,32,102,108,101,120,98,105,116,115,13,10,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,58,32,83,107,105,112,32,104,105,103,104,112,97,115,115,13,10,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,58,32,83,107,105,112,32,104,105,103,104,112,97,115,115,32,38,32,108,111,119,112,97,115,115,32,40,68,67,32,111,110,108,121,41,13,10,0,0,0,32,32,45,97,32,97,108,112,104,97,32,100,101,99,111,100,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,58,32,68,101,99,111,100,101,32,119,105,116,104,111,117,116,32,97,108,112,104,97,32,99,104,97,110,110,101,108,13,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,58,32,68,101,99,111,100,101,32,111,110,108,121,32,97,108,112,104,97,32,99,104,97,110,110,101,108,13,10,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,58,32,68,101,99,111,100,101,32,105,109,97,103,101,32,38,32,97,108,112,104,97,32,40,100,101,102,97,117,108,116,41,13,10,0,0,0,0,0,0,32,32,45,112,32,115,116,114,101,110,103,116,104,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,80,111,115,116,32,112,114,111,99,101,115,115,105,110,103,32,102,105,108,116,101,114,32,115,116,114,101,110,103,116,104,13,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,58,32,78,111,110,101,32,40,100,101,102,97,117,108,116,41,13,10,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,58,32,76,105,103,104,116,13,10,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,58,32,77,101,100,105,117,109,13,10,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,51,58,32,83,116,114,111,110,103,13,10,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,52,58,32,86,101,114,121,32,115,116,114,111,110,103,13,10,0,32,32,45,80,32,60,102,105,108,101,110,97,109,101,62,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,69,120,116,114,97,99,116,32,97,110,100,32,115,97,118,101,32,99,111,108,111,114,32,112,114,111,102,105,108,101,32,105,102,32,112,114,101,115,101,110,116,13,10,0,0,0,0,0,0,32,32,45,67,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,117,112,112,114,101,115,115,32,111,118,101,114,108,97,112,112,105,110,103,32,98,111,117,110,100,97,114,121,32,109,97,99,114,111,32,98,108,111,99,107,115,13,10,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,85,115,101,100,32,102,111,114,32,99,111,109,112,114,101,115,115,101,100,32,100,111,109,97,105,110,32,116,105,108,101,32,101,120,116,114,97,99,116,105,111,110,41,13,10,0,0,0,32,32,45,116,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,105,115,112,108,97,121,32,116,105,109,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,13,10,0,0,0,0,0,32,32,45,118,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,105,115,112,108,97,121,32,118,101,114,98,111,115,101,32,100,101,99,111,100,101,114,32,105,110,102,111,114,109,97,116,105,111,110,13,10,0,0,0,0,69,103,58,32,37,115,32,45,105,32,105,110,112,117,116,46,106,120,114,32,45,111,32,111,117,116,112,117,116,46,98,109,112,32,45,99,32,48,13,10,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,13,10,0,0,0,0,0,0,73,110,112,117,116,32,102,105,108,101,58,32,32,32,32,32,37,115,13,10,0,0,0,0,79,117,116,112,117,116,32,102,105,108,101,58,32,32,32,32,37,115,13,10,0,0,0,0,67,111,108,111,114,32,112,114,111,102,105,108,101,58,32,32,32,32,37,115,13,10,0,0,67,111,108,111,114,32,102,111,114,109,97,116,58,32,32,32,37,48,56,88,45,37,48,52,88,45,37,48,52,88,45,37,48,50,88,37,48,50,88,37,48,50,88,37,48,50,88,37,48,50,88,37,48,50,88,37,48,50,88,37,48,50,88,13,10,0,0,0,0,0,0,0,80,111,115,116,32,112,114,111,99,101,115,115,105,110,103,32,115,116,114,101,110,103,116,104,58,32,37,100,13,10,0,0,84,104,117,109,98,110,97,105,108,58,32,32,32,32,32,32,37,100,13,10,0,0,0,0,168,60,0,0,72,60,0,0,88,60,0,0,136,60,0,0,56,61,0,0,104,62,0,0,56,60,0,0,120,62,0,0,232,60,0,0,168,60,0,0,88,61,0,0,40,61,0,0,72,62,0,0,56,60,0,0,136,61,0,0,200,61,0,0,88,62,0,0,216,61,0,0,136,62,0,0,56,64,0,0,72,64,0,0,88,64,0,0,200,60,0,0,104,61,0,0,232,61,0,0,40,62,0,0,56,60,0,0,8,62,0,0,168,61,0,0,104,60,0,0,120,60,0,0,72,61,0,0,88,63,0,0,104,63,0,0,184,60,0,0,216,60,0,0,120,61,0,0,184,61,0,0,6,0,0,0,13,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,26,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,42,42,42,32,69,82,82,79,82,58,32,85,110,115,117,112,112,111,114,116,101,100,32,102,111,114,109,97,116,32,105,110,32,74,80,69,71,32,88,82,32,42,42,42,10,0,0,0,46,106,120,114,0,0,0,0,119,98,0,0,0,0,0,0,45,84,32,99,97,110,32,110,111,116,32,98,101,32,117,115,101,100,32,102,111,114,32,99,111,109,112,114,101,115,115,101,100,32,100,111,109,97,105,110,32,111,112,101,114,97,116,105,111,110,33,10,0,0,0,0,5,0,0,0,4,0,0,0,8,0,0,0,7,0,0,0,7,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,105,77,111,100,101,108,66,105,116,115,32,60,32,49,54,0,105,109,97,103,101,47,101,110,99,111,100,101,47,115,101,103,101,110,99,46,99,0,0,0,67,111,100,101,67,111,101,102,102,115,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,131,0,0,0,127,0,0,0,123,0,0,0,119,0,0,0,115,0,0,0,111,0,0,0,107,0,0,0,103,0,0,0,99,0,0,0,95,0,0,0,91,0,0,0,87,0,0,0,83,0,0,0,79,0,0,0,75,0,0,0,71,0,0,0,67,0,0,0,63,0,0,0,59,0,0,0,55,0,0,0,51,0,0,0,47,0,0,0,43,0,0,0,39,0,0,0,35,0,0,0,31,0,0,0,27,0,0,0,23,0,0,0,19,0,0,0,15,0,0,0,11,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,21,0,0,0,25,0,0,0,29,0,0,0,33,0,0,0,37,0,0,0,41,0,0,0,45,0,0,0,49,0,0,0,53,0,0,0,57,0,0,0,61,0,0,0,65,0,0,0,69,0,0,0,73,0,0,0,77,0,0,0,81,0,0,0,85,0,0,0,89,0,0,0,93,0,0,0,97,0,0,0,101,0,0,0,105,0,0,0,109,0,0,0,113,0,0,0,117,0,0,0,121,0,0,0,125,0,0,0,129,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,105,65,98,115,76,101,118,101,108,32,62,32,48,0,0,0,69,110,99,111,100,101,83,105,103,110,105,102,105,99,97,110,116,65,98,115,76,101,118,101,108,0,0,0,0,0,0,0,105,70,105,120,101,100,32,60,32,51,48,0,0,0,0,0,119,43,98,0,0,0,0,0,10,37,100,32,104,111,114,105,122,111,110,116,97,108,32,116,105,108,101,115,58,10,0,0,32,32,32,32,111,102,102,115,101,116,32,111,102,32,116,105,108,101,32,37,100,32,105,110,32,77,66,115,58,32,37,100,10,0,0,0,0,0,0,0,10,37,100,32,118,101,114,116,105,99,97,108,32,116,105,108,101,115,58,10,0,0,0,0,10,83,112,97,116,105,97,108,32,111,114,100,101,114,32,98,105,116,115,116,114,101,97,109,10,0,0,0,0,0,0,0,10,70,114,101,113,117,101,110,99,121,32,111,114,100,101,114,32,98,105,116,115,116,114,101,97,109,10,0,0,0,0,0,10,115,116,114,101,97,109,105,110,103,32,109,111,100,101,44,32,110,111,32,105,110,100,101,120,32,116,97,98,108,101,46,10,0,0,0,0,0,0,0,98,105,116,115,116,114,101,97,109,32,115,105,122,101,32,102,111,114,32,116,105,108,101,32,40,37,100,44,32,37,100,41,58,32,37,100,46,10,0,0,98,105,116,115,116,114,101,97,109,32,115,105,122,101,32,111,102,32,40,68,67,44,32,76,80,44,32,65,67,44,32,70,76,41,32,102,111,114,32,116,105,108,101,32,40,37,100,44,32,37,100,41,58,32,37,100,32,37,100,32,37,100,32,37,100,46,10,0,0,0,0,0,85,110,115,117,114,112,112,111,114,116,101,100,32,105,109,97,103,101,32,115,105,122,101,33,10,0,0,0,0,0,0,0,73,109,97,103,101,32,119,105,100,116,104,32,109,117,115,116,32,98,101,32,97,116,32,108,101,97,115,116,32,50,32,77,66,32,119,105,100,101,32,102,111,114,32,115,117,98,115,97,109,112,108,101,100,32,99,104,114,111,109,97,32,97,110,100,32,116,119,111,32,108,101,118,101,108,115,32,111,102,32,111,118,101,114,108,97,112,33,10,0,0,0,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,66,68,95,53,32,105,109,97,103,101,32,102,111,114,109,97,116,33,10,0,85,110,115,117,112,112,111,114,116,101,100,32,66,68,95,53,54,53,32,105,109,97,103,101,32,102,111,114,109,97,116,33,10,0,0,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,66,68,95,49,48,32,105,109,97,103,101,32,102,111,114,109,97,116,33,10,0,0,0,0,0,0,0,0,66,68,95,49,32,105,109,97,103,101,32,109,117,115,116,32,98,101,32,98,108,97,99,107,45,97,110,100,32,119,104,105,116,101,33,10,0,0,0,0,65,108,112,104,97,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,116,104,105,115,32,112,105,120,101,108,32,102,111,114,109,97,116,33,10,0,0,70,108,111,97,116,32,111,114,32,82,71,66,69,32,105,109,97,103,101,115,32,109,117,115,116,32,98,101,32,101,110,99,111,100,101,100,32,119,105,116,104,32,89,85,86,32,52,52,52,33,10,0,0,0,0,0,84,105,108,101,32,119,105,100,116,104,32,109,117,115,116,32,98,101,32,97,116,32,108,101,97,115,116,32,50,32,77,66,32,119,105,100,101,32,102,111,114,32,104,97,114,100,32,116,105,108,101,115,44,32,115,117,98,115,97,109,112,108,101,100,32,99,104,114,111,109,97,44,32,97,110,100,32,116,119,111,32,108,101,118,101,108,115,32,111,102,32,111,118,101,114,108,97,112,33,10,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,70,117,108,108,67,104,97,110,110,101,108,32,60,61,32,49,54,0,0,0,0,0,0,105,109,97,103,101,47,101,110,99,111,100,101,47,115,116,114,101,110,99,46,99,0,0,0,112,97,100,72,111,114,105,122,111,110,116,97,108,108,121,0,112,83,67,45,62,87,77,73,83,67,80,46,99,67,104,97,110,110,101,108,32,60,61,32,49,54,0,0,0,0,0,0,99,67,104,97,110,110,101,108,32,60,61,32,49,54,0,0,105,110,112,117,116,77,66,82,111,119,0,0,0,0,0,0,48,0,0,0,0,0,0,0,112,83,67,45,62,109,95,98,83,101,99,111,110,100,97,114,121,32,61,61,32,70,65,76,83,69,0,0,0,0,0,0,99,102,69,120,116,32,61,61,32,67,70,95,82,71,66,0,99,102,69,120,116,32,61,61,32,89,95,79,78,76,89,0,69,33,61,48,0,0,0,0,102,111,114,119,97,114,100,82,71,66,69,0,0,0,0,0,105,69,115,99,97,112,101,32,60,61,32,48,120,102,102,32,38,38,32,105,69,115,99,97,112,101,32,62,32,48,120,102,99,0,0,0,0,0,0,0,80,117,116,86,76,87,111,114,100,69,115,99,0,0,0,0,78,85,76,76,32,61,61,32,112,0,0,0,0,0,0,0,105,109,97,103,101,47,101,110,99,111,100,101,47,115,116,114,70,119,100,84,114,97,110,115,102,111,114,109,46,99,0,0,116,114,97,110,115,102,111,114,109,77,97,99,114,111,98,108,111,99,107,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,8,0,0,0,7,0,0,0,7,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,105,110,105,116,32,100,101,99,111,100,101,114,46,10,0,0,0,115,116,114,80,111,115,116,80,114,111,99,73,110,102,111,91,106,93,91,105,93,32,33,61,32,78,85,76,76,0,0,0,105,109,97,103,101,47,100,101,99,111,100,101,47,112,111,115,116,112,114,111,99,101,115,115,46,99,0,0,0,0,0,0,105,110,105,116,80,111,115,116,80,114,111,99,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,112,83,67,45,62,109,95,68,112,97,114,97,109,45,62,98,83,107,105,112,70,108,101,120,98,105,116,115,32,61,61,32,48,32,124,124,32,112,83,67,45,62,87,77,73,83,67,80,46,98,102,66,105,116,115,116,114,101,97,109,70,111,114,109,97,116,32,61,61,32,70,82,69,81,85,69,78,67,89,32,124,124,32,112,83,67,45,62,87,77,73,83,67,80,46,115,98,83,117,98,98,97,110,100,32,61,61,32,83,66,95,78,79,95,70,76,69,88,66,73,84,83,0,0,0,0,0,0,105,109,97,103,101,47,100,101,99,111,100,101,47,115,101,103,100,101,99,46,99,0,0,0,68,101,99,111,100,101,67,111,101,102,102,115,0,0,0,0,105,84,114,105,109,32,61,61,32,48,0,0,0,0,0,0,68,101,99,111,100,101,66,108,111,99,107,65,100,97,112,116,105,118,101,0,0,0,0,0,105,81,80,32,61,61,32,49,0,0,0,0,0,0,0,0,105,83,82,110,32,62,61,32,48,32,38,38,32,105,83,82,110,32,60,32,51,0,0,0,68,101,99,111,100,101,66,108,111,99,107,72,105,103,104,112,97,115,115,0,0,0,0,0,6,0,0,0,9,0,0,0,10,0,0,0,12,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,8,0,0,0,12,0,0,0,1,0,0,0,0,0,0,0,15,0,0,0,3,0,0,0,12,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,14,0,0,0,6,0,0,0,9,0,0,0,10,0,0,0,12,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,10,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,105,73,110,100,101,120,32,60,61,32,54,0,0,0,0,0,68,101,99,111,100,101,83,105,103,110,105,102,105,99,97,110,116,65,98,115,76,101,118,101,108,0,0,0,0,0,0,0,48,32,60,61,32,40,73,51,50,41,99,66,105,116,115,32,38,38,32,99,66,105,116,115,32,60,61,32,49,54,0,0,95,102,108,117,115,104,66,105,116,49,54,0,0,0,0,0,40,112,73,79,45,62,105,77,97,115,107,32,38,32,49,41,32,61,61,32,48,0,0,0,95,112,101,101,107,66,105,116,49,54,0,0,0,0,0,0,68,101,99,111,100,101,66,108,111,99,107,0,0,0,0,0,105,83,121,109,98,111,108,32,62,61,32,48,0,0,0,0,95,103,101,116,72,117,102,102,83,104,111,114,116,0,0,0,99,67,104,97,110,110,101,108,32,60,61,32,49,54,0,0,105,109,97,103,101,47,100,101,99,111,100,101,47,115,116,114,100,101,99,46,99,0,0,0,111,117,116,112,117,116,78,67,104,97,110,110,101,108,0,0,48,0,0,0,0,0,0,0,112,83,67,45,62,109,95,112,97,114,97,109,46,98,83,99,97,108,101,100,65,114,105,116,104,32,61,61,32,112,83,67,45,62,109,95,112,78,101,120,116,83,67,45,62,109,95,112,97,114,97,109,46,98,83,99,97,108,101,100,65,114,105,116,104,0,0,0,0,0,0,0,111,117,116,112,117,116,77,66,82,111,119,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,99,102,69,120,116,32,61,61,32,67,70,95,82,71,66,0,99,102,69,120,116,32,61,61,32,89,95,79,78,76,89,32,38,38,32,112,83,67,45,62,109,95,112,97,114,97,109,46,99,102,67,111,108,111,114,70,111,114,109,97,116,32,61,61,32,89,95,79,78,76,89,0,111,117,116,112,117,116,78,67,104,97,110,110,101,108,84,104,117,109,98,110,97,105,108,0,116,83,99,97,108,101,32,61,61,32,40,115,105,122,101,95,116,41,40,49,85,32,60,60,32,110,66,105,116,115,41,0,100,101,99,111,100,101,84,104,117,109,98,110,97,105,108,0,10,37,100,32,104,111,114,105,122,111,110,116,97,108,32,116,105,108,101,115,58,10,0,0,32,32,32,32,111,102,102,115,101,116,32,111,102,32,116,105,108,101,32,37,100,32,105,110,32,77,66,115,58,32,37,100,10,0,0,0,0,0,0,0,10,37,100,32,118,101,114,116,105,99,97,108,32,116,105,108,101,115,58,10,0,0,0,0,10,83,112,97,116,105,97,108,32,111,114,100,101,114,32,98,105,116,115,116,114,101,97,109,10,0,0,0,0,0,0,0,10,70,114,101,113,117,101,110,99,121,32,111,114,100,101,114,32,98,105,116,115,116,114,101,97,109,10,0,0,0,0,0,10,115,116,114,101,97,109,105,110,103,32,109,111,100,101,44,32,110,111,32,105,110,100,101,120,32,116,97,98,108,101,46,10,0,0,0,0,0,0,0,98,105,116,115,116,114,101,97,109,32,115,105,122,101,32,102,111,114,32,116,105,108,101,32,40,37,100,44,32,37,100,41,58,32,37,100,46,10,0,0,98,105,116,115,116,114,101,97,109,32,115,105,122,101,32,102,111,114,32,116,105,108,101,32,40,37,100,44,32,37,100,41,58,32,117,110,107,110,111,119,110,46,10,0,0,0,0,0,98,105,116,115,116,114,101,97,109,32,115,105,122,101,32,111,102,32,40,68,67,44,32,76,80,44,32,65,67,44,32,70,76,41,32,102,111,114,32,116,105,108,101,32,40,37,100,44,32,37,100,41,58,32,37,100,32,37,100,32,37,100,32,37,100,46,10,0,0,0,0,0,98,105,116,115,116,114,101,97,109,32,115,105,122,101,32,111,102,32,40,68,67,44,32,76,80,44,32,65,67,44,32,70,76,41,32,102,111,114,32,116,105,108,101,32,40,37,100,44,32,37,100,41,58,32,37,100,32,37,100,32,37,100,32,117,110,107,110,111,119,110,46,10,0,0,0,0,0,0,0,0,1,1,2,2,2,4,4,4,255,255,255,0,0,0,0,0,112,83,67,32,33,61,32,78,85,76,76,0,0,0,0,0,82,101,97,100,87,77,73,72,101,97,100,101,114,0,0,0,87,77,80,72,79,84,79,0,2,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,112,83,67,45,62,108,97,115,116,68,101,99,111,100,101,100,77,66,32,62,32,48,0,0,82,101,115,116,111,114,101,68,101,99,111,100,101,114,83,116,97,116,101,0,0,0,0,0,1,2,3,5,6,7,9,10,11,13,14,15,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,111,79,114,105,101,110,116,97,116,105,111,110,32,60,32,79,95,82,67,87,0,0,0,0,105,109,97,103,101,47,100,101,99,111,100,101,47,74,88,82,84,114,97,110,115,99,111,100,101,46,99,0,0,0,0,0,116,114,97,110,115,102,111,114,109,68,67,66,108,111,99,107,52,50,50,0,0,0,0,0,116,114,97,110,115,102,111,114,109,65,67,66,108,111,99,107,115,52,50,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,116,32,62,61,32,48,0,0,105,109,97,103,101,47,115,121,115,47,97,100,97,112,116,104,117,102,102,46,99,0,0,0,65,100,97,112,116,68,105,115,99,114,105,109,105,110,97,110,116,0,0,0,0,0,0,0,116,32,60,32,103,77,97,120,84,97,98,108,101,115,91,105,83,121,109,93,0,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,19,0,19,0,19,0,19,0,27,0,27,0,27,0,27,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,28,0,28,0,36,0,36,0,19,0,19,0,19,0,19,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,11,0,11,0,11,0,19,0,19,0,19,0,19,0,27,0,27,0,27,0,27,0,35,0,35,0,35,0,35,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,13,0,29,0,44,0,44,0,19,0,19,0,19,0,19,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,12,0,28,0,28,0,43,0,43,0,43,0,43,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,12,0,12,0,43,0,43,0,43,0,43,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,26,0,26,0,26,0,26,0,26,0,26,0,26,0,26,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,13,0,36,0,36,0,43,0,43,0,43,0,43,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,45,0,53,0,36,0,36,0,27,0,27,0,27,0,27,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,128,37,0,28,0,28,0,19,0,19,0,19,0,19,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,8,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,53,0,21,0,28,0,28,0,11,0,11,0,11,0,11,0,43,0,43,0,43,0,43,0,59,0,59,0,59,0,59,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,52,0,20,0,20,0,3,0,3,0,3,0,3,0,11,0,11,0,11,0,11,0,27,0,27,0,27,0,27,0,35,0,35,0,35,0,35,0,43,0,43,0,43,0,43,0,58,0,58,0,58,0,58,0,58,0,58,0,58,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,4,0,0,0,9,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,7,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,253,255,255,255,0,0,0,0,13,0,29,0,37,0,61,0,20,0,20,0,68,0,68,0,3,0,3,0,3,0,3,0,51,0,51,0,51,0,51,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,128,53,0,28,0,28,0,11,0,11,0,11,0,11,0,19,0,19,0,19,0,19,0,43,0,43,0,43,0,43,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,34,128,4,0,7,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,1,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,7,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,12,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,6,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,12,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,7,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,7,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,7,0,0,0,1,0,0,0,4,0,0,0,12,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,7,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,3,0,0,0,12,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,1,0,0,0,4,0,0,0,2,0,0,0,7,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,7,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,254,255,255,255,254,255,255,255,32,128,5,0,76,0,76,0,37,0,53,0,69,0,85,0,43,0,43,0,43,0,43,0,91,0,91,0,91,0,91,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,34,128,1,0,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,128,85,0,13,0,53,0,4,0,4,0,36,0,36,0,43,0,43,0,43,0,43,0,67,0,67,0,67,0,67,0,75,0,75,0,75,0,75,0,91,0,91,0,91,0,91,0,58,0,58,0,58,0,58,0,58,0,58,0,58,0,58,0,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,128,37,0,92,0,92,0,11,0,11,0,11,0,11,0,43,0,43,0,43,0,43,0,59,0,59,0,59,0,59,0,67,0,67,0,67,0,67,0,75,0,75,0,75,0,75,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,34,128,36,128,2,0,3,0,6,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,128,29,0,37,0,69,0,3,0,3,0,3,0,3,0,43,0,43,0,43,0,43,0,59,0,59,0,59,0,59,0,75,0,75,0,75,0,75,0,91,0,91,0,91,0,91,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,34,128,10,0,2,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,128,93,0,28,0,28,0,60,0,60,0,76,0,76,0,3,0,3,0,3,0,3,0,43,0,43,0,43,0,43,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,9,0,34,128,36,128,38,128,2,0,4,0,8,0,6,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,8,0,0,0,6,0,0,0,9,0,0,0,3,0,0,0,12,0,0,0,10,0,0,0,7,0,0,0,13,0,0,0,11,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,8,0,0,0,6,0,0,0,9,0,0,0,3,0,0,0,12,0,0,0,10,0,0,0,7,0,0,0,13,0,0,0,11,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,5,0,0,0,1,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,2,0,0,0,13,0,0,0,3,0,0,0,15,0,0,0,7,0,0,0,10,0,0,0,14,0,0,0,11,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,240,0,0,0,12,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,120,0,0,0,80,0,0,0,60,0,0,0,48,0,0,0,40,0,0,0,34,0,0,0,30,0,0,0,27,0,0,0,24,0,0,0,22,0,0,0,20,0,0,0,18,0,0,0,17,0,0,0,16,0,0,0,0,0,0,0,12,0,0,0,6,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,8,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,120,0,0,0,37,0,0,0,2,0,0,0,120,0,0,0,18,0,0,0,1,0,0,0,0,0,0,0,64,0,0,0,16,0,0,0,80,0,0,0,128,0,0,0,192,0,0,0,144,0,0,0,208,0,0,0,32,0,0,0,96,0,0,0,48,0,0,0,112,0,0,0,160,0,0,0,224,0,0,0,176,0,0,0,240,0,0,0,0,0,0,0,32,0,0,0,16,0,0,0,48,0,0,0,0,0,0,0,64,0,0,0,16,0,0,0,80,0,0,0,32,0,0,0,96,0,0,0,48,0,0,0,112,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,10,0,0,0,12,0,0,0,8,0,0,0,14,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,11,0,0,0,15,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,10,0,0,0,12,0,0,0,8,0,0,0,14,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,11,0,0,0,15,0,0,0,0,0,0,0,128,0,0,0,64,0,0,0,208,0,0,0,32,0,0,0,240,0,0,0,48,0,0,0,224,0,0,0,16,0,0,0,192,0,0,0,80,0,0,0,144,0,0,0,112,0,0,0,176,0,0,0,96,0,0,0,160,0,0,0,0,1,5,4,64,65,69,68,128,129,133,132,192,193,197,196,2,3,7,6,66,67,71,70,130,131,135,134,194,195,199,198,10,11,15,14,74,75,79,78,138,139,143,142,202,203,207,206,8,9,13,12,72,73,77,76,136,137,141,140,200,201,205,204,16,17,21,20,80,81,85,84,144,145,149,148,208,209,213,212,18,19,23,22,82,83,87,86,146,147,151,150,210,211,215,214,26,27,31,30,90,91,95,94,154,155,159,158,218,219,223,222,24,25,29,28,88,89,93,92,152,153,157,156,216,217,221,220,32,33,37,36,96,97,101,100,160,161,165,164,224,225,229,228,34,35,39,38,98,99,103,102,162,163,167,166,226,227,231,230,42,43,47,46,106,107,111,110,170,171,175,174,234,235,239,238,40,41,45,44,104,105,109,108,168,169,173,172,232,233,237,236,48,49,53,52,112,113,117,116,176,177,181,180,240,241,245,244,50,51,55,54,114,115,119,118,178,179,183,182,242,243,247,246,58,59,63,62,122,123,127,126,186,187,191,190,250,251,255,254,56,57,61,60,120,121,125,124,184,185,189,188,248,249,253,252,0,1,5,4,32,33,37,36,2,3,7,6,34,35,39,38,10,11,15,14,42,43,47,46,8,9,13,12,40,41,45,44,16,17,21,20,48,49,53,52,18,19,23,22,50,51,55,54,26,27,31,30,58,59,63,62,24,25,29,28,56,57,61,60,87,77,80,72,79,84,79,0,0,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,83,67,45,62,109,95,98,83,101,99,111,110,100,97,114,121,32,61,61,32,70,65,76,83,69,0,0,0,0,0,0,105,109,97,103,101,47,115,121,115,47,115,116,114,99,111,100,101,99,46,99,0,0,0,0,97,100,118,97,110,99,101,77,82,80,116,114,0,0,0,0,48,32,61,61,32,112,83,66,45,62,99,66,105,116,76,101,102,116,0,0,0,0,0,0,100,101,116,97,99,104,95,83,66,0,0,0,0,0,0,0,112,83,67,45,62,87,77,73,83,67,80,46,98,102,66,105,116,115,116,114,101,97,109,70,111,114,109,97,116,32,61,61,32,83,80,65,84,73,65,76,32,38,38,32,112,83,67,45,62,87,77,73,83,67,80,46,99,78,117,109,79,102,83,108,105,99,101,77,105,110,117,115,49,72,32,43,32,112,83,67,45,62,87,77,73,83,67,80,46,99,78,117,109,79,102,83,108,105,99,101,77,105,110,117,115,49,86,32,61,61,32,48,0,0,0,0,0,0,0,0,65,108,108,111,99,97,116,101,73,110,100,101,120,84,97,98,108,101,0,0,0,0,0,0,97,108,108,111,99,97,116,101,66,105,116,73,79,73,110,102,111,0,0,0,0,0,0,0,48,32,60,61,32,40,73,51,50,41,99,66,105,116,115,32,38,38,32,99,66,105,116,115,32,60,61,32,49,54,0,0,112,101,101,107,66,105,116,49,54,0,0,0,0,0,0,0,102,108,117,115,104,66,105,116,49,54,0,0,0,0,0,0,40,112,73,79,45,62,105,77,97,115,107,32,38,32,49,41,32,61,61,32,48,0,0,0,48,32,60,61,32,40,73,51,50,41,99,66,105,116,115,32,38,38,32,99,66,105,116,115,32,60,61,32,51,50,0,0,103,101,116,66,105,116,51,50,0,0,0,0,0,0,0,0,99,66,105,116,115,32,60,61,32,49,54,0,0,0,0,0,112,117,116,66,105,116,49,54,122,0,0,0,0,0,0,0,48,32,61,61,32,117,105,66,105,116,115,32,62,62,32,99,66,105,116,115,0,0,0,0,112,117,116,66,105,116,49,54,0,0,0,0,0,0,0,0,112,117,116,66,105,116,51,50,0,0,0,0,0,0,0,0,48,32,61,61,32,40,112,73,79,45,62,99,66,105,116,115,85,115,101,100,32,37,32,56,41,0,0,0,0,0,0,0,100,101,116,97,99,104,73,83,87,114,105,116,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,171,170,170,170,1,0,0,0,0,0,0,0,2,0,0,0,205,204,204,204,2,0,0,0,171,170,170,170,2,0,0,0,147,36,73,146,2,0,0,0,0,0,0,0,3,0,0,0,228,56,142,227,3,0,0,0,205,204,204,204,3,0,0,0,163,139,46,186,3,0,0,0,171,170,170,170,3,0,0,0,158,216,137,157,3,0,0,0,147,36,73,146,3,0,0,0,137,136,136,136,3,0,0,0,0,0,0,0,4,0,0,0,241,240,240,240,4,0,0,0,228,56,142,227,4,0,0,0,230,53,148,215,4,0,0,0,205,204,204,204,4,0,0,0,196,48,12,195,4,0,0,0,163,139,46,186,4,0,0,0,201,66,22,178,4,0,0,0,171,170,170,170,4,0,0,0,62,10,215,163,4,0,0,0,158,216,137,157,4,0,0,0,238,37,180,151,4,0,0,0,147,36,73,146,4,0,0,0,9,203,61,141,4,0,0,0,137,136,136,136,4,0,0,0,67,8,33,132,4,0,0,0,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,0,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,5,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,8,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,9,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,10,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,11,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,12,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,13,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,14,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,15,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,16,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,17,149,107,140,217,254,62,214,71,187,37,235,23,72,171,12,241,45,173,199,245,141,106,221,67,167,168,162,153,53,38,26,233,80,166,196,60,39,165,55,77,169,22,49,66,199,235,237,186,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,18,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,19,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,20,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,21,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,22,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,23,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,24,143,215,254,227,219,232,207,74,132,193,233,127,97,54,179,39,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,25,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,26,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,27,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,28,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,29,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,64,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,30,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,65,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,58,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,66,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,59,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,61,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,62,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,63,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,31,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,32,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,33,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,34,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,35,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,36,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,37,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,38,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,39,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,40,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,41,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,42,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,43,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,44,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,45,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,46,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,47,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,48,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,49,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,50,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,51,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,52,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,53,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,54,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,55,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,56,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,57,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,68,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,69,36,195,221,111,3,78,254,75,177,133,61,119,118,141,201,72,100,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,201,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,105,65,108,105,103,110,109,101,110,116,67,111,114,114,101,99,116,105,111,110,32,62,61,32,115,105,122,101,111,102,40,118,111,105,100,42,41,0,0,0,106,120,114,103,108,117,101,108,105,98,47,74,88,82,71,108,117,101,46,99,0,0,0,0,80,75,65,108,108,111,99,65,108,105,103,110,101,100,0,0,105,65,108,105,103,110,109,101,110,116,67,111,114,114,101,99,116,105,111,110,32,43,32,99,98,32,60,61,32,99,95,99,98,66,108,111,99,107,83,105,122,101,0,0,0,0,0,0,48,32,61,61,32,40,40,115,105,122,101,95,116,41,112,82,101,116,117,114,110,101,100,80,116,114,32,37,32,105,65,108,105,103,110,41,0,0,0,0,42,112,112,79,114,105,103,80,116,114,32,60,61,32,40,85,56,42,41,112,112,79,114,105,103,80,116,114,0,0,0,0,80,75,70,114,101,101,65,108,105,103,110,101,100,0,0,0,56,60,0,0,1,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,60,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,72,60,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,88,60,0,0,1,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,136,60,0,0,1,0,0,0,0,0,0,0,2,0,0,0,16,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,1,0,0,0,56,61,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,2,0,0,0,104,62,0,0,1,0,0,0,0,0,0,0,4,0,0,0,16,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,3,0,0,0,120,62,0,0,1,0,0,0,0,0,0,0,6,0,0,0,32,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,2,0,0,0,232,60,0,0,1,0,0,0,0,0,0,0,7,0,0,0,32,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,3,0,0,0,168,60,0,0,3,0,0,0,7,0,0,0,1,0,0,0,24,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,8,0,0,0,1,0,0,0,152,60,0,0,3,0,0,0,7,0,0,0,1,0,0,0,24,0,0,0,64,0,0,0,2,0,0,0,3,0,0,0,8,0,0,0,1,0,0,0,248,60,0,0,3,0,0,0,7,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,8,0,0,0,1,0,0,0,184,60,0,0,3,0,0,0,7,0,0,0,1,0,0,0,32,0,0,0,64,0,0,0,2,0,0,0,3,0,0,0,8,0,0,0,1,0,0,0,88,61,0,0,3,0,0,0,7,0,0,0,2,0,0,0,48,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,1,0,0,0,40,61,0,0,3,0,0,0,7,0,0,0,3,0,0,0,48,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,2,0,0,0,72,62,0,0,3,0,0,0,7,0,0,0,4,0,0,0,48,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,3,0,0,0,248,61,0,0,3,0,0,0,7,0,0,0,3,0,0,0,64,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,2,0,0,0,56,62,0,0,3,0,0,0,7,0,0,0,4,0,0,0,64,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,3,0,0,0,136,61,0,0,3,0,0,0,7,0,0,0,6,0,0,0,96,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,32,0,0,0,2,0,0,0,152,61,0,0,3,0,0,0,7,0,0,0,7,0,0,0,96,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,32,0,0,0,3,0,0,0,24,62,0,0,3,0,0,0,7,0,0,0,6,0,0,0,128,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,32,0,0,0,2,0,0,0,200,61,0,0,3,0,0,0,7,0,0,0,7,0,0,0,128,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,32,0,0,0,3,0,0,0,200,60,0,0,4,0,0,0,7,0,0,0,1,0,0,0,32,0,0,0,80,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,8,61,0,0,4,0,0,0,7,0,0,0,1,0,0,0,32,0,0,0,16,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,104,61,0,0,4,0,0,0,7,0,0,0,2,0,0,0,64,0,0,0,16,0,0,0,2,0,0,0,4,0,0,0,16,0,0,0,1,0,0,0,232,61,0,0,4,0,0,0,7,0,0,0,3,0,0,0,64,0,0,0,16,0,0,0,2,0,0,0,4,0,0,0,16,0,0,0,2,0,0,0,40,62,0,0,4,0,0,0,7,0,0,0,4,0,0,0,64,0,0,0,16,0,0,0,2,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,8,62,0,0,4,0,0,0,7,0,0,0,6,0,0,0,128,0,0,0,16,0,0,0,2,0,0,0,4,0,0,0,32,0,0,0,2,0,0,0,168,61,0,0,4,0,0,0,7,0,0,0,7,0,0,0,128,0,0,0,16,0,0,0,2,0,0,0,4,0,0,0,32,0,0,0,3,0,0,0,216,60,0,0,4,0,0,0,7,0,0,0,1,0,0,0,32,0,0,0,112,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,24,61,0,0,4,0,0,0,7,0,0,0,1,0,0,0,32,0,0,0,48,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,120,61,0,0,4,0,0,0,7,0,0,0,2,0,0,0,64,0,0,0,48,0,0,0,2,0,0,0,4,0,0,0,16,0,0,0,1,0,0,0,184,61,0,0,4,0,0,0,7,0,0,0,7,0,0,0,128,0,0,0,48,0,0,0,2,0,0,0,4,0,0,0,32,0,0,0,3,0,0,0,104,60,0,0,3,0,0,0,7,0,0,0,8,0,0,0,16,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,1,0,0,0,120,60,0,0,3,0,0,0,7,0,0,0,10,0,0,0,16,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,1,0,0,0,72,61,0,0,3,0,0,0,7,0,0,0,9,0,0,0,32,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,1,0,0,0,216,61,0,0,4,0,0,0,4,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,88,63,0,0,5,0,0,0,4,0,0,0,1,0,0,0,40,0,0,0,16,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,1,0,0,0,136,62,0,0,4,0,0,0,4,0,0,0,2,0,0,0,64,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,16,0,0,0,1,0,0,0,104,63,0,0,5,0,0,0,4,0,0,0,2,0,0,0,80,0,0,0,16,0,0,0,5,0,0,0,5,0,0,0,16,0,0,0,1,0,0,0,152,62,0,0,3,0,0,0,6,0,0,0,1,0,0,0,24,0,0,0,0,0,0,0,100,0,0,0,3,0,0,0,8,0,0,0,1,0,0,0,168,62,0,0,4,0,0,0,6,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,100,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,184,62,0,0,5,0,0,0,6,0,0,0,1,0,0,0,40,0,0,0,0,0,0,0,100,0,0,0,5,0,0,0,8,0,0,0,1,0,0,0,200,62,0,0,6,0,0,0,6,0,0,0,1,0,0,0,48,0,0,0,0,0,0,0,100,0,0,0,6,0,0,0,8,0,0,0,1,0,0,0,216,62,0,0,7,0,0,0,6,0,0,0,1,0,0,0,56,0,0,0,0,0,0,0,100,0,0,0,7,0,0,0,8,0,0,0,1,0,0,0,232,62,0,0,8,0,0,0,6,0,0,0,1,0,0,0,64,0,0,0,0,0,0,0,100,0,0,0,8,0,0,0,8,0,0,0,1,0,0,0,120,63,0,0,4,0,0,0,6,0,0,0,1,0,0,0,32,0,0,0,16,0,0,0,100,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,136,63,0,0,5,0,0,0,6,0,0,0,1,0,0,0,40,0,0,0,16,0,0,0,100,0,0,0,5,0,0,0,8,0,0,0,1,0,0,0,152,63,0,0,6,0,0,0,6,0,0,0,1,0,0,0,48,0,0,0,16,0,0,0,100,0,0,0,6,0,0,0,8,0,0,0,1,0,0,0,168,63,0,0,7,0,0,0,6,0,0,0,1,0,0,0,56,0,0,0,16,0,0,0,100,0,0,0,7,0,0,0,8,0,0,0,1,0,0,0,184,63,0,0,8,0,0,0,6,0,0,0,1,0,0,0,64,0,0,0,16,0,0,0,100,0,0,0,8,0,0,0,8,0,0,0,1,0,0,0,200,63,0,0,9,0,0,0,6,0,0,0,1,0,0,0,72,0,0,0,16,0,0,0,100,0,0,0,9,0,0,0,8,0,0,0,1,0,0,0,248,62,0,0,3,0,0,0,6,0,0,0,2,0,0,0,48,0,0,0,0,0,0,0,100,0,0,0,3,0,0,0,16,0,0,0,1,0,0,0,8,63,0,0,4,0,0,0,6,0,0,0,2,0,0,0,64,0,0,0,0,0,0,0,100,0,0,0,4,0,0,0,16,0,0,0,1,0,0,0,24,63,0,0,5,0,0,0,6,0,0,0,2,0,0,0,80,0,0,0,0,0,0,0,100,0,0,0,5,0,0,0,16,0,0,0,1,0,0,0,40,63,0,0,6,0,0,0,6,0,0,0,2,0,0,0,96,0,0,0,0,0,0,0,100,0,0,0,6,0,0,0,16,0,0,0,1,0,0,0,56,63,0,0,7,0,0,0,6,0,0,0,2,0,0,0,112,0,0,0,0,0,0,0,100,0,0,0,7,0,0,0,16,0,0,0,1,0,0,0,72,63,0,0,8,0,0,0,6,0,0,0,2,0,0,0,128,0,0,0,0,0,0,0,100,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,216,63,0,0,4,0,0,0,6,0,0,0,2,0,0,0,64,0,0,0,16,0,0,0,100,0,0,0,4,0,0,0,16,0,0,0,1,0,0,0,232,63,0,0,5,0,0,0,6,0,0,0,2,0,0,0,80,0,0,0,16,0,0,0,100,0,0,0,5,0,0,0,16,0,0,0,1,0,0,0,248,63,0,0,6,0,0,0,6,0,0,0,2,0,0,0,96,0,0,0,16,0,0,0,100,0,0,0,6,0,0,0,16,0,0,0,1,0,0,0,8,64,0,0,7,0,0,0,6,0,0,0,2,0,0,0,112,0,0,0,16,0,0,0,100,0,0,0,7,0,0,0,16,0,0,0,1,0,0,0,24,64,0,0,8,0,0,0,6,0,0,0,2,0,0,0,128,0,0,0,16,0,0,0,100,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,40,64,0,0,9,0,0,0,6,0,0,0,2,0,0,0,144,0,0,0,16,0,0,0,100,0,0,0,9,0,0,0,16,0,0,0,1,0,0,0,88,62,0,0,4,0,0,0,8,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,101,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,56,64,0,0,3,0,0,0,1,0,0,0,1,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,64,0,0,3,0,0,0,2,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,64,0,0,3,0,0,0,3,0,0,0,1,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,65,76,83,69,0,0,0,70,114,101,101,68,101,115,99,77,101,116,97,100,97,116,97,0,0,0,0,0,0,0,0,128,76,0,0,112,64,0,0,120,64,0,0,136,76,0,0,104,64,0,0,120,64,0,0,144,76,0,0,104,64,0,0,120,64,0,0,0,0,0,0,46,106,120,114,0,0,0,0,46,119,100,112,0,0,0,0,46,104,100,112,0,0,0,0,48,32,61,61,32,112,118,97,114,45,62,86,84,46,112,115,122,86,97,108,91,117,67,111,117,110,116,32,45,32,49,93,0,0,0,0,0,0,0,0,106,120,114,103,108,117,101,108,105,98,47,74,88,82,77,101,116,97,46,99,0,0,0,0,82,101,97,100,80,114,111,112,118,97,114,0,0,0,0,0,70,65,76,83,69,0,0,0,45,49,32,33,61,32,112,68,69,45,62,117,67,111,117,110,116,0,0,0,0,0,0,0,87,114,105,116,101,87,109,112,68,69,0,0,0,0,0,0,45,49,32,33,61,32,112,68,69,45,62,117,86,97,108,117,101,79,114,79,102,102,115,101,116,0,0,0,0,0,0,0,112,98,68,97,116,97,0,0,105,87,105,100,116,104,32,62,32,50,0,0,0,0,0,0,106,120,114,103,108,117,101,108,105,98,47,74,88,82,71,108,117,101,80,70,67,46,99,0,82,71,66,57,54,70,108,111,97,116,95,82,71,66,49,50,56,70,105,120,101,100,0,0,82,71,66,57,54,70,108,111,97,116,95,82,71,66,49,50,56,70,108,111,97,116,0,0,82,71,66,52,56,72,97,108,102,95,82,71,66,54,52,72,97,108,102,0,0,0,0,0,66,71,82,50,52,95,66,71,82,51,50,0,0,0,0,0,82,71,66,57,54,70,108,111,97,116,95,82,71,66,69,0,46,98,109,112,0,0,0,0,46,116,105,102,0,0,0,0,46,116,105,102,102,0,0,0,168,60,0,0,152,60,0,0,1,0,0,0,152,60,0,0,168,60,0,0,2,0,0,0,168,60,0,0,248,60,0,0,3,0,0,0,168,60,0,0,184,60,0,0,4,0,0,0,184,60,0,0,168,60,0,0,5,0,0,0,168,60,0,0,88,60,0,0,6,0,0,0,88,60,0,0,168,60,0,0,7,0,0,0,152,60,0,0,88,60,0,0,8,0,0,0,88,60,0,0,152,60,0,0,9,0,0,0,8,62,0,0,168,61,0,0,10,0,0,0,168,61,0,0,8,62,0,0,11,0,0,0,136,61,0,0,152,61,0,0,12,0,0,0,152,61,0,0,136,61,0,0,13,0,0,0,152,61,0,0,200,61,0,0,14,0,0,0,200,61,0,0,152,61,0,0,15,0,0,0,136,61,0,0,24,62,0,0,14,0,0,0,24,62,0,0,136,61,0,0,15,0,0,0,56,62,0,0,72,62,0,0,16,0,0,0,72,62,0,0,56,62,0,0,17,0,0,0,248,61,0,0,40,61,0,0,16,0,0,0,40,61,0,0,248,61,0,0,17,0,0,0,184,60,0,0,152,60,0,0,18,0,0,0,152,60,0,0,184,60,0,0,19,0,0,0,152,61,0,0,24,62,0,0,20,0,0,0,24,62,0,0,152,61,0,0,21,0,0,0,120,62,0,0,232,60,0,0,22,0,0,0,232,60,0,0,120,62,0,0,23,0,0,0,56,61,0,0,232,60,0,0,24,0,0,0,232,60,0,0,56,61,0,0,25,0,0,0,40,61,0,0,152,61,0,0,26,0,0,0,152,61,0,0,40,61,0,0,27,0,0,0,248,61,0,0,152,61,0,0,28,0,0,0,152,61,0,0,248,61,0,0,29,0,0,0,232,61,0,0,168,61,0,0,30,0,0,0,168,61,0,0,232,61,0,0,31,0,0,0,88,62,0,0,152,61,0,0,32,0,0,0,152,61,0,0,88,62,0,0,33,0,0,0,40,62,0,0,168,61,0,0,34,0,0,0,168,61,0,0,40,62,0,0,35,0,0,0,56,62,0,0,152,61,0,0,36,0,0,0,152,61,0,0,56,62,0,0,37,0,0,0,72,62,0,0,152,61,0,0,38,0,0,0,152,61,0,0,72,62,0,0,39,0,0,0,104,62,0,0,232,60,0,0,40,0,0,0,232,60,0,0,104,62,0,0,41,0,0,0,104,60], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([168,60,0,0,42,0,0,0,168,60,0,0,104,60,0,0,43,0,0,0,120,60,0,0,168,60,0,0,44,0,0,0,168,60,0,0,120,60,0,0,45,0,0,0,72,61,0,0,88,61,0,0,46,0,0,0,88,61,0,0,72,61,0,0,47,0,0,0,8,61,0,0,200,60,0,0,48,0,0,0,200,60,0,0,8,61,0,0,49,0,0,0,24,61,0,0,216,60,0,0,48,0,0,0,216,60,0,0,24,61,0,0,49,0,0,0,120,61,0,0,8,61,0,0,50,0,0,0,120,61,0,0,248,60,0,0,51,0,0,0,24,61,0,0,8,61,0,0,52,0,0,0,216,60,0,0,8,61,0,0,53,0,0,0,24,61,0,0,248,60,0,0,54,0,0,0,216,60,0,0,248,60,0,0,55,0,0,0,72,60,0,0,88,60,0,0,56,0,0,0,136,60,0,0,88,60,0,0,57,0,0,0,88,61,0,0,168,60,0,0,58,0,0,0,104,61,0,0,8,61,0,0,59,0,0,0,104,61,0,0,248,60,0,0,60,0,0,0,232,60,0,0,88,60,0,0,61,0,0,0,152,61,0,0,168,60,0,0,62,0,0,0,200,61,0,0,168,60,0,0,63,0,0,0,168,61,0,0,8,61,0,0,64,0,0,0,168,61,0,0,248,60,0,0,65,0,0,0,184,61,0,0,8,61,0,0,66,0,0,0,184,61,0,0,248,60,0,0,67,0,0,0,56,61,0,0,88,60,0,0,68,0,0,0,120,62,0,0,88,60,0,0,69,0,0,0,40,61,0,0,168,60,0,0,70,0,0,0,248,61,0,0,168,60,0,0,71,0,0,0,136,61,0,0,168,60,0,0,72,0,0,0,24,62,0,0,168,60,0,0,73,0,0,0,232,61,0,0,8,61,0,0,74,0,0,0,232,61,0,0,248,60,0,0,75,0,0,0,8,62,0,0,8,61,0,0,76,0,0,0,8,62,0,0,248,60,0,0,77,0,0,0,104,62,0,0,88,60,0,0,78,0,0,0,72,62,0,0,168,60,0,0,79,0,0,0,56,62,0,0,168,60,0,0,80,0,0,0,40,62,0,0,8,61,0,0,81,0,0,0,40,62,0,0,248,60,0,0,82,0,0,0,72,61,0,0,168,60,0,0,83,0,0,0,88,62,0,0,168,60,0,0,84,0,0,0,200,61,0,0,168,61,0,0,56,60,0,0,104,60,0,0,56,60,0,0,120,60,0,0,56,60,0,0,200,60,0,0,200,60,0,0,184,60,0,0,184,60,0,0,200,60,0,0,73,73,0,0,0,0,0,0,89,95,79,78,76,89,32,60,61,32,112,73,68,45,62,87,77,80,46,119,109,105,83,67,80,46,99,102,67,111,108,111,114,70,111,114,109,97,116,32,38,38,32,112,73,68,45,62,87,77,80,46,119,109,105,83,67,80,46,99,102,67,111,108,111,114,70,111,114,109,97,116,32,60,32,67,70,84,95,77,65,88,0,0,0,0,0,0,106,120,114,103,108,117,101,108,105,98,47,74,88,82,71,108,117,101,68,101,99,46,99,0,80,75,73,109,97,103,101,68,101,99,111,100,101,95,73,110,105,116,105,97,108,105,122,101,95,87,77,80,0,0,0,0,66,68,95,83,72,79,82,84,32,61,61,32,112,73,68,45,62,87,77,80,46,119,109,105,83,67,80,46,98,100,66,105,116,68,101,112,116,104,32,124,124,32,66,68,95,76,79,78,71,32,61,61,32,112,73,68,45,62,87,77,80,46,119,109,105,83,67,80,46,98,100,66,105,116,68,101,112,116,104,0,112,73,68,45,62,87,77,80,46,119,109,105,68,69,77,105,115,99,46,117,73,109,97,103,101,79,102,102,115,101,116,32,62,61,32,112,73,68,45,62,111,102,102,83,116,97,114,116,0,0,0,0,0,0,0,0,74,88,82,95,66,101,103,105,110,68,101,99,111,100,105,110,103,77,66,82,111,119,115,0,112,73,68,45,62,87,77,80,46,119,109,105,68,69,77,105,115,99,46,117,65,108,112,104,97,79,102,102,115,101,116,32,62,61,32,112,73,68,45,62,111,102,102,83,116,97,114,116,0,0,0,0,0,0,0,0,74,88,82,95,66,101,103,105,110,68,101,99,111,100,105,110,103,77,66,82,111,119,115,95,65,108,112,104,97,0,0,0,80,75,73,109,97,103,101,68,101,99,111,100,101,95,67,111,112,121,95,87,77,80,0,0,117,86,97,108,117,101,32,60,32,79,95,77,65,88,0,0,80,97,114,115,101,80,70,68,69,110,116,114,121,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,73,109,97,103,101,68,101,115,99,114,105,112,116,105,111,110,46,118,116,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,67,97,109,101,114,97,77,97,107,101,46,118,116,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,67,97,109,101,114,97,77,111,100,101,108,46,118,116,0,0,0,0,0,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,83,111,102,116,119,97,114,101,46,118,116,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,68,97,116,101,84,105,109,101,46,118,116,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,65,114,116,105,115,116,46,118,116,0,0,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,67,111,112,121,114,105,103,104,116,46,118,116,0,0,68,80,75,86,84,95,85,73,50,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,82,97,116,105,110,103,83,116,97,114,115,46,118,116,0,0,68,80,75,86,84,95,85,73,50,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,82,97,116,105,110,103,86,97,108,117,101,46,118,116,0,0,40,68,80,75,86,84,95,66,89,82,69,70,32,124,32,68,80,75,86,84,95,85,73,49,41,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,67,97,112,116,105,111,110,46,118,116,0,0,0,0,0,0,40,85,56,42,41,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,67,97,112,116,105,111,110,46,86,84,46,112,119,115,122,86,97,108,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,67,97,112,116,105,111,110,46,86,84,46,112,98,86,97,108,0,0,0,0,0,0,0,48,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,67,97,112,116,105,111,110,46,86,84,46,112,119,115,122,86,97,108,91,117,67,111,117,110,116,47,115,105,122,101,111,102,40,85,49,54,41,32,45,32,49,93,0,0,0,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,68,111,99,117,109,101,110,116,78,97,109,101,46,118,116,0,0,0,0,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,80,97,103,101,78,97,109,101,46,118,116,0,0,0,68,80,75,86,84,95,85,73,52,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,80,97,103,101,78,117,109,98,101,114,46,118,116,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,112,73,68,45,62,87,77,80,46,115,68,101,115,99,77,101,116,97,100,97,116,97,46,112,118,97,114,72,111,115,116,67,111,109,112,117,116,101,114,46,118,116,0,0,0,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,87,77,80,84,97,103,58,32,37,100,40,37,35,120,41,44,32,37,100,44,32,37,100,44,32,37,35,120,13,10,0,0,0,0,0,68,80,75,86,84,95,76,80,83,84,82,32,61,61,32,118,97,114,46,118,116,0,0,0,106,120,114,103,108,117,101,108,105,98,47,74,88,82,71,108,117,101,69,110,99,46,99,0,67,97,108,99,77,101,116,97,100,97,116,97,83,105,122,101,76,80,83,84,82,0,0,0,68,80,75,86,84,95,76,80,87,83,84,82,32,61,61,32,118,97,114,46,118,116,0,0,67,97,108,99,77,101,116,97,100,97,116,97,83,105,122,101,76,80,87,83,84,82,0,0,68,80,75,86,84,95,85,73,50,32,61,61,32,118,97,114,46,118,116,0,0,0,0,0,67,97,108,99,77,101,116,97,100,97,116,97,83,105,122,101,85,73,50,0,0,0,0,0,68,80,75,86,84,95,85,73,52,32,61,61,32,118,97,114,46,118,116,0,0,0,0,0,67,97,108,99,77,101,116,97,100,97,116,97,83,105,122,101,85,73,52,0,0,0,0,0,70,65,76,83,69,0,0,0,67,111,112,121,68,101,115,99,77,101,116,97,100,97,116,97,0,0,0,0,0,0,0,0,68,80,75,86,84,95,69,77,80,84,89,32,61,61,32,112,118,97,114,68,115,116,45,62,118,116,0,0,0,0,0,0,42,112,117,105,67,117,114,114,68,101,115,99,77,101,116,97,100,97,116,97,79,102,102,115,101,116,32,60,61,32,112,68,69,77,105,115,99,45,62,117,68,101,115,99,77,101,116,97,100,97,116,97,66,121,116,101,67,111,117,110,116,0,0,0,87,114,105,116,101,68,101,115,99,77,101,116,97,100,97,116,97,0,0,0,0,0,0,0,73,73,0,0,0,0,0,0,13,1,2,0,1,0,0,0,255,255,255,255,14,1,2,0,1,0,0,0,255,255,255,255,15,1,2,0,1,0,0,0,255,255,255,255,16,1,2,0,1,0,0,0,255,255,255,255,29,1,2,0,1,0,0,0,255,255,255,255,41,1,3,0,2,0,0,0,255,255,255,255,49,1,2,0,1,0,0,0,255,255,255,255,50,1,2,0,1,0,0,0,255,255,255,255,59,1,2,0,1,0,0,0,255,255,255,255,60,1,2,0,1,0,0,0,255,255,255,255,70,71,3,0,1,0,0,0,255,255,255,255,73,71,3,0,1,0,0,0,255,255,255,255,152,130,2,0,1,0,0,0,255,255,255,255,155,156,1,0,1,0,0,0,255,255,255,255,188,2,1,0,1,0,0,0,255,255,255,255,187,131,1,0,1,0,0,0,255,255,255,255,73,134,1,0,1,0,0,0,255,255,255,255,105,135,4,0,1,0,0,0,255,255,255,255,115,135,7,0,1,0,0,0,255,255,255,255,37,136,4,0,1,0,0,0,255,255,255,255,1,188,1,0,16,0,0,0,255,255,255,255,2,188,4,0,1,0,0,0,255,255,255,255,128,188,4,0,1,0,0,0,255,255,255,255,129,188,4,0,1,0,0,0,255,255,255,255,130,188,11,0,1,0,0,0,255,255,255,255,131,188,11,0,1,0,0,0,255,255,255,255,192,188,4,0,1,0,0,0,255,255,255,255,193,188,4,0,1,0,0,0,255,255,255,255,194,188,4,0,1,0,0,0,255,255,255,255,195,188,4,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,105,122,101,111,102,73,70,68,69,110,116,114,121,32,42,32,115,105,122,101,111,102,40,119,109,112,68,69,115,41,32,47,32,115,105,122,101,111,102,40,119,109,112,68,69,115,91,48,93,41,32,43,32,115,105,122,101,111,102,40,85,51,50,41,32,62,32,48,120,50,48,0,0,0,0,0,0,0,0,87,114,105,116,101,67,111,110,116,97,105,110,101,114,80,114,101,0,0,0,0,0,0,0,111,102,102,80,111,115,32,60,61,32,79,70,70,83,69,84,95,79,70,95,80,70,68,0,87,77,80,95,116,97,103,68,111,99,117,109,101,110,116,78,97,109,101,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,87,77,80,95,116,97,103,73,109,97,103,101,68,101,115,99,114,105,112,116,105,111,110,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,87,77,80,95,116,97,103,67,97,109,101,114,97,77,97,107,101,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,87,77,80,95,116,97,103,67,97,109,101,114,97,77,111,100,101,108,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,87,77,80,95,116,97,103,80,97,103,101,78,97,109,101,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,87,77,80,95,116,97,103,80,97,103,101,78,117,109,98,101,114,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,87,77,80,95,116,97,103,83,111,102,116,119,97,114,101,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,87,77,80,95,116,97,103,68,97,116,101,84,105,109,101,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,87,77,80,95,116,97,103,65,114,116,105,115,116,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,87,77,80,95,116,97,103,72,111,115,116,67,111,109,112,117,116,101,114,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,87,77,80,95,116,97,103,82,97,116,105,110,103,83,116,97,114,115,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,87,77,80,95,116,97,103,82,97,116,105,110,103,86,97,108,117,101,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,87,77,80,95,116,97,103,67,111,112,121,114,105,103,104,116,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,87,77,80,95,116,97,103,67,97,112,116,105,111,110,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,87,77,80,95,116,97,103,88,77,80,77,101,116,97,100,97,116,97,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,87,77,80,95,116,97,103,73,80,84,67,78,65,65,77,101,116,97,100,97,116,97,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,87,77,80,95,116,97,103,80,104,111,116,111,115,104,111,112,77,101,116,97,100,97,116,97,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,87,77,80,95,116,97,103,69,88,73,70,77,101,116,97,100,97,116,97,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,87,77,80,95,116,97,103,73,99,99,80,114,111,102,105,108,101,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,87,77,80,95,116,97,103,71,80,83,73,110,102,111,77,101,116,97,100,97,116,97,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,87,77,80,95,116,97,103,80,105,120,101,108,70,111,114,109,97,116,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,87,77,80,95,116,97,103,84,114,97,110,115,102,111,114,109,97,116,105,111,110,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,87,77,80,95,116,97,103,73,109,97,103,101,87,105,100,116,104,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,87,77,80,95,116,97,103,73,109,97,103,101,72,101,105,103,104,116,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,87,77,80,95,116,97,103,87,105,100,116,104,82,101,115,111,108,117,116,105,111,110,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,87,77,80,95,116,97,103,72,101,105,103,104,116,82,101,115,111,108,117,116,105,111,110,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,87,77,80,95,116,97,103,73,109,97,103,101,79,102,102,115,101,116,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,87,77,80,95,116,97,103,73,109,97,103,101,66,121,116,101,67,111,117,110,116,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,87,77,80,95,116,97,103,65,108,112,104,97,79,102,102,115,101,116,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,87,77,80,95,116,97,103,65,108,112,104,97,66,121,116,101,67,111,117,110,116,32,61,61,32,119,109,112,68,69,46,117,84,97,103,0,0,0,0,0,48,32,61,61,32,40,111,102,102,80,111,115,32,38,32,49,41,0,0,0,0,0,0,0,112,68,69,77,105,115,99,45,62,117,67,111,108,111,114,80,114,111,102,105,108,101,79,102,102,115,101,116,32,61,61,32,111,102,102,80,111,115,32,124,124,32,112,68,69,77,105,115,99,45,62,117,68,101,115,99,77,101,116,97,100,97,116,97,79,102,102,115,101,116,32,61,61,32,111,102,102,80,111,115,32,124,124,32,112,68,69,77,105,115,99,45,62,117,88,77,80,77,101,116,97,100,97,116,97,79,102,102,115,101,116,32,61,61,32,111,102,102,80,111,115,32,124,124,32,112,68,69,77,105,115,99,45,62,117,73,80,84,67,78,65,65,77,101,116,97,100,97,116,97,79,102,102,115,101,116,32,61,61,32,111,102,102,80,111,115,32,124,124,32,112,68,69,77,105,115,99,45,62,117,80,104,111,116,111,115,104,111,112,77,101,116,97,100,97,116,97,79,102,102,115,101,116,32,61,61,32,111,102,102,80,111,115,32,124,124,32,112,68,69,77,105,115,99,45,62,117,69,88,73,70,77,101,116,97,100,97,116,97,79,102,102,115,101,116,32,61,61,32,111,102,102,80,111,115,32,124,124,32,112,68,69,77,105,115,99,45,62,117,71,80,83,73,110,102,111,77,101,116,97,100,97,116,97,79,102,102,115,101,116,32,61,61,32,111,102,102,80,111,115,0,0,0,0,112,68,69,77,105,115,99,45,62,117,73,109,97,103,101,79,102,102,115,101,116,32,61,61,32,111,102,102,80,111,115,0,193,188,4,0,1,0,0,0,0,0,0,0,0,0,0,0,194,188,4,0,1,0,0,0,0,0,0,0,0,0,0,0,195,188,4,0,1,0,0,0,0,0,0,0,0,0,0,0,80,75,73,109,97,103,101,69,110,99,111,100,101,95,83,101,116,68,101,115,99,114,105,112,116,105,118,101,77,101,116,97,100,97,116,97,95,87,77,80,0,0,0,0,0,0,0,0,66,65,78,68,69,68,69,78,67,83,84,65,84,69,95,85,78,73,78,73,84,73,65,76,73,90,69,68,32,61,61,32,112,73,69,45,62,87,77,80,46,101,66,97,110,100,101,100,69,110,99,83,116,97,116,101,0,0,0,0,0,0,0,0,80,75,73,109,97,103,101,69,110,99,111,100,101,95,87,114,105,116,101,80,105,120,101,108,115,95,87,77,80,0,0,0,80,75,73,109,97,103,101,69,110,99,111,100,101,95,87,114,105,116,101,80,105,120,101,108,115,66,97,110,100,101,100,66,101,103,105,110,95,87,77,80,0,0,0,0,0,0,0,0,102,80,73,0,0,0,0,0,80,75,73,109,97,103,101,69,110,99,111,100,101,95,87,114,105,116,101,80,105,120,101,108,115,66,97,110,100,101,100,95,87,77,80,0,0,0,0,0,48,32,61,61,32,111,102,102,83,116,97,114,116,0,0,0,112,73,69,45,62,87,77,80,46,119,109,105,83,67,80,95,65,108,112,104,97,46,112,87,83,116,114,101,97,109,32,61,61,32,112,73,69,45,62,87,77,80,46,119,109,105,83,67,80,46,112,87,83,116,114,101,97,109,0,0,0,0,0,0,66,65,78,68,69,68,69,78,67,83,84,65,84,69,95,69,78,67,79,68,73,78,71,32,61,61,32,112,73,69,45,62,87,77,80,46,101,66,97,110,100,101,100,69,110,99,83,116,97,116,101,0,0,0,0,0,80,75,73,109,97,103,101,69,110,99,111,100,101,95,87,114,105,116,101,80,105,120,101,108,115,66,97,110,100,101,100,69,110,100,95,87,77,80,0,0,112,65,108,112,104,97,83,116,114,101,97,109,32,33,61,32,112,77,97,105,110,83,116,114,101,97,109,0,0,0,0,0,99,98,66,121,116,101,115,67,111,112,105,101,100,32,61,61,32,99,98,65,108,112,104,97,0,0,0,0,0,0,0,0,83,101,116,77,101,116,97,100,97,116,97,0,0,0,0,0,114,98,0,0,0,0,0,0,48,32,61,61,32,112,73,69,45,62,87,77,80,46,98,72,97,115,65,108,112,104,97,32,124,124,32,40,112,80,97,114,97,109,45,62,117,65,108,112,104,97,77,111,100,101,32,61,61,32,50,41,0,0,0,0,106,120,114,103,108,117,101,108,105,98,47,74,88,82,71,108,117,101,84,67,85,116,105,108,46,99,0,0,0,0,0,0,80,75,73,109,97,103,101,69,110,99,111,100,101,95,84,114,97,110,115,99,111,100,101,95,87,77,80,0,0,0,0,0,112,80,97,114,97,109,45,62,117,65,108,112,104,97,77,111,100,101,32,60,61,32,51,0,112,73,68,45,62,87,77,80,46,119,109,105,68,69,77,105,115,99,46,117,65,108,112,104,97,79,102,102,115,101,116,32,62,32,48,0,0,0,0,0,102,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,202,0,0,0,0,0,0,0,203,0,0,0,0,0,0,0,204,0,0,0,0,0,0,0,205,0,0,0,0,0,0,0,206,0,0,0,0,0,0,0,207,0,0,0,0,0,0,0,208,0,0,0,0,0,0,0,160,102,0,0,192,101,0,0,240,101,0,0,168,102,0,0,184,101,0,0,248,101,0,0,176,102,0,0,184,101,0,0,248,101,0,0,184,102,0,0,184,101,0,0,248,101,0,0,192,102,0,0,184,101,0,0,248,101,0,0,200,102,0,0,200,101,0,0,0,102,0,0,208,102,0,0,208,101,0,0,8,102,0,0,216,102,0,0,216,101,0,0,16,102,0,0,224,102,0,0,224,101,0,0,24,102,0,0,232,102,0,0,232,101,0,0,32,102,0,0,46,98,109,112,0,0,0,0,46,112,112,109,0,0,0,0,46,112,103,109,0,0,0,0,46,112,110,109,0,0,0,0,46,112,102,109,0,0,0,0,46,116,105,102,0,0,0,0,46,104,100,114,0,0,0,0,46,105,121,117,118,0,0,0,46,121,117,118,52,50,50,0,46,121,117,118,52,52,52], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([66,77,0,0,0,0,0,0,35,63,82,65,68,73,65,78,67,69,10,70,79,82,77,65,84,61,51,50,45,98,105,116,95,114,108,101,95,114,103,98,101,10,10,0,0,0,0,0,45,89,32,37,100,32,43,88,32,37,100,10,0,0,0,0,35,63,82,65,68,73,65,78,67,69,10,0,0,0,0,0,70,79,82,77,65,84,0,0,70,79,82,77,65,84,61,51,50,45,98,105,116,95,114,108,101,95,114,103,98,101,10,0,45,89,0,0,0,0,0,0,68,111,101,115,110,39,116,32,115,117,112,112,111,114,116,32,99,111,109,112,114,101,115,115,101,100,32,72,68,82,32,102,105,108,101,115,46,10,0,0,37,99,37,99,10,37,117,10,37,117,10,37,115,10,0,0,45,49,46,48,48,48,48,0,37,99,37,99,10,37,117,32,37,117,10,37,117,10,0,0,99,98,32,60,32,115,105,122,101,111,102,50,40,98,117,102,41,0,0,0,0,0,0,0,106,120,114,116,101,115,116,108,105,98,47,74,88,82,84,101,115,116,80,110,109,46,99,0,87,114,105,116,101,80,78,77,72,101,97,100,101,114,0,0,88,60,0,0,136,60,0,0,168,60,0,0,88,61,0,0,80,53,0,0,0,0,0,0,37,117,32,37,117,0,0,0,80,54,0,0,0,0,0,0,80,70,0,0,0,0,0,0,37,117,0,0,0,0,0,0,45,49,32,33,61,32,112,68,69,45,62,117,67,111,117,110,116,0,0,0,0,0,0,0,106,120,114,116,101,115,116,108,105,98,47,74,88,82,84,101,115,116,84,105,102,46,99,0,87,114,105,116,101,84,105,102,68,69,0,0,0,0,0,0,45,49,32,33,61,32,112,68,69,45,62,117,86,97,108,117,101,79,114,79,102,102,115,101,116,0,0,0,0,0,0,0,73,73,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,16,39,0,0,16,39,0,0,255,255,255,255,16,39,0,0,16,39,0,0,0,1,4,0,1,0,0,0,255,255,255,255,1,1,4,0,1,0,0,0,255,255,255,255,2,1,3,0,255,255,255,255,255,255,255,255,3,1,3,0,1,0,0,0,1,0,0,0,6,1,3,0,1,0,0,0,255,255,255,255,17,1,4,0,1,0,0,0,255,255,255,255,18,1,3,0,1,0,0,0,1,0,0,0,21,1,3,0,1,0,0,0,255,255,255,255,22,1,4,0,1,0,0,0,255,255,255,255,23,1,4,0,1,0,0,0,255,255,255,255,26,1,5,0,1,0,0,0,255,255,255,255,27,1,5,0,1,0,0,0,255,255,255,255,28,1,3,0,1,0,0,0,1,0,0,0,40,1,3,0,1,0,0,0,2,0,0,0,83,1,3,0,255,255,255,255,255,255,255,255,0,0,0,0,84,73,70,95,116,97,103,73,109,97,103,101,87,105,100,116,104,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,87,114,105,116,101,84,105,102,72,101,97,100,101,114,0,0,84,73,70,95,116,97,103,73,109,97,103,101,76,101,110,103,116,104,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,84,73,70,95,116,97,103,66,105,116,115,80,101,114,83,97,109,112,108,101,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,84,73,70,95,116,97,103,67,111,109,112,114,101,115,115,105,111,110,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,84,73,70,95,116,97,103,80,104,111,116,111,109,101,116,114,105,99,73,110,116,101,114,112,114,101,116,97,116,105,111,110,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,84,73,70,95,116,97,103,83,116,114,105,112,79,102,102,115,101,116,115,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,0,84,73,70,95,116,97,103,79,114,105,101,110,116,97,116,105,111,110,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,84,73,70,95,116,97,103,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,84,73,70,95,116,97,103,82,111,119,115,80,101,114,83,116,114,105,112,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,0,84,73,70,95,116,97,103,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,84,73,70,95,116,97,103,88,82,101,115,111,108,117,116,105,111,110,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,84,73,70,95,116,97,103,89,82,101,115,111,108,117,116,105,111,110,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,84,73,70,95,116,97,103,80,108,97,110,97,114,67,111,110,102,105,103,117,114,97,116,105,111,110,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,0,0,84,73,70,95,116,97,103,82,101,115,111,108,117,116,105,111,110,85,110,105,116,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,76,1,3,0,1,0,0,0,1,0,0,0,0,0,0,0,82,1,3,0,1,0,0,0,1,0,0,0,0,0,0,0,84,73,70,95,116,97,103,83,97,109,112,108,101,70,111,114,109,97,116,32,61,61,32,116,105,102,68,69,46,117,84,97,103,0,0,0,0,0,0,0,116,105,102,68,69,77,105,115,99,46,111,102,102,66,105,116,115,80,101,114,83,97,109,112,108,101,32,61,61,32,111,102,102,80,111,115,0,0,0,0,116,105,102,68,69,77,105,115,99,46,111,102,102,83,97,109,112,108,101,70,111,114,109,97,116,32,61,61,32,111,102,102,80,111,115,0,0,0,0,0,116,105,102,68,69,77,105,115,99,46,111,102,102,88,82,101,115,111,108,117,116,105,111,110,32,61,61,32,111,102,102,80,111,115,0,0,0,0,0,0,116,105,102,68,69,77,105,115,99,46,111,102,102,89,82,101,115,111,108,117,116,105,111,110,32,61,61,32,111,102,102,80,111,115,0,0,0,0,0,0,112,73,69,45,62,111,102,102,80,105,120,101,108,32,61,61,32,111,102,102,80,111,115,0,85,110,114,101,99,111,103,110,105,122,101,100,32,84,73,70,84,97,103,58,32,37,100,40,37,35,120,41,44,32,37,100,44,32,37,100,13,10,0,0,73,73,0,0,0,0,0,0,77,77,0,0,0,0,0,0,48,32,61,61,32,112,82,101,99,116,45,62,88,32,38,38,32,112,73,68,45,62,117,87,105,100,116,104,32,61,61,32,40,85,51,50,41,112,82,101,99,116,45,62,87,105,100,116,104,0,0,0,0,0,0,0,80,75,73,109,97,103,101,68,101,99,111,100,101,95,67,111,112,121,95,84,73,70,0,0,99,98,76,105,110,101,32,60,61,32,99,98,83,116,114,105,100,101,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+28528);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

   
  Module["_memset"] = _memset;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;


  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  var _abs=Math_abs;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      dir = dir || '/tmp';
      var folder = FS.findObject(dir);
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + (Math.random() * 25)|0);
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      assert(result.length <= 255);
      writeAsciiToMemory(result, s);
      return s;
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  var _BDtoILow=true;

  var _BDtoIHigh=true;


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

   
  Module["_strcpy"] = _strcpy;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iidd(x) { Module["printErr"]("Invalid function pointer called with signature 'iidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidd(index,a1,a2,a3) {
  try {
    return Module["dynCall_iidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iidd": nullFunc_iidd, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "invoke_iiii": invoke_iiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iidd": invoke_iidd, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "_fabs": _fabs, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_fread": _fread, "_fmod": _fmod, "_lseek": _lseek, "__reallyNegative": __reallyNegative, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___assert_fail": ___assert_fail, "_write": _write, "_fsync": _fsync, "_sbrk": _sbrk, "_rmdir": _rmdir, "_fflush": _fflush, "_tmpnam": _tmpnam, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_open": _open, "_remove": _remove, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_unlink": _unlink, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "__formatString": __formatString, "_fseek": _fseek, "_pread": _pread, "_mkport": _mkport, "_fclose": _fclose, "_feof": _feof, "_ftell": _ftell, "___errno_location": ___errno_location, "_recv": _recv, "_fgetc": _fgetc, "_copysign": _copysign, "_printf": _printf, "_read": _read, "_copysignl": _copysignl, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_abs": _abs, "_fgets": _fgets, "_fopen": _fopen, "_close": _close, "_fmodl": _fmodl, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iidd=env.nullFunc_iidd;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iidd=env.invoke_iidd;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var _fabs=env._fabs;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _fread=env._fread;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var __reallyNegative=env.__reallyNegative;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___assert_fail=env.___assert_fail;
  var _write=env._write;
  var _fsync=env._fsync;
  var _sbrk=env._sbrk;
  var _rmdir=env._rmdir;
  var _fflush=env._fflush;
  var _tmpnam=env._tmpnam;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _open=env._open;
  var _remove=env._remove;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _unlink=env._unlink;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var __formatString=env.__formatString;
  var _fseek=env._fseek;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var _feof=env._feof;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _copysign=env._copysign;
  var _printf=env._printf;
  var _read=env._read;
  var _copysignl=env._copysignl;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _abs=env._abs;
  var _fgets=env._fgets;
  var _fopen=env._fopen;
  var _close=env._close;
  var _fmodl=env._fmodl;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _WmpDecAppUsage($szExe) {
 $szExe = $szExe|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer101 = 0, $vararg_buffer103 = 0, $vararg_buffer105 = 0, $vararg_buffer107 = 0, $vararg_buffer109 = 0, $vararg_buffer11 = 0, $vararg_buffer111 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer117 = 0, $vararg_buffer119 = 0, $vararg_buffer121 = 0, $vararg_buffer123 = 0, $vararg_buffer125 = 0, $vararg_buffer127 = 0;
 var $vararg_buffer129 = 0, $vararg_buffer13 = 0, $vararg_buffer131 = 0, $vararg_buffer133 = 0, $vararg_buffer135 = 0, $vararg_buffer137 = 0, $vararg_buffer139 = 0, $vararg_buffer141 = 0, $vararg_buffer143 = 0, $vararg_buffer145 = 0, $vararg_buffer147 = 0, $vararg_buffer149 = 0, $vararg_buffer15 = 0, $vararg_buffer151 = 0, $vararg_buffer153 = 0, $vararg_buffer155 = 0, $vararg_buffer157 = 0, $vararg_buffer159 = 0, $vararg_buffer161 = 0, $vararg_buffer163 = 0;
 var $vararg_buffer165 = 0, $vararg_buffer167 = 0, $vararg_buffer169 = 0, $vararg_buffer17 = 0, $vararg_buffer171 = 0, $vararg_buffer173 = 0, $vararg_buffer175 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0;
 var $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0;
 var $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer175 = sp + 352|0;
 $vararg_buffer173 = sp + 704|0;
 $vararg_buffer171 = sp + 696|0;
 $vararg_buffer169 = sp + 688|0;
 $vararg_buffer167 = sp + 680|0;
 $vararg_buffer165 = sp + 672|0;
 $vararg_buffer163 = sp + 664|0;
 $vararg_buffer161 = sp + 656|0;
 $vararg_buffer159 = sp + 648|0;
 $vararg_buffer157 = sp + 640|0;
 $vararg_buffer155 = sp + 632|0;
 $vararg_buffer153 = sp + 624|0;
 $vararg_buffer151 = sp + 616|0;
 $vararg_buffer149 = sp + 608|0;
 $vararg_buffer147 = sp + 600|0;
 $vararg_buffer145 = sp + 592|0;
 $vararg_buffer143 = sp + 584|0;
 $vararg_buffer141 = sp + 576|0;
 $vararg_buffer139 = sp + 568|0;
 $vararg_buffer137 = sp + 560|0;
 $vararg_buffer135 = sp + 552|0;
 $vararg_buffer133 = sp + 544|0;
 $vararg_buffer131 = sp + 536|0;
 $vararg_buffer129 = sp + 528|0;
 $vararg_buffer127 = sp + 520|0;
 $vararg_buffer125 = sp + 512|0;
 $vararg_buffer123 = sp + 504|0;
 $vararg_buffer121 = sp + 496|0;
 $vararg_buffer119 = sp + 488|0;
 $vararg_buffer117 = sp + 480|0;
 $vararg_buffer115 = sp + 472|0;
 $vararg_buffer113 = sp + 464|0;
 $vararg_buffer111 = sp + 456|0;
 $vararg_buffer109 = sp + 448|0;
 $vararg_buffer107 = sp + 440|0;
 $vararg_buffer105 = sp + 432|0;
 $vararg_buffer103 = sp + 424|0;
 $vararg_buffer101 = sp + 416|0;
 $vararg_buffer99 = sp + 408|0;
 $vararg_buffer97 = sp + 400|0;
 $vararg_buffer95 = sp + 392|0;
 $vararg_buffer93 = sp + 384|0;
 $vararg_buffer91 = sp + 376|0;
 $vararg_buffer89 = sp + 368|0;
 $vararg_buffer87 = sp + 360|0;
 $vararg_buffer85 = sp + 344|0;
 $vararg_buffer83 = sp + 160|0;
 $vararg_buffer81 = sp + 152|0;
 $vararg_buffer79 = sp + 144|0;
 $vararg_buffer77 = sp + 136|0;
 $vararg_buffer75 = sp + 128|0;
 $vararg_buffer73 = sp + 120|0;
 $vararg_buffer71 = sp + 112|0;
 $vararg_buffer69 = sp + 104|0;
 $vararg_buffer67 = sp + 96|0;
 $vararg_buffer65 = sp + 88|0;
 $vararg_buffer63 = sp + 80|0;
 $vararg_buffer61 = sp + 24|0;
 $vararg_buffer59 = sp;
 $vararg_buffer57 = sp + 8|0;
 $vararg_buffer55 = sp + 16|0;
 $vararg_buffer53 = sp + 32|0;
 $vararg_buffer51 = sp + 40|0;
 $vararg_buffer49 = sp + 48|0;
 $vararg_buffer47 = sp + 56|0;
 $vararg_buffer45 = sp + 64|0;
 $vararg_buffer43 = sp + 72|0;
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer39 = sp + 176|0;
 $vararg_buffer37 = sp + 184|0;
 $vararg_buffer35 = sp + 192|0;
 $vararg_buffer33 = sp + 200|0;
 $vararg_buffer31 = sp + 208|0;
 $vararg_buffer29 = sp + 216|0;
 $vararg_buffer27 = sp + 224|0;
 $vararg_buffer25 = sp + 232|0;
 $vararg_buffer23 = sp + 240|0;
 $vararg_buffer21 = sp + 248|0;
 $vararg_buffer19 = sp + 256|0;
 $vararg_buffer17 = sp + 264|0;
 $vararg_buffer15 = sp + 272|0;
 $vararg_buffer13 = sp + 280|0;
 $vararg_buffer11 = sp + 288|0;
 $vararg_buffer9 = sp + 296|0;
 $vararg_buffer7 = sp + 304|0;
 $vararg_buffer5 = sp + 312|0;
 $vararg_buffer3 = sp + 320|0;
 $vararg_buffer1 = sp + 328|0;
 $vararg_buffer = sp + 336|0;
 $0 = $szExe;
 (_printf((8|0),($vararg_buffer|0))|0);
 (_printf((16|0),($vararg_buffer1|0))|0);
 (_printf((48|0),($vararg_buffer3|0))|0);
 (_printf((8|0),($vararg_buffer5|0))|0);
 $1 = $0;
 HEAP32[$vararg_buffer7>>2] = $1;
 (_printf((112|0),($vararg_buffer7|0))|0);
 (_printf((8|0),($vararg_buffer9|0))|0);
 (_printf((136|0),($vararg_buffer11|0))|0);
 (_printf((8|0),($vararg_buffer13|0))|0);
 (_printf((208|0),($vararg_buffer15|0))|0);
 (_printf((264|0),($vararg_buffer17|0))|0);
 (_printf((320|0),($vararg_buffer19|0))|0);
 (_printf((376|0),($vararg_buffer21|0))|0);
 (_printf((8|0),($vararg_buffer23|0))|0);
 (_printf((448|0),($vararg_buffer25|0))|0);
 (_printf((528|0),($vararg_buffer27|0))|0);
 (_printf((576|0),($vararg_buffer29|0))|0);
 (_printf((632|0),($vararg_buffer31|0))|0);
 (_printf((680|0),($vararg_buffer33|0))|0);
 (_printf((728|0),($vararg_buffer35|0))|0);
 (_printf((792|0),($vararg_buffer37|0))|0);
 (_printf((848|0),($vararg_buffer39|0))|0);
 (_printf((912|0),($vararg_buffer41|0))|0);
 (_printf((968|0),($vararg_buffer43|0))|0);
 (_printf((1016|0),($vararg_buffer45|0))|0);
 (_printf((1064|0),($vararg_buffer47|0))|0);
 (_printf((1120|0),($vararg_buffer49|0))|0);
 (_printf((1176|0),($vararg_buffer51|0))|0);
 (_printf((1232|0),($vararg_buffer53|0))|0);
 (_printf((1288|0),($vararg_buffer55|0))|0);
 (_printf((1336|0),($vararg_buffer57|0))|0);
 (_printf((1384|0),($vararg_buffer59|0))|0);
 (_printf((1432|0),($vararg_buffer61|0))|0);
 (_printf((1480|0),($vararg_buffer63|0))|0);
 (_printf((1528|0),($vararg_buffer65|0))|0);
 (_printf((1592|0),($vararg_buffer67|0))|0);
 (_printf((1648|0),($vararg_buffer69|0))|0);
 (_printf((1712|0),($vararg_buffer71|0))|0);
 (_printf((1768|0),($vararg_buffer73|0))|0);
 (_printf((1824|0),($vararg_buffer75|0))|0);
 (_printf((1880|0),($vararg_buffer77|0))|0);
 (_printf((1936|0),($vararg_buffer79|0))|0);
 (_printf((1984|0),($vararg_buffer81|0))|0);
 (_printf((2032|0),($vararg_buffer83|0))|0);
 (_printf((8|0),($vararg_buffer85|0))|0);
 (_printf((2080|0),($vararg_buffer87|0))|0);
 (_printf((8|0),($vararg_buffer89|0))|0);
 (_printf((2160|0),($vararg_buffer91|0))|0);
 (_printf((2232|0),($vararg_buffer93|0))|0);
 (_printf((2296|0),($vararg_buffer95|0))|0);
 (_printf((2376|0),($vararg_buffer97|0))|0);
 (_printf((2440|0),($vararg_buffer99|0))|0);
 (_printf((2520|0),($vararg_buffer101|0))|0);
 (_printf((2584|0),($vararg_buffer103|0))|0);
 (_printf((8|0),($vararg_buffer105|0))|0);
 (_printf((2664|0),($vararg_buffer107|0))|0);
 (_printf((2728|0),($vararg_buffer109|0))|0);
 (_printf((2784|0),($vararg_buffer111|0))|0);
 (_printf((2840|0),($vararg_buffer113|0))|0);
 (_printf((2912|0),($vararg_buffer115|0))|0);
 (_printf((2976|0),($vararg_buffer117|0))|0);
 (_printf((3056|0),($vararg_buffer119|0))|0);
 (_printf((3136|0),($vararg_buffer121|0))|0);
 (_printf((8|0),($vararg_buffer123|0))|0);
 (_printf((3216|0),($vararg_buffer125|0))|0);
 (_printf((3288|0),($vararg_buffer127|0))|0);
 (_printf((3360|0),($vararg_buffer129|0))|0);
 (_printf((3416|0),($vararg_buffer131|0))|0);
 (_printf((3472|0),($vararg_buffer133|0))|0);
 (_printf((8|0),($vararg_buffer135|0))|0);
 (_printf((3544|0),($vararg_buffer137|0))|0);
 (_printf((3616|0),($vararg_buffer139|0))|0);
 (_printf((3680|0),($vararg_buffer141|0))|0);
 (_printf((8|0),($vararg_buffer143|0))|0);
 (_printf((3752|0),($vararg_buffer145|0))|0);
 (_printf((3824|0),($vararg_buffer147|0))|0);
 (_printf((3880|0),($vararg_buffer149|0))|0);
 (_printf((3928|0),($vararg_buffer151|0))|0);
 (_printf((3976|0),($vararg_buffer153|0))|0);
 (_printf((4024|0),($vararg_buffer155|0))|0);
 (_printf((8|0),($vararg_buffer157|0))|0);
 (_printf((4072|0),($vararg_buffer159|0))|0);
 (_printf((4152|0),($vararg_buffer161|0))|0);
 (_printf((4232|0),($vararg_buffer163|0))|0);
 (_printf((8|0),($vararg_buffer165|0))|0);
 (_printf((4312|0),($vararg_buffer167|0))|0);
 (_printf((8|0),($vararg_buffer169|0))|0);
 (_printf((4376|0),($vararg_buffer171|0))|0);
 (_printf((8|0),($vararg_buffer173|0))|0);
 $2 = $0;
 HEAP32[$vararg_buffer175>>2] = $2;
 (_printf((4448|0),($vararg_buffer175|0))|0);
 STACKTOP = sp;return;
}
function _WmpDecAppShowArgs($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $guidPF = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer28 = sp + 16|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $guidPF = sp + 104|0;
 $0 = $args;
 $1 = $0;
 $2 = (($1) + 16|0);
 ;HEAP32[$guidPF+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$guidPF+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$guidPF+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$guidPF+12>>2]=HEAP32[$2+12>>2]|0;
 (_printf((4496|0),($vararg_buffer|0))|0);
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $4;
 (_printf((4536|0),($vararg_buffer1|0))|0);
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $7;
 (_printf((4560|0),($vararg_buffer3|0))|0);
 $8 = $0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $14;
  (_printf((4584|0),($vararg_buffer6|0))|0);
 }
 $15 = HEAP32[$guidPF>>2]|0;
 $16 = (($guidPF) + 4|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = (($guidPF) + 6|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($guidPF) + 8|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($guidPF) + 8|0);
 $26 = (($25) + 1|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (($guidPF) + 8|0);
 $30 = (($29) + 2|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (($guidPF) + 8|0);
 $34 = (($33) + 3|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = (($guidPF) + 8|0);
 $38 = (($37) + 4|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = (($guidPF) + 8|0);
 $42 = (($41) + 5|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = (($guidPF) + 8|0);
 $46 = (($45) + 6|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = (($guidPF) + 8|0);
 $50 = (($49) + 7|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 HEAP32[$vararg_buffer9>>2] = $15;
 $vararg_ptr12 = (($vararg_buffer9) + 4|0);
 HEAP32[$vararg_ptr12>>2] = $18;
 $vararg_ptr13 = (($vararg_buffer9) + 8|0);
 HEAP32[$vararg_ptr13>>2] = $21;
 $vararg_ptr14 = (($vararg_buffer9) + 12|0);
 HEAP32[$vararg_ptr14>>2] = $24;
 $vararg_ptr15 = (($vararg_buffer9) + 16|0);
 HEAP32[$vararg_ptr15>>2] = $28;
 $vararg_ptr16 = (($vararg_buffer9) + 20|0);
 HEAP32[$vararg_ptr16>>2] = $32;
 $vararg_ptr17 = (($vararg_buffer9) + 24|0);
 HEAP32[$vararg_ptr17>>2] = $36;
 $vararg_ptr18 = (($vararg_buffer9) + 28|0);
 HEAP32[$vararg_ptr18>>2] = $40;
 $vararg_ptr19 = (($vararg_buffer9) + 32|0);
 HEAP32[$vararg_ptr19>>2] = $44;
 $vararg_ptr20 = (($vararg_buffer9) + 36|0);
 HEAP32[$vararg_ptr20>>2] = $48;
 $vararg_ptr21 = (($vararg_buffer9) + 40|0);
 HEAP32[$vararg_ptr21>>2] = $52;
 (_printf((4608|0),($vararg_buffer9|0))|0);
 $53 = $0;
 $54 = (($53) + 56|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 HEAP32[$vararg_buffer22>>2] = $56;
 (_printf((4680|0),($vararg_buffer22|0))|0);
 $57 = $0;
 $58 = (($57) + 48|0);
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$vararg_buffer25>>2] = $59;
 (_printf((4712|0),($vararg_buffer25|0))|0);
 (_printf((4496|0),($vararg_buffer28|0))|0);
 STACKTOP = sp;return;
}
function _WmpDecAppInitDefaultArgs($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $args;
 $1 = $0;
 _memset(($1|0),0,32940)|0;
 $2 = $0;
 $3 = (($2) + 16|0);
 ;HEAP32[$3+0>>2]=HEAP32[15416+0>>2]|0;HEAP32[$3+4>>2]=HEAP32[15416+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[15416+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[15416+12>>2]|0;
 $4 = $0;
 $5 = (($4) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = (($8) + 52|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = (($10) + 56|0);
 HEAP8[$11>>0] = 0;
 $12 = $0;
 $13 = (($12) + 57|0);
 HEAP8[$13>>0] = -1;
 $14 = $0;
 $15 = (($14) + 60|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _WmpDecAppValidateArgs($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $args;
 $err = 0;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (0|0)!=($2|0);
 $4 = $3 ? 0 : -104;
 $err = $4;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $6 = $err;
   $err = $6;
  } else {
   $7 = $err;
   $err = $7;
   $8 = $0;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (0|0)!=($10|0);
   $12 = $11 ? 0 : -104;
   $err = $12;
   $13 = ($12|0)<(0);
   if ($13) {
    $14 = $err;
    $err = $14;
    break;
   }
   $15 = $err;
   $err = $15;
  }
 } while(0);
 $16 = $err;
 STACKTOP = sp;return ($16|0);
}
function _WmpDecAppParseArgs($argc,$argv,$args) {
 $argc = $argc|0;
 $argv = $argv|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $InvalidPF = 0, $c = 0, $err = 0, $i = 0, $idxPF = 0, $k = 0;
 var $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $InvalidPF = sp + 4|0;
 $0 = $argc;
 $1 = $argv;
 $2 = $args;
 $err = 0;
 $c = 0;
 $i = 1;
 dest=$InvalidPF+0|0; src=4888+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = $2;
 _WmpDecAppInitDefaultArgs($3);
 L1: while(1) {
  $4 = $i;
  $5 = $0;
  $6 = ($4|0)<($5|0);
  if ($6) {
   $7 = $i;
   $8 = $1;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)==(45);
   $213 = $13;
  } else {
   $213 = 0;
  }
  if (!($213)) {
   label = 58;
   break;
  }
  $14 = $i;
  $15 = $1;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $c = $20;
  if ((($20|0) == 118)) {
   $21 = $2;
   $22 = (($21) + 12|0);
   HEAP32[$22>>2] = 1;
  } else if ((($20|0) == 116)) {
  } else if ((($20|0) == 102)) {
   $25 = $2;
   $26 = (($25) + 64|0);
   HEAP32[$26>>2] = 1;
  } else if ((($20|0) == 67)) {
   $23 = $2;
   $24 = (($23) + 32936|0);
   HEAP32[$24>>2] = 1;
  } else {
   $27 = $i;
   $28 = (($27) + 1)|0;
   $i = $28;
   $29 = $i;
   $30 = $0;
   $31 = ($29|0)==($30|0);
   if ($31) {
    label = 12;
   } else {
    $32 = $i;
    $33 = $1;
    $34 = (($33) + ($32<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = HEAP8[$35>>0]|0;
    $37 = $36 << 24 >> 24;
    $38 = ($37|0)==(45);
    if ($38) {
     label = 12;
    }
   }
   if ((label|0) == 12) {
    label = 0;
    $err = -105;
    if (1) {
     label = 13;
     break;
    }
    $40 = $err;
    $err = $40;
   }
   $41 = $c;
   do {
    switch ($41|0) {
    case 105:  {
     $42 = $i;
     $43 = $1;
     $44 = (($43) + ($42<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = $2;
     HEAP32[$46>>2] = $45;
     break;
    }
    case 111:  {
     $47 = $i;
     $48 = $1;
     $49 = (($48) + ($47<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $2;
     $52 = (($51) + 4|0);
     HEAP32[$52>>2] = $50;
     break;
    }
    case 80:  {
     $53 = $i;
     $54 = $1;
     $55 = (($54) + ($53<<2)|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $2;
     $58 = (($57) + 8|0);
     HEAP32[$58>>2] = $56;
     break;
    }
    case 99:  {
     $67 = $i;
     $68 = $1;
     $69 = (($68) + ($67<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (_atol($70)|0);
     $idxPF = $71;
     $72 = $idxPF;
     $73 = (38)<=($72>>>0);
     $74 = $73 ? -106 : 0;
     $err = $74;
     $75 = ($74|0)<(0);
     if ($75) {
      label = 22;
      break L1;
     }
     $77 = $err;
     $err = $77;
     $k = 0;
     while(1) {
      $78 = $k;
      $79 = ($78|0)<(9);
      if (!($79)) {
       break;
      }
      $80 = $k;
      $81 = (($InvalidPF) + ($80<<2)|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = $idxPF;
      $84 = ($82|0)==($83|0);
      if ($84) {
       (_printf((4928|0),($vararg_buffer|0))|0);
       $err = -105;
       if (1) {
        label = 28;
        break L1;
       }
       $86 = $err;
       $err = $86;
      }
      $87 = $k;
      $88 = (($87) + 1)|0;
      $k = $88;
     }
     $89 = $2;
     $90 = (($89) + 16|0);
     $91 = $idxPF;
     $92 = (4736 + ($91<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     ;HEAP32[$90+0>>2]=HEAP32[$93+0>>2]|0;HEAP32[$90+4>>2]=HEAP32[$93+4>>2]|0;HEAP32[$90+8>>2]=HEAP32[$93+8>>2]|0;HEAP32[$90+12>>2]=HEAP32[$93+12>>2]|0;
     break;
    }
    case 112:  {
     $59 = $i;
     $60 = $1;
     $61 = (($60) + ($59<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (_atoi($62)|0);
     $64 = $63&255;
     $65 = $2;
     $66 = (($65) + 56|0);
     HEAP8[$66>>0] = $64;
     break;
    }
    case 79:  {
     $185 = $i;
     $186 = $1;
     $187 = (($186) + ($185<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (_atoi($188)|0);
     $190 = ($189|0)<(8);
     if ($190) {
      $191 = $i;
      $192 = $1;
      $193 = (($192) + ($191<<2)|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = (_atoi($194)|0);
      $198 = $195;
     } else {
      $198 = 0;
     }
     $196 = $2;
     $197 = (($196) + 52|0);
     HEAP32[$197>>2] = $198;
     break;
    }
    case 84:  {
     $172 = $i;
     $173 = $1;
     $174 = (($173) + ($172<<2)|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (_atoi($175)|0);
     $177 = $2;
     $178 = (($177) + 48|0);
     HEAP32[$178>>2] = $176;
     $179 = $2;
     $180 = (($179) + 48|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($181|0)==(0);
     if ($182) {
      $183 = $2;
      $184 = (($183) + 48|0);
      HEAP32[$184>>2] = 255;
     }
     break;
    }
    case 115:  {
     $102 = $i;
     $103 = $1;
     $104 = (($103) + ($102<<2)|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (_atoi($105)|0);
     $107 = $2;
     $108 = (($107) + 60|0);
     HEAP32[$108>>2] = $106;
     break;
    }
    case 97:  {
     $94 = $i;
     $95 = $1;
     $96 = (($95) + ($94<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (_atoi($97)|0);
     $99 = $98&255;
     $100 = $2;
     $101 = (($100) + 57|0);
     HEAP8[$101>>0] = $99;
     break;
    }
    case 114:  {
     $109 = $i;
     $110 = (($109) + 3)|0;
     $111 = $0;
     $112 = ($110|0)>=($111|0);
     if ($112) {
      label = 40;
     } else {
      $113 = $i;
      $114 = (($113) + 1)|0;
      $115 = $1;
      $116 = (($115) + ($114<<2)|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = HEAP8[$117>>0]|0;
      $119 = $118 << 24 >> 24;
      $120 = ($119|0)==(45);
      if ($120) {
       label = 40;
      } else {
       $121 = $i;
       $122 = (($121) + 2)|0;
       $123 = $1;
       $124 = (($123) + ($122<<2)|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = HEAP8[$125>>0]|0;
       $127 = $126 << 24 >> 24;
       $128 = ($127|0)==(45);
       if ($128) {
        label = 40;
       } else {
        $129 = $i;
        $130 = (($129) + 3)|0;
        $131 = $1;
        $132 = (($131) + ($130<<2)|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = HEAP8[$133>>0]|0;
        $135 = $134 << 24 >> 24;
        $136 = ($135|0)==(45);
        if ($136) {
         label = 40;
        }
       }
      }
     }
     if ((label|0) == 40) {
      label = 0;
      $err = -105;
      if (1) {
       label = 41;
       break L1;
      }
      $138 = $err;
      $err = $138;
     }
     $139 = $i;
     $140 = $1;
     $141 = (($140) + ($139<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (_atoi($142)|0);
     $144 = $2;
     $145 = (($144) + 36|0);
     HEAP32[$145>>2] = $143;
     $146 = $i;
     $147 = (($146) + 1)|0;
     $148 = $1;
     $149 = (($148) + ($147<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (_atoi($150)|0);
     $152 = $2;
     $153 = (($152) + 32|0);
     HEAP32[$153>>2] = $151;
     $154 = $i;
     $155 = (($154) + 2)|0;
     $156 = $1;
     $157 = (($156) + ($155<<2)|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (_atoi($158)|0);
     $160 = $2;
     $161 = (($160) + 44|0);
     HEAP32[$161>>2] = $159;
     $162 = $i;
     $163 = (($162) + 3)|0;
     $164 = $1;
     $165 = (($164) + ($163<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (_atoi($166)|0);
     $168 = $2;
     $169 = (($168) + 40|0);
     HEAP32[$169>>2] = $167;
     $170 = $i;
     $171 = (($170) + 3)|0;
     $i = $171;
     break;
    }
    default: {
     $err = -105;
     if (1) {
      label = 53;
      break L1;
     }
     $200 = $err;
     $err = $200;
    }
    }
   } while(0);
  }
  $201 = $i;
  $202 = (($201) + 1)|0;
  $i = $202;
 }
 do {
  if ((label|0) == 13) {
   $39 = $err;
   $err = $39;
  }
  else if ((label|0) == 22) {
   $76 = $err;
   $err = $76;
  }
  else if ((label|0) == 28) {
   $85 = $err;
   $err = $85;
  }
  else if ((label|0) == 41) {
   $137 = $err;
   $err = $137;
  }
  else if ((label|0) == 53) {
   $199 = $err;
   $err = $199;
  }
  else if ((label|0) == 58) {
   $203 = $2;
   $204 = (_WmpDecAppValidateArgs($203)|0);
   $err = $204;
   $205 = ($204|0)<(0);
   if ($205) {
    $206 = $err;
    $err = $206;
    break;
   }
   $207 = $err;
   $err = $207;
  }
 } while(0);
 $208 = $err;
 $209 = (0)!=($208|0);
 if (!($209)) {
  $212 = $err;
  STACKTOP = sp;return ($212|0);
 }
 $210 = $1;
 $211 = HEAP32[$210>>2]|0;
 _WmpDecAppUsage($211);
 $212 = $err;
 STACKTOP = sp;return ($212|0);
}
function _WmpDecAppCreateEncoderFromExt($pCFactory,$szExt,$ppIE) {
 $pCFactory = $pCFactory|0;
 $szExt = $szExt|0;
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pIID = sp + 12|0;
 $0 = $pCFactory;
 $1 = $szExt;
 $2 = $ppIE;
 $err = 0;
 HEAP32[$pIID>>2] = 0;
 $3 = $0;
 $0 = $3;
 $4 = $1;
 $5 = $1;
 $6 = (_strlen(($5|0))|0);
 $7 = (_PKStrnicmp($4,4976,$6)|0);
 $8 = (0)==($7|0);
 do {
  if ($8) {
   $9 = $2;
   $10 = (_PKImageEncode_Create_WMP($9)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    $12 = $err;
    $err = $12;
    $25 = $err;
    STACKTOP = sp;return ($25|0);
   } else {
    $13 = $err;
    $err = $13;
    break;
   }
  } else {
   $14 = $1;
   $15 = (_GetTestEncodeIID($14,$pIID)|0);
   $err = $15;
   $16 = ($15|0)<(0);
   if ($16) {
    $17 = $err;
    $err = $17;
    $25 = $err;
    STACKTOP = sp;return ($25|0);
   }
   $18 = $err;
   $err = $18;
   $19 = HEAP32[$pIID>>2]|0;
   $20 = $2;
   $21 = (_PKTestFactory_CreateCodec($19,$20)|0);
   $err = $21;
   $22 = ($21|0)<(0);
   if ($22) {
    $23 = $err;
    $err = $23;
    $25 = $err;
    STACKTOP = sp;return ($25|0);
   } else {
    $24 = $err;
    $err = $24;
    break;
   }
  }
 } while(0);
 $25 = $err;
 STACKTOP = sp;return ($25|0);
}
function _mainFn($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$byval_copy = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0.0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $PI = 0, $args = 0, $bah = 0, $buf = 0, $byteCount = 0, $cFrame = 0, $cb = 0, $cbRead = 0, $err = 0, $err1 = 0, $fileSize = 0, $i = 0, $newPI = 0, $pCodecFactory = 0, $pConverter = 0, $pDecoder = 0;
 var $pEncodeStream = 0, $pEncoder = 0, $pExt = 0, $pFactory = 0, $pFile = 0, $pFile2 = 0, $rX = 0, $rY = 0, $rect = 0, $tSize = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 33200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 33176|0;
 $$byval_copy = sp + 33160|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $pFactory = sp + 33136|0;
 $pCodecFactory = sp + 33132|0;
 $pDecoder = sp + 33128|0;
 $args = sp + 188|0;
 $cFrame = sp + 180|0;
 $PI = sp + 136|0;
 $cbRead = sp + 68|0;
 $newPI = sp + 16|0;
 $pEncodeStream = sp + 92|0;
 $pEncoder = sp + 96|0;
 $pConverter = sp + 100|0;
 $rX = sp + 104|0;
 $rY = sp + 108|0;
 $rect = sp + 112|0;
 $1 = $argc;
 $2 = $argv;
 $err = 0;
 HEAP32[$pFactory>>2] = 0;
 HEAP32[$pCodecFactory>>2] = 0;
 HEAP32[$pDecoder>>2] = 0;
 _memset(($args|0),0,32940)|0;
 $pExt = 0;
 HEAP32[$cFrame>>2] = 0;
 $i = 0;
 $3 = $1;
 $4 = (1)==($3|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  _WmpDecAppUsage($6);
  $0 = 0;
  $561 = $0;
  STACKTOP = sp;return ($561|0);
 }
 $7 = $1;
 $8 = $2;
 $9 = (_WmpDecAppParseArgs($7,$8,$args)|0);
 $err = $9;
 $10 = ($9|0)<(0);
 L5: do {
  if ($10) {
   $11 = $err;
   $err = $11;
  } else {
   $12 = $err;
   $err = $12;
   $13 = (($args) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0);
   if ($15) {
    _WmpDecAppShowArgs($args);
   }
   $16 = (($args) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_strrchr($17,46)|0);
   $pExt = $18;
   $19 = $pExt;
   $20 = (0|0)==($19|0);
   $21 = $20 ? -106 : 0;
   $err = $21;
   $22 = ($21|0)<(0);
   if ($22) {
    $23 = $err;
    $err = $23;
    break;
   }
   $24 = $err;
   $err = $24;
   $25 = (_PKCreateFactory($pFactory,257)|0);
   $err = $25;
   $26 = ($25|0)<(0);
   if ($26) {
    $27 = $err;
    $err = $27;
    break;
   }
   $28 = $err;
   $err = $28;
   $29 = (_PKCreateCodecFactory($pCodecFactory,257)|0);
   $err = $29;
   $30 = ($29|0)<(0);
   if ($30) {
    $31 = $err;
    $err = $31;
    break;
   }
   $32 = $err;
   $err = $32;
   $33 = HEAP32[$args>>2]|0;
   $34 = (_PKCodecFactory_CreateDecoderFromFile($33,$pDecoder)|0);
   $err = $34;
   $35 = ($34|0)<(0);
   if ($35) {
    $36 = $err;
    $err = $36;
    break;
   }
   $37 = $err;
   $err = $37;
   $38 = HEAP32[$pDecoder>>2]|0;
   $39 = (($38) + 44|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP32[$40>>2]|0;
   $pFile = $41;
   $42 = $pFile;
   (_fseek(($42|0),0,2)|0);
   $43 = $pFile;
   $44 = (_ftell(($43|0))|0);
   $fileSize = $44;
   $45 = $pFile;
   (_fseek(($45|0),0,0)|0);
   $46 = $fileSize;
   $47 = HEAP32[$pDecoder>>2]|0;
   $48 = (($47) + 92|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$pDecoder>>2]|0;
   $51 = (($50) + 92|0);
   $52 = (($51) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($49) + ($53))|0;
   $55 = ($46>>>0)<($54>>>0);
   if ($55) {
    $56 = $fileSize;
    $57 = HEAP32[$pDecoder>>2]|0;
    $58 = (($57) + 92|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($56) - ($59))|0;
    $byteCount = $60;
    $61 = $byteCount;
    $62 = HEAP32[$pDecoder>>2]|0;
    $63 = (($62) + 92|0);
    $64 = (($63) + 4|0);
    HEAP32[$64>>2] = $61;
    $65 = $byteCount;
    $66 = HEAP32[$pDecoder>>2]|0;
    $67 = (($66) + 92|0);
    $68 = (($67) + 88|0);
    $69 = (($68) + 76|0);
    HEAP32[$69>>2] = $65;
   }
   $70 = HEAP32[$pDecoder>>2]|0;
   $71 = (($70) + 92|0);
   $72 = (($71) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[$pDecoder>>2]|0;
   $75 = (($74) + 92|0);
   $76 = (($75) + 33040|0);
   $77 = (($76) + 76|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($73) + ($78))|0;
   $80 = $fileSize;
   $81 = ($79>>>0)>($80>>>0);
   if ($81) {
    $82 = $fileSize;
    $83 = HEAP32[$pDecoder>>2]|0;
    $84 = (($83) + 92|0);
    $85 = (($84) + 8|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($82) - ($86))|0;
    $88 = HEAP32[$pDecoder>>2]|0;
    $89 = (($88) + 92|0);
    $90 = (($89) + 33040|0);
    $91 = (($90) + 76|0);
    HEAP32[$91>>2] = $87;
   }
   $92 = (($args) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)!=(0|0);
   if ($94) {
    $95 = HEAP32[$pDecoder>>2]|0;
    $96 = (($95) + 92|0);
    $97 = (($96) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)!=(0);
    if ($99) {
     $100 = HEAP32[$pDecoder>>2]|0;
     $101 = (($100) + 92|0);
     $102 = (($101) + 36|0);
     $103 = HEAP32[$102>>2]|0;
     $cb = $103;
     $104 = $cb;
     $105 = (_malloc($104)|0);
     $buf = $105;
     $106 = $buf;
     $107 = ($106|0)!=(0|0);
     if ($107) {
      $108 = $cb;
      HEAP32[$cbRead>>2] = $108;
      $109 = HEAP32[$pDecoder>>2]|0;
      $110 = $buf;
      $111 = (_PKImageDecode_GetColorContext_WMP($109,$110,$cbRead)|0);
      $err1 = $111;
      $112 = $err1;
      $113 = (0)==($112|0);
      if ($113) {
       $114 = (($args) + 8|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = (_fopen(($115|0),(4984|0))|0);
       $pFile2 = $116;
       $117 = $pFile2;
       $118 = (0|0)==($117|0);
       $119 = $118 ? -102 : 0;
       $err1 = $119;
       $120 = ($119|0)<(0);
       if ($120) {
        $121 = $err1;
        $err1 = $121;
        break;
       }
       $122 = $err1;
       $err1 = $122;
       $123 = $buf;
       $124 = $cb;
       $125 = $pFile2;
       $126 = (_fwrite(($123|0),($124|0),1,($125|0))|0);
       $127 = (1)!=($126|0);
       $128 = $127 ? -102 : 0;
       $err1 = $128;
       $129 = ($128|0)<(0);
       if ($129) {
        $130 = $err1;
        $err1 = $130;
        break;
       }
       $131 = $err1;
       $err1 = $131;
       $132 = $pFile2;
       (_fclose(($132|0))|0);
      }
      $133 = $buf;
      _free($133);
     }
    }
   }
   $134 = (($args) + 16|0);
   $135 = (_memcmp($134,15416,16)|0);
   $136 = ($135|0)!=(0);
   if ($136) {
    $149 = (($args) + 16|0);
    HEAP32[$PI>>2] = $149;
   } else {
    $137 = HEAP32[$pDecoder>>2]|0;
    $138 = (($137) + 56|0);
    HEAP32[$PI>>2] = $138;
    HEAP32[$newPI>>2] = $138;
    $139 = (_PixelFormatLookup($newPI,0)|0);
    $err = $139;
    $140 = ($139|0)<(0);
    if ($140) {
     $141 = $err;
     $err = $141;
     break;
    }
    $142 = $err;
    $err = $142;
    $143 = (_PixelFormatLookup($newPI,1)|0);
    $err = $143;
    $144 = ($143|0)<(0);
    if ($144) {
     $145 = $err;
     $err = $145;
     break;
    }
    $146 = $err;
    $err = $146;
    $147 = (($args) + 16|0);
    $148 = HEAP32[$newPI>>2]|0;
    ;HEAP32[$147+0>>2]=HEAP32[$148+0>>2]|0;HEAP32[$147+4>>2]=HEAP32[$148+4>>2]|0;HEAP32[$147+8>>2]=HEAP32[$148+8>>2]|0;HEAP32[$147+12>>2]=HEAP32[$148+12>>2]|0;
   }
   $150 = (($args) + 16|0);
   $151 = (_memcmp($150,15448,16)|0);
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = (($args) + 16|0);
    $154 = (_memcmp($153,15496,16)|0);
    $155 = ($154|0)!=(0);
    if ($155) {
     $163 = (($args) + 16|0);
     $164 = (_memcmp($163,15528,16)|0);
     $165 = ($164|0)!=(0);
     if (!($165)) {
      $166 = HEAP32[$pDecoder>>2]|0;
      $167 = (($166) + 92|0);
      $168 = (($167) + 88|0);
      $169 = (($168) + 8|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(4);
      if ($171) {
       $172 = HEAP32[$pDecoder>>2]|0;
       $173 = (($172) + 92|0);
       $174 = (($173) + 88|0);
       $175 = (($174) + 8|0);
       HEAP32[$175>>2] = 7;
       $176 = HEAP32[$pDecoder>>2]|0;
       $177 = (($176) + 56|0);
       $178 = (($args) + 16|0);
       ;HEAP32[$177+0>>2]=HEAP32[$178+0>>2]|0;HEAP32[$177+4>>2]=HEAP32[$178+4>>2]|0;HEAP32[$177+8>>2]=HEAP32[$178+8>>2]|0;HEAP32[$177+12>>2]=HEAP32[$178+12>>2]|0;
       $179 = HEAP32[$pDecoder>>2]|0;
       $180 = (($179) + 92|0);
       $181 = (($180) + 88|0);
       $182 = (($181) + 24|0);
       HEAP32[$182>>2] = 1;
      }
     }
    } else {
     label = 48;
    }
   } else {
    label = 48;
   }
   if ((label|0) == 48) {
    $156 = HEAP32[$pDecoder>>2]|0;
    $157 = (($156) + 56|0);
    $158 = (($args) + 16|0);
    ;HEAP32[$157+0>>2]=HEAP32[$158+0>>2]|0;HEAP32[$157+4>>2]=HEAP32[$158+4>>2]|0;HEAP32[$157+8>>2]=HEAP32[$158+8>>2]|0;HEAP32[$157+12>>2]=HEAP32[$158+12>>2]|0;
    $159 = HEAP32[$pDecoder>>2]|0;
    $160 = (($159) + 92|0);
    $161 = (($160) + 88|0);
    $162 = (($161) + 8|0);
    HEAP32[$162>>2] = 0;
   }
   (_PixelFormatLookup($PI,0)|0);
   $183 = (($args) + 57|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184&255;
   $186 = (255)==($185|0);
   if ($186) {
    $187 = (($PI) + 20|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = $188 & 16;
    $190 = ($189|0)!=(0);
    if ($190) {
     $191 = (($args) + 57|0);
     HEAP8[$191>>0] = 2;
    } else {
     $192 = (($args) + 57|0);
     HEAP8[$192>>0] = 0;
    }
   }
   $193 = (($args) + 64|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = HEAP32[$pDecoder>>2]|0;
   $196 = (($195) + 92|0);
   $197 = (($196) + 168|0);
   $198 = (($197) + 28|0);
   HEAP32[$198>>2] = $194;
   $199 = (($args) + 57|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = HEAP32[$pDecoder>>2]|0;
   $202 = (($201) + 92|0);
   $203 = (($202) + 168|0);
   $204 = (($203) + 36|0);
   HEAP8[$204>>0] = $200;
   $205 = (($args) + 60|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = HEAP32[$pDecoder>>2]|0;
   $208 = (($207) + 92|0);
   $209 = (($208) + 168|0);
   $210 = (($209) + 44|0);
   HEAP32[$210>>2] = $206;
   $211 = (($args) + 32936|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = HEAP32[$pDecoder>>2]|0;
   $214 = (($213) + 92|0);
   $215 = (($214) + 65996|0);
   HEAP32[$215>>2] = $212;
   $216 = (($PI) + 8|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = HEAP32[$pDecoder>>2]|0;
   $219 = (($218) + 92|0);
   $220 = (($219) + 88|0);
   $221 = (($220) + 8|0);
   HEAP32[$221>>2] = $217;
   $222 = (($PI) + 12|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = HEAP32[$pDecoder>>2]|0;
   $225 = (($224) + 92|0);
   $226 = (($225) + 88|0);
   $227 = (($226) + 12|0);
   HEAP32[$227>>2] = $223;
   $228 = (($PI) + 16|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = HEAP32[$pDecoder>>2]|0;
   $231 = (($230) + 92|0);
   $232 = (($231) + 88|0);
   $233 = (($232) + 16|0);
   HEAP32[$233>>2] = $229;
   $234 = HEAP32[$pDecoder>>2]|0;
   $235 = (($234) + 92|0);
   $236 = (($235) + 88|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = HEAP32[$pDecoder>>2]|0;
   $239 = (($238) + 92|0);
   $240 = (($239) + 88|0);
   $241 = (($240) + 56|0);
   HEAP32[$241>>2] = $237;
   $242 = HEAP32[$pDecoder>>2]|0;
   $243 = (($242) + 92|0);
   $244 = (($243) + 88|0);
   $245 = (($244) + 4|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = HEAP32[$pDecoder>>2]|0;
   $248 = (($247) + 92|0);
   $249 = (($248) + 88|0);
   $250 = (($249) + 60|0);
   HEAP32[$250>>2] = $246;
   $251 = HEAP32[$pDecoder>>2]|0;
   $252 = (($251) + 92|0);
   $253 = (($252) + 88|0);
   $254 = (($253) + 48|0);
   HEAP32[$254>>2] = 0;
   $255 = (($args) + 48|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = ($256>>>0)>(0);
   if ($257) {
    $258 = (($args) + 48|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = ($259|0)!=(255);
    if ($260) {
     $261 = (($args) + 48|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = 1 << $262;
     $tSize = $263;
     $264 = HEAP32[$pDecoder>>2]|0;
     $265 = (($264) + 92|0);
     $266 = (($265) + 88|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = $tSize;
     $269 = (($267) + ($268))|0;
     $270 = (($269) - 1)|0;
     $271 = $tSize;
     $272 = (($270>>>0) / ($271>>>0))&-1;
     $273 = HEAP32[$pDecoder>>2]|0;
     $274 = (($273) + 92|0);
     $275 = (($274) + 88|0);
     $276 = (($275) + 56|0);
     HEAP32[$276>>2] = $272;
     $277 = HEAP32[$pDecoder>>2]|0;
     $278 = (($277) + 92|0);
     $279 = (($278) + 88|0);
     $280 = (($279) + 4|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = $tSize;
     $283 = (($281) + ($282))|0;
     $284 = (($283) - 1)|0;
     $285 = $tSize;
     $286 = (($284>>>0) / ($285>>>0))&-1;
     $287 = HEAP32[$pDecoder>>2]|0;
     $288 = (($287) + 92|0);
     $289 = (($288) + 88|0);
     $290 = (($289) + 60|0);
     HEAP32[$290>>2] = $286;
     $291 = HEAP32[$pDecoder>>2]|0;
     $292 = (($291) + 92|0);
     $293 = (($292) + 88|0);
     $294 = (($293) + 8|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = ($295|0)==(1);
     if ($296) {
      label = 62;
     } else {
      $297 = HEAP32[$pDecoder>>2]|0;
      $298 = (($297) + 92|0);
      $299 = (($298) + 88|0);
      $300 = (($299) + 8|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = ($301|0)==(2);
      if ($302) {
       label = 62;
      }
     }
     if ((label|0) == 62) {
      $303 = HEAP32[$pDecoder>>2]|0;
      $304 = (($303) + 92|0);
      $305 = (($304) + 88|0);
      $306 = (($305) + 8|0);
      HEAP32[$306>>2] = 3;
     }
    } else {
     label = 64;
    }
   } else {
    label = 64;
   }
   if ((label|0) == 64) {
    $307 = (($args) + 48|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = ($308|0)==(255);
    if ($309) {
     $310 = HEAP32[$pDecoder>>2]|0;
     $311 = (($310) + 92|0);
     $312 = (($311) + 88|0);
     $313 = (($312) + 48|0);
     HEAP32[$313>>2] = 1;
    }
   }
   $314 = (($args) + 40|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = ($315|0)==(0);
   if ($316) {
    label = 69;
   } else {
    $317 = (($args) + 44|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = ($318|0)==(0);
    if ($319) {
     label = 69;
    }
   }
   if ((label|0) == 69) {
    $320 = (($args) + 36|0);
    HEAP32[$320>>2] = 0;
    $321 = (($args) + 32|0);
    HEAP32[$321>>2] = 0;
    $322 = HEAP32[$pDecoder>>2]|0;
    $323 = (($322) + 92|0);
    $324 = (($323) + 88|0);
    $325 = (($324) + 56|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = (($args) + 40|0);
    HEAP32[$327>>2] = $326;
    $328 = HEAP32[$pDecoder>>2]|0;
    $329 = (($328) + 92|0);
    $330 = (($329) + 88|0);
    $331 = (($330) + 60|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = (($args) + 44|0);
    HEAP32[$333>>2] = $332;
   }
   $334 = (($args) + 32|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = HEAP32[$pDecoder>>2]|0;
   $337 = (($336) + 92|0);
   $338 = (($337) + 88|0);
   $339 = (($338) + 32|0);
   HEAP32[$339>>2] = $335;
   $340 = (($args) + 36|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = HEAP32[$pDecoder>>2]|0;
   $343 = (($342) + 92|0);
   $344 = (($343) + 88|0);
   $345 = (($344) + 40|0);
   HEAP32[$345>>2] = $341;
   $346 = (($args) + 40|0);
   $347 = HEAP32[$346>>2]|0;
   $348 = HEAP32[$pDecoder>>2]|0;
   $349 = (($348) + 92|0);
   $350 = (($349) + 88|0);
   $351 = (($350) + 36|0);
   HEAP32[$351>>2] = $347;
   $352 = (($args) + 44|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = HEAP32[$pDecoder>>2]|0;
   $355 = (($354) + 92|0);
   $356 = (($355) + 88|0);
   $357 = (($356) + 44|0);
   HEAP32[$357>>2] = $353;
   $358 = (($args) + 52|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = HEAP32[$pDecoder>>2]|0;
   $361 = (($360) + 92|0);
   $362 = (($361) + 88|0);
   $363 = (($362) + 64|0);
   HEAP32[$363>>2] = $359;
   $364 = (($args) + 56|0);
   $365 = HEAP8[$364>>0]|0;
   $366 = HEAP32[$pDecoder>>2]|0;
   $367 = (($366) + 92|0);
   $368 = (($367) + 88|0);
   $369 = (($368) + 68|0);
   HEAP8[$369>>0] = $365;
   $370 = (($args) + 12|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = HEAP32[$pDecoder>>2]|0;
   $373 = (($372) + 92|0);
   $374 = (($373) + 168|0);
   HEAP32[$374>>2] = $371;
   $375 = HEAP32[$pDecoder>>2]|0;
   $376 = (($375) + 32|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = HEAP32[$pDecoder>>2]|0;
   $379 = (FUNCTION_TABLE_iii[$377 & 255]($378,$cFrame)|0);
   $err = $379;
   $380 = ($379|0)<(0);
   if ($380) {
    $381 = $err;
    $err = $381;
    break;
   }
   $382 = $err;
   $err = $382;
   $i = 0;
   while(1) {
    HEAP32[$pEncodeStream>>2] = 0;
    HEAP32[$pEncoder>>2] = 0;
    HEAP32[$pConverter>>2] = 0;
    HEAPF32[$rX>>2] = 0.0;
    HEAPF32[$rY>>2] = 0.0;
    ;HEAP32[$rect+0>>2]=0|0;HEAP32[$rect+4>>2]=0|0;HEAP32[$rect+8>>2]=0|0;HEAP32[$rect+12>>2]=0|0;
    $383 = (_PKCodecFactory_CreateFormatConverter($pConverter)|0);
    $err = $383;
    $384 = ($383|0)<(0);
    if ($384) {
     label = 75;
     break;
    }
    $386 = $err;
    $err = $386;
    $387 = HEAP32[$pConverter>>2]|0;
    $388 = HEAP32[$387>>2]|0;
    $389 = HEAP32[$pConverter>>2]|0;
    $390 = HEAP32[$pDecoder>>2]|0;
    $391 = $pExt;
    $392 = (($args) + 16|0);
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$392+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$392+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$392+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$392+12>>2]|0;
    $393 = (FUNCTION_TABLE_iiiii[$388 & 255]($389,$390,$391,$$byval_copy)|0);
    $err = $393;
    $394 = ($393|0)<(0);
    if ($394) {
     label = 78;
     break;
    }
    $396 = $err;
    $err = $396;
    $397 = HEAP32[$pFactory>>2]|0;
    $398 = (($397) + 4|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = (($args) + 4|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = (FUNCTION_TABLE_iiii[$399 & 255]($pEncodeStream,$401,4984)|0);
    $err = $402;
    $403 = ($402|0)<(0);
    if ($403) {
     label = 81;
     break;
    }
    $405 = $err;
    $err = $405;
    $406 = HEAP32[$pCodecFactory>>2]|0;
    $407 = $pExt;
    $408 = (_WmpDecAppCreateEncoderFromExt($406,$407,$pEncoder)|0);
    $err = $408;
    $409 = ($408|0)<(0);
    if ($409) {
     label = 84;
     break;
    }
    $411 = $err;
    $err = $411;
    $412 = HEAP32[$pEncoder>>2]|0;
    $413 = (($412) + 280|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = ($414|0)!=(0);
    if ($415) {
     $416 = HEAP32[$pEncoder>>2]|0;
     $417 = HEAP32[$416>>2]|0;
     $418 = HEAP32[$pEncoder>>2]|0;
     $419 = HEAP32[$pEncodeStream>>2]|0;
     $420 = (($args) + 68|0);
     $421 = (FUNCTION_TABLE_iiiii[$417 & 255]($418,$419,$420,32868)|0);
     $err = $421;
     $422 = ($421|0)<(0);
     if ($422) {
      label = 88;
      break;
     }
     $424 = $err;
     $err = $424;
    } else {
     $425 = HEAP32[$pEncoder>>2]|0;
     $426 = HEAP32[$425>>2]|0;
     $427 = HEAP32[$pEncoder>>2]|0;
     $428 = HEAP32[$pEncodeStream>>2]|0;
     $429 = (FUNCTION_TABLE_iiiii[$426 & 255]($427,$428,0,0)|0);
     $err = $429;
     $430 = ($429|0)<(0);
     if ($430) {
      label = 92;
      break;
     }
     $432 = $err;
     $err = $432;
    }
    $433 = HEAP32[$pEncoder>>2]|0;
    $434 = (($433) + 48|0);
    HEAP32[$434>>2] = 86;
    $435 = HEAP32[$pEncoder>>2]|0;
    $436 = (($435) + 8|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = HEAP32[$pEncoder>>2]|0;
    $439 = (($args) + 16|0);
    ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$439+0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$439+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$439+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$439+12>>2]|0;
    $440 = (FUNCTION_TABLE_iii[$437 & 255]($438,$$byval_copy3)|0);
    $err = $440;
    $441 = ($440|0)<(0);
    if ($441) {
     label = 96;
     break;
    }
    $443 = $err;
    $err = $443;
    $444 = HEAP32[$pDecoder>>2]|0;
    $445 = (($444) + 92|0);
    $446 = (($445) + 168|0);
    $447 = (($446) + 32844|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = HEAP32[$pEncoder>>2]|0;
    $450 = (($449) + 284|0);
    $451 = (($450) + 168|0);
    $452 = (($451) + 32844|0);
    HEAP32[$452>>2] = $448;
    $453 = HEAP32[$pDecoder>>2]|0;
    $454 = (($453) + 92|0);
    $455 = (($454) + 88|0);
    $456 = (($455) + 36|0);
    $457 = HEAP32[$456>>2]|0;
    $458 = (($rect) + 8|0);
    HEAP32[$458>>2] = $457;
    $459 = HEAP32[$pDecoder>>2]|0;
    $460 = (($459) + 92|0);
    $461 = (($460) + 88|0);
    $462 = (($461) + 44|0);
    $463 = HEAP32[$462>>2]|0;
    $464 = (($rect) + 12|0);
    HEAP32[$464>>2] = $463;
    $465 = (($args) + 52|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = ($466>>>0)>(3);
    if ($467) {
     $468 = (($rect) + 8|0);
     $469 = HEAP32[$468>>2]|0;
     $bah = $469;
     $470 = (($rect) + 12|0);
     $471 = HEAP32[$470>>2]|0;
     $472 = (($rect) + 8|0);
     HEAP32[$472>>2] = $471;
     $473 = $bah;
     $474 = (($rect) + 12|0);
     HEAP32[$474>>2] = $473;
    }
    $475 = HEAP32[$pEncoder>>2]|0;
    $476 = (($475) + 12|0);
    $477 = HEAP32[$476>>2]|0;
    $478 = HEAP32[$pEncoder>>2]|0;
    $479 = (($rect) + 8|0);
    $480 = HEAP32[$479>>2]|0;
    $481 = (($rect) + 12|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = (FUNCTION_TABLE_iiii[$477 & 255]($478,$480,$482)|0);
    $err = $483;
    $484 = ($483|0)<(0);
    if ($484) {
     label = 101;
     break;
    }
    $486 = $err;
    $err = $486;
    $487 = HEAP32[$pDecoder>>2]|0;
    $488 = (($487) + 12|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = HEAP32[$pDecoder>>2]|0;
    $491 = (FUNCTION_TABLE_iiii[$489 & 255]($490,$rX,$rY)|0);
    $err = $491;
    $492 = ($491|0)<(0);
    if ($492) {
     label = 104;
     break;
    }
    $494 = $err;
    $err = $494;
    $495 = (($args) + 52|0);
    $496 = HEAP32[$495>>2]|0;
    $497 = ($496>>>0)>(3);
    if ($497) {
     $498 = HEAP32[$pEncoder>>2]|0;
     $499 = (($498) + 16|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = HEAP32[$pEncoder>>2]|0;
     $502 = +HEAPF32[$rY>>2];
     $503 = +HEAPF32[$rX>>2];
     $504 = (FUNCTION_TABLE_iidd[$500 & 255]($501,$502,$503)|0);
     $err = $504;
     $505 = ($504|0)<(0);
     if ($505) {
      label = 108;
      break;
     }
     $507 = $err;
     $err = $507;
    } else {
     $508 = HEAP32[$pEncoder>>2]|0;
     $509 = (($508) + 16|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = HEAP32[$pEncoder>>2]|0;
     $512 = +HEAPF32[$rX>>2];
     $513 = +HEAPF32[$rY>>2];
     $514 = (FUNCTION_TABLE_iidd[$510 & 255]($511,$512,$513)|0);
     $err = $514;
     $515 = ($514|0)<(0);
     if ($515) {
      label = 112;
      break;
     }
     $517 = $err;
     $err = $517;
    }
    $518 = HEAP32[$pEncoder>>2]|0;
    $519 = (($518) + 280|0);
    $520 = HEAP32[$519>>2]|0;
    $521 = ($520|0)!=(0);
    if ($521) {
     $522 = (($args) + 48|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = ($523>>>0)>(0);
     if ($524) {
      label = 117;
      break;
     }
    }
    $525 = HEAP32[$pEncoder>>2]|0;
    $526 = (($525) + 32|0);
    HEAP32[$526>>2] = 87;
    $527 = HEAP32[$pEncoder>>2]|0;
    $528 = (($527) + 32|0);
    $529 = HEAP32[$528>>2]|0;
    $530 = HEAP32[$pEncoder>>2]|0;
    $531 = HEAP32[$pConverter>>2]|0;
    $532 = (FUNCTION_TABLE_iiii[$529 & 255]($530,$531,$rect)|0);
    $err = $532;
    $533 = ($532|0)<(0);
    if ($533) {
     label = 119;
     break;
    }
    $535 = $err;
    $err = $535;
    $536 = HEAP32[$pEncoder>>2]|0;
    $537 = (($536) + 56|0);
    $538 = HEAP32[$537>>2]|0;
    (FUNCTION_TABLE_ii[$538 & 255]($pEncoder)|0);
    $539 = $i;
    $540 = (($539) + 1)|0;
    $541 = HEAP32[$cFrame>>2]|0;
    $542 = ($540|0)==($541|0);
    if ($542) {
     label = 122;
     break;
    }
    $543 = HEAP32[$pDecoder>>2]|0;
    $544 = (($543) + 36|0);
    $545 = HEAP32[$544>>2]|0;
    $546 = HEAP32[$pDecoder>>2]|0;
    $547 = $i;
    $548 = (($547) + 1)|0;
    $549 = (FUNCTION_TABLE_iii[$545 & 255]($546,$548)|0);
    $err = $549;
    $550 = ($549|0)<(0);
    if ($550) {
     label = 124;
     break;
    }
    $552 = $err;
    $err = $552;
    $553 = $i;
    $554 = (($553) + 1)|0;
    $i = $554;
   }
   switch (label|0) {
    case 75: {
     $385 = $err;
     $err = $385;
     break L5;
     break;
    }
    case 78: {
     $395 = $err;
     $err = $395;
     break L5;
     break;
    }
    case 81: {
     $404 = $err;
     $err = $404;
     break L5;
     break;
    }
    case 84: {
     $410 = $err;
     $err = $410;
     break L5;
     break;
    }
    case 88: {
     $423 = $err;
     $err = $423;
     break L5;
     break;
    }
    case 92: {
     $431 = $err;
     $err = $431;
     break L5;
     break;
    }
    case 96: {
     $442 = $err;
     $err = $442;
     break L5;
     break;
    }
    case 101: {
     $485 = $err;
     $err = $485;
     break L5;
     break;
    }
    case 104: {
     $493 = $err;
     $err = $493;
     break L5;
     break;
    }
    case 108: {
     $506 = $err;
     $err = $506;
     break L5;
     break;
    }
    case 112: {
     $516 = $err;
     $err = $516;
     break L5;
     break;
    }
    case 117: {
     (_printf((4992|0),($vararg_buffer|0))|0);
     $0 = 0;
     $561 = $0;
     STACKTOP = sp;return ($561|0);
     break;
    }
    case 119: {
     $534 = $err;
     $err = $534;
     break L5;
     break;
    }
    case 122: {
     $555 = HEAP32[$pDecoder>>2]|0;
     $556 = (($555) + 40|0);
     $557 = HEAP32[$556>>2]|0;
     (FUNCTION_TABLE_ii[$557 & 255]($pDecoder)|0);
     break L5;
     break;
    }
    case 124: {
     $551 = $err;
     $err = $551;
     break L5;
     break;
    }
   }
  }
 } while(0);
 $558 = $err;
 $559 = (-106)==($558|0);
 if ($559) {
  (_printf((4928|0),($vararg_buffer1|0))|0);
 }
 $560 = $err;
 $0 = $560;
 $561 = $0;
 STACKTOP = sp;return ($561|0);
}
function _AllocateCodingContextEnc($pSC,$iNumContexts,$iTrimFlexBits) {
 $pSC = $pSC|0;
 $iNumContexts = $iNumContexts|0;
 $iTrimFlexBits = $iTrimFlexBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $iCBPSize = 0, $k = 0, $pContext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $iNumContexts;
 $3 = $iTrimFlexBits;
 $4 = $3;
 $5 = ($4|0)<(0);
 if ($5) {
  $3 = 0;
 } else {
  $6 = $3;
  $7 = ($6|0)>(15);
  if ($7) {
   $3 = 15;
  }
 }
 $8 = $3;
 $9 = ($8|0)>(0);
 $10 = $9&1;
 $11 = $1;
 $12 = (($11) + 34136|0);
 $13 = (($12) + 28|0);
 HEAP32[$13>>2] = $10;
 $14 = $2;
 $15 = ($14|0)<(1);
 if (!($15)) {
  $16 = $2;
  $17 = ($16|0)>(4096);
  if (!($17)) {
   $18 = $1;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $0 = -1;
    $103 = $0;
    STACKTOP = sp;return ($103|0);
   }
   $20 = $2;
   $21 = ($20*592)|0;
   $22 = (_malloc($21)|0);
   $23 = $1;
   $24 = (($23) + 34336|0);
   HEAP32[$24>>2] = $22;
   $25 = $1;
   $26 = (($25) + 34336|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $29 = $1;
    $30 = (($29) + 34344|0);
    HEAP32[$30>>2] = 0;
    $0 = -1;
    $103 = $0;
    STACKTOP = sp;return ($103|0);
   }
   $31 = $1;
   $32 = (($31) + 34336|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $2;
   $35 = ($34*592)|0;
   _memset(($33|0),0,($35|0))|0;
   $36 = $2;
   $37 = $1;
   $38 = (($37) + 34344|0);
   HEAP32[$38>>2] = $36;
   $39 = $1;
   $40 = (($39) + 34136|0);
   $41 = (($40) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0);
   if ($43) {
    $55 = 1;
   } else {
    $44 = $1;
    $45 = (($44) + 34136|0);
    $46 = (($45) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(6);
    if ($48) {
     $55 = 1;
    } else {
     $49 = $1;
     $50 = (($49) + 34136|0);
     $51 = (($50) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(4);
     $55 = $53;
    }
   }
   $54 = $55 ? 5 : 9;
   $iCBPSize = $54;
   $i = 0;
   L23: while(1) {
    $56 = $i;
    $57 = $2;
    $58 = ($56|0)<($57|0);
    if (!($58)) {
     label = 30;
     break;
    }
    $59 = $i;
    $60 = $1;
    $61 = (($60) + 34336|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + (($59*592)|0)|0);
    $pContext = $63;
    $64 = $iCBPSize;
    $65 = (_Allocate($64,0)|0);
    $66 = $pContext;
    $67 = (($66) + 16|0);
    HEAP32[$67>>2] = $65;
    $68 = $pContext;
    $69 = (($68) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     label = 19;
     break;
    }
    $72 = (_Allocate(5,0)|0);
    $73 = $pContext;
    $74 = (($73) + 20|0);
    HEAP32[$74>>2] = $72;
    $75 = $pContext;
    $76 = (($75) + 20|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(0|0);
    if ($78) {
     label = 21;
     break;
    }
    $k = 0;
    while(1) {
     $79 = $k;
     $80 = ($79|0)<(21);
     if (!($80)) {
      break;
     }
     $81 = $k;
     $82 = (5048 + ($81<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (_Allocate($83,0)|0);
     $85 = $k;
     $86 = $pContext;
     $87 = (($86) + 24|0);
     $88 = (($87) + ($85<<2)|0);
     HEAP32[$88>>2] = $84;
     $89 = $k;
     $90 = $pContext;
     $91 = (($90) + 24|0);
     $92 = (($91) + ($89<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($93|0)==(0|0);
     if ($94) {
      label = 25;
      break L23;
     }
     $95 = $k;
     $96 = (($95) + 1)|0;
     $k = $96;
    }
    $97 = $pContext;
    _ResetCodingContextEnc($97);
    $98 = $3;
    $99 = $pContext;
    $100 = (($99) + 584|0);
    HEAP32[$100>>2] = $98;
    $101 = $i;
    $102 = (($101) + 1)|0;
    $i = $102;
   }
   if ((label|0) == 19) {
    $0 = -1;
    $103 = $0;
    STACKTOP = sp;return ($103|0);
   }
   else if ((label|0) == 21) {
    $0 = -1;
    $103 = $0;
    STACKTOP = sp;return ($103|0);
   }
   else if ((label|0) == 25) {
    $0 = -1;
    $103 = $0;
    STACKTOP = sp;return ($103|0);
   }
   else if ((label|0) == 30) {
    $0 = 0;
    $103 = $0;
    STACKTOP = sp;return ($103|0);
   }
  }
 }
 $0 = -1;
 $103 = $0;
 STACKTOP = sp;return ($103|0);
}
function _ResetCodingContextEnc($pContext) {
 $pContext = $pContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pContext;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 24|0);
 HEAP32[$8>>2] = 0;
 $k = 0;
 while(1) {
  $9 = $k;
  $10 = ($9|0)<(21);
  if (!($10)) {
   break;
  }
  $11 = $k;
  $12 = $0;
  $13 = (($12) + 24|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 24|0);
  HEAP32[$16>>2] = 0;
  $17 = $k;
  $18 = (($17) + 1)|0;
  $k = $18;
 }
 $19 = $0;
 _AdaptLowpassEnc($19);
 $20 = $0;
 _AdaptHighpassEnc($20);
 $21 = $0;
 _InitZigzagScan($21);
 $22 = $0;
 _ResetCodingContext($22);
 STACKTOP = sp;return;
}
function _FreeCodingContextEnc($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $iContexts = 0;
 var $k = 0, $pContext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34344|0);
 $3 = HEAP32[$2>>2]|0;
 $iContexts = $3;
 $4 = $iContexts;
 $5 = ($4|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = (($6) + 34336|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $iContexts;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = $0;
  $15 = (($14) + 34336|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + (($13*592)|0)|0);
  $pContext = $17;
  $18 = $pContext;
  $19 = (($18) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  _Clean($20);
  $21 = $pContext;
  $22 = (($21) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  _Clean($23);
  $k = 0;
  while(1) {
   $24 = $k;
   $25 = ($24|0)<(21);
   if (!($25)) {
    break;
   }
   $26 = $k;
   $27 = $pContext;
   $28 = (($27) + 24|0);
   $29 = (($28) + ($26<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   _Clean($30);
   $31 = $k;
   $32 = (($31) + 1)|0;
   $k = $32;
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $0;
 $36 = (($35) + 34336|0);
 $37 = HEAP32[$36>>2]|0;
 _free($37);
 STACKTOP = sp;return;
}
function _encodeQPIndex($pIO,$iIndex,$cBits) {
 $pIO = $pIO|0;
 $iIndex = $iIndex|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $iIndex;
 $2 = $cBits;
 $3 = $1;
 $4 = $3&255;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $0;
  _putBit16z($6,0,1);
  STACKTOP = sp;return;
 } else {
  $7 = $0;
  _putBit16z($7,1,1);
  $8 = $0;
  $9 = $1;
  $10 = $9&255;
  $11 = (($10) - 1)|0;
  $12 = $2;
  $13 = $12&255;
  _putBit16z($8,$11,$13);
  STACKTOP = sp;return;
 }
}
function _EncodeMacroblockDC($pSC,$pContext,$iMBX,$iMBY) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 $iMBX = $iMBX|0;
 $iMBY = $iMBY|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $aLaplacianMean = 0, $cf = 0, $iChannels = 0, $iDC = 0, $iDCU = 0, $iDCV = 0, $iDCY = 0, $iIndex = 0, $iModelBits = 0, $iQDC = 0, $iQDCU = 0, $iQDCV = 0, $iQDCY = 0, $iSign = 0, $j = 0, $pAH = 0, $pIO = 0, $pLM = 0, $pMBInfo = 0, $pTile = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aLaplacianMean = sp + 56|0;
 $0 = $pSC;
 $1 = $pContext;
 $2 = $iMBX;
 $3 = $iMBY;
 $4 = $0;
 $5 = (($4) + 34316|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = (($7) + 34296|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + (($9*240)|0)|0);
 $pTile = $10;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $pIO = $12;
 $13 = $0;
 $14 = (($13) + 32976|0);
 $pMBInfo = $14;
 $j = 0;
 ;HEAP32[$aLaplacianMean+0>>2]=0|0;HEAP32[$aLaplacianMean+4>>2]=0|0;
 $pLM = $aLaplacianMean;
 $15 = $1;
 $16 = (($15) + 532|0);
 $17 = (($16) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $iModelBits = $18;
 $19 = $0;
 $20 = (($19) + 34136|0);
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $cf = $22;
 $23 = $0;
 $24 = (($23) + 34136|0);
 $25 = (($24) + 36|0);
 $26 = HEAP32[$25>>2]|0;
 $iChannels = $26;
 $27 = $2;
 $2 = $27;
 $28 = $3;
 $3 = $28;
 $29 = $0;
 $30 = $pIO;
 (_writeIS($29,$30)|0);
 $31 = $0;
 $32 = (($31) + 34136|0);
 $33 = (($32) + 56|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = $pTile;
  $37 = (($36) + 192|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = ($39|0)>(1);
  if ($40) {
   $41 = (_rand()|0);
   $42 = $pTile;
   $43 = (($42) + 192|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = (($41|0) % ($45|0))&-1;
   $48 = $46;
  } else {
   $48 = 0;
  }
  $47 = $48&255;
  $49 = $pMBInfo;
  $50 = (($49) + 1156|0);
  HEAP8[$50>>0] = $47;
  $51 = $pTile;
  $52 = (($51) + 193|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)>(1);
  if ($55) {
   $56 = (_rand()|0);
   $57 = $pTile;
   $58 = (($57) + 193|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = (($56|0) % ($60|0))&-1;
   $63 = $61;
  } else {
   $63 = 0;
  }
  $62 = $63&255;
  $64 = $pMBInfo;
  $65 = (($64) + 1157|0);
  HEAP8[$65>>0] = $62;
 }
 $66 = $pTile;
 $67 = (($66) + 195|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = ($69|0)==(0);
 if ($70) {
  $71 = $pTile;
  $72 = (($71) + 193|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = ($74|0)>(1);
  if ($75) {
   $76 = $pMBInfo;
   $77 = (($76) + 1156|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $pMBInfo;
   $80 = (($79) + 1157|0);
   HEAP8[$80>>0] = $78;
  }
 }
 $81 = $0;
 $82 = (($81) + 84|0);
 $83 = (($82) + 28|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = $0;
  $87 = (($86) + 84|0);
  $88 = (($87) + 44|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)!=(3);
  if ($90) {
   $91 = $pTile;
   $92 = (($91) + 194|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = ($94|0)>(0);
   if ($95) {
    $96 = $pIO;
    $97 = $pMBInfo;
    $98 = (($97) + 1156|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $pTile;
    $101 = (($100) + 194|0);
    $102 = HEAP8[$101>>0]|0;
    _encodeQPIndex($96,$99,$102);
   }
   $103 = $0;
   $104 = (($103) + 84|0);
   $105 = (($104) + 44|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)!=(2);
   if ($107) {
    $108 = $pTile;
    $109 = (($108) + 195|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&255;
    $112 = ($111|0)>(0);
    if ($112) {
     $113 = $pIO;
     $114 = $pMBInfo;
     $115 = (($114) + 1157|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = $pTile;
     $118 = (($117) + 195|0);
     $119 = HEAP8[$118>>0]|0;
     _encodeQPIndex($113,$116,$119);
    }
   }
  }
 }
 $120 = $0;
 $121 = (($120) + 34136|0);
 $122 = (($121) + 56|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)==(0);
 if ($124) {
  $125 = $0;
  $126 = (($125) + 34460|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $0;
  (FUNCTION_TABLE_ii[$127 & 255]($128)|0);
 }
 $129 = $0;
 _predMacroblockEnc($129);
 $130 = $cf;
 $131 = ($130|0)==(0);
 if ($131) {
  label = 25;
 } else {
  $132 = $cf;
  $133 = ($132|0)==(4);
  if ($133) {
   label = 25;
  } else {
   $134 = $cf;
   $135 = ($134|0)==(6);
   if ($135) {
    label = 25;
   } else {
    $179 = $1;
    $180 = (($179) + 24|0);
    $181 = (($180) + 8|0);
    $182 = HEAP32[$181>>2]|0;
    $pAH = $182;
    $183 = $pMBInfo;
    $184 = HEAP32[$183>>2]|0;
    $iDCY = $184;
    $185 = (Math_abs(($184|0))|0);
    $iQDCY = $185;
    $186 = $pMBInfo;
    $187 = (($186) + 64|0);
    $188 = HEAP32[$187>>2]|0;
    $iDCU = $188;
    $189 = (Math_abs(($188|0))|0);
    $iQDCU = $189;
    $190 = $pMBInfo;
    $191 = (($190) + 128|0);
    $192 = HEAP32[$191>>2]|0;
    $iDCV = $192;
    $193 = (Math_abs(($192|0))|0);
    $iQDCV = $193;
    $194 = $iModelBits;
    $195 = ($194|0)!=(0);
    if ($195) {
     $196 = $iModelBits;
     $197 = $iQDCY;
     $198 = $197 >> $196;
     $iQDCY = $198;
    }
    $199 = $1;
    $200 = (($199) + 532|0);
    $201 = (($200) + 8|0);
    $202 = (($201) + 4|0);
    $203 = HEAP32[$202>>2]|0;
    $iModelBits = $203;
    $204 = $iModelBits;
    $205 = ($204|0)!=(0);
    if ($205) {
     $206 = $iModelBits;
     $207 = $iQDCU;
     $208 = $207 >> $206;
     $iQDCU = $208;
     $209 = $iModelBits;
     $210 = $iQDCV;
     $211 = $210 >> $209;
     $iQDCV = $211;
    }
    $212 = $1;
    $213 = (($212) + 532|0);
    $214 = (($213) + 8|0);
    $215 = HEAP32[$214>>2]|0;
    $iModelBits = $215;
    $216 = $iQDCY;
    $217 = ($216|0)!=(0);
    $218 = $217&1;
    $219 = $218<<2;
    $220 = $iQDCU;
    $221 = ($220|0)!=(0);
    $222 = $221&1;
    $223 = $222<<1;
    $224 = (($219) + ($223))|0;
    $225 = $iQDCV;
    $226 = ($225|0)!=(0);
    $227 = $226&1;
    $228 = (($224) + ($227))|0;
    $iIndex = $228;
    $229 = $pIO;
    $230 = $iIndex;
    $231 = $230<<1;
    $232 = (($231) + 1)|0;
    $233 = $pAH;
    $234 = (($233) + 4|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = (($235) + ($232<<2)|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = $iIndex;
    $239 = $238<<1;
    $240 = (($239) + 2)|0;
    $241 = $pAH;
    $242 = (($241) + 4|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($243) + ($240<<2)|0);
    $245 = HEAP32[$244>>2]|0;
    _putBit16z($229,$237,$245);
    $246 = $iQDCY;
    $247 = ($246|0)!=(0);
    if ($247) {
     $248 = $iQDCY;
     $249 = $1;
     $250 = (($249) + 24|0);
     $251 = (($250) + 12|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = $pIO;
     _EncodeSignificantAbsLevel($248,$252,$253);
     $254 = $pLM;
     $255 = HEAP32[$254>>2]|0;
     $256 = (($255) + 1)|0;
     HEAP32[$254>>2] = $256;
    }
    $257 = $pIO;
    $258 = $iDCY;
    $259 = (Math_abs(($258|0))|0);
    $260 = $iModelBits;
    _putBit16($257,$259,$260);
    $261 = $iDCY;
    $262 = ($261|0)!=(0);
    if ($262) {
     $263 = $pIO;
     $264 = $iDCY;
     $265 = ($264|0)<(0);
     $266 = $265&1;
     _putBit16z($263,$266,1);
    }
    $267 = (($aLaplacianMean) + 4|0);
    $pLM = $267;
    $268 = $1;
    $269 = (($268) + 532|0);
    $270 = (($269) + 8|0);
    $271 = (($270) + 4|0);
    $272 = HEAP32[$271>>2]|0;
    $iModelBits = $272;
    $273 = $iQDCU;
    $274 = ($273|0)!=(0);
    if ($274) {
     $275 = $iQDCU;
     $276 = $1;
     $277 = (($276) + 24|0);
     $278 = (($277) + 16|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = $pIO;
     _EncodeSignificantAbsLevel($275,$279,$280);
     $281 = $pLM;
     $282 = HEAP32[$281>>2]|0;
     $283 = (($282) + 1)|0;
     HEAP32[$281>>2] = $283;
    }
    $284 = $pIO;
    $285 = $iDCU;
    $286 = (Math_abs(($285|0))|0);
    $287 = $iModelBits;
    _putBit16($284,$286,$287);
    $288 = $iDCU;
    $289 = ($288|0)!=(0);
    if ($289) {
     $290 = $pIO;
     $291 = $iDCU;
     $292 = ($291|0)<(0);
     $293 = $292&1;
     _putBit16z($290,$293,1);
    }
    $294 = $iQDCV;
    $295 = ($294|0)!=(0);
    if ($295) {
     $296 = $iQDCV;
     $297 = $1;
     $298 = (($297) + 24|0);
     $299 = (($298) + 16|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = $pIO;
     _EncodeSignificantAbsLevel($296,$300,$301);
     $302 = $pLM;
     $303 = HEAP32[$302>>2]|0;
     $304 = (($303) + 1)|0;
     HEAP32[$302>>2] = $304;
    }
    $305 = $pIO;
    $306 = $iDCV;
    $307 = (Math_abs(($306|0))|0);
    $308 = $iModelBits;
    _putBit16($305,$307,$308);
    $309 = $iDCV;
    $310 = ($309|0)!=(0);
    if ($310) {
     $311 = $pIO;
     $312 = $iDCV;
     $313 = ($312|0)<(0);
     $314 = $313&1;
     _putBit16z($311,$314,1);
    }
   }
  }
 }
 if ((label|0) == 25) {
  $j = 0;
  while(1) {
   $136 = $j;
   $137 = $iChannels;
   $138 = ($136|0)<($137|0);
   if (!($138)) {
    break;
   }
   $139 = $j;
   $140 = $pMBInfo;
   $141 = (($140) + ($139<<6)|0);
   $142 = HEAP32[$141>>2]|0;
   $iDC = $142;
   $143 = $iDC;
   $144 = ($143|0)<(0);
   $145 = $144&1;
   $iSign = $145;
   $146 = $iDC;
   $147 = (Math_abs(($146|0))|0);
   $iDC = $147;
   $148 = $iDC;
   $149 = $iModelBits;
   $150 = $148 >> $149;
   $iQDC = $150;
   $151 = $iQDC;
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = $pIO;
    _putBit16z($153,1,1);
    $154 = $iQDC;
    $155 = $1;
    $156 = (($155) + 24|0);
    $157 = (($156) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $pIO;
    _EncodeSignificantAbsLevel($154,$158,$159);
    $160 = $pLM;
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) + 1)|0;
    HEAP32[$160>>2] = $162;
   } else {
    $163 = $pIO;
    _putBit16z($163,0,1);
   }
   $164 = $pIO;
   $165 = $iDC;
   $166 = $iModelBits;
   _putBit16($164,$165,$166);
   $167 = $iDC;
   $168 = ($167|0)!=(0);
   if ($168) {
    $169 = $pIO;
    $170 = $iSign;
    _putBit16z($169,$170,1);
   }
   $171 = (($aLaplacianMean) + 4|0);
   $pLM = $171;
   $172 = $1;
   $173 = (($172) + 532|0);
   $174 = (($173) + 8|0);
   $175 = (($174) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   $iModelBits = $176;
   $177 = $j;
   $178 = (($177) + 1)|0;
   $j = $178;
  }
 }
 $315 = $cf;
 $316 = $iChannels;
 $317 = $1;
 $318 = (($317) + 532|0);
 _UpdateModelMB($315,$316,$aLaplacianMean,$318);
 $319 = $0;
 $320 = (($319) + 34312|0);
 $321 = HEAP32[$320>>2]|0;
 $322 = ($321|0)!=(0);
 if (!($322)) {
  STACKTOP = sp;return 0;
 }
 $323 = $0;
 $324 = (($323) + 84|0);
 $325 = (($324) + 44|0);
 $326 = HEAP32[$325>>2]|0;
 $327 = ($326|0)==(3);
 if (!($327)) {
  STACKTOP = sp;return 0;
 }
 $328 = $1;
 $329 = (($328) + 24|0);
 $330 = (($329) + 8|0);
 $331 = HEAP32[$330>>2]|0;
 _AdaptDiscriminant($331);
 $332 = $1;
 $333 = (($332) + 24|0);
 $334 = (($333) + 12|0);
 $335 = HEAP32[$334>>2]|0;
 _AdaptDiscriminant($335);
 $336 = $1;
 $337 = (($336) + 24|0);
 $338 = (($337) + 16|0);
 $339 = HEAP32[$338>>2]|0;
 _AdaptDiscriminant($339);
 STACKTOP = sp;return 0;
}
function _EncodeSignificantAbsLevel($iAbsLevel,$pAHexpt,$pOut) {
 $iAbsLevel = $iAbsLevel|0;
 $pAHexpt = $pAHexpt|0;
 $pOut = $pOut|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $aFixedLength = 0, $aIndex = 0, $i = 0, $iFixed = 0, $iIndex = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aIndex = sp + 16|0;
 $aFixedLength = sp + 80|0;
 $0 = $iAbsLevel;
 $1 = $pAHexpt;
 $2 = $pOut;
 dest=$aIndex+0|0; src=6056+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$aFixedLength+0>>2]=HEAP32[6120+0>>2]|0;HEAP32[$aFixedLength+4>>2]=HEAP32[6120+4>>2]|0;HEAP32[$aFixedLength+8>>2]=HEAP32[6120+8>>2]|0;HEAP32[$aFixedLength+12>>2]=HEAP32[6120+12>>2]|0;HEAP32[$aFixedLength+16>>2]=HEAP32[6120+16>>2]|0;HEAP32[$aFixedLength+20>>2]=HEAP32[6120+20>>2]|0;
 $3 = $0;
 $4 = ($3>>>0)>(0);
 if (!($4)) {
  ___assert_fail((6144|0),(5184|0),60,(6160|0));
  // unreachable;
 }
 $5 = $0;
 $6 = (($5) + -1)|0;
 $0 = $6;
 $7 = $0;
 $8 = ($7>>>0)>=(16);
 if (!($8)) {
  $65 = $0;
  $66 = (($aIndex) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $iIndex = $67;
  $68 = $iIndex;
  $69 = (($aFixedLength) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $iFixed = $70;
  $71 = $iIndex;
  $72 = $1;
  $73 = (($72) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + ($71<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $1;
  $78 = (($77) + 28|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + ($76))|0;
  HEAP32[$78>>2] = $80;
  $81 = $2;
  $82 = $iIndex;
  $83 = $82<<1;
  $84 = (($83) + 1)|0;
  $85 = $1;
  $86 = (($85) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($84<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $iIndex;
  $91 = $90<<1;
  $92 = (($91) + 2)|0;
  $93 = $1;
  $94 = (($93) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($92<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  _putBit16z($81,$89,$97);
  $98 = $2;
  $99 = $0;
  $100 = $iFixed;
  _putBit32($98,$99,$100);
  STACKTOP = sp;return;
 }
 $9 = $0;
 $i = $9;
 $iIndex = 6;
 $10 = $i;
 $11 = $10 >> 5;
 $i = $11;
 $iFixed = 4;
 while(1) {
  $12 = $i;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $iFixed;
  $15 = (($14) + 1)|0;
  $iFixed = $15;
  $16 = $iFixed;
  $17 = ($16|0)<(30);
  if (!($17)) {
   label = 7;
   break;
  }
  $18 = $i;
  $19 = $18 >> 1;
  $i = $19;
 }
 if ((label|0) == 7) {
  ___assert_fail((6192|0),(5184|0),70,(6160|0));
  // unreachable;
 }
 $20 = $iIndex;
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($20<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 $27 = (($26) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25))|0;
 HEAP32[$27>>2] = $29;
 $30 = $2;
 $31 = $iIndex;
 $32 = $31<<1;
 $33 = (($32) + 1)|0;
 $34 = $1;
 $35 = (($34) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($33<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $iIndex;
 $40 = $39<<1;
 $41 = (($40) + 2)|0;
 $42 = $1;
 $43 = (($42) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + ($41<<2)|0);
 $46 = HEAP32[$45>>2]|0;
 _putBit16z($30,$38,$46);
 $47 = $iFixed;
 $48 = ($47|0)>(18);
 if ($48) {
  $49 = $2;
  _putBit16z($49,15,4);
  $50 = $iFixed;
  $51 = ($50|0)>(21);
  if ($51) {
   $52 = $2;
   _putBit16z($52,3,2);
   $53 = $2;
   $54 = $iFixed;
   $55 = (($54) - 22)|0;
   _putBit16($53,$55,3);
  } else {
   $56 = $2;
   $57 = $iFixed;
   $58 = (($57) - 19)|0;
   _putBit16z($56,$58,2);
  }
 } else {
  $59 = $2;
  $60 = $iFixed;
  $61 = (($60) - 4)|0;
  _putBit16z($59,$61,4);
 }
 $62 = $2;
 $63 = $0;
 $64 = $iFixed;
 _putBit32($62,$63,$64);
 STACKTOP = sp;return;
}
function _EncodeMacroblockLowpass($pSC,$pContext,$iMBX,$iMBY) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 $iMBX = $iMBX|0;
 $iMBY = $iMBY|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aBuf = 0, $aDC = 0, $aLaplacianMean = 0, $aRLCoeffs = 0, $aResidual = 0, $cf = 0, $iCBP = 0, $iChannel = 0, $iChannels = 0;
 var $iCoef = 0, $iCoef1 = 0, $iCount = 0, $iCountM = 0, $iCountZ = 0, $iDC = 0, $iFullChannels = 0, $iIndex = 0, $iMax = 0, $iModelBits = 0, $iNumCoeffs = 0, $iRun = 0, $iScale = 0, $iVal = 0, $iWeight = 0, $k = 0, $pIO = 0, $pLM = 0, $pMBInfo = 0, $pRL = 0;
 var $pRemap = 0, $pScan = 0, $putBits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3408|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aBuf = sp + 3280|0;
 $aLaplacianMean = sp + 3272|0;
 $aRLCoeffs = sp + 1168|0;
 $iNumCoeffs = sp;
 $aDC = sp + 64|0;
 $aResidual = sp + 128|0;
 $1 = $pSC;
 $2 = $pContext;
 $3 = $iMBX;
 $4 = $iMBY;
 $5 = $1;
 $6 = (($5) + 34136|0);
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $cf = $8;
 $9 = $1;
 $10 = (($9) + 34136|0);
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $iChannels = $12;
 $13 = $cf;
 $14 = ($13|0)==(1);
 if ($14) {
  label = 3;
 } else {
  $15 = $cf;
  $16 = ($15|0)==(2);
  if ($16) {
   label = 3;
  } else {
   $17 = $iChannels;
   $18 = $17;
  }
 }
 if ((label|0) == 3) {
  $18 = 1;
 }
 $iFullChannels = $18;
 $19 = $1;
 $20 = (($19) + 32976|0);
 $pMBInfo = $20;
 $21 = $2;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $pIO = $23;
 $24 = $2;
 $25 = (($24) + 108|0);
 $pScan = $25;
 $iRun = 0;
 $26 = $2;
 $27 = (($26) + 512|0);
 $28 = (($27) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $iModelBits = $29;
 ;HEAP32[$aLaplacianMean+0>>2]=0|0;HEAP32[$aLaplacianMean+4>>2]=0|0;
 $pLM = $aLaplacianMean;
 $putBits = 88;
 $30 = $3;
 $3 = $30;
 $31 = $4;
 $4 = $31;
 $32 = $iChannels;
 $33 = ($32|0)>(16);
 if ($33) {
  $0 = -1;
  $450 = $0;
  STACKTOP = sp;return ($450|0);
 }
 $34 = $1;
 $35 = (($34) + 84|0);
 $36 = (($35) + 28|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $1;
  $40 = (($39) + 34296|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $1;
  $43 = (($42) + 34316|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + (($41*240)|0)|0);
  $46 = (($45) + 194|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = ($48|0)>(0);
  if ($49) {
   $50 = $pIO;
   $51 = $pMBInfo;
   $52 = (($51) + 1156|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $1;
   $55 = (($54) + 34296|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 34316|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + (($56*240)|0)|0);
   $61 = (($60) + 194|0);
   $62 = HEAP8[$61>>0]|0;
   _encodeQPIndex($50,$53,$62);
  }
 }
 $k = 0;
 while(1) {
  $63 = $k;
  $64 = $iChannels;
  $65 = ($63|0)<($64|0);
  if (!($65)) {
   break;
  }
  $66 = $k;
  $67 = $pMBInfo;
  $68 = (($67) + ($66<<6)|0);
  $69 = $k;
  $70 = (($aDC) + ($69<<2)|0);
  HEAP32[$70>>2] = $68;
  $71 = $k;
  $72 = (($71) + 1)|0;
  $k = $72;
 }
 $73 = $1;
 $74 = (($73) + 34308|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)!=(0);
 if ($76) {
  $iScale = 2;
  $77 = $iScale;
  $78 = $77<<4;
  $iWeight = $78;
  $79 = $pScan;
  HEAP32[$79>>2] = 32767;
  $k = 1;
  while(1) {
   $80 = $k;
   $81 = ($80|0)<(16);
   if (!($81)) {
    break;
   }
   $82 = $iWeight;
   $83 = $k;
   $84 = $pScan;
   $85 = (($84) + ($83<<3)|0);
   HEAP32[$85>>2] = $82;
   $86 = $iScale;
   $87 = $iWeight;
   $88 = (($87) - ($86))|0;
   $iWeight = $88;
   $89 = $k;
   $90 = (($89) + 1)|0;
   $k = $90;
  }
 }
 $iChannel = 0;
 while(1) {
  $91 = $iChannel;
  $92 = $iFullChannels;
  $93 = ($91|0)<($92|0);
  if (!($93)) {
   break;
  }
  $94 = $iChannel;
  $95 = (($aDC) + ($94<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $iChannel;
  $98 = (($aResidual) + ($97<<6)|0);
  $99 = $pScan;
  $100 = $iModelBits;
  $101 = $iChannel;
  $102 = (($aRLCoeffs) + ($101<<7)|0);
  $103 = (_AdaptiveScan($96,$98,$99,$100,0,$102,16)|0);
  $104 = $iChannel;
  $105 = (($iNumCoeffs) + ($104<<2)|0);
  HEAP32[$105>>2] = $103;
  $106 = $2;
  $107 = (($106) + 512|0);
  $108 = (($107) + 8|0);
  $109 = (($108) + 4|0);
  $110 = HEAP32[$109>>2]|0;
  $iModelBits = $110;
  $111 = $iChannel;
  $112 = (($111) + 1)|0;
  $iChannel = $112;
 }
 $113 = $cf;
 $114 = ($113|0)==(1);
 if ($114) {
  label = 26;
 } else {
  $115 = $cf;
  $116 = ($115|0)==(2);
  if ($116) {
   label = 26;
  }
 }
 if ((label|0) == 26) {
  $117 = $cf;
  $118 = ($117|0)==(1);
  $119 = $118&1;
  $120 = (5136 + ($119<<2)|0);
  $pRemap = $120;
  $121 = $cf;
  $122 = ($121|0)==(1);
  $123 = $122 ? 6 : 14;
  $iCount = $123;
  $iCoef = 0;
  $iRun = 0;
  $124 = $2;
  $125 = (($124) + 512|0);
  $126 = (($125) + 8|0);
  $127 = (($126) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $iModelBits = $128;
  $k = 0;
  while(1) {
   $129 = $k;
   $130 = $iCount;
   $131 = ($129|0)<($130|0);
   if (!($131)) {
    break;
   }
   $132 = $k;
   $133 = $132 >> 1;
   $134 = $pRemap;
   $135 = (($134) + ($133<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $iIndex = $136;
   $137 = $iIndex;
   $138 = $k;
   $139 = $138 & 1;
   $140 = (($139) + 1)|0;
   $141 = (($aDC) + ($140<<2)|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + ($137<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $iDC = $144;
   $145 = $iDC;
   $146 = (Math_abs(($145|0))|0);
   $147 = $iModelBits;
   $148 = $146 >> $147;
   $iVal = $148;
   $149 = $iIndex;
   $150 = $k;
   $151 = $150 & 1;
   $152 = (($aBuf) + ($151<<5)|0);
   $153 = (($152) + ($149<<2)|0);
   HEAP32[$153>>2] = $148;
   $154 = $iVal;
   $155 = ($154|0)!=(0);
   if ($155) {
    $156 = $iRun;
    $157 = $iCoef;
    $158 = $157<<1;
    $159 = (($aRLCoeffs) + 128|0);
    $160 = (($159) + ($158<<2)|0);
    HEAP32[$160>>2] = $156;
    $161 = $iDC;
    $162 = ($161|0)<(0);
    if ($162) {
     $163 = $iVal;
     $164 = (0 - ($163))|0;
     $171 = $164;
    } else {
     $165 = $iVal;
     $171 = $165;
    }
    $166 = $iCoef;
    $167 = $166<<1;
    $168 = (($167) + 1)|0;
    $169 = (($aRLCoeffs) + 128|0);
    $170 = (($169) + ($168<<2)|0);
    HEAP32[$170>>2] = $171;
    $172 = $iCoef;
    $173 = (($172) + 1)|0;
    $iCoef = $173;
    $iRun = 0;
   } else {
    $174 = $iRun;
    $175 = (($174) + 1)|0;
    $iRun = $175;
   }
   $176 = $k;
   $177 = (($176) + 1)|0;
   $k = $177;
  }
  $178 = $iCoef;
  $179 = (($iNumCoeffs) + 4|0);
  HEAP32[$179>>2] = $178;
 }
 $180 = $cf;
 $181 = ($180|0)==(1);
 if ($181) {
  label = 39;
 } else {
  $182 = $cf;
  $183 = ($182|0)==(2);
  if ($183) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $iFullChannels = 2;
 }
 $184 = $cf;
 $185 = ($184|0)==(1);
 if ($185) {
  label = 43;
 } else {
  $186 = $cf;
  $187 = ($186|0)==(2);
  if ($187) {
   label = 43;
  } else {
   $188 = $cf;
   $189 = ($188|0)==(3);
   if ($189) {
    label = 43;
   } else {
    $iChannel = 0;
    while(1) {
     $277 = $iChannel;
     $278 = $iChannels;
     $279 = ($277|0)<($278|0);
     if (!($279)) {
      break;
     }
     $280 = $pIO;
     $281 = $iChannel;
     $282 = (($iNumCoeffs) + ($281<<2)|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = ($283|0)>(0);
     $285 = $284&1;
     _putBit16z($280,$285,1);
     $286 = $iChannel;
     $287 = (($286) + 1)|0;
     $iChannel = $287;
    }
   }
  }
 }
 if ((label|0) == 43) {
  $190 = $iFullChannels;
  $191 = $190<<2;
  $192 = (($191) - 5)|0;
  $iMax = $192;
  $193 = $2;
  $194 = (($193) + 556|0);
  $195 = HEAP32[$194>>2]|0;
  $iCountM = $195;
  $196 = $2;
  $197 = (($196) + 552|0);
  $198 = HEAP32[$197>>2]|0;
  $iCountZ = $198;
  $199 = HEAP32[$iNumCoeffs>>2]|0;
  $200 = ($199|0)>(0);
  $201 = $200&1;
  $202 = (($iNumCoeffs) + 4|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = ($203|0)>(0);
  $205 = $204&1;
  $206 = $205<<1;
  $207 = (($201) + ($206))|0;
  $iCBP = $207;
  $208 = $iFullChannels;
  $209 = ($208|0)==(3);
  if ($209) {
   $210 = (($iNumCoeffs) + 8|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ($211|0)>(0);
   $213 = $212&1;
   $214 = $213<<2;
   $215 = $iCBP;
   $216 = (($215) + ($214))|0;
   $iCBP = $216;
  }
  $217 = $iCountZ;
  $218 = ($217|0)<=(0);
  if ($218) {
   label = 47;
  } else {
   $219 = $iCountM;
   $220 = ($219|0)<(0);
   if ($220) {
    label = 47;
   } else {
    $245 = $pIO;
    $246 = $iCBP;
    $247 = $iFullChannels;
    _putBit16z($245,$246,$247);
   }
  }
  if ((label|0) == 47) {
   $221 = $iCBP;
   $iVal = $221;
   $222 = $iCountM;
   $223 = $iCountZ;
   $224 = ($222|0)<($223|0);
   if ($224) {
    $225 = $iMax;
    $226 = $iCBP;
    $227 = (($225) - ($226))|0;
    $iVal = $227;
   }
   $228 = $iVal;
   $229 = ($228|0)==(0);
   if ($229) {
    $230 = $pIO;
    _putBit16z($230,0,1);
   } else {
    $231 = $iVal;
    $232 = ($231|0)==(1);
    if ($232) {
     $233 = $pIO;
     $234 = $iFullChannels;
     $235 = (($234) + 1)|0;
     $236 = $235 & 6;
     $237 = $iFullChannels;
     _putBit16z($233,$236,$237);
    } else {
     $238 = $pIO;
     $239 = $iVal;
     $240 = $iMax;
     $241 = (($239) + ($240))|0;
     $242 = (($241) + 1)|0;
     $243 = $iFullChannels;
     $244 = (($243) + 1)|0;
     _putBit16z($238,$242,$244);
    }
   }
  }
  $248 = $iCBP;
  $249 = $iMax;
  $250 = ($248|0)==($249|0);
  $251 = $250&1;
  $252 = $251<<2;
  $253 = (1 - ($252))|0;
  $254 = $iCountM;
  $255 = (($254) + ($253))|0;
  $iCountM = $255;
  $256 = $iCBP;
  $257 = ($256|0)==(0);
  $258 = $257&1;
  $259 = $258<<2;
  $260 = (1 - ($259))|0;
  $261 = $iCountZ;
  $262 = (($261) + ($260))|0;
  $iCountZ = $262;
  $263 = $iCountM;
  $264 = ($263|0)<(-8);
  if ($264) {
   $iCountM = -8;
  } else {
   $265 = $iCountM;
   $266 = ($265|0)>(7);
   if ($266) {
    $iCountM = 7;
   }
  }
  $267 = $iCountM;
  $268 = $2;
  $269 = (($268) + 556|0);
  HEAP32[$269>>2] = $267;
  $270 = $iCountZ;
  $271 = ($270|0)<(-8);
  if ($271) {
   $iCountZ = -8;
  } else {
   $272 = $iCountZ;
   $273 = ($272|0)>(7);
   if ($273) {
    $iCountZ = 7;
   }
  }
  $274 = $iCountZ;
  $275 = $2;
  $276 = (($275) + 552|0);
  HEAP32[$276>>2] = $274;
 }
 $288 = $2;
 $289 = (($288) + 512|0);
 $290 = (($289) + 8|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = ($291|0)>(14);
 if ($292) {
  label = 75;
 } else {
  $293 = $2;
  $294 = (($293) + 512|0);
  $295 = (($294) + 8|0);
  $296 = (($295) + 4|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = ($297|0)>(14);
  if ($298) {
   label = 75;
  }
 }
 if ((label|0) == 75) {
  $putBits = 89;
 }
 $299 = $2;
 $300 = (($299) + 512|0);
 $301 = (($300) + 8|0);
 $302 = HEAP32[$301>>2]|0;
 $iModelBits = $302;
 $iChannel = 0;
 while(1) {
  $303 = $iChannel;
  $304 = $iFullChannels;
  $305 = ($303|0)<($304|0);
  if (!($305)) {
   break;
  }
  $306 = $iChannel;
  $307 = (($aRLCoeffs) + ($306<<7)|0);
  $pRL = $307;
  $308 = $iChannel;
  $309 = (($iNumCoeffs) + ($308<<2)|0);
  $310 = HEAP32[$309>>2]|0;
  $iCoef1 = $310;
  $311 = $iCoef1;
  $312 = ($311|0)!=(0);
  if ($312) {
   $313 = $iCoef1;
   $314 = $pLM;
   $315 = HEAP32[$314>>2]|0;
   $316 = (($315) + ($313))|0;
   HEAP32[$314>>2] = $316;
   $317 = $iChannel;
   $318 = ($317|0)>(0);
   $319 = $318&1;
   $320 = $pRL;
   $321 = $iCoef1;
   $322 = $2;
   $323 = (($322) + 24|0);
   $324 = $pIO;
   $325 = $cf;
   $326 = ($325|0)==(1);
   if ($326) {
    $327 = $iChannel;
    $328 = ($327|0)==(1);
    $330 = $328;
   } else {
    $330 = 0;
   }
   $329 = $330&1;
   $331 = ($329*9)|0;
   $332 = (1 + ($331))|0;
   $333 = $cf;
   $334 = ($333|0)==(2);
   if ($334) {
    $335 = $iChannel;
    $336 = ($335|0)==(1);
    $338 = $336;
   } else {
    $338 = 0;
   }
   $337 = $338&1;
   $339 = (($332) + ($337))|0;
   $340 = (_EncodeBlock($319,$320,$321,$323,5,$324,$339)|0);
   $341 = ($340|0)!=(0);
   if ($341) {
    label = 84;
    break;
   }
  }
  $342 = $iModelBits;
  $343 = ($342|0)!=(0);
  if ($343) {
   $344 = $cf;
   $345 = ($344|0)==(1);
   if ($345) {
    label = 89;
   } else {
    $346 = $cf;
    $347 = ($346|0)==(2);
    if ($347) {
     label = 89;
    } else {
     label = 101;
    }
   }
   if ((label|0) == 89) {
    label = 0;
    $348 = $iChannel;
    $349 = ($348|0)!=(0);
    if ($349) {
     $k = 1;
     while(1) {
      $350 = $k;
      $351 = $cf;
      $352 = ($351|0)==(1);
      $353 = $352 ? 4 : 8;
      $354 = ($350|0)<($353|0);
      if (!($354)) {
       break;
      }
      $355 = $putBits;
      $356 = $pIO;
      $357 = $k;
      $358 = (($aDC) + 4|0);
      $359 = HEAP32[$358>>2]|0;
      $360 = (($359) + ($357<<2)|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = (Math_abs(($361|0))|0);
      $363 = $iModelBits;
      FUNCTION_TABLE_viii[$355 & 127]($356,$362,$363);
      $364 = $k;
      $365 = (($aBuf) + ($364<<2)|0);
      $366 = HEAP32[$365>>2]|0;
      $367 = ($366|0)==(0);
      do {
       if ($367) {
        $368 = $k;
        $369 = (($aDC) + 4|0);
        $370 = HEAP32[$369>>2]|0;
        $371 = (($370) + ($368<<2)|0);
        $372 = HEAP32[$371>>2]|0;
        $373 = ($372|0)!=(0);
        if (!($373)) {
         break;
        }
        $374 = $pIO;
        $375 = $k;
        $376 = (($aDC) + 4|0);
        $377 = HEAP32[$376>>2]|0;
        $378 = (($377) + ($375<<2)|0);
        $379 = HEAP32[$378>>2]|0;
        $380 = ($379|0)<(0);
        $381 = $380&1;
        _putBit16z($374,$381,1);
       }
      } while(0);
      $382 = $putBits;
      $383 = $pIO;
      $384 = $k;
      $385 = (($aDC) + 8|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = (($386) + ($384<<2)|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = (Math_abs(($388|0))|0);
      $390 = $iModelBits;
      FUNCTION_TABLE_viii[$382 & 127]($383,$389,$390);
      $391 = $k;
      $392 = (($aBuf) + 32|0);
      $393 = (($392) + ($391<<2)|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = ($394|0)==(0);
      do {
       if ($395) {
        $396 = $k;
        $397 = (($aDC) + 8|0);
        $398 = HEAP32[$397>>2]|0;
        $399 = (($398) + ($396<<2)|0);
        $400 = HEAP32[$399>>2]|0;
        $401 = ($400|0)!=(0);
        if (!($401)) {
         break;
        }
        $402 = $pIO;
        $403 = $k;
        $404 = (($aDC) + 8|0);
        $405 = HEAP32[$404>>2]|0;
        $406 = (($405) + ($403<<2)|0);
        $407 = HEAP32[$406>>2]|0;
        $408 = ($407|0)<(0);
        $409 = $408&1;
        _putBit16z($402,$409,1);
       }
      } while(0);
      $410 = $k;
      $411 = (($410) + 1)|0;
      $k = $411;
     }
    } else {
     label = 101;
    }
   }
   if ((label|0) == 101) {
    label = 0;
    $k = 1;
    while(1) {
     $412 = $k;
     $413 = ($412|0)<(16);
     if (!($413)) {
      break;
     }
     $414 = $pIO;
     $415 = $k;
     $416 = $iChannel;
     $417 = (($aResidual) + ($416<<6)|0);
     $418 = (($417) + ($415<<2)|0);
     $419 = HEAP32[$418>>2]|0;
     $420 = $419 >> 1;
     $421 = $iModelBits;
     $422 = $k;
     $423 = $iChannel;
     $424 = (($aResidual) + ($423<<6)|0);
     $425 = (($424) + ($422<<2)|0);
     $426 = HEAP32[$425>>2]|0;
     $427 = $426 & 1;
     $428 = (($421) + ($427))|0;
     _putBit16z($414,$420,$428);
     $429 = $k;
     $430 = (($429) + 1)|0;
     $k = $430;
    }
   }
  }
  $431 = (($aLaplacianMean) + 4|0);
  $pLM = $431;
  $432 = $2;
  $433 = (($432) + 512|0);
  $434 = (($433) + 8|0);
  $435 = (($434) + 4|0);
  $436 = HEAP32[$435>>2]|0;
  $iModelBits = $436;
  $437 = $iChannel;
  $438 = (($437) + 1)|0;
  $iChannel = $438;
 }
 if ((label|0) == 84) {
  $0 = -1;
  $450 = $0;
  STACKTOP = sp;return ($450|0);
 }
 $439 = $1;
 $440 = $pIO;
 (_writeIS($439,$440)|0);
 $441 = $cf;
 $442 = $iChannels;
 $443 = $2;
 $444 = (($443) + 512|0);
 _UpdateModelMB($441,$442,$aLaplacianMean,$444);
 $445 = $1;
 $446 = (($445) + 34312|0);
 $447 = HEAP32[$446>>2]|0;
 $448 = ($447|0)!=(0);
 if ($448) {
  $449 = $2;
  _AdaptLowpassEnc($449);
 }
 $0 = 0;
 $450 = $0;
 STACKTOP = sp;return ($450|0);
}
function _AdaptiveScan($pCoeffs,$pResidual,$pScan,$iModelBits,$iTrimBits,$pRLCoeffs,$iCount) {
 $pCoeffs = $pCoeffs|0;
 $pResidual = $pResidual|0;
 $pScan = $pScan|0;
 $iModelBits = $iModelBits|0;
 $iTrimBits = $iTrimBits|0;
 $pRLCoeffs = $pRLCoeffs|0;
 $iCount = $iCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cTemp = 0, $cTemp10 = 0, $iLevel = 0, $iLevel3 = 0, $iNumNonzero = 0, $iNumNonzero4 = 0, $iRun = 0;
 var $iRun2 = 0, $iSign = 0, $iTemp = 0, $iTemp1 = 0, $iTemp16 = 0, $iTemp5 = 0, $iTh = 0, $iTh8 = 0, $iThOff = 0, $iThOff7 = 0, $k = 0, $k1 = 0, $sk = 0, $sk9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cTemp = sp + 8|0;
 $cTemp10 = sp + 56|0;
 $1 = $pCoeffs;
 $2 = $pResidual;
 $3 = $pScan;
 $4 = $iModelBits;
 $5 = $iTrimBits;
 $6 = $pRLCoeffs;
 $7 = $iCount;
 $8 = $4;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $1;
  $11 = $3;
  $12 = $6;
  $13 = $7;
  $14 = (_AdaptiveScanZero($10,$11,$12,$13)|0);
  $0 = $14;
  $392 = $0;
  STACKTOP = sp;return ($392|0);
 }
 $15 = $4;
 $16 = $5;
 $17 = ($15|0)<=($16|0);
 if ($17) {
  $18 = $1;
  $19 = $3;
  $20 = $4;
  $21 = $6;
  $22 = $7;
  $23 = (_AdaptiveScanTrim($18,$19,$20,$21,$22)|0);
  $0 = $23;
  $392 = $0;
  STACKTOP = sp;return ($392|0);
 }
 $24 = $5;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $4;
  $27 = ($26|0)<(6);
  if ($27) {
   $iRun = 0;
   $iNumNonzero = 0;
   $28 = $4;
   $29 = 1 << $28;
   $30 = (($29) - 1)|0;
   $iThOff = $30;
   $31 = $iThOff;
   $32 = $31<<1;
   $33 = (($32) + 1)|0;
   $iTh = $33;
   $34 = $3;
   $35 = (($34) + 8|0);
   $36 = (($35) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $1;
   $39 = (($38) + ($37<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $iLevel = $40;
   $41 = $iLevel;
   $42 = $iThOff;
   $43 = (($41) + ($42))|0;
   $44 = $iTh;
   $45 = ($43>>>0)>=($44>>>0);
   if ($45) {
    $46 = $iLevel;
    $47 = (Math_abs(($46|0))|0);
    $iTemp1 = $47;
    $48 = $iTemp1;
    $49 = $4;
    $50 = $48 >> $49;
    $iTemp = $50;
    $51 = $iTemp1;
    $52 = $iThOff;
    $53 = $51 & $52;
    $54 = $53<<1;
    $55 = $3;
    $56 = (($55) + 8|0);
    $57 = (($56) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $2;
    $60 = (($59) + ($58<<2)|0);
    HEAP32[$60>>2] = $54;
    $61 = $3;
    $62 = (($61) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + 1)|0;
    HEAP32[$62>>2] = $64;
    $65 = $iRun;
    $66 = $iNumNonzero;
    $67 = $66<<1;
    $68 = $6;
    $69 = (($68) + ($67<<2)|0);
    HEAP32[$69>>2] = $65;
    $70 = $iLevel;
    $71 = ($70|0)<(0);
    if ($71) {
     $72 = $iTemp;
     $73 = (0 - ($72))|0;
     $80 = $73;
    } else {
     $74 = $iTemp;
     $80 = $74;
    }
    $75 = $iNumNonzero;
    $76 = $75<<1;
    $77 = (($76) + 1)|0;
    $78 = $6;
    $79 = (($78) + ($77<<2)|0);
    HEAP32[$79>>2] = $80;
    $81 = $iNumNonzero;
    $82 = (($81) + 1)|0;
    $iNumNonzero = $82;
    $iRun = 0;
   } else {
    $83 = $iRun;
    $84 = (($83) + 1)|0;
    $iRun = $84;
    $85 = $iLevel;
    $86 = (($85) + 32)|0;
    $87 = (5792 + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $3;
    $90 = (($89) + 8|0);
    $91 = (($90) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $2;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$94>>2] = $88;
   }
   $k = 2;
   while(1) {
    $95 = $k;
    $96 = $7;
    $97 = ($95|0)<($96|0);
    if (!($97)) {
     break;
    }
    $98 = $k;
    $99 = $3;
    $100 = (($99) + ($98<<3)|0);
    $101 = (($100) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $sk = $102;
    $103 = $sk;
    $104 = $1;
    $105 = (($104) + ($103<<2)|0);
    $106 = HEAP32[$105>>2]|0;
    $iLevel = $106;
    $107 = $iLevel;
    $108 = $iThOff;
    $109 = (($107) + ($108))|0;
    $110 = $iTh;
    $111 = ($109>>>0)>=($110>>>0);
    if ($111) {
     $112 = $iLevel;
     $113 = ($112|0)<(0);
     $114 = $113&1;
     $115 = (0 - ($114))|0;
     $iSign = $115;
     $116 = $iSign;
     $117 = $iLevel;
     $118 = $116 ^ $117;
     $119 = $iSign;
     $120 = (($118) - ($119))|0;
     $iTemp1 = $120;
     $121 = $iTemp1;
     $122 = $4;
     $123 = $121 >> $122;
     $iTemp = $123;
     $124 = $iTemp1;
     $125 = $iThOff;
     $126 = $124 & $125;
     $127 = $126<<1;
     $128 = $sk;
     $129 = $2;
     $130 = (($129) + ($128<<2)|0);
     HEAP32[$130>>2] = $127;
     $131 = $k;
     $132 = $3;
     $133 = (($132) + ($131<<3)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($134) + 1)|0;
     HEAP32[$133>>2] = $135;
     $136 = $k;
     $137 = $3;
     $138 = (($137) + ($136<<3)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $k;
     $141 = (($140) - 1)|0;
     $142 = $3;
     $143 = (($142) + ($141<<3)|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($139>>>0)>($144>>>0);
     if ($145) {
      $146 = $k;
      $147 = $3;
      $148 = (($147) + ($146<<3)|0);
      ;HEAP32[$cTemp+0>>2]=HEAP32[$148+0>>2]|0;HEAP32[$cTemp+4>>2]=HEAP32[$148+4>>2]|0;
      $149 = $k;
      $150 = $3;
      $151 = (($150) + ($149<<3)|0);
      $152 = $k;
      $153 = (($152) - 1)|0;
      $154 = $3;
      $155 = (($154) + ($153<<3)|0);
      ;HEAP32[$151+0>>2]=HEAP32[$155+0>>2]|0;HEAP32[$151+4>>2]=HEAP32[$155+4>>2]|0;
      $156 = $k;
      $157 = (($156) - 1)|0;
      $158 = $3;
      $159 = (($158) + ($157<<3)|0);
      ;HEAP32[$159+0>>2]=HEAP32[$cTemp+0>>2]|0;HEAP32[$159+4>>2]=HEAP32[$cTemp+4>>2]|0;
     }
     $160 = $iRun;
     $161 = $iNumNonzero;
     $162 = $161<<1;
     $163 = $6;
     $164 = (($163) + ($162<<2)|0);
     HEAP32[$164>>2] = $160;
     $165 = $iTemp;
     $166 = $iSign;
     $167 = $165 ^ $166;
     $168 = $iSign;
     $169 = (($167) - ($168))|0;
     $170 = $iNumNonzero;
     $171 = $170<<1;
     $172 = (($171) + 1)|0;
     $173 = $6;
     $174 = (($173) + ($172<<2)|0);
     HEAP32[$174>>2] = $169;
     $175 = $iNumNonzero;
     $176 = (($175) + 1)|0;
     $iNumNonzero = $176;
     $iRun = 0;
    } else {
     $177 = $iRun;
     $178 = (($177) + 1)|0;
     $iRun = $178;
     $179 = $iLevel;
     $180 = (($179) + 32)|0;
     $181 = (5792 + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $sk;
     $184 = $2;
     $185 = (($184) + ($183<<2)|0);
     HEAP32[$185>>2] = $182;
    }
    $186 = $k;
    $187 = (($186) + 1)|0;
    $k = $187;
   }
   $188 = $iNumNonzero;
   $0 = $188;
   $392 = $0;
   STACKTOP = sp;return ($392|0);
  }
 }
 $iRun2 = 0;
 $iNumNonzero4 = 0;
 $189 = $4;
 $190 = 1 << $189;
 $191 = (($190) - 1)|0;
 $iThOff7 = $191;
 $192 = $iThOff7;
 $193 = $192<<1;
 $194 = (($193) + 1)|0;
 $iTh8 = $194;
 $195 = $3;
 $196 = (($195) + 8|0);
 $197 = (($196) + 4|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $1;
 $200 = (($199) + ($198<<2)|0);
 $201 = HEAP32[$200>>2]|0;
 $iLevel3 = $201;
 $202 = $iLevel3;
 $203 = $iThOff7;
 $204 = (($202) + ($203))|0;
 $205 = $iTh8;
 $206 = ($204>>>0)>=($205>>>0);
 if ($206) {
  $207 = $iLevel3;
  $208 = (Math_abs(($207|0))|0);
  $iTemp16 = $208;
  $209 = $iTemp16;
  $210 = $4;
  $211 = $209 >> $210;
  $iTemp5 = $211;
  $212 = $iTemp16;
  $213 = $iThOff7;
  $214 = $212 & $213;
  $215 = $5;
  $216 = $214 >>> $215;
  $217 = $216<<1;
  $218 = $3;
  $219 = (($218) + 8|0);
  $220 = (($219) + 4|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $2;
  $223 = (($222) + ($221<<2)|0);
  HEAP32[$223>>2] = $217;
  $224 = $3;
  $225 = (($224) + 8|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($226) + 1)|0;
  HEAP32[$225>>2] = $227;
  $228 = $iRun2;
  $229 = $iNumNonzero4;
  $230 = $229<<1;
  $231 = $6;
  $232 = (($231) + ($230<<2)|0);
  HEAP32[$232>>2] = $228;
  $233 = $iLevel3;
  $234 = ($233|0)<(0);
  if ($234) {
   $235 = $iTemp5;
   $236 = (0 - ($235))|0;
   $243 = $236;
  } else {
   $237 = $iTemp5;
   $243 = $237;
  }
  $238 = $iNumNonzero4;
  $239 = $238<<1;
  $240 = (($239) + 1)|0;
  $241 = $6;
  $242 = (($241) + ($240<<2)|0);
  HEAP32[$242>>2] = $243;
  $244 = $iNumNonzero4;
  $245 = (($244) + 1)|0;
  $iNumNonzero4 = $245;
  $iRun2 = 0;
 } else {
  $246 = $iRun2;
  $247 = (($246) + 1)|0;
  $iRun2 = $247;
  $248 = $iLevel3;
  $249 = ($248|0)<(0);
  $250 = $249&1;
  $251 = (0 - ($250))|0;
  $iTemp5 = $251;
  $252 = $iLevel3;
  $253 = $iTemp5;
  $254 = (($252) + ($253))|0;
  $255 = $5;
  $256 = $254 >> $255;
  $257 = $iTemp5;
  $258 = (($256) - ($257))|0;
  $iLevel3 = $258;
  $259 = $iLevel3;
  $260 = ($259|0)<(0);
  $261 = $260&1;
  $262 = (0 - ($261))|0;
  $iTemp5 = $262;
  $263 = $iLevel3;
  $264 = $iTemp5;
  $265 = $263 ^ $264;
  $266 = $265<<2;
  $267 = $iTemp5;
  $268 = 6 & $267;
  $269 = (($266) + ($268))|0;
  $270 = $iLevel3;
  $271 = ($270|0)!=(0);
  $272 = $271&1;
  $273 = (($269) + ($272))|0;
  $274 = $3;
  $275 = (($274) + 8|0);
  $276 = (($275) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $2;
  $279 = (($278) + ($277<<2)|0);
  HEAP32[$279>>2] = $273;
 }
 $k1 = 2;
 while(1) {
  $280 = $k1;
  $281 = $7;
  $282 = ($280|0)<($281|0);
  if (!($282)) {
   break;
  }
  $283 = $k1;
  $284 = $3;
  $285 = (($284) + ($283<<3)|0);
  $286 = (($285) + 4|0);
  $287 = HEAP32[$286>>2]|0;
  $sk9 = $287;
  $288 = $sk9;
  $289 = $1;
  $290 = (($289) + ($288<<2)|0);
  $291 = HEAP32[$290>>2]|0;
  $iLevel3 = $291;
  $292 = $iLevel3;
  $293 = $iThOff7;
  $294 = (($292) + ($293))|0;
  $295 = $iTh8;
  $296 = ($294>>>0)>=($295>>>0);
  if ($296) {
   $297 = $iLevel3;
   $298 = (Math_abs(($297|0))|0);
   $iTemp16 = $298;
   $299 = $iTemp16;
   $300 = $4;
   $301 = $299 >> $300;
   $iTemp5 = $301;
   $302 = $iTemp16;
   $303 = $iThOff7;
   $304 = $302 & $303;
   $305 = $5;
   $306 = $304 >>> $305;
   $307 = $306<<1;
   $308 = $sk9;
   $309 = $2;
   $310 = (($309) + ($308<<2)|0);
   HEAP32[$310>>2] = $307;
   $311 = $k1;
   $312 = $3;
   $313 = (($312) + ($311<<3)|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = (($314) + 1)|0;
   HEAP32[$313>>2] = $315;
   $316 = $k1;
   $317 = $3;
   $318 = (($317) + ($316<<3)|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = $k1;
   $321 = (($320) - 1)|0;
   $322 = $3;
   $323 = (($322) + ($321<<3)|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = ($319>>>0)>($324>>>0);
   if ($325) {
    $326 = $k1;
    $327 = $3;
    $328 = (($327) + ($326<<3)|0);
    ;HEAP32[$cTemp10+0>>2]=HEAP32[$328+0>>2]|0;HEAP32[$cTemp10+4>>2]=HEAP32[$328+4>>2]|0;
    $329 = $k1;
    $330 = $3;
    $331 = (($330) + ($329<<3)|0);
    $332 = $k1;
    $333 = (($332) - 1)|0;
    $334 = $3;
    $335 = (($334) + ($333<<3)|0);
    ;HEAP32[$331+0>>2]=HEAP32[$335+0>>2]|0;HEAP32[$331+4>>2]=HEAP32[$335+4>>2]|0;
    $336 = $k1;
    $337 = (($336) - 1)|0;
    $338 = $3;
    $339 = (($338) + ($337<<3)|0);
    ;HEAP32[$339+0>>2]=HEAP32[$cTemp10+0>>2]|0;HEAP32[$339+4>>2]=HEAP32[$cTemp10+4>>2]|0;
   }
   $340 = $iRun2;
   $341 = $iNumNonzero4;
   $342 = $341<<1;
   $343 = $6;
   $344 = (($343) + ($342<<2)|0);
   HEAP32[$344>>2] = $340;
   $345 = $iLevel3;
   $346 = ($345|0)<(0);
   if ($346) {
    $347 = $iTemp5;
    $348 = (0 - ($347))|0;
    $355 = $348;
   } else {
    $349 = $iTemp5;
    $355 = $349;
   }
   $350 = $iNumNonzero4;
   $351 = $350<<1;
   $352 = (($351) + 1)|0;
   $353 = $6;
   $354 = (($353) + ($352<<2)|0);
   HEAP32[$354>>2] = $355;
   $356 = $iNumNonzero4;
   $357 = (($356) + 1)|0;
   $iNumNonzero4 = $357;
   $iRun2 = 0;
  } else {
   $358 = $iRun2;
   $359 = (($358) + 1)|0;
   $iRun2 = $359;
   $360 = $iLevel3;
   $361 = ($360|0)<(0);
   $362 = $361&1;
   $363 = (0 - ($362))|0;
   $iTemp5 = $363;
   $364 = $iLevel3;
   $365 = $iTemp5;
   $366 = (($364) + ($365))|0;
   $367 = $5;
   $368 = $366 >> $367;
   $369 = $iTemp5;
   $370 = (($368) - ($369))|0;
   $iLevel3 = $370;
   $371 = $iLevel3;
   $372 = ($371|0)<(0);
   $373 = $372&1;
   $374 = (0 - ($373))|0;
   $iTemp5 = $374;
   $375 = $iLevel3;
   $376 = $iTemp5;
   $377 = $375 ^ $376;
   $378 = $377<<2;
   $379 = $iTemp5;
   $380 = 6 & $379;
   $381 = (($378) + ($380))|0;
   $382 = $iLevel3;
   $383 = ($382|0)!=(0);
   $384 = $383&1;
   $385 = (($381) + ($384))|0;
   $386 = $sk9;
   $387 = $2;
   $388 = (($387) + ($386<<2)|0);
   HEAP32[$388>>2] = $385;
  }
  $389 = $k1;
  $390 = (($389) + 1)|0;
  $k1 = $390;
 }
 $391 = $iNumNonzero4;
 $0 = $391;
 $392 = $0;
 STACKTOP = sp;return ($392|0);
}
function _EncodeBlock($bChroma,$aLocalCoef,$iNumNonzero,$pAHexpt,$iContextOffset,$pOut,$iLocation) {
 $bChroma = $bChroma|0;
 $aLocalCoef = $aLocalCoef|0;
 $iNumNonzero = $iNumNonzero|0;
 $pAHexpt = $pAHexpt|0;
 $iContextOffset = $iContextOffset|0;
 $pOut = $pOut|0;
 $iLocation = $iLocation|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iCont = 0, $iIndex = 0, $iLev = 0, $iSL = 0, $iSR = 0, $iSRn = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bChroma;
 $1 = $aLocalCoef;
 $2 = $iNumNonzero;
 $3 = $pAHexpt;
 $4 = $iContextOffset;
 $5 = $pOut;
 $6 = $iLocation;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $iLev = $9;
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 $13 = $12&1;
 $iSR = $13;
 $14 = $iLev;
 $15 = (($14) + 1)|0;
 $16 = ($15>>>0)>(2);
 $17 = $16&1;
 $iSL = $17;
 $iSRn = 1;
 $18 = $2;
 $19 = ($18|0)==(1);
 if ($19) {
  $iSRn = 0;
 } else {
  $20 = $1;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)>(0);
  if ($23) {
   $iSRn = 2;
  }
 }
 $24 = $iSRn;
 $25 = $24<<2;
 $26 = $iSL;
 $27 = $26<<1;
 $28 = (($25) + ($27))|0;
 $29 = $iSR;
 $30 = (($28) + ($29))|0;
 $iIndex = $30;
 $31 = $0;
 $32 = $6;
 $33 = $iIndex;
 $34 = $iLev;
 $35 = ($34|0)<(0);
 $36 = $35&1;
 $37 = $3;
 $38 = $4;
 $39 = (($37) + ($38<<2)|0);
 $40 = $5;
 _EncodeFirstIndex($31,$32,0,$33,$36,$39,$40);
 $41 = $iSR;
 $42 = $iSRn;
 $43 = $41 & $42;
 $iCont = $43;
 $44 = $iSL;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = $iLev;
  $47 = (Math_abs(($46|0))|0);
  $48 = (($47) - 1)|0;
  $49 = $4;
  $50 = (6 + ($49))|0;
  $51 = $iCont;
  $52 = (($50) + ($51))|0;
  $53 = $3;
  $54 = (($53) + ($52<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $5;
  _EncodeSignificantAbsLevel($48,$55,$56);
 }
 $57 = $iSR;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = $1;
  $60 = HEAP32[$59>>2]|0;
  $61 = $6;
  $62 = (15 - ($61))|0;
  $63 = $3;
  $64 = HEAP32[$63>>2]|0;
  $65 = $5;
  _EncodeSignificantRun($60,$62,$64,$65);
 }
 $66 = $1;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + 1)|0;
 $69 = $6;
 $70 = (($69) + ($68))|0;
 $6 = $70;
 $k = 1;
 while(1) {
  $71 = $k;
  $72 = $2;
  $73 = ($71|0)<($72|0);
  if (!($73)) {
   break;
  }
  $74 = $iSRn;
  $75 = ($74|0)==(2);
  if ($75) {
   $76 = $k;
   $77 = $76<<1;
   $78 = $1;
   $79 = (($78) + ($77<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $6;
   $82 = (15 - ($81))|0;
   $83 = $3;
   $84 = HEAP32[$83>>2]|0;
   $85 = $5;
   _EncodeSignificantRun($80,$82,$84,$85);
  }
  $86 = $k;
  $87 = $86<<1;
  $88 = $1;
  $89 = (($88) + ($87<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + 1)|0;
  $92 = $6;
  $93 = (($92) + ($91))|0;
  $6 = $93;
  $iSRn = 1;
  $94 = $k;
  $95 = $2;
  $96 = (($95) - 1)|0;
  $97 = ($94|0)==($96|0);
  if ($97) {
   $iSRn = 0;
  } else {
   $98 = $k;
   $99 = $98<<1;
   $100 = (($99) + 2)|0;
   $101 = $1;
   $102 = (($101) + ($100<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)>(0);
   if ($104) {
    $iSRn = 2;
   }
  }
  $105 = $k;
  $106 = $105<<1;
  $107 = (($106) + 1)|0;
  $108 = $1;
  $109 = (($108) + ($107<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $iLev = $110;
  $111 = $iLev;
  $112 = (($111) + 1)|0;
  $113 = ($112>>>0)>(2);
  $114 = $113&1;
  $iSL = $114;
  $115 = $iSRn;
  $116 = $115<<1;
  $117 = $iSL;
  $118 = (($116) + ($117))|0;
  $iIndex = $118;
  $119 = $0;
  $120 = $6;
  $121 = $iCont;
  $122 = $iIndex;
  $123 = $iLev;
  $124 = ($123|0)<(0);
  $125 = $124&1;
  $126 = $3;
  $127 = $4;
  $128 = (($126) + ($127<<2)|0);
  $129 = $5;
  _EncodeIndex($119,$120,$121,$122,$125,$128,$129);
  $130 = $iSRn;
  $131 = $iCont;
  $132 = $131 & $130;
  $iCont = $132;
  $133 = $iSL;
  $134 = ($133|0)!=(0);
  if ($134) {
   $135 = $iLev;
   $136 = (Math_abs(($135|0))|0);
   $137 = (($136) - 1)|0;
   $138 = $4;
   $139 = (6 + ($138))|0;
   $140 = $iCont;
   $141 = (($139) + ($140))|0;
   $142 = $3;
   $143 = (($142) + ($141<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $5;
   _EncodeSignificantAbsLevel($137,$144,$145);
  }
  $146 = $k;
  $147 = (($146) + 1)|0;
  $k = $147;
 }
 STACKTOP = sp;return 0;
}
function _AdaptLowpassEnc($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $kk = 0;
 while(1) {
  $1 = $kk;
  $2 = ($1|0)<(13);
  if (!($2)) {
   break;
  }
  $3 = $kk;
  $4 = $0;
  $5 = (($4) + 24|0);
  $6 = (($5) + ($3<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  _AdaptDiscriminant($7);
  $8 = $kk;
  $9 = (($8) + 1)|0;
  $kk = $9;
 }
 STACKTOP = sp;return;
}
function _AdaptHighpassEnc($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kk = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 _AdaptDiscriminant($3);
 $4 = $0;
 $5 = (($4) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _AdaptDiscriminant($6);
 $kk = 0;
 while(1) {
  $7 = $kk;
  $8 = ($7|0)<(8);
  if (!($8)) {
   break;
  }
  $9 = $kk;
  $10 = (($9) + 8)|0;
  $11 = (($10) + 5)|0;
  $12 = $0;
  $13 = (($12) + 24|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _AdaptDiscriminant($15);
  $16 = $kk;
  $17 = (($16) + 1)|0;
  $kk = $17;
 }
 STACKTOP = sp;return;
}
function _EncodeMacroblockHighpass($pSC,$pContext,$iMBX,$iMBY) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 $iMBX = $iMBX|0;
 $iMBY = $iMBY|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $iScale = 0, $iWeight = 0, $k = 0, $pIO = 0, $pIOFL = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pContext;
 $3 = $iMBX;
 $4 = $iMBY;
 $5 = $2;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $pIO = $7;
 $8 = $2;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $pIOFL = $10;
 $11 = $1;
 $12 = (($11) + 84|0);
 $13 = (($12) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $1;
  $17 = (($16) + 34296|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  $20 = (($19) + 34316|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + (($18*240)|0)|0);
  $23 = (($22) + 195|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)>(0);
  if ($26) {
   $27 = $pIO;
   $28 = $1;
   $29 = (($28) + 32976|0);
   $30 = (($29) + 1157|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $1;
   $33 = (($32) + 34296|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = (($35) + 34316|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + (($34*240)|0)|0);
   $39 = (($38) + 195|0);
   $40 = HEAP8[$39>>0]|0;
   _encodeQPIndex($27,$31,$40);
  }
 }
 $41 = $1;
 $42 = (($41) + 34308|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0);
 if ($44) {
  $iScale = 2;
  $45 = $iScale;
  $46 = $45<<4;
  $iWeight = $46;
  $47 = $2;
  $48 = (($47) + 364|0);
  HEAP32[$48>>2] = 32767;
  $49 = $2;
  $50 = (($49) + 236|0);
  HEAP32[$50>>2] = 32767;
  $k = 1;
  while(1) {
   $51 = $k;
   $52 = ($51|0)<(16);
   if (!($52)) {
    break;
   }
   $53 = $iWeight;
   $54 = $k;
   $55 = $2;
   $56 = (($55) + 364|0);
   $57 = (($56) + ($54<<3)|0);
   HEAP32[$57>>2] = $53;
   $58 = $k;
   $59 = $2;
   $60 = (($59) + 236|0);
   $61 = (($60) + ($58<<3)|0);
   HEAP32[$61>>2] = $53;
   $62 = $iScale;
   $63 = $iWeight;
   $64 = (($63) - ($62))|0;
   $iWeight = $64;
   $65 = $k;
   $66 = (($65) + 1)|0;
   $k = $66;
  }
 }
 $67 = $1;
 $68 = $2;
 $69 = $3;
 $70 = $4;
 $71 = $pIO;
 _CodeCBP($67,$68,$69,$70,$71);
 $72 = $1;
 $73 = $2;
 $74 = $3;
 $75 = $4;
 $76 = $pIO;
 $77 = $pIOFL;
 $78 = (_CodeCoeffs($72,$73,$74,$75,$76,$77)|0);
 $79 = ($78|0)!=(0);
 if ($79) {
  $0 = -1;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 $80 = $1;
 $81 = (($80) + 34312|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = $2;
  _AdaptHighpassEnc($84);
 }
 $0 = 0;
 $85 = $0;
 STACKTOP = sp;return ($85|0);
}
function _CodeCBP($pSC,$pContext,$iMBX,$iMBY,$pIO) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 $iMBX = $iMBX|0;
 $iMBY = $iMBY|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cf = 0, $i = 0, $iBlock = 0, $iChannel = 0, $iChroma = 0, $iCode = 0, $iCodeU = 0, $iCodeV = 0, $iCount = 0, $iDY = 0, $iDiffCBPCU = 0, $iDiffCBPCV = 0, $iDiffCBPCY = 0, $iPattern = 0, $k = 0, $pAH = 0, $val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pContext;
 $2 = $iMBX;
 $3 = $iMBY;
 $4 = $pIO;
 $5 = $0;
 $6 = (($5) + 34136|0);
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $cf = $8;
 $9 = $cf;
 $10 = ($9|0)==(6);
 if ($10) {
  label = 3;
 } else {
  $11 = $cf;
  $12 = ($11|0)==(4);
  if ($12) {
   label = 3;
  } else {
   $17 = 1;
  }
 }
 if ((label|0) == 3) {
  $13 = $0;
  $14 = (($13) + 34136|0);
  $15 = (($14) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16;
 }
 $iChannel = $17;
 $iDiffCBPCU = 0;
 $iDiffCBPCV = 0;
 $iCodeU = 0;
 $iCodeV = 0;
 $18 = $2;
 $2 = $18;
 $19 = $3;
 $3 = $19;
 $20 = $0;
 $21 = $1;
 _predCBPEnc($20,$21);
 $22 = $0;
 $23 = $4;
 (_writeIS($22,$23)|0);
 $24 = $0;
 $25 = (($24) + 32976|0);
 $26 = (($25) + 1092|0);
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $iDiffCBPCU = $28;
 $29 = $0;
 $30 = (($29) + 32976|0);
 $31 = (($30) + 1092|0);
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $iDiffCBPCV = $33;
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = $iChannel;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $i;
  $38 = $0;
  $39 = (($38) + 32976|0);
  $40 = (($39) + 1092|0);
  $41 = (($40) + ($37<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $iDiffCBPCY = $42;
  $43 = $cf;
  $44 = ($43|0)==(1);
  if ($44) {
   $45 = $iDiffCBPCY;
   $46 = $45 & 15;
   $47 = $iDiffCBPCU;
   $48 = $47 & 1;
   $49 = $48 << 4;
   $50 = (($46) + ($49))|0;
   $51 = $iDiffCBPCV;
   $52 = $51 & 1;
   $53 = $52 << 5;
   $54 = (($50) + ($53))|0;
   $55 = $iDiffCBPCY;
   $56 = $55 & 240;
   $57 = $56 << 2;
   $58 = (($54) + ($57))|0;
   $59 = $iDiffCBPCU;
   $60 = $59 & 2;
   $61 = $60 << 9;
   $62 = (($58) + ($61))|0;
   $63 = $iDiffCBPCV;
   $64 = $63 & 2;
   $65 = $64 << 10;
   $66 = (($62) + ($65))|0;
   $67 = $iDiffCBPCY;
   $68 = $67 & 3840;
   $69 = $68 << 4;
   $70 = (($66) + ($69))|0;
   $71 = $iDiffCBPCU;
   $72 = $71 & 4;
   $73 = $72 << 14;
   $74 = (($70) + ($73))|0;
   $75 = $iDiffCBPCV;
   $76 = $75 & 4;
   $77 = $76 << 15;
   $78 = (($74) + ($77))|0;
   $79 = $iDiffCBPCY;
   $80 = $79 & 61440;
   $81 = $80 << 6;
   $82 = (($78) + ($81))|0;
   $83 = $iDiffCBPCU;
   $84 = $83 & 8;
   $85 = $84 << 19;
   $86 = (($82) + ($85))|0;
   $87 = $iDiffCBPCV;
   $88 = $87 & 8;
   $89 = $88 << 20;
   $90 = (($86) + ($89))|0;
   $iDiffCBPCY = $90;
  } else {
   $91 = $cf;
   $92 = ($91|0)==(2);
   if ($92) {
    $93 = $iDiffCBPCY;
    $94 = $93 & 15;
    $95 = $iDiffCBPCU;
    $96 = $95 & 1;
    $97 = $96 << 4;
    $98 = (($94) + ($97))|0;
    $99 = $iDiffCBPCU;
    $100 = $99 & 4;
    $101 = $100 << 3;
    $102 = (($98) + ($101))|0;
    $103 = $iDiffCBPCV;
    $104 = $103 & 1;
    $105 = $104 << 6;
    $106 = (($102) + ($105))|0;
    $107 = $iDiffCBPCV;
    $108 = $107 & 4;
    $109 = $108 << 5;
    $110 = (($106) + ($109))|0;
    $111 = $iDiffCBPCY;
    $112 = $111 & 240;
    $113 = $112 << 4;
    $114 = (($110) + ($113))|0;
    $115 = $iDiffCBPCU;
    $116 = $115 & 2;
    $117 = $116 << 11;
    $118 = (($114) + ($117))|0;
    $119 = $iDiffCBPCU;
    $120 = $119 & 8;
    $121 = $120 << 10;
    $122 = (($118) + ($121))|0;
    $123 = $iDiffCBPCV;
    $124 = $123 & 2;
    $125 = $124 << 13;
    $126 = (($122) + ($125))|0;
    $127 = $iDiffCBPCV;
    $128 = $127 & 8;
    $129 = $128 << 12;
    $130 = (($126) + ($129))|0;
    $131 = $iDiffCBPCY;
    $132 = $131 & 3840;
    $133 = $132 << 8;
    $134 = (($130) + ($133))|0;
    $135 = $iDiffCBPCU;
    $136 = $135 & 16;
    $137 = $136 << 16;
    $138 = (($134) + ($137))|0;
    $139 = $iDiffCBPCU;
    $140 = $139 & 64;
    $141 = $140 << 15;
    $142 = (($138) + ($141))|0;
    $143 = $iDiffCBPCV;
    $144 = $143 & 16;
    $145 = $144 << 18;
    $146 = (($142) + ($145))|0;
    $147 = $iDiffCBPCV;
    $148 = $147 & 64;
    $149 = $148 << 17;
    $150 = (($146) + ($149))|0;
    $151 = $iDiffCBPCY;
    $152 = $151 & 61440;
    $153 = $152 << 12;
    $154 = (($150) + ($153))|0;
    $155 = $iDiffCBPCU;
    $156 = $155 & 32;
    $157 = $156 << 23;
    $158 = (($154) + ($157))|0;
    $159 = $iDiffCBPCU;
    $160 = $159 & 128;
    $161 = $160 << 22;
    $162 = (($158) + ($161))|0;
    $163 = $iDiffCBPCV;
    $164 = $163 & 32;
    $165 = $164 << 25;
    $166 = (($162) + ($165))|0;
    $167 = $iDiffCBPCV;
    $168 = $167 & 128;
    $169 = $168 << 24;
    $170 = (($166) + ($169))|0;
    $iDiffCBPCY = $170;
   }
  }
  $iPattern = 0;
  $171 = $iDiffCBPCY;
  $iDY = $171;
  $172 = $cf;
  $173 = ($172|0)==(3);
  if ($173) {
   $174 = $iDiffCBPCU;
   $175 = $iDiffCBPCV;
   $176 = $174 | $175;
   $177 = $iDY;
   $178 = $177 | $176;
   $iDY = $178;
  }
  $iBlock = 0;
  while(1) {
   $179 = $iBlock;
   $180 = ($179|0)<(4);
   if (!($180)) {
    break;
   }
   $181 = $cf;
   $182 = ($181|0)==(2);
   if ($182) {
    $183 = $iDY;
    $184 = $183 & 255;
    $185 = ($184|0)!=(0);
    $186 = $185&1;
    $187 = $186<<4;
    $188 = $iPattern;
    $189 = $188 | $187;
    $iPattern = $189;
    $190 = $iDY;
    $191 = $190 >> 8;
    $iDY = $191;
   } else {
    $192 = $cf;
    $193 = ($192|0)==(1);
    if ($193) {
     $194 = $iDY;
     $195 = $194 & 63;
     $196 = ($195|0)!=(0);
     $197 = $196&1;
     $198 = $197<<4;
     $199 = $iPattern;
     $200 = $199 | $198;
     $iPattern = $200;
     $201 = $iDY;
     $202 = $201 >> 6;
     $iDY = $202;
    } else {
     $203 = $iDY;
     $204 = $203 & 15;
     $205 = ($204|0)!=(0);
     $206 = $205&1;
     $207 = $206<<4;
     $208 = $iPattern;
     $209 = $208 | $207;
     $iPattern = $209;
     $210 = $iDY;
     $211 = $210 >> 4;
     $iDY = $211;
    }
   }
   $212 = $iPattern;
   $213 = $212 >> 1;
   $iPattern = $213;
   $214 = $iBlock;
   $215 = (($214) + 1)|0;
   $iBlock = $215;
  }
  $216 = $1;
  $217 = (($216) + 20|0);
  $218 = HEAP32[$217>>2]|0;
  $pAH = $218;
  $219 = $iPattern;
  $220 = (5224 + ($219<<2)|0);
  $221 = HEAP32[$220>>2]|0;
  $iCount = $221;
  $222 = $4;
  $223 = $iCount;
  $224 = $223<<1;
  $225 = (($224) + 1)|0;
  $226 = $pAH;
  $227 = (($226) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($228) + ($225<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $iCount;
  $232 = $231<<1;
  $233 = (($232) + 2)|0;
  $234 = $pAH;
  $235 = (($234) + 4|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($236) + ($233<<2)|0);
  $238 = HEAP32[$237>>2]|0;
  _putBit16z($222,$230,$238);
  $239 = $iCount;
  $240 = $pAH;
  $241 = (($240) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = (($242) + ($239<<2)|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = $pAH;
  $246 = (($245) + 28|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($247) + ($244))|0;
  HEAP32[$246>>2] = $248;
  $249 = $iPattern;
  $250 = (5288 + ($249<<2)|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = ($251|0)!=(0);
  if ($252) {
   $253 = $4;
   $254 = $iPattern;
   $255 = (5352 + ($254<<2)|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $iPattern;
   $258 = (5288 + ($257<<2)|0);
   $259 = HEAP32[$258>>2]|0;
   _putBit16z($253,$256,$259);
  }
  $iBlock = 0;
  while(1) {
   $260 = $iBlock;
   $261 = ($260|0)<(4);
   if (!($261)) {
    break;
   }
   $262 = $cf;
   if ((($262|0) == 1)) {
    $291 = $iDiffCBPCY;
    $292 = $291 & 63;
    $iCode = $292;
    $293 = $iDiffCBPCY;
    $294 = $293 >> 6;
    $iDiffCBPCY = $294;
   } else if ((($262|0) == 3)) {
    $263 = $iDiffCBPCY;
    $264 = $263 & 15;
    $iCode = $264;
    $265 = $iDiffCBPCU;
    $266 = $265 & 15;
    $iCodeU = $266;
    $267 = $iDiffCBPCV;
    $268 = $267 & 15;
    $iCodeV = $268;
    $269 = $iCodeU;
    $270 = ($269|0)!=(0);
    $271 = $270&1;
    $272 = $271 << 4;
    $273 = $iCode;
    $274 = $273 | $272;
    $iCode = $274;
    $275 = $iCodeV;
    $276 = ($275|0)!=(0);
    $277 = $276&1;
    $278 = $277 << 5;
    $279 = $iCode;
    $280 = $279 | $278;
    $iCode = $280;
    $281 = $iDiffCBPCY;
    $282 = $281 >> 4;
    $iDiffCBPCY = $282;
    $283 = $iDiffCBPCU;
    $284 = $283 >> 4;
    $iDiffCBPCU = $284;
    $285 = $iDiffCBPCV;
    $286 = $285 >> 4;
    $iDiffCBPCV = $286;
   } else if ((($262|0) == 2)) {
    $287 = $iDiffCBPCY;
    $288 = $287 & 255;
    $iCode = $288;
    $289 = $iDiffCBPCY;
    $290 = $289 >> 8;
    $iDiffCBPCY = $290;
   } else {
    $295 = $iDiffCBPCY;
    $296 = $295 & 15;
    $iCode = $296;
    $297 = $iDiffCBPCY;
    $298 = $297 >> 4;
    $iDiffCBPCY = $298;
   }
   $299 = $iCode;
   $300 = ($299|0)!=(0);
   if ($300) {
    $301 = $iCode;
    $302 = $301 >> 4;
    $iChroma = $302;
    $303 = $iCode;
    $304 = $303 & 15;
    $iCode = $304;
    $305 = $cf;
    $306 = ($305|0)==(2);
    if ($306) {
     $307 = $iChroma;
     $308 = $307 & 3;
     $iCodeU = $308;
     $309 = $iChroma;
     $310 = $309 >> 2;
     $311 = $310 & 3;
     $iCodeV = $311;
     $312 = $iCodeU;
     $313 = ($312|0)==(0);
     $314 = $313 ? 0 : 1;
     $iChroma = $314;
     $315 = $iCodeV;
     $316 = ($315|0)!=(0);
     if ($316) {
      $317 = $iChroma;
      $318 = (($317) + 2)|0;
      $iChroma = $318;
     }
    }
    $319 = $iChroma;
    $320 = ($319|0)!=(0);
    if ($320) {
     $321 = $iCode;
     $322 = (5416 + ($321<<2)|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = ($323|0)>(2);
     if ($324) {
      $val = 8;
     } else {
      $325 = $iCode;
      $326 = (5416 + ($325<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = (($327) + 6)|0;
      $329 = (($328) - 1)|0;
      $val = $329;
     }
    } else {
     $330 = $iCode;
     $331 = (5416 + ($330<<2)|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = (($332) - 1)|0;
     $val = $333;
    }
    $334 = $1;
    $335 = (($334) + 16|0);
    $336 = HEAP32[$335>>2]|0;
    $pAH = $336;
    $337 = $4;
    $338 = $val;
    $339 = $338<<1;
    $340 = (($339) + 1)|0;
    $341 = $pAH;
    $342 = (($341) + 4|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = (($343) + ($340<<2)|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = $val;
    $347 = $346<<1;
    $348 = (($347) + 2)|0;
    $349 = $pAH;
    $350 = (($349) + 4|0);
    $351 = HEAP32[$350>>2]|0;
    $352 = (($351) + ($348<<2)|0);
    $353 = HEAP32[$352>>2]|0;
    _putBit16z($337,$345,$353);
    $354 = $val;
    $355 = $pAH;
    $356 = (($355) + 8|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = (($357) + ($354<<2)|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = $pAH;
    $361 = (($360) + 28|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = (($362) + ($359))|0;
    HEAP32[$361>>2] = $363;
    $364 = $iChroma;
    $365 = ($364|0)!=(0);
    if ($365) {
     $366 = $iChroma;
     $367 = ($366|0)==(1);
     if ($367) {
      $368 = $4;
      _putBit16z($368,1,1);
     } else {
      $369 = $4;
      $370 = $iChroma;
      $371 = (3 - ($370))|0;
      _putBit16z($369,$371,2);
     }
    }
    $372 = $val;
    $373 = ($372|0)==(8);
    if ($373) {
     $374 = $iCode;
     $375 = (5416 + ($374<<2)|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = ($376|0)==(3);
     if ($377) {
      $378 = $4;
      _putBit16z($378,1,1);
     } else {
      $379 = $4;
      $380 = $iCode;
      $381 = (5416 + ($380<<2)|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = (5 - ($382))|0;
      _putBit16z($379,$383,2);
     }
    }
    $384 = $iCode;
    $385 = (5480 + ($384<<2)|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = ($386|0)!=(0);
    if ($387) {
     $388 = $4;
     $389 = $iCode;
     $390 = (5544 + ($389<<2)|0);
     $391 = HEAP32[$390>>2]|0;
     $392 = $iCode;
     $393 = (5480 + ($392<<2)|0);
     $394 = HEAP32[$393>>2]|0;
     _putBit16z($388,$391,$394);
    }
    $395 = $cf;
    $396 = ($395|0)==(3);
    if ($396) {
     $397 = $1;
     $398 = (($397) + 24|0);
     $399 = (($398) + 4|0);
     $400 = HEAP32[$399>>2]|0;
     $pAH = $400;
     $401 = $iCodeU;
     $iPattern = $401;
     $k = 0;
     while(1) {
      $402 = $k;
      $403 = ($402|0)<(2);
      if (!($403)) {
       break;
      }
      $404 = $iPattern;
      $405 = ($404|0)!=(0);
      if ($405) {
       $406 = $iPattern;
       $407 = (5224 + ($406<<2)|0);
       $408 = HEAP32[$407>>2]|0;
       $iCount = $408;
       $409 = $iCount;
       $410 = (($409) + -1)|0;
       $iCount = $410;
       $411 = $4;
       $412 = $iCount;
       $413 = $412<<1;
       $414 = (($413) + 1)|0;
       $415 = $pAH;
       $416 = (($415) + 4|0);
       $417 = HEAP32[$416>>2]|0;
       $418 = (($417) + ($414<<2)|0);
       $419 = HEAP32[$418>>2]|0;
       $420 = $iCount;
       $421 = $420<<1;
       $422 = (($421) + 2)|0;
       $423 = $pAH;
       $424 = (($423) + 4|0);
       $425 = HEAP32[$424>>2]|0;
       $426 = (($425) + ($422<<2)|0);
       $427 = HEAP32[$426>>2]|0;
       _putBit16z($411,$419,$427);
       $428 = $iPattern;
       $429 = (5288 + ($428<<2)|0);
       $430 = HEAP32[$429>>2]|0;
       $431 = ($430|0)!=(0);
       if ($431) {
        $432 = $4;
        $433 = $iPattern;
        $434 = (5352 + ($433<<2)|0);
        $435 = HEAP32[$434>>2]|0;
        $436 = $iPattern;
        $437 = (5288 + ($436<<2)|0);
        $438 = HEAP32[$437>>2]|0;
        _putBit16z($432,$435,$438);
       }
      }
      $439 = $iCodeV;
      $iPattern = $439;
      $440 = $k;
      $441 = (($440) + 1)|0;
      $k = $441;
     }
    } else {
     $442 = $cf;
     $443 = ($442|0)==(2);
     if ($443) {
      $444 = $iCodeU;
      $iPattern = $444;
      $k = 0;
      while(1) {
       $445 = $k;
       $446 = ($445|0)<(2);
       if (!($446)) {
        break;
       }
       $447 = $iPattern;
       $448 = ($447|0)!=(0);
       if ($448) {
        $449 = $iPattern;
        $450 = ($449|0)==(1);
        if ($450) {
         $451 = $4;
         _putBit16z($451,1,1);
        } else {
         $452 = $4;
         $453 = $iPattern;
         $454 = (3 - ($453))|0;
         _putBit16z($452,$454,2);
        }
       }
       $455 = $iCodeV;
       $iPattern = $455;
       $456 = $k;
       $457 = (($456) + 1)|0;
       $k = $457;
      }
     }
    }
   }
   $458 = $iBlock;
   $459 = (($458) + 1)|0;
   $iBlock = $459;
  }
  $460 = $i;
  $461 = (($460) + 1)|0;
  $i = $461;
 }
 STACKTOP = sp;return;
}
function _CodeCoeffs($pSC,$pContext,$iMBX,$iMBY,$pIO,$pIOFL) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 $iMBX = $iMBX|0;
 $iMBY = $iMBY|0;
 $pIO = $pIO|0;
 $pIOFL = $pIOFL|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aLaplacianMean = 0, $aLocalCoef = 0, $aResidual = 0, $atdata = 0, $bChroma = 0, $cf = 0, $data = 0, $i = 0, $iBlock = 0, $iChannels = 0, $iFlex = 0, $iIndex = 0;
 var $iMask = 0, $iModelBits = 0, $iNBlocks = 0, $iNumCoeffs = 0, $iNumNonzero = 0, $iPattern = 0, $iPlanes = 0, $iSubblock = 0, $iTrim = 0, $k = 0, $len = 0, $pCoeffs = 0, $pLM = 0, $pMBInfo = 0, $pScan = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aLaplacianMean = sp + 16|0;
 $aLocalCoef = sp + 64|0;
 $aResidual = sp + 200|0;
 $0 = $pSC;
 $1 = $pContext;
 $2 = $iMBX;
 $3 = $iMBY;
 $4 = $pIO;
 $5 = $pIOFL;
 $6 = $0;
 $7 = (($6) + 34136|0);
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $cf = $9;
 $10 = $0;
 $11 = (($10) + 34136|0);
 $12 = (($11) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $iChannels = $13;
 $14 = $cf;
 $15 = ($14|0)==(1);
 if ($15) {
  label = 3;
 } else {
  $16 = $cf;
  $17 = ($16|0)==(2);
  if ($17) {
   label = 3;
  } else {
   $18 = $iChannels;
   $19 = $18;
  }
 }
 if ((label|0) == 3) {
  $19 = 1;
 }
 $iPlanes = $19;
 $20 = $0;
 $21 = (($20) + 32976|0);
 $pMBInfo = $21;
 $iNBlocks = 4;
 $iIndex = 0;
 $iNumCoeffs = 16;
 $22 = $1;
 $23 = (($22) + 492|0);
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $iModelBits = $25;
 $iFlex = 0;
 $iTrim = 0;
 $iMask = 0;
 ;HEAP32[$aLaplacianMean+0>>2]=0|0;HEAP32[$aLaplacianMean+4>>2]=0|0;
 $pLM = $aLaplacianMean;
 $bChroma = 0;
 $26 = $2;
 $2 = $26;
 $27 = $3;
 $3 = $27;
 $28 = $iModelBits;
 $29 = ($28|0)<(16);
 if (!($29)) {
  ___assert_fail((5168|0),(5184|0),862,(5208|0));
  // unreachable;
 }
 $30 = $1;
 $31 = (($30) + 584|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $iModelBits;
 $34 = ($32|0)<=($33|0);
 if ($34) {
  $35 = $0;
  $36 = (($35) + 84|0);
  $37 = (($36) + 44|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(1);
  if ($39) {
   $40 = $1;
   $41 = (($40) + 584|0);
   $42 = HEAP32[$41>>2]|0;
   $iTrim = $42;
   $43 = $iModelBits;
   $44 = $1;
   $45 = (($44) + 584|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($43) - ($46))|0;
   $iFlex = $47;
   $48 = $iFlex;
   $49 = 1 << $48;
   $50 = (($49) - 1)|0;
   $iMask = $50;
  }
 }
 $51 = $0;
 $52 = (($51) + 84|0);
 $53 = (($52) + 44|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(1);
 if ($55) {
  $56 = $0;
  $57 = $5;
  (_writeIS($56,$57)|0);
 }
 $58 = $pMBInfo;
 $59 = (($58) + 1024|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(1);
 if ($61) {
  $62 = $1;
  $63 = (($62) + 364|0);
  $pScan = $63;
 } else {
  $64 = $1;
  $65 = (($64) + 236|0);
  $pScan = $65;
 }
 $i = 0;
 L21: while(1) {
  $66 = $i;
  $67 = $iPlanes;
  $68 = ($66|0)<($67|0);
  if (!($68)) {
   label = 66;
   break;
  }
  $69 = $i;
  $70 = $pMBInfo;
  $71 = (($70) + 1028|0);
  $72 = (($71) + ($69<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $iPattern = $73;
  $74 = $cf;
  $75 = ($74|0)==(1);
  if ($75) {
   $iNBlocks = 6;
   $76 = $pMBInfo;
   $77 = (($76) + 1028|0);
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 << 16;
   $81 = $pMBInfo;
   $82 = (($81) + 1028|0);
   $83 = (($82) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $84 << 20;
   $86 = (($80) + ($85))|0;
   $87 = $iPattern;
   $88 = (($87) + ($86))|0;
   $iPattern = $88;
  } else {
   $89 = $cf;
   $90 = ($89|0)==(2);
   if ($90) {
    $iNBlocks = 8;
    $91 = $pMBInfo;
    $92 = (($91) + 1028|0);
    $93 = (($92) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $94 << 16;
    $96 = $pMBInfo;
    $97 = (($96) + 1028|0);
    $98 = (($97) + 8|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $99 << 24;
    $101 = (($95) + ($100))|0;
    $102 = $iPattern;
    $103 = (($102) + ($101))|0;
    $iPattern = $103;
   }
  }
  $iIndex = 0;
  $iBlock = 0;
  while(1) {
   $104 = $iBlock;
   $105 = $iNBlocks;
   $106 = ($104|0)<($105|0);
   if (!($106)) {
    break;
   }
   $107 = $4;
   $108 = $5;
   $109 = ($107|0)!=($108|0);
   if ($109) {
   }
   $iSubblock = 0;
   while(1) {
    $110 = $iSubblock;
    $111 = ($110|0)<(4);
    if (!($111)) {
     break;
    }
    $pCoeffs = 0;
    $112 = $iBlock;
    $113 = ($112|0)<(4);
    if ($113) {
     $114 = $i;
     $115 = $0;
     $116 = (($115) + 34500|0);
     $117 = (($116) + ($114<<2)|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $iIndex;
     $120 = (13936 + ($119<<2)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($118) + ($121<<2)|0);
     $pCoeffs = $122;
    } else {
     $123 = $cf;
     $124 = ($123|0)==(1);
     if ($124) {
      $125 = $iBlock;
      $126 = (($125) - 3)|0;
      $127 = $0;
      $128 = (($127) + 34500|0);
      $129 = (($128) + ($126<<2)|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $iSubblock;
      $132 = (14000 + ($131<<2)|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (($130) + ($133<<2)|0);
      $pCoeffs = $134;
     } else {
      $135 = $cf;
      $136 = ($135|0)==(2);
      if ($136) {
       $137 = $iBlock;
       $138 = (($137) - 4)|0;
       $139 = $138 >> 1;
       $140 = (1 + ($139))|0;
       $141 = $0;
       $142 = (($141) + 34500|0);
       $143 = (($142) + ($140<<2)|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = $iBlock;
       $146 = $145 & 1;
       $147 = $146<<2;
       $148 = $iSubblock;
       $149 = (($147) + ($148))|0;
       $150 = (14016 + ($149<<2)|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (($144) + ($151<<2)|0);
       $pCoeffs = $152;
      }
     }
    }
    $153 = $iPattern;
    $154 = $153 & 1;
    $155 = ($154|0)==(0);
    if ($155) {
     $156 = $iFlex;
     $157 = ($156|0)!=(0);
     if ($157) {
      $k = 1;
      while(1) {
       $158 = $k;
       $159 = ($158|0)<(16);
       if (!($159)) {
        break;
       }
       $160 = $k;
       $161 = (14048 + ($160<<2)|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = $pCoeffs;
       $164 = (($163) + ($162<<2)|0);
       $165 = HEAP32[$164>>2]|0;
       $data = $165;
       $166 = $data;
       $167 = (Math_abs(($166|0))|0);
       $168 = $iTrim;
       $169 = $167 >> $168;
       $atdata = $169;
       $170 = $atdata;
       $171 = $iMask;
       $172 = $170 & $171;
       $word = $172;
       $173 = $iFlex;
       $len = $173;
       $174 = $atdata;
       $175 = ($174|0)!=(0);
       if ($175) {
        $176 = $word;
        $177 = $data;
        $178 = ($177|0)<(0);
        $179 = $178&1;
        $180 = (($176) + ($179))|0;
        $181 = $word;
        $182 = (($181) + ($180))|0;
        $word = $182;
        $183 = $len;
        $184 = (($183) + 1)|0;
        $len = $184;
       }
       $185 = $5;
       $186 = $word;
       $187 = $len;
       _putBit16z($185,$186,$187);
       $188 = $k;
       $189 = (($188) + 1)|0;
       $k = $189;
      }
     }
    } else {
     $iNumNonzero = 0;
     $190 = $pCoeffs;
     $191 = $pScan;
     $192 = $iModelBits;
     $193 = $iTrim;
     $194 = (_AdaptiveScan($190,$aResidual,$191,$192,$193,$aLocalCoef,16)|0);
     $iNumNonzero = $194;
     $195 = $iNumNonzero;
     $196 = $pLM;
     $197 = HEAP32[$196>>2]|0;
     $198 = (($197) + ($195))|0;
     HEAP32[$196>>2] = $198;
     $199 = $bChroma;
     $200 = $iNumNonzero;
     $201 = $1;
     $202 = (($201) + 24|0);
     $203 = $4;
     (_EncodeBlock($199,$aLocalCoef,$200,$202,13,$203,1)|0);
     $204 = $iFlex;
     $205 = ($204|0)!=(0);
     if ($205) {
      $k = 1;
      while(1) {
       $206 = $k;
       $207 = ($206|0)<(16);
       if (!($207)) {
        break;
       }
       $208 = $5;
       $209 = $k;
       $210 = (14048 + ($209<<2)|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = (($aResidual) + ($211<<2)|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = $213 >> 1;
       $215 = $iFlex;
       $216 = $k;
       $217 = (14048 + ($216<<2)|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = (($aResidual) + ($218<<2)|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = $220 & 1;
       $222 = (($215) + ($221))|0;
       _putBit16z($208,$214,$222);
       $223 = $k;
       $224 = (($223) + 1)|0;
       $k = $224;
      }
     }
    }
    $225 = $iSubblock;
    $226 = (($225) + 1)|0;
    $iSubblock = $226;
    $227 = $iPattern;
    $228 = $227 >> 1;
    $iPattern = $228;
    $229 = $iIndex;
    $230 = (($229) + 1)|0;
    $iIndex = $230;
   }
   $231 = $iBlock;
   $232 = ($231|0)==(3);
   if ($232) {
    $233 = $1;
    $234 = (($233) + 492|0);
    $235 = (($234) + 8|0);
    $236 = (($235) + 4|0);
    $237 = HEAP32[$236>>2]|0;
    $iModelBits = $237;
    $238 = $iModelBits;
    $239 = ($238|0)<(16);
    if (!($239)) {
     label = 57;
     break L21;
    }
    $240 = (($aLaplacianMean) + 4|0);
    $pLM = $240;
    $bChroma = 1;
    $iMask = 0;
    $iFlex = 0;
    $iTrim = 0;
    $241 = $1;
    $242 = (($241) + 584|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $iModelBits;
    $245 = ($243|0)<=($244|0);
    if ($245) {
     $246 = $0;
     $247 = (($246) + 84|0);
     $248 = (($247) + 44|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)!=(1);
     if ($250) {
      $251 = $1;
      $252 = (($251) + 584|0);
      $253 = HEAP32[$252>>2]|0;
      $iTrim = $253;
      $254 = $iModelBits;
      $255 = $iTrim;
      $256 = (($254) - ($255))|0;
      $iFlex = $256;
      $257 = $iFlex;
      $258 = 1 << $257;
      $259 = (($258) - 1)|0;
      $iMask = $259;
     }
    }
   }
   $260 = $iBlock;
   $261 = (($260) + 1)|0;
   $iBlock = $261;
  }
  $262 = $i;
  $263 = (($262) + 1)|0;
  $i = $263;
 }
 if ((label|0) == 57) {
  ___assert_fail((5168|0),(5184|0),949,(5208|0));
  // unreachable;
 }
 else if ((label|0) == 66) {
  $264 = $cf;
  $265 = $iChannels;
  $266 = $1;
  $267 = (($266) + 492|0);
  _UpdateModelMB($264,$265,$aLaplacianMean,$267);
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _EncodeFirstIndex($bChroma,$iLoc,$iCont,$iIndex,$iSign,$ppAHexpt,$pOut) {
 $bChroma = $bChroma|0;
 $iLoc = $iLoc|0;
 $iCont = $iCont|0;
 $iIndex = $iIndex|0;
 $iSign = $iSign|0;
 $ppAHexpt = $ppAHexpt|0;
 $pOut = $pOut|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pAHexpt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bChroma;
 $1 = $iLoc;
 $2 = $iCont;
 $3 = $iIndex;
 $4 = $iSign;
 $5 = $ppAHexpt;
 $6 = $pOut;
 $7 = $0;
 $8 = ($7*3)|0;
 $9 = $5;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $pAHexpt = $11;
 $12 = $1;
 $1 = $12;
 $13 = $2;
 $2 = $13;
 $14 = $3;
 $15 = $pAHexpt;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($14<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $pAHexpt;
 $21 = (($20) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($19))|0;
 HEAP32[$21>>2] = $23;
 $24 = $3;
 $25 = $pAHexpt;
 $26 = (($25) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($24<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $pAHexpt;
 $31 = (($30) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29))|0;
 HEAP32[$31>>2] = $33;
 $34 = $6;
 $35 = $3;
 $36 = $35<<1;
 $37 = (($36) + 1)|0;
 $38 = $pAHexpt;
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($37<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42<<1;
 $44 = $4;
 $45 = (($43) + ($44))|0;
 $46 = $3;
 $47 = $46<<1;
 $48 = (($47) + 2)|0;
 $49 = $pAHexpt;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($48<<2)|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 1)|0;
 _putBit16z($34,$45,$54);
 STACKTOP = sp;return;
}
function _EncodeSignificantRun($iRun,$iMaxRun,$pAHexpt,$pOut) {
 $iRun = $iRun|0;
 $iMaxRun = $iMaxRun|0;
 $pAHexpt = $pAHexpt|0;
 $pOut = $pOut|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iBin = 0, $iFLC = 0;
 var $iIndex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $iRun;
 $1 = $iMaxRun;
 $2 = $pAHexpt;
 $3 = $pOut;
 $4 = $1;
 $5 = ($4|0)<(5);
 if (!($5)) {
  $21 = $1;
  $22 = (13576 + ($21<<2)|0);
  $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8)|(HEAPU8[$22+2>>0]<<16)|(HEAPU8[$22+3>>0]<<24);
  $iBin = $23;
  $24 = $0;
  $25 = $iBin;
  $26 = ($25*14)|0;
  $27 = (($24) + ($26))|0;
  $28 = (($27) - 1)|0;
  $29 = (5640 + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $iIndex = $30;
  $31 = $iIndex;
  $32 = $iBin;
  $33 = ($32*5)|0;
  $34 = (($31) + ($33))|0;
  $35 = (13640 + ($34<<2)|0);
  $36 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8)|(HEAPU8[$35+2>>0]<<16)|(HEAPU8[$35+3>>0]<<24);
  $iFLC = $36;
  $37 = $3;
  $38 = $iIndex;
  $39 = $38<<1;
  $40 = (($39) + 1)|0;
  $41 = $2;
  $42 = (($41) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($40<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $iIndex;
  $47 = $46<<1;
  $48 = (($47) + 2)|0;
  $49 = $2;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($48<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  _putBit16z($37,$45,$53);
  $54 = $3;
  $55 = $0;
  $56 = (($55) + 1)|0;
  $57 = $iFLC;
  _putBit16($54,$56,$57);
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ($6|0)>(1);
 if ($7) {
  $8 = $3;
  $9 = $1;
  $10 = $0;
  $11 = ($9|0)!=($10|0);
  $12 = $11&1;
  $13 = $1;
  $14 = $0;
  $15 = (($13) - ($14))|0;
  $16 = (5776 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = (4 - ($18))|0;
  $20 = (($17) - ($19))|0;
  _putBit16z($8,$12,$20);
 }
 STACKTOP = sp;return;
}
function _EncodeIndex($bChroma,$iLoc,$iCont,$iIndex,$iSign,$ppAHexpt,$pOut) {
 $bChroma = $bChroma|0;
 $iLoc = $iLoc|0;
 $iCont = $iCont|0;
 $iIndex = $iIndex|0;
 $iSign = $iSign|0;
 $ppAHexpt = $ppAHexpt|0;
 $pOut = $pOut|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $iContext = 0, $pAHexpt = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bChroma;
 $1 = $iLoc;
 $2 = $iCont;
 $3 = $iIndex;
 $4 = $iSign;
 $5 = $ppAHexpt;
 $6 = $pOut;
 $7 = $2;
 $8 = (($7) + 1)|0;
 $9 = $0;
 $10 = ($9*3)|0;
 $11 = (($8) + ($10))|0;
 $iContext = $11;
 $12 = $1;
 $13 = ($12|0)<(15);
 if ($13) {
  $14 = $iContext;
  $15 = $5;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $pAHexpt = $17;
  $18 = $3;
  $19 = $pAHexpt;
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $pAHexpt;
  $25 = (($24) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23))|0;
  HEAP32[$25>>2] = $27;
  $28 = $3;
  $29 = $pAHexpt;
  $30 = (($29) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $pAHexpt;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($33))|0;
  HEAP32[$35>>2] = $37;
  $38 = $6;
  $39 = $3;
  $40 = $39<<1;
  $41 = (($40) + 1)|0;
  $42 = $pAHexpt;
  $43 = (($42) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($41<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $46<<1;
  $48 = $4;
  $49 = (($47) + ($48))|0;
  $50 = $3;
  $51 = $50<<1;
  $52 = (($51) + 2)|0;
  $53 = $pAHexpt;
  $54 = (($53) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($52<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + 1)|0;
  _putBit16z($38,$49,$58);
  STACKTOP = sp;return;
 }
 $59 = $1;
 $60 = ($59|0)==(15);
 if ($60) {
  $61 = $6;
  $62 = $3;
  $63 = (5608 + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64<<1;
  $66 = $4;
  $67 = (($65) + ($66))|0;
  $68 = $3;
  $69 = (5624 + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + 1)|0;
  _putBit16z($61,$67,$71);
  STACKTOP = sp;return;
 } else {
  $72 = $6;
  $73 = $3;
  $74 = $73<<1;
  $75 = $4;
  $76 = (($74) + ($75))|0;
  _putBit16z($72,$76,2);
  STACKTOP = sp;return;
 }
}
function _AdaptiveScanZero($pCoeffs,$pScan,$pRLCoeffs,$iCount) {
 $pCoeffs = $pCoeffs|0;
 $pScan = $pScan|0;
 $pRLCoeffs = $pRLCoeffs|0;
 $iCount = $iCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $cTemp = 0, $iLevel = 0, $iNumNonzero = 0, $iRun = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cTemp = sp + 16|0;
 $0 = $pCoeffs;
 $1 = $pScan;
 $2 = $pRLCoeffs;
 $3 = $iCount;
 $iRun = 1;
 $iNumNonzero = 0;
 $4 = $1;
 $5 = (($4) + 8|0);
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + ($7<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $iLevel = $10;
 $11 = $iLevel;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $1;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$14>>2] = $16;
  $17 = $iNumNonzero;
  $18 = $17<<1;
  $19 = $2;
  $20 = (($19) + ($18<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = $iLevel;
  $22 = $iNumNonzero;
  $23 = $22<<1;
  $24 = (($23) + 1)|0;
  $25 = $2;
  $26 = (($25) + ($24<<2)|0);
  HEAP32[$26>>2] = $21;
  $27 = $iNumNonzero;
  $28 = (($27) + 1)|0;
  $iNumNonzero = $28;
  $iRun = 0;
 }
 $k = 2;
 while(1) {
  $29 = $k;
  $30 = $3;
  $31 = ($29|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $k;
  $33 = $1;
  $34 = (($33) + ($32<<3)|0);
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $0;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $iLevel = $39;
  $40 = $iRun;
  $41 = (($40) + 1)|0;
  $iRun = $41;
  $42 = $iLevel;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = $k;
   $45 = $1;
   $46 = (($45) + ($44<<3)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + 1)|0;
   HEAP32[$46>>2] = $48;
   $49 = $k;
   $50 = $1;
   $51 = (($50) + ($49<<3)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $k;
   $54 = (($53) - 1)|0;
   $55 = $1;
   $56 = (($55) + ($54<<3)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($52>>>0)>($57>>>0);
   if ($58) {
    $59 = $k;
    $60 = $1;
    $61 = (($60) + ($59<<3)|0);
    ;HEAP32[$cTemp+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$cTemp+4>>2]=HEAP32[$61+4>>2]|0;
    $62 = $k;
    $63 = $1;
    $64 = (($63) + ($62<<3)|0);
    $65 = $k;
    $66 = (($65) - 1)|0;
    $67 = $1;
    $68 = (($67) + ($66<<3)|0);
    ;HEAP32[$64+0>>2]=HEAP32[$68+0>>2]|0;HEAP32[$64+4>>2]=HEAP32[$68+4>>2]|0;
    $69 = $k;
    $70 = (($69) - 1)|0;
    $71 = $1;
    $72 = (($71) + ($70<<3)|0);
    ;HEAP32[$72+0>>2]=HEAP32[$cTemp+0>>2]|0;HEAP32[$72+4>>2]=HEAP32[$cTemp+4>>2]|0;
   }
   $73 = $iRun;
   $74 = (($73) - 1)|0;
   $75 = $iNumNonzero;
   $76 = $75<<1;
   $77 = $2;
   $78 = (($77) + ($76<<2)|0);
   HEAP32[$78>>2] = $74;
   $79 = $iLevel;
   $80 = $iNumNonzero;
   $81 = $80<<1;
   $82 = (($81) + 1)|0;
   $83 = $2;
   $84 = (($83) + ($82<<2)|0);
   HEAP32[$84>>2] = $79;
   $85 = $iNumNonzero;
   $86 = (($85) + 1)|0;
   $iNumNonzero = $86;
   $iRun = 0;
  }
  $87 = $k;
  $88 = (($87) + 1)|0;
  $k = $88;
 }
 $89 = $iNumNonzero;
 STACKTOP = sp;return ($89|0);
}
function _AdaptiveScanTrim($pCoeffs,$pScan,$iModelBits,$pRLCoeffs,$iCount) {
 $pCoeffs = $pCoeffs|0;
 $pScan = $pScan|0;
 $iModelBits = $iModelBits|0;
 $pRLCoeffs = $pRLCoeffs|0;
 $iCount = $iCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cTemp = 0, $iLevel = 0, $iNumNonzero = 0, $iRun = 0, $iTemp = 0, $iTh = 0, $iThOff = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cTemp = sp + 24|0;
 $0 = $pCoeffs;
 $1 = $pScan;
 $2 = $iModelBits;
 $3 = $pRLCoeffs;
 $4 = $iCount;
 $iRun = 1;
 $iNumNonzero = 0;
 $5 = $2;
 $6 = 1 << $5;
 $7 = (($6) - 1)|0;
 $iThOff = $7;
 $8 = $iThOff;
 $9 = $8<<1;
 $10 = (($9) + 1)|0;
 $iTh = $10;
 $11 = $1;
 $12 = (($11) + 8|0);
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $iLevel = $17;
 $18 = $iLevel;
 $19 = $iThOff;
 $20 = (($18) + ($19))|0;
 $21 = $iTh;
 $22 = ($20>>>0)>=($21>>>0);
 if ($22) {
  $23 = $iLevel;
  $24 = (Math_abs(($23|0))|0);
  $25 = $2;
  $26 = $24 >> $25;
  $iTemp = $26;
  $27 = $1;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = $iNumNonzero;
  $32 = $31<<1;
  $33 = $3;
  $34 = (($33) + ($32<<2)|0);
  HEAP32[$34>>2] = 0;
  $35 = $iLevel;
  $36 = ($35|0)<(0);
  if ($36) {
   $37 = $iTemp;
   $38 = (0 - ($37))|0;
   $45 = $38;
  } else {
   $39 = $iTemp;
   $45 = $39;
  }
  $40 = $iNumNonzero;
  $41 = $40<<1;
  $42 = (($41) + 1)|0;
  $43 = $3;
  $44 = (($43) + ($42<<2)|0);
  HEAP32[$44>>2] = $45;
  $46 = $iNumNonzero;
  $47 = (($46) + 1)|0;
  $iNumNonzero = $47;
  $iRun = 0;
 }
 $k = 2;
 while(1) {
  $48 = $k;
  $49 = $4;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $iRun;
  $52 = (($51) + 1)|0;
  $iRun = $52;
  $53 = $k;
  $54 = $1;
  $55 = (($54) + ($53<<3)|0);
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $0;
  $59 = (($58) + ($57<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $iLevel = $60;
  $61 = $iLevel;
  $62 = $iThOff;
  $63 = (($61) + ($62))|0;
  $64 = $iTh;
  $65 = ($63>>>0)>=($64>>>0);
  if ($65) {
   $66 = $iLevel;
   $67 = (Math_abs(($66|0))|0);
   $68 = $2;
   $69 = $67 >> $68;
   $iTemp = $69;
   $70 = $k;
   $71 = $1;
   $72 = (($71) + ($70<<3)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + 1)|0;
   HEAP32[$72>>2] = $74;
   $75 = $k;
   $76 = $1;
   $77 = (($76) + ($75<<3)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $k;
   $80 = (($79) - 1)|0;
   $81 = $1;
   $82 = (($81) + ($80<<3)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($78>>>0)>($83>>>0);
   if ($84) {
    $85 = $k;
    $86 = $1;
    $87 = (($86) + ($85<<3)|0);
    ;HEAP32[$cTemp+0>>2]=HEAP32[$87+0>>2]|0;HEAP32[$cTemp+4>>2]=HEAP32[$87+4>>2]|0;
    $88 = $k;
    $89 = $1;
    $90 = (($89) + ($88<<3)|0);
    $91 = $k;
    $92 = (($91) - 1)|0;
    $93 = $1;
    $94 = (($93) + ($92<<3)|0);
    ;HEAP32[$90+0>>2]=HEAP32[$94+0>>2]|0;HEAP32[$90+4>>2]=HEAP32[$94+4>>2]|0;
    $95 = $k;
    $96 = (($95) - 1)|0;
    $97 = $1;
    $98 = (($97) + ($96<<3)|0);
    ;HEAP32[$98+0>>2]=HEAP32[$cTemp+0>>2]|0;HEAP32[$98+4>>2]=HEAP32[$cTemp+4>>2]|0;
   }
   $99 = $iRun;
   $100 = (($99) - 1)|0;
   $101 = $iNumNonzero;
   $102 = $101<<1;
   $103 = $3;
   $104 = (($103) + ($102<<2)|0);
   HEAP32[$104>>2] = $100;
   $105 = $iLevel;
   $106 = ($105|0)<(0);
   if ($106) {
    $107 = $iTemp;
    $108 = (0 - ($107))|0;
    $115 = $108;
   } else {
    $109 = $iTemp;
    $115 = $109;
   }
   $110 = $iNumNonzero;
   $111 = $110<<1;
   $112 = (($111) + 1)|0;
   $113 = $3;
   $114 = (($113) + ($112<<2)|0);
   HEAP32[$114>>2] = $115;
   $116 = $iNumNonzero;
   $117 = (($116) + 1)|0;
   $iNumNonzero = $117;
   $iRun = 0;
  }
  $118 = $k;
  $119 = (($118) + 1)|0;
  $k = $119;
 }
 $120 = $iNumNonzero;
 STACKTOP = sp;return ($120|0);
}
function _writeQuantizer($pQuantizer,$pIO,$cChMode,$cChannel,$iPos) {
 $pQuantizer = $pQuantizer|0;
 $pIO = $pIO|0;
 $cChMode = $cChMode|0;
 $cChannel = $cChannel|0;
 $iPos = $iPos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pQuantizer;
 $1 = $pIO;
 $2 = $cChMode;
 $3 = $cChannel;
 $4 = $iPos;
 $5 = $2;
 $6 = $5&255;
 $7 = ($6|0)>(2);
 if ($7) {
  $2 = 2;
 }
 $8 = $3;
 $9 = ($8>>>0)>(1);
 if ($9) {
  $10 = $1;
  $11 = $2;
  $12 = $11&255;
  _putBit16($10,$12,2);
 } else {
  $2 = 0;
 }
 $13 = $1;
 $14 = $4;
 $15 = $0;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + (($14*20)|0)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 _putBit16($13,$19,8);
 $20 = $2;
 $21 = $20&255;
 $22 = ($21|0)==(1);
 if ($22) {
  $23 = $1;
  $24 = $4;
  $25 = $0;
  $26 = (($25) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + (($24*20)|0)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  _putBit16($23,$30,8);
  STACKTOP = sp;return;
 }
 $31 = $2;
 $32 = $31&255;
 $33 = ($32|0)>(0);
 if ($33) {
  $i = 1;
  while(1) {
   $34 = $i;
   $35 = $3;
   $36 = ($34>>>0)<($35>>>0);
   if (!($36)) {
    break;
   }
   $37 = $1;
   $38 = $4;
   $39 = $i;
   $40 = $0;
   $41 = (($40) + ($39<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + (($38*20)|0)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   _putBit16($37,$45,8);
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  }
 }
 STACKTOP = sp;return;
}
function _writePacketHeader($pIO,$ptPacketType,$pID) {
 $pIO = $pIO|0;
 $ptPacketType = $ptPacketType|0;
 $pID = $pID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $ptPacketType;
 $2 = $pID;
 $3 = $0;
 _putBit16($3,0,8);
 $4 = $0;
 _putBit16($4,0,8);
 $5 = $0;
 _putBit16($5,1,8);
 $6 = $0;
 $7 = $2;
 $8 = $7&255;
 $9 = $8 << 3;
 $10 = $1;
 $11 = $10&255;
 $12 = $11 & 7;
 $13 = (($9) + ($12))|0;
 _putBit16($6,$13,8);
 STACKTOP = sp;return;
}
function _writeTileHeaderDC($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $iTile = 0;
 var $j = 0, $pTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pIO;
 $3 = $1;
 $4 = (($3) + 35032|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $6 ? 1 : 2;
 $j = $7;
 L1: while(1) {
  $8 = $j;
  $9 = ($8>>>0)>(0);
  if (!($9)) {
   label = 23;
   break;
  }
  $10 = $1;
  $11 = (($10) + 34136|0);
  $12 = (($11) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 1;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $1;
   $17 = (($16) + 34316|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $1;
   $20 = (($19) + 34296|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($18) + (($21*240)|0)|0);
   $pTile = $22;
   $23 = (_rand()|0);
   $24 = $23 & 3;
   $25 = $24&255;
   $26 = $pTile;
   $27 = (($26) + 204|0);
   HEAP8[$27>>0] = $25;
   $28 = $1;
   $29 = (($28) + 34292|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $1;
   $32 = (($31) + 34296|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($30) + ($33))|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $iTile = 0;
    while(1) {
     $36 = $iTile;
     $37 = $1;
     $38 = (($37) + 84|0);
     $39 = (($38) + 64|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($36>>>0)<=($40>>>0);
     if (!($41)) {
      break;
     }
     $42 = $iTile;
     $43 = $1;
     $44 = (($43) + 34316|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (($45) + (($42*240)|0)|0);
     $47 = $1;
     $48 = (($47) + 34136|0);
     $49 = (($48) + 36|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (_allocateQuantizer($46,$50,1)|0);
     $52 = ($51|0)!=(0);
     if ($52) {
      label = 8;
      break L1;
     }
     $53 = $iTile;
     $54 = (($53) + 1)|0;
     $iTile = $54;
    }
   }
   $i = 0;
   while(1) {
    $55 = $i;
    $56 = $1;
    $57 = (($56) + 34136|0);
    $58 = (($57) + 36|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($55>>>0)<($59>>>0);
    if (!($60)) {
     break;
    }
    $61 = (_rand()|0);
    $62 = $61 & 47;
    $63 = (($62) + 1)|0;
    $64 = $63&255;
    $65 = $i;
    $66 = $pTile;
    $67 = (($66) + ($65<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    HEAP8[$68>>0] = $64;
    $69 = $i;
    $70 = (($69) + 1)|0;
    $i = $70;
   }
   $71 = $pTile;
   $72 = $pTile;
   $73 = (($72) + 204|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $1;
   $76 = (($75) + 34136|0);
   $77 = (($76) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $1;
   $80 = (($79) + 34136|0);
   $81 = (($80) + 20|0);
   $82 = HEAP32[$81>>2]|0;
   _formatQuantizer($71,$74,$78,0,1,$82);
   $i = 0;
   while(1) {
    $83 = $i;
    $84 = $1;
    $85 = (($84) + 34136|0);
    $86 = (($85) + 36|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($83>>>0)<($87>>>0);
    if (!($88)) {
     break;
    }
    $89 = $i;
    $90 = $pTile;
    $91 = (($90) + ($89<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $94 >> 1;
    $96 = $i;
    $97 = $pTile;
    $98 = (($97) + ($96<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($99) + 8|0);
    HEAP32[$100>>2] = $95;
    $101 = $i;
    $102 = (($101) + 1)|0;
    $i = $102;
   }
   $103 = $pTile;
   $104 = $2;
   $105 = $pTile;
   $106 = (($105) + 204|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $1;
   $109 = (($108) + 34136|0);
   $110 = (($109) + 36|0);
   $111 = HEAP32[$110>>2]|0;
   _writeQuantizer($103,$104,$107,$111,0);
  }
  $112 = $1;
  $113 = (($112) + 35032|0);
  $114 = HEAP32[$113>>2]|0;
  $1 = $114;
  $115 = $j;
  $116 = (($115) + -1)|0;
  $j = $116;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 23) {
  $0 = 0;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 return 0|0;
}
function _writeTileHeaderLP($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $pTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pIO;
 $3 = $1;
 $4 = (($3) + 35032|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $6 ? 1 : 2;
 $k = $7;
 while(1) {
  $8 = $k;
  $9 = ($8>>>0)>(0);
  if (!($9)) {
   label = 26;
   break;
  }
  $10 = $1;
  $11 = (($10) + 84|0);
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(3);
  if ($14) {
   $15 = $1;
   $16 = (($15) + 34136|0);
   $17 = (($16) + 60|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 2;
   $20 = ($19|0)!=(0);
   if ($20) {
    $21 = $1;
    $22 = (($21) + 34316|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $1;
    $25 = (($24) + 34296|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + (($26*240)|0)|0);
    $pTile = $27;
    $28 = (_rand()|0);
    $29 = $28 & 1;
    $30 = ($29|0)==(0);
    $31 = $30 ? 1 : 0;
    $32 = $pTile;
    $33 = (($32) + 196|0);
    HEAP32[$33>>2] = $31;
    $34 = $2;
    $35 = $pTile;
    $36 = (($35) + 196|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(1);
    $39 = $38 ? 1 : 0;
    _putBit16($34,$39,1);
    $40 = $pTile;
    $41 = (($40) + 194|0);
    HEAP8[$41>>0] = 0;
    $42 = $pTile;
    $43 = (($42) + 196|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(1);
    if ($45) {
     $52 = 1;
    } else {
     $46 = (_rand()|0);
     $47 = $46 & 15;
     $48 = (($47) + 1)|0;
     $49 = $48&255;
     $50 = $49&255;
     $52 = $50;
    }
    $51 = $52&255;
    $53 = $pTile;
    $54 = (($53) + 192|0);
    HEAP8[$54>>0] = $51;
    $55 = $1;
    $56 = (($55) + 34292|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57>>>0)>(0);
    if ($58) {
     $59 = $pTile;
     $60 = (($59) + 64|0);
     _freeQuantizer($60);
    }
    $61 = $pTile;
    $62 = (($61) + 64|0);
    $63 = $1;
    $64 = (($63) + 34136|0);
    $65 = (($64) + 36|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $pTile;
    $68 = (($67) + 192|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = (_allocateQuantizer($62,$66,$70)|0);
    $72 = ($71|0)!=(0);
    if ($72) {
     label = 11;
     break;
    }
    $73 = $pTile;
    $74 = (($73) + 196|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(1);
    if ($76) {
     $77 = $1;
     $78 = $1;
     $79 = (($78) + 34296|0);
     $80 = HEAP32[$79>>2]|0;
     _useDCQuantizer($77,$80);
    } else {
     $81 = $2;
     $82 = $pTile;
     $83 = (($82) + 192|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = (($85) - 1)|0;
     _putBit16($81,$86,4);
     $87 = $pTile;
     $88 = (($87) + 192|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = (_dquantBits($89)|0);
     $91 = $pTile;
     $92 = (($91) + 194|0);
     HEAP8[$92>>0] = $90;
     $i = 0;
     while(1) {
      $93 = $i;
      $94 = $93&255;
      $95 = $pTile;
      $96 = (($95) + 192|0);
      $97 = HEAP8[$96>>0]|0;
      $98 = $97&255;
      $99 = ($94|0)<($98|0);
      if (!($99)) {
       break;
      }
      $100 = (_rand()|0);
      $101 = $100 & 3;
      $102 = $101&255;
      $103 = $i;
      $104 = $103&255;
      $105 = $pTile;
      $106 = (($105) + 205|0);
      $107 = (($106) + ($104)|0);
      HEAP8[$107>>0] = $102;
      $j = 0;
      while(1) {
       $108 = $j;
       $109 = $108&255;
       $110 = $1;
       $111 = (($110) + 34136|0);
       $112 = (($111) + 36|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ($109>>>0)<($113>>>0);
       if (!($114)) {
        break;
       }
       $115 = (_rand()|0);
       $116 = $115 & 254;
       $117 = (($116) + 1)|0;
       $118 = $117&255;
       $119 = $i;
       $120 = $119&255;
       $121 = $j;
       $122 = $121&255;
       $123 = $pTile;
       $124 = (($123) + 64|0);
       $125 = (($124) + ($122<<2)|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (($126) + (($120*20)|0)|0);
       HEAP8[$127>>0] = $118;
       $128 = $j;
       $129 = (($128) + 1)<<24>>24;
       $j = $129;
      }
      $130 = $pTile;
      $131 = (($130) + 64|0);
      $132 = $i;
      $133 = $132&255;
      $134 = $pTile;
      $135 = (($134) + 205|0);
      $136 = (($135) + ($133)|0);
      $137 = HEAP8[$136>>0]|0;
      $138 = $1;
      $139 = (($138) + 34136|0);
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = $i;
      $143 = $142&255;
      $144 = $1;
      $145 = (($144) + 34136|0);
      $146 = (($145) + 20|0);
      $147 = HEAP32[$146>>2]|0;
      _formatQuantizer($131,$137,$141,$143,1,$147);
      $148 = $pTile;
      $149 = (($148) + 64|0);
      $150 = $2;
      $151 = $i;
      $152 = $151&255;
      $153 = $pTile;
      $154 = (($153) + 205|0);
      $155 = (($154) + ($152)|0);
      $156 = HEAP8[$155>>0]|0;
      $157 = $1;
      $158 = (($157) + 34136|0);
      $159 = (($158) + 36|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = $i;
      $162 = $161&255;
      _writeQuantizer($149,$150,$156,$160,$162);
      $163 = $i;
      $164 = (($163) + 1)<<24>>24;
      $i = $164;
     }
    }
   }
  }
  $165 = $1;
  $166 = (($165) + 35032|0);
  $167 = HEAP32[$166>>2]|0;
  $1 = $167;
  $168 = $k;
  $169 = (($168) + -1)|0;
  $k = $169;
 }
 if ((label|0) == 11) {
  $0 = -1;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 else if ((label|0) == 26) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 return 0|0;
}
function _writeTileHeaderHP($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $pTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pIO;
 $3 = $1;
 $4 = (($3) + 35032|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $6 ? 1 : 2;
 $k = $7;
 while(1) {
  $8 = $k;
  $9 = ($8>>>0)>(0);
  if (!($9)) {
   label = 27;
   break;
  }
  $10 = $1;
  $11 = (($10) + 84|0);
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(3);
  if ($14) {
   $15 = $1;
   $16 = (($15) + 84|0);
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(2);
   if ($19) {
    $20 = $1;
    $21 = (($20) + 34136|0);
    $22 = (($21) + 60|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23 & 4;
    $25 = ($24|0)!=(0);
    if ($25) {
     $26 = $1;
     $27 = (($26) + 34316|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $1;
     $30 = (($29) + 34296|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (($28) + (($31*240)|0)|0);
     $pTile = $32;
     $33 = (_rand()|0);
     $34 = $33 & 1;
     $35 = ($34|0)==(0);
     $36 = $35 ? 1 : 0;
     $37 = $pTile;
     $38 = (($37) + 200|0);
     HEAP32[$38>>2] = $36;
     $39 = $2;
     $40 = $pTile;
     $41 = (($40) + 200|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(1);
     $44 = $43 ? 1 : 0;
     _putBit16($39,$44,1);
     $45 = $pTile;
     $46 = (($45) + 195|0);
     HEAP8[$46>>0] = 0;
     $47 = $pTile;
     $48 = (($47) + 200|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(1);
     if ($50) {
      $51 = $pTile;
      $52 = (($51) + 192|0);
      $53 = HEAP8[$52>>0]|0;
      $54 = $53&255;
      $61 = $54;
     } else {
      $55 = (_rand()|0);
      $56 = $55 & 15;
      $57 = (($56) + 1)|0;
      $58 = $57&255;
      $59 = $58&255;
      $61 = $59;
     }
     $60 = $61&255;
     $62 = $pTile;
     $63 = (($62) + 193|0);
     HEAP8[$63>>0] = $60;
     $64 = $1;
     $65 = (($64) + 34292|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66>>>0)>(0);
     if ($67) {
      $68 = $pTile;
      $69 = (($68) + 128|0);
      _freeQuantizer($69);
     }
     $70 = $pTile;
     $71 = (($70) + 128|0);
     $72 = $1;
     $73 = (($72) + 34136|0);
     $74 = (($73) + 36|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $pTile;
     $77 = (($76) + 193|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = $78&255;
     $80 = (_allocateQuantizer($71,$75,$79)|0);
     $81 = ($80|0)!=(0);
     if ($81) {
      label = 12;
      break;
     }
     $82 = $pTile;
     $83 = (($82) + 200|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = $1;
      $87 = $pTile;
      $88 = (($87) + 193|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = $89&255;
      $91 = $1;
      $92 = (($91) + 34296|0);
      $93 = HEAP32[$92>>2]|0;
      _useLPQuantizer($86,$90,$93);
     } else {
      $94 = $2;
      $95 = $pTile;
      $96 = (($95) + 193|0);
      $97 = HEAP8[$96>>0]|0;
      $98 = $97&255;
      $99 = (($98) - 1)|0;
      _putBit16($94,$99,4);
      $100 = $pTile;
      $101 = (($100) + 193|0);
      $102 = HEAP8[$101>>0]|0;
      $103 = (_dquantBits($102)|0);
      $104 = $pTile;
      $105 = (($104) + 195|0);
      HEAP8[$105>>0] = $103;
      $i = 0;
      while(1) {
       $106 = $i;
       $107 = $106&255;
       $108 = $pTile;
       $109 = (($108) + 193|0);
       $110 = HEAP8[$109>>0]|0;
       $111 = $110&255;
       $112 = ($107|0)<($111|0);
       if (!($112)) {
        break;
       }
       $113 = (_rand()|0);
       $114 = $113 & 3;
       $115 = $114&255;
       $116 = $i;
       $117 = $116&255;
       $118 = $pTile;
       $119 = (($118) + 221|0);
       $120 = (($119) + ($117)|0);
       HEAP8[$120>>0] = $115;
       $j = 0;
       while(1) {
        $121 = $j;
        $122 = $121&255;
        $123 = $1;
        $124 = (($123) + 34136|0);
        $125 = (($124) + 36|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = ($122>>>0)<($126>>>0);
        if (!($127)) {
         break;
        }
        $128 = (_rand()|0);
        $129 = $128 & 254;
        $130 = (($129) + 1)|0;
        $131 = $130&255;
        $132 = $i;
        $133 = $132&255;
        $134 = $j;
        $135 = $134&255;
        $136 = $pTile;
        $137 = (($136) + 128|0);
        $138 = (($137) + ($135<<2)|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (($139) + (($133*20)|0)|0);
        HEAP8[$140>>0] = $131;
        $141 = $j;
        $142 = (($141) + 1)<<24>>24;
        $j = $142;
       }
       $143 = $pTile;
       $144 = (($143) + 128|0);
       $145 = $i;
       $146 = $145&255;
       $147 = $pTile;
       $148 = (($147) + 221|0);
       $149 = (($148) + ($146)|0);
       $150 = HEAP8[$149>>0]|0;
       $151 = $1;
       $152 = (($151) + 34136|0);
       $153 = (($152) + 36|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = $i;
       $156 = $155&255;
       $157 = $1;
       $158 = (($157) + 34136|0);
       $159 = (($158) + 20|0);
       $160 = HEAP32[$159>>2]|0;
       _formatQuantizer($144,$150,$154,$156,0,$160);
       $161 = $pTile;
       $162 = (($161) + 128|0);
       $163 = $2;
       $164 = $i;
       $165 = $164&255;
       $166 = $pTile;
       $167 = (($166) + 221|0);
       $168 = (($167) + ($165)|0);
       $169 = HEAP8[$168>>0]|0;
       $170 = $1;
       $171 = (($170) + 34136|0);
       $172 = (($171) + 36|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = $i;
       $175 = $174&255;
       _writeQuantizer($162,$163,$169,$173,$175);
       $176 = $i;
       $177 = (($176) + 1)<<24>>24;
       $i = $177;
      }
     }
    }
   }
  }
  $178 = $1;
  $179 = (($178) + 35032|0);
  $180 = HEAP32[$179>>2]|0;
  $1 = $180;
  $181 = $k;
  $182 = (($181) + -1)|0;
  $k = $182;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $183 = $0;
  STACKTOP = sp;return ($183|0);
 }
 else if ((label|0) == 27) {
  $0 = 0;
  $183 = $0;
  STACKTOP = sp;return ($183|0);
 }
 return 0|0;
}
function _encodeMB($pSC,$iMBX,$iMBY) {
 $pSC = $pSC|0;
 $iMBX = $iMBX|0;
 $iMBY = $iMBY|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $k = 0, $l = 0, $pContext = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp + 16|0;
 $1 = $pSC;
 $2 = $iMBX;
 $3 = $iMBY;
 $4 = $1;
 $5 = (($4) + 34296|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 34336|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($6*592)|0)|0);
 $pContext = $10;
 $11 = $1;
 $12 = (($11) + 34300|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $1;
  $16 = (($15) + 34304|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $1;
   $20 = (($19) + 35036|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = $1;
    $24 = (($23) + 34136|0);
    $25 = (($24) + 56|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0);
    if ($27) {
     $28 = $1;
     $29 = (($28) + 34292|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $1;
     $32 = (($31) + 84|0);
     $33 = (($32) + 64|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     $36 = Math_imul($30, $35)|0;
     $37 = $1;
     $38 = (($37) + 34296|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($36) + ($39))|0;
     $41 = $40 & 31;
     $42 = $41&255;
     $pID = $42;
     $43 = $1;
     $44 = (($43) + 84|0);
     $45 = (($44) + 28|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)==(0);
     if ($47) {
      $48 = $pContext;
      $49 = HEAP32[$48>>2]|0;
      $50 = $pID;
      _writePacketHeader($49,0,$50);
      $51 = $1;
      $52 = (($51) + 34136|0);
      $53 = (($52) + 28|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)!=(0);
      if ($55) {
       $56 = $pContext;
       $57 = HEAP32[$56>>2]|0;
       $58 = $pContext;
       $59 = (($58) + 584|0);
       $60 = HEAP32[$59>>2]|0;
       _putBit16($57,$60,4);
      }
      $61 = $1;
      $62 = $pContext;
      $63 = HEAP32[$62>>2]|0;
      (_writeTileHeaderDC($61,$63)|0);
      $64 = $1;
      $65 = $pContext;
      $66 = HEAP32[$65>>2]|0;
      (_writeTileHeaderLP($64,$66)|0);
      $67 = $1;
      $68 = $pContext;
      $69 = HEAP32[$68>>2]|0;
      (_writeTileHeaderHP($67,$69)|0);
     } else {
      $70 = $pContext;
      $71 = HEAP32[$70>>2]|0;
      $72 = $pID;
      _writePacketHeader($71,1,$72);
      $73 = $1;
      $74 = $pContext;
      $75 = HEAP32[$74>>2]|0;
      (_writeTileHeaderDC($73,$75)|0);
      $76 = $1;
      $77 = (($76) + 34252|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($78>>>0)>(1);
      if ($79) {
       $80 = $pContext;
       $81 = (($80) + 4|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = $pID;
       _writePacketHeader($82,2,$83);
       $84 = $1;
       $85 = $pContext;
       $86 = (($85) + 4|0);
       $87 = HEAP32[$86>>2]|0;
       (_writeTileHeaderLP($84,$87)|0);
      }
      $88 = $1;
      $89 = (($88) + 34252|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90>>>0)>(2);
      if ($91) {
       $92 = $pContext;
       $93 = (($92) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = $pID;
       _writePacketHeader($94,3,$95);
       $96 = $1;
       $97 = $pContext;
       $98 = (($97) + 8|0);
       $99 = HEAP32[$98>>2]|0;
       (_writeTileHeaderHP($96,$99)|0);
      }
      $100 = $1;
      $101 = (($100) + 34252|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102>>>0)>(3);
      if ($103) {
       $104 = $pContext;
       $105 = (($104) + 12|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = $pID;
       _writePacketHeader($106,4,$107);
       $108 = $1;
       $109 = (($108) + 34136|0);
       $110 = (($109) + 28|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($111|0)!=(0);
       if ($112) {
        $113 = $pContext;
        $114 = (($113) + 12|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = $pContext;
        $117 = (($116) + 584|0);
        $118 = HEAP32[$117>>2]|0;
        _putBit16($115,$118,4);
       }
      }
     }
    }
   }
  }
 }
 $119 = $1;
 $120 = $pContext;
 $121 = $2;
 $122 = $3;
 $123 = (_EncodeMacroblockDC($119,$120,$121,$122)|0);
 $124 = ($123|0)!=(0);
 if ($124) {
  $0 = -1;
  $260 = $0;
  STACKTOP = sp;return ($260|0);
 }
 $125 = $1;
 $126 = (($125) + 84|0);
 $127 = (($126) + 44|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ($128|0)!=(3);
 do {
  if ($129) {
   $130 = $1;
   $131 = $pContext;
   $132 = $2;
   $133 = $3;
   $134 = (_EncodeMacroblockLowpass($130,$131,$132,$133)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    break;
   }
   $0 = -1;
   $260 = $0;
   STACKTOP = sp;return ($260|0);
  }
 } while(0);
 $136 = $1;
 $137 = (($136) + 84|0);
 $138 = (($137) + 44|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)!=(3);
 do {
  if ($140) {
   $141 = $1;
   $142 = (($141) + 84|0);
   $143 = (($142) + 44|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($144|0)!=(2);
   if ($145) {
    $146 = $1;
    $147 = $pContext;
    $148 = $2;
    $149 = $3;
    $150 = (_EncodeMacroblockHighpass($146,$147,$148,$149)|0);
    $151 = ($150|0)!=(0);
    if (!($151)) {
     break;
    }
    $0 = -1;
    $260 = $0;
    STACKTOP = sp;return ($260|0);
   }
  }
 } while(0);
 $152 = $2;
 $153 = (($152) + 1)|0;
 $154 = $1;
 $155 = (($154) + 34364|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ($153|0)==($156|0);
 do {
  if ($157) {
   $158 = $3;
   $159 = (($158) + 1)|0;
   $160 = $1;
   $161 = (($160) + 34368|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($159|0)==($162|0);
   if (!($163)) {
    $164 = $1;
    $165 = (($164) + 34292|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $1;
    $168 = (($167) + 84|0);
    $169 = (($168) + 16452|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = ($166>>>0)<($170>>>0);
    if (!($171)) {
     break;
    }
    $172 = $3;
    $173 = $1;
    $174 = (($173) + 34292|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (($175) + 1)|0;
    $177 = $1;
    $178 = (($177) + 84|0);
    $179 = (($178) + 16456|0);
    $180 = (($179) + ($176<<2)|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($181) - 1)|0;
    $183 = ($172|0)==($182|0);
    if (!($183)) {
     break;
    }
   }
   $184 = $1;
   $185 = (($184) + 35032|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ($186|0)==(0|0);
   if ($187) {
    label = 36;
   } else {
    $188 = $1;
    $189 = (($188) + 35036|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($190|0)!=(0);
    if ($191) {
     label = 36;
    }
   }
   if ((label|0) == 36) {
    $k = 0;
    while(1) {
     $192 = $k;
     $193 = $1;
     $194 = (($193) + 34328|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($192>>>0)<($195>>>0);
     if (!($196)) {
      break;
     }
     $197 = $k;
     $198 = $1;
     $199 = (($198) + 34320|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($200) + ($197<<2)|0);
     $202 = HEAP32[$201>>2]|0;
     _fillToByte($202);
     $203 = $k;
     $204 = $1;
     $205 = (($204) + 35024|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = (($206) + ($203<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = (($208) + 48|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = $k;
     $212 = $1;
     $213 = (($212) + 35024|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = (($214) + ($211<<2)|0);
     $216 = HEAP32[$215>>2]|0;
     (FUNCTION_TABLE_iii[$210 & 255]($216,$l)|0);
     $217 = HEAP32[$l>>2]|0;
     $218 = $k;
     $219 = $1;
     $220 = (($219) + 34320|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + ($218<<2)|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = (_getSizeWrite($223)|0);
     $225 = (($217) + ($224))|0;
     $226 = $1;
     $227 = (($226) + 34328|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = $1;
     $230 = (($229) + 34292|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = Math_imul($228, $231)|0;
     $233 = $k;
     $234 = (($232) + ($233))|0;
     $235 = $1;
     $236 = (($235) + 34288|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = (($237) + ($234<<2)|0);
     HEAP32[$238>>2] = $225;
     $239 = $k;
     $240 = (($239) + 1)|0;
     $k = $240;
    }
   }
   $241 = $3;
   $242 = (($241) + 1)|0;
   $243 = $1;
   $244 = (($243) + 34368|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = ($242|0)!=($245|0);
   if ($246) {
    $k = 0;
    while(1) {
     $247 = $k;
     $248 = $1;
     $249 = (($248) + 84|0);
     $250 = (($249) + 64|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = ($247>>>0)<=($251>>>0);
     if (!($252)) {
      break;
     }
     $253 = $k;
     $254 = $1;
     $255 = (($254) + 34336|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = (($256) + (($253*592)|0)|0);
     _ResetCodingContextEnc($257);
     $258 = $k;
     $259 = (($258) + 1)|0;
     $k = $259;
    }
   }
  }
 } while(0);
 $0 = 0;
 $260 = $0;
 STACKTOP = sp;return ($260|0);
}
function _processMacroblock($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $j = 0, $jend = 0, $result = 0, $topORleft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 34360|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = $1;
  $7 = (($6) + 34356|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  $11 = $9;
 }
 $10 = $11&1;
 $topORleft = $10;
 $result = 0;
 $12 = $1;
 $13 = (($12) + 35032|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 $16 = $15&1;
 $jend = $16;
 $j = 0;
 while(1) {
  $17 = $j;
  $18 = $jend;
  $19 = ($17>>>0)<=($18>>>0);
  if (!($19)) {
   label = 15;
   break;
  }
  $20 = $1;
  _transformMacroblock($20);
  $21 = $topORleft;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   $23 = $1;
   $24 = $1;
   $25 = (($24) + 34360|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) - 1)|0;
   $28 = $1;
   $29 = (($28) + 34356|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) - 1)|0;
   _getTilePos($23,$27,$31);
   $32 = $jend;
   $33 = ($32|0)!=(0);
   if ($33) {
    $34 = $1;
    $35 = (($34) + 34292|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $1;
    $38 = (($37) + 35032|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + 34292|0);
    HEAP32[$40>>2] = $36;
    $41 = $1;
    $42 = (($41) + 34296|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $1;
    $45 = (($44) + 35032|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + 34296|0);
    HEAP32[$47>>2] = $43;
   }
   $48 = $1;
   $49 = $1;
   $50 = (($49) + 34360|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) - 1)|0;
   $53 = $1;
   $54 = (($53) + 34356|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) - 1)|0;
   $57 = (_encodeMB($48,$52,$56)|0);
   $result = $57;
   $58 = ($57|0)!=(0);
   if ($58) {
    label = 9;
    break;
   }
  }
  $60 = $jend;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $1;
   $63 = (($62) + 34356|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $1;
   $66 = (($65) + 35032|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + 34356|0);
   HEAP32[$68>>2] = $64;
   $69 = $1;
   $70 = (($69) + 34360|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 35032|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($74) + 34360|0);
   HEAP32[$75>>2] = $71;
   $76 = $1;
   $77 = (($76) + 35032|0);
   $78 = HEAP32[$77>>2]|0;
   $1 = $78;
  }
  $79 = $j;
  $80 = (($79) + 1)|0;
  $j = $80;
 }
 if ((label|0) == 9) {
  $59 = $result;
  $0 = $59;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 return 0|0;
}
function _StrIOEncInit($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var $pFilename = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 84|0);
 $4 = (($3) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $8 = (($7) + 84|0);
  $9 = (($8) + 16452|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = (($11) + 84|0);
  $13 = (($12) + 64|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($10) + ($14))|0;
  $16 = ($15|0)==(0);
  $18 = $16;
 } else {
  $18 = 0;
 }
 $17 = $18 ^ 1;
 $19 = $17&1;
 $20 = $1;
 $21 = (($20) + 34136|0);
 $22 = (($21) + 24|0);
 HEAP32[$22>>2] = $19;
 $23 = $1;
 $24 = (_allocateBitIOInfo($23,0)|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $0 = -1;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 }
 $26 = $1;
 $27 = (_AllocateIndexTable($26)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  $0 = -1;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 }
 $29 = $1;
 $30 = (($29) + 34272|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $1;
 $33 = (($32) + 84|0);
 $34 = (($33) + 52|0);
 $35 = HEAP32[$34>>2]|0;
 (_attachISWrite($31,$35)|0);
 $36 = $1;
 $37 = (($36) + 34328|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38>>>0)>(0);
 do {
  if ($39) {
   $40 = $1;
   $41 = (($40) + 34328|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42<<2;
   $44 = (_malloc($43)|0);
   $45 = $1;
   $46 = (($45) + 35024|0);
   HEAP32[$46>>2] = $44;
   $47 = $1;
   $48 = (($47) + 35024|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0|0);
   if ($50) {
    $0 = -1;
    $158 = $0;
    STACKTOP = sp;return ($158|0);
   }
   $51 = $1;
   $52 = (($51) + 35024|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 34328|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56<<2;
   _memset(($53|0),0,($57|0))|0;
   $58 = $1;
   $59 = (($58) + 34368|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $1;
   $62 = (($61) + 34364|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = Math_imul($60, $63)|0;
   $65 = $1;
   $66 = (($65) + 84|0);
   $67 = (($66) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = Math_imul($64, $68)|0;
   $70 = ($69>>>0)>=(67108864);
   do {
    if ($70) {
     $71 = $1;
     $72 = (($71) + 34328|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $73<<2;
     $75 = (_malloc($74)|0);
     $76 = $1;
     $77 = (($76) + 35028|0);
     HEAP32[$77>>2] = $75;
     $78 = $1;
     $79 = (($78) + 35028|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)==(0|0);
     if (!($81)) {
      $82 = $1;
      $83 = (($82) + 35028|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $1;
      $86 = (($85) + 34328|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = $87<<2;
      _memset(($84|0),0,($88|0))|0;
      break;
     }
     $0 = -1;
     $158 = $0;
     STACKTOP = sp;return ($158|0);
    }
   } while(0);
   $i = 0;
   while(1) {
    $89 = $i;
    $90 = $1;
    $91 = (($90) + 34328|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($89>>>0)<($92>>>0);
    if (!($93)) {
     label = 29;
     break;
    }
    $94 = $1;
    $95 = (($94) + 34368|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $1;
    $98 = (($97) + 34364|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = Math_imul($96, $99)|0;
    $101 = $1;
    $102 = (($101) + 84|0);
    $103 = (($102) + 32|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = Math_imul($100, $104)|0;
    $106 = ($105>>>0)>=(67108864);
    if ($106) {
     $107 = (_malloc(4096)|0);
     $108 = $i;
     $109 = $1;
     $110 = (($109) + 35028|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (($111) + ($108<<2)|0);
     HEAP32[$112>>2] = $107;
     $113 = $i;
     $114 = $1;
     $115 = (($114) + 35028|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + ($113<<2)|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($118|0)==(0|0);
     if ($119) {
      label = 18;
      break;
     }
     $120 = (_tmpnam((0|0))|0);
     $pFilename = $120;
     $121 = ($120|0)==(0|0);
     if ($121) {
      label = 20;
      break;
     }
     $122 = $i;
     $123 = $1;
     $124 = (($123) + 35028|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($125) + ($122<<2)|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $pFilename;
     (_strcpy(($127|0),($128|0))|0);
     $129 = $1;
     $130 = (($129) + 35024|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $i;
     $133 = (($131) + ($132<<2)|0);
     $134 = $pFilename;
     $135 = (_CreateWS_File($133,$134,6208)|0);
     $136 = ($135|0)!=(0);
     if ($136) {
      label = 22;
      break;
     }
    } else {
     $137 = $1;
     $138 = (($137) + 35024|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $i;
     $141 = (($139) + ($140<<2)|0);
     $142 = (_CreateWS_List($141)|0);
     $143 = ($142|0)!=(0);
     if ($143) {
      label = 25;
      break;
     }
    }
    $144 = $i;
    $145 = $1;
    $146 = (($145) + 34320|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + ($144<<2)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $i;
    $151 = $1;
    $152 = (($151) + 35024|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($153) + ($150<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    (_attachISWrite($149,$155)|0);
    $156 = $i;
    $157 = (($156) + 1)|0;
    $i = $157;
   }
   if ((label|0) == 18) {
    $0 = -1;
    $158 = $0;
    STACKTOP = sp;return ($158|0);
   }
   else if ((label|0) == 20) {
    $0 = -1;
    $158 = $0;
    STACKTOP = sp;return ($158|0);
   }
   else if ((label|0) == 22) {
    $0 = -1;
    $158 = $0;
    STACKTOP = sp;return ($158|0);
   }
   else if ((label|0) == 25) {
    $0 = -1;
    $158 = $0;
    STACKTOP = sp;return ($158|0);
   }
   else if ((label|0) == 29) {
    break;
   }
  }
 } while(0);
 $0 = 0;
 $158 = $0;
 STACKTOP = sp;return ($158|0);
}
function _writeIndexTableNull($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pIO = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34328|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return 0;
 }
 $5 = $0;
 $6 = (($5) + 34272|0);
 $7 = HEAP32[$6>>2]|0;
 $pIO = $7;
 $8 = $pIO;
 _fillToByte($8);
 $9 = $pIO;
 _PutVLWordEsc($9,0,4);
 $10 = $pIO;
 _putBit16($10,111,8);
 $11 = $pIO;
 _putBit16($11,255,8);
 $12 = $pIO;
 _putBit16($12,1,16);
 STACKTOP = sp;return 0;
}
function _PutVLWordEsc($pIO,$iEscape,$s) {
 $pIO = $pIO|0;
 $iEscape = $iEscape|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $iEscape;
 $2 = $s;
 $3 = $1;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<=(255);
  if (!($6)) {
   ___assert_fail((7280|0),(7080|0),516,(7320|0));
   // unreachable;
  }
  $7 = $1;
  $8 = ($7|0)>(252);
  if (!($8)) {
   ___assert_fail((7280|0),(7080|0),516,(7320|0));
   // unreachable;
  }
  $9 = $0;
  $10 = $1;
  _putBit16($9,$10,8);
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = ($11>>>0)<(64256);
 if ($12) {
  $13 = $0;
  $14 = $2;
  _putBit16($13,$14,16);
 } else {
  $15 = $2;
  $16 = $15 >>> 16;
  $t = $16;
  $17 = $t;
  $18 = $17 >>> 16;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = $0;
   _putBit16($20,251,8);
  } else {
   $21 = $t;
   $22 = $21 >>> 16;
   $t = $22;
   $23 = $0;
   _putBit16($23,252,8);
   $24 = $0;
   $25 = $t;
   $26 = $25 >>> 16;
   $27 = $26 & 65535;
   _putBit16($24,$27,16);
   $28 = $0;
   $29 = $t;
   $30 = $29 & 65535;
   _putBit16($28,$30,16);
  }
  $31 = $0;
  $32 = $t;
  $33 = $32 & 65535;
  _putBit16($31,$33,16);
  $34 = $0;
  $35 = $2;
  $36 = $35 & 65535;
  _putBit16($34,$36,16);
 }
 STACKTOP = sp;return;
}
function _writeIndexTable($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $iEntry = 0, $iSize = 0, $k = 0, $l = 0, $pIO = 0, $pTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iSize = sp + 8|0;
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34328|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>(0);
 if (!($4)) {
  STACKTOP = sp;return 0;
 }
 $5 = $0;
 $6 = (($5) + 34272|0);
 $7 = HEAP32[$6>>2]|0;
 $pIO = $7;
 $8 = $0;
 $9 = (($8) + 34288|0);
 $10 = HEAP32[$9>>2]|0;
 $pTable = $10;
 ;HEAP32[$iSize+0>>2]=0|0;HEAP32[$iSize+4>>2]=0|0;HEAP32[$iSize+8>>2]=0|0;HEAP32[$iSize+12>>2]=0|0;
 $11 = $0;
 $12 = (($11) + 34328|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = (($14) + 84|0);
 $16 = (($15) + 16452|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 $19 = Math_imul($13, $18)|0;
 $iEntry = $19;
 $20 = $pIO;
 _putBit16($20,1,16);
 $21 = $0;
 $22 = (($21) + 84|0);
 $23 = (($22) + 16452|0);
 $24 = HEAP32[$23>>2]|0;
 $i = $24;
 while(1) {
  $25 = $i;
  $26 = ($25|0)>=(0);
  if ($26) {
   $27 = $0;
   $28 = (($27) + 34268|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   $166 = $30;
  } else {
   $166 = 0;
  }
  if (!($166)) {
   break;
  }
  $k = 0;
  while(1) {
   $31 = $k;
   $32 = $0;
   $33 = (($32) + 34328|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($31|0)<($34|0);
   if (!($35)) {
    break;
   }
   $l = 0;
   while(1) {
    $36 = $l;
    $37 = $0;
    $38 = (($37) + 84|0);
    $39 = (($38) + 28|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(1);
    if ($41) {
     $42 = $0;
     $43 = (($42) + 84|0);
     $44 = (($43) + 32852|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)!=(0);
     if ($46) {
      $47 = $0;
      $48 = (($47) + 34252|0);
      $49 = HEAP32[$48>>2]|0;
      $51 = $49;
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
    if ((label|0) == 12) {
     label = 0;
     $51 = 1;
    }
    $50 = ($36|0)<($51|0);
    if (!($50)) {
     break;
    }
    $52 = $i;
    $53 = ($52|0)>(0);
    if ($53) {
     $54 = $0;
     $55 = (($54) + 34328|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $i;
     $58 = (($57) - 1)|0;
     $59 = Math_imul($56, $58)|0;
     $60 = $k;
     $61 = (($59) + ($60))|0;
     $62 = $0;
     $63 = (($62) + 34288|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (($64) + ($61<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $0;
     $68 = (($67) + 34328|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $i;
     $71 = Math_imul($69, $70)|0;
     $72 = $k;
     $73 = (($71) + ($72))|0;
     $74 = $pTable;
     $75 = (($74) + ($73<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) - ($66))|0;
     HEAP32[$75>>2] = $77;
    }
    $78 = $0;
    $79 = (($78) + 34328|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $i;
    $82 = Math_imul($80, $81)|0;
    $83 = $k;
    $84 = (($82) + ($83))|0;
    $85 = $pTable;
    $86 = (($85) + ($84<<2)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $l;
    $89 = (($iSize) + ($88<<2)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + ($87))|0;
    HEAP32[$89>>2] = $91;
    $92 = $l;
    $93 = (($92) + 1)|0;
    $l = $93;
    $94 = $k;
    $95 = (($94) + 1)|0;
    $k = $95;
   }
  }
  $96 = $i;
  $97 = (($96) + -1)|0;
  $i = $97;
 }
 $98 = (($iSize) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($iSize) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($99) + ($101))|0;
 $103 = HEAP32[$iSize>>2]|0;
 $104 = (($102) + ($103))|0;
 $105 = (($iSize) + 12|0);
 HEAP32[$105>>2] = $104;
 $106 = (($iSize) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = HEAP32[$iSize>>2]|0;
 $109 = (($107) + ($108))|0;
 $110 = (($iSize) + 8|0);
 HEAP32[$110>>2] = $109;
 $111 = HEAP32[$iSize>>2]|0;
 $112 = (($iSize) + 4|0);
 HEAP32[$112>>2] = $111;
 HEAP32[$iSize>>2] = 0;
 $i = 0;
 while(1) {
  $113 = $i;
  $114 = $iEntry;
  $115 = ($113|0)<($114|0);
  if (!($115)) {
   break;
  }
  $l = 0;
  while(1) {
   $116 = $l;
   $117 = $0;
   $118 = (($117) + 84|0);
   $119 = (($118) + 28|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($120|0)==(1);
   if ($121) {
    $122 = $0;
    $123 = (($122) + 84|0);
    $124 = (($123) + 32852|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($125|0)!=(0);
    if ($126) {
     $127 = $0;
     $128 = (($127) + 34252|0);
     $129 = HEAP32[$128>>2]|0;
     $131 = $129;
    } else {
     label = 27;
    }
   } else {
    label = 27;
   }
   if ((label|0) == 27) {
    label = 0;
    $131 = 1;
   }
   $130 = ($116|0)<($131|0);
   if (!($130)) {
    break;
   }
   $132 = $0;
   $133 = $pIO;
   (_writeIS($132,$133)|0);
   $134 = $pIO;
   $135 = $i;
   $136 = $pTable;
   $137 = (($136) + ($135<<2)|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ($138>>>0)<=(4);
   $140 = $139 ? 255 : 0;
   $141 = $l;
   $142 = (($iSize) + ($141<<2)|0);
   $143 = HEAP32[$142>>2]|0;
   _PutVLWordEsc($134,$140,$143);
   $144 = $i;
   $145 = $pTable;
   $146 = (($145) + ($144<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147>>>0)<=(4);
   if ($148) {
    $157 = 0;
   } else {
    $149 = $i;
    $150 = $pTable;
    $151 = (($150) + ($149<<2)|0);
    $152 = HEAP32[$151>>2]|0;
    $157 = $152;
   }
   $153 = $l;
   $154 = (($iSize) + ($153<<2)|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + ($157))|0;
   HEAP32[$154>>2] = $156;
   $158 = $l;
   $159 = (($158) + 1)|0;
   $l = $159;
   $160 = $i;
   $161 = (($160) + 1)|0;
   $i = $161;
  }
 }
 $162 = $0;
 $163 = $pIO;
 (_writeIS($162,$163)|0);
 $164 = $pIO;
 _PutVLWordEsc($164,255,0);
 $165 = $pIO;
 _fillToByte($165);
 STACKTOP = sp;return 0;
}
function _copyTo($pSrc,$pDst,$iBytes) {
 $pSrc = $pSrc|0;
 $pDst = $pDst|0;
 $iBytes = $iBytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pData = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pData = sp + 16|0;
 $1 = $pSrc;
 $2 = $pDst;
 $3 = $iBytes;
 $4 = $3;
 $5 = ($4>>>0)<=(4);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = $3;
  (FUNCTION_TABLE_iiii[$8 & 255]($9,$pData,$10)|0);
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 while(1) {
  $11 = $3;
  $12 = ($11>>>0)>(4096);
  if (!($12)) {
   break;
  }
  $13 = $1;
  $14 = (($13) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  (FUNCTION_TABLE_iiii[$15 & 255]($16,$pData,4096)|0);
  $17 = $2;
  $18 = (($17) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  (FUNCTION_TABLE_iiii[$19 & 255]($20,$pData,4096)|0);
  $21 = $3;
  $22 = (($21) - 4096)|0;
  $3 = $22;
 }
 $23 = $1;
 $24 = (($23) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 $27 = $3;
 (FUNCTION_TABLE_iiii[$25 & 255]($26,$pData,$27)|0);
 $28 = $2;
 $29 = (($28) + 40|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $2;
 $32 = $3;
 (FUNCTION_TABLE_iiii[$30 & 255]($31,$pData,$32)|0);
 $0 = 0;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _StrIOEncTerm($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $i1 = 0, $j = 0, $j2 = 0, $k = 0, $l = 0, $p = 0, $pDst = 0, $pIO = 0, $pTable = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp;
 $vararg_buffer18 = sp + 80|0;
 $vararg_buffer16 = sp + 24|0;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 48|0;
 $vararg_buffer5 = sp + 56|0;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 72|0;
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 34272|0);
 $4 = HEAP32[$3>>2]|0;
 $pIO = $4;
 $5 = $pIO;
 _fillToByte($5);
 $6 = $1;
 $7 = (($6) + 84|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 84|0);
  $12 = (($11) + 16452|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $14;
  (_printf((6216|0),($vararg_buffer|0))|0);
  $i = 0;
  while(1) {
   $15 = $i;
   $16 = $1;
   $17 = (($16) + 84|0);
   $18 = (($17) + 16452|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($15>>>0)<=($19>>>0);
   if (!($20)) {
    break;
   }
   $21 = $i;
   $22 = $i;
   $23 = $1;
   $24 = (($23) + 84|0);
   $25 = (($24) + 16456|0);
   $26 = (($25) + ($22<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $21;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $27;
   (_printf((6240|0),($vararg_buffer1|0))|0);
   $28 = $i;
   $29 = (($28) + 1)|0;
   $i = $29;
  }
  $30 = $1;
  $31 = (($30) + 84|0);
  $32 = (($31) + 64|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$vararg_buffer5>>2] = $34;
  (_printf((6280|0),($vararg_buffer5|0))|0);
  $i = 0;
  while(1) {
   $35 = $i;
   $36 = $1;
   $37 = (($36) + 84|0);
   $38 = (($37) + 64|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($35>>>0)<=($39>>>0);
   if (!($40)) {
    break;
   }
   $41 = $i;
   $42 = $i;
   $43 = $1;
   $44 = (($43) + 84|0);
   $45 = (($44) + 68|0);
   $46 = (($45) + ($42<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $41;
   $vararg_ptr11 = (($vararg_buffer8) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $47;
   (_printf((6240|0),($vararg_buffer8|0))|0);
   $48 = $i;
   $49 = (($48) + 1)|0;
   $i = $49;
  }
  $50 = $1;
  $51 = (($50) + 84|0);
  $52 = (($51) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(0);
  if ($54) {
   (_printf((6304|0),($vararg_buffer12|0))|0);
  } else {
   (_printf((6336|0),($vararg_buffer14|0))|0);
  }
  $55 = $1;
  $56 = (($55) + 34136|0);
  $57 = (($56) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $1;
   $61 = (($60) + 84|0);
   $62 = (($61) + 28|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(0);
   if ($64) {
    $j = 0;
    while(1) {
     $65 = $j;
     $66 = $1;
     $67 = (($66) + 84|0);
     $68 = (($67) + 16452|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65>>>0)<=($69>>>0);
     if (!($70)) {
      break;
     }
     $i = 0;
     while(1) {
      $71 = $i;
      $72 = $1;
      $73 = (($72) + 84|0);
      $74 = (($73) + 64|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ($71>>>0)<=($75>>>0);
      if (!($76)) {
       break;
      }
      $77 = $j;
      $78 = $i;
      $79 = $j;
      $80 = $1;
      $81 = (($80) + 84|0);
      $82 = (($81) + 64|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83) + 1)|0;
      $85 = Math_imul($79, $84)|0;
      $86 = $i;
      $87 = (($85) + ($86))|0;
      $88 = $1;
      $89 = (($88) + 34288|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($90) + ($87<<2)|0);
      $92 = HEAP32[$91>>2]|0;
      HEAP32[$vararg_buffer18>>2] = $77;
      $vararg_ptr21 = (($vararg_buffer18) + 4|0);
      HEAP32[$vararg_ptr21>>2] = $78;
      $vararg_ptr22 = (($vararg_buffer18) + 8|0);
      HEAP32[$vararg_ptr22>>2] = $92;
      (_printf((6408|0),($vararg_buffer18|0))|0);
      $93 = $i;
      $94 = (($93) + 1)|0;
      $i = $94;
     }
     $95 = $j;
     $96 = (($95) + 1)|0;
     $j = $96;
    }
   } else {
    $j = 0;
    while(1) {
     $97 = $j;
     $98 = $1;
     $99 = (($98) + 84|0);
     $100 = (($99) + 16452|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($97>>>0)<=($101>>>0);
     if (!($102)) {
      break;
     }
     $i = 0;
     while(1) {
      $103 = $i;
      $104 = $1;
      $105 = (($104) + 84|0);
      $106 = (($105) + 64|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($103>>>0)<=($107>>>0);
      if (!($108)) {
       break;
      }
      $109 = $j;
      $110 = $1;
      $111 = (($110) + 84|0);
      $112 = (($111) + 64|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (($113) + 1)|0;
      $115 = Math_imul($109, $114)|0;
      $116 = $i;
      $117 = (($115) + ($116))|0;
      $118 = $117<<2;
      $119 = $1;
      $120 = (($119) + 34288|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = (($121) + ($118<<2)|0);
      $p = $122;
      $123 = $j;
      $124 = $i;
      $125 = $p;
      $126 = HEAP32[$125>>2]|0;
      $127 = $p;
      $128 = (($127) + 4|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = $p;
      $131 = (($130) + 8|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = $p;
      $134 = (($133) + 12|0);
      $135 = HEAP32[$134>>2]|0;
      HEAP32[$vararg_buffer23>>2] = $123;
      $vararg_ptr26 = (($vararg_buffer23) + 4|0);
      HEAP32[$vararg_ptr26>>2] = $124;
      $vararg_ptr27 = (($vararg_buffer23) + 8|0);
      HEAP32[$vararg_ptr27>>2] = $126;
      $vararg_ptr28 = (($vararg_buffer23) + 12|0);
      HEAP32[$vararg_ptr28>>2] = $129;
      $vararg_ptr29 = (($vararg_buffer23) + 16|0);
      HEAP32[$vararg_ptr29>>2] = $132;
      $vararg_ptr30 = (($vararg_buffer23) + 20|0);
      HEAP32[$vararg_ptr30>>2] = $135;
      (_printf((6448|0),($vararg_buffer23|0))|0);
      $136 = $i;
      $137 = (($136) + 1)|0;
      $i = $137;
     }
     $138 = $j;
     $139 = (($138) + 1)|0;
     $j = $139;
    }
   }
  } else {
   (_printf((6368|0),($vararg_buffer16|0))|0);
  }
 }
 $140 = $1;
 (_writeIndexTable($140)|0);
 $141 = $1;
 $142 = $pIO;
 (_detachISWrite($141,$142)|0);
 $143 = $1;
 $144 = (($143) + 34328|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145>>>0)>(0);
 if ($146) {
  $147 = $1;
  $148 = (($147) + 84|0);
  $149 = (($148) + 52|0);
  $150 = HEAP32[$149>>2]|0;
  $pDst = $150;
  $151 = $1;
  $152 = (($151) + 34288|0);
  $153 = HEAP32[$152>>2]|0;
  $pTable = $153;
  $i1 = 0;
  while(1) {
   $154 = $i1;
   $155 = $1;
   $156 = (($155) + 34328|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($154>>>0)<($157>>>0);
   if (!($158)) {
    break;
   }
   $159 = $1;
   $160 = $i1;
   $161 = $1;
   $162 = (($161) + 34320|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + ($160<<2)|0);
   $165 = HEAP32[$164>>2]|0;
   (_detachISWrite($159,$165)|0);
   $166 = $i1;
   $167 = (($166) + 1)|0;
   $i1 = $167;
  }
  $i1 = 0;
  while(1) {
   $168 = $i1;
   $169 = $1;
   $170 = (($169) + 34328|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($168>>>0)<($171>>>0);
   if (!($172)) {
    break;
   }
   $173 = $i1;
   $174 = $1;
   $175 = (($174) + 35024|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($176) + ($173<<2)|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + 44|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $i1;
   $182 = $1;
   $183 = (($182) + 35024|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + ($181<<2)|0);
   $186 = HEAP32[$185>>2]|0;
   (FUNCTION_TABLE_iii[$180 & 255]($186,0)|0);
   $187 = $i1;
   $188 = (($187) + 1)|0;
   $i1 = $188;
  }
  $l = 0;
  while(1) {
   $189 = $l;
   $190 = $1;
   $191 = (($190) + 84|0);
   $192 = (($191) + 28|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ($193|0)==(1);
   if ($194) {
    $195 = $1;
    $196 = (($195) + 84|0);
    $197 = (($196) + 32852|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = ($198|0)!=(0);
    if ($199) {
     $200 = $1;
     $201 = (($200) + 34252|0);
     $202 = HEAP32[$201>>2]|0;
     $204 = $202;
    } else {
     label = 49;
    }
   } else {
    label = 49;
   }
   if ((label|0) == 49) {
    label = 0;
    $204 = 1;
   }
   $203 = ($189>>>0)<($204>>>0);
   if (!($203)) {
    break;
   }
   $i1 = 0;
   $205 = $l;
   $k = $205;
   while(1) {
    $206 = $i1;
    $207 = $1;
    $208 = (($207) + 84|0);
    $209 = (($208) + 16452|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = ($206>>>0)<=($210>>>0);
    if (!($211)) {
     break;
    }
    $j2 = 0;
    while(1) {
     $212 = $j2;
     $213 = $1;
     $214 = (($213) + 84|0);
     $215 = (($214) + 64|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($212>>>0)<=($216>>>0);
     if (!($217)) {
      break;
     }
     $218 = $1;
     $219 = (($218) + 84|0);
     $220 = (($219) + 28|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = ($221|0)==(0);
     if ($222) {
      $223 = $j2;
      $224 = $1;
      $225 = (($224) + 35024|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = (($226) + ($223<<2)|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = $pDst;
      $230 = $k;
      $231 = (($230) + 1)|0;
      $k = $231;
      $232 = $pTable;
      $233 = (($232) + ($230<<2)|0);
      $234 = HEAP32[$233>>2]|0;
      (_copyTo($228,$229,$234)|0);
     } else {
      $235 = $1;
      $236 = (($235) + 84|0);
      $237 = (($236) + 32852|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = ($238|0)!=(0);
      if ($239) {
       $320 = $j2;
       $321 = $1;
       $322 = (($321) + 34252|0);
       $323 = HEAP32[$322>>2]|0;
       $324 = Math_imul($320, $323)|0;
       $325 = $l;
       $326 = (($324) + ($325))|0;
       $327 = $1;
       $328 = (($327) + 35024|0);
       $329 = HEAP32[$328>>2]|0;
       $330 = (($329) + ($326<<2)|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $pDst;
       $333 = $k;
       $334 = $pTable;
       $335 = (($334) + ($333<<2)|0);
       $336 = HEAP32[$335>>2]|0;
       (_copyTo($331,$332,$336)|0);
       $337 = $1;
       $338 = (($337) + 34252|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = $k;
       $341 = (($340) + ($339))|0;
       $k = $341;
      } else {
       $240 = $j2;
       $241 = $1;
       $242 = (($241) + 34252|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = Math_imul($240, $243)|0;
       $245 = (($244) + 0)|0;
       $246 = $1;
       $247 = (($246) + 35024|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = (($248) + ($245<<2)|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = $pDst;
       $252 = $k;
       $253 = (($252) + 1)|0;
       $k = $253;
       $254 = $pTable;
       $255 = (($254) + ($252<<2)|0);
       $256 = HEAP32[$255>>2]|0;
       (_copyTo($250,$251,$256)|0);
       $257 = $1;
       $258 = (($257) + 34252|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($259>>>0)>(1);
       if ($260) {
        $261 = $j2;
        $262 = $1;
        $263 = (($262) + 34252|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = Math_imul($261, $264)|0;
        $266 = (($265) + 1)|0;
        $267 = $1;
        $268 = (($267) + 35024|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = (($269) + ($266<<2)|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = $pDst;
        $273 = $k;
        $274 = (($273) + 1)|0;
        $k = $274;
        $275 = $pTable;
        $276 = (($275) + ($273<<2)|0);
        $277 = HEAP32[$276>>2]|0;
        (_copyTo($271,$272,$277)|0);
       }
       $278 = $1;
       $279 = (($278) + 34252|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = ($280>>>0)>(2);
       if ($281) {
        $282 = $j2;
        $283 = $1;
        $284 = (($283) + 34252|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = Math_imul($282, $285)|0;
        $287 = (($286) + 2)|0;
        $288 = $1;
        $289 = (($288) + 35024|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = (($290) + ($287<<2)|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $pDst;
        $294 = $k;
        $295 = (($294) + 1)|0;
        $k = $295;
        $296 = $pTable;
        $297 = (($296) + ($294<<2)|0);
        $298 = HEAP32[$297>>2]|0;
        (_copyTo($292,$293,$298)|0);
       }
       $299 = $1;
       $300 = (($299) + 34252|0);
       $301 = HEAP32[$300>>2]|0;
       $302 = ($301>>>0)>(3);
       if ($302) {
        $303 = $j2;
        $304 = $1;
        $305 = (($304) + 34252|0);
        $306 = HEAP32[$305>>2]|0;
        $307 = Math_imul($303, $306)|0;
        $308 = (($307) + 3)|0;
        $309 = $1;
        $310 = (($309) + 35024|0);
        $311 = HEAP32[$310>>2]|0;
        $312 = (($311) + ($308<<2)|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = $pDst;
        $315 = $k;
        $316 = (($315) + 1)|0;
        $k = $316;
        $317 = $pTable;
        $318 = (($317) + ($315<<2)|0);
        $319 = HEAP32[$318>>2]|0;
        (_copyTo($313,$314,$319)|0);
       }
      }
     }
     $342 = $j2;
     $343 = (($342) + 1)|0;
     $j2 = $343;
    }
    $344 = $i1;
    $345 = (($344) + 1)|0;
    $i1 = $345;
   }
   $346 = $l;
   $347 = (($346) + 1)|0;
   $l = $347;
  }
  $348 = $1;
  $349 = (($348) + 34368|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = $1;
  $352 = (($351) + 34364|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = Math_imul($350, $353)|0;
  $355 = $1;
  $356 = (($355) + 84|0);
  $357 = (($356) + 32|0);
  $358 = HEAP32[$357>>2]|0;
  $359 = Math_imul($354, $358)|0;
  $360 = ($359>>>0)>=(67108864);
  if ($360) {
   $i1 = 0;
   while(1) {
    $361 = $i1;
    $362 = $1;
    $363 = (($362) + 34328|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = ($361>>>0)<($364>>>0);
    if (!($365)) {
     break;
    }
    $366 = $1;
    $367 = (($366) + 35024|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = ($368|0)!=(0|0);
    if ($369) {
     $370 = $i1;
     $371 = $1;
     $372 = (($371) + 35024|0);
     $373 = HEAP32[$372>>2]|0;
     $374 = (($373) + ($370<<2)|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = ($375|0)!=(0|0);
     if ($376) {
      $377 = $1;
      $378 = (($377) + 35024|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = $i1;
      $381 = (($379) + ($380<<2)|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = HEAP32[$382>>2]|0;
      $384 = ($383|0)!=(0|0);
      if ($384) {
       $385 = $1;
       $386 = (($385) + 35024|0);
       $387 = HEAP32[$386>>2]|0;
       $388 = $i1;
       $389 = (($387) + ($388<<2)|0);
       $390 = HEAP32[$389>>2]|0;
       $391 = HEAP32[$390>>2]|0;
       (_fclose(($391|0))|0);
       $392 = $i1;
       $393 = $1;
       $394 = (($393) + 35028|0);
       $395 = HEAP32[$394>>2]|0;
       $396 = (($395) + ($392<<2)|0);
       $397 = HEAP32[$396>>2]|0;
       $398 = (_remove(($397|0))|0);
       $399 = ($398|0)==(-1);
       if ($399) {
        label = 80;
        break;
       }
      }
      $400 = $1;
      $401 = (($400) + 35024|0);
      $402 = HEAP32[$401>>2]|0;
      $403 = $i1;
      $404 = (($402) + ($403<<2)|0);
      $405 = HEAP32[$404>>2]|0;
      $406 = ($405|0)!=(0|0);
      if ($406) {
       $407 = $1;
       $408 = (($407) + 35024|0);
       $409 = HEAP32[$408>>2]|0;
       $410 = $i1;
       $411 = (($409) + ($410<<2)|0);
       $412 = HEAP32[$411>>2]|0;
       _free($412);
      }
     }
    }
    $413 = $1;
    $414 = (($413) + 35028|0);
    $415 = HEAP32[$414>>2]|0;
    $416 = ($415|0)!=(0|0);
    if ($416) {
     $417 = $i1;
     $418 = $1;
     $419 = (($418) + 35028|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = (($420) + ($417<<2)|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ($422|0)!=(0|0);
     if ($423) {
      $424 = $i1;
      $425 = $1;
      $426 = (($425) + 35028|0);
      $427 = HEAP32[$426>>2]|0;
      $428 = (($427) + ($424<<2)|0);
      $429 = HEAP32[$428>>2]|0;
      _free($429);
     }
    }
    $430 = $i1;
    $431 = (($430) + 1)|0;
    $i1 = $431;
   }
   if ((label|0) == 80) {
    $0 = -1;
    $479 = $0;
    STACKTOP = sp;return ($479|0);
   }
   $432 = $1;
   $433 = (($432) + 35028|0);
   $434 = HEAP32[$433>>2]|0;
   $435 = ($434|0)!=(0|0);
   if ($435) {
    $436 = $1;
    $437 = (($436) + 35028|0);
    $438 = HEAP32[$437>>2]|0;
    _free($438);
   }
  } else {
   $i1 = 0;
   while(1) {
    $439 = $i1;
    $440 = $1;
    $441 = (($440) + 34328|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = ($439>>>0)<($442>>>0);
    if (!($443)) {
     break;
    }
    $444 = $1;
    $445 = (($444) + 35024|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = ($446|0)!=(0|0);
    if ($447) {
     $448 = $i1;
     $449 = $1;
     $450 = (($449) + 35024|0);
     $451 = HEAP32[$450>>2]|0;
     $452 = (($451) + ($448<<2)|0);
     $453 = HEAP32[$452>>2]|0;
     $454 = ($453|0)!=(0|0);
     if ($454) {
      $455 = $i1;
      $456 = $1;
      $457 = (($456) + 35024|0);
      $458 = HEAP32[$457>>2]|0;
      $459 = (($458) + ($455<<2)|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = (($460) + 24|0);
      $462 = HEAP32[$461>>2]|0;
      $463 = $1;
      $464 = (($463) + 35024|0);
      $465 = HEAP32[$464>>2]|0;
      $466 = $i1;
      $467 = (($465) + ($466<<2)|0);
      (FUNCTION_TABLE_ii[$462 & 255]($467)|0);
     }
    }
    $468 = $i1;
    $469 = (($468) + 1)|0;
    $i1 = $469;
   }
  }
  $470 = $1;
  $471 = (($470) + 35024|0);
  $472 = HEAP32[$471>>2]|0;
  _free($472);
  $473 = $1;
  $474 = (($473) + 34320|0);
  $475 = HEAP32[$474>>2]|0;
  _free($475);
  $476 = $1;
  $477 = (($476) + 34288|0);
  $478 = HEAP32[$477>>2]|0;
  _free($478);
 }
 $0 = 0;
 $479 = $0;
 STACKTOP = sp;return ($479|0);
}
function _WriteImagePlaneHeader($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $pII = 0, $pIO = 0, $pSCP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 4|0);
 $pII = $2;
 $3 = $0;
 $4 = (($3) + 84|0);
 $pSCP = $4;
 $5 = $0;
 $6 = (($5) + 34272|0);
 $7 = HEAP32[$6>>2]|0;
 $pIO = $7;
 $8 = $pIO;
 $9 = $0;
 $10 = (($9) + 34136|0);
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 _putBit16($8,$12,3);
 $13 = $pIO;
 $14 = $0;
 $15 = (($14) + 34136|0);
 $16 = (($15) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 _putBit16($13,$17,1);
 $18 = $pIO;
 $19 = $pSCP;
 $20 = (($19) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 _putBit16($18,$21,4);
 $22 = $0;
 $23 = (($22) + 34136|0);
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 if ((($25|0) == 3) | (($25|0) == 2) | (($25|0) == 1)) {
  $26 = $pIO;
  _putBit16($26,0,4);
  $27 = $pIO;
  _putBit16($27,0,4);
 } else if ((($25|0) == 6)) {
  $28 = $pIO;
  $29 = $0;
  $30 = (($29) + 34136|0);
  $31 = (($30) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) - 1)|0;
  _putBit16($28,$33,4);
  $34 = $pIO;
  _putBit16($34,0,4);
 } else {
 }
 $35 = $pII;
 $36 = (($35) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 switch ($37|0) {
 case 6: case 5:  {
  $43 = $pSCP;
  $44 = (($43) + 32840|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($46|0)==(0);
  if ($47) {
   $48 = $pSCP;
   $49 = (($48) + 32840|0);
   HEAP8[$49>>0] = 10;
  }
  $50 = $pIO;
  $51 = $pSCP;
  $52 = (($51) + 32840|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  _putBit16($50,$54,8);
  break;
 }
 case 3: case 2:  {
  $38 = $pIO;
  $39 = $pSCP;
  $40 = (($39) + 32840|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  _putBit16($38,$42,8);
  break;
 }
 case 7:  {
  $55 = $pSCP;
  $56 = (($55) + 32840|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = ($58|0)==(0);
  if ($59) {
   $60 = $pSCP;
   $61 = (($60) + 32840|0);
   HEAP8[$61>>0] = 13;
  }
  $62 = $pIO;
  $63 = $pSCP;
  $64 = (($63) + 32840|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  _putBit16($62,$66,8);
  $67 = $pIO;
  $68 = $pSCP;
  $69 = (($68) + 32841|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70 << 24 >> 24;
  _putBit16($67,$71,8);
  break;
 }
 default: {
 }
 }
 $72 = $pIO;
 $73 = $0;
 $74 = (($73) + 34136|0);
 $75 = (($74) + 60|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 & 1;
 $78 = ($77|0)==(1);
 $79 = $78 ? 0 : 1;
 _putBit16($72,$79,1);
 $80 = $0;
 $81 = (($80) + 34136|0);
 $82 = (($81) + 60|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 1;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = $0;
  $87 = (($86) + 34316|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $pIO;
  $90 = $0;
  $91 = (($90) + 34136|0);
  $92 = (($91) + 60|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93 >>> 3;
  $95 = $94 & 3;
  $96 = $95&255;
  $97 = $0;
  $98 = (($97) + 34136|0);
  $99 = (($98) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  _writeQuantizer($88,$89,$96,$100,0);
 }
 $101 = $0;
 $102 = (($101) + 84|0);
 $103 = (($102) + 44|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)!=(3);
 if (!($105)) {
  $199 = $pIO;
  _fillToByte($199);
  STACKTOP = sp;return 0;
 }
 $106 = $pIO;
 $107 = $0;
 $108 = (($107) + 34136|0);
 $109 = (($108) + 60|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 512;
 $112 = ($111|0)==(0);
 $113 = $112 ? 1 : 0;
 _putBit16($106,$113,1);
 $114 = $0;
 $115 = (($114) + 34136|0);
 $116 = (($115) + 60|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $117 & 512;
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $pIO;
  $121 = $0;
  $122 = (($121) + 34136|0);
  $123 = (($122) + 60|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $124 & 2;
  $126 = ($125|0)==(2);
  $127 = $126 ? 0 : 1;
  _putBit16($120,$127,1);
  $128 = $0;
  $129 = (($128) + 34136|0);
  $130 = (($129) + 60|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $131 & 2;
  $133 = ($132|0)==(0);
  if ($133) {
   $134 = $0;
   $135 = (($134) + 34316|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($136) + 64|0);
   $138 = $pIO;
   $139 = $0;
   $140 = (($139) + 34136|0);
   $141 = (($140) + 60|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $142 >>> 5;
   $144 = $143 & 3;
   $145 = $144&255;
   $146 = $0;
   $147 = (($146) + 34136|0);
   $148 = (($147) + 36|0);
   $149 = HEAP32[$148>>2]|0;
   _writeQuantizer($137,$138,$145,$149,0);
  }
 }
 $150 = $0;
 $151 = (($150) + 84|0);
 $152 = (($151) + 44|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = ($153|0)!=(2);
 if ($154) {
  $155 = $pIO;
  $156 = $0;
  $157 = (($156) + 34136|0);
  $158 = (($157) + 60|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = $159 & 1024;
  $161 = ($160|0)==(0);
  $162 = $161 ? 1 : 0;
  _putBit16($155,$162,1);
  $163 = $0;
  $164 = (($163) + 34136|0);
  $165 = (($164) + 60|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 & 1024;
  $168 = ($167|0)!=(0);
  if ($168) {
   $169 = $pIO;
   $170 = $0;
   $171 = (($170) + 34136|0);
   $172 = (($171) + 60|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173 & 4;
   $175 = ($174|0)==(4);
   $176 = $175 ? 0 : 1;
   _putBit16($169,$176,1);
   $177 = $0;
   $178 = (($177) + 34136|0);
   $179 = (($178) + 60|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & 4;
   $182 = ($181|0)==(0);
   if ($182) {
    $183 = $0;
    $184 = (($183) + 34316|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (($185) + 128|0);
    $187 = $pIO;
    $188 = $0;
    $189 = (($188) + 34136|0);
    $190 = (($189) + 60|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $191 >>> 7;
    $193 = $192 & 3;
    $194 = $193&255;
    $195 = $0;
    $196 = (($195) + 34136|0);
    $197 = (($196) + 36|0);
    $198 = HEAP32[$197>>2]|0;
    _writeQuantizer($186,$187,$194,$198,0);
   }
  }
 }
 $199 = $pIO;
 _fillToByte($199);
 STACKTOP = sp;return 0;
}
function _WriteWMIHeader($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bAbbreviatedHeader = 0, $bInscribed = 0, $i = 0, $pCoreParam = 0, $pII = 0, $pIO = 0, $pSCP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 4|0);
 $pII = $2;
 $3 = $0;
 $4 = (($3) + 84|0);
 $pSCP = $4;
 $5 = $0;
 $6 = (($5) + 34136|0);
 $pCoreParam = $6;
 $7 = $0;
 $8 = (($7) + 34272|0);
 $9 = HEAP32[$8>>2]|0;
 $pIO = $9;
 $bInscribed = 0;
 $10 = $pII;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 15)|0;
 $13 = (($12>>>0) / 16)&-1;
 $14 = ($13>>>0)>(255);
 if ($14) {
  $22 = 1;
 } else {
  $15 = $pII;
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 15)|0;
  $19 = (($18>>>0) / 16)&-1;
  $20 = ($19>>>0)>(255);
  $22 = $20;
 }
 $21 = $22 ? 0 : 1;
 $bAbbreviatedHeader = $21;
 $23 = $pCoreParam;
 $24 = (($23) + 56|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = $pCoreParam;
  $28 = (($27) + 48|0);
  HEAP32[$28>>2] = 0;
  $29 = $pCoreParam;
  $30 = (($29) + 52|0);
  HEAP32[$30>>2] = 0;
  $31 = $pCoreParam;
  $32 = (($31) + 44|0);
  HEAP32[$32>>2] = 0;
  $33 = $pCoreParam;
  $34 = (($33) + 40|0);
  HEAP32[$34>>2] = 0;
 }
 $35 = $pCoreParam;
 $36 = (($35) + 40|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0);
 if ($38) {
  $52 = 1;
 } else {
  $39 = $pCoreParam;
  $40 = (($39) + 44|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $52 = 1;
  } else {
   $43 = $pCoreParam;
   $44 = (($43) + 48|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)!=(0);
   if ($46) {
    $52 = 1;
   } else {
    $47 = $pCoreParam;
    $48 = (($47) + 52|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(0);
    $52 = $50;
   }
  }
 }
 $51 = $52&1;
 $bInscribed = $51;
 $i = 0;
 while(1) {
  $53 = $i;
  $54 = ($53>>>0)<(8);
  if (!($54)) {
   break;
  }
  $55 = $0;
  $56 = (($55) + 34272|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
  $60 = (14560 + ($58)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61 << 24 >> 24;
  _putBit16($57,$62,8);
 }
 $63 = $pIO;
 _putBit16($63,1,4);
 $64 = $0;
 $65 = (($64) + 84|0);
 $66 = (($65) + 32848|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $pIO;
  _putBit16($69,9,4);
 } else {
  $70 = $pIO;
  _putBit16($70,1,4);
 }
 $71 = $pIO;
 $72 = $pSCP;
 $73 = (($72) + 64|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0);
 if ($75) {
  $81 = 1;
 } else {
  $76 = $pSCP;
  $77 = (($76) + 16452|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)!=(0);
  $81 = $79;
 }
 $80 = $81 ? 1 : 0;
 _putBit16($71,$80,1);
 $82 = $pIO;
 $83 = $pSCP;
 $84 = (($83) + 28|0);
 $85 = HEAP32[$84>>2]|0;
 _putBit16($82,$85,1);
 $86 = $pIO;
 $87 = $pII;
 $88 = (($87) + 64|0);
 $89 = HEAP32[$88>>2]|0;
 _putBit16($86,$89,3);
 $90 = $pIO;
 $91 = $0;
 $92 = (($91) + 34136|0);
 $93 = (($92) + 24|0);
 $94 = HEAP32[$93>>2]|0;
 _putBit16($90,$94,1);
 $95 = $pIO;
 $96 = $pSCP;
 $97 = (($96) + 24|0);
 $98 = HEAP32[$97>>2]|0;
 _putBit16($95,$98,2);
 $99 = $pIO;
 $100 = $bAbbreviatedHeader;
 _putBit16($99,$100,1);
 $101 = $pIO;
 _putBit16($101,1,1);
 $102 = $pIO;
 $103 = $bInscribed;
 _putBit16($102,$103,1);
 $104 = $pIO;
 $105 = $0;
 $106 = (($105) + 34136|0);
 $107 = (($106) + 28|0);
 $108 = HEAP32[$107>>2]|0;
 _putBit16($104,$108,1);
 $109 = $pIO;
 _putBit16($109,0,1);
 $110 = $pIO;
 _putBit16($110,0,2);
 $111 = $pIO;
 $112 = $0;
 $113 = (($112) + 34136|0);
 $114 = (($113) + 16|0);
 $115 = HEAP32[$114>>2]|0;
 _putBit16($111,$115,1);
 $116 = $pIO;
 $117 = $pII;
 $118 = (($117) + 8|0);
 $119 = HEAP32[$118>>2]|0;
 _putBit16($116,$119,4);
 $120 = $pII;
 $121 = (($120) + 12|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (0)==($122|0);
 if ($123) {
  $124 = $pSCP;
  $125 = (($124) + 32844|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($126|0)!=(0);
  if ($127) {
   $128 = $pIO;
   _putBit16($128,15,4);
  } else {
   label = 21;
  }
 } else {
  label = 21;
 }
 if ((label|0) == 21) {
  $129 = $pIO;
  $130 = $pII;
  $131 = (($130) + 12|0);
  $132 = HEAP32[$131>>2]|0;
  _putBit16($129,$132,4);
 }
 $133 = $pIO;
 $134 = $pII;
 $135 = HEAP32[$134>>2]|0;
 $136 = (($135) - 1)|0;
 $137 = $bAbbreviatedHeader;
 $138 = ($137|0)!=(0);
 $139 = $138 ? 16 : 32;
 _putBit32($133,$136,$139);
 $140 = $pIO;
 $141 = $pII;
 $142 = (($141) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (($143) - 1)|0;
 $145 = $bAbbreviatedHeader;
 $146 = ($145|0)!=(0);
 $147 = $146 ? 16 : 32;
 _putBit32($140,$144,$147);
 $148 = $pSCP;
 $149 = (($148) + 64|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150|0)!=(0);
 if ($151) {
  label = 24;
 } else {
  $152 = $pSCP;
  $153 = (($152) + 16452|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($154|0)!=(0);
  if ($155) {
   label = 24;
  }
 }
 if ((label|0) == 24) {
  $156 = $pIO;
  $157 = $pSCP;
  $158 = (($157) + 64|0);
  $159 = HEAP32[$158>>2]|0;
  _putBit16($156,$159,12);
  $160 = $pIO;
  $161 = $pSCP;
  $162 = (($161) + 16452|0);
  $163 = HEAP32[$162>>2]|0;
  _putBit16($160,$163,12);
 }
 $i = 0;
 while(1) {
  $164 = $i;
  $165 = $pSCP;
  $166 = (($165) + 64|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($164>>>0)<($167>>>0);
  if (!($168)) {
   break;
  }
  $169 = $pIO;
  $170 = $i;
  $171 = (($170) + 1)|0;
  $172 = $pSCP;
  $173 = (($172) + 68|0);
  $174 = (($173) + ($171<<2)|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $i;
  $177 = $pSCP;
  $178 = (($177) + 68|0);
  $179 = (($178) + ($176<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($175) - ($180))|0;
  $182 = $bAbbreviatedHeader;
  $183 = ($182|0)!=(0);
  $184 = $183 ? 8 : 16;
  _putBit16($169,$181,$184);
  $185 = $i;
  $186 = (($185) + 1)|0;
  $i = $186;
 }
 $i = 0;
 while(1) {
  $187 = $i;
  $188 = $pSCP;
  $189 = (($188) + 16452|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = ($187>>>0)<($190>>>0);
  if (!($191)) {
   break;
  }
  $192 = $pIO;
  $193 = $i;
  $194 = (($193) + 1)|0;
  $195 = $pSCP;
  $196 = (($195) + 16456|0);
  $197 = (($196) + ($194<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $i;
  $200 = $pSCP;
  $201 = (($200) + 16456|0);
  $202 = (($201) + ($199<<2)|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($198) - ($203))|0;
  $205 = $bAbbreviatedHeader;
  $206 = ($205|0)!=(0);
  $207 = $206 ? 8 : 16;
  _putBit16($192,$204,$207);
  $208 = $i;
  $209 = (($208) + 1)|0;
  $i = $209;
 }
 $210 = $bInscribed;
 $211 = ($210|0)!=(0);
 if (!($211)) {
  $228 = $pIO;
  _fillToByte($228);
  $229 = $0;
  (_WriteImagePlaneHeader($229)|0);
  STACKTOP = sp;return 0;
 }
 $212 = $pIO;
 $213 = $pCoreParam;
 $214 = (($213) + 40|0);
 $215 = HEAP32[$214>>2]|0;
 _putBit16($212,$215,6);
 $216 = $pIO;
 $217 = $pCoreParam;
 $218 = (($217) + 44|0);
 $219 = HEAP32[$218>>2]|0;
 _putBit16($216,$219,6);
 $220 = $pIO;
 $221 = $pCoreParam;
 $222 = (($221) + 48|0);
 $223 = HEAP32[$222>>2]|0;
 _putBit16($220,$223,6);
 $224 = $pIO;
 $225 = $pCoreParam;
 $226 = (($225) + 52|0);
 $227 = HEAP32[$226>>2]|0;
 _putBit16($224,$227,6);
 $228 = $pIO;
 _fillToByte($228);
 $229 = $0;
 (_WriteImagePlaneHeader($229)|0);
 STACKTOP = sp;return 0;
}
function _StrEncInit($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b32bit = 0, $cSize = 0, $cf = 0, $cfE = 0, $i = 0, $iQPIndexU = 0, $iQPIndexUHP = 0;
 var $iQPIndexULP = 0, $iQPIndexV = 0, $iQPIndexVHP = 0, $iQPIndexVLP = 0, $iQPIndexY = 0, $iQPIndexYHP = 0, $iQPIndexYLP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 34136|0);
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $cf = $5;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $cfE = $9;
 $iQPIndexY = 0;
 $iQPIndexYLP = 0;
 $iQPIndexYHP = 0;
 $iQPIndexU = 0;
 $iQPIndexULP = 0;
 $iQPIndexUHP = 0;
 $iQPIndexV = 0;
 $iQPIndexVLP = 0;
 $iQPIndexVHP = 0;
 $b32bit = 1;
 $10 = $cfE;
 $11 = ($10|0)==(7);
 if ($11) {
  label = 5;
 } else {
  $12 = $cfE;
  $13 = ($12|0)==(3);
  if ($13) {
   label = 5;
  } else {
   $14 = $cfE;
   $15 = ($14|0)==(4);
   if ($15) {
    label = 5;
   } else {
    $16 = $cfE;
    $17 = ($16|0)==(8);
    if ($17) {
     label = 5;
    } else {
     label = 7;
    }
   }
  }
 }
 if ((label|0) == 5) {
  $18 = $cf;
  $19 = ($18|0)==(2);
  if ($19) {
   label = 9;
  } else {
   $20 = $cf;
   $21 = ($20|0)==(1);
   if ($21) {
    label = 9;
   } else {
    label = 7;
   }
  }
 }
 if ((label|0) == 7) {
  $22 = $cfE;
  $23 = ($22|0)==(2);
  if ($23) {
   $24 = $cf;
   $25 = ($24|0)==(1);
   if ($25) {
    label = 9;
   } else {
    $33 = 0;
   }
  } else {
   $33 = 0;
  }
 }
 if ((label|0) == 9) {
  $26 = $1;
  $27 = (($26) + 84|0);
  $28 = (($27) + 32856|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0);
  $31 = $30 ^ 1;
  $33 = $31;
 }
 $32 = $33&1;
 $34 = $1;
 $35 = (($34) + 34264|0);
 HEAP32[$35>>2] = $32;
 $36 = $1;
 $37 = (($36) + 34264|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0);
 do {
  if ($39) {
   $40 = $cfE;
   $41 = ($40|0)==(2);
   $42 = $41 ? 128 : 256;
   $43 = $cf;
   $44 = ($43|0)==(1);
   $45 = $44 ? 32 : 0;
   $46 = (($42) + ($45))|0;
   $47 = $1;
   $48 = (($47) + 34364|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = Math_imul($46, $49)|0;
   $51 = (($50) + 256)|0;
   $cSize = $51;
   $52 = $b32bit;
   $53 = ($52|0)!=(0);
   do {
    if ($53) {
     $54 = $1;
     $55 = (($54) + 34364|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 >>> 16;
     $58 = $cfE;
     $59 = ($58|0)==(2);
     $60 = $59 ? 128 : 256;
     $61 = $cf;
     $62 = ($61|0)==(1);
     $63 = $62 ? 32 : 0;
     $64 = (($60) + ($63))|0;
     $65 = Math_imul($57, $64)|0;
     $66 = $65 & -65536;
     $67 = ($66|0)!=(0);
     if ($67) {
      $0 = -1;
      $727 = $0;
      STACKTOP = sp;return ($727|0);
     }
     $68 = $cSize;
     $69 = ($68>>>0)>=(1073741823);
     if (!($69)) {
      break;
     }
     $0 = -1;
     $727 = $0;
     STACKTOP = sp;return ($727|0);
    }
   } while(0);
   $70 = $cSize;
   $71 = $70<<2;
   $72 = (_malloc($71)|0);
   $73 = $1;
   $74 = (($73) + 34884|0);
   HEAP32[$74>>2] = $72;
   $75 = $cSize;
   $76 = $75<<2;
   $77 = (_malloc($76)|0);
   $78 = $1;
   $79 = (($78) + 34888|0);
   HEAP32[$79>>2] = $77;
   $80 = $1;
   $81 = (($80) + 34884|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(0|0);
   if (!($83)) {
    $84 = $1;
    $85 = (($84) + 34888|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==(0|0);
    if (!($87)) {
     break;
    }
   }
   $0 = -1;
   $727 = $0;
   STACKTOP = sp;return ($727|0);
  }
 } while(0);
 $88 = $1;
 $89 = (($88) + 34292|0);
 HEAP32[$89>>2] = 0;
 $90 = $1;
 $91 = (($90) + 34296|0);
 HEAP32[$91>>2] = 0;
 $92 = $1;
 $93 = (_allocateTileInfo($92)|0);
 $94 = ($93|0)!=(0);
 if ($94) {
  $0 = -1;
  $727 = $0;
  STACKTOP = sp;return ($727|0);
 }
 $95 = $1;
 $96 = (($95) + 34136|0);
 $97 = (($96) + 56|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0);
 if ($99) {
  $100 = $1;
  $101 = (($100) + 34136|0);
  $102 = (($101) + 60|0);
  HEAP32[$102>>2] = 336;
  $103 = $1;
  $104 = (($103) + 34136|0);
  $105 = (($104) + 60|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $106 & 7;
  $108 = ($107|0)==(0);
  if ($108) {
   $109 = $1;
   $110 = (($109) + 84|0);
   $111 = (($110) + 4|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = ($113|0)<=(1);
   $115 = $114&1;
   $116 = (1)==($115|0);
   if ($116) {
    $117 = $1;
    $118 = (($117) + 84|0);
    $119 = (($118) + 44|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($120|0)==(0);
    if ($121) {
     $122 = $1;
     $123 = (($122) + 34264|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ($124|0)==(0);
     if ($125) {
      $133 = 0;
     } else {
      label = 28;
     }
    } else {
     label = 28;
    }
   } else {
    label = 28;
   }
  } else {
   label = 28;
  }
  if ((label|0) == 28) {
   $126 = $1;
   $127 = (($126) + 84|0);
   $128 = (($127) + 32860|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)!=(0);
   $131 = $130 ^ 1;
   $133 = $131;
  }
  $132 = $133&1;
  $134 = $1;
  $135 = (($134) + 34136|0);
  $136 = (($135) + 20|0);
  HEAP32[$136>>2] = $132;
  $137 = $1;
  $138 = (($137) + 4|0);
  $139 = (($138) + 12|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (5)==($140|0);
  if ($141) {
   label = 32;
  } else {
   $142 = $1;
   $143 = (($142) + 4|0);
   $144 = (($143) + 12|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = (6)==($145|0);
   if ($146) {
    label = 32;
   } else {
    $147 = $1;
    $148 = (($147) + 4|0);
    $149 = (($148) + 12|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (7)==($150|0);
    if ($151) {
     label = 32;
    }
   }
  }
  if ((label|0) == 32) {
   $152 = $1;
   $153 = (($152) + 34136|0);
   $154 = (($153) + 20|0);
   HEAP32[$154>>2] = 0;
  }
  $155 = $1;
  $156 = (($155) + 34136|0);
  $157 = (($156) + 60|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $158 | 1536;
  HEAP32[$157>>2] = $159;
  $160 = $1;
  $161 = (($160) + 34136|0);
  $162 = (($161) + 16|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($163|0)!=(0);
  if ($164) {
   $165 = $1;
   $166 = (($165) + 34136|0);
   $167 = (($166) + 36|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)==(1);
   if ($169) {
    $170 = $1;
    $171 = (($170) + 84|0);
    $172 = (($171) + 13|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $181 = $174;
   } else {
    label = 36;
   }
  } else {
   label = 36;
  }
  if ((label|0) == 36) {
   $175 = $1;
   $176 = (($175) + 84|0);
   $177 = (($176) + 4|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $181 = $179;
  }
  $180 = $181&65535;
  $iQPIndexY = $180;
  $182 = $1;
  $183 = (($182) + 84|0);
  $184 = (($183) + 7|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = $185&255;
  $187 = ($186|0)!=(0);
  if ($187) {
   $188 = $1;
   $189 = (($188) + 84|0);
   $190 = (($189) + 7|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $196 = $192;
  } else {
   $193 = $iQPIndexY;
   $194 = $193&65535;
   $196 = $194;
  }
  $195 = $196&65535;
  $iQPIndexU = $195;
  $197 = $1;
  $198 = (($197) + 84|0);
  $199 = (($198) + 10|0);
  $200 = HEAP8[$199>>0]|0;
  $201 = $200&255;
  $202 = ($201|0)!=(0);
  if ($202) {
   $203 = $1;
   $204 = (($203) + 84|0);
   $205 = (($204) + 10|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $206&255;
   $211 = $207;
  } else {
   $208 = $iQPIndexY;
   $209 = $208&65535;
   $211 = $209;
  }
  $210 = $211&65535;
  $iQPIndexV = $210;
  $212 = $1;
  $213 = (($212) + 34136|0);
  $214 = (($213) + 16|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ($215|0)!=(0);
  if ($216) {
   $217 = $1;
   $218 = (($217) + 34136|0);
   $219 = (($218) + 36|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ($220|0)==(1);
   if ($221) {
    $222 = $1;
    $223 = (($222) + 84|0);
    $224 = (($223) + 13|0);
    $225 = HEAP8[$224>>0]|0;
    $226 = $225&255;
    $244 = $226;
   } else {
    label = 46;
   }
  } else {
   label = 46;
  }
  if ((label|0) == 46) {
   $227 = $1;
   $228 = (($227) + 84|0);
   $229 = (($228) + 5|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = ($231|0)==(0);
   if ($232) {
    $233 = $1;
    $234 = (($233) + 84|0);
    $235 = (($234) + 4|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $728 = $237;
   } else {
    $238 = $1;
    $239 = (($238) + 84|0);
    $240 = (($239) + 5|0);
    $241 = HEAP8[$240>>0]|0;
    $242 = $241&255;
    $728 = $242;
   }
   $244 = $728;
  }
  $243 = $244&65535;
  $iQPIndexYLP = $243;
  $245 = $1;
  $246 = (($245) + 34136|0);
  $247 = (($246) + 16|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = ($248|0)!=(0);
  if ($249) {
   $250 = $1;
   $251 = (($250) + 34136|0);
   $252 = (($251) + 36|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = ($253|0)==(1);
   if ($254) {
    $255 = $1;
    $256 = (($255) + 84|0);
    $257 = (($256) + 13|0);
    $258 = HEAP8[$257>>0]|0;
    $259 = $258&255;
    $277 = $259;
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
  if ((label|0) == 53) {
   $260 = $1;
   $261 = (($260) + 84|0);
   $262 = (($261) + 6|0);
   $263 = HEAP8[$262>>0]|0;
   $264 = $263&255;
   $265 = ($264|0)==(0);
   if ($265) {
    $266 = $1;
    $267 = (($266) + 84|0);
    $268 = (($267) + 4|0);
    $269 = HEAP8[$268>>0]|0;
    $270 = $269&255;
    $729 = $270;
   } else {
    $271 = $1;
    $272 = (($271) + 84|0);
    $273 = (($272) + 6|0);
    $274 = HEAP8[$273>>0]|0;
    $275 = $274&255;
    $729 = $275;
   }
   $277 = $729;
  }
  $276 = $277&65535;
  $iQPIndexYHP = $276;
  $278 = $1;
  $279 = (($278) + 84|0);
  $280 = (($279) + 8|0);
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&255;
  $283 = ($282|0)!=(0);
  if ($283) {
   $284 = $1;
   $285 = (($284) + 84|0);
   $286 = (($285) + 8|0);
   $287 = HEAP8[$286>>0]|0;
   $288 = $287&255;
   $292 = $288;
  } else {
   $289 = $iQPIndexU;
   $290 = $289&65535;
   $292 = $290;
  }
  $291 = $292&65535;
  $iQPIndexULP = $291;
  $293 = $1;
  $294 = (($293) + 84|0);
  $295 = (($294) + 11|0);
  $296 = HEAP8[$295>>0]|0;
  $297 = $296&255;
  $298 = ($297|0)!=(0);
  if ($298) {
   $299 = $1;
   $300 = (($299) + 84|0);
   $301 = (($300) + 11|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $302&255;
   $307 = $303;
  } else {
   $304 = $iQPIndexV;
   $305 = $304&65535;
   $307 = $305;
  }
  $306 = $307&65535;
  $iQPIndexVLP = $306;
  $308 = $1;
  $309 = (($308) + 84|0);
  $310 = (($309) + 9|0);
  $311 = HEAP8[$310>>0]|0;
  $312 = $311&255;
  $313 = ($312|0)!=(0);
  if ($313) {
   $314 = $1;
   $315 = (($314) + 84|0);
   $316 = (($315) + 9|0);
   $317 = HEAP8[$316>>0]|0;
   $318 = $317&255;
   $322 = $318;
  } else {
   $319 = $iQPIndexU;
   $320 = $319&65535;
   $322 = $320;
  }
  $321 = $322&65535;
  $iQPIndexUHP = $321;
  $323 = $1;
  $324 = (($323) + 84|0);
  $325 = (($324) + 12|0);
  $326 = HEAP8[$325>>0]|0;
  $327 = $326&255;
  $328 = ($327|0)!=(0);
  if ($328) {
   $329 = $1;
   $330 = (($329) + 84|0);
   $331 = (($330) + 12|0);
   $332 = HEAP8[$331>>0]|0;
   $333 = $332&255;
   $337 = $333;
  } else {
   $334 = $iQPIndexV;
   $335 = $334&65535;
   $337 = $335;
  }
  $336 = $337&65535;
  $iQPIndexVHP = $336;
  $338 = $iQPIndexY;
  $339 = $338&65535;
  $340 = ($339|0)<(2);
  if ($340) {
   $iQPIndexY = 0;
  }
  $341 = $iQPIndexYLP;
  $342 = $341&65535;
  $343 = ($342|0)<(2);
  if ($343) {
   $iQPIndexYLP = 0;
  }
  $344 = $iQPIndexYHP;
  $345 = $344&65535;
  $346 = ($345|0)<(2);
  if ($346) {
   $iQPIndexYHP = 0;
  }
  $347 = $iQPIndexU;
  $348 = $347&65535;
  $349 = ($348|0)<(2);
  if ($349) {
   $iQPIndexU = 0;
  }
  $350 = $iQPIndexULP;
  $351 = $350&65535;
  $352 = ($351|0)<(2);
  if ($352) {
   $iQPIndexULP = 0;
  }
  $353 = $iQPIndexUHP;
  $354 = $353&65535;
  $355 = ($354|0)<(2);
  if ($355) {
   $iQPIndexUHP = 0;
  }
  $356 = $iQPIndexV;
  $357 = $356&65535;
  $358 = ($357|0)<(2);
  if ($358) {
   $iQPIndexV = 0;
  }
  $359 = $iQPIndexVLP;
  $360 = $359&65535;
  $361 = ($360|0)<(2);
  if ($361) {
   $iQPIndexVLP = 0;
  }
  $362 = $iQPIndexVHP;
  $363 = $362&65535;
  $364 = ($363|0)<(2);
  if ($364) {
   $iQPIndexVHP = 0;
  }
 }
 $365 = $1;
 $366 = (($365) + 34136|0);
 $367 = (($366) + 60|0);
 $368 = HEAP32[$367>>2]|0;
 $369 = $368 & 1;
 $370 = ($369|0)==(0);
 if ($370) {
  $371 = $1;
  $372 = (($371) + 34316|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = $1;
  $375 = (($374) + 34136|0);
  $376 = (($375) + 36|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = (_allocateQuantizer($373,$377,1)|0);
  $379 = ($378|0)!=(0);
  if ($379) {
   $0 = -1;
   $727 = $0;
   STACKTOP = sp;return ($727|0);
  }
  $380 = $1;
  _setUniformQuantizer($380,0);
  $i = 0;
  while(1) {
   $381 = $i;
   $382 = $1;
   $383 = (($382) + 34136|0);
   $384 = (($383) + 36|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = ($381>>>0)<($385>>>0);
   if (!($386)) {
    break;
   }
   $387 = $1;
   $388 = (($387) + 34136|0);
   $389 = (($388) + 56|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = ($390|0)!=(0);
   if ($391) {
    $392 = $i;
    $393 = $1;
    $394 = (($393) + 34136|0);
    $395 = (($394) + 64|0);
    $396 = (($395) + ($392)|0);
    $397 = HEAP8[$396>>0]|0;
    $398 = $i;
    $399 = $1;
    $400 = (($399) + 34316|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = (($401) + ($398<<2)|0);
    $403 = HEAP32[$402>>2]|0;
    HEAP8[$403>>0] = $397;
   } else {
    $404 = $i;
    $405 = ($404|0)==(0);
    if ($405) {
     $406 = $iQPIndexY;
     $407 = $406&65535;
     $415 = $407;
    } else {
     $408 = $i;
     $409 = ($408|0)==(1);
     if ($409) {
      $410 = $iQPIndexU;
      $411 = $410&65535;
      $730 = $411;
     } else {
      $412 = $iQPIndexV;
      $413 = $412&65535;
      $730 = $413;
     }
     $415 = $730;
    }
    $414 = $415 & 255;
    $416 = $414&255;
    $417 = $i;
    $418 = $1;
    $419 = (($418) + 34136|0);
    $420 = (($419) + 64|0);
    $421 = (($420) + ($417)|0);
    HEAP8[$421>>0] = $416;
    $422 = $i;
    $423 = $1;
    $424 = (($423) + 34316|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = (($425) + ($422<<2)|0);
    $427 = HEAP32[$426>>2]|0;
    HEAP8[$427>>0] = $416;
   }
   $428 = $i;
   $429 = (($428) + 1)|0;
   $i = $429;
  }
  $430 = $1;
  $431 = (($430) + 34316|0);
  $432 = HEAP32[$431>>2]|0;
  $433 = $1;
  $434 = (($433) + 34136|0);
  $435 = (($434) + 60|0);
  $436 = HEAP32[$435>>2]|0;
  $437 = $436 >>> 3;
  $438 = $437 & 3;
  $439 = $438&255;
  $440 = $1;
  $441 = (($440) + 34136|0);
  $442 = (($441) + 36|0);
  $443 = HEAP32[$442>>2]|0;
  $444 = $1;
  $445 = (($444) + 34136|0);
  $446 = (($445) + 20|0);
  $447 = HEAP32[$446>>2]|0;
  _formatQuantizer($432,$439,$443,0,1,$447);
  $i = 0;
  while(1) {
   $448 = $i;
   $449 = $1;
   $450 = (($449) + 34136|0);
   $451 = (($450) + 36|0);
   $452 = HEAP32[$451>>2]|0;
   $453 = ($448>>>0)<($452>>>0);
   if (!($453)) {
    break;
   }
   $454 = $i;
   $455 = $1;
   $456 = (($455) + 34316|0);
   $457 = HEAP32[$456>>2]|0;
   $458 = (($457) + ($454<<2)|0);
   $459 = HEAP32[$458>>2]|0;
   $460 = (($459) + 4|0);
   $461 = HEAP32[$460>>2]|0;
   $462 = $461 >> 1;
   $463 = $i;
   $464 = $1;
   $465 = (($464) + 34316|0);
   $466 = HEAP32[$465>>2]|0;
   $467 = (($466) + ($463<<2)|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = (($468) + 8|0);
   HEAP32[$469>>2] = $462;
   $470 = $i;
   $471 = (($470) + 1)|0;
   $i = $471;
  }
 }
 $472 = $1;
 $473 = (($472) + 84|0);
 $474 = (($473) + 44|0);
 $475 = HEAP32[$474>>2]|0;
 $476 = ($475|0)!=(3);
 if ($476) {
  $477 = $1;
  $478 = (($477) + 34136|0);
  $479 = (($478) + 60|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = $480 & 2;
  $482 = ($481|0)==(0);
  if ($482) {
   $483 = $1;
   $484 = (($483) + 34316|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = (($485) + 64|0);
   $487 = $1;
   $488 = (($487) + 34136|0);
   $489 = (($488) + 36|0);
   $490 = HEAP32[$489>>2]|0;
   $491 = (_allocateQuantizer($486,$490,1)|0);
   $492 = ($491|0)!=(0);
   if ($492) {
    $0 = -1;
    $727 = $0;
    STACKTOP = sp;return ($727|0);
   }
   $493 = $1;
   _setUniformQuantizer($493,1);
   $i = 0;
   while(1) {
    $494 = $i;
    $495 = $1;
    $496 = (($495) + 34136|0);
    $497 = (($496) + 36|0);
    $498 = HEAP32[$497>>2]|0;
    $499 = ($494>>>0)<($498>>>0);
    if (!($499)) {
     break;
    }
    $500 = $1;
    $501 = (($500) + 34136|0);
    $502 = (($501) + 56|0);
    $503 = HEAP32[$502>>2]|0;
    $504 = ($503|0)!=(0);
    if ($504) {
     $505 = $i;
     $506 = $1;
     $507 = (($506) + 34136|0);
     $508 = (($507) + 80|0);
     $509 = (($508) + ($505)|0);
     $510 = HEAP8[$509>>0]|0;
     $511 = $i;
     $512 = $1;
     $513 = (($512) + 34316|0);
     $514 = HEAP32[$513>>2]|0;
     $515 = (($514) + 64|0);
     $516 = (($515) + ($511<<2)|0);
     $517 = HEAP32[$516>>2]|0;
     HEAP8[$517>>0] = $510;
    } else {
     $518 = $i;
     $519 = ($518|0)==(0);
     if ($519) {
      $520 = $iQPIndexYLP;
      $521 = $520&65535;
      $529 = $521;
     } else {
      $522 = $i;
      $523 = ($522|0)==(1);
      if ($523) {
       $524 = $iQPIndexULP;
       $525 = $524&65535;
       $731 = $525;
      } else {
       $526 = $iQPIndexVLP;
       $527 = $526&65535;
       $731 = $527;
      }
      $529 = $731;
     }
     $528 = $529 & 255;
     $530 = $528&255;
     $531 = $i;
     $532 = $1;
     $533 = (($532) + 34136|0);
     $534 = (($533) + 80|0);
     $535 = (($534) + ($531)|0);
     HEAP8[$535>>0] = $530;
     $536 = $i;
     $537 = $1;
     $538 = (($537) + 34316|0);
     $539 = HEAP32[$538>>2]|0;
     $540 = (($539) + 64|0);
     $541 = (($540) + ($536<<2)|0);
     $542 = HEAP32[$541>>2]|0;
     HEAP8[$542>>0] = $530;
    }
    $543 = $i;
    $544 = (($543) + 1)|0;
    $i = $544;
   }
   $545 = $1;
   $546 = (($545) + 34316|0);
   $547 = HEAP32[$546>>2]|0;
   $548 = (($547) + 64|0);
   $549 = $1;
   $550 = (($549) + 34136|0);
   $551 = (($550) + 60|0);
   $552 = HEAP32[$551>>2]|0;
   $553 = $552 >>> 5;
   $554 = $553 & 3;
   $555 = $554&255;
   $556 = $1;
   $557 = (($556) + 34136|0);
   $558 = (($557) + 36|0);
   $559 = HEAP32[$558>>2]|0;
   $560 = $1;
   $561 = (($560) + 34136|0);
   $562 = (($561) + 20|0);
   $563 = HEAP32[$562>>2]|0;
   _formatQuantizer($548,$555,$559,0,1,$563);
  }
  $564 = $1;
  $565 = (($564) + 84|0);
  $566 = (($565) + 44|0);
  $567 = HEAP32[$566>>2]|0;
  $568 = ($567|0)!=(2);
  if ($568) {
   $569 = $1;
   $570 = (($569) + 34136|0);
   $571 = (($570) + 60|0);
   $572 = HEAP32[$571>>2]|0;
   $573 = $572 & 4;
   $574 = ($573|0)==(0);
   if ($574) {
    $575 = $1;
    $576 = (($575) + 34316|0);
    $577 = HEAP32[$576>>2]|0;
    $578 = (($577) + 128|0);
    $579 = $1;
    $580 = (($579) + 34136|0);
    $581 = (($580) + 36|0);
    $582 = HEAP32[$581>>2]|0;
    $583 = (_allocateQuantizer($578,$582,1)|0);
    $584 = ($583|0)!=(0);
    if ($584) {
     $0 = -1;
     $727 = $0;
     STACKTOP = sp;return ($727|0);
    }
    $585 = $1;
    _setUniformQuantizer($585,2);
    $i = 0;
    while(1) {
     $586 = $i;
     $587 = $1;
     $588 = (($587) + 34136|0);
     $589 = (($588) + 36|0);
     $590 = HEAP32[$589>>2]|0;
     $591 = ($586>>>0)<($590>>>0);
     if (!($591)) {
      break;
     }
     $592 = $1;
     $593 = (($592) + 34136|0);
     $594 = (($593) + 56|0);
     $595 = HEAP32[$594>>2]|0;
     $596 = ($595|0)!=(0);
     if ($596) {
      $597 = $i;
      $598 = $1;
      $599 = (($598) + 34136|0);
      $600 = (($599) + 96|0);
      $601 = (($600) + ($597)|0);
      $602 = HEAP8[$601>>0]|0;
      $603 = $i;
      $604 = $1;
      $605 = (($604) + 34316|0);
      $606 = HEAP32[$605>>2]|0;
      $607 = (($606) + 128|0);
      $608 = (($607) + ($603<<2)|0);
      $609 = HEAP32[$608>>2]|0;
      HEAP8[$609>>0] = $602;
     } else {
      $610 = $i;
      $611 = ($610|0)==(0);
      if ($611) {
       $612 = $iQPIndexYHP;
       $613 = $612&65535;
       $621 = $613;
      } else {
       $614 = $i;
       $615 = ($614|0)==(1);
       if ($615) {
        $616 = $iQPIndexUHP;
        $617 = $616&65535;
        $732 = $617;
       } else {
        $618 = $iQPIndexVHP;
        $619 = $618&65535;
        $732 = $619;
       }
       $621 = $732;
      }
      $620 = $621 & 255;
      $622 = $620&255;
      $623 = $i;
      $624 = $1;
      $625 = (($624) + 34136|0);
      $626 = (($625) + 96|0);
      $627 = (($626) + ($623)|0);
      HEAP8[$627>>0] = $622;
      $628 = $i;
      $629 = $1;
      $630 = (($629) + 34316|0);
      $631 = HEAP32[$630>>2]|0;
      $632 = (($631) + 128|0);
      $633 = (($632) + ($628<<2)|0);
      $634 = HEAP32[$633>>2]|0;
      HEAP8[$634>>0] = $622;
     }
     $635 = $i;
     $636 = (($635) + 1)|0;
     $i = $636;
    }
    $637 = $1;
    $638 = (($637) + 34316|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (($639) + 128|0);
    $641 = $1;
    $642 = (($641) + 34136|0);
    $643 = (($642) + 60|0);
    $644 = HEAP32[$643>>2]|0;
    $645 = $644 >>> 7;
    $646 = $645 & 3;
    $647 = $646&255;
    $648 = $1;
    $649 = (($648) + 34136|0);
    $650 = (($649) + 36|0);
    $651 = HEAP32[$650>>2]|0;
    $652 = $1;
    $653 = (($652) + 34136|0);
    $654 = (($653) + 20|0);
    $655 = HEAP32[$654>>2]|0;
    _formatQuantizer($640,$647,$651,0,0,$655);
   }
  }
 }
 $656 = $1;
 $657 = (_allocatePredInfo($656)|0);
 $658 = ($657|0)!=(0);
 if ($658) {
  $0 = -1;
  $727 = $0;
  STACKTOP = sp;return ($727|0);
 }
 $659 = $1;
 $660 = (($659) + 84|0);
 $661 = (($660) + 64|0);
 $662 = HEAP32[$661>>2]|0;
 $663 = ($662>>>0)>=(4096);
 if (!($663)) {
  $664 = $1;
  $665 = $1;
  $666 = (($665) + 84|0);
  $667 = (($666) + 64|0);
  $668 = HEAP32[$667>>2]|0;
  $669 = (($668) + 1)|0;
  $670 = $1;
  $671 = (($670) + 84|0);
  $672 = (($671) + 48|0);
  $673 = HEAP8[$672>>0]|0;
  $674 = $673&255;
  $675 = (_AllocateCodingContextEnc($664,$669,$674)|0);
  $676 = ($675|0)!=(0);
  if (!($676)) {
   $677 = $1;
   $678 = (($677) + 35036|0);
   $679 = HEAP32[$678>>2]|0;
   $680 = ($679|0)!=(0);
   if ($680) {
    $681 = $1;
    $682 = (($681) + 35032|0);
    $683 = HEAP32[$682>>2]|0;
    $684 = (($683) + 34272|0);
    $685 = HEAP32[$684>>2]|0;
    $686 = $1;
    $687 = (($686) + 34272|0);
    HEAP32[$687>>2] = $685;
    $688 = $1;
    $689 = (($688) + 35032|0);
    $690 = HEAP32[$689>>2]|0;
    $691 = (($690) + 34320|0);
    $692 = HEAP32[$691>>2]|0;
    $693 = $1;
    $694 = (($693) + 34320|0);
    HEAP32[$694>>2] = $692;
    $695 = $1;
    $696 = (($695) + 35032|0);
    $697 = HEAP32[$696>>2]|0;
    $698 = (($697) + 34328|0);
    $699 = HEAP32[$698>>2]|0;
    $700 = $1;
    $701 = (($700) + 34328|0);
    HEAP32[$701>>2] = $699;
    $702 = $1;
    $703 = (($702) + 35032|0);
    $704 = HEAP32[$703>>2]|0;
    $705 = (($704) + 34252|0);
    $706 = HEAP32[$705>>2]|0;
    $707 = $1;
    $708 = (($707) + 34252|0);
    HEAP32[$708>>2] = $706;
    $709 = $1;
    $710 = (($709) + 35032|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (($711) + 35024|0);
    $713 = HEAP32[$712>>2]|0;
    $714 = $1;
    $715 = (($714) + 35024|0);
    HEAP32[$715>>2] = $713;
    $716 = $1;
    $717 = (($716) + 35032|0);
    $718 = HEAP32[$717>>2]|0;
    $719 = (($718) + 34288|0);
    $720 = HEAP32[$719>>2]|0;
    $721 = $1;
    $722 = (($721) + 34288|0);
    HEAP32[$722>>2] = $720;
    $723 = $1;
    (_setBitIOPointers($723)|0);
   } else {
    $724 = $1;
    (_StrIOEncInit($724)|0);
    $725 = $1;
    (_setBitIOPointers($725)|0);
    $726 = $1;
    (_WriteWMIHeader($726)|0);
   }
   $0 = 0;
   $727 = $0;
   STACKTOP = sp;return ($727|0);
  }
 }
 $0 = -1;
 $727 = $0;
 STACKTOP = sp;return ($727|0);
}
function _setUniformTiling($pTile,$cNumTile,$cNumMB) {
 $pTile = $pTile|0;
 $cNumTile = $cNumTile|0;
 $cNumMB = $cNumMB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pTile;
 $1 = $cNumTile;
 $2 = $cNumMB;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = (($3) + ($4))|0;
  $6 = (($5) - 1)|0;
  $7 = $1;
  $8 = (($6>>>0) / ($7>>>0))&-1;
  $9 = ($8>>>0)>(65535);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = (($10) + 1)|0;
  $1 = $11;
 }
 $12 = $1;
 $i = $12;
 $13 = $2;
 $j = $13;
 while(1) {
  $14 = $i;
  $15 = ($14>>>0)>(1);
  if (!($15)) {
   break;
  }
  $16 = $j;
  $17 = $i;
  $18 = (($16) + ($17))|0;
  $19 = (($18) - 1)|0;
  $20 = $i;
  $21 = (($19>>>0) / ($20>>>0))&-1;
  $22 = $1;
  $23 = $i;
  $24 = (($22) - ($23))|0;
  $25 = $0;
  $26 = (($25) + ($24<<2)|0);
  HEAP32[$26>>2] = $21;
  $27 = $1;
  $28 = $i;
  $29 = (($27) - ($28))|0;
  $30 = $0;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $j;
  $34 = (($33) - ($32))|0;
  $j = $34;
  $35 = $i;
  $36 = (($35) + -1)|0;
  $i = $36;
 }
 $37 = $1;
 STACKTOP = sp;return ($37|0);
}
function _validateTiling($pTile,$cNumTile,$cNumMB) {
 $pTile = $pTile|0;
 $cNumTile = $cNumTile|0;
 $cNumMB = $cNumMB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $cMBs = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pTile;
 $1 = $cNumTile;
 $2 = $cNumMB;
 $3 = $1;
 $4 = ($3|0)==(0);
 if ($4) {
  $1 = 1;
 }
 $5 = $1;
 $6 = $2;
 $7 = ($5>>>0)>($6>>>0);
 if ($7) {
  $1 = 1;
 }
 $8 = $1;
 $9 = ($8>>>0)>(4096);
 if ($9) {
  $1 = 4096;
 }
 $cMBs = 0;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = (($10) + 1)|0;
  $12 = $1;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $0;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   label = 11;
   break;
  }
  $19 = $i;
  $20 = $0;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22>>>0)>(65535);
  if ($23) {
   label = 11;
   break;
  }
  $28 = $i;
  $29 = $0;
  $30 = (($29) + ($28<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $cMBs;
  $33 = (($32) + ($31))|0;
  $cMBs = $33;
  $34 = $cMBs;
  $35 = $2;
  $36 = ($34>>>0)>=($35>>>0);
  if ($36) {
   label = 13;
   break;
  }
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 if ((label|0) == 11) {
  $24 = $0;
  $25 = $1;
  $26 = $2;
  $27 = (_setUniformTiling($24,$25,$26)|0);
  $1 = $27;
 }
 else if ((label|0) == 13) {
  $37 = $i;
  $38 = (($37) + 1)|0;
  $1 = $38;
 }
 $41 = $2;
 $42 = $cMBs;
 $43 = (($41) - ($42))|0;
 $44 = ($43>>>0)>(65536);
 if ($44) {
  $45 = $0;
  $46 = $1;
  $47 = $2;
  $48 = (_setUniformTiling($45,$46,$47)|0);
  $1 = $48;
 }
 $i = 1;
 while(1) {
  $49 = $i;
  $50 = $1;
  $51 = ($49>>>0)<($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $i;
  $53 = (($52) - 1)|0;
  $54 = $0;
  $55 = (($54) + ($53<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $i;
  $58 = $0;
  $59 = (($58) + ($57<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + ($56))|0;
  HEAP32[$59>>2] = $61;
  $62 = $i;
  $63 = (($62) + 1)|0;
  $i = $63;
 }
 $64 = $1;
 $65 = (($64) - 1)|0;
 $i = $65;
 while(1) {
  $66 = $i;
  $67 = ($66>>>0)>(0);
  if (!($67)) {
   break;
  }
  $68 = $i;
  $69 = (($68) - 1)|0;
  $70 = $0;
  $71 = (($70) + ($69<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $i;
  $74 = $0;
  $75 = (($74) + ($73<<2)|0);
  HEAP32[$75>>2] = $72;
  $76 = $i;
  $77 = (($76) + -1)|0;
  $i = $77;
 }
 $78 = $0;
 HEAP32[$78>>2] = 0;
 $79 = $1;
 STACKTOP = sp;return ($79|0);
}
function _ValidateArgs($pII,$pSCP) {
 $pII = $pII|0;
 $pSCP = $pSCP|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bTooNarrowTile = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0;
 var $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 8|0;
 $vararg_buffer13 = sp + 64|0;
 $vararg_buffer11 = sp + 56|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 40|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp;
 $1 = $pII;
 $2 = $pSCP;
 $bTooNarrowTile = 0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>(268435456);
 if (!($5)) {
  $6 = $1;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8>>>0)>(268435456);
  if (!($9)) {
   $10 = $1;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = $1;
    $14 = (($13) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = $2;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)==(1);
     if ($20) {
      label = 8;
     } else {
      $21 = $2;
      $22 = (($21) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(2);
      if ($24) {
       label = 8;
      }
     }
     if ((label|0) == 8) {
      $25 = $2;
      $26 = (($25) + 24|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(2);
      if ($28) {
       $29 = $1;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + 15)|0;
       $32 = $31 >>> 4;
       $33 = ($32|0)<(2);
       if ($33) {
        (_printf((6552|0),($vararg_buffer1|0))|0);
        $0 = -1;
        $349 = $0;
        STACKTOP = sp;return ($349|0);
       }
      }
     }
     $34 = $2;
     $35 = (($34) + 44|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(4);
     if ($37) {
      label = 13;
     } else {
      $38 = $2;
      $39 = (($38) + 44|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40>>>0)>=(5);
      if ($41) {
       label = 13;
      }
     }
     if ((label|0) == 13) {
      $42 = $2;
      $43 = (($42) + 44|0);
      HEAP32[$43>>2] = 0;
     }
     $44 = $1;
     $45 = (($44) + 12|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)==(8);
     do {
      if ($47) {
       $48 = $1;
       $49 = (($48) + 8|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($50|0)!=(7);
       if (!($51)) {
        $52 = $1;
        $53 = (($52) + 16|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)!=(16);
        if (!($55)) {
         $56 = $1;
         $57 = (($56) + 20|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = ($58|0)!=(0);
         if (!($59)) {
          break;
         }
        }
       }
       (_printf((6648|0),($vararg_buffer3|0))|0);
       $0 = -1;
       $349 = $0;
       STACKTOP = sp;return ($349|0);
      }
     } while(0);
     $60 = $1;
     $61 = (($60) + 12|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)==(10);
     do {
      if ($63) {
       $64 = $1;
       $65 = (($64) + 8|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = ($66|0)!=(7);
       if (!($67)) {
        $68 = $1;
        $69 = (($68) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($70|0)!=(16);
        if (!($71)) {
         $72 = $1;
         $73 = (($72) + 20|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($74|0)!=(0);
         if (!($75)) {
          break;
         }
        }
       }
       (_printf((6680|0),($vararg_buffer5|0))|0);
       $0 = -1;
       $349 = $0;
       STACKTOP = sp;return ($349|0);
      }
     } while(0);
     $76 = $1;
     $77 = (($76) + 12|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)==(9);
     do {
      if ($79) {
       $80 = $1;
       $81 = (($80) + 8|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($82|0)!=(7);
       if (!($83)) {
        $84 = $1;
        $85 = (($84) + 16|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($86|0)!=(32);
        if (!($87)) {
         $88 = $1;
         $89 = (($88) + 20|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = ($90|0)!=(0);
         if (!($91)) {
          break;
         }
        }
       }
       (_printf((6720|0),($vararg_buffer7|0))|0);
       $0 = -1;
       $349 = $0;
       STACKTOP = sp;return ($349|0);
      }
     } while(0);
     $92 = $1;
     $93 = (($92) + 12|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94|0)==(8);
     if ($95) {
      label = 32;
     } else {
      $96 = $1;
      $97 = (($96) + 12|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)==(10);
      if ($99) {
       label = 32;
      } else {
       $100 = $1;
       $101 = (($100) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ($102|0)==(9);
       if ($103) {
        label = 32;
       }
      }
     }
     if ((label|0) == 32) {
      $104 = $2;
      $105 = (($104) + 16|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ($106|0)!=(1);
      if ($107) {
       $108 = $2;
       $109 = (($108) + 16|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($110|0)!=(2);
       if ($111) {
        $112 = $2;
        $113 = (($112) + 16|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = ($114|0)!=(0);
        if ($115) {
         $116 = $2;
         $117 = (($116) + 16|0);
         HEAP32[$117>>2] = 3;
        }
       }
      }
     }
     $118 = $1;
     $119 = (($118) + 12|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (0)==($120|0);
     do {
      if ($121) {
       $122 = $1;
       $123 = (($122) + 8|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ($124|0)!=(0);
       if (!($125)) {
        $126 = $2;
        $127 = (($126) + 16|0);
        HEAP32[$127>>2] = 0;
        break;
       }
       (_printf((6760|0),($vararg_buffer9|0))|0);
       $0 = -1;
       $349 = $0;
       STACKTOP = sp;return ($349|0);
      }
     } while(0);
     $128 = $2;
     $129 = (($128) + 20|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)!=(1);
     if ($131) {
      $132 = $2;
      $133 = (($132) + 20|0);
      HEAP32[$133>>2] = 1;
     }
     $134 = $2;
     $135 = (($134) + 36|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $138 = ($137|0)>(1);
     do {
      if ($138) {
       $139 = $1;
       $140 = (($139) + 8|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(1);
       if (!($142)) {
        $143 = $1;
        $144 = (($143) + 8|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = ($145|0)==(2);
        if (!($146)) {
         $147 = $1;
         $148 = (($147) + 12|0);
         $149 = HEAP32[$148>>2]|0;
         $150 = ($149|0)==(8);
         if (!($150)) {
          $151 = $1;
          $152 = (($151) + 12|0);
          $153 = HEAP32[$152>>2]|0;
          $154 = ($153|0)==(9);
          if (!($154)) {
           $155 = $1;
           $156 = (($155) + 12|0);
           $157 = HEAP32[$156>>2]|0;
           $158 = ($157|0)==(0);
           if (!($158)) {
            break;
           }
          }
         }
        }
       }
       (_printf((6800|0),($vararg_buffer11|0))|0);
       $0 = -1;
       $349 = $0;
       STACKTOP = sp;return ($349|0);
      }
     } while(0);
     $159 = $2;
     $160 = (($159) + 16|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($161|0)==(1);
     if ($162) {
      label = 51;
     } else {
      $163 = $2;
      $164 = (($163) + 16|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==(2);
      if ($166) {
       label = 51;
      }
     }
     do {
      if ((label|0) == 51) {
       $167 = $1;
       $168 = (($167) + 12|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(4);
       if (!($170)) {
        $171 = $1;
        $172 = (($171) + 12|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(7);
        if (!($174)) {
         $175 = $1;
         $176 = (($175) + 8|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(8);
         if (!($178)) {
          break;
         }
        }
       }
       (_printf((6848|0),($vararg_buffer13|0))|0);
       $0 = -1;
       $349 = $0;
       STACKTOP = sp;return ($349|0);
      }
     } while(0);
     $179 = $2;
     $180 = (($179) + 68|0);
     $181 = $2;
     $182 = (($181) + 64|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (($183) + 1)|0;
     $185 = $1;
     $186 = HEAP32[$185>>2]|0;
     $187 = (($186) + 15)|0;
     $188 = $187 >>> 4;
     $189 = (_validateTiling($180,$184,$188)|0);
     $190 = (($189) - 1)|0;
     $191 = $2;
     $192 = (($191) + 64|0);
     HEAP32[$192>>2] = $190;
     $193 = $2;
     $194 = (($193) + 16456|0);
     $195 = $2;
     $196 = (($195) + 16452|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = (($197) + 1)|0;
     $199 = $1;
     $200 = (($199) + 4|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (($201) + 15)|0;
     $203 = $202 >>> 4;
     $204 = (_validateTiling($194,$198,$203)|0);
     $205 = (($204) - 1)|0;
     $206 = $2;
     $207 = (($206) + 16452|0);
     HEAP32[$207>>2] = $205;
     $208 = $2;
     $209 = (($208) + 32848|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)!=(0);
     do {
      if ($211) {
       $212 = $2;
       $213 = (($212) + 16|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($214|0)==(1);
       if (!($215)) {
        $216 = $2;
        $217 = (($216) + 16|0);
        $218 = HEAP32[$217>>2]|0;
        $219 = ($218|0)==(2);
        if (!($219)) {
         break;
        }
       }
       $220 = $2;
       $221 = (($220) + 24|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = ($222|0)==(2);
       if ($223) {
        $i = 1;
        while(1) {
         $224 = $i;
         $225 = $2;
         $226 = (($225) + 16452|0);
         $227 = HEAP32[$226>>2]|0;
         $228 = (($227) + 1)|0;
         $229 = ($224|0)<($228|0);
         if (!($229)) {
          break;
         }
         $230 = $i;
         $231 = $2;
         $232 = (($231) + 16456|0);
         $233 = (($232) + ($230<<2)|0);
         $234 = HEAP32[$233>>2]|0;
         $235 = $i;
         $236 = (($235) - 1)|0;
         $237 = $2;
         $238 = (($237) + 16456|0);
         $239 = (($238) + ($236<<2)|0);
         $240 = HEAP32[$239>>2]|0;
         $241 = (($234) - ($240))|0;
         $242 = ($241|0)<(2);
         if ($242) {
          label = 62;
          break;
         }
         $243 = $i;
         $244 = (($243) + 1)|0;
         $i = $244;
        }
        if ((label|0) == 62) {
         $bTooNarrowTile = 1;
        }
        $245 = $1;
        $246 = HEAP32[$245>>2]|0;
        $247 = (($246) + 15)|0;
        $248 = $247 >>> 4;
        $249 = $2;
        $250 = (($249) + 16452|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = $2;
        $253 = (($252) + 16456|0);
        $254 = (($253) + ($251<<2)|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = (($248) - ($255))|0;
        $257 = ($256|0)<(2);
        if ($257) {
         $bTooNarrowTile = 1;
        }
       }
      }
     } while(0);
     $258 = $bTooNarrowTile;
     $259 = ($258|0)!=(0);
     if ($259) {
      (_printf((6904|0),($vararg_buffer15|0))|0);
      $0 = -1;
      $349 = $0;
      STACKTOP = sp;return ($349|0);
     }
     $260 = $2;
     $261 = (($260) + 32|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = ($262>>>0)>(16);
     if ($263) {
      $0 = -1;
      $349 = $0;
      STACKTOP = sp;return ($349|0);
     }
     $264 = $1;
     $265 = (($264) + 8|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = ($266|0)==(0);
     if ($267) {
      $268 = $2;
      $269 = (($268) + 16|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = ($270|0)!=(0);
      if ($271) {
       label = 81;
      } else {
       label = 74;
      }
     } else {
      label = 74;
     }
     do {
      if ((label|0) == 74) {
       $272 = $2;
       $273 = (($272) + 16|0);
       $274 = HEAP32[$273>>2]|0;
       $275 = ($274|0)==(2);
       if ($275) {
        $276 = $1;
        $277 = (($276) + 8|0);
        $278 = HEAP32[$277>>2]|0;
        $279 = ($278|0)==(1);
        if ($279) {
         label = 81;
         break;
        }
        $280 = $1;
        $281 = (($280) + 8|0);
        $282 = HEAP32[$281>>2]|0;
        $283 = ($282|0)==(0);
        if ($283) {
         label = 81;
         break;
        }
       }
       $284 = $2;
       $285 = (($284) + 16|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(3);
       if ($287) {
        $288 = $1;
        $289 = (($288) + 8|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = ($290|0)==(2);
        if ($291) {
         label = 81;
         break;
        }
        $292 = $1;
        $293 = (($292) + 8|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($294|0)==(1);
        if ($295) {
         label = 81;
         break;
        }
        $296 = $1;
        $297 = (($296) + 8|0);
        $298 = HEAP32[$297>>2]|0;
        $299 = ($298|0)==(0);
        if ($299) {
         label = 81;
         break;
        }
       }
       $305 = $1;
       $306 = (($305) + 8|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = ($307|0)==(6);
       if ($308) {
        $309 = $2;
        $310 = (($309) + 16|0);
        HEAP32[$310>>2] = 6;
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $300 = $1;
      $301 = (($300) + 8|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = $2;
      $304 = (($303) + 16|0);
      HEAP32[$304>>2] = $302;
     }
     $311 = $1;
     $312 = (($311) + 8|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = (4)==($313|0);
     do {
      if ($314) {
       $315 = $2;
       $316 = (($315) + 16|0);
       $317 = HEAP32[$316>>2]|0;
       $318 = ($317|0)==(6);
       if (!($318)) {
        break;
       }
       $319 = $2;
       $320 = (($319) + 16|0);
       HEAP32[$320>>2] = 4;
      }
     } while(0);
     $321 = $2;
     $322 = (($321) + 16|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = ($323|0)!=(6);
     if ($324) {
      $325 = $2;
      $326 = (($325) + 16|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      if ($328) {
       $329 = $2;
       $330 = (($329) + 32|0);
       HEAP32[$330>>2] = 1;
      } else {
       $331 = $2;
       $332 = (($331) + 16|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = ($333|0)==(4);
       if ($334) {
        $335 = $2;
        $336 = (($335) + 32|0);
        HEAP32[$336>>2] = 4;
       } else {
        $337 = $2;
        $338 = (($337) + 32|0);
        HEAP32[$338>>2] = 3;
       }
      }
     }
     $339 = $2;
     $340 = (($339) + 44|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = ($341>>>0)>=(5);
     if ($342) {
      $343 = $2;
      $344 = (($343) + 44|0);
      HEAP32[$344>>2] = 0;
     }
     $345 = $1;
     $346 = (($345) + 28|0);
     HEAP8[$346>>0] = 0;
     $347 = $1;
     $348 = (($347) + 29|0);
     HEAP8[$348>>0] = 0;
     $0 = 0;
     $349 = $0;
     STACKTOP = sp;return ($349|0);
    }
   }
  }
 }
 (_printf((6520|0),($vararg_buffer|0))|0);
 $0 = -1;
 $349 = $0;
 STACKTOP = sp;return ($349|0);
}
function _ImageStrEncInit($pII,$pSCP,$pctxSC) {
 $pII = $pII|0;
 $pSCP = $pSCP|0;
 $pctxSC = $pctxSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b32bit = 0, $cMacBlock = 0;
 var $cb = 0, $cbChannel = 0, $cbMacBlockChroma = 0, $cbMacBlockStride = 0, $cblkChroma = 0, $err = 0, $i = 0, $pNextSC = 0, $pSC = 0, $pb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pII;
 $2 = $pSCP;
 $3 = $pctxSC;
 $cbChannel = 0;
 $cblkChroma = 0;
 $cbMacBlockStride = 0;
 $cbMacBlockChroma = 0;
 $cMacBlock = 0;
 $pSC = 0;
 $pNextSC = 0;
 $pb = 0;
 $cb = 0;
 $b32bit = 1;
 $4 = $1;
 $5 = $2;
 $6 = (_ValidateArgs($4,$5)|0);
 $7 = ($6|0)!=(0);
 L1: do {
  if ($7) {
  } else {
   $8 = $3;
   HEAP32[$8>>2] = 0;
   $9 = $2;
   $10 = (($9) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (7008 + ($11<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $cbChannel = $13;
   $14 = $2;
   $15 = (($14) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (7016 + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $cblkChroma = $18;
   $19 = $cbChannel;
   $20 = $19<<4;
   $21 = $20<<4;
   $cbMacBlockStride = $21;
   $22 = $cbChannel;
   $23 = $22<<4;
   $24 = $cblkChroma;
   $25 = Math_imul($23, $24)|0;
   $cbMacBlockChroma = $25;
   $26 = $1;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 15)|0;
   $29 = (($28>>>0) / 16)&-1;
   $cMacBlock = $29;
   $cb = 59918;
   $30 = $cbMacBlockStride;
   $31 = $cbMacBlockChroma;
   $32 = $2;
   $33 = (($32) + 32|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) - 1)|0;
   $36 = Math_imul($31, $35)|0;
   $37 = (($30) + ($36))|0;
   $i = $37;
   $38 = $b32bit;
   $39 = ($38|0)!=(0);
   do {
    if ($39) {
     $40 = $cMacBlock;
     $41 = $40 >>> 15;
     $42 = $i;
     $43 = Math_imul($41, $42)|0;
     $44 = $43 & -65536;
     $45 = ($44|0)!=(0);
     if (!($45)) {
      break;
     }
     $0 = -1;
     $237 = $0;
     STACKTOP = sp;return ($237|0);
    }
   } while(0);
   $46 = $cMacBlock;
   $47 = $46<<1;
   $48 = $i;
   $49 = Math_imul($48, $47)|0;
   $i = $49;
   $50 = $i;
   $51 = $cb;
   $52 = (($51) + ($50))|0;
   $cb = $52;
   $53 = $cb;
   $54 = (_malloc($53)|0);
   $pb = $54;
   $55 = $pb;
   $56 = (0|0)==($55|0);
   if ($56) {
    break;
   }
   $57 = $pb;
   $58 = $cb;
   _memset(($57|0),0,($58|0))|0;
   $59 = $pb;
   $pSC = $59;
   $60 = $pb;
   $61 = (($60) + 35176|0);
   $pb = $61;
   $62 = $2;
   $63 = (($62) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $pSC;
   $66 = (($65) + 34136|0);
   $67 = (($66) + 8|0);
   HEAP32[$67>>2] = $64;
   $68 = $2;
   $69 = (($68) + 36|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = ($71|0)==(3);
   $73 = $72&1;
   $74 = $pSC;
   $75 = (($74) + 34136|0);
   $76 = (($75) + 16|0);
   HEAP32[$76>>2] = $73;
   $77 = $2;
   $78 = (($77) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $pSC;
   $81 = (($80) + 34136|0);
   $82 = (($81) + 36|0);
   HEAP32[$82>>2] = $79;
   $83 = $pSC;
   $84 = (($83) + 34136|0);
   $85 = (($84) + 52|0);
   HEAP32[$85>>2] = 0;
   $86 = $pSC;
   $87 = (($86) + 34136|0);
   $88 = (($87) + 44|0);
   HEAP32[$88>>2] = 0;
   $89 = $pSC;
   $90 = (($89) + 34136|0);
   $91 = (($90) + 48|0);
   HEAP32[$91>>2] = 0;
   $92 = $pSC;
   $93 = (($92) + 34136|0);
   $94 = (($93) + 40|0);
   HEAP32[$94>>2] = 0;
   $95 = $cbChannel;
   $96 = $pSC;
   $97 = (($96) + 34372|0);
   HEAP32[$97>>2] = $95;
   $98 = $pSC;
   $99 = (($98) + 34268|0);
   HEAP32[$99>>2] = 0;
   $100 = $pSC;
   $101 = (($100) + 34136|0);
   $102 = (($101) + 56|0);
   HEAP32[$102>>2] = 0;
   $103 = $pSC;
   $104 = $1;
   $105 = $2;
   _InitializeStrEnc($103,$104,$105);
   $106 = $pb;
   $107 = $106;
   $108 = (($107) + 127)|0;
   $109 = $108 & -128;
   $110 = $109;
   $pb = $110;
   $i = 0;
   while(1) {
    $111 = $i;
    $112 = $pSC;
    $113 = (($112) + 34136|0);
    $114 = (($113) + 36|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($111>>>0)<($115>>>0);
    if (!($116)) {
     break;
    }
    $117 = $pb;
    $118 = $i;
    $119 = $pSC;
    $120 = (($119) + 34564|0);
    $121 = (($120) + ($118<<2)|0);
    HEAP32[$121>>2] = $117;
    $122 = $cbMacBlockStride;
    $123 = $pSC;
    $124 = (($123) + 34364|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = Math_imul($122, $125)|0;
    $127 = $pb;
    $128 = (($127) + ($126)|0);
    $pb = $128;
    $129 = $pb;
    $130 = $i;
    $131 = $pSC;
    $132 = (($131) + 34628|0);
    $133 = (($132) + ($130<<2)|0);
    HEAP32[$133>>2] = $129;
    $134 = $cbMacBlockStride;
    $135 = $pSC;
    $136 = (($135) + 34364|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = Math_imul($134, $137)|0;
    $139 = $pb;
    $140 = (($139) + ($138)|0);
    $pb = $140;
    $141 = $cbMacBlockChroma;
    $cbMacBlockStride = $141;
    $142 = $i;
    $143 = (($142) + 1)|0;
    $i = $143;
   }
   $144 = $pb;
   $145 = $144;
   $146 = (($145) + 16383)|0;
   $147 = $146 & -16384;
   $148 = $147;
   $149 = (($148) + 8192|0);
   $pb = $149;
   $150 = $pb;
   $151 = $pSC;
   $152 = (($151) + 34272|0);
   HEAP32[$152>>2] = $150;
   $153 = $pSC;
   $154 = (_StrEncInit($153)|0);
   $err = $154;
   $155 = $err;
   $156 = (0)!=($155|0);
   if ($156) {
    break;
   }
   $157 = $pSC;
   $158 = (($157) + 34136|0);
   $159 = (($158) + 16|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = ($160|0)!=(0);
   do {
    if ($161) {
     $162 = $cbChannel;
     $163 = $162<<4;
     $164 = $163<<4;
     $cbMacBlockStride = $164;
     $165 = $cbMacBlockStride;
     $166 = $cMacBlock;
     $167 = Math_imul($165, $166)|0;
     $168 = $167<<1;
     $169 = (35303 + ($168))|0;
     $cb = $169;
     $170 = $cb;
     $171 = (_malloc($170)|0);
     $pb = $171;
     $172 = $pb;
     $173 = (0|0)==($172|0);
     if ($173) {
      break L1;
     } else {
      $174 = $pb;
      $175 = $cb;
      _memset(($174|0),0,($175|0))|0;
      $176 = $pb;
      $pNextSC = $176;
      $177 = $pb;
      $178 = (($177) + 35176|0);
      $pb = $178;
      $179 = $pNextSC;
      $180 = (($179) + 34136|0);
      $181 = (($180) + 8|0);
      HEAP32[$181>>2] = 0;
      $182 = $pNextSC;
      $183 = (($182) + 34136|0);
      $184 = (($183) + 36|0);
      HEAP32[$184>>2] = 1;
      $185 = $pNextSC;
      $186 = (($185) + 34136|0);
      $187 = (($186) + 16|0);
      HEAP32[$187>>2] = 1;
      $188 = $cbChannel;
      $189 = $pNextSC;
      $190 = (($189) + 34372|0);
      HEAP32[$190>>2] = $188;
      $191 = $pNextSC;
      $192 = $1;
      $193 = $2;
      _InitializeStrEnc($191,$192,$193);
      $194 = $pb;
      $195 = $194;
      $196 = (($195) + 127)|0;
      $197 = $196 & -128;
      $198 = $197;
      $pb = $198;
      $199 = $pb;
      $200 = $pNextSC;
      $201 = (($200) + 34564|0);
      HEAP32[$201>>2] = $199;
      $202 = $cbMacBlockStride;
      $203 = $pNextSC;
      $204 = (($203) + 34364|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = Math_imul($202, $205)|0;
      $207 = $pb;
      $208 = (($207) + ($206)|0);
      $pb = $208;
      $209 = $pb;
      $210 = $pNextSC;
      $211 = (($210) + 34628|0);
      HEAP32[$211>>2] = $209;
      $212 = $cbMacBlockStride;
      $213 = $pNextSC;
      $214 = (($213) + 34364|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = Math_imul($212, $215)|0;
      $217 = $pb;
      $218 = (($217) + ($216)|0);
      $pb = $218;
      $219 = $pSC;
      $220 = (($219) + 34272|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = $pNextSC;
      $223 = (($222) + 34272|0);
      HEAP32[$223>>2] = $221;
      $224 = $pSC;
      $225 = $pNextSC;
      $226 = (($225) + 35032|0);
      HEAP32[$226>>2] = $224;
      $227 = $pNextSC;
      $228 = (($227) + 35036|0);
      HEAP32[$228>>2] = 1;
      $229 = $pNextSC;
      (_StrEncInit($229)|0);
      $230 = $pNextSC;
      (_WriteImagePlaneHeader($230)|0);
      break;
     }
    }
   } while(0);
   $231 = $pNextSC;
   $232 = $pSC;
   $233 = (($232) + 35032|0);
   HEAP32[$233>>2] = $231;
   $234 = $pSC;
   $235 = $3;
   HEAP32[$235>>2] = $234;
   $236 = $pSC;
   (_writeIndexTableNull($236)|0);
   $0 = 0;
   $237 = $0;
   STACKTOP = sp;return ($237|0);
  }
 } while(0);
 $0 = -1;
 $237 = $0;
 STACKTOP = sp;return ($237|0);
}
function _InitializeStrEnc($pSC,$pII,$pSCP) {
 $pSC = $pSC|0;
 $pII = $pII|0;
 $pSCP = $pSCP|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pII;
 $2 = $pSCP;
 $3 = $0;
 HEAP32[$3>>2] = 35176;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = $1;
 dest=$5+0|0; src=$6+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $7 = $0;
 $8 = (($7) + 84|0);
 $9 = $2;
 _memcpy(($8|0),($9|0),32868)|0;
 $10 = $0;
 $11 = (($10) + 84|0);
 $12 = (($11) + 32841|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $0;
  $17 = (($16) + 84|0);
  $18 = (($17) + 32841|0);
  HEAP8[$18>>0] = -124;
 }
 $19 = $0;
 $20 = (($19) + 84|0);
 $21 = (($20) + 32841|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = (($23) + 128)|0;
 $25 = $24&255;
 HEAP8[$21>>0] = $25;
 $26 = $0;
 $27 = (($26) + 34356|0);
 HEAP32[$27>>2] = 0;
 $28 = $0;
 $29 = (($28) + 34360|0);
 HEAP32[$29>>2] = 0;
 $30 = $0;
 $31 = (($30) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 15)|0;
 $34 = (($33>>>0) / 16)&-1;
 $35 = $0;
 $36 = (($35) + 34364|0);
 HEAP32[$36>>2] = $34;
 $37 = $0;
 $38 = (($37) + 4|0);
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 15)|0;
 $42 = (($41>>>0) / 16)&-1;
 $43 = $0;
 $44 = (($43) + 34368|0);
 HEAP32[$44>>2] = $42;
 $45 = $0;
 $46 = (($45) + 34448|0);
 HEAP32[$46>>2] = 90;
 $47 = $0;
 $48 = (($47) + 34460|0);
 HEAP32[$48>>2] = 91;
 $49 = $0;
 $50 = (($49) + 34464|0);
 HEAP32[$50>>2] = 92;
 $51 = $0;
 $52 = (($51) + 34468|0);
 HEAP32[$52>>2] = 92;
 $53 = $0;
 $54 = (($53) + 34472|0);
 HEAP32[$54>>2] = 92;
 $55 = $0;
 $56 = (($55) + 34476|0);
 HEAP32[$56>>2] = 92;
 $57 = $0;
 $58 = (($57) + 34480|0);
 HEAP32[$58>>2] = 92;
 $59 = $0;
 $60 = (($59) + 34484|0);
 HEAP32[$60>>2] = 92;
 $61 = $0;
 $62 = (($61) + 34488|0);
 HEAP32[$62>>2] = 92;
 $63 = $0;
 $64 = (($63) + 34492|0);
 HEAP32[$64>>2] = 92;
 $65 = $0;
 $66 = (($65) + 34496|0);
 HEAP32[$66>>2] = 92;
 $67 = $0;
 $68 = (($67) + 35032|0);
 HEAP32[$68>>2] = 0;
 $69 = $0;
 $70 = (($69) + 35036|0);
 HEAP32[$70>>2] = 0;
 STACKTOP = sp;return;
}
function _ImageStrEncEncode($ctxSC,$pBI) {
 $ctxSC = $ctxSC|0;
 $pBI = $pBI|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $ProcessCenter = 0, $ProcessLeft = 0, $ProcessRight = 0, $pNextSC = 0, $pSC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctxSC;
 $2 = $pBI;
 $3 = $1;
 $pSC = $3;
 $4 = $pSC;
 $5 = (($4) + 35032|0);
 $6 = HEAP32[$5>>2]|0;
 $pNextSC = $6;
 $7 = $pSC;
 $8 = HEAP32[$7>>2]|0;
 $9 = (35176)!=($8|0);
 if ($9) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $10 = $pSC;
 $11 = (($10) + 32952|0);
 $12 = $2;
 ;HEAP32[$11+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$11+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$12+12>>2]|0;HEAP32[$11+16>>2]=HEAP32[$12+16>>2]|0;HEAP32[$11+20>>2]=HEAP32[$12+20>>2]|0;
 $13 = $pSC;
 $14 = (($13) + 34360|0);
 HEAP32[$14>>2] = 0;
 $15 = $pSC;
 _initMRPtr($15);
 $16 = $pNextSC;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $pNextSC;
  $19 = (($18) + 32952|0);
  $20 = $2;
  ;HEAP32[$19+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[$20+12>>2]|0;HEAP32[$19+16>>2]=HEAP32[$20+16>>2]|0;HEAP32[$19+20>>2]=HEAP32[$20+20>>2]|0;
 }
 $21 = $pSC;
 $22 = (($21) + 34356|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (0)==($23|0);
 if ($24) {
  $25 = $pSC;
  $26 = (($25) + 34464|0);
  $27 = HEAP32[$26>>2]|0;
  $ProcessLeft = $27;
  $28 = $pSC;
  $29 = (($28) + 34468|0);
  $30 = HEAP32[$29>>2]|0;
  $ProcessCenter = $30;
  $31 = $pSC;
  $32 = (($31) + 34472|0);
  $33 = HEAP32[$32>>2]|0;
  $ProcessRight = $33;
 } else {
  $34 = $pSC;
  $35 = (($34) + 34476|0);
  $36 = HEAP32[$35>>2]|0;
  $ProcessLeft = $36;
  $37 = $pSC;
  $38 = (($37) + 34480|0);
  $39 = HEAP32[$38>>2]|0;
  $ProcessCenter = $39;
  $40 = $pSC;
  $41 = (($40) + 34484|0);
  $42 = HEAP32[$41>>2]|0;
  $ProcessRight = $42;
 }
 $43 = $pSC;
 $44 = (($43) + 34448|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $pSC;
 $47 = (FUNCTION_TABLE_ii[$45 & 255]($46)|0);
 $48 = ($47|0)!=(0);
 if ($48) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $49 = $ProcessLeft;
 $50 = $pSC;
 $51 = (FUNCTION_TABLE_ii[$49 & 255]($50)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $53 = $pSC;
 _advanceMRPtr($53);
 $54 = $pSC;
 $55 = (($54) + 34360|0);
 HEAP32[$55>>2] = 1;
 while(1) {
  $56 = $pSC;
  $57 = (($56) + 34360|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $pSC;
  $60 = (($59) + 34364|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($58>>>0)<($61>>>0);
  if (!($62)) {
   break;
  }
  $63 = $ProcessCenter;
  $64 = $pSC;
  $65 = (FUNCTION_TABLE_ii[$63 & 255]($64)|0);
  $66 = ($65|0)!=(0);
  if ($66) {
   label = 15;
   break;
  }
  $67 = $pSC;
  _advanceMRPtr($67);
  $68 = $pSC;
  $69 = (($68) + 34360|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$69>>2] = $71;
 }
 if ((label|0) == 15) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $72 = $ProcessRight;
 $73 = $pSC;
 $74 = (FUNCTION_TABLE_ii[$72 & 255]($73)|0);
 $75 = ($74|0)!=(0);
 if ($75) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $76 = $pSC;
 $77 = (($76) + 34356|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0);
 if ($79) {
  $80 = $pSC;
  _advanceOneMBRow($80);
 }
 $81 = $pSC;
 $82 = (($81) + 34356|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 1)|0;
 HEAP32[$82>>2] = $84;
 $85 = $pSC;
 _swapMRPtr($85);
 $0 = 0;
 $86 = $0;
 STACKTOP = sp;return ($86|0);
}
function _ImageStrEncTerm($ctxSC) {
 $ctxSC = $ctxSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pSC = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctxSC;
 $2 = $1;
 $pSC = $2;
 $3 = $pSC;
 $4 = HEAP32[$3>>2]|0;
 $5 = (35176)!=($4|0);
 if ($5) {
  $0 = -1;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $6 = $pSC;
 $7 = (($6) + 34360|0);
 HEAP32[$7>>2] = 0;
 $8 = $pSC;
 _initMRPtr($8);
 $9 = $pSC;
 $10 = (($9) + 34488|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $pSC;
 (FUNCTION_TABLE_ii[$11 & 255]($12)|0);
 $13 = $pSC;
 _advanceMRPtr($13);
 $14 = $pSC;
 $15 = (($14) + 34360|0);
 HEAP32[$15>>2] = 1;
 while(1) {
  $16 = $pSC;
  $17 = (($16) + 34360|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $pSC;
  $20 = (($19) + 34364|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $pSC;
  $24 = (($23) + 34492|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $pSC;
  (FUNCTION_TABLE_ii[$25 & 255]($26)|0);
  $27 = $pSC;
  _advanceMRPtr($27);
  $28 = $pSC;
  $29 = (($28) + 34360|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$29>>2] = $31;
 }
 $32 = $pSC;
 $33 = (($32) + 34496|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $pSC;
 (FUNCTION_TABLE_ii[$34 & 255]($35)|0);
 $36 = $pSC;
 (_StrEncTerm($36)|0);
 $37 = $pSC;
 _free($37);
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _StrEncTerm($ctxSC) {
 $ctxSC = $ctxSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, $jend = 0, $pSC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctxSC;
 $2 = $1;
 $pSC = $2;
 $3 = $pSC;
 $4 = (($3) + 35032|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = $6&1;
 $jend = $7;
 $j = 0;
 while(1) {
  $8 = $j;
  $9 = $jend;
  $10 = ($8>>>0)<=($9>>>0);
  if (!($10)) {
   label = 15;
   break;
  }
  $11 = $pSC;
  $12 = HEAP32[$11>>2]|0;
  $13 = (35176)!=($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $14 = $pSC;
  $15 = (($14) + 34264|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $pSC;
   $19 = (($18) + 34884|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $pSC;
    $23 = (($22) + 34884|0);
    $24 = HEAP32[$23>>2]|0;
    _free($24);
   }
   $25 = $pSC;
   $26 = (($25) + 34888|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)!=(0|0);
   if ($28) {
    $29 = $pSC;
    $30 = (($29) + 34888|0);
    $31 = HEAP32[$30>>2]|0;
    _free($31);
   }
  }
  $32 = $pSC;
  _freePredInfo($32);
  $33 = $j;
  $34 = ($33|0)==(0);
  if ($34) {
   $35 = $pSC;
   (_StrIOEncTerm($35)|0);
  }
  $36 = $pSC;
  _FreeCodingContextEnc($36);
  $37 = $pSC;
  _freeTileInfo($37);
  $38 = $pSC;
  $39 = (($38) + 84|0);
  $40 = (($39) + 32841|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = (($42) - 128)|0;
  $44 = $43&255;
  HEAP8[$40>>0] = $44;
  $45 = $pSC;
  $46 = (($45) + 35032|0);
  $47 = HEAP32[$46>>2]|0;
  $pSC = $47;
  $48 = $j;
  $49 = (($48) + 1)|0;
  $j = $49;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 return 0|0;
}
function _downsampleUV($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cShift = 0, $cShift1 = 0, $cfExt = 0, $cfInt = 0, $d0 = 0, $d1 = 0, $d2 = 0, $d3 = 0, $d4 = 0, $iChannel = 0, $iColumn = 0, $iRow = 0, $mbOff = 0, $pBuf = 0, $pDst = 0, $pSrc = 0, $pxOff = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pBuf = sp + 8|0;
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34136|0);
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $cfInt = $4;
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $cfExt = $8;
 $iChannel = 1;
 while(1) {
  $9 = $iChannel;
  $10 = ($9>>>0)<(3);
  if (!($10)) {
   break;
  }
  $11 = $cfExt;
  $12 = ($11|0)!=(2);
  if ($12) {
   $13 = $cfInt;
   $14 = ($13|0)==(2);
   $15 = $14 ? 1 : 0;
   $cShift = $15;
   $16 = $iChannel;
   $17 = ($16|0)==(1);
   if ($17) {
    $18 = $0;
    $19 = (($18) + 34884|0);
    $20 = HEAP32[$19>>2]|0;
    $24 = $20;
   } else {
    $21 = $0;
    $22 = (($21) + 34888|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23;
   }
   $pSrc = $24;
   $25 = $cfInt;
   $26 = ($25|0)==(2);
   if ($26) {
    $27 = $iChannel;
    $28 = $0;
    $29 = (($28) + 34756|0);
    $30 = (($29) + ($27<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $33 = $31;
   } else {
    $32 = $pSrc;
    $33 = $32;
   }
   $pDst = $33;
   $iRow = 0;
   while(1) {
    $34 = $iRow;
    $35 = ($34>>>0)<(16);
    if (!($35)) {
     break;
    }
    $36 = $iRow;
    $37 = (14240 + ($36<<4)|0);
    $38 = (($37) + 2|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = $pSrc;
    $42 = (($41) + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $d4 = $43;
    $d0 = $43;
    $44 = $iRow;
    $45 = (14240 + ($44<<4)|0);
    $46 = (($45) + 1|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = $pSrc;
    $50 = (($49) + ($48<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $d3 = $51;
    $d1 = $51;
    $52 = $iRow;
    $53 = (14240 + ($52<<4)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = $pSrc;
    $57 = (($56) + ($55<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $d2 = $58;
    $iColumn = 0;
    while(1) {
     $59 = $iColumn;
     $60 = (($59) + 2)|0;
     $61 = $0;
     $62 = (($61) + 34364|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $63<<4;
     $65 = ($60>>>0)<($64>>>0);
     if (!($65)) {
      break;
     }
     $66 = $d1;
     $67 = $d2;
     $68 = (($66) + ($67))|0;
     $69 = $d3;
     $70 = (($68) + ($69))|0;
     $71 = $70 << 2;
     $72 = $d2;
     $73 = $72 << 1;
     $74 = (($71) + ($73))|0;
     $75 = $d0;
     $76 = (($74) + ($75))|0;
     $77 = $d4;
     $78 = (($76) + ($77))|0;
     $79 = (($78) + 8)|0;
     $80 = $79 >> 4;
     $81 = $iColumn;
     $82 = $81 >>> 4;
     $83 = $cShift;
     $84 = (8 - ($83))|0;
     $85 = $82 << $84;
     $86 = $iColumn;
     $87 = $86 & 15;
     $88 = $cShift;
     $89 = $87 >>> $88;
     $90 = $iRow;
     $91 = (14240 + ($90<<4)|0);
     $92 = (($91) + ($89)|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93&255;
     $95 = (($85) + ($94))|0;
     $96 = $pDst;
     $97 = (($96) + ($95<<2)|0);
     HEAP32[$97>>2] = $80;
     $98 = $d2;
     $d0 = $98;
     $99 = $d3;
     $d1 = $99;
     $100 = $d4;
     $d2 = $100;
     $101 = $iColumn;
     $102 = (($101) + 3)|0;
     $103 = $102 >>> 4;
     $104 = $103 << 8;
     $105 = $iColumn;
     $106 = (($105) + 3)|0;
     $107 = $106 & 15;
     $108 = $iRow;
     $109 = (14240 + ($108<<4)|0);
     $110 = (($109) + ($107)|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = $111&255;
     $113 = (($104) + ($112))|0;
     $114 = $pSrc;
     $115 = (($114) + ($113<<2)|0);
     $116 = HEAP32[$115>>2]|0;
     $d3 = $116;
     $117 = $iColumn;
     $118 = (($117) + 4)|0;
     $119 = $118 >>> 4;
     $120 = $119 << 8;
     $121 = $iColumn;
     $122 = (($121) + 4)|0;
     $123 = $122 & 15;
     $124 = $iRow;
     $125 = (14240 + ($124<<4)|0);
     $126 = (($125) + ($123)|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127&255;
     $129 = (($120) + ($128))|0;
     $130 = $pSrc;
     $131 = (($130) + ($129<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $d4 = $132;
     $133 = $iColumn;
     $134 = (($133) + 2)|0;
     $iColumn = $134;
    }
    $135 = $d2;
    $d4 = $135;
    $136 = $d1;
    $137 = $d2;
    $138 = (($136) + ($137))|0;
    $139 = $d3;
    $140 = (($138) + ($139))|0;
    $141 = $140 << 2;
    $142 = $d2;
    $143 = $142 << 1;
    $144 = (($141) + ($143))|0;
    $145 = $d0;
    $146 = (($144) + ($145))|0;
    $147 = $d4;
    $148 = (($146) + ($147))|0;
    $149 = (($148) + 8)|0;
    $150 = $149 >> 4;
    $151 = $iColumn;
    $152 = $151 >>> 4;
    $153 = $cShift;
    $154 = (8 - ($153))|0;
    $155 = $152 << $154;
    $156 = $iColumn;
    $157 = $156 & 15;
    $158 = $cShift;
    $159 = $157 >>> $158;
    $160 = $iRow;
    $161 = (14240 + ($160<<4)|0);
    $162 = (($161) + ($159)|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = (($155) + ($164))|0;
    $166 = $pDst;
    $167 = (($166) + ($165<<2)|0);
    HEAP32[$167>>2] = $150;
    $168 = $iRow;
    $169 = (($168) + 1)|0;
    $iRow = $169;
   }
  }
  $170 = $cfInt;
  $171 = ($170|0)==(1);
  if ($171) {
   $172 = $cfExt;
   $173 = ($172|0)==(2);
   $174 = $173 ? 0 : 1;
   $cShift1 = $174;
   $175 = $iChannel;
   $176 = $0;
   $177 = (($176) + 34756|0);
   $178 = (($177) + ($175<<2)|0);
   $179 = HEAP32[$178>>2]|0;
   $pDst = $179;
   $180 = $iChannel;
   $181 = ($180|0)==(1);
   if ($181) {
    $182 = $0;
    $183 = (($182) + 34884|0);
    $184 = HEAP32[$183>>2]|0;
    $188 = $184;
   } else {
    $185 = $0;
    $186 = (($185) + 34888|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $187;
   }
   $pSrc = $188;
   $189 = $pSrc;
   $190 = $0;
   $191 = (($190) + 34364|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $cfExt;
   $194 = ($193|0)==(2);
   $195 = $194 ? 7 : 8;
   $196 = $192 << $195;
   $197 = (($189) + ($196<<2)|0);
   HEAP32[$pBuf>>2] = $197;
   $198 = HEAP32[$pBuf>>2]|0;
   $199 = $0;
   $200 = (($199) + 34364|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201<<3;
   $203 = (($198) + ($202<<2)|0);
   $204 = (($pBuf) + 4|0);
   HEAP32[$204>>2] = $203;
   $205 = (($pBuf) + 4|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $0;
   $208 = (($207) + 34364|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $209<<3;
   $211 = (($206) + ($210<<2)|0);
   $212 = (($pBuf) + 8|0);
   HEAP32[$212>>2] = $211;
   $213 = (($pBuf) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $0;
   $216 = (($215) + 34364|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $217<<3;
   $219 = (($214) + ($218<<2)|0);
   $220 = (($pBuf) + 12|0);
   HEAP32[$220>>2] = $219;
   $iColumn = 0;
   while(1) {
    $221 = $iColumn;
    $222 = $0;
    $223 = (($222) + 34364|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $224<<3;
    $226 = ($221>>>0)<($225>>>0);
    if (!($226)) {
     break;
    }
    $227 = $iColumn;
    $228 = $227 >>> 3;
    $229 = $cShift1;
    $230 = (7 + ($229))|0;
    $231 = $228 << $230;
    $mbOff = $231;
    $232 = $iColumn;
    $233 = $232 & 7;
    $234 = $cShift1;
    $235 = $233 << $234;
    $pxOff = $235;
    $236 = $0;
    $237 = (($236) + 34356|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = ($238|0)==(0);
    if ($239) {
     $240 = $mbOff;
     $241 = $pxOff;
     $242 = (((14240 + 32|0)) + ($241)|0);
     $243 = HEAP8[$242>>0]|0;
     $244 = $243&255;
     $245 = (($240) + ($244))|0;
     $246 = $pSrc;
     $247 = (($246) + ($245<<2)|0);
     $248 = HEAP32[$247>>2]|0;
     $d4 = $248;
     $d0 = $248;
     $249 = $mbOff;
     $250 = $pxOff;
     $251 = (((14240 + 16|0)) + ($250)|0);
     $252 = HEAP8[$251>>0]|0;
     $253 = $252&255;
     $254 = (($249) + ($253))|0;
     $255 = $pSrc;
     $256 = (($255) + ($254<<2)|0);
     $257 = HEAP32[$256>>2]|0;
     $d3 = $257;
     $d1 = $257;
     $258 = $mbOff;
     $259 = $pxOff;
     $260 = (14240 + ($259)|0);
     $261 = HEAP8[$260>>0]|0;
     $262 = $261&255;
     $263 = (($258) + ($262))|0;
     $264 = $pSrc;
     $265 = (($264) + ($263<<2)|0);
     $266 = HEAP32[$265>>2]|0;
     $d2 = $266;
    } else {
     $267 = $iColumn;
     $268 = HEAP32[$pBuf>>2]|0;
     $269 = (($268) + ($267<<2)|0);
     $270 = HEAP32[$269>>2]|0;
     $d0 = $270;
     $271 = $iColumn;
     $272 = (($pBuf) + 4|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = (($273) + ($271<<2)|0);
     $275 = HEAP32[$274>>2]|0;
     $d1 = $275;
     $276 = $iColumn;
     $277 = (($pBuf) + 8|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = (($278) + ($276<<2)|0);
     $280 = HEAP32[$279>>2]|0;
     $d2 = $280;
     $281 = $iColumn;
     $282 = (($pBuf) + 12|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = (($283) + ($281<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $d3 = $285;
     $286 = $mbOff;
     $287 = $pxOff;
     $288 = (14240 + ($287)|0);
     $289 = HEAP8[$288>>0]|0;
     $290 = $289&255;
     $291 = (($286) + ($290))|0;
     $292 = $pSrc;
     $293 = (($292) + ($291<<2)|0);
     $294 = HEAP32[$293>>2]|0;
     $d4 = $294;
     $295 = $d1;
     $296 = $d2;
     $297 = (($295) + ($296))|0;
     $298 = $d3;
     $299 = (($297) + ($298))|0;
     $300 = $299 << 2;
     $301 = $d2;
     $302 = $301 << 1;
     $303 = (($300) + ($302))|0;
     $304 = $d0;
     $305 = (($303) + ($304))|0;
     $306 = $d4;
     $307 = (($305) + ($306))|0;
     $308 = (($307) + 8)|0;
     $309 = $308 >> 4;
     $310 = $iColumn;
     $311 = $310 >>> 3;
     $312 = $311 << 6;
     $313 = $iColumn;
     $314 = $313 & 7;
     $315 = (((14496 + 56|0)) + ($314)|0);
     $316 = HEAP8[$315>>0]|0;
     $317 = $316&255;
     $318 = (($312) + ($317))|0;
     $319 = $iChannel;
     $320 = $0;
     $321 = (($320) + 34692|0);
     $322 = (($321) + ($319<<2)|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = (($323) + ($318<<2)|0);
     HEAP32[$324>>2] = $309;
     $325 = $iColumn;
     $326 = (($pBuf) + 8|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = (($327) + ($325<<2)|0);
     $329 = HEAP32[$328>>2]|0;
     $d0 = $329;
     $330 = $iColumn;
     $331 = (($pBuf) + 12|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = (($332) + ($330<<2)|0);
     $334 = HEAP32[$333>>2]|0;
     $d1 = $334;
     $335 = $mbOff;
     $336 = $pxOff;
     $337 = (14240 + ($336)|0);
     $338 = HEAP8[$337>>0]|0;
     $339 = $338&255;
     $340 = (($335) + ($339))|0;
     $341 = $pSrc;
     $342 = (($341) + ($340<<2)|0);
     $343 = HEAP32[$342>>2]|0;
     $d2 = $343;
     $344 = $mbOff;
     $345 = $pxOff;
     $346 = (((14240 + 16|0)) + ($345)|0);
     $347 = HEAP8[$346>>0]|0;
     $348 = $347&255;
     $349 = (($344) + ($348))|0;
     $350 = $pSrc;
     $351 = (($350) + ($349<<2)|0);
     $352 = HEAP32[$351>>2]|0;
     $d3 = $352;
     $353 = $mbOff;
     $354 = $pxOff;
     $355 = (((14240 + 32|0)) + ($354)|0);
     $356 = HEAP8[$355>>0]|0;
     $357 = $356&255;
     $358 = (($353) + ($357))|0;
     $359 = $pSrc;
     $360 = (($359) + ($358<<2)|0);
     $361 = HEAP32[$360>>2]|0;
     $d4 = $361;
    }
    $iRow = 0;
    while(1) {
     $362 = $iRow;
     $363 = ($362>>>0)<(12);
     if (!($363)) {
      break;
     }
     $364 = $d1;
     $365 = $d2;
     $366 = (($364) + ($365))|0;
     $367 = $d3;
     $368 = (($366) + ($367))|0;
     $369 = $368 << 2;
     $370 = $d2;
     $371 = $370 << 1;
     $372 = (($369) + ($371))|0;
     $373 = $d0;
     $374 = (($372) + ($373))|0;
     $375 = $d4;
     $376 = (($374) + ($375))|0;
     $377 = (($376) + 8)|0;
     $378 = $377 >> 4;
     $379 = $iColumn;
     $380 = $379 >>> 3;
     $381 = $380 << 6;
     $382 = $iColumn;
     $383 = $382 & 7;
     $384 = $iRow;
     $385 = $384 >>> 1;
     $386 = (14496 + ($385<<3)|0);
     $387 = (($386) + ($383)|0);
     $388 = HEAP8[$387>>0]|0;
     $389 = $388&255;
     $390 = (($381) + ($389))|0;
     $391 = $pDst;
     $392 = (($391) + ($390<<2)|0);
     HEAP32[$392>>2] = $378;
     $393 = $d2;
     $d0 = $393;
     $394 = $d3;
     $d1 = $394;
     $395 = $d4;
     $d2 = $395;
     $396 = $mbOff;
     $397 = $pxOff;
     $398 = $iRow;
     $399 = (($398) + 3)|0;
     $400 = (14240 + ($399<<4)|0);
     $401 = (($400) + ($397)|0);
     $402 = HEAP8[$401>>0]|0;
     $403 = $402&255;
     $404 = (($396) + ($403))|0;
     $405 = $pSrc;
     $406 = (($405) + ($404<<2)|0);
     $407 = HEAP32[$406>>2]|0;
     $d3 = $407;
     $408 = $mbOff;
     $409 = $pxOff;
     $410 = $iRow;
     $411 = (($410) + 4)|0;
     $412 = (14240 + ($411<<4)|0);
     $413 = (($412) + ($409)|0);
     $414 = HEAP8[$413>>0]|0;
     $415 = $414&255;
     $416 = (($408) + ($415))|0;
     $417 = $pSrc;
     $418 = (($417) + ($416<<2)|0);
     $419 = HEAP32[$418>>2]|0;
     $d4 = $419;
     $420 = $iRow;
     $421 = (($420) + 2)|0;
     $iRow = $421;
    }
    $422 = $d1;
    $423 = $d2;
    $424 = (($422) + ($423))|0;
    $425 = $d3;
    $426 = (($424) + ($425))|0;
    $427 = $426 << 2;
    $428 = $d2;
    $429 = $428 << 1;
    $430 = (($427) + ($429))|0;
    $431 = $d0;
    $432 = (($430) + ($431))|0;
    $433 = $d4;
    $434 = (($432) + ($433))|0;
    $435 = (($434) + 8)|0;
    $436 = $435 >> 4;
    $437 = $iColumn;
    $438 = $437 >>> 3;
    $439 = $438 << 6;
    $440 = $iColumn;
    $441 = $440 & 7;
    $442 = (((14496 + 48|0)) + ($441)|0);
    $443 = HEAP8[$442>>0]|0;
    $444 = $443&255;
    $445 = (($439) + ($444))|0;
    $446 = $pDst;
    $447 = (($446) + ($445<<2)|0);
    HEAP32[$447>>2] = $436;
    $448 = $d2;
    $d0 = $448;
    $449 = $d3;
    $d1 = $449;
    $450 = $d4;
    $d2 = $450;
    $451 = $mbOff;
    $452 = $pxOff;
    $453 = $iRow;
    $454 = (($453) + 3)|0;
    $455 = (14240 + ($454<<4)|0);
    $456 = (($455) + ($452)|0);
    $457 = HEAP8[$456>>0]|0;
    $458 = $457&255;
    $459 = (($451) + ($458))|0;
    $460 = $pSrc;
    $461 = (($460) + ($459<<2)|0);
    $462 = HEAP32[$461>>2]|0;
    $d3 = $462;
    $463 = $0;
    $464 = (($463) + 34356|0);
    $465 = HEAP32[$464>>2]|0;
    $466 = (($465) + 1)|0;
    $467 = $0;
    $468 = (($467) + 34368|0);
    $469 = HEAP32[$468>>2]|0;
    $470 = ($466|0)==($469|0);
    if ($470) {
     $471 = $d2;
     $d4 = $471;
     $472 = $d1;
     $473 = $d2;
     $474 = (($472) + ($473))|0;
     $475 = $d3;
     $476 = (($474) + ($475))|0;
     $477 = $476 << 2;
     $478 = $d2;
     $479 = $478 << 1;
     $480 = (($477) + ($479))|0;
     $481 = $d0;
     $482 = (($480) + ($481))|0;
     $483 = $d4;
     $484 = (($482) + ($483))|0;
     $485 = (($484) + 8)|0;
     $486 = $485 >> 4;
     $487 = $iColumn;
     $488 = $487 >>> 3;
     $489 = $488 << 6;
     $490 = $iColumn;
     $491 = $490 & 7;
     $492 = (((14496 + 56|0)) + ($491)|0);
     $493 = HEAP8[$492>>0]|0;
     $494 = $493&255;
     $495 = (($489) + ($494))|0;
     $496 = $pDst;
     $497 = (($496) + ($495<<2)|0);
     HEAP32[$497>>2] = $486;
    } else {
     $iRow = 0;
     while(1) {
      $498 = $iRow;
      $499 = ($498>>>0)<(4);
      if (!($499)) {
       break;
      }
      $500 = $mbOff;
      $501 = $pxOff;
      $502 = $iRow;
      $503 = (($502) + 12)|0;
      $504 = (14240 + ($503<<4)|0);
      $505 = (($504) + ($501)|0);
      $506 = HEAP8[$505>>0]|0;
      $507 = $506&255;
      $508 = (($500) + ($507))|0;
      $509 = $pSrc;
      $510 = (($509) + ($508<<2)|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = $iColumn;
      $513 = $iRow;
      $514 = (($pBuf) + ($513<<2)|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = (($515) + ($512<<2)|0);
      HEAP32[$516>>2] = $511;
      $517 = $iRow;
      $518 = (($517) + 1)|0;
      $iRow = $518;
     }
    }
    $519 = $iColumn;
    $520 = (($519) + 1)|0;
    $iColumn = $520;
   }
  }
  $521 = $iChannel;
  $522 = (($521) + 1)|0;
  $iChannel = $522;
 }
 STACKTOP = sp;return;
}
function _padHorizontally($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cFullChannel = 0, $cfExt = 0, $iChannel = 0;
 var $iColumn = 0, $iLast = 0, $iPos = 0, $iPos2 = 0, $iPos4 = 0, $iPosLast = 0, $iPosLast1 = 0, $iPosLast3 = 0, $iRow = 0, $pCh = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pCh = sp + 40|0;
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (($4) + 34364|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6<<4;
 $8 = ($3|0)!=($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = (($9) + 84|0);
 $11 = (($10) + 32856|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $0;
  $15 = (($14) + 34136|0);
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $22 = $17;
 } else {
  $18 = $0;
  $19 = (($18) + 4|0);
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21;
 }
 $cfExt = $22;
 $23 = $0;
 $24 = (($23) + 84|0);
 $25 = (($24) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $cFullChannel = $26;
 $27 = $0;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) - 1)|0;
 $iLast = $30;
 $31 = $cfExt;
 $32 = ($31|0)==(1);
 if ($32) {
  label = 8;
 } else {
  $33 = $cfExt;
  $34 = ($33|0)==(2);
  if ($34) {
   label = 8;
  } else {
   $35 = $cfExt;
   $36 = ($35|0)==(0);
   if ($36) {
    label = 8;
   }
  }
 }
 if ((label|0) == 8) {
  $cFullChannel = 1;
 }
 $37 = $cFullChannel;
 $38 = ($37>>>0)<=(16);
 if (!($38)) {
  ___assert_fail((7056|0),(7080|0),1706,(7104|0));
  // unreachable;
 }
 $39 = $0;
 $40 = (($39) + 84|0);
 $41 = (($40) + 32|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42>>>0)<=(16);
 if (!($43)) {
  ___assert_fail((7120|0),(7080|0),1708,(7104|0));
  // unreachable;
 }
 $iChannel = 0;
 while(1) {
  $44 = $iChannel;
  $45 = $0;
  $46 = (($45) + 84|0);
  $47 = (($46) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($44>>>0)<($48>>>0);
  if (!($49)) {
   break;
  }
  $50 = $iChannel;
  $51 = $50 & 15;
  $52 = $0;
  $53 = (($52) + 34756|0);
  $54 = (($53) + ($51<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $iChannel;
  $57 = $56 & 15;
  $58 = (($pCh) + ($57<<2)|0);
  HEAP32[$58>>2] = $55;
  $59 = $iChannel;
  $60 = (($59) + 1)|0;
  $iChannel = $60;
 }
 $61 = $0;
 $62 = (($61) + 34264|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $0;
  $66 = (($65) + 34884|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($pCh) + 4|0);
  HEAP32[$68>>2] = $67;
  $69 = $0;
  $70 = (($69) + 34888|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($pCh) + 8|0);
  HEAP32[$72>>2] = $71;
 }
 $iRow = 0;
 while(1) {
  $73 = $iRow;
  $74 = ($73>>>0)<(16);
  if (!($74)) {
   break;
  }
  $75 = $iLast;
  $76 = $75 >>> 4;
  $77 = $76 << 8;
  $78 = $iLast;
  $79 = $78 & 15;
  $80 = $iRow;
  $81 = (14240 + ($80<<4)|0);
  $82 = (($81) + ($79)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = (($77) + ($84))|0;
  $iPosLast = $85;
  $86 = $iLast;
  $87 = (($86) + 1)|0;
  $iColumn = $87;
  while(1) {
   $88 = $iColumn;
   $89 = $0;
   $90 = (($89) + 34364|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $91<<4;
   $93 = ($88>>>0)<($92>>>0);
   if (!($93)) {
    break;
   }
   $94 = $iColumn;
   $95 = $94 >>> 4;
   $96 = $95 << 8;
   $97 = $iColumn;
   $98 = $97 & 15;
   $99 = $iRow;
   $100 = (14240 + ($99<<4)|0);
   $101 = (($100) + ($98)|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = (($96) + ($103))|0;
   $iPos = $104;
   $iChannel = 0;
   while(1) {
    $105 = $iChannel;
    $106 = $cFullChannel;
    $107 = ($105>>>0)<($106>>>0);
    if (!($107)) {
     break;
    }
    $108 = $iPosLast;
    $109 = $iChannel;
    $110 = $109 & 15;
    $111 = (($pCh) + ($110<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + ($108<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $iPos;
    $116 = $iChannel;
    $117 = $116 & 15;
    $118 = (($pCh) + ($117<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + ($115<<2)|0);
    HEAP32[$120>>2] = $114;
    $121 = $iChannel;
    $122 = (($121) + 1)|0;
    $iChannel = $122;
   }
   $123 = $iColumn;
   $124 = (($123) + 1)|0;
   $iColumn = $124;
  }
  $125 = $iRow;
  $126 = (($125) + 1)|0;
  $iRow = $126;
 }
 $127 = $cfExt;
 $128 = ($127|0)==(2);
 if ($128) {
  $129 = $iLast;
  $130 = $129 >>> 1;
  $iLast = $130;
  $iRow = 0;
  while(1) {
   $131 = $iRow;
   $132 = ($131>>>0)<(16);
   if (!($132)) {
    break;
   }
   $133 = $iLast;
   $134 = $133 >>> 3;
   $135 = $134 << 7;
   $136 = $iLast;
   $137 = $136 & 7;
   $138 = $iRow;
   $139 = (14240 + ($138<<4)|0);
   $140 = (($139) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($135) + ($142))|0;
   $iPosLast1 = $143;
   $144 = $iLast;
   $145 = (($144) + 1)|0;
   $iColumn = $145;
   while(1) {
    $146 = $iColumn;
    $147 = $0;
    $148 = (($147) + 34364|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $149<<3;
    $151 = ($146>>>0)<($150>>>0);
    if (!($151)) {
     break;
    }
    $152 = $iColumn;
    $153 = $152 >>> 3;
    $154 = $153 << 7;
    $155 = $iColumn;
    $156 = $155 & 7;
    $157 = $iRow;
    $158 = (14240 + ($157<<4)|0);
    $159 = (($158) + ($156)|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160&255;
    $162 = (($154) + ($161))|0;
    $iPos2 = $162;
    $iChannel = 1;
    while(1) {
     $163 = $iChannel;
     $164 = ($163>>>0)<(3);
     if (!($164)) {
      break;
     }
     $165 = $iPosLast1;
     $166 = $iChannel;
     $167 = (($pCh) + ($166<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($168) + ($165<<2)|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = $iPos2;
     $172 = $iChannel;
     $173 = (($pCh) + ($172<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (($174) + ($171<<2)|0);
     HEAP32[$175>>2] = $170;
     $176 = $iChannel;
     $177 = (($176) + 1)|0;
     $iChannel = $177;
    }
    $178 = $iColumn;
    $179 = (($178) + 1)|0;
    $iColumn = $179;
   }
   $180 = $iRow;
   $181 = (($180) + 1)|0;
   $iRow = $181;
  }
 } else {
  $182 = $cfExt;
  $183 = ($182|0)==(1);
  if ($183) {
   $184 = $iLast;
   $185 = $184 >>> 1;
   $iLast = $185;
   $iRow = 0;
   while(1) {
    $186 = $iRow;
    $187 = ($186>>>0)<(8);
    if (!($187)) {
     break;
    }
    $188 = $iLast;
    $189 = $188 >>> 3;
    $190 = $189 << 6;
    $191 = $iLast;
    $192 = $191 & 7;
    $193 = $iRow;
    $194 = (14496 + ($193<<3)|0);
    $195 = (($194) + ($192)|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = $196&255;
    $198 = (($190) + ($197))|0;
    $iPosLast3 = $198;
    $199 = $iLast;
    $200 = (($199) + 1)|0;
    $iColumn = $200;
    while(1) {
     $201 = $iColumn;
     $202 = $0;
     $203 = (($202) + 34364|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = $204<<3;
     $206 = ($201>>>0)<($205>>>0);
     if (!($206)) {
      break;
     }
     $207 = $iColumn;
     $208 = $207 >>> 3;
     $209 = $208 << 6;
     $210 = $iColumn;
     $211 = $210 & 7;
     $212 = $iRow;
     $213 = (14496 + ($212<<3)|0);
     $214 = (($213) + ($211)|0);
     $215 = HEAP8[$214>>0]|0;
     $216 = $215&255;
     $217 = (($209) + ($216))|0;
     $iPos4 = $217;
     $iChannel = 1;
     while(1) {
      $218 = $iChannel;
      $219 = ($218>>>0)<(3);
      if (!($219)) {
       break;
      }
      $220 = $iPosLast3;
      $221 = $iChannel;
      $222 = (($pCh) + ($221<<2)|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = (($223) + ($220<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = $iPos4;
      $227 = $iChannel;
      $228 = (($pCh) + ($227<<2)|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = (($229) + ($226<<2)|0);
      HEAP32[$230>>2] = $225;
      $231 = $iChannel;
      $232 = (($231) + 1)|0;
      $iChannel = $232;
     }
     $233 = $iColumn;
     $234 = (($233) + 1)|0;
     $iColumn = $234;
    }
    $235 = $iRow;
    $236 = (($235) + 1)|0;
    $iRow = $236;
   }
  }
 }
 STACKTOP = sp;return;
}
function _inputMBRowAlpha($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bdExt = 0, $cColumn = 0, $cRow = 0, $cShift = 0, $cStride = 0, $cStride1 = 0, $cStride11 = 0, $cStride3 = 0, $cStride6 = 0, $cStride8 = 0, $iAlphaPos = 0, $iColumn = 0, $iRow = 0, $nExpBias = 0, $nLen = 0;
 var $nLenMantissaOrShift = 0, $nLenMantissaOrShift4 = 0, $nLenMantissaOrShift9 = 0, $pA = 0, $pSrc = 0, $pSrc0 = 0, $pSrc10 = 0, $pSrc12 = 0, $pSrc2 = 0, $pSrc5 = 0, $pSrc7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 35036|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = $1;
   $7 = (($6) + 35032|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $1;
    $11 = (($10) + 35032|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + 34136|0);
    $14 = (($13) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)!=(0);
    $17 = $16 ? 3 : 0;
    $cShift = $17;
    $18 = $1;
    $19 = (($18) + 4|0);
    $20 = (($19) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $bdExt = $21;
    $22 = $1;
    $23 = (($22) + 4|0);
    $24 = (($23) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $1;
    $27 = (($26) + 4|0);
    $28 = (($27) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(4);
    $31 = $30 ? 4 : 3;
    $32 = (($25) + ($31))|0;
    $iAlphaPos = $32;
    $33 = $1;
    $34 = (($33) + 32952|0);
    $35 = (($34) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $cRow = $36;
    $37 = $1;
    $38 = (($37) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $cColumn = $39;
    $40 = $1;
    $41 = (($40) + 32952|0);
    $42 = HEAP32[$41>>2]|0;
    $pSrc0 = $42;
    $43 = $1;
    $44 = (($43) + 35032|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 34756|0);
    $47 = HEAP32[$46>>2]|0;
    $pA = $47;
    $iRow = 0;
    while(1) {
     $48 = $iRow;
     $49 = ($48>>>0)<(16);
     if (!($49)) {
      label = 55;
      break;
     }
     $50 = $bdExt;
     $51 = ($50|0)==(1);
     if ($51) {
      $52 = $1;
      $53 = (($52) + 4|0);
      $54 = (($53) + 16|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = $55 >>> 3;
      $cStride = $56;
      $57 = $pSrc0;
      $pSrc = $57;
      $iColumn = 0;
      while(1) {
       $58 = $iColumn;
       $59 = $cColumn;
       $60 = ($58>>>0)<($59>>>0);
       if (!($60)) {
        break;
       }
       $61 = $iAlphaPos;
       $62 = $pSrc;
       $63 = (($62) + ($61)|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = $64&255;
       $66 = (($65) - 128)|0;
       $67 = $cShift;
       $68 = $66 << $67;
       $69 = $iColumn;
       $70 = $69 >>> 4;
       $71 = $70 << 8;
       $72 = $iColumn;
       $73 = $72 & 15;
       $74 = $iRow;
       $75 = (14240 + ($74<<4)|0);
       $76 = (($75) + ($73)|0);
       $77 = HEAP8[$76>>0]|0;
       $78 = $77&255;
       $79 = (($71) + ($78))|0;
       $80 = $pA;
       $81 = (($80) + ($79<<2)|0);
       HEAP32[$81>>2] = $68;
       $82 = $iColumn;
       $83 = (($82) + 1)|0;
       $iColumn = $83;
       $84 = $cStride;
       $85 = $pSrc;
       $86 = (($85) + ($84)|0);
       $pSrc = $86;
      }
     } else {
      $87 = $bdExt;
      $88 = ($87|0)==(2);
      if ($88) {
       $89 = $1;
       $90 = (($89) + 4|0);
       $91 = (($90) + 16|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $92 >>> 3;
       $94 = (($93>>>0) / 2)&-1;
       $cStride1 = $94;
       $95 = $1;
       $96 = (($95) + 35032|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = (($97) + 84|0);
       $99 = (($98) + 32840|0);
       $100 = HEAP8[$99>>0]|0;
       $nLenMantissaOrShift = $100;
       $101 = $pSrc0;
       $pSrc2 = $101;
       $iColumn = 0;
       while(1) {
        $102 = $iColumn;
        $103 = $cColumn;
        $104 = ($102>>>0)<($103>>>0);
        if (!($104)) {
         break;
        }
        $105 = $iAlphaPos;
        $106 = $pSrc2;
        $107 = (($106) + ($105<<1)|0);
        $108 = HEAP16[$107>>1]|0;
        $109 = $108&65535;
        $110 = (($109) - 32768)|0;
        $111 = $nLenMantissaOrShift;
        $112 = $111&255;
        $113 = $110 >> $112;
        $114 = $cShift;
        $115 = $113 << $114;
        $116 = $iColumn;
        $117 = $116 >>> 4;
        $118 = $117 << 8;
        $119 = $iColumn;
        $120 = $119 & 15;
        $121 = $iRow;
        $122 = (14240 + ($121<<4)|0);
        $123 = (($122) + ($120)|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = $124&255;
        $126 = (($118) + ($125))|0;
        $127 = $pA;
        $128 = (($127) + ($126<<2)|0);
        HEAP32[$128>>2] = $115;
        $129 = $iColumn;
        $130 = (($129) + 1)|0;
        $iColumn = $130;
        $131 = $cStride1;
        $132 = $pSrc2;
        $133 = (($132) + ($131<<1)|0);
        $pSrc2 = $133;
       }
      } else {
       $134 = $bdExt;
       $135 = ($134|0)==(3);
       if ($135) {
        $136 = $1;
        $137 = (($136) + 4|0);
        $138 = (($137) + 16|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = $139 >>> 3;
        $141 = (($140>>>0) / 2)&-1;
        $cStride3 = $141;
        $142 = $1;
        $143 = (($142) + 35032|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (($144) + 84|0);
        $146 = (($145) + 32840|0);
        $147 = HEAP8[$146>>0]|0;
        $nLenMantissaOrShift4 = $147;
        $148 = $pSrc0;
        $pSrc5 = $148;
        $iColumn = 0;
        while(1) {
         $149 = $iColumn;
         $150 = $cColumn;
         $151 = ($149>>>0)<($150>>>0);
         if (!($151)) {
          break;
         }
         $152 = $iAlphaPos;
         $153 = $pSrc5;
         $154 = (($153) + ($152<<1)|0);
         $155 = HEAP16[$154>>1]|0;
         $156 = $155 << 16 >> 16;
         $157 = $nLenMantissaOrShift4;
         $158 = $157&255;
         $159 = $156 >> $158;
         $160 = $cShift;
         $161 = $159 << $160;
         $162 = $iColumn;
         $163 = $162 >>> 4;
         $164 = $163 << 8;
         $165 = $iColumn;
         $166 = $165 & 15;
         $167 = $iRow;
         $168 = (14240 + ($167<<4)|0);
         $169 = (($168) + ($166)|0);
         $170 = HEAP8[$169>>0]|0;
         $171 = $170&255;
         $172 = (($164) + ($171))|0;
         $173 = $pA;
         $174 = (($173) + ($172<<2)|0);
         HEAP32[$174>>2] = $161;
         $175 = $iColumn;
         $176 = (($175) + 1)|0;
         $iColumn = $176;
         $177 = $cStride3;
         $178 = $pSrc5;
         $179 = (($178) + ($177<<1)|0);
         $pSrc5 = $179;
        }
       } else {
        $180 = $bdExt;
        $181 = ($180|0)==(4);
        if ($181) {
         $182 = $1;
         $183 = (($182) + 4|0);
         $184 = (($183) + 16|0);
         $185 = HEAP32[$184>>2]|0;
         $186 = $185 >>> 3;
         $187 = (($186>>>0) / 2)&-1;
         $cStride6 = $187;
         $188 = $pSrc0;
         $pSrc7 = $188;
         $iColumn = 0;
         while(1) {
          $189 = $iColumn;
          $190 = $cColumn;
          $191 = ($189>>>0)<($190>>>0);
          if (!($191)) {
           break;
          }
          $192 = $iAlphaPos;
          $193 = $pSrc7;
          $194 = (($193) + ($192<<1)|0);
          $195 = HEAP16[$194>>1]|0;
          $196 = $195 << 16 >> 16;
          $197 = (_forwardHalf($196)|0);
          $198 = $cShift;
          $199 = $197 << $198;
          $200 = $iColumn;
          $201 = $200 >>> 4;
          $202 = $201 << 8;
          $203 = $iColumn;
          $204 = $203 & 15;
          $205 = $iRow;
          $206 = (14240 + ($205<<4)|0);
          $207 = (($206) + ($204)|0);
          $208 = HEAP8[$207>>0]|0;
          $209 = $208&255;
          $210 = (($202) + ($209))|0;
          $211 = $pA;
          $212 = (($211) + ($210<<2)|0);
          HEAP32[$212>>2] = $199;
          $213 = $iColumn;
          $214 = (($213) + 1)|0;
          $iColumn = $214;
          $215 = $cStride6;
          $216 = $pSrc7;
          $217 = (($216) + ($215<<1)|0);
          $pSrc7 = $217;
         }
        } else {
         $218 = $bdExt;
         $219 = ($218|0)==(6);
         if ($219) {
          $220 = $1;
          $221 = (($220) + 4|0);
          $222 = (($221) + 16|0);
          $223 = HEAP32[$222>>2]|0;
          $224 = $223 >>> 3;
          $225 = (($224>>>0) / 4)&-1;
          $cStride8 = $225;
          $226 = $1;
          $227 = (($226) + 35032|0);
          $228 = HEAP32[$227>>2]|0;
          $229 = (($228) + 84|0);
          $230 = (($229) + 32840|0);
          $231 = HEAP8[$230>>0]|0;
          $nLenMantissaOrShift9 = $231;
          $232 = $pSrc0;
          $pSrc10 = $232;
          $iColumn = 0;
          while(1) {
           $233 = $iColumn;
           $234 = $cColumn;
           $235 = ($233>>>0)<($234>>>0);
           if (!($235)) {
            break;
           }
           $236 = $iAlphaPos;
           $237 = $pSrc10;
           $238 = (($237) + ($236<<2)|0);
           $239 = HEAP32[$238>>2]|0;
           $240 = $nLenMantissaOrShift9;
           $241 = $240&255;
           $242 = $239 >> $241;
           $243 = $cShift;
           $244 = $242 << $243;
           $245 = $iColumn;
           $246 = $245 >>> 4;
           $247 = $246 << 8;
           $248 = $iColumn;
           $249 = $248 & 15;
           $250 = $iRow;
           $251 = (14240 + ($250<<4)|0);
           $252 = (($251) + ($249)|0);
           $253 = HEAP8[$252>>0]|0;
           $254 = $253&255;
           $255 = (($247) + ($254))|0;
           $256 = $pA;
           $257 = (($256) + ($255<<2)|0);
           HEAP32[$257>>2] = $244;
           $258 = $iColumn;
           $259 = (($258) + 1)|0;
           $iColumn = $259;
           $260 = $cStride8;
           $261 = $pSrc10;
           $262 = (($261) + ($260<<2)|0);
           $pSrc10 = $262;
          }
         } else {
          $263 = $bdExt;
          $264 = ($263|0)==(7);
          if (!($264)) {
           break;
          }
          $265 = $1;
          $266 = (($265) + 4|0);
          $267 = (($266) + 16|0);
          $268 = HEAP32[$267>>2]|0;
          $269 = $268 >>> 3;
          $270 = (($269>>>0) / 4)&-1;
          $cStride11 = $270;
          $271 = $1;
          $272 = (($271) + 35032|0);
          $273 = HEAP32[$272>>2]|0;
          $274 = (($273) + 84|0);
          $275 = (($274) + 32840|0);
          $276 = HEAP8[$275>>0]|0;
          $nLen = $276;
          $277 = $1;
          $278 = (($277) + 35032|0);
          $279 = HEAP32[$278>>2]|0;
          $280 = (($279) + 84|0);
          $281 = (($280) + 32841|0);
          $282 = HEAP8[$281>>0]|0;
          $nExpBias = $282;
          $283 = $pSrc0;
          $pSrc12 = $283;
          $iColumn = 0;
          while(1) {
           $284 = $iColumn;
           $285 = $cColumn;
           $286 = ($284>>>0)<($285>>>0);
           if (!($286)) {
            break;
           }
           $287 = $iAlphaPos;
           $288 = $pSrc12;
           $289 = (($288) + ($287<<2)|0);
           $290 = +HEAPF32[$289>>2];
           $291 = $nExpBias;
           $292 = $nLen;
           $293 = (_float2pixel($290,$291,$292)|0);
           $294 = $cShift;
           $295 = $293 << $294;
           $296 = $iColumn;
           $297 = $296 >>> 4;
           $298 = $297 << 8;
           $299 = $iColumn;
           $300 = $299 & 15;
           $301 = $iRow;
           $302 = (14240 + ($301<<4)|0);
           $303 = (($302) + ($300)|0);
           $304 = HEAP8[$303>>0]|0;
           $305 = $304&255;
           $306 = (($298) + ($305))|0;
           $307 = $pA;
           $308 = (($307) + ($306<<2)|0);
           HEAP32[$308>>2] = $295;
           $309 = $iColumn;
           $310 = (($309) + 1)|0;
           $iColumn = $310;
           $311 = $cStride11;
           $312 = $pSrc12;
           $313 = (($312) + ($311<<2)|0);
           $pSrc12 = $313;
          }
         }
        }
       }
      }
     }
     $314 = $iRow;
     $315 = (($314) + 1)|0;
     $316 = $cRow;
     $317 = ($315>>>0)<($316>>>0);
     if ($317) {
      $318 = $1;
      $319 = (($318) + 32952|0);
      $320 = (($319) + 8|0);
      $321 = HEAP32[$320>>2]|0;
      $322 = $pSrc0;
      $323 = (($322) + ($321)|0);
      $pSrc0 = $323;
     }
     $324 = $cColumn;
     $iColumn = $324;
     while(1) {
      $325 = $iColumn;
      $326 = $1;
      $327 = (($326) + 34364|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = $328<<4;
      $330 = ($325>>>0)<($329>>>0);
      if (!($330)) {
       break;
      }
      $331 = $cColumn;
      $332 = (($331) - 1)|0;
      $333 = $332 >>> 4;
      $334 = $333 << 8;
      $335 = $cColumn;
      $336 = (($335) - 1)|0;
      $337 = $336 & 15;
      $338 = $iRow;
      $339 = (14240 + ($338<<4)|0);
      $340 = (($339) + ($337)|0);
      $341 = HEAP8[$340>>0]|0;
      $342 = $341&255;
      $343 = (($334) + ($342))|0;
      $344 = $pA;
      $345 = (($344) + ($343<<2)|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = $iColumn;
      $348 = $347 >>> 4;
      $349 = $348 << 8;
      $350 = $iColumn;
      $351 = $350 & 15;
      $352 = $iRow;
      $353 = (14240 + ($352<<4)|0);
      $354 = (($353) + ($351)|0);
      $355 = HEAP8[$354>>0]|0;
      $356 = $355&255;
      $357 = (($349) + ($356))|0;
      $358 = $pA;
      $359 = (($358) + ($357<<2)|0);
      HEAP32[$359>>2] = $346;
      $360 = $iColumn;
      $361 = (($360) + 1)|0;
      $iColumn = $361;
     }
     $362 = $iRow;
     $363 = (($362) + 1)|0;
     $iRow = $363;
    }
    if ((label|0) == 55) {
     break;
    }
    $0 = -1;
    $364 = $0;
    STACKTOP = sp;return ($364|0);
   }
  }
 } while(0);
 $0 = 0;
 $364 = $0;
 STACKTOP = sp;return ($364|0);
}
function _forwardHalf($hHalf) {
 $hHalf = $hHalf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hHalf;
 $1 = $0;
 $2 = $1 >> 31;
 $s = $2;
 $3 = $0;
 $4 = $3 & 32767;
 $5 = $s;
 $6 = $4 ^ $5;
 $7 = $s;
 $8 = (($6) - ($7))|0;
 $0 = $8;
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _float2pixel($f,$_c,$_lm) {
 $f = +$f;
 $_c = $_c|0;
 $_lm = $_lm|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_h = 0, $e = 0, $e1 = 0, $m = 0, $s = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x = sp + 20|0;
 $0 = $f;
 $1 = $_c;
 $2 = $_lm;
 $3 = $0;
 $4 = $3 == 0.0;
 if ($4) {
  $_h = 0;
  $59 = $_h;
  STACKTOP = sp;return ($59|0);
 }
 $5 = $0;
 HEAPF32[$x>>2] = $5;
 $6 = HEAP32[$x>>2]|0;
 $7 = $6 >> 23;
 $8 = $7 & 255;
 $e = $8;
 $9 = HEAP32[$x>>2]|0;
 $10 = $9 & 8388607;
 $11 = $10 | 8388608;
 $m = $11;
 $12 = $e;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $m;
  $15 = $14 ^ 8388608;
  $m = $15;
  $16 = $e;
  $17 = (($16) + 1)|0;
  $e = $17;
 }
 $18 = $e;
 $19 = (($18) - 127)|0;
 $20 = $1;
 $21 = $20 << 24 >> 24;
 $22 = (($19) + ($21))|0;
 $e1 = $22;
 $23 = $e1;
 $24 = ($23|0)<=(1);
 if ($24) {
  $25 = $e1;
  $26 = ($25|0)<(1);
  if ($26) {
   $27 = $e1;
   $28 = (1 - ($27))|0;
   $29 = $m;
   $30 = $29 >> $28;
   $m = $30;
  }
  $e1 = 1;
  $31 = $m;
  $32 = $31 & 8388608;
  $33 = ($32|0)==(0);
  if ($33) {
   $e1 = 0;
  }
 }
 $34 = $m;
 $35 = $34 & 8388607;
 $m = $35;
 $36 = $e1;
 $37 = $2;
 $38 = $37&255;
 $39 = $36 << $38;
 $40 = $m;
 $41 = $2;
 $42 = $41&255;
 $43 = (23 - ($42))|0;
 $44 = (($43) - 1)|0;
 $45 = 1 << $44;
 $46 = (($40) + ($45))|0;
 $47 = $2;
 $48 = $47&255;
 $49 = (23 - ($48))|0;
 $50 = $46 >> $49;
 $51 = (($39) + ($50))|0;
 $_h = $51;
 $52 = HEAP32[$x>>2]|0;
 $53 = $52 >> 31;
 $s = $53;
 $54 = $_h;
 $55 = $s;
 $56 = $54 ^ $55;
 $57 = $s;
 $58 = (($56) - ($57))|0;
 $_h = $58;
 $59 = $_h;
 STACKTOP = sp;return ($59|0);
}
function _inputMBRow($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0.0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0.0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0.0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0.0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $b = 0, $b12 = 0, $b24 = 0, $b36 = 0, $b44 = 0, $b51 = 0, $b58 = 0, $b65 = 0, $b7 = 0, $b70 = 0, $b75 = 0, $bdExt = 0, $c = 0;
 var $c16 = 0, $c28 = 0, $cChannel = 0, $cChannel13 = 0, $cChannel2 = 0, $cChannel25 = 0, $cChannel37 = 0, $cChannel45 = 0, $cChannel52 = 0, $cChannel59 = 0, $cColumn = 0, $cPixelStride = 0, $cRow = 0, $cShift = 0, $cStride = 0, $cStride21 = 0, $cStride33 = 0, $cStride40 = 0, $cStride48 = 0, $cStride55 = 0;
 var $cfExt = 0, $cfInt = 0, $g = 0, $g11 = 0, $g23 = 0, $g35 = 0, $g43 = 0, $g50 = 0, $g57 = 0, $g6 = 0, $g64 = 0, $g69 = 0, $g74 = 0, $iB = 0, $iChannel = 0, $iChannel14 = 0, $iChannel26 = 0, $iChannel38 = 0, $iChannel4 = 0, $iChannel46 = 0;
 var $iChannel53 = 0, $iChannel60 = 0, $iColumn = 0, $iExp = 0, $iOffset = 0, $iOffset41 = 0, $iOffset62 = 0, $iOffset67 = 0, $iOffset72 = 0, $iOffset9 = 0, $iPos = 0, $iR = 0, $iRow = 0, $iRowStride = 0, $k = 0, $k19 = 0, $k31 = 0, $m = 0, $m17 = 0, $m29 = 0;
 var $nExpBias = 0, $nLen = 0, $pChannel = 0, $pChannel3 = 0, $pK = 0, $pK15 = 0, $pK27 = 0, $pSrc = 0, $pSrc0 = 0, $pSrc1 = 0, $pSrc20 = 0, $pSrc32 = 0, $pSrc39 = 0, $pSrc47 = 0, $pSrc54 = 0, $pSrc61 = 0, $pSrc66 = 0, $pSrc71 = 0, $pSrc8 = 0, $pU = 0;
 var $pV = 0, $pY = 0, $r = 0, $r10 = 0, $r22 = 0, $r34 = 0, $r42 = 0, $r49 = 0, $r5 = 0, $r56 = 0, $r63 = 0, $r68 = 0, $r73 = 0, $y = 0, $y18 = 0, $y30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pChannel = sp + 416|0;
 $pChannel3 = sp + 320|0;
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 34136|0);
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 $7 = $6 ? 3 : 0;
 $cShift = $7;
 $8 = $1;
 $9 = (($8) + 4|0);
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $bdExt = $11;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = (($13) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $cfExt = $15;
 $16 = $1;
 $17 = (($16) + 34136|0);
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $cfInt = $19;
 $20 = $1;
 $21 = (($20) + 4|0);
 $22 = (($21) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 3;
 $cPixelStride = $24;
 $25 = $cfExt;
 $26 = ($25|0)==(1);
 if ($26) {
  $38 = 1;
 } else {
  $27 = $1;
  $28 = (($27) + 84|0);
  $29 = (($28) + 32856|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $1;
   $33 = (($32) + 34136|0);
   $34 = (($33) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(1);
   $2406 = $36;
  } else {
   $2406 = 0;
  }
  $38 = $2406;
 }
 $37 = $38 ? 2 : 1;
 $iRowStride = $37;
 $39 = $1;
 $40 = (($39) + 32952|0);
 $41 = (($40) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $cRow = $42;
 $43 = $1;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $cColumn = $45;
 $46 = $1;
 $47 = (($46) + 4|0);
 $48 = (($47) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0);
 $51 = $50 ? 2 : 0;
 $iB = $51;
 $52 = $iB;
 $53 = (2 - ($52))|0;
 $iR = $53;
 $54 = $1;
 $55 = (($54) + 32952|0);
 $56 = HEAP32[$55>>2]|0;
 $pSrc0 = $56;
 $57 = $1;
 $58 = (($57) + 84|0);
 $59 = (($58) + 32840|0);
 $60 = HEAP8[$59>>0]|0;
 $nLen = $60;
 $61 = $1;
 $62 = (($61) + 84|0);
 $63 = (($62) + 32841|0);
 $64 = HEAP8[$63>>0]|0;
 $nExpBias = $64;
 $65 = $1;
 $66 = (($65) + 34756|0);
 $67 = HEAP32[$66>>2]|0;
 $pY = $67;
 $68 = $1;
 $69 = (($68) + 34756|0);
 $70 = (($69) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $pU = $71;
 $72 = $1;
 $73 = (($72) + 34756|0);
 $74 = (($73) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $pV = $75;
 $76 = $1;
 $77 = $cColumn;
 $78 = $cRow;
 $79 = (_checkImageBuffer($76,$77,$78)|0);
 $80 = ($79|0)!=(0);
 if ($80) {
  $0 = -1;
  $2405 = $0;
  STACKTOP = sp;return ($2405|0);
 }
 $81 = $1;
 $82 = (($81) + 34264|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)!=(0);
 if ($84) {
  $85 = $1;
  $86 = (($85) + 34884|0);
  $87 = HEAP32[$86>>2]|0;
  $pU = $87;
  $88 = $1;
  $89 = (($88) + 34888|0);
  $90 = HEAP32[$89>>2]|0;
  $pV = $90;
 } else {
  $91 = $cfInt;
  $92 = ($91|0)==(0);
  if ($92) {
   $93 = $pY;
   $pV = $93;
   $pU = $93;
  }
 }
 $iRow = 0;
 L18: while(1) {
  $94 = $iRow;
  $95 = ($94>>>0)<(16);
  if (!($95)) {
   label = 289;
   break;
  }
  $96 = $1;
  $97 = (($96) + 84|0);
  $98 = (($97) + 32856|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)!=(0);
  if ($100) {
   $101 = $pSrc0;
   $102 = $1;
   $103 = (($102) + 4|0);
   $104 = (($103) + 20|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (($101) + ($105<<2)|0);
   $pSrc = $106;
   $107 = $1;
   $108 = (($107) + 34136|0);
   $109 = (($108) + 8|0);
   $110 = HEAP32[$109>>2]|0;
   switch ($110|0) {
   case 2:  {
    $iColumn = 0;
    while(1) {
     $178 = $iColumn;
     $179 = $cColumn;
     $180 = ($178>>>0)<($179>>>0);
     if (!($180)) {
      break;
     }
     $181 = $cfInt;
     $182 = ($181|0)!=(0);
     if ($182) {
      $183 = $iColumn;
      $184 = $183 >>> 4;
      $185 = $184 << 7;
      $186 = $iColumn;
      $187 = $186 >>> 1;
      $188 = $187 & 7;
      $189 = $iRow;
      $190 = (14240 + ($189<<4)|0);
      $191 = (($190) + ($188)|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = $192&255;
      $194 = (($185) + ($193))|0;
      $iPos = $194;
      $195 = $pSrc;
      $196 = HEAP32[$195>>2]|0;
      $197 = $iPos;
      $198 = $pU;
      $199 = (($198) + ($197<<2)|0);
      HEAP32[$199>>2] = $196;
      $200 = $pSrc;
      $201 = (($200) + 8|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = $iPos;
      $204 = $pV;
      $205 = (($204) + ($203<<2)|0);
      HEAP32[$205>>2] = $202;
     }
     $206 = $pSrc;
     $207 = (($206) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $iColumn;
     $210 = $209 >>> 4;
     $211 = $210 << 8;
     $212 = $iColumn;
     $213 = $212 & 15;
     $214 = $iRow;
     $215 = (14240 + ($214<<4)|0);
     $216 = (($215) + ($213)|0);
     $217 = HEAP8[$216>>0]|0;
     $218 = $217&255;
     $219 = (($211) + ($218))|0;
     $220 = $pY;
     $221 = (($220) + ($219<<2)|0);
     HEAP32[$221>>2] = $208;
     $222 = $pSrc;
     $223 = (($222) + 12|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = $iColumn;
     $226 = (($225) + 1)|0;
     $227 = $226 >>> 4;
     $228 = $227 << 8;
     $229 = $iColumn;
     $230 = (($229) + 1)|0;
     $231 = $230 & 15;
     $232 = $iRow;
     $233 = (14240 + ($232<<4)|0);
     $234 = (($233) + ($231)|0);
     $235 = HEAP8[$234>>0]|0;
     $236 = $235&255;
     $237 = (($228) + ($236))|0;
     $238 = $pY;
     $239 = (($238) + ($237<<2)|0);
     HEAP32[$239>>2] = $224;
     $240 = $iColumn;
     $241 = (($240) + 2)|0;
     $iColumn = $241;
     $242 = $pSrc;
     $243 = (($242) + 16|0);
     $pSrc = $243;
    }
    break;
   }
   case 6: case 3: case 0:  {
    $111 = $1;
    $112 = (($111) + 34136|0);
    $113 = (($112) + 36|0);
    $114 = HEAP32[$113>>2]|0;
    $cChannel = $114;
    $115 = $cChannel;
    $116 = ($115>>>0)<=(16);
    if (!($116)) {
     label = 17;
     break L18;
    }
    $iChannel = 0;
    while(1) {
     $117 = $iChannel;
     $118 = $cChannel;
     $119 = ($117>>>0)<($118>>>0);
     if (!($119)) {
      break;
     }
     $120 = $iChannel;
     $121 = $120 & 15;
     $122 = $1;
     $123 = (($122) + 34756|0);
     $124 = (($123) + ($121<<2)|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $iChannel;
     $127 = $126 & 15;
     $128 = (($pChannel) + ($127<<2)|0);
     HEAP32[$128>>2] = $125;
     $129 = $iChannel;
     $130 = (($129) + 1)|0;
     $iChannel = $130;
    }
    $131 = $1;
    $132 = (($131) + 34264|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)!=(0);
    if ($134) {
     $135 = $1;
     $136 = (($135) + 34884|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (($pChannel) + 4|0);
     HEAP32[$138>>2] = $137;
     $139 = $1;
     $140 = (($139) + 34888|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($pChannel) + 8|0);
     HEAP32[$142>>2] = $141;
    }
    $iColumn = 0;
    while(1) {
     $143 = $iColumn;
     $144 = $cColumn;
     $145 = ($143>>>0)<($144>>>0);
     if (!($145)) {
      break;
     }
     $146 = $iColumn;
     $147 = $146 >>> 4;
     $148 = $147 << 8;
     $149 = $iColumn;
     $150 = $149 & 15;
     $151 = $iRow;
     $152 = (14240 + ($151<<4)|0);
     $153 = (($152) + ($150)|0);
     $154 = HEAP8[$153>>0]|0;
     $155 = $154&255;
     $156 = (($148) + ($155))|0;
     $iPos = $156;
     $iChannel = 0;
     while(1) {
      $157 = $iChannel;
      $158 = $cChannel;
      $159 = ($157>>>0)<($158>>>0);
      if (!($159)) {
       break;
      }
      $160 = $iChannel;
      $161 = $160 & 15;
      $162 = $pSrc;
      $163 = (($162) + ($161<<2)|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $iPos;
      $166 = $iChannel;
      $167 = $166 & 15;
      $168 = (($pChannel) + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (($169) + ($165<<2)|0);
      HEAP32[$170>>2] = $164;
      $171 = $iChannel;
      $172 = (($171) + 1)|0;
      $iChannel = $172;
     }
     $173 = $iColumn;
     $174 = (($173) + 1)|0;
     $iColumn = $174;
     $175 = $cChannel;
     $176 = $pSrc;
     $177 = (($176) + ($175<<2)|0);
     $pSrc = $177;
    }
    break;
   }
   case 1:  {
    $iColumn = 0;
    while(1) {
     $244 = $iColumn;
     $245 = $cColumn;
     $246 = ($244>>>0)<($245>>>0);
     if (!($246)) {
      break;
     }
     $247 = $cfInt;
     $248 = ($247|0)!=(0);
     if ($248) {
      $249 = $iColumn;
      $250 = $249 >>> 4;
      $251 = $250 << 6;
      $252 = $iColumn;
      $253 = $252 >>> 1;
      $254 = $253 & 7;
      $255 = $iRow;
      $256 = $255 >>> 1;
      $257 = (14496 + ($256<<3)|0);
      $258 = (($257) + ($254)|0);
      $259 = HEAP8[$258>>0]|0;
      $260 = $259&255;
      $261 = (($251) + ($260))|0;
      $iPos = $261;
      $262 = $pSrc;
      $263 = (($262) + 16|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = $iPos;
      $266 = $pU;
      $267 = (($266) + ($265<<2)|0);
      HEAP32[$267>>2] = $264;
      $268 = $pSrc;
      $269 = (($268) + 20|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = $iPos;
      $272 = $pV;
      $273 = (($272) + ($271<<2)|0);
      HEAP32[$273>>2] = $270;
     }
     $274 = $pSrc;
     $275 = HEAP32[$274>>2]|0;
     $276 = $iColumn;
     $277 = $276 >>> 4;
     $278 = $277 << 8;
     $279 = $iColumn;
     $280 = $279 & 15;
     $281 = $iRow;
     $282 = (14240 + ($281<<4)|0);
     $283 = (($282) + ($280)|0);
     $284 = HEAP8[$283>>0]|0;
     $285 = $284&255;
     $286 = (($278) + ($285))|0;
     $287 = $pY;
     $288 = (($287) + ($286<<2)|0);
     HEAP32[$288>>2] = $275;
     $289 = $pSrc;
     $290 = (($289) + 4|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = $iColumn;
     $293 = (($292) + 1)|0;
     $294 = $293 >>> 4;
     $295 = $294 << 8;
     $296 = $iColumn;
     $297 = (($296) + 1)|0;
     $298 = $297 & 15;
     $299 = $iRow;
     $300 = (14240 + ($299<<4)|0);
     $301 = (($300) + ($298)|0);
     $302 = HEAP8[$301>>0]|0;
     $303 = $302&255;
     $304 = (($295) + ($303))|0;
     $305 = $pY;
     $306 = (($305) + ($304<<2)|0);
     HEAP32[$306>>2] = $291;
     $307 = $pSrc;
     $308 = (($307) + 8|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = $iColumn;
     $311 = $310 >>> 4;
     $312 = $311 << 8;
     $313 = $iColumn;
     $314 = $313 & 15;
     $315 = $iRow;
     $316 = (($315) + 1)|0;
     $317 = (14240 + ($316<<4)|0);
     $318 = (($317) + ($314)|0);
     $319 = HEAP8[$318>>0]|0;
     $320 = $319&255;
     $321 = (($312) + ($320))|0;
     $322 = $pY;
     $323 = (($322) + ($321<<2)|0);
     HEAP32[$323>>2] = $309;
     $324 = $pSrc;
     $325 = (($324) + 12|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = $iColumn;
     $328 = (($327) + 1)|0;
     $329 = $328 >>> 4;
     $330 = $329 << 8;
     $331 = $iColumn;
     $332 = (($331) + 1)|0;
     $333 = $332 & 15;
     $334 = $iRow;
     $335 = (($334) + 1)|0;
     $336 = (14240 + ($335<<4)|0);
     $337 = (($336) + ($333)|0);
     $338 = HEAP8[$337>>0]|0;
     $339 = $338&255;
     $340 = (($330) + ($339))|0;
     $341 = $pY;
     $342 = (($341) + ($340<<2)|0);
     HEAP32[$342>>2] = $326;
     $343 = $iColumn;
     $344 = (($343) + 2)|0;
     $iColumn = $344;
     $345 = $pSrc;
     $346 = (($345) + 24|0);
     $pSrc = $346;
    }
    break;
   }
   default: {
    label = 47;
    break L18;
   }
   }
  } else {
   $347 = $bdExt;
   $348 = ($347|0)==(1);
   if ($348) {
    $349 = $pSrc0;
    $350 = $1;
    $351 = (($350) + 4|0);
    $352 = (($351) + 20|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = (($349) + ($353)|0);
    $pSrc1 = $354;
    $355 = $cShift;
    $356 = 128 << $355;
    $iOffset = $356;
    $357 = $cfExt;
    switch ($357|0) {
    case 8:  {
     $iColumn = 0;
     while(1) {
      $503 = $iColumn;
      $504 = $cColumn;
      $505 = ($503>>>0)<($504>>>0);
      if (!($505)) {
       break;
      }
      $506 = $pSrc1;
      $507 = (($506) + 3|0);
      $508 = HEAP8[$507>>0]|0;
      $509 = $508&255;
      $iExp = $509;
      $510 = $pSrc1;
      $511 = HEAP8[$510>>0]|0;
      $512 = $511&255;
      $513 = $iExp;
      $514 = (_forwardRGBE($512,$513)|0);
      $515 = $cShift;
      $516 = $514 << $515;
      $r5 = $516;
      $517 = $pSrc1;
      $518 = (($517) + 1|0);
      $519 = HEAP8[$518>>0]|0;
      $520 = $519&255;
      $521 = $iExp;
      $522 = (_forwardRGBE($520,$521)|0);
      $523 = $cShift;
      $524 = $522 << $523;
      $g6 = $524;
      $525 = $pSrc1;
      $526 = (($525) + 2|0);
      $527 = HEAP8[$526>>0]|0;
      $528 = $527&255;
      $529 = $iExp;
      $530 = (_forwardRGBE($528,$529)|0);
      $531 = $cShift;
      $532 = $530 << $531;
      $b7 = $532;
      $533 = $r5;
      $534 = $b7;
      $535 = (($534) - ($533))|0;
      $b7 = $535;
      $536 = $b7;
      $537 = (($536) + 1)|0;
      $538 = $537 >> 1;
      $539 = $g6;
      $540 = (($538) - ($539))|0;
      $541 = $r5;
      $542 = (($541) + ($540))|0;
      $r5 = $542;
      $543 = $r5;
      $544 = (($543) + 0)|0;
      $545 = $544 >> 1;
      $546 = $g6;
      $547 = (($546) + ($545))|0;
      $g6 = $547;
      $548 = $iColumn;
      $549 = $548 >>> 4;
      $550 = $549 << 8;
      $551 = $iColumn;
      $552 = $551 & 15;
      $553 = $iRow;
      $554 = (14240 + ($553<<4)|0);
      $555 = (($554) + ($552)|0);
      $556 = HEAP8[$555>>0]|0;
      $557 = $556&255;
      $558 = (($550) + ($557))|0;
      $iPos = $558;
      $559 = $r5;
      $560 = (0 - ($559))|0;
      $561 = $iPos;
      $562 = $pU;
      $563 = (($562) + ($561<<2)|0);
      HEAP32[$563>>2] = $560;
      $564 = $b7;
      $565 = $iPos;
      $566 = $pV;
      $567 = (($566) + ($565<<2)|0);
      HEAP32[$567>>2] = $564;
      $568 = $g6;
      $569 = $iPos;
      $570 = $pY;
      $571 = (($570) + ($569<<2)|0);
      HEAP32[$571>>2] = $568;
      $572 = $iColumn;
      $573 = (($572) + 1)|0;
      $iColumn = $573;
      $574 = $cPixelStride;
      $575 = $pSrc1;
      $576 = (($575) + ($574)|0);
      $pSrc1 = $576;
     }
     break;
    }
    case 2:  {
     $iColumn = 0;
     while(1) {
      $667 = $iColumn;
      $668 = $cColumn;
      $669 = ($667>>>0)<($668>>>0);
      if (!($669)) {
       break;
      }
      $670 = $cfInt;
      $671 = ($670|0)!=(0);
      if ($671) {
       $672 = $iColumn;
       $673 = $672 >>> 4;
       $674 = $673 << 7;
       $675 = $iColumn;
       $676 = $675 >>> 1;
       $677 = $676 & 7;
       $678 = $iRow;
       $679 = (14240 + ($678<<4)|0);
       $680 = (($679) + ($677)|0);
       $681 = HEAP8[$680>>0]|0;
       $682 = $681&255;
       $683 = (($674) + ($682))|0;
       $iPos = $683;
       $684 = $pSrc1;
       $685 = HEAP8[$684>>0]|0;
       $686 = $685&255;
       $687 = $cShift;
       $688 = $686 << $687;
       $689 = $iOffset;
       $690 = (($688) - ($689))|0;
       $691 = $iPos;
       $692 = $pU;
       $693 = (($692) + ($691<<2)|0);
       HEAP32[$693>>2] = $690;
       $694 = $pSrc1;
       $695 = (($694) + 2|0);
       $696 = HEAP8[$695>>0]|0;
       $697 = $696&255;
       $698 = $cShift;
       $699 = $697 << $698;
       $700 = $iOffset;
       $701 = (($699) - ($700))|0;
       $702 = $iPos;
       $703 = $pV;
       $704 = (($703) + ($702<<2)|0);
       HEAP32[$704>>2] = $701;
      }
      $705 = $pSrc1;
      $706 = (($705) + 1|0);
      $707 = HEAP8[$706>>0]|0;
      $708 = $707&255;
      $709 = $cShift;
      $710 = $708 << $709;
      $711 = $iOffset;
      $712 = (($710) - ($711))|0;
      $713 = $iColumn;
      $714 = $713 >>> 4;
      $715 = $714 << 8;
      $716 = $iColumn;
      $717 = $716 & 15;
      $718 = $iRow;
      $719 = (14240 + ($718<<4)|0);
      $720 = (($719) + ($717)|0);
      $721 = HEAP8[$720>>0]|0;
      $722 = $721&255;
      $723 = (($715) + ($722))|0;
      $724 = $pY;
      $725 = (($724) + ($723<<2)|0);
      HEAP32[$725>>2] = $712;
      $726 = $pSrc1;
      $727 = (($726) + 3|0);
      $728 = HEAP8[$727>>0]|0;
      $729 = $728&255;
      $730 = $cShift;
      $731 = $729 << $730;
      $732 = $iOffset;
      $733 = (($731) - ($732))|0;
      $734 = $iColumn;
      $735 = (($734) + 1)|0;
      $736 = $735 >>> 4;
      $737 = $736 << 8;
      $738 = $iColumn;
      $739 = (($738) + 1)|0;
      $740 = $739 & 15;
      $741 = $iRow;
      $742 = (14240 + ($741<<4)|0);
      $743 = (($742) + ($740)|0);
      $744 = HEAP8[$743>>0]|0;
      $745 = $744&255;
      $746 = (($737) + ($745))|0;
      $747 = $pY;
      $748 = (($747) + ($746<<2)|0);
      HEAP32[$748>>2] = $733;
      $749 = $iColumn;
      $750 = (($749) + 2)|0;
      $iColumn = $750;
      $751 = $cPixelStride;
      $752 = $pSrc1;
      $753 = (($752) + ($751)|0);
      $pSrc1 = $753;
     }
     break;
    }
    case 4:  {
     $577 = $cfInt;
     $578 = ($577|0)==(4);
     if ($578) {
      $579 = $1;
      $580 = (($579) + 34756|0);
      $581 = (($580) + 12|0);
      $582 = HEAP32[$581>>2]|0;
      $584 = $582;
     } else {
      $583 = $pY;
      $584 = $583;
     }
     $pK = $584;
     $iColumn = 0;
     while(1) {
      $585 = $iColumn;
      $586 = $cColumn;
      $587 = ($585>>>0)<($586>>>0);
      if (!($587)) {
       break;
      }
      $588 = $pSrc1;
      $589 = HEAP8[$588>>0]|0;
      $590 = $589&255;
      $591 = $cShift;
      $592 = $590 << $591;
      $c = $592;
      $593 = $pSrc1;
      $594 = (($593) + 1|0);
      $595 = HEAP8[$594>>0]|0;
      $596 = $595&255;
      $597 = $cShift;
      $598 = $596 << $597;
      $m = $598;
      $599 = $pSrc1;
      $600 = (($599) + 2|0);
      $601 = HEAP8[$600>>0]|0;
      $602 = $601&255;
      $603 = $cShift;
      $604 = $602 << $603;
      $y = $604;
      $605 = $pSrc1;
      $606 = (($605) + 3|0);
      $607 = HEAP8[$606>>0]|0;
      $608 = $607&255;
      $609 = $cShift;
      $610 = $608 << $609;
      $k = $610;
      $611 = $c;
      $612 = $y;
      $613 = (($612) - ($611))|0;
      $y = $613;
      $614 = $y;
      $615 = (($614) + 1)|0;
      $616 = $615 >> 1;
      $617 = $m;
      $618 = (($616) - ($617))|0;
      $619 = $c;
      $620 = (($619) + ($618))|0;
      $c = $620;
      $621 = $c;
      $622 = $621 >> 1;
      $623 = $k;
      $624 = (($622) - ($623))|0;
      $625 = $m;
      $626 = (($625) + ($624))|0;
      $m = $626;
      $627 = $m;
      $628 = (($627) + 1)|0;
      $629 = $628 >> 1;
      $630 = $k;
      $631 = (($630) + ($629))|0;
      $k = $631;
      $632 = $iColumn;
      $633 = $632 >>> 4;
      $634 = $633 << 8;
      $635 = $iColumn;
      $636 = $635 & 15;
      $637 = $iRow;
      $638 = (14240 + ($637<<4)|0);
      $639 = (($638) + ($636)|0);
      $640 = HEAP8[$639>>0]|0;
      $641 = $640&255;
      $642 = (($634) + ($641))|0;
      $iPos = $642;
      $643 = $c;
      $644 = $iPos;
      $645 = $pU;
      $646 = (($645) + ($644<<2)|0);
      HEAP32[$646>>2] = $643;
      $647 = $y;
      $648 = (0 - ($647))|0;
      $649 = $iPos;
      $650 = $pV;
      $651 = (($650) + ($649<<2)|0);
      HEAP32[$651>>2] = $648;
      $652 = $k;
      $653 = $iPos;
      $654 = $pK;
      $655 = (($654) + ($653<<2)|0);
      HEAP32[$655>>2] = $652;
      $656 = $iOffset;
      $657 = $m;
      $658 = (($656) - ($657))|0;
      $659 = $iPos;
      $660 = $pY;
      $661 = (($660) + ($659<<2)|0);
      HEAP32[$661>>2] = $658;
      $662 = $iColumn;
      $663 = (($662) + 1)|0;
      $iColumn = $663;
      $664 = $cPixelStride;
      $665 = $pSrc1;
      $666 = (($665) + ($664)|0);
      $pSrc1 = $666;
     }
     break;
    }
    case 1:  {
     $iColumn = 0;
     while(1) {
      $754 = $iColumn;
      $755 = $cColumn;
      $756 = ($754>>>0)<($755>>>0);
      if (!($756)) {
       break;
      }
      $757 = $cfInt;
      $758 = ($757|0)!=(0);
      if ($758) {
       $759 = $iColumn;
       $760 = $759 >>> 4;
       $761 = $760 << 6;
       $762 = $iColumn;
       $763 = $762 >>> 1;
       $764 = $763 & 7;
       $765 = $iRow;
       $766 = $765 >>> 1;
       $767 = (14496 + ($766<<3)|0);
       $768 = (($767) + ($764)|0);
       $769 = HEAP8[$768>>0]|0;
       $770 = $769&255;
       $771 = (($761) + ($770))|0;
       $iPos = $771;
       $772 = $pSrc1;
       $773 = (($772) + 4|0);
       $774 = HEAP8[$773>>0]|0;
       $775 = $774&255;
       $776 = $cShift;
       $777 = $775 << $776;
       $778 = $iOffset;
       $779 = (($777) - ($778))|0;
       $780 = $iPos;
       $781 = $pU;
       $782 = (($781) + ($780<<2)|0);
       HEAP32[$782>>2] = $779;
       $783 = $pSrc1;
       $784 = (($783) + 5|0);
       $785 = HEAP8[$784>>0]|0;
       $786 = $785&255;
       $787 = $cShift;
       $788 = $786 << $787;
       $789 = $iOffset;
       $790 = (($788) - ($789))|0;
       $791 = $iPos;
       $792 = $pV;
       $793 = (($792) + ($791<<2)|0);
       HEAP32[$793>>2] = $790;
      }
      $794 = $pSrc1;
      $795 = HEAP8[$794>>0]|0;
      $796 = $795&255;
      $797 = $cShift;
      $798 = $796 << $797;
      $799 = $iOffset;
      $800 = (($798) - ($799))|0;
      $801 = $iColumn;
      $802 = $801 >>> 4;
      $803 = $802 << 8;
      $804 = $iColumn;
      $805 = $804 & 15;
      $806 = $iRow;
      $807 = (14240 + ($806<<4)|0);
      $808 = (($807) + ($805)|0);
      $809 = HEAP8[$808>>0]|0;
      $810 = $809&255;
      $811 = (($803) + ($810))|0;
      $812 = $pY;
      $813 = (($812) + ($811<<2)|0);
      HEAP32[$813>>2] = $800;
      $814 = $pSrc1;
      $815 = (($814) + 1|0);
      $816 = HEAP8[$815>>0]|0;
      $817 = $816&255;
      $818 = $cShift;
      $819 = $817 << $818;
      $820 = $iOffset;
      $821 = (($819) - ($820))|0;
      $822 = $iColumn;
      $823 = (($822) + 1)|0;
      $824 = $823 >>> 4;
      $825 = $824 << 8;
      $826 = $iColumn;
      $827 = (($826) + 1)|0;
      $828 = $827 & 15;
      $829 = $iRow;
      $830 = (14240 + ($829<<4)|0);
      $831 = (($830) + ($828)|0);
      $832 = HEAP8[$831>>0]|0;
      $833 = $832&255;
      $834 = (($825) + ($833))|0;
      $835 = $pY;
      $836 = (($835) + ($834<<2)|0);
      HEAP32[$836>>2] = $821;
      $837 = $pSrc1;
      $838 = (($837) + 2|0);
      $839 = HEAP8[$838>>0]|0;
      $840 = $839&255;
      $841 = $cShift;
      $842 = $840 << $841;
      $843 = $iOffset;
      $844 = (($842) - ($843))|0;
      $845 = $iColumn;
      $846 = $845 >>> 4;
      $847 = $846 << 8;
      $848 = $iColumn;
      $849 = $848 & 15;
      $850 = $iRow;
      $851 = (($850) + 1)|0;
      $852 = (14240 + ($851<<4)|0);
      $853 = (($852) + ($849)|0);
      $854 = HEAP8[$853>>0]|0;
      $855 = $854&255;
      $856 = (($847) + ($855))|0;
      $857 = $pY;
      $858 = (($857) + ($856<<2)|0);
      HEAP32[$858>>2] = $844;
      $859 = $pSrc1;
      $860 = (($859) + 3|0);
      $861 = HEAP8[$860>>0]|0;
      $862 = $861&255;
      $863 = $cShift;
      $864 = $862 << $863;
      $865 = $iOffset;
      $866 = (($864) - ($865))|0;
      $867 = $iColumn;
      $868 = (($867) + 1)|0;
      $869 = $868 >>> 4;
      $870 = $869 << 8;
      $871 = $iColumn;
      $872 = (($871) + 1)|0;
      $873 = $872 & 15;
      $874 = $iRow;
      $875 = (($874) + 1)|0;
      $876 = (14240 + ($875<<4)|0);
      $877 = (($876) + ($873)|0);
      $878 = HEAP8[$877>>0]|0;
      $879 = $878&255;
      $880 = (($870) + ($879))|0;
      $881 = $pY;
      $882 = (($881) + ($880<<2)|0);
      HEAP32[$882>>2] = $866;
      $883 = $iColumn;
      $884 = (($883) + 2)|0;
      $iColumn = $884;
      $885 = $cPixelStride;
      $886 = $pSrc1;
      $887 = (($886) + ($885)|0);
      $pSrc1 = $887;
     }
     break;
    }
    case 7:  {
     $358 = $1;
     $359 = (($358) + 35036|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = ($360|0)==(0);
     if (!($361)) {
      label = 52;
      break L18;
     }
     $iColumn = 0;
     while(1) {
      $362 = $iColumn;
      $363 = $cColumn;
      $364 = ($362>>>0)<($363>>>0);
      if (!($364)) {
       break;
      }
      $365 = $iR;
      $366 = $pSrc1;
      $367 = (($366) + ($365)|0);
      $368 = HEAP8[$367>>0]|0;
      $369 = $368&255;
      $370 = $cShift;
      $371 = $369 << $370;
      $r = $371;
      $372 = $pSrc1;
      $373 = (($372) + 1|0);
      $374 = HEAP8[$373>>0]|0;
      $375 = $374&255;
      $376 = $cShift;
      $377 = $375 << $376;
      $g = $377;
      $378 = $iB;
      $379 = $pSrc1;
      $380 = (($379) + ($378)|0);
      $381 = HEAP8[$380>>0]|0;
      $382 = $381&255;
      $383 = $cShift;
      $384 = $382 << $383;
      $b = $384;
      $385 = $r;
      $386 = $b;
      $387 = (($386) - ($385))|0;
      $b = $387;
      $388 = $b;
      $389 = (($388) + 1)|0;
      $390 = $389 >> 1;
      $391 = $g;
      $392 = (($390) - ($391))|0;
      $393 = $r;
      $394 = (($393) + ($392))|0;
      $r = $394;
      $395 = $r;
      $396 = (($395) + 0)|0;
      $397 = $396 >> 1;
      $398 = $g;
      $399 = (($398) + ($397))|0;
      $g = $399;
      $400 = $iColumn;
      $401 = $400 >>> 4;
      $402 = $401 << 8;
      $403 = $iColumn;
      $404 = $403 & 15;
      $405 = $iRow;
      $406 = (14240 + ($405<<4)|0);
      $407 = (($406) + ($404)|0);
      $408 = HEAP8[$407>>0]|0;
      $409 = $408&255;
      $410 = (($402) + ($409))|0;
      $iPos = $410;
      $411 = $r;
      $412 = (0 - ($411))|0;
      $413 = $iPos;
      $414 = $pU;
      $415 = (($414) + ($413<<2)|0);
      HEAP32[$415>>2] = $412;
      $416 = $b;
      $417 = $iPos;
      $418 = $pV;
      $419 = (($418) + ($417<<2)|0);
      HEAP32[$419>>2] = $416;
      $420 = $g;
      $421 = $iOffset;
      $422 = (($420) - ($421))|0;
      $423 = $iPos;
      $424 = $pY;
      $425 = (($424) + ($423<<2)|0);
      HEAP32[$425>>2] = $422;
      $426 = $iColumn;
      $427 = (($426) + 1)|0;
      $iColumn = $427;
      $428 = $cPixelStride;
      $429 = $pSrc1;
      $430 = (($429) + ($428)|0);
      $pSrc1 = $430;
     }
     break;
    }
    case 6: case 3: case 0:  {
     $431 = $1;
     $432 = (($431) + 34136|0);
     $433 = (($432) + 36|0);
     $434 = HEAP32[$433>>2]|0;
     $cChannel2 = $434;
     $435 = $cChannel2;
     $436 = ($435>>>0)<=(16);
     if (!($436)) {
      label = 59;
      break L18;
     }
     $iChannel4 = 0;
     while(1) {
      $437 = $iChannel4;
      $438 = $cChannel2;
      $439 = ($437>>>0)<($438>>>0);
      if (!($439)) {
       break;
      }
      $440 = $iChannel4;
      $441 = $440 & 15;
      $442 = $1;
      $443 = (($442) + 34756|0);
      $444 = (($443) + ($441<<2)|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = $iChannel4;
      $447 = $446 & 15;
      $448 = (($pChannel3) + ($447<<2)|0);
      HEAP32[$448>>2] = $445;
      $449 = $iChannel4;
      $450 = (($449) + 1)|0;
      $iChannel4 = $450;
     }
     $451 = $1;
     $452 = (($451) + 34264|0);
     $453 = HEAP32[$452>>2]|0;
     $454 = ($453|0)!=(0);
     if ($454) {
      $455 = $1;
      $456 = (($455) + 34884|0);
      $457 = HEAP32[$456>>2]|0;
      $458 = (($pChannel3) + 4|0);
      HEAP32[$458>>2] = $457;
      $459 = $1;
      $460 = (($459) + 34888|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = (($pChannel3) + 8|0);
      HEAP32[$462>>2] = $461;
     }
     $iColumn = 0;
     while(1) {
      $463 = $iColumn;
      $464 = $cColumn;
      $465 = ($463>>>0)<($464>>>0);
      if (!($465)) {
       break;
      }
      $466 = $iColumn;
      $467 = $466 >>> 4;
      $468 = $467 << 8;
      $469 = $iColumn;
      $470 = $469 & 15;
      $471 = $iRow;
      $472 = (14240 + ($471<<4)|0);
      $473 = (($472) + ($470)|0);
      $474 = HEAP8[$473>>0]|0;
      $475 = $474&255;
      $476 = (($468) + ($475))|0;
      $iPos = $476;
      $iChannel4 = 0;
      while(1) {
       $477 = $iChannel4;
       $478 = $cChannel2;
       $479 = ($477>>>0)<($478>>>0);
       if (!($479)) {
        break;
       }
       $480 = $iChannel4;
       $481 = $480 & 15;
       $482 = $pSrc1;
       $483 = (($482) + ($481)|0);
       $484 = HEAP8[$483>>0]|0;
       $485 = $484&255;
       $486 = $cShift;
       $487 = $485 << $486;
       $488 = $iOffset;
       $489 = (($487) - ($488))|0;
       $490 = $iPos;
       $491 = $iChannel4;
       $492 = $491 & 15;
       $493 = (($pChannel3) + ($492<<2)|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = (($494) + ($490<<2)|0);
       HEAP32[$495>>2] = $489;
       $496 = $iChannel4;
       $497 = (($496) + 1)|0;
       $iChannel4 = $497;
      }
      $498 = $iColumn;
      $499 = (($498) + 1)|0;
      $iColumn = $499;
      $500 = $cPixelStride;
      $501 = $pSrc1;
      $502 = (($501) + ($500)|0);
      $pSrc1 = $502;
     }
     break;
    }
    default: {
     label = 102;
     break L18;
    }
    }
   } else {
    $888 = $bdExt;
    $889 = ($888|0)==(2);
    if ($889) {
     $890 = $pSrc0;
     $891 = $1;
     $892 = (($891) + 4|0);
     $893 = (($892) + 20|0);
     $894 = HEAP32[$893>>2]|0;
     $895 = (($890) + ($894<<1)|0);
     $pSrc8 = $895;
     $896 = $cPixelStride;
     $897 = (($896>>>0) / 2)&-1;
     $cStride = $897;
     $898 = $nLen;
     $899 = $898&255;
     $900 = 32768 >> $899;
     $901 = $cShift;
     $902 = $900 << $901;
     $iOffset9 = $902;
     $903 = $cfExt;
     switch ($903|0) {
     case 1:  {
      $iColumn = 0;
      while(1) {
       $1215 = $iColumn;
       $1216 = $cColumn;
       $1217 = ($1215>>>0)<($1216>>>0);
       if (!($1217)) {
        break;
       }
       $1218 = $cfInt;
       $1219 = ($1218|0)!=(0);
       if ($1219) {
        $1220 = $iColumn;
        $1221 = $1220 >>> 4;
        $1222 = $1221 << 6;
        $1223 = $iColumn;
        $1224 = $1223 >>> 1;
        $1225 = $1224 & 7;
        $1226 = $iRow;
        $1227 = $1226 >>> 1;
        $1228 = (14496 + ($1227<<3)|0);
        $1229 = (($1228) + ($1225)|0);
        $1230 = HEAP8[$1229>>0]|0;
        $1231 = $1230&255;
        $1232 = (($1222) + ($1231))|0;
        $iPos = $1232;
        $1233 = $pSrc8;
        $1234 = (($1233) + 8|0);
        $1235 = HEAP16[$1234>>1]|0;
        $1236 = $1235&65535;
        $1237 = $cShift;
        $1238 = $1236 << $1237;
        $1239 = $iOffset9;
        $1240 = (($1238) - ($1239))|0;
        $1241 = $iPos;
        $1242 = $pU;
        $1243 = (($1242) + ($1241<<2)|0);
        HEAP32[$1243>>2] = $1240;
        $1244 = $pSrc8;
        $1245 = (($1244) + 10|0);
        $1246 = HEAP16[$1245>>1]|0;
        $1247 = $1246&65535;
        $1248 = $cShift;
        $1249 = $1247 << $1248;
        $1250 = $iOffset9;
        $1251 = (($1249) - ($1250))|0;
        $1252 = $iPos;
        $1253 = $pV;
        $1254 = (($1253) + ($1252<<2)|0);
        HEAP32[$1254>>2] = $1251;
       }
       $1255 = $pSrc8;
       $1256 = HEAP16[$1255>>1]|0;
       $1257 = $1256&65535;
       $1258 = $cShift;
       $1259 = $1257 << $1258;
       $1260 = $iOffset9;
       $1261 = (($1259) - ($1260))|0;
       $1262 = $iColumn;
       $1263 = $1262 >>> 4;
       $1264 = $1263 << 8;
       $1265 = $iColumn;
       $1266 = $1265 & 15;
       $1267 = $iRow;
       $1268 = (14240 + ($1267<<4)|0);
       $1269 = (($1268) + ($1266)|0);
       $1270 = HEAP8[$1269>>0]|0;
       $1271 = $1270&255;
       $1272 = (($1264) + ($1271))|0;
       $1273 = $pY;
       $1274 = (($1273) + ($1272<<2)|0);
       HEAP32[$1274>>2] = $1261;
       $1275 = $pSrc8;
       $1276 = (($1275) + 2|0);
       $1277 = HEAP16[$1276>>1]|0;
       $1278 = $1277&65535;
       $1279 = $cShift;
       $1280 = $1278 << $1279;
       $1281 = $iOffset9;
       $1282 = (($1280) - ($1281))|0;
       $1283 = $iColumn;
       $1284 = (($1283) + 1)|0;
       $1285 = $1284 >>> 4;
       $1286 = $1285 << 8;
       $1287 = $iColumn;
       $1288 = (($1287) + 1)|0;
       $1289 = $1288 & 15;
       $1290 = $iRow;
       $1291 = (14240 + ($1290<<4)|0);
       $1292 = (($1291) + ($1289)|0);
       $1293 = HEAP8[$1292>>0]|0;
       $1294 = $1293&255;
       $1295 = (($1286) + ($1294))|0;
       $1296 = $pY;
       $1297 = (($1296) + ($1295<<2)|0);
       HEAP32[$1297>>2] = $1282;
       $1298 = $pSrc8;
       $1299 = (($1298) + 4|0);
       $1300 = HEAP16[$1299>>1]|0;
       $1301 = $1300&65535;
       $1302 = $cShift;
       $1303 = $1301 << $1302;
       $1304 = $iOffset9;
       $1305 = (($1303) - ($1304))|0;
       $1306 = $iColumn;
       $1307 = $1306 >>> 4;
       $1308 = $1307 << 8;
       $1309 = $iColumn;
       $1310 = $1309 & 15;
       $1311 = $iRow;
       $1312 = (($1311) + 1)|0;
       $1313 = (14240 + ($1312<<4)|0);
       $1314 = (($1313) + ($1310)|0);
       $1315 = HEAP8[$1314>>0]|0;
       $1316 = $1315&255;
       $1317 = (($1308) + ($1316))|0;
       $1318 = $pY;
       $1319 = (($1318) + ($1317<<2)|0);
       HEAP32[$1319>>2] = $1305;
       $1320 = $pSrc8;
       $1321 = (($1320) + 6|0);
       $1322 = HEAP16[$1321>>1]|0;
       $1323 = $1322&65535;
       $1324 = $cShift;
       $1325 = $1323 << $1324;
       $1326 = $iOffset9;
       $1327 = (($1325) - ($1326))|0;
       $1328 = $iColumn;
       $1329 = (($1328) + 1)|0;
       $1330 = $1329 >>> 4;
       $1331 = $1330 << 8;
       $1332 = $iColumn;
       $1333 = (($1332) + 1)|0;
       $1334 = $1333 & 15;
       $1335 = $iRow;
       $1336 = (($1335) + 1)|0;
       $1337 = (14240 + ($1336<<4)|0);
       $1338 = (($1337) + ($1334)|0);
       $1339 = HEAP8[$1338>>0]|0;
       $1340 = $1339&255;
       $1341 = (($1331) + ($1340))|0;
       $1342 = $pY;
       $1343 = (($1342) + ($1341<<2)|0);
       HEAP32[$1343>>2] = $1327;
       $1344 = $iColumn;
       $1345 = (($1344) + 2)|0;
       $iColumn = $1345;
       $1346 = $cStride;
       $1347 = $pSrc8;
       $1348 = (($1347) + ($1346<<1)|0);
       $pSrc8 = $1348;
      }
      break;
     }
     case 7:  {
      $iColumn = 0;
      while(1) {
       $904 = $iColumn;
       $905 = $cColumn;
       $906 = ($904>>>0)<($905>>>0);
       if (!($906)) {
        break;
       }
       $907 = $pSrc8;
       $908 = HEAP16[$907>>1]|0;
       $909 = $908&65535;
       $910 = $nLen;
       $911 = $910&255;
       $912 = $909 >> $911;
       $913 = $cShift;
       $914 = $912 << $913;
       $r10 = $914;
       $915 = $pSrc8;
       $916 = (($915) + 2|0);
       $917 = HEAP16[$916>>1]|0;
       $918 = $917&65535;
       $919 = $nLen;
       $920 = $919&255;
       $921 = $918 >> $920;
       $922 = $cShift;
       $923 = $921 << $922;
       $g11 = $923;
       $924 = $pSrc8;
       $925 = (($924) + 4|0);
       $926 = HEAP16[$925>>1]|0;
       $927 = $926&65535;
       $928 = $nLen;
       $929 = $928&255;
       $930 = $927 >> $929;
       $931 = $cShift;
       $932 = $930 << $931;
       $b12 = $932;
       $933 = $r10;
       $934 = $b12;
       $935 = (($934) - ($933))|0;
       $b12 = $935;
       $936 = $b12;
       $937 = (($936) + 1)|0;
       $938 = $937 >> 1;
       $939 = $g11;
       $940 = (($938) - ($939))|0;
       $941 = $r10;
       $942 = (($941) + ($940))|0;
       $r10 = $942;
       $943 = $r10;
       $944 = (($943) + 0)|0;
       $945 = $944 >> 1;
       $946 = $g11;
       $947 = (($946) + ($945))|0;
       $g11 = $947;
       $948 = $iColumn;
       $949 = $948 >>> 4;
       $950 = $949 << 8;
       $951 = $iColumn;
       $952 = $951 & 15;
       $953 = $iRow;
       $954 = (14240 + ($953<<4)|0);
       $955 = (($954) + ($952)|0);
       $956 = HEAP8[$955>>0]|0;
       $957 = $956&255;
       $958 = (($950) + ($957))|0;
       $iPos = $958;
       $959 = $r10;
       $960 = (0 - ($959))|0;
       $961 = $iPos;
       $962 = $pU;
       $963 = (($962) + ($961<<2)|0);
       HEAP32[$963>>2] = $960;
       $964 = $b12;
       $965 = $iPos;
       $966 = $pV;
       $967 = (($966) + ($965<<2)|0);
       HEAP32[$967>>2] = $964;
       $968 = $g11;
       $969 = $iOffset9;
       $970 = (($968) - ($969))|0;
       $971 = $iPos;
       $972 = $pY;
       $973 = (($972) + ($971<<2)|0);
       HEAP32[$973>>2] = $970;
       $974 = $iColumn;
       $975 = (($974) + 1)|0;
       $iColumn = $975;
       $976 = $cStride;
       $977 = $pSrc8;
       $978 = (($977) + ($976<<1)|0);
       $pSrc8 = $978;
      }
      break;
     }
     case 4:  {
      $1026 = $cfInt;
      $1027 = ($1026|0)==(4);
      if ($1027) {
       $1028 = $1;
       $1029 = (($1028) + 34756|0);
       $1030 = (($1029) + 12|0);
       $1031 = HEAP32[$1030>>2]|0;
       $1033 = $1031;
      } else {
       $1032 = $pY;
       $1033 = $1032;
      }
      $pK15 = $1033;
      $iColumn = 0;
      while(1) {
       $1034 = $iColumn;
       $1035 = $cColumn;
       $1036 = ($1034>>>0)<($1035>>>0);
       if (!($1036)) {
        break;
       }
       $1037 = $pSrc8;
       $1038 = HEAP16[$1037>>1]|0;
       $1039 = $1038&65535;
       $1040 = $nLen;
       $1041 = $1040&255;
       $1042 = $1039 >> $1041;
       $1043 = $cShift;
       $1044 = $1042 << $1043;
       $c16 = $1044;
       $1045 = $pSrc8;
       $1046 = (($1045) + 2|0);
       $1047 = HEAP16[$1046>>1]|0;
       $1048 = $1047&65535;
       $1049 = $nLen;
       $1050 = $1049&255;
       $1051 = $1048 >> $1050;
       $1052 = $cShift;
       $1053 = $1051 << $1052;
       $m17 = $1053;
       $1054 = $pSrc8;
       $1055 = (($1054) + 4|0);
       $1056 = HEAP16[$1055>>1]|0;
       $1057 = $1056&65535;
       $1058 = $nLen;
       $1059 = $1058&255;
       $1060 = $1057 >> $1059;
       $1061 = $cShift;
       $1062 = $1060 << $1061;
       $y18 = $1062;
       $1063 = $pSrc8;
       $1064 = (($1063) + 6|0);
       $1065 = HEAP16[$1064>>1]|0;
       $1066 = $1065&65535;
       $1067 = $nLen;
       $1068 = $1067&255;
       $1069 = $1066 >> $1068;
       $1070 = $cShift;
       $1071 = $1069 << $1070;
       $k19 = $1071;
       $1072 = $c16;
       $1073 = $y18;
       $1074 = (($1073) - ($1072))|0;
       $y18 = $1074;
       $1075 = $y18;
       $1076 = (($1075) + 1)|0;
       $1077 = $1076 >> 1;
       $1078 = $m17;
       $1079 = (($1077) - ($1078))|0;
       $1080 = $c16;
       $1081 = (($1080) + ($1079))|0;
       $c16 = $1081;
       $1082 = $c16;
       $1083 = $1082 >> 1;
       $1084 = $k19;
       $1085 = (($1083) - ($1084))|0;
       $1086 = $m17;
       $1087 = (($1086) + ($1085))|0;
       $m17 = $1087;
       $1088 = $m17;
       $1089 = (($1088) + 1)|0;
       $1090 = $1089 >> 1;
       $1091 = $k19;
       $1092 = (($1091) + ($1090))|0;
       $k19 = $1092;
       $1093 = $iColumn;
       $1094 = $1093 >>> 4;
       $1095 = $1094 << 8;
       $1096 = $iColumn;
       $1097 = $1096 & 15;
       $1098 = $iRow;
       $1099 = (14240 + ($1098<<4)|0);
       $1100 = (($1099) + ($1097)|0);
       $1101 = HEAP8[$1100>>0]|0;
       $1102 = $1101&255;
       $1103 = (($1095) + ($1102))|0;
       $iPos = $1103;
       $1104 = $c16;
       $1105 = $iPos;
       $1106 = $pU;
       $1107 = (($1106) + ($1105<<2)|0);
       HEAP32[$1107>>2] = $1104;
       $1108 = $y18;
       $1109 = (0 - ($1108))|0;
       $1110 = $iPos;
       $1111 = $pV;
       $1112 = (($1111) + ($1110<<2)|0);
       HEAP32[$1112>>2] = $1109;
       $1113 = $k19;
       $1114 = $iPos;
       $1115 = $pK15;
       $1116 = (($1115) + ($1114<<2)|0);
       HEAP32[$1116>>2] = $1113;
       $1117 = $iOffset9;
       $1118 = $m17;
       $1119 = (($1117) - ($1118))|0;
       $1120 = $iPos;
       $1121 = $pY;
       $1122 = (($1121) + ($1120<<2)|0);
       HEAP32[$1122>>2] = $1119;
       $1123 = $iColumn;
       $1124 = (($1123) + 1)|0;
       $iColumn = $1124;
       $1125 = $cStride;
       $1126 = $pSrc8;
       $1127 = (($1126) + ($1125<<1)|0);
       $pSrc8 = $1127;
      }
      break;
     }
     case 2:  {
      $iColumn = 0;
      while(1) {
       $1128 = $iColumn;
       $1129 = $cColumn;
       $1130 = ($1128>>>0)<($1129>>>0);
       if (!($1130)) {
        break;
       }
       $1131 = $cfInt;
       $1132 = ($1131|0)!=(0);
       if ($1132) {
        $1133 = $iColumn;
        $1134 = $1133 >>> 4;
        $1135 = $1134 << 7;
        $1136 = $iColumn;
        $1137 = $1136 >>> 1;
        $1138 = $1137 & 7;
        $1139 = $iRow;
        $1140 = (14240 + ($1139<<4)|0);
        $1141 = (($1140) + ($1138)|0);
        $1142 = HEAP8[$1141>>0]|0;
        $1143 = $1142&255;
        $1144 = (($1135) + ($1143))|0;
        $iPos = $1144;
        $1145 = $pSrc8;
        $1146 = HEAP16[$1145>>1]|0;
        $1147 = $1146&65535;
        $1148 = $cShift;
        $1149 = $1147 << $1148;
        $1150 = $iOffset9;
        $1151 = (($1149) - ($1150))|0;
        $1152 = $iPos;
        $1153 = $pU;
        $1154 = (($1153) + ($1152<<2)|0);
        HEAP32[$1154>>2] = $1151;
        $1155 = $pSrc8;
        $1156 = (($1155) + 4|0);
        $1157 = HEAP16[$1156>>1]|0;
        $1158 = $1157&65535;
        $1159 = $cShift;
        $1160 = $1158 << $1159;
        $1161 = $iOffset9;
        $1162 = (($1160) - ($1161))|0;
        $1163 = $iPos;
        $1164 = $pV;
        $1165 = (($1164) + ($1163<<2)|0);
        HEAP32[$1165>>2] = $1162;
       }
       $1166 = $pSrc8;
       $1167 = (($1166) + 2|0);
       $1168 = HEAP16[$1167>>1]|0;
       $1169 = $1168&65535;
       $1170 = $cShift;
       $1171 = $1169 << $1170;
       $1172 = $iOffset9;
       $1173 = (($1171) - ($1172))|0;
       $1174 = $iColumn;
       $1175 = $1174 >>> 4;
       $1176 = $1175 << 8;
       $1177 = $iColumn;
       $1178 = $1177 & 15;
       $1179 = $iRow;
       $1180 = (14240 + ($1179<<4)|0);
       $1181 = (($1180) + ($1178)|0);
       $1182 = HEAP8[$1181>>0]|0;
       $1183 = $1182&255;
       $1184 = (($1176) + ($1183))|0;
       $1185 = $pY;
       $1186 = (($1185) + ($1184<<2)|0);
       HEAP32[$1186>>2] = $1173;
       $1187 = $pSrc8;
       $1188 = (($1187) + 6|0);
       $1189 = HEAP16[$1188>>1]|0;
       $1190 = $1189&65535;
       $1191 = $cShift;
       $1192 = $1190 << $1191;
       $1193 = $iOffset9;
       $1194 = (($1192) - ($1193))|0;
       $1195 = $iColumn;
       $1196 = (($1195) + 1)|0;
       $1197 = $1196 >>> 4;
       $1198 = $1197 << 8;
       $1199 = $iColumn;
       $1200 = (($1199) + 1)|0;
       $1201 = $1200 & 15;
       $1202 = $iRow;
       $1203 = (14240 + ($1202<<4)|0);
       $1204 = (($1203) + ($1201)|0);
       $1205 = HEAP8[$1204>>0]|0;
       $1206 = $1205&255;
       $1207 = (($1198) + ($1206))|0;
       $1208 = $pY;
       $1209 = (($1208) + ($1207<<2)|0);
       HEAP32[$1209>>2] = $1194;
       $1210 = $iColumn;
       $1211 = (($1210) + 2)|0;
       $iColumn = $1211;
       $1212 = $cStride;
       $1213 = $pSrc8;
       $1214 = (($1213) + ($1212<<1)|0);
       $pSrc8 = $1214;
      }
      break;
     }
     case 6: case 3: case 0:  {
      $979 = $1;
      $980 = (($979) + 84|0);
      $981 = (($980) + 32|0);
      $982 = HEAP32[$981>>2]|0;
      $cChannel13 = $982;
      $iColumn = 0;
      while(1) {
       $983 = $iColumn;
       $984 = $cColumn;
       $985 = ($983>>>0)<($984>>>0);
       if (!($985)) {
        break;
       }
       $986 = $iColumn;
       $987 = $986 >>> 4;
       $988 = $987 << 8;
       $989 = $iColumn;
       $990 = $989 & 15;
       $991 = $iRow;
       $992 = (14240 + ($991<<4)|0);
       $993 = (($992) + ($990)|0);
       $994 = HEAP8[$993>>0]|0;
       $995 = $994&255;
       $996 = (($988) + ($995))|0;
       $iPos = $996;
       $iChannel14 = 0;
       while(1) {
        $997 = $iChannel14;
        $998 = $cChannel13;
        $999 = ($997>>>0)<($998>>>0);
        if (!($999)) {
         break;
        }
        $1000 = $iChannel14;
        $1001 = $pSrc8;
        $1002 = (($1001) + ($1000<<1)|0);
        $1003 = HEAP16[$1002>>1]|0;
        $1004 = $1003&65535;
        $1005 = $nLen;
        $1006 = $1005&255;
        $1007 = $1004 >> $1006;
        $1008 = $cShift;
        $1009 = $1007 << $1008;
        $1010 = $iOffset9;
        $1011 = (($1009) - ($1010))|0;
        $1012 = $iPos;
        $1013 = $iChannel14;
        $1014 = $1;
        $1015 = (($1014) + 34756|0);
        $1016 = (($1015) + ($1013<<2)|0);
        $1017 = HEAP32[$1016>>2]|0;
        $1018 = (($1017) + ($1012<<2)|0);
        HEAP32[$1018>>2] = $1011;
        $1019 = $iChannel14;
        $1020 = (($1019) + 1)|0;
        $iChannel14 = $1020;
       }
       $1021 = $iColumn;
       $1022 = (($1021) + 1)|0;
       $iColumn = $1022;
       $1023 = $cStride;
       $1024 = $pSrc8;
       $1025 = (($1024) + ($1023<<1)|0);
       $pSrc8 = $1025;
      }
      break;
     }
     default: {
      label = 142;
      break L18;
     }
     }
    } else {
     $1349 = $bdExt;
     $1350 = ($1349|0)==(3);
     if ($1350) {
      $1351 = $pSrc0;
      $1352 = $1;
      $1353 = (($1352) + 4|0);
      $1354 = (($1353) + 20|0);
      $1355 = HEAP32[$1354>>2]|0;
      $1356 = (($1351) + ($1355<<1)|0);
      $pSrc20 = $1356;
      $1357 = $cPixelStride;
      $1358 = (($1357>>>0) / 2)&-1;
      $cStride21 = $1358;
      $1359 = $cfExt;
      switch ($1359|0) {
      case 7:  {
       $iColumn = 0;
       while(1) {
        $1360 = $iColumn;
        $1361 = $cColumn;
        $1362 = ($1360>>>0)<($1361>>>0);
        if (!($1362)) {
         break;
        }
        $1363 = $pSrc20;
        $1364 = HEAP16[$1363>>1]|0;
        $1365 = $1364 << 16 >> 16;
        $1366 = $nLen;
        $1367 = $1366&255;
        $1368 = $1365 >> $1367;
        $1369 = $cShift;
        $1370 = $1368 << $1369;
        $r22 = $1370;
        $1371 = $pSrc20;
        $1372 = (($1371) + 2|0);
        $1373 = HEAP16[$1372>>1]|0;
        $1374 = $1373 << 16 >> 16;
        $1375 = $nLen;
        $1376 = $1375&255;
        $1377 = $1374 >> $1376;
        $1378 = $cShift;
        $1379 = $1377 << $1378;
        $g23 = $1379;
        $1380 = $pSrc20;
        $1381 = (($1380) + 4|0);
        $1382 = HEAP16[$1381>>1]|0;
        $1383 = $1382 << 16 >> 16;
        $1384 = $nLen;
        $1385 = $1384&255;
        $1386 = $1383 >> $1385;
        $1387 = $cShift;
        $1388 = $1386 << $1387;
        $b24 = $1388;
        $1389 = $r22;
        $1390 = $b24;
        $1391 = (($1390) - ($1389))|0;
        $b24 = $1391;
        $1392 = $b24;
        $1393 = (($1392) + 1)|0;
        $1394 = $1393 >> 1;
        $1395 = $g23;
        $1396 = (($1394) - ($1395))|0;
        $1397 = $r22;
        $1398 = (($1397) + ($1396))|0;
        $r22 = $1398;
        $1399 = $r22;
        $1400 = (($1399) + 0)|0;
        $1401 = $1400 >> 1;
        $1402 = $g23;
        $1403 = (($1402) + ($1401))|0;
        $g23 = $1403;
        $1404 = $iColumn;
        $1405 = $1404 >>> 4;
        $1406 = $1405 << 8;
        $1407 = $iColumn;
        $1408 = $1407 & 15;
        $1409 = $iRow;
        $1410 = (14240 + ($1409<<4)|0);
        $1411 = (($1410) + ($1408)|0);
        $1412 = HEAP8[$1411>>0]|0;
        $1413 = $1412&255;
        $1414 = (($1406) + ($1413))|0;
        $iPos = $1414;
        $1415 = $r22;
        $1416 = (0 - ($1415))|0;
        $1417 = $iPos;
        $1418 = $pU;
        $1419 = (($1418) + ($1417<<2)|0);
        HEAP32[$1419>>2] = $1416;
        $1420 = $b24;
        $1421 = $iPos;
        $1422 = $pV;
        $1423 = (($1422) + ($1421<<2)|0);
        HEAP32[$1423>>2] = $1420;
        $1424 = $g23;
        $1425 = $iPos;
        $1426 = $pY;
        $1427 = (($1426) + ($1425<<2)|0);
        HEAP32[$1427>>2] = $1424;
        $1428 = $iColumn;
        $1429 = (($1428) + 1)|0;
        $iColumn = $1429;
        $1430 = $cStride21;
        $1431 = $pSrc20;
        $1432 = (($1431) + ($1430<<1)|0);
        $pSrc20 = $1432;
       }
       break;
      }
      case 6: case 3: case 0:  {
       $1433 = $1;
       $1434 = (($1433) + 84|0);
       $1435 = (($1434) + 32|0);
       $1436 = HEAP32[$1435>>2]|0;
       $cChannel25 = $1436;
       $iColumn = 0;
       while(1) {
        $1437 = $iColumn;
        $1438 = $cColumn;
        $1439 = ($1437>>>0)<($1438>>>0);
        if (!($1439)) {
         break;
        }
        $1440 = $iColumn;
        $1441 = $1440 >>> 4;
        $1442 = $1441 << 8;
        $1443 = $iColumn;
        $1444 = $1443 & 15;
        $1445 = $iRow;
        $1446 = (14240 + ($1445<<4)|0);
        $1447 = (($1446) + ($1444)|0);
        $1448 = HEAP8[$1447>>0]|0;
        $1449 = $1448&255;
        $1450 = (($1442) + ($1449))|0;
        $iPos = $1450;
        $iChannel26 = 0;
        while(1) {
         $1451 = $iChannel26;
         $1452 = $cChannel25;
         $1453 = ($1451>>>0)<($1452>>>0);
         if (!($1453)) {
          break;
         }
         $1454 = $iChannel26;
         $1455 = $pSrc20;
         $1456 = (($1455) + ($1454<<1)|0);
         $1457 = HEAP16[$1456>>1]|0;
         $1458 = $1457 << 16 >> 16;
         $1459 = $nLen;
         $1460 = $1459&255;
         $1461 = $1458 >> $1460;
         $1462 = $cShift;
         $1463 = $1461 << $1462;
         $1464 = $iPos;
         $1465 = $iChannel26;
         $1466 = $1;
         $1467 = (($1466) + 34756|0);
         $1468 = (($1467) + ($1465<<2)|0);
         $1469 = HEAP32[$1468>>2]|0;
         $1470 = (($1469) + ($1464<<2)|0);
         HEAP32[$1470>>2] = $1463;
         $1471 = $iChannel26;
         $1472 = (($1471) + 1)|0;
         $iChannel26 = $1472;
        }
        $1473 = $iColumn;
        $1474 = (($1473) + 1)|0;
        $iColumn = $1474;
        $1475 = $cStride21;
        $1476 = $pSrc20;
        $1477 = (($1476) + ($1475<<1)|0);
        $pSrc20 = $1477;
       }
       break;
      }
      case 4:  {
       $1478 = $cfInt;
       $1479 = ($1478|0)==(4);
       if ($1479) {
        $1480 = $1;
        $1481 = (($1480) + 34756|0);
        $1482 = (($1481) + 12|0);
        $1483 = HEAP32[$1482>>2]|0;
        $1485 = $1483;
       } else {
        $1484 = $pY;
        $1485 = $1484;
       }
       $pK27 = $1485;
       $iColumn = 0;
       while(1) {
        $1486 = $iColumn;
        $1487 = $cColumn;
        $1488 = ($1486>>>0)<($1487>>>0);
        if (!($1488)) {
         break;
        }
        $1489 = $pSrc20;
        $1490 = HEAP16[$1489>>1]|0;
        $1491 = $1490 << 16 >> 16;
        $1492 = $nLen;
        $1493 = $1492&255;
        $1494 = $1491 >> $1493;
        $1495 = $cShift;
        $1496 = $1494 << $1495;
        $c28 = $1496;
        $1497 = $pSrc20;
        $1498 = (($1497) + 2|0);
        $1499 = HEAP16[$1498>>1]|0;
        $1500 = $1499 << 16 >> 16;
        $1501 = $nLen;
        $1502 = $1501&255;
        $1503 = $1500 >> $1502;
        $1504 = $cShift;
        $1505 = $1503 << $1504;
        $m29 = $1505;
        $1506 = $pSrc20;
        $1507 = (($1506) + 4|0);
        $1508 = HEAP16[$1507>>1]|0;
        $1509 = $1508 << 16 >> 16;
        $1510 = $nLen;
        $1511 = $1510&255;
        $1512 = $1509 >> $1511;
        $1513 = $cShift;
        $1514 = $1512 << $1513;
        $y30 = $1514;
        $1515 = $pSrc20;
        $1516 = (($1515) + 6|0);
        $1517 = HEAP16[$1516>>1]|0;
        $1518 = $1517 << 16 >> 16;
        $1519 = $nLen;
        $1520 = $1519&255;
        $1521 = $1518 >> $1520;
        $1522 = $cShift;
        $1523 = $1521 << $1522;
        $k31 = $1523;
        $1524 = $c28;
        $1525 = $y30;
        $1526 = (($1525) - ($1524))|0;
        $y30 = $1526;
        $1527 = $y30;
        $1528 = (($1527) + 1)|0;
        $1529 = $1528 >> 1;
        $1530 = $m29;
        $1531 = (($1529) - ($1530))|0;
        $1532 = $c28;
        $1533 = (($1532) + ($1531))|0;
        $c28 = $1533;
        $1534 = $c28;
        $1535 = $1534 >> 1;
        $1536 = $k31;
        $1537 = (($1535) - ($1536))|0;
        $1538 = $m29;
        $1539 = (($1538) + ($1537))|0;
        $m29 = $1539;
        $1540 = $m29;
        $1541 = (($1540) + 1)|0;
        $1542 = $1541 >> 1;
        $1543 = $k31;
        $1544 = (($1543) + ($1542))|0;
        $k31 = $1544;
        $1545 = $iColumn;
        $1546 = $1545 >>> 4;
        $1547 = $1546 << 8;
        $1548 = $iColumn;
        $1549 = $1548 & 15;
        $1550 = $iRow;
        $1551 = (14240 + ($1550<<4)|0);
        $1552 = (($1551) + ($1549)|0);
        $1553 = HEAP8[$1552>>0]|0;
        $1554 = $1553&255;
        $1555 = (($1547) + ($1554))|0;
        $iPos = $1555;
        $1556 = $c28;
        $1557 = $iPos;
        $1558 = $pU;
        $1559 = (($1558) + ($1557<<2)|0);
        HEAP32[$1559>>2] = $1556;
        $1560 = $y30;
        $1561 = (0 - ($1560))|0;
        $1562 = $iPos;
        $1563 = $pV;
        $1564 = (($1563) + ($1562<<2)|0);
        HEAP32[$1564>>2] = $1561;
        $1565 = $k31;
        $1566 = $iPos;
        $1567 = $pK27;
        $1568 = (($1567) + ($1566<<2)|0);
        HEAP32[$1568>>2] = $1565;
        $1569 = $m29;
        $1570 = (0 - ($1569))|0;
        $1571 = $iPos;
        $1572 = $pY;
        $1573 = (($1572) + ($1571<<2)|0);
        HEAP32[$1573>>2] = $1570;
        $1574 = $iColumn;
        $1575 = (($1574) + 1)|0;
        $iColumn = $1575;
        $1576 = $cStride21;
        $1577 = $pSrc20;
        $1578 = (($1577) + ($1576<<1)|0);
        $pSrc20 = $1578;
       }
       break;
      }
      default: {
       label = 168;
       break L18;
      }
      }
     } else {
      $1579 = $bdExt;
      $1580 = ($1579|0)==(4);
      if ($1580) {
       $1581 = $pSrc0;
       $1582 = $1;
       $1583 = (($1582) + 4|0);
       $1584 = (($1583) + 20|0);
       $1585 = HEAP32[$1584>>2]|0;
       $1586 = (($1581) + ($1585<<1)|0);
       $pSrc32 = $1586;
       $1587 = $cPixelStride;
       $1588 = (($1587>>>0) / 2)&-1;
       $cStride33 = $1588;
       $1589 = $cfExt;
       if ((($1589|0) == 7)) {
        $iColumn = 0;
        while(1) {
         $1590 = $iColumn;
         $1591 = $cColumn;
         $1592 = ($1590>>>0)<($1591>>>0);
         if (!($1592)) {
          break;
         }
         $1593 = $pSrc32;
         $1594 = HEAP16[$1593>>1]|0;
         $1595 = $1594 << 16 >> 16;
         $1596 = (_forwardHalf($1595)|0);
         $1597 = $cShift;
         $1598 = $1596 << $1597;
         $r34 = $1598;
         $1599 = $pSrc32;
         $1600 = (($1599) + 2|0);
         $1601 = HEAP16[$1600>>1]|0;
         $1602 = $1601 << 16 >> 16;
         $1603 = (_forwardHalf($1602)|0);
         $1604 = $cShift;
         $1605 = $1603 << $1604;
         $g35 = $1605;
         $1606 = $pSrc32;
         $1607 = (($1606) + 4|0);
         $1608 = HEAP16[$1607>>1]|0;
         $1609 = $1608 << 16 >> 16;
         $1610 = (_forwardHalf($1609)|0);
         $1611 = $cShift;
         $1612 = $1610 << $1611;
         $b36 = $1612;
         $1613 = $r34;
         $1614 = $b36;
         $1615 = (($1614) - ($1613))|0;
         $b36 = $1615;
         $1616 = $b36;
         $1617 = (($1616) + 1)|0;
         $1618 = $1617 >> 1;
         $1619 = $g35;
         $1620 = (($1618) - ($1619))|0;
         $1621 = $r34;
         $1622 = (($1621) + ($1620))|0;
         $r34 = $1622;
         $1623 = $r34;
         $1624 = (($1623) + 0)|0;
         $1625 = $1624 >> 1;
         $1626 = $g35;
         $1627 = (($1626) + ($1625))|0;
         $g35 = $1627;
         $1628 = $iColumn;
         $1629 = $1628 >>> 4;
         $1630 = $1629 << 8;
         $1631 = $iColumn;
         $1632 = $1631 & 15;
         $1633 = $iRow;
         $1634 = (14240 + ($1633<<4)|0);
         $1635 = (($1634) + ($1632)|0);
         $1636 = HEAP8[$1635>>0]|0;
         $1637 = $1636&255;
         $1638 = (($1630) + ($1637))|0;
         $iPos = $1638;
         $1639 = $r34;
         $1640 = (0 - ($1639))|0;
         $1641 = $iPos;
         $1642 = $pU;
         $1643 = (($1642) + ($1641<<2)|0);
         HEAP32[$1643>>2] = $1640;
         $1644 = $b36;
         $1645 = $iPos;
         $1646 = $pV;
         $1647 = (($1646) + ($1645<<2)|0);
         HEAP32[$1647>>2] = $1644;
         $1648 = $g35;
         $1649 = $iPos;
         $1650 = $pY;
         $1651 = (($1650) + ($1649<<2)|0);
         HEAP32[$1651>>2] = $1648;
         $1652 = $iColumn;
         $1653 = (($1652) + 1)|0;
         $iColumn = $1653;
         $1654 = $cStride33;
         $1655 = $pSrc32;
         $1656 = (($1655) + ($1654<<1)|0);
         $pSrc32 = $1656;
        }
       } else if ((($1589|0) == 6) | (($1589|0) == 3) | (($1589|0) == 0)) {
        $1657 = $1;
        $1658 = (($1657) + 84|0);
        $1659 = (($1658) + 32|0);
        $1660 = HEAP32[$1659>>2]|0;
        $cChannel37 = $1660;
        $iColumn = 0;
        while(1) {
         $1661 = $iColumn;
         $1662 = $cColumn;
         $1663 = ($1661>>>0)<($1662>>>0);
         if (!($1663)) {
          break;
         }
         $1664 = $iColumn;
         $1665 = $1664 >>> 4;
         $1666 = $1665 << 8;
         $1667 = $iColumn;
         $1668 = $1667 & 15;
         $1669 = $iRow;
         $1670 = (14240 + ($1669<<4)|0);
         $1671 = (($1670) + ($1668)|0);
         $1672 = HEAP8[$1671>>0]|0;
         $1673 = $1672&255;
         $1674 = (($1666) + ($1673))|0;
         $iPos = $1674;
         $iChannel38 = 0;
         while(1) {
          $1675 = $iChannel38;
          $1676 = $cChannel37;
          $1677 = ($1675>>>0)<($1676>>>0);
          if (!($1677)) {
           break;
          }
          $1678 = $iChannel38;
          $1679 = $pSrc32;
          $1680 = (($1679) + ($1678<<1)|0);
          $1681 = HEAP16[$1680>>1]|0;
          $1682 = $1681 << 16 >> 16;
          $1683 = (_forwardHalf($1682)|0);
          $1684 = $cShift;
          $1685 = $1683 << $1684;
          $1686 = $iPos;
          $1687 = $iChannel38;
          $1688 = $1;
          $1689 = (($1688) + 34756|0);
          $1690 = (($1689) + ($1687<<2)|0);
          $1691 = HEAP32[$1690>>2]|0;
          $1692 = (($1691) + ($1686<<2)|0);
          HEAP32[$1692>>2] = $1685;
          $1693 = $iChannel38;
          $1694 = (($1693) + 1)|0;
          $iChannel38 = $1694;
         }
         $1695 = $iColumn;
         $1696 = (($1695) + 1)|0;
         $iColumn = $1696;
         $1697 = $cStride33;
         $1698 = $pSrc32;
         $1699 = (($1698) + ($1697<<1)|0);
         $pSrc32 = $1699;
        }
       } else {
        label = 186;
        break;
       }
      } else {
       $1700 = $bdExt;
       $1701 = ($1700|0)==(5);
       if ($1701) {
        $1702 = $pSrc0;
        $1703 = $1;
        $1704 = (($1703) + 4|0);
        $1705 = (($1704) + 20|0);
        $1706 = HEAP32[$1705>>2]|0;
        $1707 = (($1702) + ($1706<<2)|0);
        $pSrc39 = $1707;
        $1708 = $cPixelStride;
        $1709 = (($1708>>>0) / 4)&-1;
        $cStride40 = $1709;
        $1710 = $nLen;
        $1711 = $1710&255;
        $1712 = -2147483648 >> $1711;
        $1713 = $cShift;
        $1714 = $1712 << $1713;
        $iOffset41 = $1714;
        $1715 = $cfExt;
        if ((($1715|0) == 7)) {
         $iColumn = 0;
         while(1) {
          $1716 = $iColumn;
          $1717 = $cColumn;
          $1718 = ($1716>>>0)<($1717>>>0);
          if (!($1718)) {
           break;
          }
          $1719 = $pSrc39;
          $1720 = HEAP32[$1719>>2]|0;
          $1721 = $nLen;
          $1722 = $1721&255;
          $1723 = $1720 >>> $1722;
          $1724 = $cShift;
          $1725 = $1723 << $1724;
          $r42 = $1725;
          $1726 = $pSrc39;
          $1727 = (($1726) + 4|0);
          $1728 = HEAP32[$1727>>2]|0;
          $1729 = $nLen;
          $1730 = $1729&255;
          $1731 = $1728 >>> $1730;
          $1732 = $cShift;
          $1733 = $1731 << $1732;
          $g43 = $1733;
          $1734 = $pSrc39;
          $1735 = (($1734) + 8|0);
          $1736 = HEAP32[$1735>>2]|0;
          $1737 = $nLen;
          $1738 = $1737&255;
          $1739 = $1736 >>> $1738;
          $1740 = $cShift;
          $1741 = $1739 << $1740;
          $b44 = $1741;
          $1742 = $r42;
          $1743 = $b44;
          $1744 = (($1743) - ($1742))|0;
          $b44 = $1744;
          $1745 = $b44;
          $1746 = (($1745) + 1)|0;
          $1747 = $1746 >> 1;
          $1748 = $g43;
          $1749 = (($1747) - ($1748))|0;
          $1750 = $r42;
          $1751 = (($1750) + ($1749))|0;
          $r42 = $1751;
          $1752 = $r42;
          $1753 = (($1752) + 0)|0;
          $1754 = $1753 >> 1;
          $1755 = $g43;
          $1756 = (($1755) + ($1754))|0;
          $g43 = $1756;
          $1757 = $iColumn;
          $1758 = $1757 >>> 4;
          $1759 = $1758 << 8;
          $1760 = $iColumn;
          $1761 = $1760 & 15;
          $1762 = $iRow;
          $1763 = (14240 + ($1762<<4)|0);
          $1764 = (($1763) + ($1761)|0);
          $1765 = HEAP8[$1764>>0]|0;
          $1766 = $1765&255;
          $1767 = (($1759) + ($1766))|0;
          $iPos = $1767;
          $1768 = $r42;
          $1769 = (0 - ($1768))|0;
          $1770 = $iPos;
          $1771 = $pU;
          $1772 = (($1771) + ($1770<<2)|0);
          HEAP32[$1772>>2] = $1769;
          $1773 = $b44;
          $1774 = $iPos;
          $1775 = $pV;
          $1776 = (($1775) + ($1774<<2)|0);
          HEAP32[$1776>>2] = $1773;
          $1777 = $g43;
          $1778 = $iOffset41;
          $1779 = (($1777) - ($1778))|0;
          $1780 = $iPos;
          $1781 = $pY;
          $1782 = (($1781) + ($1780<<2)|0);
          HEAP32[$1782>>2] = $1779;
          $1783 = $iColumn;
          $1784 = (($1783) + 1)|0;
          $iColumn = $1784;
          $1785 = $cStride40;
          $1786 = $pSrc39;
          $1787 = (($1786) + ($1785<<2)|0);
          $pSrc39 = $1787;
         }
        } else if ((($1715|0) == 6) | (($1715|0) == 3) | (($1715|0) == 0)) {
         $1788 = $1;
         $1789 = (($1788) + 84|0);
         $1790 = (($1789) + 32|0);
         $1791 = HEAP32[$1790>>2]|0;
         $cChannel45 = $1791;
         $iColumn = 0;
         while(1) {
          $1792 = $iColumn;
          $1793 = $cColumn;
          $1794 = ($1792>>>0)<($1793>>>0);
          if (!($1794)) {
           break;
          }
          $1795 = $iColumn;
          $1796 = $1795 >>> 4;
          $1797 = $1796 << 8;
          $1798 = $iColumn;
          $1799 = $1798 & 15;
          $1800 = $iRow;
          $1801 = (14240 + ($1800<<4)|0);
          $1802 = (($1801) + ($1799)|0);
          $1803 = HEAP8[$1802>>0]|0;
          $1804 = $1803&255;
          $1805 = (($1797) + ($1804))|0;
          $iPos = $1805;
          $iChannel46 = 0;
          while(1) {
           $1806 = $iChannel46;
           $1807 = $cChannel45;
           $1808 = ($1806>>>0)<($1807>>>0);
           if (!($1808)) {
            break;
           }
           $1809 = $iChannel46;
           $1810 = $pSrc39;
           $1811 = (($1810) + ($1809<<2)|0);
           $1812 = HEAP32[$1811>>2]|0;
           $1813 = $nLen;
           $1814 = $1813&255;
           $1815 = $1812 >>> $1814;
           $1816 = $cShift;
           $1817 = $1815 << $1816;
           $1818 = $iPos;
           $1819 = $iChannel46;
           $1820 = $1;
           $1821 = (($1820) + 34756|0);
           $1822 = (($1821) + ($1819<<2)|0);
           $1823 = HEAP32[$1822>>2]|0;
           $1824 = (($1823) + ($1818<<2)|0);
           HEAP32[$1824>>2] = $1817;
           $1825 = $iChannel46;
           $1826 = (($1825) + 1)|0;
           $iChannel46 = $1826;
          }
          $1827 = $iColumn;
          $1828 = (($1827) + 1)|0;
          $iColumn = $1828;
          $1829 = $cStride40;
          $1830 = $pSrc39;
          $1831 = (($1830) + ($1829<<2)|0);
          $pSrc39 = $1831;
         }
        } else {
         label = 204;
         break;
        }
       } else {
        $1832 = $bdExt;
        $1833 = ($1832|0)==(6);
        if ($1833) {
         $1834 = $pSrc0;
         $1835 = $1;
         $1836 = (($1835) + 4|0);
         $1837 = (($1836) + 20|0);
         $1838 = HEAP32[$1837>>2]|0;
         $1839 = (($1834) + ($1838<<2)|0);
         $pSrc47 = $1839;
         $1840 = $cPixelStride;
         $1841 = (($1840>>>0) / 4)&-1;
         $cStride48 = $1841;
         $1842 = $cfExt;
         if ((($1842|0) == 6) | (($1842|0) == 3) | (($1842|0) == 0)) {
          $1913 = $1;
          $1914 = (($1913) + 84|0);
          $1915 = (($1914) + 32|0);
          $1916 = HEAP32[$1915>>2]|0;
          $cChannel52 = $1916;
          $iColumn = 0;
          while(1) {
           $1917 = $iColumn;
           $1918 = $cColumn;
           $1919 = ($1917>>>0)<($1918>>>0);
           if (!($1919)) {
            break;
           }
           $1920 = $iColumn;
           $1921 = $1920 >>> 4;
           $1922 = $1921 << 8;
           $1923 = $iColumn;
           $1924 = $1923 & 15;
           $1925 = $iRow;
           $1926 = (14240 + ($1925<<4)|0);
           $1927 = (($1926) + ($1924)|0);
           $1928 = HEAP8[$1927>>0]|0;
           $1929 = $1928&255;
           $1930 = (($1922) + ($1929))|0;
           $iPos = $1930;
           $iChannel53 = 0;
           while(1) {
            $1931 = $iChannel53;
            $1932 = $cChannel52;
            $1933 = ($1931>>>0)<($1932>>>0);
            if (!($1933)) {
             break;
            }
            $1934 = $iChannel53;
            $1935 = $pSrc47;
            $1936 = (($1935) + ($1934<<2)|0);
            $1937 = HEAP32[$1936>>2]|0;
            $1938 = $nLen;
            $1939 = $1938&255;
            $1940 = $1937 >> $1939;
            $1941 = $cShift;
            $1942 = $1940 << $1941;
            $1943 = $iPos;
            $1944 = $iChannel53;
            $1945 = $1;
            $1946 = (($1945) + 34756|0);
            $1947 = (($1946) + ($1944<<2)|0);
            $1948 = HEAP32[$1947>>2]|0;
            $1949 = (($1948) + ($1943<<2)|0);
            HEAP32[$1949>>2] = $1942;
            $1950 = $iChannel53;
            $1951 = (($1950) + 1)|0;
            $iChannel53 = $1951;
           }
           $1952 = $iColumn;
           $1953 = (($1952) + 1)|0;
           $iColumn = $1953;
           $1954 = $cStride48;
           $1955 = $pSrc47;
           $1956 = (($1955) + ($1954<<2)|0);
           $pSrc47 = $1956;
          }
         } else if ((($1842|0) == 7)) {
          $iColumn = 0;
          while(1) {
           $1843 = $iColumn;
           $1844 = $cColumn;
           $1845 = ($1843>>>0)<($1844>>>0);
           if (!($1845)) {
            break;
           }
           $1846 = $pSrc47;
           $1847 = HEAP32[$1846>>2]|0;
           $1848 = $nLen;
           $1849 = $1848&255;
           $1850 = $1847 >> $1849;
           $1851 = $cShift;
           $1852 = $1850 << $1851;
           $r49 = $1852;
           $1853 = $pSrc47;
           $1854 = (($1853) + 4|0);
           $1855 = HEAP32[$1854>>2]|0;
           $1856 = $nLen;
           $1857 = $1856&255;
           $1858 = $1855 >> $1857;
           $1859 = $cShift;
           $1860 = $1858 << $1859;
           $g50 = $1860;
           $1861 = $pSrc47;
           $1862 = (($1861) + 8|0);
           $1863 = HEAP32[$1862>>2]|0;
           $1864 = $nLen;
           $1865 = $1864&255;
           $1866 = $1863 >> $1865;
           $1867 = $cShift;
           $1868 = $1866 << $1867;
           $b51 = $1868;
           $1869 = $r49;
           $1870 = $b51;
           $1871 = (($1870) - ($1869))|0;
           $b51 = $1871;
           $1872 = $b51;
           $1873 = (($1872) + 1)|0;
           $1874 = $1873 >> 1;
           $1875 = $g50;
           $1876 = (($1874) - ($1875))|0;
           $1877 = $r49;
           $1878 = (($1877) + ($1876))|0;
           $r49 = $1878;
           $1879 = $r49;
           $1880 = (($1879) + 0)|0;
           $1881 = $1880 >> 1;
           $1882 = $g50;
           $1883 = (($1882) + ($1881))|0;
           $g50 = $1883;
           $1884 = $iColumn;
           $1885 = $1884 >>> 4;
           $1886 = $1885 << 8;
           $1887 = $iColumn;
           $1888 = $1887 & 15;
           $1889 = $iRow;
           $1890 = (14240 + ($1889<<4)|0);
           $1891 = (($1890) + ($1888)|0);
           $1892 = HEAP8[$1891>>0]|0;
           $1893 = $1892&255;
           $1894 = (($1886) + ($1893))|0;
           $iPos = $1894;
           $1895 = $r49;
           $1896 = (0 - ($1895))|0;
           $1897 = $iPos;
           $1898 = $pU;
           $1899 = (($1898) + ($1897<<2)|0);
           HEAP32[$1899>>2] = $1896;
           $1900 = $b51;
           $1901 = $iPos;
           $1902 = $pV;
           $1903 = (($1902) + ($1901<<2)|0);
           HEAP32[$1903>>2] = $1900;
           $1904 = $g50;
           $1905 = $iPos;
           $1906 = $pY;
           $1907 = (($1906) + ($1905<<2)|0);
           HEAP32[$1907>>2] = $1904;
           $1908 = $iColumn;
           $1909 = (($1908) + 1)|0;
           $iColumn = $1909;
           $1910 = $cStride48;
           $1911 = $pSrc47;
           $1912 = (($1911) + ($1910<<2)|0);
           $pSrc47 = $1912;
          }
         } else {
          label = 222;
          break;
         }
        } else {
         $1957 = $bdExt;
         $1958 = ($1957|0)==(7);
         if ($1958) {
          $1959 = $pSrc0;
          $1960 = $1;
          $1961 = (($1960) + 4|0);
          $1962 = (($1961) + 20|0);
          $1963 = HEAP32[$1962>>2]|0;
          $1964 = (($1959) + ($1963<<2)|0);
          $pSrc54 = $1964;
          $1965 = $cPixelStride;
          $1966 = (($1965>>>0) / 4)&-1;
          $cStride55 = $1966;
          $1967 = $cfExt;
          if ((($1967|0) == 6) | (($1967|0) == 3) | (($1967|0) == 0)) {
           $2038 = $1;
           $2039 = (($2038) + 84|0);
           $2040 = (($2039) + 32|0);
           $2041 = HEAP32[$2040>>2]|0;
           $cChannel59 = $2041;
           $iColumn = 0;
           while(1) {
            $2042 = $iColumn;
            $2043 = $cColumn;
            $2044 = ($2042>>>0)<($2043>>>0);
            if (!($2044)) {
             break;
            }
            $2045 = $iColumn;
            $2046 = $2045 >>> 4;
            $2047 = $2046 << 8;
            $2048 = $iColumn;
            $2049 = $2048 & 15;
            $2050 = $iRow;
            $2051 = (14240 + ($2050<<4)|0);
            $2052 = (($2051) + ($2049)|0);
            $2053 = HEAP8[$2052>>0]|0;
            $2054 = $2053&255;
            $2055 = (($2047) + ($2054))|0;
            $iPos = $2055;
            $iChannel60 = 0;
            while(1) {
             $2056 = $iChannel60;
             $2057 = $cChannel59;
             $2058 = ($2056>>>0)<($2057>>>0);
             if (!($2058)) {
              break;
             }
             $2059 = $iChannel60;
             $2060 = $pSrc54;
             $2061 = (($2060) + ($2059<<2)|0);
             $2062 = +HEAPF32[$2061>>2];
             $2063 = $nExpBias;
             $2064 = $nLen;
             $2065 = (_float2pixel($2062,$2063,$2064)|0);
             $2066 = $cShift;
             $2067 = $2065 << $2066;
             $2068 = $iPos;
             $2069 = $iChannel60;
             $2070 = $1;
             $2071 = (($2070) + 34756|0);
             $2072 = (($2071) + ($2069<<2)|0);
             $2073 = HEAP32[$2072>>2]|0;
             $2074 = (($2073) + ($2068<<2)|0);
             HEAP32[$2074>>2] = $2067;
             $2075 = $iChannel60;
             $2076 = (($2075) + 1)|0;
             $iChannel60 = $2076;
            }
            $2077 = $iColumn;
            $2078 = (($2077) + 1)|0;
            $iColumn = $2078;
            $2079 = $cStride55;
            $2080 = $pSrc54;
            $2081 = (($2080) + ($2079<<2)|0);
            $pSrc54 = $2081;
           }
          } else if ((($1967|0) == 7)) {
           $iColumn = 0;
           while(1) {
            $1968 = $iColumn;
            $1969 = $cColumn;
            $1970 = ($1968>>>0)<($1969>>>0);
            if (!($1970)) {
             break;
            }
            $1971 = $pSrc54;
            $1972 = +HEAPF32[$1971>>2];
            $1973 = $nExpBias;
            $1974 = $nLen;
            $1975 = (_float2pixel($1972,$1973,$1974)|0);
            $1976 = $cShift;
            $1977 = $1975 << $1976;
            $r56 = $1977;
            $1978 = $pSrc54;
            $1979 = (($1978) + 4|0);
            $1980 = +HEAPF32[$1979>>2];
            $1981 = $nExpBias;
            $1982 = $nLen;
            $1983 = (_float2pixel($1980,$1981,$1982)|0);
            $1984 = $cShift;
            $1985 = $1983 << $1984;
            $g57 = $1985;
            $1986 = $pSrc54;
            $1987 = (($1986) + 8|0);
            $1988 = +HEAPF32[$1987>>2];
            $1989 = $nExpBias;
            $1990 = $nLen;
            $1991 = (_float2pixel($1988,$1989,$1990)|0);
            $1992 = $cShift;
            $1993 = $1991 << $1992;
            $b58 = $1993;
            $1994 = $r56;
            $1995 = $b58;
            $1996 = (($1995) - ($1994))|0;
            $b58 = $1996;
            $1997 = $b58;
            $1998 = (($1997) + 1)|0;
            $1999 = $1998 >> 1;
            $2000 = $g57;
            $2001 = (($1999) - ($2000))|0;
            $2002 = $r56;
            $2003 = (($2002) + ($2001))|0;
            $r56 = $2003;
            $2004 = $r56;
            $2005 = (($2004) + 0)|0;
            $2006 = $2005 >> 1;
            $2007 = $g57;
            $2008 = (($2007) + ($2006))|0;
            $g57 = $2008;
            $2009 = $iColumn;
            $2010 = $2009 >>> 4;
            $2011 = $2010 << 8;
            $2012 = $iColumn;
            $2013 = $2012 & 15;
            $2014 = $iRow;
            $2015 = (14240 + ($2014<<4)|0);
            $2016 = (($2015) + ($2013)|0);
            $2017 = HEAP8[$2016>>0]|0;
            $2018 = $2017&255;
            $2019 = (($2011) + ($2018))|0;
            $iPos = $2019;
            $2020 = $r56;
            $2021 = (0 - ($2020))|0;
            $2022 = $iPos;
            $2023 = $pU;
            $2024 = (($2023) + ($2022<<2)|0);
            HEAP32[$2024>>2] = $2021;
            $2025 = $b58;
            $2026 = $iPos;
            $2027 = $pV;
            $2028 = (($2027) + ($2026<<2)|0);
            HEAP32[$2028>>2] = $2025;
            $2029 = $g57;
            $2030 = $iPos;
            $2031 = $pY;
            $2032 = (($2031) + ($2030<<2)|0);
            HEAP32[$2032>>2] = $2029;
            $2033 = $iColumn;
            $2034 = (($2033) + 1)|0;
            $iColumn = $2034;
            $2035 = $cStride55;
            $2036 = $pSrc54;
            $2037 = (($2036) + ($2035<<2)|0);
            $pSrc54 = $2037;
           }
          } else {
           label = 240;
           break;
          }
         } else {
          $2082 = $bdExt;
          $2083 = ($2082|0)==(8);
          if ($2083) {
           $2084 = $pSrc0;
           $pSrc61 = $2084;
           $2085 = $cShift;
           $2086 = 16 << $2085;
           $iOffset62 = $2086;
           $2087 = $cfExt;
           $2088 = ($2087|0)==(7);
           if (!($2088)) {
            label = 244;
            break;
           }
           $iColumn = 0;
           while(1) {
            $2089 = $iColumn;
            $2090 = $cColumn;
            $2091 = ($2089>>>0)<($2090>>>0);
            if (!($2091)) {
             break;
            }
            $2092 = $pSrc61;
            $2093 = HEAP8[$2092>>0]|0;
            $2094 = $2093&255;
            $r63 = $2094;
            $2095 = $pSrc61;
            $2096 = (($2095) + 1|0);
            $2097 = HEAP8[$2096>>0]|0;
            $2098 = $2097&255;
            $g64 = $2098;
            $2099 = $g64;
            $2100 = $2099 >> 2;
            $2101 = $2100 & 31;
            $2102 = $cShift;
            $2103 = $2101 << $2102;
            $b65 = $2103;
            $2104 = $r63;
            $2105 = $2104 >> 5;
            $2106 = $g64;
            $2107 = $2106 & 3;
            $2108 = $2107 << 3;
            $2109 = (($2105) + ($2108))|0;
            $2110 = $cShift;
            $2111 = $2109 << $2110;
            $g64 = $2111;
            $2112 = $r63;
            $2113 = $2112 & 31;
            $2114 = $cShift;
            $2115 = $2113 << $2114;
            $r63 = $2115;
            $2116 = $r63;
            $2117 = $b65;
            $2118 = (($2117) - ($2116))|0;
            $b65 = $2118;
            $2119 = $b65;
            $2120 = (($2119) + 1)|0;
            $2121 = $2120 >> 1;
            $2122 = $g64;
            $2123 = (($2121) - ($2122))|0;
            $2124 = $r63;
            $2125 = (($2124) + ($2123))|0;
            $r63 = $2125;
            $2126 = $r63;
            $2127 = (($2126) + 0)|0;
            $2128 = $2127 >> 1;
            $2129 = $g64;
            $2130 = (($2129) + ($2128))|0;
            $g64 = $2130;
            $2131 = $iColumn;
            $2132 = $2131 >>> 4;
            $2133 = $2132 << 8;
            $2134 = $iColumn;
            $2135 = $2134 & 15;
            $2136 = $iRow;
            $2137 = (14240 + ($2136<<4)|0);
            $2138 = (($2137) + ($2135)|0);
            $2139 = HEAP8[$2138>>0]|0;
            $2140 = $2139&255;
            $2141 = (($2133) + ($2140))|0;
            $iPos = $2141;
            $2142 = $r63;
            $2143 = (0 - ($2142))|0;
            $2144 = $iPos;
            $2145 = $pU;
            $2146 = (($2145) + ($2144<<2)|0);
            HEAP32[$2146>>2] = $2143;
            $2147 = $b65;
            $2148 = $iPos;
            $2149 = $pV;
            $2150 = (($2149) + ($2148<<2)|0);
            HEAP32[$2150>>2] = $2147;
            $2151 = $g64;
            $2152 = $iOffset62;
            $2153 = (($2151) - ($2152))|0;
            $2154 = $iPos;
            $2155 = $pY;
            $2156 = (($2155) + ($2154<<2)|0);
            HEAP32[$2156>>2] = $2153;
            $2157 = $iColumn;
            $2158 = (($2157) + 1)|0;
            $iColumn = $2158;
            $2159 = $cPixelStride;
            $2160 = $pSrc61;
            $2161 = (($2160) + ($2159)|0);
            $pSrc61 = $2161;
           }
          } else {
           $2162 = $bdExt;
           $2163 = ($2162|0)==(10);
           if ($2163) {
            $2164 = $pSrc0;
            $pSrc66 = $2164;
            $2165 = $cShift;
            $2166 = 32 << $2165;
            $iOffset67 = $2166;
            $2167 = $cfExt;
            $2168 = ($2167|0)==(7);
            if (!($2168)) {
             label = 252;
             break;
            }
            $iColumn = 0;
            while(1) {
             $2169 = $iColumn;
             $2170 = $cColumn;
             $2171 = ($2169>>>0)<($2170>>>0);
             if (!($2171)) {
              break;
             }
             $2172 = $pSrc66;
             $2173 = HEAP8[$2172>>0]|0;
             $2174 = $2173&255;
             $r68 = $2174;
             $2175 = $pSrc66;
             $2176 = (($2175) + 1|0);
             $2177 = HEAP8[$2176>>0]|0;
             $2178 = $2177&255;
             $g69 = $2178;
             $2179 = $g69;
             $2180 = $2179 >> 3;
             $2181 = $cShift;
             $2182 = (($2181) + 1)|0;
             $2183 = $2180 << $2182;
             $b70 = $2183;
             $2184 = $r68;
             $2185 = $2184 >> 5;
             $2186 = $g69;
             $2187 = $2186 & 7;
             $2188 = $2187 << 3;
             $2189 = (($2185) + ($2188))|0;
             $2190 = $cShift;
             $2191 = $2189 << $2190;
             $g69 = $2191;
             $2192 = $r68;
             $2193 = $2192 & 31;
             $2194 = $cShift;
             $2195 = (($2194) + 1)|0;
             $2196 = $2193 << $2195;
             $r68 = $2196;
             $2197 = $r68;
             $2198 = $b70;
             $2199 = (($2198) - ($2197))|0;
             $b70 = $2199;
             $2200 = $b70;
             $2201 = (($2200) + 1)|0;
             $2202 = $2201 >> 1;
             $2203 = $g69;
             $2204 = (($2202) - ($2203))|0;
             $2205 = $r68;
             $2206 = (($2205) + ($2204))|0;
             $r68 = $2206;
             $2207 = $r68;
             $2208 = (($2207) + 0)|0;
             $2209 = $2208 >> 1;
             $2210 = $g69;
             $2211 = (($2210) + ($2209))|0;
             $g69 = $2211;
             $2212 = $iColumn;
             $2213 = $2212 >>> 4;
             $2214 = $2213 << 8;
             $2215 = $iColumn;
             $2216 = $2215 & 15;
             $2217 = $iRow;
             $2218 = (14240 + ($2217<<4)|0);
             $2219 = (($2218) + ($2216)|0);
             $2220 = HEAP8[$2219>>0]|0;
             $2221 = $2220&255;
             $2222 = (($2214) + ($2221))|0;
             $iPos = $2222;
             $2223 = $r68;
             $2224 = (0 - ($2223))|0;
             $2225 = $iPos;
             $2226 = $pU;
             $2227 = (($2226) + ($2225<<2)|0);
             HEAP32[$2227>>2] = $2224;
             $2228 = $b70;
             $2229 = $iPos;
             $2230 = $pV;
             $2231 = (($2230) + ($2229<<2)|0);
             HEAP32[$2231>>2] = $2228;
             $2232 = $g69;
             $2233 = $iOffset67;
             $2234 = (($2232) - ($2233))|0;
             $2235 = $iPos;
             $2236 = $pY;
             $2237 = (($2236) + ($2235<<2)|0);
             HEAP32[$2237>>2] = $2234;
             $2238 = $iColumn;
             $2239 = (($2238) + 1)|0;
             $iColumn = $2239;
             $2240 = $cPixelStride;
             $2241 = $pSrc66;
             $2242 = (($2241) + ($2240)|0);
             $pSrc66 = $2242;
            }
           } else {
            $2243 = $bdExt;
            $2244 = ($2243|0)==(9);
            if ($2244) {
             $2245 = $pSrc0;
             $pSrc71 = $2245;
             $2246 = $cShift;
             $2247 = 512 << $2246;
             $iOffset72 = $2247;
             $2248 = $cfExt;
             $2249 = ($2248|0)==(7);
             if (!($2249)) {
              label = 260;
              break;
             }
             $iColumn = 0;
             while(1) {
              $2250 = $iColumn;
              $2251 = $cColumn;
              $2252 = ($2250>>>0)<($2251>>>0);
              if (!($2252)) {
               break;
              }
              $2253 = $pSrc71;
              $2254 = HEAP8[$2253>>0]|0;
              $2255 = $2254&255;
              $r73 = $2255;
              $2256 = $pSrc71;
              $2257 = (($2256) + 1|0);
              $2258 = HEAP8[$2257>>0]|0;
              $2259 = $2258&255;
              $g74 = $2259;
              $2260 = $pSrc71;
              $2261 = (($2260) + 2|0);
              $2262 = HEAP8[$2261>>0]|0;
              $2263 = $2262&255;
              $b75 = $2263;
              $2264 = $r73;
              $2265 = $g74;
              $2266 = $2265 & 3;
              $2267 = $2266 << 8;
              $2268 = (($2264) + ($2267))|0;
              $2269 = $cShift;
              $2270 = $2268 << $2269;
              $r73 = $2270;
              $2271 = $g74;
              $2272 = $2271 >> 2;
              $2273 = $b75;
              $2274 = $2273 & 15;
              $2275 = $2274 << 6;
              $2276 = (($2272) + ($2275))|0;
              $2277 = $cShift;
              $2278 = $2276 << $2277;
              $g74 = $2278;
              $2279 = $b75;
              $2280 = $2279 >> 4;
              $2281 = $pSrc71;
              $2282 = (($2281) + 3|0);
              $2283 = HEAP8[$2282>>0]|0;
              $2284 = $2283&255;
              $2285 = $2284 & 63;
              $2286 = $2285 << 4;
              $2287 = (($2280) + ($2286))|0;
              $2288 = $cShift;
              $2289 = $2287 << $2288;
              $b75 = $2289;
              $2290 = $r73;
              $2291 = $b75;
              $2292 = (($2291) - ($2290))|0;
              $b75 = $2292;
              $2293 = $b75;
              $2294 = (($2293) + 1)|0;
              $2295 = $2294 >> 1;
              $2296 = $g74;
              $2297 = (($2295) - ($2296))|0;
              $2298 = $r73;
              $2299 = (($2298) + ($2297))|0;
              $r73 = $2299;
              $2300 = $r73;
              $2301 = (($2300) + 0)|0;
              $2302 = $2301 >> 1;
              $2303 = $g74;
              $2304 = (($2303) + ($2302))|0;
              $g74 = $2304;
              $2305 = $iColumn;
              $2306 = $2305 >>> 4;
              $2307 = $2306 << 8;
              $2308 = $iColumn;
              $2309 = $2308 & 15;
              $2310 = $iRow;
              $2311 = (14240 + ($2310<<4)|0);
              $2312 = (($2311) + ($2309)|0);
              $2313 = HEAP8[$2312>>0]|0;
              $2314 = $2313&255;
              $2315 = (($2307) + ($2314))|0;
              $iPos = $2315;
              $2316 = $r73;
              $2317 = (0 - ($2316))|0;
              $2318 = $iPos;
              $2319 = $pU;
              $2320 = (($2319) + ($2318<<2)|0);
              HEAP32[$2320>>2] = $2317;
              $2321 = $b75;
              $2322 = $iPos;
              $2323 = $pV;
              $2324 = (($2323) + ($2322<<2)|0);
              HEAP32[$2324>>2] = $2321;
              $2325 = $g74;
              $2326 = $iOffset72;
              $2327 = (($2325) - ($2326))|0;
              $2328 = $iPos;
              $2329 = $pY;
              $2330 = (($2329) + ($2328<<2)|0);
              HEAP32[$2330>>2] = $2327;
              $2331 = $iColumn;
              $2332 = (($2331) + 1)|0;
              $iColumn = $2332;
              $2333 = $cPixelStride;
              $2334 = $pSrc71;
              $2335 = (($2334) + ($2333)|0);
              $pSrc71 = $2335;
             }
            } else {
             $2336 = $bdExt;
             $2337 = ($2336|0)==(0);
             if ($2337) {
              $2338 = $cfExt;
              $2339 = ($2338|0)==(0);
              if (!($2339)) {
               label = 268;
               break;
              }
              $iColumn = 0;
              while(1) {
               $2340 = $iColumn;
               $2341 = $cColumn;
               $2342 = ($2340>>>0)<($2341>>>0);
               if (!($2342)) {
                break;
               }
               $2343 = $1;
               $2344 = (($2343) + 84|0);
               $2345 = (($2344) + 32844|0);
               $2346 = HEAP32[$2345>>2]|0;
               $2347 = $iColumn;
               $2348 = $2347 >>> 3;
               $2349 = $pSrc0;
               $2350 = (($2349) + ($2348)|0);
               $2351 = HEAP8[$2350>>0]|0;
               $2352 = $2351&255;
               $2353 = $iColumn;
               $2354 = $2353 & 7;
               $2355 = (7 - ($2354))|0;
               $2356 = $2352 >> $2355;
               $2357 = (($2346) + ($2356))|0;
               $2358 = $2357 & 1;
               $2359 = $cShift;
               $2360 = $2358 << $2359;
               $2361 = $iColumn;
               $2362 = $2361 >>> 4;
               $2363 = $2362 << 8;
               $2364 = $iColumn;
               $2365 = $2364 & 15;
               $2366 = $iRow;
               $2367 = (14240 + ($2366<<4)|0);
               $2368 = (($2367) + ($2365)|0);
               $2369 = HEAP8[$2368>>0]|0;
               $2370 = $2369&255;
               $2371 = (($2363) + ($2370))|0;
               $2372 = $pY;
               $2373 = (($2372) + ($2371<<2)|0);
               HEAP32[$2373>>2] = $2360;
               $2374 = $iColumn;
               $2375 = (($2374) + 1)|0;
               $iColumn = $2375;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $2376 = $iRow;
  $2377 = $iRowStride;
  $2378 = (($2376) + ($2377))|0;
  $2379 = $cRow;
  $2380 = ($2378>>>0)<($2379>>>0);
  if ($2380) {
   $2381 = $1;
   $2382 = (($2381) + 32952|0);
   $2383 = (($2382) + 8|0);
   $2384 = HEAP32[$2383>>2]|0;
   $2385 = $pSrc0;
   $2386 = (($2385) + ($2384)|0);
   $pSrc0 = $2386;
  }
  $2387 = $iRowStride;
  $2388 = $iRow;
  $2389 = (($2388) + ($2387))|0;
  $iRow = $2389;
 }
 switch (label|0) {
  case 17: {
   ___assert_fail((7152|0),(7080|0),1864,(7168|0));
   // unreachable;
   break;
  }
  case 47: {
   ___assert_fail((7184|0),(7080|0),1907,(7168|0));
   // unreachable;
   break;
  }
  case 52: {
   ___assert_fail((7192|0),(7080|0),1917,(7168|0));
   // unreachable;
   break;
  }
  case 59: {
   ___assert_fail((7152|0),(7080|0),1936,(7168|0));
   // unreachable;
   break;
  }
  case 102: {
   ___assert_fail((7184|0),(7080|0),2011,(7168|0));
   // unreachable;
   break;
  }
  case 142: {
   ___assert_fail((7184|0),(7080|0),2094,(7168|0));
   // unreachable;
   break;
  }
  case 168: {
   ___assert_fail((7184|0),(7080|0),2148,(7168|0));
   // unreachable;
   break;
  }
  case 186: {
   ___assert_fail((7184|0),(7080|0),2186,(7168|0));
   // unreachable;
   break;
  }
  case 204: {
   ___assert_fail((7184|0),(7080|0),2223,(7168|0));
   // unreachable;
   break;
  }
  case 222: {
   ___assert_fail((7184|0),(7080|0),2259,(7168|0));
   // unreachable;
   break;
  }
  case 240: {
   ___assert_fail((7184|0),(7080|0),2296,(7168|0));
   // unreachable;
   break;
  }
  case 244: {
   ___assert_fail((7224|0),(7080|0),2304,(7168|0));
   // unreachable;
   break;
  }
  case 252: {
   ___assert_fail((7224|0),(7080|0),2321,(7168|0));
   // unreachable;
   break;
  }
  case 260: {
   ___assert_fail((7224|0),(7080|0),2338,(7168|0));
   // unreachable;
   break;
  }
  case 268: {
   ___assert_fail((7240|0),(7080|0),2353,(7168|0));
   // unreachable;
   break;
  }
  case 289: {
   $2390 = $1;
   _padHorizontally($2390);
   $2391 = $1;
   $2392 = (($2391) + 34264|0);
   $2393 = HEAP32[$2392>>2]|0;
   $2394 = ($2393|0)!=(0);
   if ($2394) {
    $2395 = $1;
    _downsampleUV($2395);
   }
   $2396 = $1;
   $2397 = (($2396) + 84|0);
   $2398 = (($2397) + 36|0);
   $2399 = HEAP8[$2398>>0]|0;
   $2400 = $2399&255;
   $2401 = ($2400|0)==(3);
   do {
    if ($2401) {
     $2402 = $1;
     $2403 = (_inputMBRowAlpha($2402)|0);
     $2404 = ($2403|0)!=(0);
     if (!($2404)) {
      break;
     }
     $0 = -1;
     $2405 = $0;
     STACKTOP = sp;return ($2405|0);
    }
   } while(0);
   $0 = 0;
   $2405 = $0;
   STACKTOP = sp;return ($2405|0);
   break;
  }
 }
 return 0|0;
}
function _forwardRGBE($RGB,$E) {
 $RGB = $RGB|0;
 $E = $E|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iAppend = 0, $iResult = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $RGB;
 $2 = $E;
 $iResult = 0;
 $iAppend = 1;
 $3 = $2;
 $4 = ($3|0)==(0);
 if ($4) {
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $5 = $2;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___assert_fail((7256|0),(7080|0),322,(7264|0));
  // unreachable;
 }
 $7 = $2;
 $8 = (($7) + -1)|0;
 $2 = $8;
 while(1) {
  $9 = $1;
  $10 = $9 & 128;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $2;
   $13 = ($12|0)>(0);
   $32 = $13;
  } else {
   $32 = 0;
  }
  if (!($32)) {
   break;
  }
  $14 = $1;
  $15 = $14 << 1;
  $16 = $iAppend;
  $17 = (($15) + ($16))|0;
  $1 = $17;
  $iAppend = 0;
  $18 = $2;
  $19 = (($18) + -1)|0;
  $2 = $19;
 }
 $20 = $2;
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = $1;
  $iResult = $22;
 } else {
  $23 = $2;
  $24 = (($23) + 1)|0;
  $2 = $24;
  $25 = $1;
  $26 = $25 & 127;
  $27 = $2;
  $28 = $27 << 7;
  $29 = (($26) + ($28))|0;
  $iResult = $29;
 }
 $30 = $iResult;
 $0 = $30;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _strDCT4x4Stage1($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 _FOURBUTTERFLY_HARDCODED1($1);
 $2 = $0;
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = $0;
 $8 = (($7) + 12|0);
 _strDCT2x2up($2,$4,$6,$8);
 $9 = $0;
 $10 = (($9) + 60|0);
 $11 = $0;
 $12 = (($11) + 56|0);
 $13 = $0;
 $14 = (($13) + 52|0);
 $15 = $0;
 $16 = (($15) + 48|0);
 _fwdOddOdd($10,$12,$14,$16);
 $17 = $0;
 $18 = (($17) + 20|0);
 $19 = $0;
 $20 = (($19) + 16|0);
 $21 = $0;
 $22 = (($21) + 28|0);
 $23 = $0;
 $24 = (($23) + 24|0);
 _fwdOdd($18,$20,$22,$24);
 $25 = $0;
 $26 = (($25) + 40|0);
 $27 = $0;
 $28 = (($27) + 32|0);
 $29 = $0;
 $30 = (($29) + 44|0);
 $31 = $0;
 $32 = (($31) + 36|0);
 _fwdOdd($26,$28,$30,$32);
 STACKTOP = sp;return;
}
function _fwdOddOdd($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, $t1 = 0, $t2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (0 - ($7))|0;
 $b = $8;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (0 - ($10))|0;
 $c = $11;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $d = $13;
 $14 = $a;
 $15 = $d;
 $16 = (($15) + ($14))|0;
 $d = $16;
 $17 = $b;
 $18 = $c;
 $19 = (($18) - ($17))|0;
 $c = $19;
 $20 = $d;
 $21 = $20 >> 1;
 $t1 = $21;
 $22 = $a;
 $23 = (($22) - ($21))|0;
 $a = $23;
 $24 = $c;
 $25 = $24 >> 1;
 $t2 = $25;
 $26 = $b;
 $27 = (($26) + ($25))|0;
 $b = $27;
 $28 = $b;
 $29 = ($28*3)|0;
 $30 = (($29) + 4)|0;
 $31 = $30 >> 3;
 $32 = $a;
 $33 = (($32) + ($31))|0;
 $a = $33;
 $34 = $a;
 $35 = ($34*3)|0;
 $36 = (($35) + 3)|0;
 $37 = $36 >> 2;
 $38 = $b;
 $39 = (($38) - ($37))|0;
 $b = $39;
 $40 = $b;
 $41 = ($40*3)|0;
 $42 = (($41) + 3)|0;
 $43 = $42 >> 3;
 $44 = $a;
 $45 = (($44) + ($43))|0;
 $a = $45;
 $46 = $t2;
 $47 = $b;
 $48 = (($47) - ($46))|0;
 $b = $48;
 $49 = $t1;
 $50 = $a;
 $51 = (($50) + ($49))|0;
 $a = $51;
 $52 = $b;
 $53 = $c;
 $54 = (($53) + ($52))|0;
 $c = $54;
 $55 = $a;
 $56 = $d;
 $57 = (($56) - ($55))|0;
 $d = $57;
 $58 = $a;
 $59 = $0;
 HEAP32[$59>>2] = $58;
 $60 = $b;
 $61 = $1;
 HEAP32[$61>>2] = $60;
 $62 = $c;
 $63 = $2;
 HEAP32[$63>>2] = $62;
 $64 = $d;
 $65 = $3;
 HEAP32[$65>>2] = $64;
 STACKTOP = sp;return;
}
function _fwdOdd($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $c;
 $13 = $b;
 $14 = (($13) - ($12))|0;
 $b = $14;
 $15 = $d;
 $16 = $a;
 $17 = (($16) + ($15))|0;
 $a = $17;
 $18 = $b;
 $19 = (($18) + 1)|0;
 $20 = $19 >> 1;
 $21 = $c;
 $22 = (($21) + ($20))|0;
 $c = $22;
 $23 = $a;
 $24 = (($23) + 1)|0;
 $25 = $24 >> 1;
 $26 = $d;
 $27 = (($25) - ($26))|0;
 $d = $27;
 $28 = $a;
 $29 = ($28*3)|0;
 $30 = (($29) + 4)|0;
 $31 = $30 >> 3;
 $32 = $b;
 $33 = (($32) - ($31))|0;
 $b = $33;
 $34 = $b;
 $35 = ($34*3)|0;
 $36 = (($35) + 4)|0;
 $37 = $36 >> 3;
 $38 = $a;
 $39 = (($38) + ($37))|0;
 $a = $39;
 $40 = $c;
 $41 = ($40*3)|0;
 $42 = (($41) + 4)|0;
 $43 = $42 >> 3;
 $44 = $d;
 $45 = (($44) - ($43))|0;
 $d = $45;
 $46 = $d;
 $47 = ($46*3)|0;
 $48 = (($47) + 4)|0;
 $49 = $48 >> 3;
 $50 = $c;
 $51 = (($50) + ($49))|0;
 $c = $51;
 $52 = $b;
 $53 = $52 >> 1;
 $54 = $d;
 $55 = (($54) + ($53))|0;
 $d = $55;
 $56 = $a;
 $57 = (($56) + 1)|0;
 $58 = $57 >> 1;
 $59 = $c;
 $60 = (($59) - ($58))|0;
 $c = $60;
 $61 = $d;
 $62 = $b;
 $63 = (($62) - ($61))|0;
 $b = $63;
 $64 = $c;
 $65 = $a;
 $66 = (($65) + ($64))|0;
 $a = $66;
 $67 = $a;
 $68 = $0;
 HEAP32[$68>>2] = $67;
 $69 = $b;
 $70 = $1;
 HEAP32[$70>>2] = $69;
 $71 = $c;
 $72 = $2;
 HEAP32[$72>>2] = $71;
 $73 = $d;
 $74 = $3;
 HEAP32[$74>>2] = $73;
 STACKTOP = sp;return;
}
function _strDCT4x4SecondStage($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 768|0);
 $4 = $0;
 $5 = (($4) + 192|0);
 $6 = $0;
 $7 = (($6) + 960|0);
 _strDCT2x2dn($1,$3,$5,$7);
 $8 = $0;
 $9 = (($8) + 256|0);
 $10 = $0;
 $11 = (($10) + 512|0);
 $12 = $0;
 $13 = (($12) + 448|0);
 $14 = $0;
 $15 = (($14) + 704|0);
 _strDCT2x2dn($9,$11,$13,$15);
 $16 = $0;
 $17 = (($16) + 64|0);
 $18 = $0;
 $19 = (($18) + 832|0);
 $20 = $0;
 $21 = (($20) + 128|0);
 $22 = $0;
 $23 = (($22) + 896|0);
 _strDCT2x2dn($17,$19,$21,$23);
 $24 = $0;
 $25 = (($24) + 320|0);
 $26 = $0;
 $27 = (($26) + 576|0);
 $28 = $0;
 $29 = (($28) + 384|0);
 $30 = $0;
 $31 = (($30) + 640|0);
 _strDCT2x2dn($25,$27,$29,$31);
 $32 = $0;
 $33 = $0;
 $34 = (($33) + 256|0);
 $35 = $0;
 $36 = (($35) + 64|0);
 $37 = $0;
 $38 = (($37) + 320|0);
 _strDCT2x2up($32,$34,$36,$38);
 $39 = $0;
 $40 = (($39) + 640|0);
 $41 = $0;
 $42 = (($41) + 896|0);
 $43 = $0;
 $44 = (($43) + 704|0);
 $45 = $0;
 $46 = (($45) + 960|0);
 _fwdOddOdd($40,$42,$44,$46);
 $47 = $0;
 $48 = (($47) + 512|0);
 $49 = $0;
 $50 = (($49) + 768|0);
 $51 = $0;
 $52 = (($51) + 576|0);
 $53 = $0;
 $54 = (($53) + 832|0);
 _fwdOdd($48,$50,$52,$54);
 $55 = $0;
 $56 = (($55) + 128|0);
 $57 = $0;
 $58 = (($57) + 192|0);
 $59 = $0;
 $60 = (($59) + 384|0);
 $61 = $0;
 $62 = (($61) + 448|0);
 _fwdOdd($56,$58,$60,$62);
 STACKTOP = sp;return;
}
function _strNormalizeEnc($p,$bChroma) {
 $p = $p|0;
 $bChroma = $bChroma|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $bChroma;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(256);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 >> 1;
  HEAP32[$8>>2] = $10;
  $11 = $i;
  $12 = (($11) + 16)|0;
  $i = $12;
 }
 STACKTOP = sp;return;
}
function _strDCT2x2dnEnc($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $C = 0, $a = 0, $b = 0, $c = 0, $d = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 0)|0;
 $7 = $6 >> 1;
 $a = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 0)|0;
 $11 = $10 >> 1;
 $b = $11;
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 0)|0;
 $15 = $14 >> 1;
 $C = $15;
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 0)|0;
 $19 = $18 >> 1;
 $d = $19;
 $20 = $d;
 $21 = $a;
 $22 = (($21) + ($20))|0;
 $a = $22;
 $23 = $C;
 $24 = $b;
 $25 = (($24) - ($23))|0;
 $b = $25;
 $26 = $a;
 $27 = $b;
 $28 = (($26) - ($27))|0;
 $29 = $28 >> 1;
 $t = $29;
 $30 = $t;
 $31 = $d;
 $32 = (($30) - ($31))|0;
 $c = $32;
 $33 = $t;
 $34 = $C;
 $35 = (($33) - ($34))|0;
 $d = $35;
 $36 = $d;
 $37 = $a;
 $38 = (($37) - ($36))|0;
 $a = $38;
 $39 = $c;
 $40 = $b;
 $41 = (($40) + ($39))|0;
 $b = $41;
 $42 = $a;
 $43 = $0;
 HEAP32[$43>>2] = $42;
 $44 = $b;
 $45 = $1;
 HEAP32[$45>>2] = $44;
 $46 = $c;
 $47 = $2;
 HEAP32[$47>>2] = $46;
 $48 = $d;
 $49 = $3;
 HEAP32[$49>>2] = $48;
 STACKTOP = sp;return;
}
function _strPre2($pa,$pb) {
 $pa = $pa|0;
 $pb = $pb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $a = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $b = $5;
 $6 = $a;
 $7 = (($6) + 2)|0;
 $8 = $7 >> 2;
 $9 = $b;
 $10 = (($9) - ($8))|0;
 $b = $10;
 $11 = $b;
 $12 = (($11) + 1)|0;
 $13 = $12 >> 1;
 $14 = $a;
 $15 = (($14) - ($13))|0;
 $a = $15;
 $16 = $b;
 $17 = $16 >> 5;
 $18 = $a;
 $19 = (($18) - ($17))|0;
 $a = $19;
 $20 = $b;
 $21 = $20 >> 9;
 $22 = $a;
 $23 = (($22) - ($21))|0;
 $a = $23;
 $24 = $b;
 $25 = $24 >> 13;
 $26 = $a;
 $27 = (($26) - ($25))|0;
 $a = $27;
 $28 = $a;
 $29 = (($28) + 2)|0;
 $30 = $29 >> 2;
 $31 = $b;
 $32 = (($31) - ($30))|0;
 $b = $32;
 $33 = $a;
 $34 = $0;
 HEAP32[$34>>2] = $33;
 $35 = $b;
 $36 = $1;
 HEAP32[$36>>2] = $35;
 STACKTOP = sp;return;
}
function _strPre2x2($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $a = 0;
 var $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $d;
 $13 = $a;
 $14 = (($13) + ($12))|0;
 $a = $14;
 $15 = $c;
 $16 = $b;
 $17 = (($16) + ($15))|0;
 $b = $17;
 $18 = $a;
 $19 = (($18) + 1)|0;
 $20 = $19 >> 1;
 $21 = $d;
 $22 = (($21) - ($20))|0;
 $d = $22;
 $23 = $b;
 $24 = (($23) + 1)|0;
 $25 = $24 >> 1;
 $26 = $c;
 $27 = (($26) - ($25))|0;
 $c = $27;
 $28 = $a;
 $29 = (($28) + 2)|0;
 $30 = $29 >> 2;
 $31 = $b;
 $32 = (($31) - ($30))|0;
 $b = $32;
 $33 = $b;
 $34 = (($33) + 1)|0;
 $35 = $34 >> 1;
 $36 = $a;
 $37 = (($36) - ($35))|0;
 $a = $37;
 $38 = $b;
 $39 = $38 >> 5;
 $40 = $a;
 $41 = (($40) - ($39))|0;
 $a = $41;
 $42 = $b;
 $43 = $42 >> 9;
 $44 = $a;
 $45 = (($44) - ($43))|0;
 $a = $45;
 $46 = $b;
 $47 = $46 >> 13;
 $48 = $a;
 $49 = (($48) - ($47))|0;
 $a = $49;
 $50 = $a;
 $51 = (($50) + 2)|0;
 $52 = $51 >> 2;
 $53 = $b;
 $54 = (($53) - ($52))|0;
 $b = $54;
 $55 = $a;
 $56 = (($55) + 1)|0;
 $57 = $56 >> 1;
 $58 = $d;
 $59 = (($58) + ($57))|0;
 $d = $59;
 $60 = $b;
 $61 = (($60) + 1)|0;
 $62 = $61 >> 1;
 $63 = $c;
 $64 = (($63) + ($62))|0;
 $c = $64;
 $65 = $d;
 $66 = $a;
 $67 = (($66) - ($65))|0;
 $a = $67;
 $68 = $c;
 $69 = $b;
 $70 = (($69) - ($68))|0;
 $b = $70;
 $71 = $a;
 $72 = $0;
 HEAP32[$72>>2] = $71;
 $73 = $b;
 $74 = $1;
 HEAP32[$74>>2] = $73;
 $75 = $c;
 $76 = $2;
 HEAP32[$76>>2] = $75;
 $77 = $d;
 $78 = $3;
 HEAP32[$78>>2] = $77;
 STACKTOP = sp;return;
}
function _strPre4($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 12|0;
 $b = sp + 16|0;
 $c = sp + 20|0;
 $d = sp + 24|0;
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$a>>2] = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$b>>2] = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$c>>2] = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$d>>2] = $11;
 $12 = HEAP32[$d>>2]|0;
 $13 = HEAP32[$a>>2]|0;
 $14 = (($13) + ($12))|0;
 HEAP32[$a>>2] = $14;
 $15 = HEAP32[$c>>2]|0;
 $16 = HEAP32[$b>>2]|0;
 $17 = (($16) + ($15))|0;
 HEAP32[$b>>2] = $17;
 $18 = HEAP32[$a>>2]|0;
 $19 = (($18) + 1)|0;
 $20 = $19 >> 1;
 $21 = HEAP32[$d>>2]|0;
 $22 = (($21) - ($20))|0;
 HEAP32[$d>>2] = $22;
 $23 = HEAP32[$b>>2]|0;
 $24 = (($23) + 1)|0;
 $25 = $24 >> 1;
 $26 = HEAP32[$c>>2]|0;
 $27 = (($26) - ($25))|0;
 HEAP32[$c>>2] = $27;
 $28 = HEAP32[$c>>2]|0;
 $29 = (($28) + 1)|0;
 $30 = $29 >> 1;
 $31 = HEAP32[$d>>2]|0;
 $32 = (($31) - ($30))|0;
 HEAP32[$d>>2] = $32;
 $33 = HEAP32[$d>>2]|0;
 $34 = (($33) + 1)|0;
 $35 = $34 >> 1;
 $36 = HEAP32[$c>>2]|0;
 $37 = (($36) + ($35))|0;
 HEAP32[$c>>2] = $37;
 _strHSTenc1_edge($a,$d);
 _strHSTenc1_edge($b,$c);
 $38 = HEAP32[$a>>2]|0;
 $39 = (($38) + 1)|0;
 $40 = $39 >> 1;
 $41 = HEAP32[$d>>2]|0;
 $42 = (($41) + ($40))|0;
 HEAP32[$d>>2] = $42;
 $43 = HEAP32[$b>>2]|0;
 $44 = (($43) + 1)|0;
 $45 = $44 >> 1;
 $46 = HEAP32[$c>>2]|0;
 $47 = (($46) + ($45))|0;
 HEAP32[$c>>2] = $47;
 $48 = HEAP32[$d>>2]|0;
 $49 = HEAP32[$a>>2]|0;
 $50 = (($49) - ($48))|0;
 HEAP32[$a>>2] = $50;
 $51 = HEAP32[$c>>2]|0;
 $52 = HEAP32[$b>>2]|0;
 $53 = (($52) - ($51))|0;
 HEAP32[$b>>2] = $53;
 $54 = HEAP32[$a>>2]|0;
 $55 = $0;
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$b>>2]|0;
 $57 = $1;
 HEAP32[$57>>2] = $56;
 $58 = HEAP32[$c>>2]|0;
 $59 = $2;
 HEAP32[$59>>2] = $58;
 $60 = HEAP32[$d>>2]|0;
 $61 = $3;
 HEAP32[$61>>2] = $60;
 STACKTOP = sp;return;
}
function _strHSTenc1_edge($pa,$pd) {
 $pa = $pa|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pd;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $a = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (0 - ($5))|0;
 $d = $6;
 $7 = $d;
 $8 = $a;
 $9 = (($8) - ($7))|0;
 $a = $9;
 $10 = $a;
 $11 = $10 >> 1;
 $12 = $d;
 $13 = (($12) + ($11))|0;
 $d = $13;
 $14 = $d;
 $15 = ($14*3)|0;
 $16 = (($15) + 4)|0;
 $17 = $16 >> 3;
 $18 = $a;
 $19 = (($18) - ($17))|0;
 $a = $19;
 $20 = $a;
 $21 = $20 >> 7;
 $22 = $d;
 $23 = (($22) - ($21))|0;
 $d = $23;
 $24 = $a;
 $25 = $24 >> 10;
 $26 = $d;
 $27 = (($26) + ($25))|0;
 $d = $27;
 $28 = $a;
 $29 = ($28*3)|0;
 $30 = (($29) + 0)|0;
 $31 = $30 >> 4;
 $32 = $d;
 $33 = (($32) - ($31))|0;
 $d = $33;
 $34 = $d;
 $35 = ($34*3)|0;
 $36 = (($35) + 0)|0;
 $37 = $36 >> 3;
 $38 = $a;
 $39 = (($38) - ($37))|0;
 $a = $39;
 $40 = $a;
 $41 = $40 >> 1;
 $42 = $d;
 $43 = (($41) - ($42))|0;
 $d = $43;
 $44 = $d;
 $45 = $a;
 $46 = (($45) - ($44))|0;
 $a = $46;
 $47 = $a;
 $48 = $0;
 HEAP32[$48>>2] = $47;
 $49 = $d;
 $50 = $1;
 HEAP32[$50>>2] = $49;
 STACKTOP = sp;return;
}
function _strPre4x4Stage1Split($p0,$p1,$iOffset) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 $iOffset = $iOffset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $p2 = 0, $p3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p0;
 $1 = $p1;
 $2 = $iOffset;
 $3 = $0;
 $4 = (($3) + 288|0);
 $5 = $2;
 $6 = (0 - ($5))|0;
 $7 = (($4) + ($6<<2)|0);
 $p2 = $7;
 $8 = $1;
 $9 = (($8) + 256|0);
 $10 = $2;
 $11 = (0 - ($10))|0;
 $12 = (($9) + ($11<<2)|0);
 $p3 = $12;
 $13 = $0;
 $14 = (($13) + 48|0);
 $0 = $14;
 $15 = $1;
 $16 = (($15) + 16|0);
 $1 = $16;
 $17 = $0;
 $18 = $p2;
 $19 = $1;
 $20 = $p3;
 _strHSTenc($17,$18,$19,$20);
 $21 = $0;
 $22 = (($21) + 4|0);
 $23 = $p2;
 $24 = (($23) + 4|0);
 $25 = $1;
 $26 = (($25) + 4|0);
 $27 = $p3;
 $28 = (($27) + 4|0);
 _strHSTenc($22,$24,$26,$28);
 $29 = $0;
 $30 = (($29) + 8|0);
 $31 = $p2;
 $32 = (($31) + 8|0);
 $33 = $1;
 $34 = (($33) + 8|0);
 $35 = $p3;
 $36 = (($35) + 8|0);
 _strHSTenc($30,$32,$34,$36);
 $37 = $0;
 $38 = (($37) + 12|0);
 $39 = $p2;
 $40 = (($39) + 12|0);
 $41 = $1;
 $42 = (($41) + 12|0);
 $43 = $p3;
 $44 = (($43) + 12|0);
 _strHSTenc($38,$40,$42,$44);
 $45 = $0;
 $46 = $p3;
 _strHSTenc1($45,$46);
 $47 = $0;
 $48 = (($47) + 4|0);
 $49 = $p3;
 $50 = (($49) + 4|0);
 _strHSTenc1($48,$50);
 $51 = $0;
 $52 = (($51) + 8|0);
 $53 = $p3;
 $54 = (($53) + 8|0);
 _strHSTenc1($52,$54);
 $55 = $0;
 $56 = (($55) + 12|0);
 $57 = $p3;
 $58 = (($57) + 12|0);
 _strHSTenc1($56,$58);
 $59 = $1;
 $60 = (($59) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 $63 = $62 >> 1;
 $64 = $1;
 $65 = (($64) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) - ($63))|0;
 HEAP32[$65>>2] = $67;
 $68 = $1;
 $69 = (($68) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + 1)|0;
 $72 = $71 >> 1;
 $73 = $1;
 $74 = (($73) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75) + ($72))|0;
 HEAP32[$74>>2] = $76;
 $77 = $1;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + 1)|0;
 $80 = $79 >> 1;
 $81 = $1;
 $82 = (($81) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) - ($80))|0;
 HEAP32[$82>>2] = $84;
 $85 = $1;
 $86 = (($85) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($87) + 1)|0;
 $89 = $88 >> 1;
 $90 = $1;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + ($89))|0;
 HEAP32[$90>>2] = $92;
 $93 = $p2;
 $94 = (($93) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + 1)|0;
 $97 = $96 >> 1;
 $98 = $p2;
 $99 = (($98) + 12|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) - ($97))|0;
 HEAP32[$99>>2] = $101;
 $102 = $p2;
 $103 = (($102) + 12|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 1)|0;
 $106 = $105 >> 1;
 $107 = $p2;
 $108 = (($107) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($109) + ($106))|0;
 HEAP32[$108>>2] = $110;
 $111 = $p2;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($112) + 1)|0;
 $114 = $113 >> 1;
 $115 = $p2;
 $116 = (($115) + 8|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($117) - ($114))|0;
 HEAP32[$116>>2] = $118;
 $119 = $p2;
 $120 = (($119) + 8|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (($121) + 1)|0;
 $123 = $122 >> 1;
 $124 = $p2;
 $125 = HEAP32[$124>>2]|0;
 $126 = (($125) + ($123))|0;
 HEAP32[$124>>2] = $126;
 $127 = $p3;
 $128 = $p3;
 $129 = (($128) + 4|0);
 $130 = $p3;
 $131 = (($130) + 8|0);
 $132 = $p3;
 $133 = (($132) + 12|0);
 _fwdOddOddPre($127,$129,$131,$133);
 $134 = $0;
 $135 = $p2;
 $136 = $1;
 $137 = $p3;
 _strDCT2x2dn($134,$135,$136,$137);
 $138 = $0;
 $139 = (($138) + 4|0);
 $140 = $p2;
 $141 = (($140) + 4|0);
 $142 = $1;
 $143 = (($142) + 4|0);
 $144 = $p3;
 $145 = (($144) + 4|0);
 _strDCT2x2dn($139,$141,$143,$145);
 $146 = $0;
 $147 = (($146) + 8|0);
 $148 = $p2;
 $149 = (($148) + 8|0);
 $150 = $1;
 $151 = (($150) + 8|0);
 $152 = $p3;
 $153 = (($152) + 8|0);
 _strDCT2x2dn($147,$149,$151,$153);
 $154 = $0;
 $155 = (($154) + 12|0);
 $156 = $p2;
 $157 = (($156) + 12|0);
 $158 = $1;
 $159 = (($158) + 12|0);
 $160 = $p3;
 $161 = (($160) + 12|0);
 _strDCT2x2dn($155,$157,$159,$161);
 STACKTOP = sp;return;
}
function _strHSTenc($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $d = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $c = $11;
 $12 = $c;
 $13 = $a;
 $14 = (($13) + ($12))|0;
 $a = $14;
 $15 = $d;
 $16 = $b;
 $17 = (($16) - ($15))|0;
 $b = $17;
 $18 = $a;
 $19 = $b;
 $20 = (($18) - ($19))|0;
 $21 = $20 >> 1;
 $22 = $c;
 $23 = (($21) - ($22))|0;
 $c = $23;
 $24 = $b;
 $25 = $24 >> 1;
 $26 = $d;
 $27 = (($26) + ($25))|0;
 $d = $27;
 $28 = $c;
 $29 = $b;
 $30 = (($29) + ($28))|0;
 $b = $30;
 $31 = $d;
 $32 = ($31*3)|0;
 $33 = (($32) + 4)|0;
 $34 = $33 >> 3;
 $35 = $a;
 $36 = (($35) - ($34))|0;
 $a = $36;
 $37 = $a;
 $38 = $0;
 HEAP32[$38>>2] = $37;
 $39 = $b;
 $40 = $1;
 HEAP32[$40>>2] = $39;
 $41 = $c;
 $42 = $2;
 HEAP32[$42>>2] = $41;
 $43 = $d;
 $44 = $3;
 HEAP32[$44>>2] = $43;
 STACKTOP = sp;return;
}
function _strHSTenc1($pa,$pd) {
 $pa = $pa|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $d = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pd;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $a = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $d = $5;
 $6 = $a;
 $7 = $6 >> 7;
 $8 = $d;
 $9 = (($8) - ($7))|0;
 $d = $9;
 $10 = $a;
 $11 = $10 >> 10;
 $12 = $d;
 $13 = (($12) + ($11))|0;
 $d = $13;
 $14 = $a;
 $15 = ($14*3)|0;
 $16 = (($15) + 0)|0;
 $17 = $16 >> 4;
 $18 = $d;
 $19 = (($18) - ($17))|0;
 $d = $19;
 $20 = $d;
 $21 = ($20*3)|0;
 $22 = (($21) + 0)|0;
 $23 = $22 >> 3;
 $24 = $a;
 $25 = (($24) - ($23))|0;
 $a = $25;
 $26 = $a;
 $27 = $26 >> 1;
 $28 = $d;
 $29 = (($27) - ($28))|0;
 $d = $29;
 $30 = $d;
 $31 = $a;
 $32 = (($31) - ($30))|0;
 $a = $32;
 $33 = $a;
 $34 = $0;
 HEAP32[$34>>2] = $33;
 $35 = $d;
 $36 = $1;
 HEAP32[$36>>2] = $35;
 STACKTOP = sp;return;
}
function _fwdOddOddPre($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, $t1 = 0, $t2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $a;
 $13 = $d;
 $14 = (($13) + ($12))|0;
 $d = $14;
 $15 = $b;
 $16 = $c;
 $17 = (($16) - ($15))|0;
 $c = $17;
 $18 = $d;
 $19 = $18 >> 1;
 $t1 = $19;
 $20 = $a;
 $21 = (($20) - ($19))|0;
 $a = $21;
 $22 = $c;
 $23 = $22 >> 1;
 $t2 = $23;
 $24 = $b;
 $25 = (($24) + ($23))|0;
 $b = $25;
 $26 = $b;
 $27 = ($26*3)|0;
 $28 = (($27) + 4)|0;
 $29 = $28 >> 3;
 $30 = $a;
 $31 = (($30) + ($29))|0;
 $a = $31;
 $32 = $a;
 $33 = ($32*3)|0;
 $34 = (($33) + 2)|0;
 $35 = $34 >> 2;
 $36 = $b;
 $37 = (($36) - ($35))|0;
 $b = $37;
 $38 = $b;
 $39 = ($38*3)|0;
 $40 = (($39) + 6)|0;
 $41 = $40 >> 3;
 $42 = $a;
 $43 = (($42) + ($41))|0;
 $a = $43;
 $44 = $t2;
 $45 = $b;
 $46 = (($45) - ($44))|0;
 $b = $46;
 $47 = $t1;
 $48 = $a;
 $49 = (($48) + ($47))|0;
 $a = $49;
 $50 = $b;
 $51 = $c;
 $52 = (($51) + ($50))|0;
 $c = $52;
 $53 = $a;
 $54 = $d;
 $55 = (($54) - ($53))|0;
 $d = $55;
 $56 = $a;
 $57 = $0;
 HEAP32[$57>>2] = $56;
 $58 = $b;
 $59 = $1;
 HEAP32[$59>>2] = $58;
 $60 = $c;
 $61 = $2;
 HEAP32[$61>>2] = $60;
 $62 = $d;
 $63 = $3;
 HEAP32[$63>>2] = $62;
 STACKTOP = sp;return;
}
function _strPre4x4Stage1($p,$iOffset) {
 $p = $p|0;
 $iOffset = $iOffset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $iOffset;
 $2 = $0;
 $3 = $0;
 $4 = (($3) + 64|0);
 $5 = $1;
 _strPre4x4Stage1Split($2,$4,$5);
 STACKTOP = sp;return;
}
function _strPre4x4Stage2Split($p0,$p1) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p0;
 $1 = $p1;
 $2 = $0;
 $3 = (($2) + -384|0);
 $4 = $0;
 $5 = (($4) + 384|0);
 $6 = $1;
 $7 = (($6) + -448|0);
 $8 = $1;
 $9 = (($8) + 320|0);
 _strHSTenc($3,$5,$7,$9);
 $10 = $0;
 $11 = (($10) + -128|0);
 $12 = $0;
 $13 = (($12) + 128|0);
 $14 = $1;
 $15 = (($14) + -192|0);
 $16 = $1;
 $17 = (($16) + 64|0);
 _strHSTenc($11,$13,$15,$17);
 $18 = $0;
 $19 = (($18) + -320|0);
 $20 = $0;
 $21 = (($20) + 448|0);
 $22 = $1;
 $23 = (($22) + -512|0);
 $24 = $1;
 $25 = (($24) + 256|0);
 _strHSTenc($19,$21,$23,$25);
 $26 = $0;
 $27 = (($26) + -64|0);
 $28 = $0;
 $29 = (($28) + 192|0);
 $30 = $1;
 $31 = (($30) + -256|0);
 $32 = $1;
 _strHSTenc($27,$29,$31,$32);
 $33 = $0;
 $34 = (($33) + -384|0);
 $35 = $1;
 $36 = (($35) + 320|0);
 _strHSTenc1($34,$36);
 $37 = $0;
 $38 = (($37) + -128|0);
 $39 = $1;
 $40 = (($39) + 64|0);
 _strHSTenc1($38,$40);
 $41 = $0;
 $42 = (($41) + -320|0);
 $43 = $1;
 $44 = (($43) + 256|0);
 _strHSTenc1($42,$44);
 $45 = $0;
 $46 = (($45) + -64|0);
 $47 = $1;
 _strHSTenc1($46,$47);
 $48 = $1;
 $49 = (($48) + -192|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + 1)|0;
 $52 = $51 >> 1;
 $53 = $1;
 $54 = (($53) + -448|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) - ($52))|0;
 HEAP32[$54>>2] = $56;
 $57 = $1;
 $58 = (($57) + -448|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 1)|0;
 $61 = $60 >> 1;
 $62 = $1;
 $63 = (($62) + -192|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + ($61))|0;
 HEAP32[$63>>2] = $65;
 $66 = $1;
 $67 = (($66) + -256|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 1)|0;
 $70 = $69 >> 1;
 $71 = $1;
 $72 = (($71) + -512|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) - ($70))|0;
 HEAP32[$72>>2] = $74;
 $75 = $1;
 $76 = (($75) + -512|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + 1)|0;
 $79 = $78 >> 1;
 $80 = $1;
 $81 = (($80) + -256|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + ($79))|0;
 HEAP32[$81>>2] = $83;
 $84 = $0;
 $85 = (($84) + 448|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + 1)|0;
 $88 = $87 >> 1;
 $89 = $0;
 $90 = (($89) + 384|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) - ($88))|0;
 HEAP32[$90>>2] = $92;
 $93 = $0;
 $94 = (($93) + 384|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + 1)|0;
 $97 = $96 >> 1;
 $98 = $0;
 $99 = (($98) + 448|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + ($97))|0;
 HEAP32[$99>>2] = $101;
 $102 = $0;
 $103 = (($102) + 192|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 1)|0;
 $106 = $105 >> 1;
 $107 = $0;
 $108 = (($107) + 128|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($109) - ($106))|0;
 HEAP32[$108>>2] = $110;
 $111 = $0;
 $112 = (($111) + 128|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (($113) + 1)|0;
 $115 = $114 >> 1;
 $116 = $0;
 $117 = (($116) + 192|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($118) + ($115))|0;
 HEAP32[$117>>2] = $119;
 $120 = $1;
 $121 = $1;
 $122 = (($121) + 256|0);
 $123 = $1;
 $124 = (($123) + 64|0);
 $125 = $1;
 $126 = (($125) + 320|0);
 _fwdOddOddPre($120,$122,$124,$126);
 $127 = $0;
 $128 = (($127) + -384|0);
 $129 = $1;
 $130 = (($129) + -448|0);
 $131 = $0;
 $132 = (($131) + 384|0);
 $133 = $1;
 $134 = (($133) + 320|0);
 _strDCT2x2dn($128,$130,$132,$134);
 $135 = $0;
 $136 = (($135) + -128|0);
 $137 = $1;
 $138 = (($137) + -192|0);
 $139 = $0;
 $140 = (($139) + 128|0);
 $141 = $1;
 $142 = (($141) + 64|0);
 _strDCT2x2dn($136,$138,$140,$142);
 $143 = $0;
 $144 = (($143) + -320|0);
 $145 = $1;
 $146 = (($145) + -512|0);
 $147 = $0;
 $148 = (($147) + 448|0);
 $149 = $1;
 $150 = (($149) + 256|0);
 _strDCT2x2dn($144,$146,$148,$150);
 $151 = $0;
 $152 = (($151) + -64|0);
 $153 = $1;
 $154 = (($153) + -256|0);
 $155 = $0;
 $156 = (($155) + 192|0);
 $157 = $1;
 _strDCT2x2dn($152,$154,$156,$157);
 STACKTOP = sp;return;
}
function _transformMacroblock($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bottom = 0, $cfColorFormat = 0, $i = 0, $iNumChromaFullPlanes = 0, $j = 0, $left = 0, $leftAdjacentColumn = 0, $leftORright = 0, $olOverlap = 0, $p = 0, $p0 = 0, $p01 = 0;
 var $p03 = 0, $p1 = 0, $p12 = 0, $p14 = 0, $right = 0, $rightAdjacentColumn = 0, $top = 0, $topORbottom = 0, $topORleft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 84|0);
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $olOverlap = $4;
 $5 = $0;
 $6 = (($5) + 34136|0);
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $cfColorFormat = $8;
 $9 = $0;
 $10 = (($9) + 34360|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 $13 = $12&1;
 $left = $13;
 $14 = $0;
 $15 = (($14) + 34360|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (($17) + 34364|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)==($19|0);
 $21 = $20&1;
 $right = $21;
 $22 = $0;
 $23 = (($22) + 34356|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 $26 = $25&1;
 $top = $26;
 $27 = $0;
 $28 = (($27) + 34356|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = (($30) + 34368|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($29|0)==($32|0);
 $34 = $33&1;
 $bottom = $34;
 $35 = $left;
 $36 = ($35|0)!=(0);
 if ($36) {
  $40 = 1;
 } else {
  $37 = $right;
  $38 = ($37|0)!=(0);
  $40 = $38;
 }
 $39 = $40&1;
 $leftORright = $39;
 $41 = $top;
 $42 = ($41|0)!=(0);
 if ($42) {
  $46 = 1;
 } else {
  $43 = $bottom;
  $44 = ($43|0)!=(0);
  $46 = $44;
 }
 $45 = $46&1;
 $topORbottom = $45;
 $47 = $left;
 $48 = ($47|0)!=(0);
 if ($48) {
  $52 = 1;
 } else {
  $49 = $top;
  $50 = ($49|0)!=(0);
  $52 = $50;
 }
 $51 = $52&1;
 $topORleft = $51;
 $53 = $0;
 $54 = (($53) + 34360|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(1);
 $57 = $56&1;
 $leftAdjacentColumn = $57;
 $58 = $0;
 $59 = (($58) + 34360|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $0;
 $62 = (($61) + 34364|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) - 1)|0;
 $65 = ($60|0)==($64|0);
 $66 = $65&1;
 $rightAdjacentColumn = $66;
 $p = 0;
 $67 = $cfColorFormat;
 $68 = (1)==($67|0);
 if ($68) {
  label = 9;
 } else {
  $69 = $cfColorFormat;
  $70 = (2)==($69|0);
  if ($70) {
   label = 9;
  } else {
   $71 = $0;
   $72 = (($71) + 34136|0);
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74;
  }
 }
 if ((label|0) == 9) {
  $75 = 1;
 }
 $iNumChromaFullPlanes = $75;
 $76 = $0;
 $77 = (($76) + 84|0);
 $78 = (($77) + 32848|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $0;
  $82 = (($81) + 34360|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0);
  if ($84) {
   $85 = $0;
   $86 = (($85) + 34400|0);
   HEAP32[$86>>2] = 0;
   $87 = $0;
   $88 = (($87) + 34396|0);
   HEAP32[$88>>2] = 0;
  }
  $89 = $0;
  $90 = (($89) + 34412|0);
  HEAP32[$90>>2] = 0;
  $91 = $0;
  $92 = (($91) + 34408|0);
  HEAP32[$92>>2] = 0;
  $93 = $0;
  $94 = (($93) + 34396|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95>>>0)>(0);
  if ($96) {
   $97 = $0;
   $98 = (($97) + 34396|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $0;
   $101 = (($100) + 84|0);
   $102 = (($101) + 16452|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($99>>>0)<=($103>>>0);
   if ($104) {
    $105 = $0;
    $106 = (($105) + 34360|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) - 1)|0;
    $109 = $0;
    $110 = (($109) + 34396|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $0;
    $113 = (($112) + 84|0);
    $114 = (($113) + 16456|0);
    $115 = (($114) + ($111<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($108|0)==($116|0);
    if ($117) {
     $118 = $0;
     $119 = (($118) + 34412|0);
     HEAP32[$119>>2] = 1;
    }
   }
  }
  $120 = $0;
  $121 = (($120) + 34396|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $0;
  $124 = (($123) + 84|0);
  $125 = (($124) + 16452|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($122>>>0)<($126>>>0);
  if ($127) {
   $128 = $0;
   $129 = (($128) + 34360|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $0;
   $132 = (($131) + 34396|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (($133) + 1)|0;
   $135 = $0;
   $136 = (($135) + 84|0);
   $137 = (($136) + 16456|0);
   $138 = (($137) + ($134<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($130|0)==($139|0);
   if ($140) {
    $141 = $0;
    $142 = (($141) + 34400|0);
    HEAP32[$142>>2] = 1;
    $143 = $0;
    $144 = (($143) + 34396|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + 1)|0;
    HEAP32[$144>>2] = $146;
   } else {
    label = 21;
   }
  } else {
   label = 21;
  }
  if ((label|0) == 21) {
   $147 = $0;
   $148 = (($147) + 34400|0);
   HEAP32[$148>>2] = 0;
  }
  $149 = $0;
  $150 = (($149) + 34396|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $0;
  $153 = (($152) + 84|0);
  $154 = (($153) + 16452|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($151>>>0)<($155>>>0);
  if ($156) {
   $157 = $0;
   $158 = (($157) + 34360|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($159) + 1)|0;
   $161 = $0;
   $162 = (($161) + 34396|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + 1)|0;
   $165 = $0;
   $166 = (($165) + 84|0);
   $167 = (($166) + 16456|0);
   $168 = (($167) + ($164<<2)|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ($160|0)==($169|0);
   if ($170) {
    $171 = $0;
    $172 = (($171) + 34408|0);
    HEAP32[$172>>2] = 1;
   }
  }
  $173 = $0;
  $174 = (($173) + 34356|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ($175|0)==(0);
  if ($176) {
   $177 = $0;
   $178 = (($177) + 34404|0);
   HEAP32[$178>>2] = 0;
   $179 = $0;
   $180 = (($179) + 34392|0);
   HEAP32[$180>>2] = 0;
  } else {
   $181 = $0;
   $182 = (($181) + 34380|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $0;
   $185 = (($184) + 34356|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ($183|0)!=($186|0);
   if ($187) {
    $188 = $0;
    $189 = (($188) + 34392|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $0;
    $192 = (($191) + 84|0);
    $193 = (($192) + 64|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = ($190>>>0)<($194>>>0);
    if ($195) {
     $196 = $0;
     $197 = (($196) + 34356|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = $0;
     $200 = (($199) + 34392|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (($201) + 1)|0;
     $203 = $0;
     $204 = (($203) + 84|0);
     $205 = (($204) + 68|0);
     $206 = (($205) + ($202<<2)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($198|0)==($207|0);
     if ($208) {
      $209 = $0;
      $210 = (($209) + 34404|0);
      HEAP32[$210>>2] = 1;
      $211 = $0;
      $212 = (($211) + 34392|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = (($213) + 1)|0;
      HEAP32[$212>>2] = $214;
     } else {
      label = 31;
     }
    } else {
     label = 31;
    }
   } else {
    label = 31;
   }
   if ((label|0) == 31) {
    $215 = $0;
    $216 = (($215) + 34380|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $0;
    $219 = (($218) + 34356|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = ($217|0)!=($220|0);
    if ($221) {
     $222 = $0;
     $223 = (($222) + 34404|0);
     HEAP32[$223>>2] = 0;
    }
   }
  }
 } else {
  $224 = $0;
  $225 = (($224) + 34400|0);
  HEAP32[$225>>2] = 0;
  $226 = $0;
  $227 = (($226) + 34404|0);
  HEAP32[$227>>2] = 0;
  $228 = $0;
  $229 = (($228) + 34408|0);
  HEAP32[$229>>2] = 0;
  $230 = $0;
  $231 = (($230) + 34412|0);
  HEAP32[$231>>2] = 0;
 }
 $232 = $0;
 $233 = (($232) + 34360|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = $0;
 $236 = (($235) + 34376|0);
 HEAP32[$236>>2] = $234;
 $237 = $0;
 $238 = (($237) + 34356|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = $0;
 $241 = (($240) + 34380|0);
 HEAP32[$241>>2] = $239;
 $i = 0;
 while(1) {
  $242 = $i;
  $243 = $iNumChromaFullPlanes;
  $244 = ($242|0)<($243|0);
  if (!($244)) {
   break;
  }
  $245 = $i;
  $246 = $0;
  $247 = (($246) + 34692|0);
  $248 = (($247) + ($245<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $p0 = $249;
  $250 = $i;
  $251 = $0;
  $252 = (($251) + 34756|0);
  $253 = (($252) + ($250<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $p1 = $254;
  $255 = $olOverlap;
  $256 = (0)!=($255|0);
  if ($256) {
   $257 = $top;
   $258 = ($257|0)!=(0);
   if ($258) {
    label = 42;
   } else {
    $259 = $0;
    $260 = (($259) + 34404|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)!=(0);
    if ($262) {
     label = 42;
    }
   }
   do {
    if ((label|0) == 42) {
     label = 0;
     $263 = $left;
     $264 = ($263|0)!=(0);
     if (!($264)) {
      $265 = $0;
      $266 = (($265) + 34400|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = ($267|0)!=(0);
      if (!($268)) {
       break;
      }
     }
     $269 = $p1;
     $270 = $p1;
     $271 = (($270) + 4|0);
     $272 = $p1;
     $273 = (($272) + 8|0);
     $274 = $p1;
     $275 = (($274) + 12|0);
     _strPre4($269,$271,$273,$275);
    }
   } while(0);
   $276 = $top;
   $277 = ($276|0)!=(0);
   if ($277) {
    label = 47;
   } else {
    $278 = $0;
    $279 = (($278) + 34404|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = ($280|0)!=(0);
    if ($281) {
     label = 47;
    }
   }
   do {
    if ((label|0) == 47) {
     label = 0;
     $282 = $right;
     $283 = ($282|0)!=(0);
     if (!($283)) {
      $284 = $0;
      $285 = (($284) + 34400|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = ($286|0)!=(0);
      if (!($287)) {
       break;
      }
     }
     $288 = $p1;
     $289 = (($288) + -236|0);
     $290 = $p1;
     $291 = (($290) + -240|0);
     $292 = $p1;
     $293 = (($292) + -228|0);
     $294 = $p1;
     $295 = (($294) + -232|0);
     _strPre4($289,$291,$293,$295);
    }
   } while(0);
   $296 = $bottom;
   $297 = ($296|0)!=(0);
   if ($297) {
    label = 52;
   } else {
    $298 = $0;
    $299 = (($298) + 34404|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = ($300|0)!=(0);
    if ($301) {
     label = 52;
    }
   }
   do {
    if ((label|0) == 52) {
     label = 0;
     $302 = $left;
     $303 = ($302|0)!=(0);
     if (!($303)) {
      $304 = $0;
      $305 = (($304) + 34400|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = ($306|0)!=(0);
      if (!($307)) {
       break;
      }
     }
     $308 = $p0;
     $309 = (($308) + 192|0);
     $310 = (($309) + 40|0);
     $311 = $p0;
     $312 = (($311) + 192|0);
     $313 = (($312) + 44|0);
     $314 = $p0;
     $315 = (($314) + 192|0);
     $316 = (($315) + 32|0);
     $317 = $p0;
     $318 = (($317) + 192|0);
     $319 = (($318) + 36|0);
     _strPre4($310,$313,$316,$319);
    }
   } while(0);
   $320 = $bottom;
   $321 = ($320|0)!=(0);
   if ($321) {
    label = 57;
   } else {
    $322 = $0;
    $323 = (($322) + 34404|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ($324|0)!=(0);
    if ($325) {
     label = 57;
    }
   }
   do {
    if ((label|0) == 57) {
     label = 0;
     $326 = $right;
     $327 = ($326|0)!=(0);
     if (!($327)) {
      $328 = $0;
      $329 = (($328) + 34400|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = ($330|0)!=(0);
      if (!($331)) {
       break;
      }
     }
     $332 = $p0;
     $333 = (($332) + -4|0);
     $334 = $p0;
     $335 = (($334) + -8|0);
     $336 = $p0;
     $337 = (($336) + -12|0);
     $338 = $p0;
     $339 = (($338) + -16|0);
     _strPre4($333,$335,$337,$339);
    }
   } while(0);
   $340 = $right;
   $341 = ($340|0)!=(0);
   if (!($341)) {
    $342 = $bottom;
    $343 = ($342|0)!=(0);
    if (!($343)) {
     $344 = $top;
     $345 = ($344|0)!=(0);
     if ($345) {
      label = 64;
     } else {
      $346 = $0;
      $347 = (($346) + 34404|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)!=(0);
      if ($349) {
       label = 64;
      } else {
       $381 = $left;
       $382 = ($381|0)!=(0);
       if ($382) {
        $388 = 1;
       } else {
        $383 = $0;
        $384 = (($383) + 34400|0);
        $385 = HEAP32[$384>>2]|0;
        $386 = ($385|0)!=(0);
        $388 = $386;
       }
       $387 = $388 ? 0 : -64;
       $j = $387;
       while(1) {
        $389 = $j;
        $390 = ($389|0)<(192);
        if (!($390)) {
         break;
        }
        $391 = $p0;
        $392 = (($391) + 192|0);
        $393 = $j;
        $394 = (($392) + ($393<<2)|0);
        $395 = $p1;
        $396 = $j;
        $397 = (($395) + ($396<<2)|0);
        _strPre4x4Stage1Split($394,$397,0);
        $398 = $j;
        $399 = (($398) + 64)|0;
        $j = $399;
       }
      }
     }
     if ((label|0) == 64) {
      label = 0;
      $350 = $left;
      $351 = ($350|0)!=(0);
      if ($351) {
       $357 = 1;
      } else {
       $352 = $0;
       $353 = (($352) + 34400|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)!=(0);
       $357 = $355;
      }
      $356 = $357 ? 0 : -64;
      $j = $356;
      while(1) {
       $358 = $j;
       $359 = ($358|0)<(192);
       if (!($359)) {
        break;
       }
       $360 = $p1;
       $361 = $j;
       $362 = (($360) + ($361<<2)|0);
       $p = $362;
       $363 = $p;
       $364 = (($363) + 20|0);
       $365 = $p;
       $366 = (($365) + 16|0);
       $367 = $p;
       $368 = (($367) + 256|0);
       $369 = $p;
       $370 = (($369) + 260|0);
       _strPre4($364,$366,$368,$370);
       $371 = $p;
       $372 = (($371) + 28|0);
       $373 = $p;
       $374 = (($373) + 24|0);
       $375 = $p;
       $376 = (($375) + 264|0);
       $377 = $p;
       $378 = (($377) + 268|0);
       _strPre4($372,$374,$376,$378);
       $p = 0;
       $379 = $j;
       $380 = (($379) + 64)|0;
       $j = $380;
      }
     }
     $400 = $left;
     $401 = ($400|0)!=(0);
     if ($401) {
      label = 80;
     } else {
      $402 = $0;
      $403 = (($402) + 34400|0);
      $404 = HEAP32[$403>>2]|0;
      $405 = ($404|0)!=(0);
      if ($405) {
       label = 80;
      } else {
       $j = -64;
       while(1) {
        $450 = $j;
        $451 = ($450|0)<(-16);
        if (!($451)) {
         break;
        }
        $452 = $p1;
        $453 = $j;
        $454 = (($452) + ($453<<2)|0);
        _strPre4x4Stage1($454,0);
        $455 = $j;
        $456 = (($455) + 16)|0;
        $j = $456;
       }
      }
     }
     if ((label|0) == 80) {
      label = 0;
      $406 = $top;
      $407 = ($406|0)!=(0);
      do {
       if (!($407)) {
        $408 = $0;
        $409 = (($408) + 34404|0);
        $410 = HEAP32[$409>>2]|0;
        $411 = ($410|0)!=(0);
        if ($411) {
         break;
        }
        $412 = $p0;
        $413 = (($412) + 232|0);
        $414 = $p0;
        $415 = (($414) + 224|0);
        $416 = $p1;
        $417 = $p1;
        $418 = (($417) + 8|0);
        _strPre4($413,$415,$416,$418);
        $419 = $p0;
        $420 = (($419) + 236|0);
        $421 = $p0;
        $422 = (($421) + 228|0);
        $423 = $p1;
        $424 = (($423) + 4|0);
        $425 = $p1;
        $426 = (($425) + 12|0);
        _strPre4($420,$422,$424,$426);
       }
      } while(0);
      $j = -64;
      while(1) {
       $427 = $j;
       $428 = ($427|0)<(-16);
       if (!($428)) {
        break;
       }
       $429 = $p1;
       $430 = $j;
       $431 = (($429) + ($430<<2)|0);
       $p = $431;
       $432 = $p;
       $433 = (($432) + 296|0);
       $434 = $p;
       $435 = (($434) + 288|0);
       $436 = $p;
       $437 = (($436) + 320|0);
       $438 = $p;
       $439 = (($438) + 328|0);
       _strPre4($433,$435,$437,$439);
       $440 = $p;
       $441 = (($440) + 300|0);
       $442 = $p;
       $443 = (($442) + 292|0);
       $444 = $p;
       $445 = (($444) + 324|0);
       $446 = $p;
       $447 = (($446) + 332|0);
       _strPre4($441,$443,$445,$447);
       $p = 0;
       $448 = $j;
       $449 = (($448) + 16)|0;
       $j = $449;
      }
     }
     $457 = $p1;
     _strPre4x4Stage1($457,0);
     $458 = $p1;
     $459 = (($458) + 64|0);
     _strPre4x4Stage1($459,0);
     $460 = $p1;
     $461 = (($460) + 128|0);
     _strPre4x4Stage1($461,0);
     $462 = $p1;
     $463 = (($462) + 256|0);
     _strPre4x4Stage1($463,0);
     $464 = $p1;
     $465 = (($464) + 320|0);
     _strPre4x4Stage1($465,0);
     $466 = $p1;
     $467 = (($466) + 384|0);
     _strPre4x4Stage1($467,0);
     $468 = $p1;
     $469 = (($468) + 512|0);
     _strPre4x4Stage1($469,0);
     $470 = $p1;
     $471 = (($470) + 576|0);
     _strPre4x4Stage1($471,0);
     $472 = $p1;
     $473 = (($472) + 640|0);
     _strPre4x4Stage1($473,0);
    }
   }
   $474 = $bottom;
   $475 = ($474|0)!=(0);
   if ($475) {
    label = 96;
   } else {
    $476 = $0;
    $477 = (($476) + 34404|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = ($478|0)!=(0);
    if ($479) {
     label = 96;
    }
   }
   if ((label|0) == 96) {
    label = 0;
    $480 = $left;
    $481 = ($480|0)!=(0);
    if ($481) {
     $487 = 1;
    } else {
     $482 = $0;
     $483 = (($482) + 34400|0);
     $484 = HEAP32[$483>>2]|0;
     $485 = ($484|0)!=(0);
     $487 = $485;
    }
    $486 = $487 ? 48 : -16;
    $j = $486;
    while(1) {
     $488 = $j;
     $489 = $right;
     $490 = ($489|0)!=(0);
     $491 = $490 ? -16 : 240;
     $492 = ($488|0)<($491|0);
     if (!($492)) {
      break;
     }
     $493 = $p0;
     $494 = $j;
     $495 = (($493) + ($494<<2)|0);
     $p = $495;
     $496 = $p;
     $497 = (($496) + 60|0);
     $498 = $p;
     $499 = (($498) + 56|0);
     $500 = $p;
     $501 = (($500) + 296|0);
     $502 = $p;
     $503 = (($502) + 300|0);
     _strPre4($497,$499,$501,$503);
     $504 = $p;
     $505 = (($504) + 52|0);
     $506 = $p;
     $507 = (($506) + 48|0);
     $508 = $p;
     $509 = (($508) + 288|0);
     $510 = $p;
     $511 = (($510) + 292|0);
     _strPre4($505,$507,$509,$511);
     $p = 0;
     $512 = $j;
     $513 = (($512) + 64)|0;
     $j = $513;
    }
   }
   $514 = $right;
   $515 = ($514|0)!=(0);
   if ($515) {
    label = 105;
   } else {
    $516 = $0;
    $517 = (($516) + 34400|0);
    $518 = HEAP32[$517>>2]|0;
    $519 = ($518|0)!=(0);
    if ($519) {
     label = 105;
    }
   }
   if ((label|0) == 105) {
    label = 0;
    $520 = $bottom;
    $521 = ($520|0)!=(0);
    if (!($521)) {
     $522 = $top;
     $523 = ($522|0)!=(0);
     do {
      if (!($523)) {
       $524 = $0;
       $525 = (($524) + 34404|0);
       $526 = HEAP32[$525>>2]|0;
       $527 = ($526|0)!=(0);
       if ($527) {
        break;
       }
       $528 = $p0;
       $529 = (($528) + -4|0);
       $530 = $p0;
       $531 = (($530) + -12|0);
       $532 = $p1;
       $533 = (($532) + -236|0);
       $534 = $p1;
       $535 = (($534) + -228|0);
       _strPre4($529,$531,$533,$535);
       $536 = $p0;
       $537 = (($536) + -8|0);
       $538 = $p0;
       $539 = (($538) + -16|0);
       $540 = $p1;
       $541 = (($540) + -240|0);
       $542 = $p1;
       $543 = (($542) + -232|0);
       _strPre4($537,$539,$541,$543);
      }
     } while(0);
     $j = -64;
     while(1) {
      $544 = $j;
      $545 = ($544|0)<(-16);
      if (!($545)) {
       break;
      }
      $546 = $p1;
      $547 = $j;
      $548 = (($546) + ($547<<2)|0);
      $p = $548;
      $549 = $p;
      $550 = (($549) + 60|0);
      $551 = $p;
      $552 = (($551) + 52|0);
      $553 = $p;
      $554 = (($553) + 84|0);
      $555 = $p;
      $556 = (($555) + 92|0);
      _strPre4($550,$552,$554,$556);
      $557 = $p;
      $558 = (($557) + 56|0);
      $559 = $p;
      $560 = (($559) + 48|0);
      $561 = $p;
      $562 = (($561) + 80|0);
      $563 = $p;
      $564 = (($563) + 88|0);
      _strPre4($558,$560,$562,$564);
      $p = 0;
      $565 = $j;
      $566 = (($565) + 16)|0;
      $j = $566;
     }
    }
   }
  }
  $567 = $top;
  $568 = ($567|0)!=(0);
  if (!($568)) {
   $569 = $left;
   $570 = ($569|0)!=(0);
   $571 = $570 ? 48 : -16;
   $j = $571;
   while(1) {
    $572 = $j;
    $573 = $right;
    $574 = ($573|0)!=(0);
    $575 = $574 ? 48 : 240;
    $576 = ($572|0)<($575|0);
    if (!($576)) {
     break;
    }
    $577 = $p0;
    $578 = $j;
    $579 = (($577) + ($578<<2)|0);
    _strDCT4x4Stage1($579);
    $580 = $j;
    $581 = (($580) + 64)|0;
    $j = $581;
   }
  }
  $582 = $bottom;
  $583 = ($582|0)!=(0);
  if (!($583)) {
   $584 = $left;
   $585 = ($584|0)!=(0);
   $586 = $585 ? 0 : -64;
   $j = $586;
   while(1) {
    $587 = $j;
    $588 = $right;
    $589 = ($588|0)!=(0);
    $590 = $589 ? 0 : 192;
    $591 = ($587|0)<($590|0);
    if (!($591)) {
     break;
    }
    $592 = $p1;
    $593 = $j;
    $594 = (($592) + ($593<<2)|0);
    _strDCT4x4Stage1($594);
    $595 = $p1;
    $596 = $j;
    $597 = (($595) + ($596<<2)|0);
    $598 = (($597) + 64|0);
    _strDCT4x4Stage1($598);
    $599 = $p1;
    $600 = $j;
    $601 = (($599) + ($600<<2)|0);
    $602 = (($601) + 128|0);
    _strDCT4x4Stage1($602);
    $603 = $j;
    $604 = (($603) + 64)|0;
    $j = $604;
   }
  }
  $605 = $olOverlap;
  $606 = (2)==($605|0);
  if ($606) {
   $607 = $top;
   $608 = ($607|0)!=(0);
   if ($608) {
    label = 130;
   } else {
    $609 = $0;
    $610 = (($609) + 34404|0);
    $611 = HEAP32[$610>>2]|0;
    $612 = ($611|0)!=(0);
    if ($612) {
     label = 130;
    }
   }
   do {
    if ((label|0) == 130) {
     label = 0;
     $613 = $left;
     $614 = ($613|0)!=(0);
     if (!($614)) {
      $615 = $0;
      $616 = (($615) + 34400|0);
      $617 = HEAP32[$616>>2]|0;
      $618 = ($617|0)!=(0);
      if (!($618)) {
       break;
      }
     }
     $619 = $p1;
     $620 = $p1;
     $621 = (($620) + 256|0);
     $622 = $p1;
     $623 = (($622) + 64|0);
     $624 = $p1;
     $625 = (($624) + 256|0);
     $626 = (($625) + 64|0);
     _strPre4($619,$621,$623,$626);
    }
   } while(0);
   $627 = $top;
   $628 = ($627|0)!=(0);
   if ($628) {
    label = 135;
   } else {
    $629 = $0;
    $630 = (($629) + 34404|0);
    $631 = HEAP32[$630>>2]|0;
    $632 = ($631|0)!=(0);
    if ($632) {
     label = 135;
    }
   }
   do {
    if ((label|0) == 135) {
     label = 0;
     $633 = $right;
     $634 = ($633|0)!=(0);
     if (!($634)) {
      $635 = $0;
      $636 = (($635) + 34400|0);
      $637 = HEAP32[$636>>2]|0;
      $638 = ($637|0)!=(0);
      if (!($638)) {
       break;
      }
     }
     $639 = $p1;
     $640 = (($639) + -512|0);
     $641 = $p1;
     $642 = (($641) + -256|0);
     $643 = $p1;
     $644 = (($643) + -512|0);
     $645 = (($644) + 64|0);
     $646 = $p1;
     $647 = (($646) + -256|0);
     $648 = (($647) + 64|0);
     _strPre4($640,$642,$645,$648);
    }
   } while(0);
   $649 = $bottom;
   $650 = ($649|0)!=(0);
   if ($650) {
    label = 140;
   } else {
    $651 = $0;
    $652 = (($651) + 34404|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = ($653|0)!=(0);
    if ($654) {
     label = 140;
    }
   }
   do {
    if ((label|0) == 140) {
     label = 0;
     $655 = $left;
     $656 = ($655|0)!=(0);
     if (!($656)) {
      $657 = $0;
      $658 = (($657) + 34400|0);
      $659 = HEAP32[$658>>2]|0;
      $660 = ($659|0)!=(0);
      if (!($660)) {
       break;
      }
     }
     $661 = $p0;
     $662 = (($661) + 128|0);
     $663 = $p0;
     $664 = (($663) + 384|0);
     $665 = $p0;
     $666 = (($665) + 128|0);
     $667 = (($666) + 64|0);
     $668 = $p0;
     $669 = (($668) + 384|0);
     $670 = (($669) + 64|0);
     _strPre4($662,$664,$667,$670);
    }
   } while(0);
   $671 = $bottom;
   $672 = ($671|0)!=(0);
   if ($672) {
    label = 145;
   } else {
    $673 = $0;
    $674 = (($673) + 34404|0);
    $675 = HEAP32[$674>>2]|0;
    $676 = ($675|0)!=(0);
    if ($676) {
     label = 145;
    }
   }
   do {
    if ((label|0) == 145) {
     label = 0;
     $677 = $right;
     $678 = ($677|0)!=(0);
     if (!($678)) {
      $679 = $0;
      $680 = (($679) + 34400|0);
      $681 = HEAP32[$680>>2]|0;
      $682 = ($681|0)!=(0);
      if (!($682)) {
       break;
      }
     }
     $683 = $p0;
     $684 = (($683) + -384|0);
     $685 = $p0;
     $686 = (($685) + -128|0);
     $687 = $p0;
     $688 = (($687) + -384|0);
     $689 = (($688) + 64|0);
     $690 = $p0;
     $691 = (($690) + -128|0);
     $692 = (($691) + 64|0);
     _strPre4($684,$686,$689,$692);
    }
   } while(0);
   $693 = $leftORright;
   $694 = ($693|0)!=(0);
   if ($694) {
    label = 150;
   } else {
    $695 = $0;
    $696 = (($695) + 34400|0);
    $697 = HEAP32[$696>>2]|0;
    $698 = ($697|0)!=(0);
    if ($698) {
     label = 150;
    }
   }
   if ((label|0) == 150) {
    label = 0;
    $699 = $topORbottom;
    $700 = ($699|0)!=(0);
    if (!($700)) {
     $701 = $0;
     $702 = (($701) + 34404|0);
     $703 = HEAP32[$702>>2]|0;
     $704 = ($703|0)!=(0);
     if (!($704)) {
      $705 = $left;
      $706 = ($705|0)!=(0);
      if ($706) {
       label = 154;
      } else {
       $707 = $0;
       $708 = (($707) + 34400|0);
       $709 = HEAP32[$708>>2]|0;
       $710 = ($709|0)!=(0);
       if ($710) {
        label = 154;
       }
      }
      if ((label|0) == 154) {
       label = 0;
       $j = 0;
       $711 = $p0;
       $712 = $j;
       $713 = (($711) + ($712<<2)|0);
       $714 = (($713) + 128|0);
       $715 = $p0;
       $716 = $j;
       $717 = (($715) + ($716<<2)|0);
       $718 = (($717) + 192|0);
       $719 = $p1;
       $720 = $j;
       $721 = (($719) + ($720<<2)|0);
       $722 = $p1;
       $723 = $j;
       $724 = (($722) + ($723<<2)|0);
       $725 = (($724) + 64|0);
       _strPre4($714,$718,$721,$725);
       $726 = $p0;
       $727 = $j;
       $728 = (($726) + ($727<<2)|0);
       $729 = (($728) + 384|0);
       $730 = $p0;
       $731 = $j;
       $732 = (($730) + ($731<<2)|0);
       $733 = (($732) + 448|0);
       $734 = $p1;
       $735 = $j;
       $736 = (($734) + ($735<<2)|0);
       $737 = (($736) + 256|0);
       $738 = $p1;
       $739 = $j;
       $740 = (($738) + ($739<<2)|0);
       $741 = (($740) + 320|0);
       _strPre4($729,$733,$737,$741);
      }
      $742 = $right;
      $743 = ($742|0)!=(0);
      if ($743) {
       label = 157;
      } else {
       $744 = $0;
       $745 = (($744) + 34400|0);
       $746 = HEAP32[$745>>2]|0;
       $747 = ($746|0)!=(0);
       if ($747) {
        label = 157;
       }
      }
      if ((label|0) == 157) {
       label = 0;
       $j = -128;
       $748 = $p0;
       $749 = $j;
       $750 = (($748) + ($749<<2)|0);
       $751 = (($750) + 128|0);
       $752 = $p0;
       $753 = $j;
       $754 = (($752) + ($753<<2)|0);
       $755 = (($754) + 192|0);
       $756 = $p1;
       $757 = $j;
       $758 = (($756) + ($757<<2)|0);
       $759 = $p1;
       $760 = $j;
       $761 = (($759) + ($760<<2)|0);
       $762 = (($761) + 64|0);
       _strPre4($751,$755,$758,$762);
       $763 = $p0;
       $764 = $j;
       $765 = (($763) + ($764<<2)|0);
       $766 = (($765) + 384|0);
       $767 = $p0;
       $768 = $j;
       $769 = (($767) + ($768<<2)|0);
       $770 = (($769) + 448|0);
       $771 = $p1;
       $772 = $j;
       $773 = (($771) + ($772<<2)|0);
       $774 = (($773) + 256|0);
       $775 = $p1;
       $776 = $j;
       $777 = (($775) + ($776<<2)|0);
       $778 = (($777) + 320|0);
       _strPre4($766,$770,$774,$778);
      }
     }
    }
   }
   $779 = $leftORright;
   $780 = ($779|0)!=(0);
   if (!($780)) {
    $781 = $0;
    $782 = (($781) + 34400|0);
    $783 = HEAP32[$782>>2]|0;
    $784 = ($783|0)!=(0);
    if (!($784)) {
     $785 = $topORbottom;
     $786 = ($785|0)!=(0);
     do {
      if ($786) {
       label = 163;
      } else {
       $787 = $0;
       $788 = (($787) + 34404|0);
       $789 = HEAP32[$788>>2]|0;
       $790 = ($789|0)!=(0);
       if ($790) {
        label = 163;
        break;
       }
       $836 = $p0;
       $837 = $p1;
       _strPre4x4Stage2Split($836,$837);
      }
     } while(0);
     if ((label|0) == 163) {
      label = 0;
      $791 = $top;
      $792 = ($791|0)!=(0);
      if ($792) {
       label = 165;
      } else {
       $793 = $0;
       $794 = (($793) + 34404|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)!=(0);
       if ($796) {
        label = 165;
       }
      }
      if ((label|0) == 165) {
       label = 0;
       $797 = $p1;
       $p = $797;
       $798 = $p;
       $799 = (($798) + -512|0);
       $800 = $p;
       $801 = (($800) + -256|0);
       $802 = $p;
       $803 = $p;
       $804 = (($803) + 256|0);
       _strPre4($799,$801,$802,$804);
       $805 = $p;
       $806 = (($805) + -448|0);
       $807 = $p;
       $808 = (($807) + -192|0);
       $809 = $p;
       $810 = (($809) + 64|0);
       $811 = $p;
       $812 = (($811) + 320|0);
       _strPre4($806,$808,$810,$812);
       $p = 0;
      }
      $813 = $bottom;
      $814 = ($813|0)!=(0);
      if ($814) {
       label = 168;
      } else {
       $815 = $0;
       $816 = (($815) + 34404|0);
       $817 = HEAP32[$816>>2]|0;
       $818 = ($817|0)!=(0);
       if ($818) {
        label = 168;
       }
      }
      if ((label|0) == 168) {
       label = 0;
       $819 = $p0;
       $820 = (($819) + 128|0);
       $p = $820;
       $821 = $p;
       $822 = (($821) + -512|0);
       $823 = $p;
       $824 = (($823) + -256|0);
       $825 = $p;
       $826 = $p;
       $827 = (($826) + 256|0);
       _strPre4($822,$824,$825,$827);
       $828 = $p;
       $829 = (($828) + -448|0);
       $830 = $p;
       $831 = (($830) + -192|0);
       $832 = $p;
       $833 = (($832) + 64|0);
       $834 = $p;
       $835 = (($834) + 320|0);
       _strPre4($829,$831,$833,$835);
       $p = 0;
      }
     }
    }
   }
  }
  $838 = $topORleft;
  $839 = ($838|0)!=(0);
  if (!($839)) {
   $840 = $0;
   $841 = (($840) + 34136|0);
   $842 = (($841) + 20|0);
   $843 = HEAP32[$842>>2]|0;
   $844 = ($843|0)!=(0);
   if ($844) {
    $845 = $p0;
    $846 = (($845) + -1024|0);
    $847 = $i;
    $848 = ($847|0)!=(0);
    $849 = $848&1;
    _strNormalizeEnc($846,$849);
   }
   $850 = $p0;
   $851 = (($850) + -1024|0);
   _strDCT4x4SecondStage($851);
  }
  $852 = $i;
  $853 = (($852) + 1)|0;
  $i = $853;
 }
 $i = 0;
 while(1) {
  $854 = $i;
  $855 = $cfColorFormat;
  $856 = (1)==($855|0);
  $857 = $856 ? 2 : 0;
  $858 = ($854|0)<($857|0);
  if (!($858)) {
   break;
  }
  $859 = $i;
  $860 = (1 + ($859))|0;
  $861 = $0;
  $862 = (($861) + 34692|0);
  $863 = (($862) + ($860<<2)|0);
  $864 = HEAP32[$863>>2]|0;
  $p01 = $864;
  $865 = $i;
  $866 = (1 + ($865))|0;
  $867 = $0;
  $868 = (($867) + 34756|0);
  $869 = (($868) + ($866<<2)|0);
  $870 = HEAP32[$869>>2]|0;
  $p12 = $870;
  $871 = $olOverlap;
  $872 = (0)!=($871|0);
  if ($872) {
   $873 = $top;
   $874 = ($873|0)!=(0);
   if ($874) {
    label = 184;
   } else {
    $875 = $0;
    $876 = (($875) + 34404|0);
    $877 = HEAP32[$876>>2]|0;
    $878 = ($877|0)!=(0);
    if ($878) {
     label = 184;
    }
   }
   do {
    if ((label|0) == 184) {
     label = 0;
     $879 = $left;
     $880 = ($879|0)!=(0);
     if (!($880)) {
      $881 = $0;
      $882 = (($881) + 34400|0);
      $883 = HEAP32[$882>>2]|0;
      $884 = ($883|0)!=(0);
      if (!($884)) {
       break;
      }
     }
     $885 = $p12;
     $886 = $p12;
     $887 = (($886) + 4|0);
     $888 = $p12;
     $889 = (($888) + 8|0);
     $890 = $p12;
     $891 = (($890) + 12|0);
     _strPre4($885,$887,$889,$891);
    }
   } while(0);
   $892 = $top;
   $893 = ($892|0)!=(0);
   if ($893) {
    label = 189;
   } else {
    $894 = $0;
    $895 = (($894) + 34404|0);
    $896 = HEAP32[$895>>2]|0;
    $897 = ($896|0)!=(0);
    if ($897) {
     label = 189;
    }
   }
   do {
    if ((label|0) == 189) {
     label = 0;
     $898 = $right;
     $899 = ($898|0)!=(0);
     if (!($899)) {
      $900 = $0;
      $901 = (($900) + 34400|0);
      $902 = HEAP32[$901>>2]|0;
      $903 = ($902|0)!=(0);
      if (!($903)) {
       break;
      }
     }
     $904 = $p12;
     $905 = (($904) + -108|0);
     $906 = $p12;
     $907 = (($906) + -112|0);
     $908 = $p12;
     $909 = (($908) + -100|0);
     $910 = $p12;
     $911 = (($910) + -104|0);
     _strPre4($905,$907,$909,$911);
    }
   } while(0);
   $912 = $bottom;
   $913 = ($912|0)!=(0);
   if ($913) {
    label = 194;
   } else {
    $914 = $0;
    $915 = (($914) + 34404|0);
    $916 = HEAP32[$915>>2]|0;
    $917 = ($916|0)!=(0);
    if ($917) {
     label = 194;
    }
   }
   do {
    if ((label|0) == 194) {
     label = 0;
     $918 = $left;
     $919 = ($918|0)!=(0);
     if (!($919)) {
      $920 = $0;
      $921 = (($920) + 34400|0);
      $922 = HEAP32[$921>>2]|0;
      $923 = ($922|0)!=(0);
      if (!($923)) {
       break;
      }
     }
     $924 = $p01;
     $925 = (($924) + 64|0);
     $926 = (($925) + 40|0);
     $927 = $p01;
     $928 = (($927) + 64|0);
     $929 = (($928) + 44|0);
     $930 = $p01;
     $931 = (($930) + 64|0);
     $932 = (($931) + 32|0);
     $933 = $p01;
     $934 = (($933) + 64|0);
     $935 = (($934) + 36|0);
     _strPre4($926,$929,$932,$935);
    }
   } while(0);
   $936 = $bottom;
   $937 = ($936|0)!=(0);
   if ($937) {
    label = 199;
   } else {
    $938 = $0;
    $939 = (($938) + 34404|0);
    $940 = HEAP32[$939>>2]|0;
    $941 = ($940|0)!=(0);
    if ($941) {
     label = 199;
    }
   }
   do {
    if ((label|0) == 199) {
     label = 0;
     $942 = $right;
     $943 = ($942|0)!=(0);
     if (!($943)) {
      $944 = $0;
      $945 = (($944) + 34400|0);
      $946 = HEAP32[$945>>2]|0;
      $947 = ($946|0)!=(0);
      if (!($947)) {
       break;
      }
     }
     $948 = $p01;
     $949 = (($948) + -4|0);
     $950 = $p01;
     $951 = (($950) + -8|0);
     $952 = $p01;
     $953 = (($952) + -12|0);
     $954 = $p01;
     $955 = (($954) + -16|0);
     _strPre4($949,$951,$953,$955);
    }
   } while(0);
   $956 = $right;
   $957 = ($956|0)!=(0);
   if (!($957)) {
    $958 = $bottom;
    $959 = ($958|0)!=(0);
    if (!($959)) {
     $960 = $top;
     $961 = ($960|0)!=(0);
     if ($961) {
      label = 206;
     } else {
      $962 = $0;
      $963 = (($962) + 34404|0);
      $964 = HEAP32[$963>>2]|0;
      $965 = ($964|0)!=(0);
      if ($965) {
       label = 206;
      } else {
       $997 = $left;
       $998 = ($997|0)!=(0);
       if ($998) {
        $1004 = 1;
       } else {
        $999 = $0;
        $1000 = (($999) + 34400|0);
        $1001 = HEAP32[$1000>>2]|0;
        $1002 = ($1001|0)!=(0);
        $1004 = $1002;
       }
       $1003 = $1004 ? 0 : -32;
       $j = $1003;
       while(1) {
        $1005 = $j;
        $1006 = ($1005|0)<(32);
        if (!($1006)) {
         break;
        }
        $1007 = $p01;
        $1008 = (($1007) + 64|0);
        $1009 = $j;
        $1010 = (($1008) + ($1009<<2)|0);
        $1011 = $p12;
        $1012 = $j;
        $1013 = (($1011) + ($1012<<2)|0);
        _strPre4x4Stage1Split($1010,$1013,32);
        $1014 = $j;
        $1015 = (($1014) + 32)|0;
        $j = $1015;
       }
      }
     }
     if ((label|0) == 206) {
      label = 0;
      $966 = $left;
      $967 = ($966|0)!=(0);
      if ($967) {
       $973 = 1;
      } else {
       $968 = $0;
       $969 = (($968) + 34400|0);
       $970 = HEAP32[$969>>2]|0;
       $971 = ($970|0)!=(0);
       $973 = $971;
      }
      $972 = $973 ? 0 : -32;
      $j = $972;
      while(1) {
       $974 = $j;
       $975 = ($974|0)<(32);
       if (!($975)) {
        break;
       }
       $976 = $p12;
       $977 = $j;
       $978 = (($976) + ($977<<2)|0);
       $p = $978;
       $979 = $p;
       $980 = (($979) + 20|0);
       $981 = $p;
       $982 = (($981) + 16|0);
       $983 = $p;
       $984 = (($983) + 128|0);
       $985 = $p;
       $986 = (($985) + 132|0);
       _strPre4($980,$982,$984,$986);
       $987 = $p;
       $988 = (($987) + 28|0);
       $989 = $p;
       $990 = (($989) + 24|0);
       $991 = $p;
       $992 = (($991) + 136|0);
       $993 = $p;
       $994 = (($993) + 140|0);
       _strPre4($988,$990,$992,$994);
       $p = 0;
       $995 = $j;
       $996 = (($995) + 32)|0;
       $j = $996;
      }
     }
     $1016 = $left;
     $1017 = ($1016|0)!=(0);
     if ($1017) {
      label = 222;
     } else {
      $1018 = $0;
      $1019 = (($1018) + 34400|0);
      $1020 = HEAP32[$1019>>2]|0;
      $1021 = ($1020|0)!=(0);
      if ($1021) {
       label = 222;
      } else {
       $1059 = $0;
       $1060 = (($1059) + 34400|0);
       $1061 = HEAP32[$1060>>2]|0;
       $1062 = ($1061|0)!=(0);
       if (!($1062)) {
        $1063 = $p12;
        $1064 = (($1063) + -128|0);
        _strPre4x4Stage1($1064,32);
       }
      }
     }
     if ((label|0) == 222) {
      label = 0;
      $1022 = $top;
      $1023 = ($1022|0)!=(0);
      do {
       if (!($1023)) {
        $1024 = $0;
        $1025 = (($1024) + 34404|0);
        $1026 = HEAP32[$1025>>2]|0;
        $1027 = ($1026|0)!=(0);
        if ($1027) {
         break;
        }
        $1028 = $p01;
        $1029 = (($1028) + 104|0);
        $1030 = $p01;
        $1031 = (($1030) + 96|0);
        $1032 = $p12;
        $1033 = $p12;
        $1034 = (($1033) + 8|0);
        _strPre4($1029,$1031,$1032,$1034);
        $1035 = $p01;
        $1036 = (($1035) + 108|0);
        $1037 = $p01;
        $1038 = (($1037) + 100|0);
        $1039 = $p12;
        $1040 = (($1039) + 4|0);
        $1041 = $p12;
        $1042 = (($1041) + 12|0);
        _strPre4($1036,$1038,$1040,$1042);
       }
      } while(0);
      $1043 = $p12;
      $1044 = (($1043) + 40|0);
      $1045 = $p12;
      $1046 = (($1045) + 32|0);
      $1047 = $p12;
      $1048 = (($1047) + 64|0);
      $1049 = $p12;
      $1050 = (($1049) + 72|0);
      _strPre4($1044,$1046,$1048,$1050);
      $1051 = $p12;
      $1052 = (($1051) + 44|0);
      $1053 = $p12;
      $1054 = (($1053) + 36|0);
      $1055 = $p12;
      $1056 = (($1055) + 68|0);
      $1057 = $p12;
      $1058 = (($1057) + 76|0);
      _strPre4($1052,$1054,$1056,$1058);
     }
     $1065 = $p12;
     _strPre4x4Stage1($1065,32);
    }
   }
   $1066 = $bottom;
   $1067 = ($1066|0)!=(0);
   if ($1067) {
    label = 232;
   } else {
    $1068 = $0;
    $1069 = (($1068) + 34404|0);
    $1070 = HEAP32[$1069>>2]|0;
    $1071 = ($1070|0)!=(0);
    if ($1071) {
     label = 232;
    }
   }
   if ((label|0) == 232) {
    label = 0;
    $1072 = $left;
    $1073 = ($1072|0)!=(0);
    if ($1073) {
     $1079 = 1;
    } else {
     $1074 = $0;
     $1075 = (($1074) + 34400|0);
     $1076 = HEAP32[$1075>>2]|0;
     $1077 = ($1076|0)!=(0);
     $1079 = $1077;
    }
    $1078 = $1079 ? 16 : -16;
    $j = $1078;
    while(1) {
     $1080 = $j;
     $1081 = $right;
     $1082 = ($1081|0)!=(0);
     $1083 = $1082 ? -16 : 32;
     $1084 = ($1080|0)<($1083|0);
     if (!($1084)) {
      break;
     }
     $1085 = $p01;
     $1086 = $j;
     $1087 = (($1085) + ($1086<<2)|0);
     $p = $1087;
     $1088 = $p;
     $1089 = (($1088) + 60|0);
     $1090 = $p;
     $1091 = (($1090) + 56|0);
     $1092 = $p;
     $1093 = (($1092) + 168|0);
     $1094 = $p;
     $1095 = (($1094) + 172|0);
     _strPre4($1089,$1091,$1093,$1095);
     $1096 = $p;
     $1097 = (($1096) + 52|0);
     $1098 = $p;
     $1099 = (($1098) + 48|0);
     $1100 = $p;
     $1101 = (($1100) + 160|0);
     $1102 = $p;
     $1103 = (($1102) + 164|0);
     _strPre4($1097,$1099,$1101,$1103);
     $p = 0;
     $1104 = $j;
     $1105 = (($1104) + 32)|0;
     $j = $1105;
    }
   }
   $1106 = $right;
   $1107 = ($1106|0)!=(0);
   if ($1107) {
    label = 241;
   } else {
    $1108 = $0;
    $1109 = (($1108) + 34400|0);
    $1110 = HEAP32[$1109>>2]|0;
    $1111 = ($1110|0)!=(0);
    if ($1111) {
     label = 241;
    }
   }
   if ((label|0) == 241) {
    label = 0;
    $1112 = $bottom;
    $1113 = ($1112|0)!=(0);
    if (!($1113)) {
     $1114 = $top;
     $1115 = ($1114|0)!=(0);
     do {
      if (!($1115)) {
       $1116 = $0;
       $1117 = (($1116) + 34404|0);
       $1118 = HEAP32[$1117>>2]|0;
       $1119 = ($1118|0)!=(0);
       if ($1119) {
        break;
       }
       $1120 = $p01;
       $1121 = (($1120) + -4|0);
       $1122 = $p01;
       $1123 = (($1122) + -12|0);
       $1124 = $p12;
       $1125 = (($1124) + -108|0);
       $1126 = $p12;
       $1127 = (($1126) + -100|0);
       _strPre4($1121,$1123,$1125,$1127);
       $1128 = $p01;
       $1129 = (($1128) + -8|0);
       $1130 = $p01;
       $1131 = (($1130) + -16|0);
       $1132 = $p12;
       $1133 = (($1132) + -112|0);
       $1134 = $p12;
       $1135 = (($1134) + -104|0);
       _strPre4($1129,$1131,$1133,$1135);
      }
     } while(0);
     $1136 = $p12;
     $1137 = (($1136) + -68|0);
     $1138 = $p12;
     $1139 = (($1138) + -76|0);
     $1140 = $p12;
     $1141 = (($1140) + -44|0);
     $1142 = $p12;
     $1143 = (($1142) + -36|0);
     _strPre4($1137,$1139,$1141,$1143);
     $1144 = $p12;
     $1145 = (($1144) + -72|0);
     $1146 = $p12;
     $1147 = (($1146) + -80|0);
     $1148 = $p12;
     $1149 = (($1148) + -48|0);
     $1150 = $p12;
     $1151 = (($1150) + -40|0);
     _strPre4($1145,$1147,$1149,$1151);
    }
   }
  }
  $1152 = $top;
  $1153 = ($1152|0)!=(0);
  if (!($1153)) {
   $1154 = $left;
   $1155 = ($1154|0)!=(0);
   $1156 = $1155 ? 16 : -16;
   $j = $1156;
   while(1) {
    $1157 = $j;
    $1158 = $right;
    $1159 = ($1158|0)!=(0);
    $1160 = $1159 ? 16 : 48;
    $1161 = ($1157|0)<($1160|0);
    if (!($1161)) {
     break;
    }
    $1162 = $p01;
    $1163 = $j;
    $1164 = (($1162) + ($1163<<2)|0);
    _strDCT4x4Stage1($1164);
    $1165 = $j;
    $1166 = (($1165) + 32)|0;
    $j = $1166;
   }
  }
  $1167 = $bottom;
  $1168 = ($1167|0)!=(0);
  if (!($1168)) {
   $1169 = $left;
   $1170 = ($1169|0)!=(0);
   $1171 = $1170 ? 0 : -32;
   $j = $1171;
   while(1) {
    $1172 = $j;
    $1173 = $right;
    $1174 = ($1173|0)!=(0);
    $1175 = $1174 ? 0 : 32;
    $1176 = ($1172|0)<($1175|0);
    if (!($1176)) {
     break;
    }
    $1177 = $p12;
    $1178 = $j;
    $1179 = (($1177) + ($1178<<2)|0);
    _strDCT4x4Stage1($1179);
    $1180 = $j;
    $1181 = (($1180) + 32)|0;
    $j = $1181;
   }
  }
  $1182 = $olOverlap;
  $1183 = (2)==($1182|0);
  if ($1183) {
   $1184 = $leftAdjacentColumn;
   $1185 = ($1184|0)!=(0);
   if ($1185) {
    label = 262;
   } else {
    $1186 = $0;
    $1187 = (($1186) + 34412|0);
    $1188 = HEAP32[$1187>>2]|0;
    $1189 = ($1188|0)!=(0);
    if ($1189) {
     label = 262;
    }
   }
   do {
    if ((label|0) == 262) {
     label = 0;
     $1190 = $top;
     $1191 = ($1190|0)!=(0);
     if (!($1191)) {
      $1192 = $0;
      $1193 = (($1192) + 34404|0);
      $1194 = HEAP32[$1193>>2]|0;
      $1195 = ($1194|0)!=(0);
      if (!($1195)) {
       break;
      }
     }
     $1196 = $p12;
     $1197 = (($1196) + -256|0);
     $1198 = (($1197) + 128|0);
     $1199 = HEAP32[$1198>>2]|0;
     $1200 = $p12;
     $1201 = (($1200) + -256|0);
     $1202 = HEAP32[$1201>>2]|0;
     $1203 = (($1202) - ($1199))|0;
     HEAP32[$1201>>2] = $1203;
    }
   } while(0);
   $1204 = $rightAdjacentColumn;
   $1205 = ($1204|0)!=(0);
   if ($1205) {
    label = 267;
   } else {
    $1206 = $0;
    $1207 = (($1206) + 34408|0);
    $1208 = HEAP32[$1207>>2]|0;
    $1209 = ($1208|0)!=(0);
    if ($1209) {
     label = 267;
    }
   }
   do {
    if ((label|0) == 267) {
     label = 0;
     $1210 = $top;
     $1211 = ($1210|0)!=(0);
     if (!($1211)) {
      $1212 = $0;
      $1213 = (($1212) + 34404|0);
      $1214 = HEAP32[$1213>>2]|0;
      $1215 = ($1214|0)!=(0);
      if (!($1215)) {
       break;
      }
     }
     $1216 = $p12;
     $1217 = HEAP32[$1216>>2]|0;
     $1218 = $i;
     $1219 = $0;
     $1220 = (($1219) + 34416|0);
     $1221 = (($1220) + ($1218<<3)|0);
     HEAP32[$1221>>2] = $1217;
    }
   } while(0);
   $1222 = $right;
   $1223 = ($1222|0)!=(0);
   if ($1223) {
    label = 272;
   } else {
    $1224 = $0;
    $1225 = (($1224) + 34400|0);
    $1226 = HEAP32[$1225>>2]|0;
    $1227 = ($1226|0)!=(0);
    if ($1227) {
     label = 272;
    }
   }
   do {
    if ((label|0) == 272) {
     label = 0;
     $1228 = $top;
     $1229 = ($1228|0)!=(0);
     if (!($1229)) {
      $1230 = $0;
      $1231 = (($1230) + 34404|0);
      $1232 = HEAP32[$1231>>2]|0;
      $1233 = ($1232|0)!=(0);
      if (!($1233)) {
       break;
      }
     }
     $1234 = $i;
     $1235 = $0;
     $1236 = (($1235) + 34416|0);
     $1237 = (($1236) + ($1234<<3)|0);
     $1238 = HEAP32[$1237>>2]|0;
     $1239 = $p12;
     $1240 = (($1239) + -256|0);
     $1241 = (($1240) + 128|0);
     $1242 = HEAP32[$1241>>2]|0;
     $1243 = (($1242) - ($1238))|0;
     HEAP32[$1241>>2] = $1243;
    }
   } while(0);
   $1244 = $leftAdjacentColumn;
   $1245 = ($1244|0)!=(0);
   if ($1245) {
    label = 277;
   } else {
    $1246 = $0;
    $1247 = (($1246) + 34412|0);
    $1248 = HEAP32[$1247>>2]|0;
    $1249 = ($1248|0)!=(0);
    if ($1249) {
     label = 277;
    }
   }
   do {
    if ((label|0) == 277) {
     label = 0;
     $1250 = $bottom;
     $1251 = ($1250|0)!=(0);
     if (!($1251)) {
      $1252 = $0;
      $1253 = (($1252) + 34404|0);
      $1254 = HEAP32[$1253>>2]|0;
      $1255 = ($1254|0)!=(0);
      if (!($1255)) {
       break;
      }
     }
     $1256 = $p01;
     $1257 = (($1256) + -256|0);
     $1258 = (($1257) + 192|0);
     $1259 = HEAP32[$1258>>2]|0;
     $1260 = $p01;
     $1261 = (($1260) + -256|0);
     $1262 = (($1261) + 64|0);
     $1263 = HEAP32[$1262>>2]|0;
     $1264 = (($1263) - ($1259))|0;
     HEAP32[$1262>>2] = $1264;
    }
   } while(0);
   $1265 = $rightAdjacentColumn;
   $1266 = ($1265|0)!=(0);
   if ($1266) {
    label = 282;
   } else {
    $1267 = $0;
    $1268 = (($1267) + 34408|0);
    $1269 = HEAP32[$1268>>2]|0;
    $1270 = ($1269|0)!=(0);
    if ($1270) {
     label = 282;
    }
   }
   do {
    if ((label|0) == 282) {
     label = 0;
     $1271 = $bottom;
     $1272 = ($1271|0)!=(0);
     if (!($1272)) {
      $1273 = $0;
      $1274 = (($1273) + 34404|0);
      $1275 = HEAP32[$1274>>2]|0;
      $1276 = ($1275|0)!=(0);
      if (!($1276)) {
       break;
      }
     }
     $1277 = $p01;
     $1278 = (($1277) + 64|0);
     $1279 = HEAP32[$1278>>2]|0;
     $1280 = $i;
     $1281 = $0;
     $1282 = (($1281) + 34416|0);
     $1283 = (($1282) + ($1280<<3)|0);
     $1284 = (($1283) + 4|0);
     HEAP32[$1284>>2] = $1279;
    }
   } while(0);
   $1285 = $right;
   $1286 = ($1285|0)!=(0);
   if ($1286) {
    label = 287;
   } else {
    $1287 = $0;
    $1288 = (($1287) + 34400|0);
    $1289 = HEAP32[$1288>>2]|0;
    $1290 = ($1289|0)!=(0);
    if ($1290) {
     label = 287;
    }
   }
   do {
    if ((label|0) == 287) {
     label = 0;
     $1291 = $bottom;
     $1292 = ($1291|0)!=(0);
     if (!($1292)) {
      $1293 = $0;
      $1294 = (($1293) + 34404|0);
      $1295 = HEAP32[$1294>>2]|0;
      $1296 = ($1295|0)!=(0);
      if (!($1296)) {
       break;
      }
     }
     $1297 = $i;
     $1298 = $0;
     $1299 = (($1298) + 34416|0);
     $1300 = (($1299) + ($1297<<3)|0);
     $1301 = (($1300) + 4|0);
     $1302 = HEAP32[$1301>>2]|0;
     $1303 = $p01;
     $1304 = (($1303) + -256|0);
     $1305 = (($1304) + 192|0);
     $1306 = HEAP32[$1305>>2]|0;
     $1307 = (($1306) - ($1302))|0;
     HEAP32[$1305>>2] = $1307;
    }
   } while(0);
   $1308 = $leftORright;
   $1309 = ($1308|0)!=(0);
   if ($1309) {
    label = 292;
   } else {
    $1310 = $0;
    $1311 = (($1310) + 34400|0);
    $1312 = HEAP32[$1311>>2]|0;
    $1313 = ($1312|0)!=(0);
    if ($1313) {
     label = 292;
    }
   }
   do {
    if ((label|0) == 292) {
     label = 0;
     $1314 = $topORbottom;
     $1315 = ($1314|0)!=(0);
     if ($1315) {
      break;
     }
     $1316 = $0;
     $1317 = (($1316) + 34404|0);
     $1318 = HEAP32[$1317>>2]|0;
     $1319 = ($1318|0)!=(0);
     if ($1319) {
      break;
     }
     $1320 = $left;
     $1321 = ($1320|0)!=(0);
     if ($1321) {
      label = 296;
     } else {
      $1322 = $0;
      $1323 = (($1322) + 34400|0);
      $1324 = HEAP32[$1323>>2]|0;
      $1325 = ($1324|0)!=(0);
      if ($1325) {
       label = 296;
      }
     }
     if ((label|0) == 296) {
      label = 0;
      $1326 = $p01;
      $1327 = (($1326) + 64|0);
      $1328 = $p12;
      _strPre2($1327,$1328);
     }
     $1329 = $right;
     $1330 = ($1329|0)!=(0);
     if ($1330) {
      label = 299;
     } else {
      $1331 = $0;
      $1332 = (($1331) + 34400|0);
      $1333 = HEAP32[$1332>>2]|0;
      $1334 = ($1333|0)!=(0);
      if ($1334) {
       label = 299;
      }
     }
     if ((label|0) == 299) {
      label = 0;
      $1335 = $p01;
      $1336 = (($1335) + -128|0);
      $1337 = (($1336) + 64|0);
      $1338 = $p12;
      $1339 = (($1338) + -128|0);
      _strPre2($1337,$1339);
     }
    }
   } while(0);
   $1340 = $leftORright;
   $1341 = ($1340|0)!=(0);
   if (!($1341)) {
    $1342 = $topORbottom;
    $1343 = ($1342|0)!=(0);
    if ($1343) {
     label = 304;
    } else {
     $1344 = $0;
     $1345 = (($1344) + 34404|0);
     $1346 = HEAP32[$1345>>2]|0;
     $1347 = ($1346|0)!=(0);
     if ($1347) {
      label = 304;
     } else {
      label = 312;
     }
    }
    do {
     if ((label|0) == 304) {
      label = 0;
      $1348 = $0;
      $1349 = (($1348) + 34400|0);
      $1350 = HEAP32[$1349>>2]|0;
      $1351 = ($1350|0)!=(0);
      if ($1351) {
       label = 312;
       break;
      }
      $1352 = $top;
      $1353 = ($1352|0)!=(0);
      if ($1353) {
       label = 307;
      } else {
       $1354 = $0;
       $1355 = (($1354) + 34404|0);
       $1356 = HEAP32[$1355>>2]|0;
       $1357 = ($1356|0)!=(0);
       if ($1357) {
        label = 307;
       }
      }
      if ((label|0) == 307) {
       label = 0;
       $1358 = $p12;
       $1359 = (($1358) + -128|0);
       $1360 = $p12;
       _strPre2($1359,$1360);
      }
      $1361 = $bottom;
      $1362 = ($1361|0)!=(0);
      if ($1362) {
       label = 310;
      } else {
       $1363 = $0;
       $1364 = (($1363) + 34404|0);
       $1365 = HEAP32[$1364>>2]|0;
       $1366 = ($1365|0)!=(0);
       if ($1366) {
        label = 310;
       }
      }
      if ((label|0) == 310) {
       label = 0;
       $1367 = $p01;
       $1368 = (($1367) + 64|0);
       $1369 = (($1368) + -128|0);
       $1370 = $p01;
       $1371 = (($1370) + 64|0);
       _strPre2($1369,$1371);
      }
     }
    } while(0);
    if ((label|0) == 312) {
     label = 0;
     $1372 = $topORbottom;
     $1373 = ($1372|0)!=(0);
     do {
      if (!($1373)) {
       $1374 = $0;
       $1375 = (($1374) + 34404|0);
       $1376 = HEAP32[$1375>>2]|0;
       $1377 = ($1376|0)!=(0);
       if ($1377) {
        break;
       }
       $1378 = $0;
       $1379 = (($1378) + 34400|0);
       $1380 = HEAP32[$1379>>2]|0;
       $1381 = ($1380|0)!=(0);
       if ($1381) {
        break;
       }
       $1382 = $p01;
       $1383 = (($1382) + -64|0);
       $1384 = $p01;
       $1385 = (($1384) + 64|0);
       $1386 = $p12;
       $1387 = (($1386) + -128|0);
       $1388 = $p12;
       _strPre2x2($1383,$1385,$1387,$1388);
      }
     } while(0);
    }
   }
   $1389 = $leftAdjacentColumn;
   $1390 = ($1389|0)!=(0);
   if ($1390) {
    label = 320;
   } else {
    $1391 = $0;
    $1392 = (($1391) + 34412|0);
    $1393 = HEAP32[$1392>>2]|0;
    $1394 = ($1393|0)!=(0);
    if ($1394) {
     label = 320;
    }
   }
   do {
    if ((label|0) == 320) {
     label = 0;
     $1395 = $top;
     $1396 = ($1395|0)!=(0);
     if (!($1396)) {
      $1397 = $0;
      $1398 = (($1397) + 34404|0);
      $1399 = HEAP32[$1398>>2]|0;
      $1400 = ($1399|0)!=(0);
      if (!($1400)) {
       break;
      }
     }
     $1401 = $p12;
     $1402 = (($1401) + -256|0);
     $1403 = (($1402) + 128|0);
     $1404 = HEAP32[$1403>>2]|0;
     $1405 = $p12;
     $1406 = (($1405) + -256|0);
     $1407 = HEAP32[$1406>>2]|0;
     $1408 = (($1407) + ($1404))|0;
     HEAP32[$1406>>2] = $1408;
    }
   } while(0);
   $1409 = $rightAdjacentColumn;
   $1410 = ($1409|0)!=(0);
   if ($1410) {
    label = 325;
   } else {
    $1411 = $0;
    $1412 = (($1411) + 34408|0);
    $1413 = HEAP32[$1412>>2]|0;
    $1414 = ($1413|0)!=(0);
    if ($1414) {
     label = 325;
    }
   }
   do {
    if ((label|0) == 325) {
     label = 0;
     $1415 = $top;
     $1416 = ($1415|0)!=(0);
     if (!($1416)) {
      $1417 = $0;
      $1418 = (($1417) + 34404|0);
      $1419 = HEAP32[$1418>>2]|0;
      $1420 = ($1419|0)!=(0);
      if (!($1420)) {
       break;
      }
     }
     $1421 = $p12;
     $1422 = HEAP32[$1421>>2]|0;
     $1423 = $i;
     $1424 = $0;
     $1425 = (($1424) + 34432|0);
     $1426 = (($1425) + ($1423<<3)|0);
     HEAP32[$1426>>2] = $1422;
    }
   } while(0);
   $1427 = $right;
   $1428 = ($1427|0)!=(0);
   if ($1428) {
    label = 330;
   } else {
    $1429 = $0;
    $1430 = (($1429) + 34400|0);
    $1431 = HEAP32[$1430>>2]|0;
    $1432 = ($1431|0)!=(0);
    if ($1432) {
     label = 330;
    }
   }
   do {
    if ((label|0) == 330) {
     label = 0;
     $1433 = $top;
     $1434 = ($1433|0)!=(0);
     if (!($1434)) {
      $1435 = $0;
      $1436 = (($1435) + 34404|0);
      $1437 = HEAP32[$1436>>2]|0;
      $1438 = ($1437|0)!=(0);
      if (!($1438)) {
       break;
      }
     }
     $1439 = $i;
     $1440 = $0;
     $1441 = (($1440) + 34432|0);
     $1442 = (($1441) + ($1439<<3)|0);
     $1443 = HEAP32[$1442>>2]|0;
     $1444 = $p12;
     $1445 = (($1444) + -256|0);
     $1446 = (($1445) + 128|0);
     $1447 = HEAP32[$1446>>2]|0;
     $1448 = (($1447) + ($1443))|0;
     HEAP32[$1446>>2] = $1448;
    }
   } while(0);
   $1449 = $leftAdjacentColumn;
   $1450 = ($1449|0)!=(0);
   if ($1450) {
    label = 335;
   } else {
    $1451 = $0;
    $1452 = (($1451) + 34412|0);
    $1453 = HEAP32[$1452>>2]|0;
    $1454 = ($1453|0)!=(0);
    if ($1454) {
     label = 335;
    }
   }
   do {
    if ((label|0) == 335) {
     label = 0;
     $1455 = $bottom;
     $1456 = ($1455|0)!=(0);
     if (!($1456)) {
      $1457 = $0;
      $1458 = (($1457) + 34404|0);
      $1459 = HEAP32[$1458>>2]|0;
      $1460 = ($1459|0)!=(0);
      if (!($1460)) {
       break;
      }
     }
     $1461 = $p01;
     $1462 = (($1461) + -256|0);
     $1463 = (($1462) + 192|0);
     $1464 = HEAP32[$1463>>2]|0;
     $1465 = $p01;
     $1466 = (($1465) + -256|0);
     $1467 = (($1466) + 64|0);
     $1468 = HEAP32[$1467>>2]|0;
     $1469 = (($1468) + ($1464))|0;
     HEAP32[$1467>>2] = $1469;
    }
   } while(0);
   $1470 = $rightAdjacentColumn;
   $1471 = ($1470|0)!=(0);
   if ($1471) {
    label = 340;
   } else {
    $1472 = $0;
    $1473 = (($1472) + 34408|0);
    $1474 = HEAP32[$1473>>2]|0;
    $1475 = ($1474|0)!=(0);
    if ($1475) {
     label = 340;
    }
   }
   do {
    if ((label|0) == 340) {
     label = 0;
     $1476 = $bottom;
     $1477 = ($1476|0)!=(0);
     if (!($1477)) {
      $1478 = $0;
      $1479 = (($1478) + 34404|0);
      $1480 = HEAP32[$1479>>2]|0;
      $1481 = ($1480|0)!=(0);
      if (!($1481)) {
       break;
      }
     }
     $1482 = $p01;
     $1483 = (($1482) + 64|0);
     $1484 = HEAP32[$1483>>2]|0;
     $1485 = $i;
     $1486 = $0;
     $1487 = (($1486) + 34432|0);
     $1488 = (($1487) + ($1485<<3)|0);
     $1489 = (($1488) + 4|0);
     HEAP32[$1489>>2] = $1484;
    }
   } while(0);
   $1490 = $right;
   $1491 = ($1490|0)!=(0);
   if ($1491) {
    label = 345;
   } else {
    $1492 = $0;
    $1493 = (($1492) + 34400|0);
    $1494 = HEAP32[$1493>>2]|0;
    $1495 = ($1494|0)!=(0);
    if ($1495) {
     label = 345;
    }
   }
   do {
    if ((label|0) == 345) {
     label = 0;
     $1496 = $bottom;
     $1497 = ($1496|0)!=(0);
     if (!($1497)) {
      $1498 = $0;
      $1499 = (($1498) + 34404|0);
      $1500 = HEAP32[$1499>>2]|0;
      $1501 = ($1500|0)!=(0);
      if (!($1501)) {
       break;
      }
     }
     $1502 = $i;
     $1503 = $0;
     $1504 = (($1503) + 34432|0);
     $1505 = (($1504) + ($1502<<3)|0);
     $1506 = (($1505) + 4|0);
     $1507 = HEAP32[$1506>>2]|0;
     $1508 = $p01;
     $1509 = (($1508) + -256|0);
     $1510 = (($1509) + 192|0);
     $1511 = HEAP32[$1510>>2]|0;
     $1512 = (($1511) + ($1507))|0;
     HEAP32[$1510>>2] = $1512;
    }
   } while(0);
  }
  $1513 = $topORleft;
  $1514 = ($1513|0)!=(0);
  if (!($1514)) {
   $1515 = $0;
   $1516 = (($1515) + 34136|0);
   $1517 = (($1516) + 20|0);
   $1518 = HEAP32[$1517>>2]|0;
   $1519 = ($1518|0)!=(0);
   if ($1519) {
    $1528 = $p01;
    $1529 = (($1528) + -256|0);
    $1530 = $p01;
    $1531 = (($1530) + -128|0);
    $1532 = $p01;
    $1533 = (($1532) + -192|0);
    $1534 = $p01;
    $1535 = (($1534) + -64|0);
    _strDCT2x2dnEnc($1529,$1531,$1533,$1535);
   } else {
    $1520 = $p01;
    $1521 = (($1520) + -256|0);
    $1522 = $p01;
    $1523 = (($1522) + -128|0);
    $1524 = $p01;
    $1525 = (($1524) + -192|0);
    $1526 = $p01;
    $1527 = (($1526) + -64|0);
    _strDCT2x2dn($1521,$1523,$1525,$1527);
   }
  }
  $1536 = $i;
  $1537 = (($1536) + 1)|0;
  $i = $1537;
 }
 $i = 0;
 while(1) {
  $1538 = $i;
  $1539 = $cfColorFormat;
  $1540 = (2)==($1539|0);
  $1541 = $1540 ? 2 : 0;
  $1542 = ($1538|0)<($1541|0);
  if (!($1542)) {
   break;
  }
  $1543 = $i;
  $1544 = (1 + ($1543))|0;
  $1545 = $0;
  $1546 = (($1545) + 34692|0);
  $1547 = (($1546) + ($1544<<2)|0);
  $1548 = HEAP32[$1547>>2]|0;
  $p03 = $1548;
  $1549 = $i;
  $1550 = (1 + ($1549))|0;
  $1551 = $0;
  $1552 = (($1551) + 34756|0);
  $1553 = (($1552) + ($1550<<2)|0);
  $1554 = HEAP32[$1553>>2]|0;
  $p14 = $1554;
  $1555 = $olOverlap;
  $1556 = (0)!=($1555|0);
  if ($1556) {
   $1557 = $top;
   $1558 = ($1557|0)!=(0);
   if ($1558) {
    label = 361;
   } else {
    $1559 = $0;
    $1560 = (($1559) + 34404|0);
    $1561 = HEAP32[$1560>>2]|0;
    $1562 = ($1561|0)!=(0);
    if ($1562) {
     label = 361;
    }
   }
   do {
    if ((label|0) == 361) {
     label = 0;
     $1563 = $left;
     $1564 = ($1563|0)!=(0);
     if (!($1564)) {
      $1565 = $0;
      $1566 = (($1565) + 34400|0);
      $1567 = HEAP32[$1566>>2]|0;
      $1568 = ($1567|0)!=(0);
      if (!($1568)) {
       break;
      }
     }
     $1569 = $p14;
     $1570 = $p14;
     $1571 = (($1570) + 4|0);
     $1572 = $p14;
     $1573 = (($1572) + 8|0);
     $1574 = $p14;
     $1575 = (($1574) + 12|0);
     _strPre4($1569,$1571,$1573,$1575);
    }
   } while(0);
   $1576 = $top;
   $1577 = ($1576|0)!=(0);
   if ($1577) {
    label = 366;
   } else {
    $1578 = $0;
    $1579 = (($1578) + 34404|0);
    $1580 = HEAP32[$1579>>2]|0;
    $1581 = ($1580|0)!=(0);
    if ($1581) {
     label = 366;
    }
   }
   do {
    if ((label|0) == 366) {
     label = 0;
     $1582 = $right;
     $1583 = ($1582|0)!=(0);
     if (!($1583)) {
      $1584 = $0;
      $1585 = (($1584) + 34400|0);
      $1586 = HEAP32[$1585>>2]|0;
      $1587 = ($1586|0)!=(0);
      if (!($1587)) {
       break;
      }
     }
     $1588 = $p14;
     $1589 = (($1588) + -236|0);
     $1590 = $p14;
     $1591 = (($1590) + -240|0);
     $1592 = $p14;
     $1593 = (($1592) + -228|0);
     $1594 = $p14;
     $1595 = (($1594) + -232|0);
     _strPre4($1589,$1591,$1593,$1595);
    }
   } while(0);
   $1596 = $bottom;
   $1597 = ($1596|0)!=(0);
   if ($1597) {
    label = 371;
   } else {
    $1598 = $0;
    $1599 = (($1598) + 34404|0);
    $1600 = HEAP32[$1599>>2]|0;
    $1601 = ($1600|0)!=(0);
    if ($1601) {
     label = 371;
    }
   }
   do {
    if ((label|0) == 371) {
     label = 0;
     $1602 = $left;
     $1603 = ($1602|0)!=(0);
     if (!($1603)) {
      $1604 = $0;
      $1605 = (($1604) + 34400|0);
      $1606 = HEAP32[$1605>>2]|0;
      $1607 = ($1606|0)!=(0);
      if (!($1607)) {
       break;
      }
     }
     $1608 = $p03;
     $1609 = (($1608) + 192|0);
     $1610 = (($1609) + 40|0);
     $1611 = $p03;
     $1612 = (($1611) + 192|0);
     $1613 = (($1612) + 44|0);
     $1614 = $p03;
     $1615 = (($1614) + 192|0);
     $1616 = (($1615) + 32|0);
     $1617 = $p03;
     $1618 = (($1617) + 192|0);
     $1619 = (($1618) + 36|0);
     _strPre4($1610,$1613,$1616,$1619);
    }
   } while(0);
   $1620 = $bottom;
   $1621 = ($1620|0)!=(0);
   if ($1621) {
    label = 376;
   } else {
    $1622 = $0;
    $1623 = (($1622) + 34404|0);
    $1624 = HEAP32[$1623>>2]|0;
    $1625 = ($1624|0)!=(0);
    if ($1625) {
     label = 376;
    }
   }
   do {
    if ((label|0) == 376) {
     label = 0;
     $1626 = $right;
     $1627 = ($1626|0)!=(0);
     if (!($1627)) {
      $1628 = $0;
      $1629 = (($1628) + 34400|0);
      $1630 = HEAP32[$1629>>2]|0;
      $1631 = ($1630|0)!=(0);
      if (!($1631)) {
       break;
      }
     }
     $1632 = $p03;
     $1633 = (($1632) + -4|0);
     $1634 = $p03;
     $1635 = (($1634) + -8|0);
     $1636 = $p03;
     $1637 = (($1636) + -12|0);
     $1638 = $p03;
     $1639 = (($1638) + -16|0);
     _strPre4($1633,$1635,$1637,$1639);
    }
   } while(0);
   $1640 = $right;
   $1641 = ($1640|0)!=(0);
   if (!($1641)) {
    $1642 = $bottom;
    $1643 = ($1642|0)!=(0);
    if (!($1643)) {
     $1644 = $top;
     $1645 = ($1644|0)!=(0);
     if ($1645) {
      label = 383;
     } else {
      $1646 = $0;
      $1647 = (($1646) + 34404|0);
      $1648 = HEAP32[$1647>>2]|0;
      $1649 = ($1648|0)!=(0);
      if ($1649) {
       label = 383;
      } else {
       $1681 = $left;
       $1682 = ($1681|0)!=(0);
       if ($1682) {
        $1688 = 1;
       } else {
        $1683 = $0;
        $1684 = (($1683) + 34400|0);
        $1685 = HEAP32[$1684>>2]|0;
        $1686 = ($1685|0)!=(0);
        $1688 = $1686;
       }
       $1687 = $1688 ? 0 : -64;
       $j = $1687;
       while(1) {
        $1689 = $j;
        $1690 = ($1689|0)<(64);
        if (!($1690)) {
         break;
        }
        $1691 = $p03;
        $1692 = (($1691) + 192|0);
        $1693 = $j;
        $1694 = (($1692) + ($1693<<2)|0);
        $1695 = $p14;
        $1696 = $j;
        $1697 = (($1695) + ($1696<<2)|0);
        _strPre4x4Stage1Split($1694,$1697,0);
        $1698 = $j;
        $1699 = (($1698) + 64)|0;
        $j = $1699;
       }
      }
     }
     if ((label|0) == 383) {
      label = 0;
      $1650 = $left;
      $1651 = ($1650|0)!=(0);
      if ($1651) {
       $1657 = 1;
      } else {
       $1652 = $0;
       $1653 = (($1652) + 34400|0);
       $1654 = HEAP32[$1653>>2]|0;
       $1655 = ($1654|0)!=(0);
       $1657 = $1655;
      }
      $1656 = $1657 ? 0 : -64;
      $j = $1656;
      while(1) {
       $1658 = $j;
       $1659 = ($1658|0)<(64);
       if (!($1659)) {
        break;
       }
       $1660 = $p14;
       $1661 = $j;
       $1662 = (($1660) + ($1661<<2)|0);
       $p = $1662;
       $1663 = $p;
       $1664 = (($1663) + 20|0);
       $1665 = $p;
       $1666 = (($1665) + 16|0);
       $1667 = $p;
       $1668 = (($1667) + 256|0);
       $1669 = $p;
       $1670 = (($1669) + 260|0);
       _strPre4($1664,$1666,$1668,$1670);
       $1671 = $p;
       $1672 = (($1671) + 28|0);
       $1673 = $p;
       $1674 = (($1673) + 24|0);
       $1675 = $p;
       $1676 = (($1675) + 264|0);
       $1677 = $p;
       $1678 = (($1677) + 268|0);
       _strPre4($1672,$1674,$1676,$1678);
       $p = 0;
       $1679 = $j;
       $1680 = (($1679) + 64)|0;
       $j = $1680;
      }
     }
     $1700 = $left;
     $1701 = ($1700|0)!=(0);
     if ($1701) {
      label = 399;
     } else {
      $1702 = $0;
      $1703 = (($1702) + 34400|0);
      $1704 = HEAP32[$1703>>2]|0;
      $1705 = ($1704|0)!=(0);
      if ($1705) {
       label = 399;
      } else {
       $1750 = $0;
       $1751 = (($1750) + 34400|0);
       $1752 = HEAP32[$1751>>2]|0;
       $1753 = ($1752|0)!=(0);
       if (!($1753)) {
        $j = -64;
        while(1) {
         $1754 = $j;
         $1755 = ($1754|0)<(-16);
         if (!($1755)) {
          break;
         }
         $1756 = $p14;
         $1757 = $j;
         $1758 = (($1756) + ($1757<<2)|0);
         _strPre4x4Stage1($1758,0);
         $1759 = $j;
         $1760 = (($1759) + 16)|0;
         $j = $1760;
        }
       }
      }
     }
     if ((label|0) == 399) {
      label = 0;
      $1706 = $top;
      $1707 = ($1706|0)!=(0);
      do {
       if (!($1707)) {
        $1708 = $0;
        $1709 = (($1708) + 34404|0);
        $1710 = HEAP32[$1709>>2]|0;
        $1711 = ($1710|0)!=(0);
        if ($1711) {
         break;
        }
        $1712 = $p03;
        $1713 = (($1712) + 232|0);
        $1714 = $p03;
        $1715 = (($1714) + 224|0);
        $1716 = $p14;
        $1717 = $p14;
        $1718 = (($1717) + 8|0);
        _strPre4($1713,$1715,$1716,$1718);
        $1719 = $p03;
        $1720 = (($1719) + 236|0);
        $1721 = $p03;
        $1722 = (($1721) + 228|0);
        $1723 = $p14;
        $1724 = (($1723) + 4|0);
        $1725 = $p14;
        $1726 = (($1725) + 12|0);
        _strPre4($1720,$1722,$1724,$1726);
       }
      } while(0);
      $j = 0;
      while(1) {
       $1727 = $j;
       $1728 = ($1727|0)<(48);
       if (!($1728)) {
        break;
       }
       $1729 = $p14;
       $1730 = $j;
       $1731 = (($1729) + ($1730<<2)|0);
       $p = $1731;
       $1732 = $p;
       $1733 = (($1732) + 40|0);
       $1734 = $p;
       $1735 = (($1734) + 32|0);
       $1736 = $p;
       $1737 = (($1736) + 64|0);
       $1738 = $p;
       $1739 = (($1738) + 72|0);
       _strPre4($1733,$1735,$1737,$1739);
       $1740 = $p;
       $1741 = (($1740) + 44|0);
       $1742 = $p;
       $1743 = (($1742) + 36|0);
       $1744 = $p;
       $1745 = (($1744) + 68|0);
       $1746 = $p;
       $1747 = (($1746) + 76|0);
       _strPre4($1741,$1743,$1745,$1747);
       $p = 0;
       $1748 = $j;
       $1749 = (($1748) + 16)|0;
       $j = $1749;
      }
     }
     $1761 = $p14;
     _strPre4x4Stage1($1761,0);
     $1762 = $p14;
     $1763 = (($1762) + 64|0);
     _strPre4x4Stage1($1763,0);
     $1764 = $p14;
     $1765 = (($1764) + 128|0);
     _strPre4x4Stage1($1765,0);
    }
   }
   $1766 = $bottom;
   $1767 = ($1766|0)!=(0);
   if ($1767) {
    label = 417;
   } else {
    $1768 = $0;
    $1769 = (($1768) + 34404|0);
    $1770 = HEAP32[$1769>>2]|0;
    $1771 = ($1770|0)!=(0);
    if ($1771) {
     label = 417;
    }
   }
   if ((label|0) == 417) {
    label = 0;
    $1772 = $left;
    $1773 = ($1772|0)!=(0);
    if ($1773) {
     $1779 = 1;
    } else {
     $1774 = $0;
     $1775 = (($1774) + 34400|0);
     $1776 = HEAP32[$1775>>2]|0;
     $1777 = ($1776|0)!=(0);
     $1779 = $1777;
    }
    $1778 = $1779 ? 48 : -16;
    $j = $1778;
    while(1) {
     $1780 = $j;
     $1781 = $right;
     $1782 = ($1781|0)!=(0);
     $1783 = $1782 ? -16 : 112;
     $1784 = ($1780|0)<($1783|0);
     if (!($1784)) {
      break;
     }
     $1785 = $p03;
     $1786 = $j;
     $1787 = (($1785) + ($1786<<2)|0);
     $p = $1787;
     $1788 = $p;
     $1789 = (($1788) + 60|0);
     $1790 = $p;
     $1791 = (($1790) + 56|0);
     $1792 = $p;
     $1793 = (($1792) + 296|0);
     $1794 = $p;
     $1795 = (($1794) + 300|0);
     _strPre4($1789,$1791,$1793,$1795);
     $1796 = $p;
     $1797 = (($1796) + 52|0);
     $1798 = $p;
     $1799 = (($1798) + 48|0);
     $1800 = $p;
     $1801 = (($1800) + 288|0);
     $1802 = $p;
     $1803 = (($1802) + 292|0);
     _strPre4($1797,$1799,$1801,$1803);
     $p = 0;
     $1804 = $j;
     $1805 = (($1804) + 64)|0;
     $j = $1805;
    }
   }
   $1806 = $right;
   $1807 = ($1806|0)!=(0);
   if ($1807) {
    label = 426;
   } else {
    $1808 = $0;
    $1809 = (($1808) + 34400|0);
    $1810 = HEAP32[$1809>>2]|0;
    $1811 = ($1810|0)!=(0);
    if ($1811) {
     label = 426;
    }
   }
   if ((label|0) == 426) {
    label = 0;
    $1812 = $bottom;
    $1813 = ($1812|0)!=(0);
    if (!($1813)) {
     $1814 = $top;
     $1815 = ($1814|0)!=(0);
     do {
      if (!($1815)) {
       $1816 = $0;
       $1817 = (($1816) + 34404|0);
       $1818 = HEAP32[$1817>>2]|0;
       $1819 = ($1818|0)!=(0);
       if ($1819) {
        break;
       }
       $1820 = $p03;
       $1821 = (($1820) + -4|0);
       $1822 = $p03;
       $1823 = (($1822) + -12|0);
       $1824 = $p14;
       $1825 = (($1824) + -236|0);
       $1826 = $p14;
       $1827 = (($1826) + -228|0);
       _strPre4($1821,$1823,$1825,$1827);
       $1828 = $p03;
       $1829 = (($1828) + -8|0);
       $1830 = $p03;
       $1831 = (($1830) + -16|0);
       $1832 = $p14;
       $1833 = (($1832) + -240|0);
       $1834 = $p14;
       $1835 = (($1834) + -232|0);
       _strPre4($1829,$1831,$1833,$1835);
      }
     } while(0);
     $j = -64;
     while(1) {
      $1836 = $j;
      $1837 = ($1836|0)<(-16);
      if (!($1837)) {
       break;
      }
      $1838 = $p14;
      $1839 = $j;
      $1840 = (($1838) + ($1839<<2)|0);
      $p = $1840;
      $1841 = $p;
      $1842 = (($1841) + 60|0);
      $1843 = $p;
      $1844 = (($1843) + 52|0);
      $1845 = $p;
      $1846 = (($1845) + 84|0);
      $1847 = $p;
      $1848 = (($1847) + 92|0);
      _strPre4($1842,$1844,$1846,$1848);
      $1849 = $p;
      $1850 = (($1849) + 56|0);
      $1851 = $p;
      $1852 = (($1851) + 48|0);
      $1853 = $p;
      $1854 = (($1853) + 80|0);
      $1855 = $p;
      $1856 = (($1855) + 88|0);
      _strPre4($1850,$1852,$1854,$1856);
      $p = 0;
      $1857 = $j;
      $1858 = (($1857) + 16)|0;
      $j = $1858;
     }
    }
   }
  }
  $1859 = $top;
  $1860 = ($1859|0)!=(0);
  if (!($1860)) {
   $1861 = $left;
   $1862 = ($1861|0)!=(0);
   $1863 = $1862 ? 48 : -16;
   $j = $1863;
   while(1) {
    $1864 = $j;
    $1865 = $right;
    $1866 = ($1865|0)!=(0);
    $1867 = $1866 ? 48 : 112;
    $1868 = ($1864|0)<($1867|0);
    if (!($1868)) {
     break;
    }
    $1869 = $p03;
    $1870 = $j;
    $1871 = (($1869) + ($1870<<2)|0);
    _strDCT4x4Stage1($1871);
    $1872 = $j;
    $1873 = (($1872) + 64)|0;
    $j = $1873;
   }
  }
  $1874 = $bottom;
  $1875 = ($1874|0)!=(0);
  if (!($1875)) {
   $1876 = $left;
   $1877 = ($1876|0)!=(0);
   $1878 = $1877 ? 0 : -64;
   $j = $1878;
   while(1) {
    $1879 = $j;
    $1880 = $right;
    $1881 = ($1880|0)!=(0);
    $1882 = $1881 ? 0 : 64;
    $1883 = ($1879|0)<($1882|0);
    if (!($1883)) {
     break;
    }
    $1884 = $p14;
    $1885 = $j;
    $1886 = (($1884) + ($1885<<2)|0);
    _strDCT4x4Stage1($1886);
    $1887 = $p14;
    $1888 = $j;
    $1889 = (($1887) + ($1888<<2)|0);
    $1890 = (($1889) + 64|0);
    _strDCT4x4Stage1($1890);
    $1891 = $p14;
    $1892 = $j;
    $1893 = (($1891) + ($1892<<2)|0);
    $1894 = (($1893) + 128|0);
    _strDCT4x4Stage1($1894);
    $1895 = $j;
    $1896 = (($1895) + 64)|0;
    $j = $1896;
   }
  }
  $1897 = $olOverlap;
  $1898 = (2)==($1897|0);
  if ($1898) {
   $1899 = $leftAdjacentColumn;
   $1900 = ($1899|0)!=(0);
   if ($1900) {
    label = 451;
   } else {
    $1901 = $0;
    $1902 = (($1901) + 34412|0);
    $1903 = HEAP32[$1902>>2]|0;
    $1904 = ($1903|0)!=(0);
    if ($1904) {
     label = 451;
    }
   }
   do {
    if ((label|0) == 451) {
     label = 0;
     $1905 = $top;
     $1906 = ($1905|0)!=(0);
     if (!($1906)) {
      $1907 = $0;
      $1908 = (($1907) + 34404|0);
      $1909 = HEAP32[$1908>>2]|0;
      $1910 = ($1909|0)!=(0);
      if (!($1910)) {
       break;
      }
     }
     $1911 = $p14;
     $1912 = (($1911) + -512|0);
     $1913 = (($1912) + 256|0);
     $1914 = HEAP32[$1913>>2]|0;
     $1915 = $p14;
     $1916 = (($1915) + -512|0);
     $1917 = HEAP32[$1916>>2]|0;
     $1918 = (($1917) - ($1914))|0;
     HEAP32[$1916>>2] = $1918;
    }
   } while(0);
   $1919 = $rightAdjacentColumn;
   $1920 = ($1919|0)!=(0);
   if ($1920) {
    label = 456;
   } else {
    $1921 = $0;
    $1922 = (($1921) + 34408|0);
    $1923 = HEAP32[$1922>>2]|0;
    $1924 = ($1923|0)!=(0);
    if ($1924) {
     label = 456;
    }
   }
   do {
    if ((label|0) == 456) {
     label = 0;
     $1925 = $top;
     $1926 = ($1925|0)!=(0);
     if (!($1926)) {
      $1927 = $0;
      $1928 = (($1927) + 34404|0);
      $1929 = HEAP32[$1928>>2]|0;
      $1930 = ($1929|0)!=(0);
      if (!($1930)) {
       break;
      }
     }
     $1931 = $p14;
     $1932 = HEAP32[$1931>>2]|0;
     $1933 = $i;
     $1934 = $0;
     $1935 = (($1934) + 34416|0);
     $1936 = (($1935) + ($1933<<3)|0);
     HEAP32[$1936>>2] = $1932;
    }
   } while(0);
   $1937 = $right;
   $1938 = ($1937|0)!=(0);
   if ($1938) {
    label = 461;
   } else {
    $1939 = $0;
    $1940 = (($1939) + 34400|0);
    $1941 = HEAP32[$1940>>2]|0;
    $1942 = ($1941|0)!=(0);
    if ($1942) {
     label = 461;
    }
   }
   do {
    if ((label|0) == 461) {
     label = 0;
     $1943 = $top;
     $1944 = ($1943|0)!=(0);
     if (!($1944)) {
      $1945 = $0;
      $1946 = (($1945) + 34404|0);
      $1947 = HEAP32[$1946>>2]|0;
      $1948 = ($1947|0)!=(0);
      if (!($1948)) {
       break;
      }
     }
     $1949 = $i;
     $1950 = $0;
     $1951 = (($1950) + 34416|0);
     $1952 = (($1951) + ($1949<<3)|0);
     $1953 = HEAP32[$1952>>2]|0;
     $1954 = $p14;
     $1955 = (($1954) + -512|0);
     $1956 = (($1955) + 256|0);
     $1957 = HEAP32[$1956>>2]|0;
     $1958 = (($1957) - ($1953))|0;
     HEAP32[$1956>>2] = $1958;
    }
   } while(0);
   $1959 = $leftAdjacentColumn;
   $1960 = ($1959|0)!=(0);
   if ($1960) {
    label = 466;
   } else {
    $1961 = $0;
    $1962 = (($1961) + 34412|0);
    $1963 = HEAP32[$1962>>2]|0;
    $1964 = ($1963|0)!=(0);
    if ($1964) {
     label = 466;
    }
   }
   do {
    if ((label|0) == 466) {
     label = 0;
     $1965 = $bottom;
     $1966 = ($1965|0)!=(0);
     if (!($1966)) {
      $1967 = $0;
      $1968 = (($1967) + 34404|0);
      $1969 = HEAP32[$1968>>2]|0;
      $1970 = ($1969|0)!=(0);
      if (!($1970)) {
       break;
      }
     }
     $1971 = $p03;
     $1972 = (($1971) + -512|0);
     $1973 = (($1972) + 448|0);
     $1974 = HEAP32[$1973>>2]|0;
     $1975 = $p03;
     $1976 = (($1975) + -512|0);
     $1977 = (($1976) + 192|0);
     $1978 = HEAP32[$1977>>2]|0;
     $1979 = (($1978) - ($1974))|0;
     HEAP32[$1977>>2] = $1979;
    }
   } while(0);
   $1980 = $rightAdjacentColumn;
   $1981 = ($1980|0)!=(0);
   if ($1981) {
    label = 471;
   } else {
    $1982 = $0;
    $1983 = (($1982) + 34408|0);
    $1984 = HEAP32[$1983>>2]|0;
    $1985 = ($1984|0)!=(0);
    if ($1985) {
     label = 471;
    }
   }
   do {
    if ((label|0) == 471) {
     label = 0;
     $1986 = $bottom;
     $1987 = ($1986|0)!=(0);
     if (!($1987)) {
      $1988 = $0;
      $1989 = (($1988) + 34404|0);
      $1990 = HEAP32[$1989>>2]|0;
      $1991 = ($1990|0)!=(0);
      if (!($1991)) {
       break;
      }
     }
     $1992 = $p03;
     $1993 = (($1992) + 192|0);
     $1994 = HEAP32[$1993>>2]|0;
     $1995 = $i;
     $1996 = $0;
     $1997 = (($1996) + 34416|0);
     $1998 = (($1997) + ($1995<<3)|0);
     $1999 = (($1998) + 4|0);
     HEAP32[$1999>>2] = $1994;
    }
   } while(0);
   $2000 = $right;
   $2001 = ($2000|0)!=(0);
   if ($2001) {
    label = 476;
   } else {
    $2002 = $0;
    $2003 = (($2002) + 34400|0);
    $2004 = HEAP32[$2003>>2]|0;
    $2005 = ($2004|0)!=(0);
    if ($2005) {
     label = 476;
    }
   }
   do {
    if ((label|0) == 476) {
     label = 0;
     $2006 = $bottom;
     $2007 = ($2006|0)!=(0);
     if (!($2007)) {
      $2008 = $0;
      $2009 = (($2008) + 34404|0);
      $2010 = HEAP32[$2009>>2]|0;
      $2011 = ($2010|0)!=(0);
      if (!($2011)) {
       break;
      }
     }
     $2012 = $i;
     $2013 = $0;
     $2014 = (($2013) + 34416|0);
     $2015 = (($2014) + ($2012<<3)|0);
     $2016 = (($2015) + 4|0);
     $2017 = HEAP32[$2016>>2]|0;
     $2018 = $p03;
     $2019 = (($2018) + -512|0);
     $2020 = (($2019) + 448|0);
     $2021 = HEAP32[$2020>>2]|0;
     $2022 = (($2021) - ($2017))|0;
     HEAP32[$2020>>2] = $2022;
    }
   } while(0);
   $2023 = $bottom;
   $2024 = ($2023|0)!=(0);
   if (!($2024)) {
    $2025 = $leftORright;
    $2026 = ($2025|0)!=(0);
    if ($2026) {
     label = 482;
    } else {
     $2027 = $0;
     $2028 = (($2027) + 34400|0);
     $2029 = HEAP32[$2028>>2]|0;
     $2030 = ($2029|0)!=(0);
     if ($2030) {
      label = 482;
     }
    }
    if ((label|0) == 482) {
     label = 0;
     $2031 = $top;
     $2032 = ($2031|0)!=(0);
     do {
      if (!($2032)) {
       $2033 = $0;
       $2034 = (($2033) + 34404|0);
       $2035 = HEAP32[$2034>>2]|0;
       $2036 = ($2035|0)!=(0);
       if ($2036) {
        break;
       }
       $2037 = $left;
       $2038 = ($2037|0)!=(0);
       if ($2038) {
        label = 486;
       } else {
        $2039 = $0;
        $2040 = (($2039) + 34400|0);
        $2041 = HEAP32[$2040>>2]|0;
        $2042 = ($2041|0)!=(0);
        if ($2042) {
         label = 486;
        }
       }
       if ((label|0) == 486) {
        label = 0;
        $2043 = $p03;
        $2044 = (($2043) + 192|0);
        $2045 = $p14;
        _strPre2($2044,$2045);
       }
       $2046 = $right;
       $2047 = ($2046|0)!=(0);
       if ($2047) {
        label = 489;
       } else {
        $2048 = $0;
        $2049 = (($2048) + 34400|0);
        $2050 = HEAP32[$2049>>2]|0;
        $2051 = ($2050|0)!=(0);
        if ($2051) {
         label = 489;
        }
       }
       if ((label|0) == 489) {
        label = 0;
        $2052 = $p03;
        $2053 = (($2052) + 192|0);
        $2054 = (($2053) + -256|0);
        $2055 = $p14;
        $2056 = (($2055) + -256|0);
        _strPre2($2054,$2056);
       }
      }
     } while(0);
     $2057 = $left;
     $2058 = ($2057|0)!=(0);
     if ($2058) {
      label = 493;
     } else {
      $2059 = $0;
      $2060 = (($2059) + 34400|0);
      $2061 = HEAP32[$2060>>2]|0;
      $2062 = ($2061|0)!=(0);
      if ($2062) {
       label = 493;
      }
     }
     if ((label|0) == 493) {
      label = 0;
      $2063 = $p14;
      $2064 = (($2063) + 64|0);
      $2065 = $p14;
      $2066 = (($2065) + 64|0);
      $2067 = (($2066) + 64|0);
      _strPre2($2064,$2067);
     }
     $2068 = $right;
     $2069 = ($2068|0)!=(0);
     if ($2069) {
      label = 496;
     } else {
      $2070 = $0;
      $2071 = (($2070) + 34400|0);
      $2072 = HEAP32[$2071>>2]|0;
      $2073 = ($2072|0)!=(0);
      if ($2073) {
       label = 496;
      }
     }
     if ((label|0) == 496) {
      label = 0;
      $2074 = $p14;
      $2075 = (($2074) + -192|0);
      $2076 = $p14;
      $2077 = (($2076) + -192|0);
      $2078 = (($2077) + 64|0);
      _strPre2($2075,$2078);
     }
    }
    $2079 = $leftORright;
    $2080 = ($2079|0)!=(0);
    do {
     if (!($2080)) {
      $2081 = $0;
      $2082 = (($2081) + 34400|0);
      $2083 = HEAP32[$2082>>2]|0;
      $2084 = ($2083|0)!=(0);
      if ($2084) {
       break;
      }
      $2085 = $top;
      $2086 = ($2085|0)!=(0);
      do {
       if ($2086) {
        label = 502;
       } else {
        $2087 = $0;
        $2088 = (($2087) + 34404|0);
        $2089 = HEAP32[$2088>>2]|0;
        $2090 = ($2089|0)!=(0);
        if ($2090) {
         label = 502;
         break;
        }
        $2094 = $p03;
        $2095 = (($2094) + -64|0);
        $2096 = $p03;
        $2097 = (($2096) + 192|0);
        $2098 = $p14;
        $2099 = (($2098) + -256|0);
        $2100 = $p14;
        _strPre2x2($2095,$2097,$2099,$2100);
       }
      } while(0);
      if ((label|0) == 502) {
       label = 0;
       $2091 = $p14;
       $2092 = (($2091) + -256|0);
       $2093 = $p14;
       _strPre2($2092,$2093);
      }
      $2101 = $p14;
      $2102 = (($2101) + -192|0);
      $2103 = $p14;
      $2104 = (($2103) + 64|0);
      $2105 = $p14;
      $2106 = (($2105) + -128|0);
      $2107 = $p14;
      $2108 = (($2107) + 128|0);
      _strPre2x2($2102,$2104,$2106,$2108);
     }
    } while(0);
   }
   $2109 = $bottom;
   $2110 = ($2109|0)!=(0);
   if ($2110) {
    label = 508;
   } else {
    $2111 = $0;
    $2112 = (($2111) + 34404|0);
    $2113 = HEAP32[$2112>>2]|0;
    $2114 = ($2113|0)!=(0);
    if ($2114) {
     label = 508;
    }
   }
   do {
    if ((label|0) == 508) {
     label = 0;
     $2115 = $leftORright;
     $2116 = ($2115|0)!=(0);
     if ($2116) {
      break;
     }
     $2117 = $0;
     $2118 = (($2117) + 34400|0);
     $2119 = HEAP32[$2118>>2]|0;
     $2120 = ($2119|0)!=(0);
     if ($2120) {
      break;
     }
     $2121 = $p03;
     $2122 = (($2121) + -64|0);
     $2123 = $p03;
     $2124 = (($2123) + 192|0);
     _strPre2($2122,$2124);
    }
   } while(0);
   $2125 = $leftAdjacentColumn;
   $2126 = ($2125|0)!=(0);
   if ($2126) {
    label = 513;
   } else {
    $2127 = $0;
    $2128 = (($2127) + 34412|0);
    $2129 = HEAP32[$2128>>2]|0;
    $2130 = ($2129|0)!=(0);
    if ($2130) {
     label = 513;
    }
   }
   do {
    if ((label|0) == 513) {
     label = 0;
     $2131 = $top;
     $2132 = ($2131|0)!=(0);
     if (!($2132)) {
      $2133 = $0;
      $2134 = (($2133) + 34404|0);
      $2135 = HEAP32[$2134>>2]|0;
      $2136 = ($2135|0)!=(0);
      if (!($2136)) {
       break;
      }
     }
     $2137 = $p14;
     $2138 = (($2137) + -512|0);
     $2139 = (($2138) + 256|0);
     $2140 = HEAP32[$2139>>2]|0;
     $2141 = $p14;
     $2142 = (($2141) + -512|0);
     $2143 = HEAP32[$2142>>2]|0;
     $2144 = (($2143) + ($2140))|0;
     HEAP32[$2142>>2] = $2144;
    }
   } while(0);
   $2145 = $rightAdjacentColumn;
   $2146 = ($2145|0)!=(0);
   if ($2146) {
    label = 518;
   } else {
    $2147 = $0;
    $2148 = (($2147) + 34408|0);
    $2149 = HEAP32[$2148>>2]|0;
    $2150 = ($2149|0)!=(0);
    if ($2150) {
     label = 518;
    }
   }
   do {
    if ((label|0) == 518) {
     label = 0;
     $2151 = $top;
     $2152 = ($2151|0)!=(0);
     if (!($2152)) {
      $2153 = $0;
      $2154 = (($2153) + 34404|0);
      $2155 = HEAP32[$2154>>2]|0;
      $2156 = ($2155|0)!=(0);
      if (!($2156)) {
       break;
      }
     }
     $2157 = $p14;
     $2158 = HEAP32[$2157>>2]|0;
     $2159 = $i;
     $2160 = $0;
     $2161 = (($2160) + 34432|0);
     $2162 = (($2161) + ($2159<<3)|0);
     HEAP32[$2162>>2] = $2158;
    }
   } while(0);
   $2163 = $right;
   $2164 = ($2163|0)!=(0);
   if ($2164) {
    label = 523;
   } else {
    $2165 = $0;
    $2166 = (($2165) + 34400|0);
    $2167 = HEAP32[$2166>>2]|0;
    $2168 = ($2167|0)!=(0);
    if ($2168) {
     label = 523;
    }
   }
   do {
    if ((label|0) == 523) {
     label = 0;
     $2169 = $top;
     $2170 = ($2169|0)!=(0);
     if (!($2170)) {
      $2171 = $0;
      $2172 = (($2171) + 34404|0);
      $2173 = HEAP32[$2172>>2]|0;
      $2174 = ($2173|0)!=(0);
      if (!($2174)) {
       break;
      }
     }
     $2175 = $i;
     $2176 = $0;
     $2177 = (($2176) + 34432|0);
     $2178 = (($2177) + ($2175<<3)|0);
     $2179 = HEAP32[$2178>>2]|0;
     $2180 = $p14;
     $2181 = (($2180) + -512|0);
     $2182 = (($2181) + 256|0);
     $2183 = HEAP32[$2182>>2]|0;
     $2184 = (($2183) + ($2179))|0;
     HEAP32[$2182>>2] = $2184;
    }
   } while(0);
   $2185 = $leftAdjacentColumn;
   $2186 = ($2185|0)!=(0);
   if ($2186) {
    label = 528;
   } else {
    $2187 = $0;
    $2188 = (($2187) + 34412|0);
    $2189 = HEAP32[$2188>>2]|0;
    $2190 = ($2189|0)!=(0);
    if ($2190) {
     label = 528;
    }
   }
   do {
    if ((label|0) == 528) {
     label = 0;
     $2191 = $bottom;
     $2192 = ($2191|0)!=(0);
     if (!($2192)) {
      $2193 = $0;
      $2194 = (($2193) + 34404|0);
      $2195 = HEAP32[$2194>>2]|0;
      $2196 = ($2195|0)!=(0);
      if (!($2196)) {
       break;
      }
     }
     $2197 = $p03;
     $2198 = (($2197) + -512|0);
     $2199 = (($2198) + 448|0);
     $2200 = HEAP32[$2199>>2]|0;
     $2201 = $p03;
     $2202 = (($2201) + -512|0);
     $2203 = (($2202) + 192|0);
     $2204 = HEAP32[$2203>>2]|0;
     $2205 = (($2204) + ($2200))|0;
     HEAP32[$2203>>2] = $2205;
    }
   } while(0);
   $2206 = $rightAdjacentColumn;
   $2207 = ($2206|0)!=(0);
   if ($2207) {
    label = 533;
   } else {
    $2208 = $0;
    $2209 = (($2208) + 34408|0);
    $2210 = HEAP32[$2209>>2]|0;
    $2211 = ($2210|0)!=(0);
    if ($2211) {
     label = 533;
    }
   }
   do {
    if ((label|0) == 533) {
     label = 0;
     $2212 = $bottom;
     $2213 = ($2212|0)!=(0);
     if (!($2213)) {
      $2214 = $0;
      $2215 = (($2214) + 34404|0);
      $2216 = HEAP32[$2215>>2]|0;
      $2217 = ($2216|0)!=(0);
      if (!($2217)) {
       break;
      }
     }
     $2218 = $p03;
     $2219 = (($2218) + 192|0);
     $2220 = HEAP32[$2219>>2]|0;
     $2221 = $i;
     $2222 = $0;
     $2223 = (($2222) + 34432|0);
     $2224 = (($2223) + ($2221<<3)|0);
     $2225 = (($2224) + 4|0);
     HEAP32[$2225>>2] = $2220;
    }
   } while(0);
   $2226 = $right;
   $2227 = ($2226|0)!=(0);
   if ($2227) {
    label = 538;
   } else {
    $2228 = $0;
    $2229 = (($2228) + 34400|0);
    $2230 = HEAP32[$2229>>2]|0;
    $2231 = ($2230|0)!=(0);
    if ($2231) {
     label = 538;
    }
   }
   do {
    if ((label|0) == 538) {
     label = 0;
     $2232 = $bottom;
     $2233 = ($2232|0)!=(0);
     if (!($2233)) {
      $2234 = $0;
      $2235 = (($2234) + 34404|0);
      $2236 = HEAP32[$2235>>2]|0;
      $2237 = ($2236|0)!=(0);
      if (!($2237)) {
       break;
      }
     }
     $2238 = $i;
     $2239 = $0;
     $2240 = (($2239) + 34432|0);
     $2241 = (($2240) + ($2238<<3)|0);
     $2242 = (($2241) + 4|0);
     $2243 = HEAP32[$2242>>2]|0;
     $2244 = $p03;
     $2245 = (($2244) + -512|0);
     $2246 = (($2245) + 448|0);
     $2247 = HEAP32[$2246>>2]|0;
     $2248 = (($2247) + ($2243))|0;
     HEAP32[$2246>>2] = $2248;
    }
   } while(0);
  }
  $2249 = $topORleft;
  $2250 = ($2249|0)!=(0);
  if (!($2250)) {
   $2251 = $0;
   $2252 = (($2251) + 34136|0);
   $2253 = (($2252) + 20|0);
   $2254 = HEAP32[$2253>>2]|0;
   $2255 = ($2254|0)!=(0);
   if ($2255) {
    $2272 = $p03;
    $2273 = (($2272) + -512|0);
    $2274 = $p03;
    $2275 = (($2274) + -256|0);
    $2276 = $p03;
    $2277 = (($2276) + -448|0);
    $2278 = $p03;
    $2279 = (($2278) + -192|0);
    _strDCT2x2dnEnc($2273,$2275,$2277,$2279);
    $2280 = $p03;
    $2281 = (($2280) + -384|0);
    $2282 = $p03;
    $2283 = (($2282) + -128|0);
    $2284 = $p03;
    $2285 = (($2284) + -320|0);
    $2286 = $p03;
    $2287 = (($2286) + -64|0);
    _strDCT2x2dnEnc($2281,$2283,$2285,$2287);
   } else {
    $2256 = $p03;
    $2257 = (($2256) + -512|0);
    $2258 = $p03;
    $2259 = (($2258) + -256|0);
    $2260 = $p03;
    $2261 = (($2260) + -448|0);
    $2262 = $p03;
    $2263 = (($2262) + -192|0);
    _strDCT2x2dn($2257,$2259,$2261,$2263);
    $2264 = $p03;
    $2265 = (($2264) + -384|0);
    $2266 = $p03;
    $2267 = (($2266) + -128|0);
    $2268 = $p03;
    $2269 = (($2268) + -320|0);
    $2270 = $p03;
    $2271 = (($2270) + -64|0);
    _strDCT2x2dn($2265,$2267,$2269,$2271);
   }
   $2288 = $p03;
   $2289 = (($2288) + -512|0);
   $2290 = HEAP32[$2289>>2]|0;
   $2291 = $p03;
   $2292 = (($2291) + -384|0);
   $2293 = HEAP32[$2292>>2]|0;
   $2294 = (($2293) - ($2290))|0;
   HEAP32[$2292>>2] = $2294;
   $2295 = $p03;
   $2296 = (($2295) + -384|0);
   $2297 = HEAP32[$2296>>2]|0;
   $2298 = (($2297) + 1)|0;
   $2299 = $2298 >> 1;
   $2300 = $p03;
   $2301 = (($2300) + -512|0);
   $2302 = HEAP32[$2301>>2]|0;
   $2303 = (($2302) + ($2299))|0;
   HEAP32[$2301>>2] = $2303;
  }
  $2304 = $i;
  $2305 = (($2304) + 1)|0;
  $i = $2305;
 }
 $2306 = $p;
 $2307 = (0|0)==($2306|0);
 if ($2307) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((7336|0),(7352|0),1109,(7384|0));
  // unreachable;
 }
}
function _QUANT_Mulless($v,$o,$r) {
 $v = $v|0;
 $o = $o|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $o;
 $2 = $r;
 $3 = $0;
 $4 = $3 >> 31;
 $m = $4;
 $5 = $0;
 $6 = $m;
 $7 = $5 ^ $6;
 $8 = $m;
 $9 = (($7) - ($8))|0;
 $10 = $1;
 $11 = (($9) + ($10))|0;
 $12 = $2;
 $13 = $11 >> $12;
 $14 = $m;
 $15 = $13 ^ $14;
 $16 = $m;
 $17 = (($15) - ($16))|0;
 STACKTOP = sp;return ($17|0);
}
function _MUL32HR($a,$b,$r) {
 $a = $a|0;
 $b = $b|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $r;
 $3 = $0;
 $4 = $1;
 (___muldi3(($3|0),0,($4|0),0)|0);
 $5 = tempRet0;
 $6 = $2;
 $7 = $5 >>> $6;
 STACKTOP = sp;return ($7|0);
}
function _QUANT($v,$o,$man,$exp) {
 $v = $v|0;
 $o = $o|0;
 $man = $man|0;
 $exp = $exp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $o;
 $2 = $man;
 $3 = $exp;
 $4 = $0;
 $5 = $4 >> 31;
 $m = $5;
 $6 = $0;
 $7 = $m;
 $8 = $6 ^ $7;
 $9 = $m;
 $10 = (($8) - ($9))|0;
 $11 = $1;
 $12 = (($10) + ($11))|0;
 $13 = $2;
 $14 = $3;
 $15 = (_MUL32HR($12,$13,$14)|0);
 $16 = $m;
 $17 = $15 ^ $16;
 $18 = $m;
 $19 = (($17) - ($18))|0;
 STACKTOP = sp;return ($19|0);
}
function _quantizeMacroblock($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bUV = 0, $cf = 0, $i = 0, $iChannel = 0, $iNumBlock = 0, $j = 0, $pDC = 0, $pData = 0, $pData1 = 0, $pMBInfo = 0, $pOffset = 0, $pQPDC = 0, $pQPHP = 0, $pQPLP = 0, $pTile = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34316|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (($4) + 34296|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + (($6*240)|0)|0);
 $pTile = $7;
 $8 = $0;
 $9 = (($8) + 32976|0);
 $pMBInfo = $9;
 $10 = $0;
 $11 = (($10) + 34136|0);
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $cf = $13;
 $14 = $0;
 $15 = (($14) + 34136|0);
 $16 = (($15) + 56|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $iChannel = 0;
  while(1) {
   $19 = $iChannel;
   $20 = $0;
   $21 = (($20) + 34136|0);
   $22 = (($21) + 36|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($19|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $iChannel;
   $26 = ($25|0)>(0);
   if ($26) {
    $27 = $cf;
    $28 = ($27|0)==(3);
    if ($28) {
     $262 = 1;
    } else {
     $29 = $cf;
     $30 = ($29|0)==(2);
     if ($30) {
      $262 = 1;
     } else {
      $31 = $cf;
      $32 = ($31|0)==(1);
      $262 = $32;
     }
    }
    $34 = $262;
   } else {
    $34 = 0;
   }
   $33 = $34&1;
   $bUV = $33;
   $35 = $bUV;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $cf;
    $38 = ($37|0)==(2);
    if ($38) {
     $263 = 8;
    } else {
     $39 = $cf;
     $40 = ($39|0)==(1);
     $41 = $40 ? 4 : 16;
     $263 = $41;
    }
    $42 = $263;
   } else {
    $42 = 16;
   }
   $iNumBlock = $42;
   $43 = $iNumBlock;
   $44 = ($43|0)==(4);
   if ($44) {
    $48 = 14000;
   } else {
    $45 = $iNumBlock;
    $46 = ($45|0)==(8);
    $47 = $46 ? 14016 : 13936;
    $48 = $47;
   }
   $pOffset = $48;
   $49 = $iChannel;
   $50 = $pTile;
   $51 = (($50) + ($49<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $pQPDC = $52;
   $53 = $iChannel;
   $54 = $pTile;
   $55 = (($54) + 64|0);
   $56 = (($55) + ($53<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $pMBInfo;
   $59 = (($58) + 1156|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = (($57) + (($61*20)|0)|0);
   $pQPLP = $62;
   $63 = $iChannel;
   $64 = $pTile;
   $65 = (($64) + 128|0);
   $66 = (($65) + ($63<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $pMBInfo;
   $69 = (($68) + 1157|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = (($67) + (($71*20)|0)|0);
   $pQPHP = $72;
   $j = 0;
   while(1) {
    $73 = $j;
    $74 = $iNumBlock;
    $75 = ($73|0)<($74|0);
    if (!($75)) {
     break;
    }
    $76 = $iChannel;
    $77 = $0;
    $78 = (($77) + 34500|0);
    $79 = (($78) + ($76<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $j;
    $82 = $pOffset;
    $83 = (($82) + ($81<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($80) + ($84<<2)|0);
    $pData = $85;
    $86 = $j;
    $87 = ($86|0)==(0);
    if ($87) {
     $88 = $pQPDC;
     $89 = (($88) + 12|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ($90|0)==(0);
     if ($91) {
      $92 = $pData;
      $93 = HEAP32[$92>>2]|0;
      $94 = $pQPDC;
      $95 = (($94) + 8|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = $pQPDC;
      $98 = (($97) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (_QUANT_Mulless($93,$96,$99)|0);
      $114 = $100;
     } else {
      $101 = $pData;
      $102 = HEAP32[$101>>2]|0;
      $103 = $pQPDC;
      $104 = (($103) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $pQPDC;
      $107 = (($106) + 12|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = $pQPDC;
      $110 = (($109) + 16|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (_QUANT($102,$105,$108,$111)|0);
      $114 = $112;
     }
     $113 = $pData;
     HEAP32[$113>>2] = $114;
    } else {
     $115 = $0;
     $116 = (($115) + 84|0);
     $117 = (($116) + 44|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($118|0)!=(3);
     if ($119) {
      $120 = $pQPLP;
      $121 = (($120) + 12|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0);
      if ($123) {
       $124 = $pData;
       $125 = HEAP32[$124>>2]|0;
       $126 = $pQPLP;
       $127 = (($126) + 8|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $pQPLP;
       $130 = (($129) + 16|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = (_QUANT_Mulless($125,$128,$131)|0);
       $146 = $132;
      } else {
       $133 = $pData;
       $134 = HEAP32[$133>>2]|0;
       $135 = $pQPLP;
       $136 = (($135) + 8|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = $pQPLP;
       $139 = (($138) + 12|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = $pQPLP;
       $142 = (($141) + 16|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (_QUANT($134,$137,$140,$143)|0);
       $146 = $144;
      }
      $145 = $pData;
      HEAP32[$145>>2] = $146;
     }
    }
    $147 = $0;
    $148 = (($147) + 84|0);
    $149 = (($148) + 44|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ($150|0)!=(3);
    if ($151) {
     $152 = $0;
     $153 = (($152) + 84|0);
     $154 = (($153) + 44|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ($155|0)!=(2);
     if ($156) {
      $i = 1;
      while(1) {
       $157 = $i;
       $158 = ($157|0)<(16);
       if (!($158)) {
        break;
       }
       $159 = $pQPHP;
       $160 = (($159) + 12|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161|0)==(0);
       if ($162) {
        $163 = $i;
        $164 = $pData;
        $165 = (($164) + ($163<<2)|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = $pQPHP;
        $168 = (($167) + 8|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = $pQPHP;
        $171 = (($170) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (_QUANT_Mulless($166,$169,$172)|0);
        $191 = $173;
       } else {
        $174 = $i;
        $175 = $pData;
        $176 = (($175) + ($174<<2)|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = $pQPHP;
        $179 = (($178) + 8|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = $pQPHP;
        $182 = (($181) + 12|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = $pQPHP;
        $185 = (($184) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = (_QUANT($177,$180,$183,$186)|0);
        $191 = $187;
       }
       $188 = $i;
       $189 = $pData;
       $190 = (($189) + ($188<<2)|0);
       HEAP32[$190>>2] = $191;
       $192 = $i;
       $193 = (($192) + 1)|0;
       $i = $193;
      }
     }
    }
    $194 = $j;
    $195 = (($194) + 1)|0;
    $j = $195;
   }
   $196 = $iChannel;
   $197 = (($196) + 1)|0;
   $iChannel = $197;
  }
 }
 $iChannel = 0;
 while(1) {
  $198 = $iChannel;
  $199 = $0;
  $200 = (($199) + 34136|0);
  $201 = (($200) + 36|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = ($198|0)<($202|0);
  if (!($203)) {
   break;
  }
  $204 = $iChannel;
  $205 = $0;
  $206 = (($205) + 32976|0);
  $207 = (($206) + ($204<<6)|0);
  $pDC = $207;
  $208 = $iChannel;
  $209 = $0;
  $210 = (($209) + 34500|0);
  $211 = (($210) + ($208<<2)|0);
  $212 = HEAP32[$211>>2]|0;
  $pData1 = $212;
  $213 = $iChannel;
  $214 = ($213|0)>(0);
  if ($214) {
   $215 = $cf;
   $216 = ($215|0)==(2);
   if ($216) {
    $i = 0;
    while(1) {
     $217 = $i;
     $218 = ($217|0)<(8);
     if (!($218)) {
      break;
     }
     $219 = $i;
     $220 = (14016 + ($219<<2)|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = $pData1;
     $223 = (($222) + ($221<<2)|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = $i;
     $226 = $pDC;
     $227 = (($226) + ($225<<2)|0);
     HEAP32[$227>>2] = $224;
     $228 = $i;
     $229 = (($228) + 1)|0;
     $i = $229;
    }
   } else {
    label = 55;
   }
  } else {
   label = 55;
  }
  if ((label|0) == 55) {
   label = 0;
   $230 = $iChannel;
   $231 = ($230|0)>(0);
   if ($231) {
    $232 = $cf;
    $233 = ($232|0)==(1);
    if ($233) {
     $i = 0;
     while(1) {
      $234 = $i;
      $235 = ($234|0)<(4);
      if (!($235)) {
       break;
      }
      $236 = $i;
      $237 = (14000 + ($236<<2)|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = $pData1;
      $240 = (($239) + ($238<<2)|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = $i;
      $243 = $pDC;
      $244 = (($243) + ($242<<2)|0);
      HEAP32[$244>>2] = $241;
      $245 = $i;
      $246 = (($245) + 1)|0;
      $i = $246;
     }
    } else {
     label = 62;
    }
   } else {
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $i = 0;
    while(1) {
     $247 = $i;
     $248 = ($247|0)<(16);
     if (!($248)) {
      break;
     }
     $249 = $i;
     $250 = (((14048 + 128|0)) + ($249<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = $pData1;
     $253 = (($252) + ($251<<2)|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = $i;
     $256 = $pDC;
     $257 = (($256) + ($255<<2)|0);
     HEAP32[$257>>2] = $254;
     $258 = $i;
     $259 = (($258) + 1)|0;
     $i = $259;
    }
   }
  }
  $260 = $iChannel;
  $261 = (($260) + 1)|0;
  $iChannel = $261;
 }
 STACKTOP = sp;return 0;
}
function _predMacroblockEnc($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cf = 0, $i = 0, $iACPredMode = 0, $iADPredMode = 0, $iChannels = 0, $iDCACPredMode = 0, $iDCPredMode = 0, $j = 0, $k = 0, $mbX = 0, $pMBInfo = 0, $pOrg = 0, $pRef = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34136|0);
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $cf = $4;
 $5 = $cf;
 $6 = ($5|0)==(1);
 if ($6) {
  label = 3;
 } else {
  $7 = $cf;
  $8 = ($7|0)==(2);
  if ($8) {
   label = 3;
  } else {
   $9 = $0;
   $10 = (($9) + 34136|0);
   $11 = (($10) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12;
  }
 }
 if ((label|0) == 3) {
  $13 = 1;
 }
 $iChannels = $13;
 $14 = $0;
 $15 = (($14) + 34360|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) - 1)|0;
 $mbX = $17;
 $18 = $0;
 $19 = (($18) + 32976|0);
 $pMBInfo = $19;
 $20 = $0;
 $21 = $mbX;
 $22 = (_getDCACPredMode($20,$21)|0);
 $iDCACPredMode = $22;
 $23 = $iDCACPredMode;
 $24 = $23 & 3;
 $iDCPredMode = $24;
 $25 = $iDCACPredMode;
 $26 = $25 & 12;
 $iADPredMode = $26;
 $27 = $pMBInfo;
 $28 = $cf;
 $29 = (_getACPredMode($27,$28)|0);
 $iACPredMode = $29;
 $30 = $iACPredMode;
 $31 = (2 - ($30))|0;
 $32 = $pMBInfo;
 $33 = (($32) + 1024|0);
 HEAP32[$33>>2] = $31;
 $34 = $0;
 $35 = $pMBInfo;
 $36 = $mbX;
 $37 = $cf;
 _updatePredInfo($34,$35,$36,$37);
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $iChannels;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $i;
  $42 = $pMBInfo;
  $43 = (($42) + ($41<<6)|0);
  $pOrg = $43;
  $44 = $iDCPredMode;
  $45 = ($44|0)==(1);
  if ($45) {
   $46 = $i;
   $47 = $0;
   $48 = (($47) + 34956|0);
   $49 = (($48) + ($46<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $mbX;
   $52 = (($50) + (($51*40)|0)|0);
   $53 = (($52) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $pOrg;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) - ($54))|0;
   HEAP32[$55>>2] = $57;
  } else {
   $58 = $iDCPredMode;
   $59 = ($58|0)==(0);
   if ($59) {
    $60 = $i;
    $61 = $0;
    $62 = (($61) + 34892|0);
    $63 = (($62) + ($60<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $mbX;
    $66 = (($64) + (($65*40)|0)|0);
    $67 = (($66) + -40|0);
    $68 = (($67) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $pOrg;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) - ($69))|0;
    HEAP32[$70>>2] = $72;
   } else {
    $73 = $iDCPredMode;
    $74 = ($73|0)==(2);
    if ($74) {
     $75 = $i;
     $76 = $0;
     $77 = (($76) + 34892|0);
     $78 = (($77) + ($75<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $mbX;
     $81 = (($79) + (($80*40)|0)|0);
     $82 = (($81) + -40|0);
     $83 = (($82) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $i;
     $86 = $0;
     $87 = (($86) + 34956|0);
     $88 = (($87) + ($85<<2)|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $mbX;
     $91 = (($89) + (($90*40)|0)|0);
     $92 = (($91) + 8|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (($84) + ($93))|0;
     $95 = $94 >> 1;
     $96 = $pOrg;
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) - ($95))|0;
     HEAP32[$96>>2] = $98;
    }
   }
  }
  $99 = $iADPredMode;
  $100 = ($99|0)==(4);
  if ($100) {
   $101 = $i;
   $102 = $0;
   $103 = (($102) + 34956|0);
   $104 = (($103) + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $mbX;
   $107 = (($105) + (($106*40)|0)|0);
   $108 = (($107) + 36|0);
   $109 = HEAP32[$108>>2]|0;
   $pRef = $109;
   $110 = $pRef;
   $111 = (($110) + 12|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $pOrg;
   $114 = (($113) + 16|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (($115) - ($112))|0;
   HEAP32[$114>>2] = $116;
   $117 = $pRef;
   $118 = (($117) + 16|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $pOrg;
   $121 = (($120) + 32|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) - ($119))|0;
   HEAP32[$121>>2] = $123;
   $124 = $pRef;
   $125 = (($124) + 20|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $pOrg;
   $128 = (($127) + 48|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) - ($126))|0;
   HEAP32[$128>>2] = $130;
  } else {
   $131 = $iADPredMode;
   $132 = ($131|0)==(0);
   if ($132) {
    $133 = $i;
    $134 = $0;
    $135 = (($134) + 34892|0);
    $136 = (($135) + ($133<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $mbX;
    $139 = (($137) + (($138*40)|0)|0);
    $140 = (($139) + -40|0);
    $141 = (($140) + 36|0);
    $142 = HEAP32[$141>>2]|0;
    $pRef = $142;
    $143 = $pRef;
    $144 = HEAP32[$143>>2]|0;
    $145 = $pOrg;
    $146 = (($145) + 4|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) - ($144))|0;
    HEAP32[$146>>2] = $148;
    $149 = $pRef;
    $150 = (($149) + 4|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $pOrg;
    $153 = (($152) + 8|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (($154) - ($151))|0;
    HEAP32[$153>>2] = $155;
    $156 = $pRef;
    $157 = (($156) + 8|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $pOrg;
    $160 = (($159) + 12|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) - ($158))|0;
    HEAP32[$160>>2] = $162;
   }
  }
  $163 = $i;
  $164 = $0;
  $165 = (($164) + 34500|0);
  $166 = (($165) + ($163<<2)|0);
  $167 = HEAP32[$166>>2]|0;
  $pOrg = $167;
  $168 = $iACPredMode;
  $169 = ($168|0)==(1);
  if ($169) {
   $k = 0;
   while(1) {
    $170 = $k;
    $171 = ($170|0)<=(192);
    if (!($171)) {
     break;
    }
    $j = 48;
    while(1) {
     $172 = $j;
     $173 = ($172|0)>(0);
     if (!($173)) {
      break;
     }
     $174 = $k;
     $175 = $j;
     $176 = (($174) + ($175))|0;
     $177 = (($176) + 10)|0;
     $178 = (($177) - 16)|0;
     $179 = $pOrg;
     $180 = (($179) + ($178<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $k;
     $183 = $j;
     $184 = (($182) + ($183))|0;
     $185 = (($184) + 10)|0;
     $186 = $pOrg;
     $187 = (($186) + ($185<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($188) - ($181))|0;
     HEAP32[$187>>2] = $189;
     $190 = $k;
     $191 = $j;
     $192 = (($190) + ($191))|0;
     $193 = (($192) + 2)|0;
     $194 = (($193) - 16)|0;
     $195 = $pOrg;
     $196 = (($195) + ($194<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = $k;
     $199 = $j;
     $200 = (($198) + ($199))|0;
     $201 = (($200) + 2)|0;
     $202 = $pOrg;
     $203 = (($202) + ($201<<2)|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (($204) - ($197))|0;
     HEAP32[$203>>2] = $205;
     $206 = $k;
     $207 = $j;
     $208 = (($206) + ($207))|0;
     $209 = (($208) + 9)|0;
     $210 = (($209) - 16)|0;
     $211 = $pOrg;
     $212 = (($211) + ($210<<2)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $k;
     $215 = $j;
     $216 = (($214) + ($215))|0;
     $217 = (($216) + 9)|0;
     $218 = $pOrg;
     $219 = (($218) + ($217<<2)|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = (($220) - ($213))|0;
     HEAP32[$219>>2] = $221;
     $222 = $j;
     $223 = (($222) - 16)|0;
     $j = $223;
    }
    $224 = $k;
    $225 = (($224) + 64)|0;
    $k = $225;
   }
  } else {
   $226 = $iACPredMode;
   $227 = ($226|0)==(0);
   if ($227) {
    $k = 0;
    while(1) {
     $228 = $k;
     $229 = ($228|0)<(64);
     if (!($229)) {
      break;
     }
     $j = 192;
     while(1) {
      $230 = $j;
      $231 = ($230|0)>(0);
      if (!($231)) {
       break;
      }
      $232 = $k;
      $233 = $j;
      $234 = (($232) + ($233))|0;
      $235 = (($234) + 5)|0;
      $236 = (($235) - 64)|0;
      $237 = $pOrg;
      $238 = (($237) + ($236<<2)|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = $k;
      $241 = $j;
      $242 = (($240) + ($241))|0;
      $243 = (($242) + 5)|0;
      $244 = $pOrg;
      $245 = (($244) + ($243<<2)|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = (($246) - ($239))|0;
      HEAP32[$245>>2] = $247;
      $248 = $k;
      $249 = $j;
      $250 = (($248) + ($249))|0;
      $251 = (($250) + 1)|0;
      $252 = (($251) - 64)|0;
      $253 = $pOrg;
      $254 = (($253) + ($252<<2)|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = $k;
      $257 = $j;
      $258 = (($256) + ($257))|0;
      $259 = (($258) + 1)|0;
      $260 = $pOrg;
      $261 = (($260) + ($259<<2)|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = (($262) - ($255))|0;
      HEAP32[$261>>2] = $263;
      $264 = $k;
      $265 = $j;
      $266 = (($264) + ($265))|0;
      $267 = (($266) + 6)|0;
      $268 = (($267) - 64)|0;
      $269 = $pOrg;
      $270 = (($269) + ($268<<2)|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = $k;
      $273 = $j;
      $274 = (($272) + ($273))|0;
      $275 = (($274) + 6)|0;
      $276 = $pOrg;
      $277 = (($276) + ($275<<2)|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = (($278) - ($271))|0;
      HEAP32[$277>>2] = $279;
      $280 = $j;
      $281 = (($280) - 64)|0;
      $j = $281;
     }
     $282 = $k;
     $283 = (($282) + 16)|0;
     $k = $283;
    }
   }
  }
  $284 = $i;
  $285 = (($284) + 1)|0;
  $i = $285;
 }
 $286 = $cf;
 $287 = ($286|0)==(1);
 if ($287) {
  $i = 1;
  while(1) {
   $288 = $i;
   $289 = ($288|0)<(3);
   if (!($289)) {
    break;
   }
   $290 = $i;
   $291 = $pMBInfo;
   $292 = (($291) + ($290<<6)|0);
   $pOrg = $292;
   $293 = $iDCPredMode;
   $294 = ($293|0)==(1);
   if ($294) {
    $295 = $i;
    $296 = $0;
    $297 = (($296) + 34956|0);
    $298 = (($297) + ($295<<2)|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = $mbX;
    $301 = (($299) + (($300*40)|0)|0);
    $302 = (($301) + 8|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $pOrg;
    $305 = HEAP32[$304>>2]|0;
    $306 = (($305) - ($303))|0;
    HEAP32[$304>>2] = $306;
   } else {
    $307 = $iDCPredMode;
    $308 = ($307|0)==(0);
    if ($308) {
     $309 = $i;
     $310 = $0;
     $311 = (($310) + 34892|0);
     $312 = (($311) + ($309<<2)|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $mbX;
     $315 = (($313) + (($314*40)|0)|0);
     $316 = (($315) + -40|0);
     $317 = (($316) + 8|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $pOrg;
     $320 = HEAP32[$319>>2]|0;
     $321 = (($320) - ($318))|0;
     HEAP32[$319>>2] = $321;
    } else {
     $322 = $iDCPredMode;
     $323 = ($322|0)==(2);
     if ($323) {
      $324 = $i;
      $325 = $0;
      $326 = (($325) + 34892|0);
      $327 = (($326) + ($324<<2)|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = $mbX;
      $330 = (($328) + (($329*40)|0)|0);
      $331 = (($330) + -40|0);
      $332 = (($331) + 8|0);
      $333 = HEAP32[$332>>2]|0;
      $334 = $i;
      $335 = $0;
      $336 = (($335) + 34956|0);
      $337 = (($336) + ($334<<2)|0);
      $338 = HEAP32[$337>>2]|0;
      $339 = $mbX;
      $340 = (($338) + (($339*40)|0)|0);
      $341 = (($340) + 8|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = (($333) + ($342))|0;
      $344 = (($343) + 1)|0;
      $345 = $344 >> 1;
      $346 = $pOrg;
      $347 = HEAP32[$346>>2]|0;
      $348 = (($347) - ($345))|0;
      HEAP32[$346>>2] = $348;
     }
    }
   }
   $349 = $iADPredMode;
   $350 = ($349|0)==(4);
   if ($350) {
    $351 = $i;
    $352 = $0;
    $353 = (($352) + 34956|0);
    $354 = (($353) + ($351<<2)|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = $mbX;
    $357 = (($355) + (($356*40)|0)|0);
    $358 = (($357) + 36|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = (($359) + 4|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = $pOrg;
    $363 = (($362) + 8|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = (($364) - ($361))|0;
    HEAP32[$363>>2] = $365;
   } else {
    $366 = $iADPredMode;
    $367 = ($366|0)==(0);
    if ($367) {
     $368 = $i;
     $369 = $0;
     $370 = (($369) + 34892|0);
     $371 = (($370) + ($368<<2)|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = $mbX;
     $374 = (($372) + (($373*40)|0)|0);
     $375 = (($374) + -40|0);
     $376 = (($375) + 36|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = HEAP32[$377>>2]|0;
     $379 = $pOrg;
     $380 = (($379) + 4|0);
     $381 = HEAP32[$380>>2]|0;
     $382 = (($381) - ($378))|0;
     HEAP32[$380>>2] = $382;
    }
   }
   $383 = $i;
   $384 = $0;
   $385 = (($384) + 34500|0);
   $386 = (($385) + ($383<<2)|0);
   $387 = HEAP32[$386>>2]|0;
   $pOrg = $387;
   $388 = $iACPredMode;
   $389 = ($388|0)==(1);
   if ($389) {
    $j = 16;
    while(1) {
     $390 = $j;
     $391 = ($390|0)<=(48);
     if (!($391)) {
      break;
     }
     $392 = $j;
     $393 = (($392) + 10)|0;
     $394 = (($393) - 16)|0;
     $395 = $pOrg;
     $396 = (($395) + ($394<<2)|0);
     $397 = HEAP32[$396>>2]|0;
     $398 = $j;
     $399 = (($398) + 10)|0;
     $400 = $pOrg;
     $401 = (($400) + ($399<<2)|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = (($402) - ($397))|0;
     HEAP32[$401>>2] = $403;
     $404 = $j;
     $405 = (($404) + 2)|0;
     $406 = (($405) - 16)|0;
     $407 = $pOrg;
     $408 = (($407) + ($406<<2)|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = $j;
     $411 = (($410) + 2)|0;
     $412 = $pOrg;
     $413 = (($412) + ($411<<2)|0);
     $414 = HEAP32[$413>>2]|0;
     $415 = (($414) - ($409))|0;
     HEAP32[$413>>2] = $415;
     $416 = $j;
     $417 = (($416) + 9)|0;
     $418 = (($417) - 16)|0;
     $419 = $pOrg;
     $420 = (($419) + ($418<<2)|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = $j;
     $423 = (($422) + 9)|0;
     $424 = $pOrg;
     $425 = (($424) + ($423<<2)|0);
     $426 = HEAP32[$425>>2]|0;
     $427 = (($426) - ($421))|0;
     HEAP32[$425>>2] = $427;
     $428 = $j;
     $429 = (($428) + 32)|0;
     $j = $429;
    }
   } else {
    $430 = $iACPredMode;
    $431 = ($430|0)==(0);
    if ($431) {
     $j = 32;
     while(1) {
      $432 = $j;
      $433 = ($432|0)<=(48);
      if (!($433)) {
       break;
      }
      $434 = $j;
      $435 = (($434) + 5)|0;
      $436 = (($435) - 32)|0;
      $437 = $pOrg;
      $438 = (($437) + ($436<<2)|0);
      $439 = HEAP32[$438>>2]|0;
      $440 = $j;
      $441 = (($440) + 5)|0;
      $442 = $pOrg;
      $443 = (($442) + ($441<<2)|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = (($444) - ($439))|0;
      HEAP32[$443>>2] = $445;
      $446 = $j;
      $447 = (($446) + 1)|0;
      $448 = (($447) - 32)|0;
      $449 = $pOrg;
      $450 = (($449) + ($448<<2)|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = $j;
      $453 = (($452) + 1)|0;
      $454 = $pOrg;
      $455 = (($454) + ($453<<2)|0);
      $456 = HEAP32[$455>>2]|0;
      $457 = (($456) - ($451))|0;
      HEAP32[$455>>2] = $457;
      $458 = $j;
      $459 = (($458) + 6)|0;
      $460 = (($459) - 32)|0;
      $461 = $pOrg;
      $462 = (($461) + ($460<<2)|0);
      $463 = HEAP32[$462>>2]|0;
      $464 = $j;
      $465 = (($464) + 6)|0;
      $466 = $pOrg;
      $467 = (($466) + ($465<<2)|0);
      $468 = HEAP32[$467>>2]|0;
      $469 = (($468) - ($463))|0;
      HEAP32[$467>>2] = $469;
      $470 = $j;
      $471 = (($470) + 16)|0;
      $j = $471;
     }
    }
   }
   $472 = $i;
   $473 = (($472) + 1)|0;
   $i = $473;
  }
  STACKTOP = sp;return;
 }
 $474 = $cf;
 $475 = ($474|0)==(2);
 if ($475) {
  $i = 1;
  while(1) {
   $476 = $i;
   $477 = ($476|0)<(3);
   if (!($477)) {
    break;
   }
   $478 = $i;
   $479 = $pMBInfo;
   $480 = (($479) + ($478<<6)|0);
   $pOrg = $480;
   $481 = $iDCPredMode;
   $482 = ($481|0)==(1);
   if ($482) {
    $483 = $i;
    $484 = $0;
    $485 = (($484) + 34956|0);
    $486 = (($485) + ($483<<2)|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = $mbX;
    $489 = (($487) + (($488*40)|0)|0);
    $490 = (($489) + 8|0);
    $491 = HEAP32[$490>>2]|0;
    $492 = $pOrg;
    $493 = HEAP32[$492>>2]|0;
    $494 = (($493) - ($491))|0;
    HEAP32[$492>>2] = $494;
   } else {
    $495 = $iDCPredMode;
    $496 = ($495|0)==(0);
    if ($496) {
     $497 = $i;
     $498 = $0;
     $499 = (($498) + 34892|0);
     $500 = (($499) + ($497<<2)|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = $mbX;
     $503 = (($501) + (($502*40)|0)|0);
     $504 = (($503) + -40|0);
     $505 = (($504) + 8|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = $pOrg;
     $508 = HEAP32[$507>>2]|0;
     $509 = (($508) - ($506))|0;
     HEAP32[$507>>2] = $509;
    } else {
     $510 = $iDCPredMode;
     $511 = ($510|0)==(2);
     if ($511) {
      $512 = $i;
      $513 = $0;
      $514 = (($513) + 34892|0);
      $515 = (($514) + ($512<<2)|0);
      $516 = HEAP32[$515>>2]|0;
      $517 = $mbX;
      $518 = (($516) + (($517*40)|0)|0);
      $519 = (($518) + -40|0);
      $520 = (($519) + 8|0);
      $521 = HEAP32[$520>>2]|0;
      $522 = $i;
      $523 = $0;
      $524 = (($523) + 34956|0);
      $525 = (($524) + ($522<<2)|0);
      $526 = HEAP32[$525>>2]|0;
      $527 = $mbX;
      $528 = (($526) + (($527*40)|0)|0);
      $529 = (($528) + 8|0);
      $530 = HEAP32[$529>>2]|0;
      $531 = (($521) + ($530))|0;
      $532 = (($531) + 1)|0;
      $533 = $532 >> 1;
      $534 = $pOrg;
      $535 = HEAP32[$534>>2]|0;
      $536 = (($535) - ($533))|0;
      HEAP32[$534>>2] = $536;
     }
    }
   }
   $537 = $iADPredMode;
   $538 = ($537|0)==(4);
   if ($538) {
    $539 = $i;
    $540 = $0;
    $541 = (($540) + 34956|0);
    $542 = (($541) + ($539<<2)|0);
    $543 = HEAP32[$542>>2]|0;
    $544 = $mbX;
    $545 = (($543) + (($544*40)|0)|0);
    $546 = (($545) + 36|0);
    $547 = HEAP32[$546>>2]|0;
    $548 = (($547) + 16|0);
    $549 = HEAP32[$548>>2]|0;
    $550 = $pOrg;
    $551 = (($550) + 16|0);
    $552 = HEAP32[$551>>2]|0;
    $553 = (($552) - ($549))|0;
    HEAP32[$551>>2] = $553;
    $554 = $pOrg;
    $555 = (($554) + 8|0);
    $556 = HEAP32[$555>>2]|0;
    $557 = $pOrg;
    $558 = (($557) + 24|0);
    $559 = HEAP32[$558>>2]|0;
    $560 = (($559) - ($556))|0;
    HEAP32[$558>>2] = $560;
    $561 = $i;
    $562 = $0;
    $563 = (($562) + 34956|0);
    $564 = (($563) + ($561<<2)|0);
    $565 = HEAP32[$564>>2]|0;
    $566 = $mbX;
    $567 = (($565) + (($566*40)|0)|0);
    $568 = (($567) + 36|0);
    $569 = HEAP32[$568>>2]|0;
    $570 = (($569) + 12|0);
    $571 = HEAP32[$570>>2]|0;
    $572 = $pOrg;
    $573 = (($572) + 8|0);
    $574 = HEAP32[$573>>2]|0;
    $575 = (($574) - ($571))|0;
    HEAP32[$573>>2] = $575;
   } else {
    $576 = $iADPredMode;
    $577 = ($576|0)==(0);
    if ($577) {
     $578 = $i;
     $579 = $0;
     $580 = (($579) + 34892|0);
     $581 = (($580) + ($578<<2)|0);
     $582 = HEAP32[$581>>2]|0;
     $583 = $mbX;
     $584 = (($582) + (($583*40)|0)|0);
     $585 = (($584) + -40|0);
     $586 = (($585) + 36|0);
     $587 = HEAP32[$586>>2]|0;
     $588 = (($587) + 16|0);
     $589 = HEAP32[$588>>2]|0;
     $590 = $pOrg;
     $591 = (($590) + 16|0);
     $592 = HEAP32[$591>>2]|0;
     $593 = (($592) - ($589))|0;
     HEAP32[$591>>2] = $593;
     $594 = $i;
     $595 = $0;
     $596 = (($595) + 34892|0);
     $597 = (($596) + ($594<<2)|0);
     $598 = HEAP32[$597>>2]|0;
     $599 = $mbX;
     $600 = (($598) + (($599*40)|0)|0);
     $601 = (($600) + -40|0);
     $602 = (($601) + 36|0);
     $603 = HEAP32[$602>>2]|0;
     $604 = HEAP32[$603>>2]|0;
     $605 = $pOrg;
     $606 = (($605) + 4|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = (($607) - ($604))|0;
     HEAP32[$606>>2] = $608;
     $609 = $i;
     $610 = $0;
     $611 = (($610) + 34892|0);
     $612 = (($611) + ($609<<2)|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = $mbX;
     $615 = (($613) + (($614*40)|0)|0);
     $616 = (($615) + -40|0);
     $617 = (($616) + 36|0);
     $618 = HEAP32[$617>>2]|0;
     $619 = (($618) + 8|0);
     $620 = HEAP32[$619>>2]|0;
     $621 = $pOrg;
     $622 = (($621) + 20|0);
     $623 = HEAP32[$622>>2]|0;
     $624 = (($623) - ($620))|0;
     HEAP32[$622>>2] = $624;
    } else {
     $625 = $iDCPredMode;
     $626 = ($625|0)==(1);
     if ($626) {
      $627 = $pOrg;
      $628 = (($627) + 8|0);
      $629 = HEAP32[$628>>2]|0;
      $630 = $pOrg;
      $631 = (($630) + 24|0);
      $632 = HEAP32[$631>>2]|0;
      $633 = (($632) - ($629))|0;
      HEAP32[$631>>2] = $633;
     }
    }
   }
   $634 = $i;
   $635 = $0;
   $636 = (($635) + 34500|0);
   $637 = (($636) + ($634<<2)|0);
   $638 = HEAP32[$637>>2]|0;
   $pOrg = $638;
   $639 = $iACPredMode;
   $640 = ($639|0)==(1);
   if ($640) {
    $j = 48;
    while(1) {
     $641 = $j;
     $642 = ($641|0)>(0);
     if (!($642)) {
      break;
     }
     $k = 0;
     while(1) {
      $643 = $k;
      $644 = ($643|0)<=(64);
      if (!($644)) {
       break;
      }
      $645 = $j;
      $646 = $k;
      $647 = (($645) + ($646))|0;
      $648 = (($647) + 10)|0;
      $649 = (($648) - 16)|0;
      $650 = $pOrg;
      $651 = (($650) + ($649<<2)|0);
      $652 = HEAP32[$651>>2]|0;
      $653 = $j;
      $654 = $k;
      $655 = (($653) + ($654))|0;
      $656 = (($655) + 10)|0;
      $657 = $pOrg;
      $658 = (($657) + ($656<<2)|0);
      $659 = HEAP32[$658>>2]|0;
      $660 = (($659) - ($652))|0;
      HEAP32[$658>>2] = $660;
      $661 = $j;
      $662 = $k;
      $663 = (($661) + ($662))|0;
      $664 = (($663) + 2)|0;
      $665 = (($664) - 16)|0;
      $666 = $pOrg;
      $667 = (($666) + ($665<<2)|0);
      $668 = HEAP32[$667>>2]|0;
      $669 = $j;
      $670 = $k;
      $671 = (($669) + ($670))|0;
      $672 = (($671) + 2)|0;
      $673 = $pOrg;
      $674 = (($673) + ($672<<2)|0);
      $675 = HEAP32[$674>>2]|0;
      $676 = (($675) - ($668))|0;
      HEAP32[$674>>2] = $676;
      $677 = $j;
      $678 = $k;
      $679 = (($677) + ($678))|0;
      $680 = (($679) + 9)|0;
      $681 = (($680) - 16)|0;
      $682 = $pOrg;
      $683 = (($682) + ($681<<2)|0);
      $684 = HEAP32[$683>>2]|0;
      $685 = $j;
      $686 = $k;
      $687 = (($685) + ($686))|0;
      $688 = (($687) + 9)|0;
      $689 = $pOrg;
      $690 = (($689) + ($688<<2)|0);
      $691 = HEAP32[$690>>2]|0;
      $692 = (($691) - ($684))|0;
      HEAP32[$690>>2] = $692;
      $693 = $k;
      $694 = (($693) + 64)|0;
      $k = $694;
     }
     $695 = $j;
     $696 = (($695) - 16)|0;
     $j = $696;
    }
   } else {
    $697 = $iACPredMode;
    $698 = ($697|0)==(0);
    if ($698) {
     $j = 64;
     while(1) {
      $699 = $j;
      $700 = ($699|0)<=(112);
      if (!($700)) {
       break;
      }
      $701 = $j;
      $702 = (($701) + 5)|0;
      $703 = (($702) - 64)|0;
      $704 = $pOrg;
      $705 = (($704) + ($703<<2)|0);
      $706 = HEAP32[$705>>2]|0;
      $707 = $j;
      $708 = (($707) + 5)|0;
      $709 = $pOrg;
      $710 = (($709) + ($708<<2)|0);
      $711 = HEAP32[$710>>2]|0;
      $712 = (($711) - ($706))|0;
      HEAP32[$710>>2] = $712;
      $713 = $j;
      $714 = (($713) + 1)|0;
      $715 = (($714) - 64)|0;
      $716 = $pOrg;
      $717 = (($716) + ($715<<2)|0);
      $718 = HEAP32[$717>>2]|0;
      $719 = $j;
      $720 = (($719) + 1)|0;
      $721 = $pOrg;
      $722 = (($721) + ($720<<2)|0);
      $723 = HEAP32[$722>>2]|0;
      $724 = (($723) - ($718))|0;
      HEAP32[$722>>2] = $724;
      $725 = $j;
      $726 = (($725) + 6)|0;
      $727 = (($726) - 64)|0;
      $728 = $pOrg;
      $729 = (($728) + ($727<<2)|0);
      $730 = HEAP32[$729>>2]|0;
      $731 = $j;
      $732 = (($731) + 6)|0;
      $733 = $pOrg;
      $734 = (($733) + ($732<<2)|0);
      $735 = HEAP32[$734>>2]|0;
      $736 = (($735) - ($730))|0;
      HEAP32[$734>>2] = $736;
      $737 = $j;
      $738 = (($737) + 16)|0;
      $j = $738;
     }
    }
   }
   $739 = $i;
   $740 = (($739) + 1)|0;
   $i = $740;
  }
 }
 STACKTOP = sp;return;
}
function _predCBPEnc($pSC,$pContext) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bUV = 0, $cf = 0, $i = 0, $iCBP = 0, $iChannel = 0, $iNumBlock = 0, $j = 0;
 var $mbX = 0, $mbY = 0, $pData = 0, $pMBInfo = 0, $pOffset = 0, $threshold = 0, $threshold2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pContext;
 $2 = $0;
 $3 = (($2) + 34360|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - 1)|0;
 $mbX = $5;
 $6 = $0;
 $7 = (($6) + 34356|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 $mbY = $9;
 $10 = $0;
 $11 = (($10) + 32976|0);
 $pMBInfo = $11;
 $iChannel = 0;
 while(1) {
  $12 = $iChannel;
  $13 = $0;
  $14 = (($13) + 34136|0);
  $15 = (($14) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($12|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $0;
  $19 = (($18) + 34136|0);
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $cf = $21;
  $22 = $iChannel;
  $23 = ($22|0)>(0);
  $24 = $23&1;
  $bUV = $24;
  $25 = $bUV;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $cf;
   $28 = ($27|0)==(2);
   if ($28) {
    $152 = 8;
   } else {
    $29 = $cf;
    $30 = ($29|0)==(1);
    $31 = $30 ? 4 : 16;
    $152 = $31;
   }
   $32 = $152;
  } else {
   $32 = 16;
  }
  $iNumBlock = $32;
  $33 = $iNumBlock;
  $34 = ($33|0)==(4);
  if ($34) {
   $38 = 14000;
  } else {
   $35 = $iNumBlock;
   $36 = ($35|0)==(8);
   $37 = $36 ? 14016 : 13936;
   $38 = $37;
  }
  $pOffset = $38;
  $39 = $bUV;
  $40 = ($39|0)!=(0);
  $41 = $40 ? 1 : 0;
  $42 = $1;
  $43 = (($42) + 492|0);
  $44 = (($43) + 8|0);
  $45 = (($44) + ($41<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = 1 << $46;
  $48 = (($47) - 1)|0;
  $threshold = $48;
  $49 = $threshold;
  $50 = $49<<1;
  $51 = (($50) + 1)|0;
  $threshold2 = $51;
  $iCBP = 0;
  $j = 0;
  while(1) {
   $52 = $j;
   $53 = $iNumBlock;
   $54 = ($52|0)<($53|0);
   if (!($54)) {
    break;
   }
   $55 = $iChannel;
   $56 = $0;
   $57 = (($56) + 34500|0);
   $58 = (($57) + ($55<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $j;
   $61 = $pOffset;
   $62 = (($61) + ($60<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($59) + ($63<<2)|0);
   $pData = $64;
   $i = 1;
   while(1) {
    $65 = $i;
    $66 = ($65|0)<(16);
    if (!($66)) {
     break;
    }
    $67 = $i;
    $68 = $pData;
    $69 = (($68) + ($67<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $threshold;
    $72 = (($70) + ($71))|0;
    $73 = $threshold2;
    $74 = ($72>>>0)>=($73>>>0);
    if ($74) {
     label = 17;
     break;
    }
    $79 = $i;
    $80 = (($79) + 1)|0;
    $i = $80;
   }
   if ((label|0) == 17) {
    label = 0;
    $75 = $j;
    $76 = 1 << $75;
    $77 = $iCBP;
    $78 = $77 | $76;
    $iCBP = $78;
   }
   $81 = $j;
   $82 = (($81) + 1)|0;
   $j = $82;
  }
  $83 = $iCBP;
  $84 = $iChannel;
  $85 = $0;
  $86 = (($85) + 34892|0);
  $87 = (($86) + ($84<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $mbX;
  $90 = (($88) + (($89*40)|0)|0);
  $91 = (($90) + 4|0);
  HEAP32[$91>>2] = $83;
  $92 = $iChannel;
  $93 = $pMBInfo;
  $94 = (($93) + 1028|0);
  $95 = (($94) + ($92<<2)|0);
  HEAP32[$95>>2] = $83;
  $96 = $iNumBlock;
  $97 = ($96|0)==(16);
  if ($97) {
   $98 = $0;
   $99 = $iChannel;
   $100 = $pMBInfo;
   $101 = (($100) + 1028|0);
   $102 = (($101) + ($99<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $mbX;
   $105 = $mbY;
   $106 = $iChannel;
   $107 = $1;
   $108 = (($107) + 560|0);
   $109 = (_predCBPCEnc($98,$103,$104,$105,$106,$108)|0);
   $110 = $iChannel;
   $111 = $pMBInfo;
   $112 = (($111) + 1092|0);
   $113 = (($112) + ($110<<2)|0);
   HEAP32[$113>>2] = $109;
  } else {
   $114 = $iNumBlock;
   $115 = ($114|0)==(8);
   if ($115) {
    $116 = $0;
    $117 = $iChannel;
    $118 = $pMBInfo;
    $119 = (($118) + 1028|0);
    $120 = (($119) + ($117<<2)|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $mbX;
    $123 = $mbY;
    $124 = $iChannel;
    $125 = $1;
    $126 = (($125) + 560|0);
    $127 = (_predCBPC422Enc($116,$121,$122,$123,$124,$126)|0);
    $128 = $iChannel;
    $129 = $0;
    $130 = (($129) + 32976|0);
    $131 = (($130) + 1092|0);
    $132 = (($131) + ($128<<2)|0);
    HEAP32[$132>>2] = $127;
   } else {
    $133 = $0;
    $134 = $iChannel;
    $135 = $pMBInfo;
    $136 = (($135) + 1028|0);
    $137 = (($136) + ($134<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $mbX;
    $140 = $mbY;
    $141 = $iChannel;
    $142 = $1;
    $143 = (($142) + 560|0);
    $144 = (_predCBPC420Enc($133,$138,$139,$140,$141,$143)|0);
    $145 = $iChannel;
    $146 = $0;
    $147 = (($146) + 32976|0);
    $148 = (($147) + 1092|0);
    $149 = (($148) + ($145<<2)|0);
    HEAP32[$149>>2] = $144;
   }
  }
  $150 = $iChannel;
  $151 = (($150) + 1)|0;
  $iChannel = $151;
 }
 STACKTOP = sp;return;
}
function _predCBPCEnc($pSC,$iCBP,$mbX,$mbY,$c,$pModel) {
 $pSC = $pSC|0;
 $iCBP = $iCBP|0;
 $mbX = $mbX|0;
 $mbY = $mbY|0;
 $c = $c|0;
 $pModel = $pModel|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $iLeftCBP = 0, $iNDiff = 0, $iNOrig = 0, $iPredCBP = 0, $iRetval = 0, $iTopCBP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $iCBP;
 $2 = $mbX;
 $3 = $mbY;
 $4 = $c;
 $5 = $pModel;
 $iPredCBP = 0;
 $iRetval = 0;
 $6 = $1;
 $7 = (_NumOnes($6)|0);
 $iNOrig = $7;
 $iNDiff = 3;
 $8 = $3;
 $3 = $8;
 $9 = $0;
 $10 = (($9) + 34300|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = (($13) + 34304|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $iPredCBP = 1;
  } else {
   $17 = $4;
   $18 = $0;
   $19 = (($18) + 34956|0);
   $20 = (($19) + ($17<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $2;
   $23 = (($21) + (($22*40)|0)|0);
   $24 = (($23) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $iTopCBP = $25;
   $26 = $iTopCBP;
   $27 = $26 >> 10;
   $28 = $27 & 1;
   $iPredCBP = $28;
  }
 } else {
  $29 = $4;
  $30 = $0;
  $31 = (($30) + 34892|0);
  $32 = (($31) + ($29<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $2;
  $35 = (($33) + (($34*40)|0)|0);
  $36 = (($35) + -40|0);
  $37 = (($36) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $iLeftCBP = $38;
  $39 = $iLeftCBP;
  $40 = $39 >> 5;
  $41 = $40 & 1;
  $iPredCBP = $41;
 }
 $42 = $1;
 $43 = $42 & 13056;
 $44 = $43 << 2;
 $45 = $iPredCBP;
 $46 = $45 | $44;
 $iPredCBP = $46;
 $47 = $1;
 $48 = $47 & 204;
 $49 = $48 << 6;
 $50 = $iPredCBP;
 $51 = $50 | $49;
 $iPredCBP = $51;
 $52 = $1;
 $53 = $52 & 51;
 $54 = $53 << 2;
 $55 = $iPredCBP;
 $56 = $55 | $54;
 $iPredCBP = $56;
 $57 = $1;
 $58 = $57 & 17;
 $59 = $58 << 1;
 $60 = $iPredCBP;
 $61 = $60 | $59;
 $iPredCBP = $61;
 $62 = $1;
 $63 = $62 & 2;
 $64 = $63 << 3;
 $65 = $iPredCBP;
 $66 = $65 | $64;
 $iPredCBP = $66;
 $67 = $4;
 $68 = ($67|0)!=(0);
 if ($68) {
  $4 = 1;
 }
 $69 = $4;
 $70 = $5;
 $71 = (($70) + 16|0);
 $72 = (($71) + ($69<<2)|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0);
 if ($74) {
  $75 = $iPredCBP;
  $76 = $1;
  $77 = $75 ^ $76;
  $iRetval = $77;
 } else {
  $78 = $4;
  $79 = $5;
  $80 = (($79) + 16|0);
  $81 = (($80) + ($78<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)==(1);
  if ($83) {
   $84 = $1;
   $iRetval = $84;
  } else {
   $85 = $1;
   $86 = $85 ^ 65535;
   $iRetval = $86;
  }
 }
 $87 = $iNOrig;
 $88 = $iNDiff;
 $89 = (($87) - ($88))|0;
 $90 = $4;
 $91 = $5;
 $92 = (($91) + ($90<<2)|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($89))|0;
 HEAP32[$92>>2] = $94;
 $95 = $4;
 $96 = $5;
 $97 = (($96) + ($95<<2)|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($98) + 16)|0;
 $100 = ($99>>>0)>=(32);
 if ($100) {
  $101 = $4;
  $102 = $5;
  $103 = (($102) + ($101<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)<(0);
  if ($105) {
   $106 = $4;
   $107 = $5;
   $108 = (($107) + ($106<<2)|0);
   HEAP32[$108>>2] = -16;
  } else {
   $109 = $4;
   $110 = $5;
   $111 = (($110) + ($109<<2)|0);
   HEAP32[$111>>2] = 15;
  }
 }
 $112 = $iNOrig;
 $113 = (16 - ($112))|0;
 $114 = $iNDiff;
 $115 = (($113) - ($114))|0;
 $116 = $4;
 $117 = $5;
 $118 = (($117) + 8|0);
 $119 = (($118) + ($116<<2)|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + ($115))|0;
 HEAP32[$119>>2] = $121;
 $122 = $4;
 $123 = $5;
 $124 = (($123) + 8|0);
 $125 = (($124) + ($122<<2)|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (($126) + 16)|0;
 $128 = ($127>>>0)>=(32);
 if ($128) {
  $129 = $4;
  $130 = $5;
  $131 = (($130) + 8|0);
  $132 = (($131) + ($129<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)<(0);
  if ($134) {
   $135 = $4;
   $136 = $5;
   $137 = (($136) + 8|0);
   $138 = (($137) + ($135<<2)|0);
   HEAP32[$138>>2] = -16;
  } else {
   $139 = $4;
   $140 = $5;
   $141 = (($140) + 8|0);
   $142 = (($141) + ($139<<2)|0);
   HEAP32[$142>>2] = 15;
  }
 }
 $143 = $4;
 $144 = $5;
 $145 = (($144) + ($143<<2)|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)<(0);
 if ($147) {
  $148 = $4;
  $149 = $5;
  $150 = (($149) + ($148<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $4;
  $153 = $5;
  $154 = (($153) + 8|0);
  $155 = (($154) + ($152<<2)|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($151|0)<($156|0);
  if ($157) {
   $158 = $4;
   $159 = $5;
   $160 = (($159) + 16|0);
   $161 = (($160) + ($158<<2)|0);
   HEAP32[$161>>2] = 1;
  } else {
   $162 = $4;
   $163 = $5;
   $164 = (($163) + 16|0);
   $165 = (($164) + ($162<<2)|0);
   HEAP32[$165>>2] = 2;
  }
  $180 = $iRetval;
  STACKTOP = sp;return ($180|0);
 } else {
  $166 = $4;
  $167 = $5;
  $168 = (($167) + 8|0);
  $169 = (($168) + ($166<<2)|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($170|0)<(0);
  if ($171) {
   $172 = $4;
   $173 = $5;
   $174 = (($173) + 16|0);
   $175 = (($174) + ($172<<2)|0);
   HEAP32[$175>>2] = 2;
  } else {
   $176 = $4;
   $177 = $5;
   $178 = (($177) + 16|0);
   $179 = (($178) + ($176<<2)|0);
   HEAP32[$179>>2] = 0;
  }
  $180 = $iRetval;
  STACKTOP = sp;return ($180|0);
 }
 return 0|0;
}
function _predCBPC422Enc($pSC,$iCBP,$mbX,$mbY,$c,$pModel) {
 $pSC = $pSC|0;
 $iCBP = $iCBP|0;
 $mbX = $mbX|0;
 $mbY = $mbY|0;
 $c = $c|0;
 $pModel = $pModel|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iLeftCBP = 0, $iNDiff = 0, $iNOrig = 0, $iPredCBP = 0, $iRetval = 0;
 var $iTopCBP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $iCBP;
 $2 = $mbX;
 $3 = $mbY;
 $4 = $c;
 $5 = $pModel;
 $iPredCBP = 0;
 $iRetval = 0;
 $6 = $1;
 $7 = (_NumOnes($6)|0);
 $8 = $7<<1;
 $iNOrig = $8;
 $iNDiff = 3;
 $9 = $3;
 $3 = $9;
 $10 = $0;
 $11 = (($10) + 34300|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $0;
  $15 = (($14) + 34304|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $iPredCBP = 1;
  } else {
   $18 = $4;
   $19 = $0;
   $20 = (($19) + 34956|0);
   $21 = (($20) + ($18<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $2;
   $24 = (($22) + (($23*40)|0)|0);
   $25 = (($24) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $iTopCBP = $26;
   $27 = $iTopCBP;
   $28 = $27 >> 6;
   $29 = $28 & 1;
   $iPredCBP = $29;
  }
 } else {
  $30 = $4;
  $31 = $0;
  $32 = (($31) + 34892|0);
  $33 = (($32) + ($30<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $2;
  $36 = (($34) + (($35*40)|0)|0);
  $37 = (($36) + -40|0);
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $iLeftCBP = $39;
  $40 = $iLeftCBP;
  $41 = $40 >> 1;
  $42 = $41 & 1;
  $iPredCBP = $42;
 }
 $43 = $1;
 $44 = $43 & 1;
 $45 = $44 << 1;
 $46 = $iPredCBP;
 $47 = $46 | $45;
 $iPredCBP = $47;
 $48 = $1;
 $49 = $48 & 3;
 $50 = $49 << 2;
 $51 = $iPredCBP;
 $52 = $51 | $50;
 $iPredCBP = $52;
 $53 = $1;
 $54 = $53 & 12;
 $55 = $54 << 2;
 $56 = $iPredCBP;
 $57 = $56 | $55;
 $iPredCBP = $57;
 $58 = $1;
 $59 = $58 & 48;
 $60 = $59 << 2;
 $61 = $iPredCBP;
 $62 = $61 | $60;
 $iPredCBP = $62;
 $63 = $5;
 $64 = (($63) + 16|0);
 $65 = (($64) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(0);
 if ($67) {
  $68 = $iPredCBP;
  $69 = $1;
  $70 = $68 ^ $69;
  $iRetval = $70;
 } else {
  $71 = $5;
  $72 = (($71) + 16|0);
  $73 = (($72) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)==(1);
  if ($75) {
   $76 = $1;
   $iRetval = $76;
  } else {
   $77 = $1;
   $78 = $77 ^ 255;
   $iRetval = $78;
  }
 }
 $79 = $iNOrig;
 $80 = $iNDiff;
 $81 = (($79) - ($80))|0;
 $82 = $5;
 $83 = (($82) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($81))|0;
 HEAP32[$83>>2] = $85;
 $86 = $5;
 $87 = (($86) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 16)|0;
 $90 = ($89>>>0)>=(32);
 if ($90) {
  $91 = $5;
  $92 = (($91) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)<(0);
  if ($94) {
   $95 = $5;
   $96 = (($95) + 4|0);
   HEAP32[$96>>2] = -16;
  } else {
   $97 = $5;
   $98 = (($97) + 4|0);
   HEAP32[$98>>2] = 15;
  }
 }
 $99 = $iNOrig;
 $100 = (16 - ($99))|0;
 $101 = $iNDiff;
 $102 = (($100) - ($101))|0;
 $103 = $5;
 $104 = (($103) + 8|0);
 $105 = (($104) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + ($102))|0;
 HEAP32[$105>>2] = $107;
 $108 = $5;
 $109 = (($108) + 8|0);
 $110 = (($109) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (($111) + 16)|0;
 $113 = ($112>>>0)>=(32);
 if ($113) {
  $114 = $5;
  $115 = (($114) + 8|0);
  $116 = (($115) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($117|0)<(0);
  if ($118) {
   $119 = $5;
   $120 = (($119) + 8|0);
   $121 = (($120) + 4|0);
   HEAP32[$121>>2] = -16;
  } else {
   $122 = $5;
   $123 = (($122) + 8|0);
   $124 = (($123) + 4|0);
   HEAP32[$124>>2] = 15;
  }
 }
 $125 = $5;
 $126 = (($125) + 4|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)<(0);
 if ($128) {
  $129 = $5;
  $130 = (($129) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $5;
  $133 = (($132) + 8|0);
  $134 = (($133) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($131|0)<($135|0);
  if ($136) {
   $137 = $5;
   $138 = (($137) + 16|0);
   $139 = (($138) + 4|0);
   HEAP32[$139>>2] = 1;
  } else {
   $140 = $5;
   $141 = (($140) + 16|0);
   $142 = (($141) + 4|0);
   HEAP32[$142>>2] = 2;
  }
  $154 = $iRetval;
  STACKTOP = sp;return ($154|0);
 } else {
  $143 = $5;
  $144 = (($143) + 8|0);
  $145 = (($144) + 4|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($146|0)<(0);
  if ($147) {
   $148 = $5;
   $149 = (($148) + 16|0);
   $150 = (($149) + 4|0);
   HEAP32[$150>>2] = 2;
  } else {
   $151 = $5;
   $152 = (($151) + 16|0);
   $153 = (($152) + 4|0);
   HEAP32[$153>>2] = 0;
  }
  $154 = $iRetval;
  STACKTOP = sp;return ($154|0);
 }
 return 0|0;
}
function _predCBPC420Enc($pSC,$iCBP,$mbX,$mbY,$c,$pModel) {
 $pSC = $pSC|0;
 $iCBP = $iCBP|0;
 $mbX = $mbX|0;
 $mbY = $mbY|0;
 $c = $c|0;
 $pModel = $pModel|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iLeftCBP = 0, $iNDiff = 0, $iNOrig = 0, $iPredCBP = 0, $iRetval = 0, $iTopCBP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $iCBP;
 $2 = $mbX;
 $3 = $mbY;
 $4 = $c;
 $5 = $pModel;
 $iPredCBP = 0;
 $iRetval = 0;
 $6 = $1;
 $7 = (_NumOnes($6)|0);
 $8 = $7<<2;
 $iNOrig = $8;
 $iNDiff = 3;
 $9 = $3;
 $3 = $9;
 $10 = $0;
 $11 = (($10) + 34300|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $0;
  $15 = (($14) + 34304|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $iPredCBP = 1;
  } else {
   $18 = $4;
   $19 = $0;
   $20 = (($19) + 34956|0);
   $21 = (($20) + ($18<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $2;
   $24 = (($22) + (($23*40)|0)|0);
   $25 = (($24) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $iTopCBP = $26;
   $27 = $iTopCBP;
   $28 = $27 >> 2;
   $29 = $28 & 1;
   $iPredCBP = $29;
  }
 } else {
  $30 = $4;
  $31 = $0;
  $32 = (($31) + 34892|0);
  $33 = (($32) + ($30<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $2;
  $36 = (($34) + (($35*40)|0)|0);
  $37 = (($36) + -40|0);
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $iLeftCBP = $39;
  $40 = $iLeftCBP;
  $41 = $40 >> 1;
  $42 = $41 & 1;
  $iPredCBP = $42;
 }
 $43 = $1;
 $44 = $43 & 1;
 $45 = $44 << 1;
 $46 = $iPredCBP;
 $47 = $46 | $45;
 $iPredCBP = $47;
 $48 = $1;
 $49 = $48 & 3;
 $50 = $49 << 2;
 $51 = $iPredCBP;
 $52 = $51 | $50;
 $iPredCBP = $52;
 $53 = $5;
 $54 = (($53) + 16|0);
 $55 = (($54) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0);
 if ($57) {
  $58 = $iPredCBP;
  $59 = $1;
  $60 = $58 ^ $59;
  $iRetval = $60;
 } else {
  $61 = $5;
  $62 = (($61) + 16|0);
  $63 = (($62) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(1);
  if ($65) {
   $66 = $1;
   $iRetval = $66;
  } else {
   $67 = $1;
   $68 = $67 ^ 15;
   $iRetval = $68;
  }
 }
 $69 = $iNOrig;
 $70 = $iNDiff;
 $71 = (($69) - ($70))|0;
 $72 = $5;
 $73 = (($72) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($71))|0;
 HEAP32[$73>>2] = $75;
 $76 = $5;
 $77 = (($76) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + 16)|0;
 $80 = ($79>>>0)>=(32);
 if ($80) {
  $81 = $5;
  $82 = (($81) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)<(0);
  if ($84) {
   $85 = $5;
   $86 = (($85) + 4|0);
   HEAP32[$86>>2] = -16;
  } else {
   $87 = $5;
   $88 = (($87) + 4|0);
   HEAP32[$88>>2] = 15;
  }
 }
 $89 = $iNOrig;
 $90 = (16 - ($89))|0;
 $91 = $iNDiff;
 $92 = (($90) - ($91))|0;
 $93 = $5;
 $94 = (($93) + 8|0);
 $95 = (($94) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + ($92))|0;
 HEAP32[$95>>2] = $97;
 $98 = $5;
 $99 = (($98) + 8|0);
 $100 = (($99) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + 16)|0;
 $103 = ($102>>>0)>=(32);
 if ($103) {
  $104 = $5;
  $105 = (($104) + 8|0);
  $106 = (($105) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)<(0);
  if ($108) {
   $109 = $5;
   $110 = (($109) + 8|0);
   $111 = (($110) + 4|0);
   HEAP32[$111>>2] = -16;
  } else {
   $112 = $5;
   $113 = (($112) + 8|0);
   $114 = (($113) + 4|0);
   HEAP32[$114>>2] = 15;
  }
 }
 $115 = $5;
 $116 = (($115) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)<(0);
 if ($118) {
  $119 = $5;
  $120 = (($119) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $5;
  $123 = (($122) + 8|0);
  $124 = (($123) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($121|0)<($125|0);
  if ($126) {
   $127 = $5;
   $128 = (($127) + 16|0);
   $129 = (($128) + 4|0);
   HEAP32[$129>>2] = 1;
  } else {
   $130 = $5;
   $131 = (($130) + 16|0);
   $132 = (($131) + 4|0);
   HEAP32[$132>>2] = 2;
  }
  $144 = $iRetval;
  STACKTOP = sp;return ($144|0);
 } else {
  $133 = $5;
  $134 = (($133) + 8|0);
  $135 = (($134) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($136|0)<(0);
  if ($137) {
   $138 = $5;
   $139 = (($138) + 16|0);
   $140 = (($139) + 4|0);
   HEAP32[$140>>2] = 2;
  } else {
   $141 = $5;
   $142 = (($141) + 16|0);
   $143 = (($142) + 4|0);
   HEAP32[$143>>2] = 0;
  }
  $144 = $iRetval;
  STACKTOP = sp;return ($144|0);
 }
 return 0|0;
}
function _NumOnes($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $retval = 0;
 $1 = $0;
 $2 = $1 & 65535;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $5 & 15;
  $7 = (7408 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $retval;
  $10 = (($9) + ($8))|0;
  $retval = $10;
  $11 = $0;
  $12 = $11 >> 4;
  $0 = $12;
 }
 $13 = $retval;
 STACKTOP = sp;return ($13|0);
}
function _AllocateCodingContextsDec($pSC,$iNumContexts) {
 $pSC = $pSC|0;
 $iNumContexts = $iNumContexts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $i = 0, $iCBPSize = 0, $k = 0, $pCodingContexts = 0, $pContext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $iNumContexts;
 $3 = $2;
 $4 = ($3|0)>(4096);
 if (!($4)) {
  $5 = $2;
  $6 = ($5|0)<(1);
  if (!($6)) {
   $7 = $1;
   $8 = (0|0)==($7|0);
   if ($8) {
    $0 = 0;
    $72 = $0;
    STACKTOP = sp;return ($72|0);
   }
   $9 = $2;
   $10 = ($9*592)|0;
   $11 = (_malloc($10)|0);
   $pCodingContexts = $11;
   $12 = $pCodingContexts;
   $13 = (0|0)==($12|0);
   if ($13) {
    $0 = 0;
    $72 = $0;
    STACKTOP = sp;return ($72|0);
   }
   $14 = $pCodingContexts;
   $15 = $2;
   $16 = ($15*592)|0;
   _memset(($14|0),0,($16|0))|0;
   $17 = $1;
   $18 = (($17) + 34136|0);
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   if ($21) {
    $33 = 1;
   } else {
    $22 = $1;
    $23 = (($22) + 34136|0);
    $24 = (($23) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(6);
    if ($26) {
     $33 = 1;
    } else {
     $27 = $1;
     $28 = (($27) + 34136|0);
     $29 = (($28) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(4);
     $33 = $31;
    }
   }
   $32 = $33 ? 5 : 9;
   $iCBPSize = $32;
   $i = 0;
   L16: while(1) {
    $34 = $i;
    $35 = $2;
    $36 = ($34|0)<($35|0);
    if (!($36)) {
     label = 25;
     break;
    }
    $37 = $i;
    $38 = $pCodingContexts;
    $39 = (($38) + (($37*592)|0)|0);
    $pContext = $39;
    $40 = $pContext;
    $41 = (($40) + 16|0);
    $42 = $iCBPSize;
    $43 = (_InitializeAH($41,$42)|0);
    $44 = ($43|0)!=(0);
    if ($44) {
     label = 14;
     break;
    }
    $47 = $pContext;
    $48 = (($47) + 20|0);
    $49 = (_InitializeAH($48,5)|0);
    $50 = ($49|0)!=(0);
    if ($50) {
     label = 16;
     break;
    }
    $k = 0;
    while(1) {
     $53 = $k;
     $54 = ($53|0)<(21);
     if (!($54)) {
      break;
     }
     $55 = $k;
     $56 = $pContext;
     $57 = (($56) + 24|0);
     $58 = (($57) + ($55<<2)|0);
     $59 = $k;
     $60 = (7472 + ($59<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (_InitializeAH($58,$61)|0);
     $63 = ($62|0)!=(0);
     if ($63) {
      label = 20;
      break L16;
     }
     $66 = $k;
     $67 = (($66) + 1)|0;
     $k = $67;
    }
    $68 = $pContext;
    _ResetCodingContextDec($68);
    $69 = $i;
    $70 = (($69) + 1)|0;
    $i = $70;
   }
   if ((label|0) == 14) {
    $45 = $pCodingContexts;
    $46 = $2;
    _FreeCodingContextsDec($45,$46);
    $0 = 0;
    $72 = $0;
    STACKTOP = sp;return ($72|0);
   }
   else if ((label|0) == 16) {
    $51 = $pCodingContexts;
    $52 = $2;
    _FreeCodingContextsDec($51,$52);
    $0 = 0;
    $72 = $0;
    STACKTOP = sp;return ($72|0);
   }
   else if ((label|0) == 20) {
    $64 = $pCodingContexts;
    $65 = $2;
    _FreeCodingContextsDec($64,$65);
    $0 = 0;
    $72 = $0;
    STACKTOP = sp;return ($72|0);
   }
   else if ((label|0) == 25) {
    $71 = $pCodingContexts;
    $0 = $71;
    $72 = $0;
    STACKTOP = sp;return ($72|0);
   }
  }
 }
 $0 = 0;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _InitializeAH($ppAdHuff,$iSym) {
 $ppAdHuff = $ppAdHuff|0;
 $iSym = $iSym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iMemStatus = 0, $pAdHuff = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $ppAdHuff;
 $2 = $iSym;
 $iMemStatus = 0;
 $3 = $2;
 $4 = (_Allocate($3,1)|0);
 $pAdHuff = $4;
 $5 = $pAdHuff;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $pAdHuff;
  $8 = $1;
  HEAP32[$8>>2] = $7;
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $iMemStatus = -1;
 $9 = $pAdHuff;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $pAdHuff;
  _free($11);
 }
 $12 = $1;
 HEAP32[$12>>2] = 0;
 $13 = $iMemStatus;
 $14 = (-1)==($13|0);
 if ($14) {
  (_printf((7560|0),($vararg_buffer|0))|0);
 }
 $0 = -1;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _FreeCodingContextsDec($pCodingContexts,$iContexts) {
 $pCodingContexts = $pCodingContexts|0;
 $iContexts = $iContexts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $k = 0, $pContext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pCodingContexts;
 $1 = $iContexts;
 $2 = $0;
 $3 = (0|0)==($2|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = (($8) + (($7*592)|0)|0);
  $pContext = $9;
  $10 = $pContext;
  $11 = (($10) + 16|0);
  _CleanAH($11);
  $12 = $pContext;
  $13 = (($12) + 20|0);
  _CleanAH($13);
  $k = 0;
  while(1) {
   $14 = $k;
   $15 = ($14|0)<(21);
   if (!($15)) {
    break;
   }
   $16 = $k;
   $17 = $pContext;
   $18 = (($17) + 24|0);
   $19 = (($18) + ($16<<2)|0);
   _CleanAH($19);
   $20 = $k;
   $21 = (($20) + 1)|0;
   $k = $21;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $24 = $0;
 _free($24);
 STACKTOP = sp;return;
}
function _ResetCodingContextDec($pContext) {
 $pContext = $pContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pContext;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 24|0);
 HEAP32[$8>>2] = 0;
 $k = 0;
 while(1) {
  $9 = $k;
  $10 = ($9|0)<(21);
  if (!($10)) {
   break;
  }
  $11 = $k;
  $12 = $0;
  $13 = (($12) + 24|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 24|0);
  HEAP32[$16>>2] = 0;
  $17 = $k;
  $18 = (($17) + 1)|0;
  $k = $18;
 }
 $19 = $0;
 (_AdaptLowpassDec($19)|0);
 $20 = $0;
 (_AdaptHighpassDec($20)|0);
 $21 = $0;
 _InitZigzagScan($21);
 $22 = $0;
 _ResetCodingContext($22);
 STACKTOP = sp;return;
}
function _BackupCodingContextsDec($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $iContexts = 0, $pDestContexts = 0, $pSrcContexts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34336|0);
 $3 = HEAP32[$2>>2]|0;
 $pSrcContexts = $3;
 $4 = $0;
 $5 = (($4) + 34340|0);
 $6 = HEAP32[$5>>2]|0;
 $pDestContexts = $6;
 $7 = $0;
 $8 = (($7) + 34344|0);
 $9 = HEAP32[$8>>2]|0;
 $iContexts = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $iContexts;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = $pSrcContexts;
  $15 = (($14) + (($13*592)|0)|0);
  $16 = $i;
  $17 = $pDestContexts;
  $18 = (($17) + (($16*592)|0)|0);
  _CopyCodingContextDec($15,$18);
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 STACKTOP = sp;return;
}
function _CopyCodingContextDec($pSrcContext,$pDestContext) {
 $pSrcContext = $pSrcContext|0;
 $pDestContext = $pDestContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $k = 0, $pAHexpt = 0, $pAdaptHuffCBPCY = 0, $pAdaptHuffCBPCY1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pAHexpt = sp + 12|0;
 $0 = $pSrcContext;
 $1 = $pDestContext;
 $2 = $1;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $pAdaptHuffCBPCY = $4;
 $5 = $1;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $pAdaptHuffCBPCY1 = $7;
 $8 = $1;
 $9 = (($8) + 24|0);
 dest=$pAHexpt+0|0; src=$9+0|0; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $10 = $pAdaptHuffCBPCY;
 $11 = $0;
 $12 = (($11) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 dest=$10+0|0; src=$13+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $14 = $pAdaptHuffCBPCY1;
 $15 = $0;
 $16 = (($15) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 dest=$14+0|0; src=$17+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $k = 0;
 while(1) {
  $18 = $k;
  $19 = ($18|0)<(21);
  if (!($19)) {
   break;
  }
  $20 = $k;
  $21 = (($pAHexpt) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $k;
  $24 = $0;
  $25 = (($24) + 24|0);
  $26 = (($25) + ($23<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  dest=$22+0|0; src=$27+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $28 = $k;
  $29 = (($28) + 1)|0;
  $k = $29;
 }
 $30 = $1;
 $31 = $0;
 _memcpy(($30|0),($31|0),592)|0;
 $32 = $pAdaptHuffCBPCY;
 $33 = $1;
 $34 = (($33) + 16|0);
 HEAP32[$34>>2] = $32;
 $35 = $pAdaptHuffCBPCY1;
 $36 = $1;
 $37 = (($36) + 20|0);
 HEAP32[$37>>2] = $35;
 $38 = $1;
 $39 = (($38) + 24|0);
 dest=$39+0|0; src=$pAHexpt+0|0; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _RestoreCodingContextsDec($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $iContexts = 0, $pDestContexts = 0, $pSrcContexts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34340|0);
 $3 = HEAP32[$2>>2]|0;
 $pSrcContexts = $3;
 $4 = $0;
 $5 = (($4) + 34336|0);
 $6 = HEAP32[$5>>2]|0;
 $pDestContexts = $6;
 $7 = $0;
 $8 = (($7) + 34344|0);
 $9 = HEAP32[$8>>2]|0;
 $iContexts = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $iContexts;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = $pSrcContexts;
  $15 = (($14) + (($13*592)|0)|0);
  $16 = $i;
  $17 = $pDestContexts;
  $18 = (($17) + (($16*592)|0)|0);
  _CopyCodingContextDec($15,$18);
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 STACKTOP = sp;return;
}
function _FreeCodingContextDec($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $iContexts = 0, $k = 0, $pContext = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34344|0);
 $3 = HEAP32[$2>>2]|0;
 $iContexts = $3;
 $4 = $iContexts;
 $5 = ($4|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = (($6) + 34336|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $iContexts;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = $0;
  $15 = (($14) + 34336|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + (($13*592)|0)|0);
  $pContext = $17;
  $18 = $pContext;
  $19 = (($18) + 16|0);
  _CleanAH($19);
  $20 = $pContext;
  $21 = (($20) + 20|0);
  _CleanAH($21);
  $k = 0;
  while(1) {
   $22 = $k;
   $23 = ($22|0)<(21);
   if (!($23)) {
    break;
   }
   $24 = $k;
   $25 = $pContext;
   $26 = (($25) + 24|0);
   $27 = (($26) + ($24<<2)|0);
   _CleanAH($27);
   $28 = $k;
   $29 = (($28) + 1)|0;
   $k = $29;
  }
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 $32 = $0;
 $33 = (($32) + 34336|0);
 $34 = HEAP32[$33>>2]|0;
 _free($34);
 STACKTOP = sp;return;
}
function _CleanAH($ppAdHuff) {
 $ppAdHuff = $ppAdHuff|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $pAdHuff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppAdHuff;
 $1 = $0;
 $2 = (0|0)!=($1|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $pAdHuff = $4;
 $5 = $pAdHuff;
 $6 = (0|0)!=($5|0);
 if ($6) {
  $7 = $pAdHuff;
  _free($7);
 }
 $8 = $0;
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function _smoothMB($p1,$p0,$q0,$q1) {
 $p1 = $p1|0;
 $p0 = $p0|0;
 $q0 = $q0|0;
 $q1 = $q1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delta = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $p0;
 $2 = $q0;
 $3 = $q1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 << 2;
 $10 = $0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) - ($13))|0;
 $15 = (($9) + ($14))|0;
 $16 = $15 >> 3;
 $delta = $16;
 $17 = $delta;
 $18 = $2;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) - ($17))|0;
 HEAP32[$18>>2] = $20;
 $21 = $delta;
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($21))|0;
 HEAP32[$22>>2] = $24;
 STACKTOP = sp;return;
}
function _smooth($p2,$p1,$p0,$q0,$q1,$q2) {
 $p2 = $p2|0;
 $p1 = $p1|0;
 $p0 = $p0|0;
 $q0 = $q0|0;
 $q1 = $q1|0;
 $q2 = $q2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delta = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p2;
 $1 = $p1;
 $2 = $p0;
 $3 = $q0;
 $4 = $q1;
 $5 = $q2;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $11 = $10 << 2;
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) - ($15))|0;
 $17 = (($11) + ($16))|0;
 $18 = $17 >> 3;
 $delta = $18;
 $19 = $delta;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) - ($19))|0;
 HEAP32[$20>>2] = $22;
 $23 = $delta;
 $24 = $2;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($23))|0;
 HEAP32[$24>>2] = $26;
 $27 = $1;
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >> 1;
 $30 = $2;
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + ($33))|0;
 $35 = $34 >> 2;
 $36 = (($29) + ($35))|0;
 $37 = $1;
 HEAP32[$37>>2] = $36;
 $38 = $4;
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >> 1;
 $41 = $3;
 $42 = HEAP32[$41>>2]|0;
 $43 = $5;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + ($44))|0;
 $46 = $45 >> 2;
 $47 = (($40) + ($46))|0;
 $48 = $4;
 HEAP32[$48>>2] = $47;
 STACKTOP = sp;return;
}
function _initPostProc($strPostProcInfo,$mbWidth,$iNumChannels) {
 $strPostProcInfo = $strPostProcInfo|0;
 $mbWidth = $mbWidth|0;
 $iNumChannels = $iNumChannels|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $b32bit = 0, $i = 0, $j = 0, $k = 0, $l = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strPostProcInfo;
 $2 = $mbWidth;
 $3 = $iNumChannels;
 $b32bit = 1;
 $j = 0;
 L1: while(1) {
  $4 = $j;
  $5 = $3;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   label = 25;
   break;
  }
  $i = 0;
  while(1) {
   $7 = $i;
   $8 = ($7>>>0)<(2);
   if (!($8)) {
    break;
   }
   $9 = $b32bit;
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $2;
    $12 = (($11) + 2)|0;
    $13 = $12 >>> 16;
    $14 = ($13*88)|0;
    $15 = $14 & -65536;
    $16 = ($15|0)!=(0);
    if ($16) {
     label = 7;
     break L1;
    }
   }
   $17 = $2;
   $18 = (($17) + 2)|0;
   $19 = ($18*88)|0;
   $20 = (_malloc($19)|0);
   $21 = $i;
   $22 = $j;
   $23 = $1;
   $24 = (($23) + ($22<<3)|0);
   $25 = (($24) + ($21<<2)|0);
   HEAP32[$25>>2] = $20;
   $26 = $i;
   $27 = $j;
   $28 = $1;
   $29 = (($28) + ($27<<3)|0);
   $30 = (($29) + ($26<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if (!($32)) {
    label = 10;
    break L1;
   }
   $33 = $i;
   $34 = $j;
   $35 = $1;
   $36 = (($35) + ($34<<3)|0);
   $37 = (($36) + ($33<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if ($39) {
    label = 12;
    break L1;
   }
   $40 = $i;
   $41 = $j;
   $42 = $1;
   $43 = (($42) + ($41<<3)|0);
   $44 = (($43) + ($40<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 88|0);
   HEAP32[$44>>2] = $46;
   $47 = $i;
   $48 = $j;
   $49 = $1;
   $50 = (($49) + ($48<<3)|0);
   $51 = (($50) + ($47<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + -88|0);
   $54 = (($53) + 4|0);
   HEAP8[$54>>0] = 3;
   $l = 0;
   while(1) {
    $55 = $l;
    $56 = ($55>>>0)<(4);
    if (!($56)) {
     break;
    }
    $k = 0;
    while(1) {
     $57 = $k;
     $58 = ($57>>>0)<(4);
     if (!($58)) {
      break;
     }
     $59 = $k;
     $60 = $l;
     $61 = $i;
     $62 = $j;
     $63 = $1;
     $64 = (($63) + ($62<<3)|0);
     $65 = (($64) + ($61<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + -88|0);
     $68 = (($67) + 72|0);
     $69 = (($68) + ($60<<2)|0);
     $70 = (($69) + ($59)|0);
     HEAP8[$70>>0] = 3;
     $71 = $k;
     $72 = (($71) + 1)|0;
     $k = $72;
    }
    $73 = $l;
    $74 = (($73) + 1)|0;
    $l = $74;
   }
   $75 = $2;
   $76 = $i;
   $77 = $j;
   $78 = $1;
   $79 = (($78) + ($77<<3)|0);
   $80 = (($79) + ($76<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) + (($75*88)|0)|0);
   $83 = $i;
   $84 = $j;
   $85 = $1;
   $86 = (($85) + ($84<<3)|0);
   $87 = (($86) + ($83<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + -88|0);
   dest=$82+0|0; src=$89+0|0; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $90 = $i;
   $91 = (($90) + 1)|0;
   $i = $91;
  }
  $92 = $j;
  $93 = (($92) + 1)|0;
  $j = $93;
 }
 if ((label|0) == 7) {
  $0 = -1;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 else if ((label|0) == 10) {
  ___assert_fail((7600|0),(7632|0),65,(7664|0));
  // unreachable;
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 else if ((label|0) == 25) {
  $0 = 0;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 return 0|0;
}
function _slideOneMBRow($strPostProcInfo,$iNumChannels,$mbWidth,$top,$bottom) {
 $strPostProcInfo = $strPostProcInfo|0;
 $iNumChannels = $iNumChannels|0;
 $mbWidth = $mbWidth|0;
 $top = $top|0;
 $bottom = $bottom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $bar = 0, $i = 0, $j = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $strPostProcInfo;
 $1 = $iNumChannels;
 $2 = $mbWidth;
 $3 = $top;
 $4 = $bottom;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = ($5>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = (($9) + ($8<<3)|0);
  $11 = HEAP32[$10>>2]|0;
  $bar = $11;
  $12 = $i;
  $13 = $0;
  $14 = (($13) + ($12<<3)|0);
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $i;
  $18 = $0;
  $19 = (($18) + ($17<<3)|0);
  HEAP32[$19>>2] = $16;
  $20 = $bar;
  $21 = $i;
  $22 = $0;
  $23 = (($22) + ($21<<3)|0);
  $24 = (($23) + 4|0);
  HEAP32[$24>>2] = $20;
  $25 = $3;
  $26 = ($25|0)!=(0);
  if ($26) {
   $j = 0;
   while(1) {
    $27 = $j;
    $28 = $2;
    $29 = ($27>>>0)<($28>>>0);
    if (!($29)) {
     break;
    }
    $30 = $j;
    $31 = $i;
    $32 = $0;
    $33 = (($32) + ($31<<3)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + (($30*88)|0)|0);
    $36 = $i;
    $37 = $0;
    $38 = (($37) + ($36<<3)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + -88|0);
    dest=$35+0|0; src=$40+0|0; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $41 = $j;
    $42 = (($41) + 1)|0;
    $j = $42;
   }
  }
  $43 = $4;
  $44 = ($43|0)!=(0);
  if ($44) {
   $j = 0;
   while(1) {
    $45 = $j;
    $46 = $2;
    $47 = ($45>>>0)<($46>>>0);
    if (!($47)) {
     break;
    }
    $48 = $j;
    $49 = $i;
    $50 = $0;
    $51 = (($50) + ($49<<3)|0);
    $52 = (($51) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + (($48*88)|0)|0);
    $55 = $i;
    $56 = $0;
    $57 = (($56) + ($55<<3)|0);
    $58 = (($57) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + -88|0);
    dest=$54+0|0; src=$60+0|0; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $61 = $j;
    $62 = (($61) + 1)|0;
    $j = $62;
   }
  }
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 STACKTOP = sp;return;
}
function _updatePostProcInfo($strPostProcInfo,$pMB,$mbX,$cc) {
 $strPostProcInfo = $strPostProcInfo|0;
 $pMB = $pMB|0;
 $mbX = $mbX|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $k = 0, $p = 0, $pMBInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $strPostProcInfo;
 $1 = $pMB;
 $2 = $mbX;
 $3 = $cc;
 $4 = $3;
 $5 = $0;
 $6 = (($5) + ($4<<3)|0);
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = (($8) + (($9*88)|0)|0);
 $pMBInfo = $10;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = $pMBInfo;
 HEAP32[$13>>2] = $12;
 $14 = $pMBInfo;
 $15 = (($14) + 4|0);
 HEAP8[$15>>0] = 0;
 $i = 16;
 while(1) {
  $16 = $i;
  $17 = ($16>>>0)<(256);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = $1;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  if ($22) {
   label = 4;
   break;
  }
  $25 = $i;
  $26 = (($25) + 16)|0;
  $i = $26;
 }
 if ((label|0) == 4) {
  $23 = $pMBInfo;
  $24 = (($23) + 4|0);
  HEAP8[$24>>0] = 3;
 }
 $j = 0;
 while(1) {
  $27 = $j;
  $28 = ($27>>>0)<(4);
  if (!($28)) {
   break;
  }
  $i = 0;
  while(1) {
   $29 = $i;
   $30 = ($29>>>0)<(4);
   if (!($30)) {
    break;
   }
   $31 = $1;
   $32 = $i;
   $33 = $32<<6;
   $34 = (($31) + ($33<<2)|0);
   $35 = $j;
   $36 = $35<<4;
   $37 = (($34) + ($36<<2)|0);
   $p = $37;
   $k = 1;
   $38 = $i;
   $39 = $j;
   $40 = $pMBInfo;
   $41 = (($40) + 72|0);
   $42 = (($41) + ($39<<2)|0);
   $43 = (($42) + ($38)|0);
   HEAP8[$43>>0] = 0;
   while(1) {
    $44 = $k;
    $45 = ($44>>>0)<(16);
    if (!($45)) {
     break;
    }
    $46 = $k;
    $47 = $p;
    $48 = (($47) + ($46<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(0);
    if ($50) {
     label = 14;
     break;
    }
    $57 = $k;
    $58 = (($57) + 1)|0;
    $k = $58;
   }
   if ((label|0) == 14) {
    label = 0;
    $51 = $i;
    $52 = $j;
    $53 = $pMBInfo;
    $54 = (($53) + 72|0);
    $55 = (($54) + ($52<<2)|0);
    $56 = (($55) + ($51)|0);
    HEAP8[$56>>0] = 3;
   }
   $59 = $i;
   $60 = (($59) + 1)|0;
   $i = $60;
  }
  $61 = $j;
  $62 = (($61) + 1)|0;
  $j = $62;
 }
 STACKTOP = sp;return;
}
function _postProcMB($strPostProcInfo,$p0,$p1,$mbX,$cc,$threshold) {
 $strPostProcInfo = $strPostProcInfo|0;
 $p0 = $p0|0;
 $p1 = $p1|0;
 $mbX = $mbX|0;
 $cc = $cc|0;
 $threshold = $threshold|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pMBa = 0, $pMBb = 0, $pMBc = 0, $pMBd = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $strPostProcInfo;
 $1 = $p0;
 $2 = $p1;
 $3 = $mbX;
 $4 = $cc;
 $5 = $threshold;
 $6 = $4;
 $7 = $0;
 $8 = (($7) + ($6<<3)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = (($9) + (($10*88)|0)|0);
 $pMBb = $11;
 $12 = $pMBb;
 $13 = (($12) + -88|0);
 $pMBa = $13;
 $14 = $4;
 $15 = $0;
 $16 = (($15) + ($14<<3)|0);
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (($18) + (($19*88)|0)|0);
 $pMBd = $20;
 $21 = $pMBd;
 $22 = (($21) + -88|0);
 $pMBc = $22;
 $23 = $pMBa;
 $24 = (($23) + 4|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $pMBc;
 $28 = (($27) + 4|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (($26) + ($30))|0;
 $32 = ($31|0)==(0);
 if ($32) {
  $33 = $pMBa;
  $34 = HEAP32[$33>>2]|0;
  $35 = $pMBc;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) - ($36))|0;
  $38 = (Math_abs(($37|0))|0);
  $39 = $5;
  $40 = ($38|0)<=($39|0);
  if ($40) {
   $41 = $1;
   $42 = (($41) + -1024|0);
   $43 = (($42) + 640|0);
   $44 = $1;
   $45 = (($44) + -1024|0);
   $46 = (($45) + 704|0);
   $47 = $2;
   $48 = (($47) + -1024|0);
   $49 = (($48) + 512|0);
   $50 = $2;
   $51 = (($50) + -1024|0);
   $52 = (($51) + 576|0);
   _smoothMB($43,$46,$49,$52);
   $53 = $1;
   $54 = (($53) + -1024|0);
   $55 = (($54) + 896|0);
   $56 = $1;
   $57 = (($56) + -1024|0);
   $58 = (($57) + 960|0);
   $59 = $2;
   $60 = (($59) + -1024|0);
   $61 = (($60) + 768|0);
   $62 = $2;
   $63 = (($62) + -1024|0);
   $64 = (($63) + 832|0);
   _smoothMB($55,$58,$61,$64);
  }
 }
 $65 = $pMBb;
 $66 = (($65) + 4|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $pMBd;
 $70 = (($69) + 4|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = (($68) + ($72))|0;
 $74 = ($73|0)==(0);
 if ($74) {
  $75 = $pMBb;
  $76 = HEAP32[$75>>2]|0;
  $77 = $pMBd;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($76) - ($78))|0;
  $80 = (Math_abs(($79|0))|0);
  $81 = $5;
  $82 = ($80|0)<=($81|0);
  if ($82) {
   $83 = $1;
   $84 = (($83) + 128|0);
   $85 = $1;
   $86 = (($85) + 192|0);
   $87 = $2;
   $88 = $2;
   $89 = (($88) + 64|0);
   _smoothMB($84,$86,$87,$89);
   $90 = $1;
   $91 = (($90) + 384|0);
   $92 = $1;
   $93 = (($92) + 448|0);
   $94 = $2;
   $95 = (($94) + 256|0);
   $96 = $2;
   $97 = (($96) + 320|0);
   _smoothMB($91,$93,$95,$97);
  }
 }
 $98 = $pMBa;
 $99 = (($98) + 4|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&255;
 $102 = $pMBb;
 $103 = (($102) + 4|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = $104&255;
 $106 = (($101) + ($105))|0;
 $107 = ($106|0)==(0);
 if ($107) {
  $108 = $pMBa;
  $109 = HEAP32[$108>>2]|0;
  $110 = $pMBb;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) - ($111))|0;
  $113 = (Math_abs(($112|0))|0);
  $114 = $5;
  $115 = ($113|0)<=($114|0);
  if ($115) {
   $116 = $1;
   $117 = (($116) + -1024|0);
   $118 = (($117) + 640|0);
   $119 = $1;
   $120 = (($119) + -1024|0);
   $121 = (($120) + 896|0);
   $122 = $1;
   $123 = (($122) + 128|0);
   $124 = $1;
   $125 = (($124) + 384|0);
   _smoothMB($118,$121,$123,$125);
   $126 = $1;
   $127 = (($126) + -1024|0);
   $128 = (($127) + 704|0);
   $129 = $1;
   $130 = (($129) + -1024|0);
   $131 = (($130) + 960|0);
   $132 = $1;
   $133 = (($132) + 192|0);
   $134 = $1;
   $135 = (($134) + 448|0);
   _smoothMB($128,$131,$133,$135);
  }
 }
 $136 = $pMBc;
 $137 = (($136) + 4|0);
 $138 = HEAP8[$137>>0]|0;
 $139 = $138&255;
 $140 = $pMBd;
 $141 = (($140) + 4|0);
 $142 = HEAP8[$141>>0]|0;
 $143 = $142&255;
 $144 = (($139) + ($143))|0;
 $145 = ($144|0)==(0);
 if ($145) {
  $146 = $pMBc;
  $147 = HEAP32[$146>>2]|0;
  $148 = $pMBd;
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) - ($149))|0;
  $151 = (Math_abs(($150|0))|0);
  $152 = $5;
  $153 = ($151|0)<=($152|0);
  if ($153) {
   $154 = $2;
   $155 = (($154) + -1024|0);
   $156 = (($155) + 512|0);
   $157 = $2;
   $158 = (($157) + -1024|0);
   $159 = (($158) + 768|0);
   $160 = $2;
   $161 = $2;
   $162 = (($161) + 256|0);
   _smoothMB($156,$159,$160,$162);
   $163 = $2;
   $164 = (($163) + -1024|0);
   $165 = (($164) + 576|0);
   $166 = $2;
   $167 = (($166) + -1024|0);
   $168 = (($167) + 832|0);
   $169 = $2;
   $170 = (($169) + 64|0);
   $171 = $2;
   $172 = (($171) + 320|0);
   _smoothMB($165,$168,$170,$172);
  }
 }
 $173 = $2;
 $174 = HEAP32[$173>>2]|0;
 $175 = $pMBd;
 $176 = (($175) + 8|0);
 HEAP32[$176>>2] = $174;
 $177 = $2;
 $178 = (($177) + 256|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = $pMBd;
 $181 = (($180) + 8|0);
 $182 = (($181) + 4|0);
 HEAP32[$182>>2] = $179;
 $183 = $2;
 $184 = (($183) + 64|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $pMBd;
 $187 = (($186) + 8|0);
 $188 = (($187) + 16|0);
 HEAP32[$188>>2] = $185;
 $189 = $2;
 $190 = (($189) + 320|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $pMBd;
 $193 = (($192) + 8|0);
 $194 = (($193) + 16|0);
 $195 = (($194) + 4|0);
 HEAP32[$195>>2] = $191;
 $196 = $1;
 $197 = (($196) + 128|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $pMBb;
 $200 = (($199) + 8|0);
 $201 = (($200) + 32|0);
 HEAP32[$201>>2] = $198;
 $202 = $1;
 $203 = (($202) + 384|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $pMBb;
 $206 = (($205) + 8|0);
 $207 = (($206) + 32|0);
 $208 = (($207) + 4|0);
 HEAP32[$208>>2] = $204;
 $209 = $1;
 $210 = (($209) + 192|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = $pMBb;
 $213 = (($212) + 8|0);
 $214 = (($213) + 48|0);
 HEAP32[$214>>2] = $211;
 $215 = $1;
 $216 = (($215) + 448|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = $pMBb;
 $219 = (($218) + 8|0);
 $220 = (($219) + 48|0);
 $221 = (($220) + 4|0);
 HEAP32[$221>>2] = $217;
 $222 = $2;
 $223 = (($222) + -512|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = $pMBc;
 $226 = (($225) + 8|0);
 $227 = (($226) + 8|0);
 HEAP32[$227>>2] = $224;
 $228 = $2;
 $229 = (($228) + -256|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = $pMBc;
 $232 = (($231) + 8|0);
 $233 = (($232) + 12|0);
 HEAP32[$233>>2] = $230;
 $234 = $2;
 $235 = (($234) + -448|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = $pMBc;
 $238 = (($237) + 8|0);
 $239 = (($238) + 16|0);
 $240 = (($239) + 8|0);
 HEAP32[$240>>2] = $236;
 $241 = $2;
 $242 = (($241) + -192|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = $pMBc;
 $245 = (($244) + 8|0);
 $246 = (($245) + 16|0);
 $247 = (($246) + 12|0);
 HEAP32[$247>>2] = $243;
 $248 = $1;
 $249 = (($248) + -384|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = $pMBa;
 $252 = (($251) + 8|0);
 $253 = (($252) + 32|0);
 $254 = (($253) + 8|0);
 HEAP32[$254>>2] = $250;
 $255 = $1;
 $256 = (($255) + -128|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = $pMBa;
 $259 = (($258) + 8|0);
 $260 = (($259) + 32|0);
 $261 = (($260) + 12|0);
 HEAP32[$261>>2] = $257;
 $262 = $1;
 $263 = (($262) + -320|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = $pMBa;
 $266 = (($265) + 8|0);
 $267 = (($266) + 48|0);
 $268 = (($267) + 8|0);
 HEAP32[$268>>2] = $264;
 $269 = $1;
 $270 = (($269) + -64|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = $pMBa;
 $273 = (($272) + 8|0);
 $274 = (($273) + 48|0);
 $275 = (($274) + 12|0);
 HEAP32[$275>>2] = $271;
 STACKTOP = sp;return;
}
function _postProcBlock($strPostProcInfo,$p0,$p1,$mbX,$cc,$threshold) {
 $strPostProcInfo = $strPostProcInfo|0;
 $p0 = $p0|0;
 $p1 = $p1|0;
 $mbX = $mbX|0;
 $cc = $cc|0;
 $threshold = $threshold|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dc = 0, $i = 0, $j = 0, $k = 0, $pMBa = 0, $pMBb = 0, $pMBc = 0, $pMBd = 0, $pc = 0, $pt = 0, $texture = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dc = sp + 20|0;
 $texture = sp + 160|0;
 $0 = $strPostProcInfo;
 $1 = $p0;
 $2 = $p1;
 $3 = $mbX;
 $4 = $cc;
 $5 = $threshold;
 $6 = $4;
 $7 = $0;
 $8 = (($7) + ($6<<3)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = (($9) + (($10*88)|0)|0);
 $pMBb = $11;
 $12 = $pMBb;
 $13 = (($12) + -88|0);
 $pMBa = $13;
 $14 = $4;
 $15 = $0;
 $16 = (($15) + ($14<<3)|0);
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (($18) + (($19*88)|0)|0);
 $pMBd = $20;
 $21 = $pMBd;
 $22 = (($21) + -88|0);
 $pMBc = $22;
 $j = 0;
 while(1) {
  $23 = $j;
  $24 = ($23>>>0)<(4);
  if (!($24)) {
   break;
  }
  $i = 0;
  while(1) {
   $25 = $i;
   $26 = ($25>>>0)<(4);
   if (!($26)) {
    break;
   }
   $27 = $i;
   $28 = $j;
   $29 = $pMBa;
   $30 = (($29) + 8|0);
   $31 = (($30) + ($28<<4)|0);
   $32 = (($31) + ($27<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $i;
   $35 = $j;
   $36 = (($dc) + (($35*20)|0)|0);
   $37 = (($36) + ($34<<2)|0);
   HEAP32[$37>>2] = $33;
   $38 = $i;
   $39 = $j;
   $40 = $pMBa;
   $41 = (($40) + 72|0);
   $42 = (($41) + ($39<<2)|0);
   $43 = (($42) + ($38)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $i;
   $46 = $j;
   $47 = (($texture) + (($46*5)|0)|0);
   $48 = (($47) + ($45)|0);
   HEAP8[$48>>0] = $44;
   $49 = $i;
   $50 = (($49) + 1)|0;
   $i = $50;
  }
  $51 = $j;
  $52 = $pMBc;
  $53 = (($52) + 8|0);
  $54 = (($53) + ($51<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $j;
  $57 = (($dc) + 80|0);
  $58 = (($57) + ($56<<2)|0);
  HEAP32[$58>>2] = $55;
  $59 = $j;
  $60 = $pMBc;
  $61 = (($60) + 72|0);
  $62 = (($61) + ($59)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $j;
  $65 = (($texture) + 20|0);
  $66 = (($65) + ($64)|0);
  HEAP8[$66>>0] = $63;
  $67 = $j;
  $68 = $pMBb;
  $69 = (($68) + 8|0);
  $70 = (($69) + ($67<<4)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $j;
  $73 = (($dc) + (($72*20)|0)|0);
  $74 = (($73) + 16|0);
  HEAP32[$74>>2] = $71;
  $75 = $j;
  $76 = $pMBb;
  $77 = (($76) + 72|0);
  $78 = (($77) + ($75<<2)|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $j;
  $81 = (($texture) + (($80*5)|0)|0);
  $82 = (($81) + 4|0);
  HEAP8[$82>>0] = $79;
  $83 = $j;
  $84 = (($83) + 1)|0;
  $j = $84;
 }
 $85 = $pMBd;
 $86 = (($85) + 8|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($dc) + 80|0);
 $89 = (($88) + 16|0);
 HEAP32[$89>>2] = $87;
 $90 = $pMBd;
 $91 = (($90) + 72|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = (($texture) + 20|0);
 $94 = (($93) + 4|0);
 HEAP8[$94>>0] = $92;
 $j = 0;
 while(1) {
  $95 = $j;
  $96 = ($95>>>0)<(4);
  if (!($96)) {
   break;
  }
  $i = 0;
  while(1) {
   $97 = $i;
   $98 = ($97>>>0)<(4);
   if (!($98)) {
    break;
   }
   $99 = $1;
   $100 = (($99) + -1024|0);
   $101 = $i;
   $102 = $101<<6;
   $103 = (($100) + ($102<<2)|0);
   $104 = $j;
   $105 = $104<<4;
   $106 = (($103) + ($105<<2)|0);
   $pc = $106;
   $107 = $i;
   $108 = $j;
   $109 = (($texture) + (($108*5)|0)|0);
   $110 = (($109) + ($107)|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = $i;
   $114 = $j;
   $115 = (($114) + 1)|0;
   $116 = (($texture) + (($115*5)|0)|0);
   $117 = (($116) + ($113)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = (($112) + ($119))|0;
   $121 = ($120|0)<(3);
   if ($121) {
    $122 = $i;
    $123 = $j;
    $124 = (($dc) + (($123*20)|0)|0);
    $125 = (($124) + ($122<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $i;
    $128 = $j;
    $129 = (($128) + 1)|0;
    $130 = (($dc) + (($129*20)|0)|0);
    $131 = (($130) + ($127<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($126) - ($132))|0;
    $134 = (Math_abs(($133|0))|0);
    $135 = $5;
    $136 = ($134|0)<=($135|0);
    if ($136) {
     $137 = $j;
     $138 = ($137>>>0)<(3);
     if ($138) {
      $139 = $pc;
      $140 = (($139) + 64|0);
      $146 = $140;
     } else {
      $141 = $2;
      $142 = (($141) + -1024|0);
      $143 = $i;
      $144 = $143<<6;
      $145 = (($142) + ($144<<2)|0);
      $146 = $145;
     }
     $pt = $146;
     $k = 0;
     while(1) {
      $147 = $k;
      $148 = ($147>>>0)<(4);
      if (!($148)) {
       break;
      }
      $149 = $pc;
      $150 = $k;
      $151 = (((14240 + 16|0)) + ($150)|0);
      $152 = HEAP8[$151>>0]|0;
      $153 = $152&255;
      $154 = (($149) + ($153<<2)|0);
      $155 = $pc;
      $156 = $k;
      $157 = (((14240 + 32|0)) + ($156)|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = $158&255;
      $160 = (($155) + ($159<<2)|0);
      $161 = $pc;
      $162 = $k;
      $163 = (((14240 + 48|0)) + ($162)|0);
      $164 = HEAP8[$163>>0]|0;
      $165 = $164&255;
      $166 = (($161) + ($165<<2)|0);
      $167 = $pt;
      $168 = $k;
      $169 = (14240 + ($168)|0);
      $170 = HEAP8[$169>>0]|0;
      $171 = $170&255;
      $172 = (($167) + ($171<<2)|0);
      $173 = $pt;
      $174 = $k;
      $175 = (((14240 + 16|0)) + ($174)|0);
      $176 = HEAP8[$175>>0]|0;
      $177 = $176&255;
      $178 = (($173) + ($177<<2)|0);
      $179 = $pt;
      $180 = $k;
      $181 = (((14240 + 32|0)) + ($180)|0);
      $182 = HEAP8[$181>>0]|0;
      $183 = $182&255;
      $184 = (($179) + ($183<<2)|0);
      _smooth($154,$160,$166,$172,$178,$184);
      $185 = $k;
      $186 = (($185) + 1)|0;
      $k = $186;
     }
    }
   }
   $187 = $i;
   $188 = $j;
   $189 = (($texture) + (($188*5)|0)|0);
   $190 = (($189) + ($187)|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = $i;
   $194 = (($193) + 1)|0;
   $195 = $j;
   $196 = (($texture) + (($195*5)|0)|0);
   $197 = (($196) + ($194)|0);
   $198 = HEAP8[$197>>0]|0;
   $199 = $198&255;
   $200 = (($192) + ($199))|0;
   $201 = ($200|0)<(3);
   if ($201) {
    $202 = $i;
    $203 = $j;
    $204 = (($dc) + (($203*20)|0)|0);
    $205 = (($204) + ($202<<2)|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = $i;
    $208 = (($207) + 1)|0;
    $209 = $j;
    $210 = (($dc) + (($209*20)|0)|0);
    $211 = (($210) + ($208<<2)|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = (($206) - ($212))|0;
    $214 = (Math_abs(($213|0))|0);
    $215 = $5;
    $216 = ($214|0)<=($215|0);
    if ($216) {
     $217 = $pc;
     $218 = (($217) + 256|0);
     $pt = $218;
     $k = 0;
     while(1) {
      $219 = $k;
      $220 = ($219>>>0)<(4);
      if (!($220)) {
       break;
      }
      $221 = $pc;
      $222 = $k;
      $223 = (14240 + ($222<<4)|0);
      $224 = (($223) + 1|0);
      $225 = HEAP8[$224>>0]|0;
      $226 = $225&255;
      $227 = (($221) + ($226<<2)|0);
      $228 = $pc;
      $229 = $k;
      $230 = (14240 + ($229<<4)|0);
      $231 = (($230) + 2|0);
      $232 = HEAP8[$231>>0]|0;
      $233 = $232&255;
      $234 = (($228) + ($233<<2)|0);
      $235 = $pc;
      $236 = $k;
      $237 = (14240 + ($236<<4)|0);
      $238 = (($237) + 3|0);
      $239 = HEAP8[$238>>0]|0;
      $240 = $239&255;
      $241 = (($235) + ($240<<2)|0);
      $242 = $pt;
      $243 = $k;
      $244 = (14240 + ($243<<4)|0);
      $245 = HEAP8[$244>>0]|0;
      $246 = $245&255;
      $247 = (($242) + ($246<<2)|0);
      $248 = $pt;
      $249 = $k;
      $250 = (14240 + ($249<<4)|0);
      $251 = (($250) + 1|0);
      $252 = HEAP8[$251>>0]|0;
      $253 = $252&255;
      $254 = (($248) + ($253<<2)|0);
      $255 = $pt;
      $256 = $k;
      $257 = (14240 + ($256<<4)|0);
      $258 = (($257) + 2|0);
      $259 = HEAP8[$258>>0]|0;
      $260 = $259&255;
      $261 = (($255) + ($260<<2)|0);
      _smooth($227,$234,$241,$247,$254,$261);
      $262 = $k;
      $263 = (($262) + 1)|0;
      $k = $263;
     }
    }
   }
   $264 = $i;
   $265 = (($264) + 1)|0;
   $i = $265;
  }
  $266 = $j;
  $267 = (($266) + 1)|0;
  $j = $267;
 }
 STACKTOP = sp;return;
}
function _getHuff($pDecodeTable,$pIO) {
 $pDecodeTable = $pDecodeTable|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iSymbol = 0, $iSymbolHuff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pDecodeTable;
 $1 = $pIO;
 $2 = $1;
 $3 = (_peekBit16($2,5)|0);
 $4 = $0;
 $5 = (($4) + ($3<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $iSymbol = $7;
 $8 = $1;
 $9 = $iSymbol;
 $10 = ($9|0)<(0);
 if ($10) {
  $13 = 5;
 } else {
  $11 = $iSymbol;
  $12 = $11 & 7;
  $13 = $12;
 }
 (_flushBit16($8,$13)|0);
 $14 = $iSymbol;
 $15 = $14 >> 3;
 $iSymbolHuff = $15;
 $16 = $iSymbolHuff;
 $17 = ($16|0)<(0);
 if (!($17)) {
  $29 = $iSymbolHuff;
  STACKTOP = sp;return ($29|0);
 }
 $18 = $iSymbol;
 $iSymbolHuff = $18;
 while(1) {
  $19 = $iSymbolHuff;
  $20 = (($19) + 32768)|0;
  $21 = $1;
  $22 = (_getBit16($21,1)|0);
  $23 = (($20) + ($22))|0;
  $24 = $0;
  $25 = (($24) + ($23<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $iSymbolHuff = $27;
  $28 = ($27|0)<(0);
  if (!($28)) {
   break;
  }
 }
 $29 = $iSymbolHuff;
 STACKTOP = sp;return ($29|0);
}
function _DecodeSignificantRun($iMaxRun,$pAHexpt,$pIO) {
 $iMaxRun = $iMaxRun|0;
 $pAHexpt = $pAHexpt|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iBin = 0, $iFLC = 0, $iIndex = 0, $iRun = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $iMaxRun;
 $2 = $pAHexpt;
 $3 = $pIO;
 $4 = $1;
 $5 = (13576 + ($4<<2)|0);
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $iBin = $6;
 $iRun = 0;
 $iFLC = 0;
 $7 = $1;
 $8 = ($7|0)<(5);
 if (!($8)) {
  $24 = $2;
  $25 = (($24) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $3;
  $28 = (__getHuffShort($26,$27)|0);
  $iIndex = $28;
  $29 = $iBin;
  $30 = ($29*5)|0;
  $31 = $iIndex;
  $32 = (($31) + ($30))|0;
  $iIndex = $32;
  $33 = $iIndex;
  $34 = (7680 + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $iRun = $35;
  $36 = $iIndex;
  $37 = (13640 + ($36<<2)|0);
  $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8)|(HEAPU8[$37+2>>0]<<16)|(HEAPU8[$37+3>>0]<<24);
  $iFLC = $38;
  $39 = $iFLC;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $3;
   $42 = $iFLC;
   $43 = (__getBit16($41,$42)|0);
   $44 = $iRun;
   $45 = (($44) + ($43))|0;
   $iRun = $45;
  }
  $46 = $iRun;
  $0 = $46;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $9 = $1;
 $10 = ($9|0)==(1);
 if ($10) {
  $0 = 1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $11 = $3;
 $12 = (__getBool16($11)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  $0 = 1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $14 = $1;
 $15 = ($14|0)==(2);
 if (!($15)) {
  $16 = $3;
  $17 = (__getBool16($16)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $19 = $1;
   $20 = ($19|0)==(3);
   if (!($20)) {
    $21 = $3;
    $22 = (__getBool16($21)|0);
    $23 = ($22|0)!=(0);
    if (!($23)) {
     $0 = 4;
     $47 = $0;
     STACKTOP = sp;return ($47|0);
    }
   }
   $0 = 3;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 }
 $0 = 2;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function __getBool16($pIO) {
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uiRet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 31;
 $uiRet = $4;
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)<(16);
 if ($12) {
  $13 = $0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 << 1;
  HEAP32[$14>>2] = $16;
  $47 = $uiRet;
  STACKTOP = sp;return ($47|0);
 } else {
  $17 = $0;
  $18 = (($17) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 3;
  $24 = (($19) + ($23)|0);
  $25 = $24;
  $26 = $0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $25 & $28;
  $30 = $29;
  $31 = $0;
  $32 = (($31) + 20|0);
  HEAP32[$32>>2] = $30;
  $33 = $0;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 15;
  HEAP32[$34>>2] = $36;
  $37 = $0;
  $38 = (($37) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (__load4($39)|0);
  $41 = $0;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $40 << $43;
  $45 = $0;
  $46 = (($45) + 4|0);
  HEAP32[$46>>2] = $44;
  $47 = $uiRet;
  STACKTOP = sp;return ($47|0);
 }
 return 0|0;
}
function __getHuffShort($pDecodeTable,$pIO) {
 $pDecodeTable = $pDecodeTable|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iSymbol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pDecodeTable;
 $1 = $pIO;
 $2 = $1;
 $3 = (__peekBit16($2,5)|0);
 $4 = $0;
 $5 = (($4) + ($3<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $iSymbol = $7;
 $8 = $iSymbol;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $1;
  $11 = $iSymbol;
  $12 = $11 & 7;
  (_flushBit16($10,$12)|0);
  $13 = $iSymbol;
  $14 = $13 >> 3;
  STACKTOP = sp;return ($14|0);
 } else {
  ___assert_fail((8408|0),(7904|0),164,(8424|0));
  // unreachable;
 }
 return 0|0;
}
function __getBit16($pIO,$cBits) {
 $pIO = $pIO|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $uiRet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cBits;
 $2 = $0;
 $3 = $1;
 $4 = (__peekBit16($2,$3)|0);
 $uiRet = $4;
 $5 = $0;
 $6 = $1;
 (__flushBit16($5,$6)|0);
 $7 = $uiRet;
 STACKTOP = sp;return ($7|0);
}
function _decodeQPIndex($pIO,$cBits) {
 $pIO = $pIO|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pIO;
 $2 = $cBits;
 $3 = $1;
 $4 = (__getBit16($3,1)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $6 = $1;
  $7 = $2;
  $8 = $7&255;
  $9 = (__getBit16($6,$8)|0);
  $10 = (($9) + 1)|0;
  $11 = $10&255;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return 0|0;
}
function _DecodeMacroblockLowpass($pSC,$pContext,$iMBX,$iMBYdummy) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 $iMBX = $iMBX|0;
 $iMBYdummy = $iMBYdummy|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aDC = 0, $aLaplacianMean = 0, $aRLCoeffs = 0, $aTemp = 0, $bandUpperLimit = 0, $cTemp = 0, $cf = 0, $err = 0, $getBits = 0;
 var $iCBP = 0, $iChannel = 0, $iChannels = 0, $iCount = 0, $iCountM = 0, $iCountZ = 0, $iFullPlanes = 0, $iIndex = 0, $iMax = 0, $iModelBits = 0, $iNumNonzero = 0, $iScale = 0, $iWeight = 0, $k = 0, $pCoeffs = 0, $pIO = 0, $pLM = 0, $pMBInfo = 0, $pRemap = 0, $pScan = 0;
 var $r1 = 0, $upperLimit = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aRLCoeffs = sp + 224|0;
 $aLaplacianMean = sp + 208|0;
 $aDC = sp + 8|0;
 $aTemp = sp + 112|0;
 $cTemp = sp + 184|0;
 $1 = $pSC;
 $2 = $pContext;
 $3 = $iMBX;
 $4 = $iMBYdummy;
 $5 = $1;
 $6 = (($5) + 34136|0);
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $cf = $8;
 $9 = $1;
 $10 = (($9) + 34136|0);
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $iChannels = $12;
 $13 = $cf;
 $14 = ($13|0)==(1);
 if ($14) {
  label = 3;
 } else {
  $15 = $cf;
  $16 = ($15|0)==(2);
  if ($16) {
   label = 3;
  } else {
   $17 = $iChannels;
   $18 = $17;
  }
 }
 if ((label|0) == 3) {
  $18 = 2;
 }
 $iFullPlanes = $18;
 $19 = $2;
 $20 = (($19) + 108|0);
 $pScan = $20;
 $21 = $2;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $pIO = $23;
 $24 = $2;
 $25 = (($24) + 512|0);
 $26 = (($25) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $iModelBits = $27;
 $iNumNonzero = 0;
 $iIndex = 0;
 ;HEAP32[$aLaplacianMean+0>>2]=0|0;HEAP32[$aLaplacianMean+4>>2]=0|0;
 $pLM = $aLaplacianMean;
 $iCBP = 0;
 $getBits = 93;
 $28 = $1;
 $29 = (($28) + 32976|0);
 $pMBInfo = $29;
 $30 = $1;
 $31 = (($30) + 84|0);
 $32 = (($31) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $1;
 $35 = (($34) + 4|0);
 $36 = (($35) + 76|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($33) + ($37))|0;
 $upperLimit = $38;
 $39 = $1;
 $40 = (($39) + 34280|0);
 $41 = HEAP32[$40>>2]|0;
 $bandUpperLimit = $41;
 $42 = $3;
 $3 = $42;
 $43 = $4;
 $4 = $43;
 $44 = $bandUpperLimit;
 $45 = (0)!=($44|0);
 if ($45) {
  $46 = $bandUpperLimit;
  $47 = $upperLimit;
  $48 = ($46>>>0)<($47>>>0);
  if ($48) {
   $49 = $bandUpperLimit;
   $upperLimit = $49;
  }
 }
 $50 = $pIO;
 $51 = (($50) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $upperLimit;
 $54 = ($52>>>0)<($53>>>0);
 do {
  if ($54) {
   $55 = $1;
   $56 = $pIO;
   $57 = (_readIS($55,$56)|0);
   $err = $57;
   $58 = $err;
   $59 = (0)!=($58|0);
   if (!($59)) {
    break;
   }
   $0 = -1;
   $610 = $0;
   STACKTOP = sp;return ($610|0);
  }
 } while(0);
 $60 = $1;
 $61 = (($60) + 84|0);
 $62 = (($61) + 28|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $1;
  $66 = (($65) + 34296|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $1;
  $69 = (($68) + 34316|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + (($67*240)|0)|0);
  $72 = (($71) + 194|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = ($74|0)>(0);
  if ($75) {
   $76 = $pIO;
   $77 = $1;
   $78 = (($77) + 34296|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $1;
   $81 = (($80) + 34316|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + (($79*240)|0)|0);
   $84 = (($83) + 194|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = (_decodeQPIndex($76,$85)|0);
   $87 = $pMBInfo;
   $88 = (($87) + 1156|0);
   HEAP8[$88>>0] = $86;
  }
 }
 $k = 0;
 while(1) {
  $89 = $k;
  $90 = $1;
  $91 = (($90) + 34136|0);
  $92 = (($91) + 36|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($89|0)<($93|0);
  if (!($94)) {
   break;
  }
  $95 = $k;
  $96 = $pMBInfo;
  $97 = (($96) + ($95<<6)|0);
  $98 = $k;
  $99 = $98 & 15;
  $100 = (($aDC) + ($99<<2)|0);
  HEAP32[$100>>2] = $97;
  $101 = $k;
  $102 = (($101) + 1)|0;
  $k = $102;
 }
 $103 = $1;
 $104 = (($103) + 34308|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = ($105|0)!=(0);
 if ($106) {
  $iScale = 2;
  $107 = $iScale;
  $108 = $107<<4;
  $iWeight = $108;
  $109 = $pScan;
  HEAP32[$109>>2] = 32767;
  $k = 1;
  while(1) {
   $110 = $k;
   $111 = ($110|0)<(16);
   if (!($111)) {
    break;
   }
   $112 = $iWeight;
   $113 = $k;
   $114 = $pScan;
   $115 = (($114) + ($113<<3)|0);
   HEAP32[$115>>2] = $112;
   $116 = $iScale;
   $117 = $iWeight;
   $118 = (($117) - ($116))|0;
   $iWeight = $118;
   $119 = $k;
   $120 = (($119) + 1)|0;
   $k = $120;
  }
 }
 $121 = $cf;
 $122 = ($121|0)==(1);
 if ($122) {
  label = 28;
 } else {
  $123 = $cf;
  $124 = ($123|0)==(2);
  if ($124) {
   label = 28;
  } else {
   $125 = $cf;
   $126 = ($125|0)==(3);
   if ($126) {
    label = 28;
   } else {
    $iChannel = 0;
    while(1) {
     $192 = $iChannel;
     $193 = $iChannels;
     $194 = ($192|0)<($193|0);
     if (!($194)) {
      break;
     }
     $195 = $getBits;
     $196 = $pIO;
     $197 = (FUNCTION_TABLE_iii[$195 & 255]($196,1)|0);
     $198 = $iChannel;
     $199 = $197 << $198;
     $200 = $iCBP;
     $201 = $200 | $199;
     $iCBP = $201;
     $202 = $iChannel;
     $203 = (($202) + 1)|0;
     $iChannel = $203;
    }
   }
  }
 }
 if ((label|0) == 28) {
  $127 = $2;
  $128 = (($127) + 556|0);
  $129 = HEAP32[$128>>2]|0;
  $iCountM = $129;
  $130 = $2;
  $131 = (($130) + 552|0);
  $132 = HEAP32[$131>>2]|0;
  $iCountZ = $132;
  $133 = $iFullPlanes;
  $134 = $133<<2;
  $135 = (($134) - 5)|0;
  $iMax = $135;
  $136 = $iCountZ;
  $137 = ($136|0)<=(0);
  if ($137) {
   label = 30;
  } else {
   $138 = $iCountM;
   $139 = ($138|0)<(0);
   if ($139) {
    label = 30;
   } else {
    $160 = $pIO;
    $161 = $iFullPlanes;
    $162 = (__getBit16($160,$161)|0);
    $iCBP = $162;
   }
  }
  if ((label|0) == 30) {
   $iCBP = 0;
   $140 = $pIO;
   $141 = (__getBool16($140)|0);
   $142 = ($141|0)!=(0);
   if ($142) {
    $iCBP = 1;
    $143 = $pIO;
    $144 = $iFullPlanes;
    $145 = (($144) - 1)|0;
    $146 = (__getBit16($143,$145)|0);
    $k = $146;
    $147 = $k;
    $148 = ($147|0)!=(0);
    if ($148) {
     $149 = $k;
     $150 = $149<<1;
     $151 = $pIO;
     $152 = (__getBit16($151,1)|0);
     $153 = (($150) + ($152))|0;
     $iCBP = $153;
    }
   }
   $154 = $iCountM;
   $155 = $iCountZ;
   $156 = ($154|0)<($155|0);
   if ($156) {
    $157 = $iMax;
    $158 = $iCBP;
    $159 = (($157) - ($158))|0;
    $iCBP = $159;
   }
  }
  $163 = $iCBP;
  $164 = $iMax;
  $165 = ($163|0)==($164|0);
  $166 = $165&1;
  $167 = $166<<2;
  $168 = (1 - ($167))|0;
  $169 = $iCountM;
  $170 = (($169) + ($168))|0;
  $iCountM = $170;
  $171 = $iCBP;
  $172 = ($171|0)==(0);
  $173 = $172&1;
  $174 = $173<<2;
  $175 = (1 - ($174))|0;
  $176 = $iCountZ;
  $177 = (($176) + ($175))|0;
  $iCountZ = $177;
  $178 = $iCountM;
  $179 = ($178|0)<(-8);
  if ($179) {
   $iCountM = -8;
  } else {
   $180 = $iCountM;
   $181 = ($180|0)>(7);
   if ($181) {
    $iCountM = 7;
   }
  }
  $182 = $iCountM;
  $183 = $2;
  $184 = (($183) + 556|0);
  HEAP32[$184>>2] = $182;
  $185 = $iCountZ;
  $186 = ($185|0)<(-8);
  if ($186) {
   $iCountZ = -8;
  } else {
   $187 = $iCountZ;
   $188 = ($187|0)>(7);
   if ($188) {
    $iCountZ = 7;
   }
  }
  $189 = $iCountZ;
  $190 = $2;
  $191 = (($190) + 552|0);
  HEAP32[$191>>2] = $189;
 }
 $204 = $2;
 $205 = (($204) + 512|0);
 $206 = (($205) + 8|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = ($207|0)>(14);
 if ($208) {
  label = 56;
 } else {
  $209 = $2;
  $210 = (($209) + 512|0);
  $211 = (($210) + 8|0);
  $212 = (($211) + 4|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ($213|0)>(14);
  if ($214) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $getBits = 94;
 }
 $iChannel = 0;
 while(1) {
  $215 = $iChannel;
  $216 = $iFullPlanes;
  $217 = ($215|0)<($216|0);
  if (!($217)) {
   break;
  }
  $218 = $iChannel;
  $219 = (($aDC) + ($218<<2)|0);
  $220 = HEAP32[$219>>2]|0;
  $pCoeffs = $220;
  $221 = $iCBP;
  $222 = $221 & 1;
  $223 = ($222|0)!=(0);
  if ($223) {
   $224 = $iChannel;
   $225 = ($224|0)>(0);
   $226 = $225&1;
   $227 = $2;
   $228 = (($227) + 24|0);
   $229 = $pIO;
   $230 = $cf;
   $231 = ($230|0)==(1);
   if ($231) {
    $232 = $iChannel;
    $233 = ($232|0)==(1);
    $235 = $233;
   } else {
    $235 = 0;
   }
   $234 = $235&1;
   $236 = ($234*9)|0;
   $237 = (1 + ($236))|0;
   $238 = $cf;
   $239 = ($238|0)==(2);
   if ($239) {
    $240 = $iChannel;
    $241 = ($240|0)==(1);
    $243 = $241;
   } else {
    $243 = 0;
   }
   $242 = $243&1;
   $244 = (($237) + ($242))|0;
   $245 = (_DecodeBlock($226,$aRLCoeffs,$228,5,$229,$244)|0);
   $iNumNonzero = $245;
   $246 = $cf;
   $247 = ($246|0)==(1);
   if ($247) {
    label = 66;
   } else {
    $248 = $cf;
    $249 = ($248|0)==(2);
    if ($249) {
     label = 66;
    } else {
     label = 76;
    }
   }
   if ((label|0) == 66) {
    label = 0;
    $250 = $iChannel;
    $251 = ($250|0)!=(0);
    if ($251) {
     $252 = $cf;
     $253 = ($252|0)==(1);
     $254 = $253&1;
     $255 = (7744 + ($254<<2)|0);
     $pRemap = $255;
     $256 = $cf;
     $257 = ($256|0)==(1);
     $258 = $257 ? 6 : 14;
     $iCount = $258;
     $259 = $iNumNonzero;
     $260 = $pLM;
     $261 = HEAP32[$260>>2]|0;
     $262 = (($261) + ($259))|0;
     HEAP32[$260>>2] = $262;
     $iIndex = 0;
     dest=$aTemp+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $k = 0;
     while(1) {
      $263 = $k;
      $264 = $iNumNonzero;
      $265 = ($263|0)<($264|0);
      if (!($265)) {
       break;
      }
      $266 = $k;
      $267 = $266<<1;
      $268 = (($aRLCoeffs) + ($267<<2)|0);
      $269 = HEAP32[$268>>2]|0;
      $270 = $iIndex;
      $271 = (($270) + ($269))|0;
      $iIndex = $271;
      $272 = $k;
      $273 = $272<<1;
      $274 = (($273) + 1)|0;
      $275 = (($aRLCoeffs) + ($274<<2)|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = $iIndex;
      $278 = $277 & 15;
      $279 = (($aTemp) + ($278<<2)|0);
      HEAP32[$279>>2] = $276;
      $280 = $iIndex;
      $281 = (($280) + 1)|0;
      $iIndex = $281;
      $282 = $k;
      $283 = (($282) + 1)|0;
      $k = $283;
     }
     $k = 0;
     while(1) {
      $284 = $k;
      $285 = $iCount;
      $286 = ($284|0)<($285|0);
      if (!($286)) {
       break;
      }
      $287 = $k;
      $288 = (($aTemp) + ($287<<2)|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = $k;
      $291 = $290 >> 1;
      $292 = $pRemap;
      $293 = (($292) + ($291<<2)|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = $k;
      $296 = $295 & 1;
      $297 = (($296) + 1)|0;
      $298 = (($aDC) + ($297<<2)|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = (($299) + ($294<<2)|0);
      HEAP32[$300>>2] = $289;
      $301 = $k;
      $302 = (($301) + 1)|0;
      $k = $302;
     }
    } else {
     label = 76;
    }
   }
   if ((label|0) == 76) {
    label = 0;
    $303 = $iNumNonzero;
    $304 = $pLM;
    $305 = HEAP32[$304>>2]|0;
    $306 = (($305) + ($303))|0;
    HEAP32[$304>>2] = $306;
    $iIndex = 1;
    $k = 0;
    while(1) {
     $307 = $k;
     $308 = $iNumNonzero;
     $309 = ($307|0)<($308|0);
     if (!($309)) {
      break;
     }
     $310 = $k;
     $311 = $310<<1;
     $312 = (($aRLCoeffs) + ($311<<2)|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $iIndex;
     $315 = (($314) + ($313))|0;
     $iIndex = $315;
     $316 = $k;
     $317 = $316<<1;
     $318 = (($317) + 1)|0;
     $319 = (($aRLCoeffs) + ($318<<2)|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = $iIndex;
     $322 = $pScan;
     $323 = (($322) + ($321<<3)|0);
     $324 = (($323) + 4|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $pCoeffs;
     $327 = (($326) + ($325<<2)|0);
     HEAP32[$327>>2] = $320;
     $328 = $iIndex;
     $329 = $pScan;
     $330 = (($329) + ($328<<3)|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = (($331) + 1)|0;
     HEAP32[$330>>2] = $332;
     $333 = $iIndex;
     $334 = $pScan;
     $335 = (($334) + ($333<<3)|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = $iIndex;
     $338 = (($337) - 1)|0;
     $339 = $pScan;
     $340 = (($339) + ($338<<3)|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = ($336>>>0)>($341>>>0);
     if ($342) {
      $343 = $iIndex;
      $344 = $pScan;
      $345 = (($344) + ($343<<3)|0);
      ;HEAP32[$cTemp+0>>2]=HEAP32[$345+0>>2]|0;HEAP32[$cTemp+4>>2]=HEAP32[$345+4>>2]|0;
      $346 = $iIndex;
      $347 = $pScan;
      $348 = (($347) + ($346<<3)|0);
      $349 = $iIndex;
      $350 = (($349) - 1)|0;
      $351 = $pScan;
      $352 = (($351) + ($350<<3)|0);
      ;HEAP32[$348+0>>2]=HEAP32[$352+0>>2]|0;HEAP32[$348+4>>2]=HEAP32[$352+4>>2]|0;
      $353 = $iIndex;
      $354 = (($353) - 1)|0;
      $355 = $pScan;
      $356 = (($355) + ($354<<3)|0);
      ;HEAP32[$356+0>>2]=HEAP32[$cTemp+0>>2]|0;HEAP32[$356+4>>2]=HEAP32[$cTemp+4>>2]|0;
     }
     $357 = $iIndex;
     $358 = (($357) + 1)|0;
     $iIndex = $358;
     $359 = $k;
     $360 = (($359) + 1)|0;
     $k = $360;
    }
   }
  }
  $361 = $iModelBits;
  $362 = ($361|0)!=(0);
  if ($362) {
   $363 = $cf;
   $364 = ($363|0)==(1);
   if ($364) {
    label = 87;
   } else {
    $365 = $cf;
    $366 = ($365|0)==(2);
    if ($366) {
     label = 87;
    } else {
     label = 111;
    }
   }
   if ((label|0) == 87) {
    label = 0;
    $367 = $iChannel;
    $368 = ($367|0)!=(0);
    if ($368) {
     $k = 1;
     while(1) {
      $369 = $k;
      $370 = $cf;
      $371 = ($370|0)==(1);
      $372 = $371 ? 4 : 8;
      $373 = ($369|0)<($372|0);
      if (!($373)) {
       break;
      }
      $374 = $k;
      $375 = (($aDC) + 4|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = (($376) + ($374<<2)|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = ($378|0)>(0);
      if ($379) {
       $380 = $iModelBits;
       $381 = $k;
       $382 = (($aDC) + 4|0);
       $383 = HEAP32[$382>>2]|0;
       $384 = (($383) + ($381<<2)|0);
       $385 = HEAP32[$384>>2]|0;
       $386 = $385 << $380;
       HEAP32[$384>>2] = $386;
       $387 = $getBits;
       $388 = $pIO;
       $389 = $iModelBits;
       $390 = (FUNCTION_TABLE_iii[$387 & 255]($388,$389)|0);
       $391 = $k;
       $392 = (($aDC) + 4|0);
       $393 = HEAP32[$392>>2]|0;
       $394 = (($393) + ($391<<2)|0);
       $395 = HEAP32[$394>>2]|0;
       $396 = (($395) + ($390))|0;
       HEAP32[$394>>2] = $396;
      } else {
       $397 = $k;
       $398 = (($aDC) + 4|0);
       $399 = HEAP32[$398>>2]|0;
       $400 = (($399) + ($397<<2)|0);
       $401 = HEAP32[$400>>2]|0;
       $402 = ($401|0)<(0);
       if ($402) {
        $403 = $iModelBits;
        $404 = $k;
        $405 = (($aDC) + 4|0);
        $406 = HEAP32[$405>>2]|0;
        $407 = (($406) + ($404<<2)|0);
        $408 = HEAP32[$407>>2]|0;
        $409 = $408 << $403;
        HEAP32[$407>>2] = $409;
        $410 = $getBits;
        $411 = $pIO;
        $412 = $iModelBits;
        $413 = (FUNCTION_TABLE_iii[$410 & 255]($411,$412)|0);
        $414 = $k;
        $415 = (($aDC) + 4|0);
        $416 = HEAP32[$415>>2]|0;
        $417 = (($416) + ($414<<2)|0);
        $418 = HEAP32[$417>>2]|0;
        $419 = (($418) - ($413))|0;
        HEAP32[$417>>2] = $419;
       } else {
        $420 = $getBits;
        $421 = $pIO;
        $422 = $iModelBits;
        $423 = (FUNCTION_TABLE_iii[$420 & 255]($421,$422)|0);
        $424 = $k;
        $425 = (($aDC) + 4|0);
        $426 = HEAP32[$425>>2]|0;
        $427 = (($426) + ($424<<2)|0);
        HEAP32[$427>>2] = $423;
        $428 = $k;
        $429 = (($aDC) + 4|0);
        $430 = HEAP32[$429>>2]|0;
        $431 = (($430) + ($428<<2)|0);
        $432 = HEAP32[$431>>2]|0;
        $433 = ($432|0)!=(0);
        do {
         if ($433) {
          $434 = $pIO;
          $435 = (__getBool16($434)|0);
          $436 = ($435|0)!=(0);
          if (!($436)) {
           break;
          }
          $437 = $k;
          $438 = (($aDC) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = (($439) + ($437<<2)|0);
          $441 = HEAP32[$440>>2]|0;
          $442 = (0 - ($441))|0;
          $443 = $k;
          $444 = (($aDC) + 4|0);
          $445 = HEAP32[$444>>2]|0;
          $446 = (($445) + ($443<<2)|0);
          HEAP32[$446>>2] = $442;
         }
        } while(0);
       }
      }
      $447 = $k;
      $448 = (($aDC) + 8|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = (($449) + ($447<<2)|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = ($451|0)>(0);
      if ($452) {
       $453 = $iModelBits;
       $454 = $k;
       $455 = (($aDC) + 8|0);
       $456 = HEAP32[$455>>2]|0;
       $457 = (($456) + ($454<<2)|0);
       $458 = HEAP32[$457>>2]|0;
       $459 = $458 << $453;
       HEAP32[$457>>2] = $459;
       $460 = $getBits;
       $461 = $pIO;
       $462 = $iModelBits;
       $463 = (FUNCTION_TABLE_iii[$460 & 255]($461,$462)|0);
       $464 = $k;
       $465 = (($aDC) + 8|0);
       $466 = HEAP32[$465>>2]|0;
       $467 = (($466) + ($464<<2)|0);
       $468 = HEAP32[$467>>2]|0;
       $469 = (($468) + ($463))|0;
       HEAP32[$467>>2] = $469;
      } else {
       $470 = $k;
       $471 = (($aDC) + 8|0);
       $472 = HEAP32[$471>>2]|0;
       $473 = (($472) + ($470<<2)|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = ($474|0)<(0);
       if ($475) {
        $476 = $iModelBits;
        $477 = $k;
        $478 = (($aDC) + 8|0);
        $479 = HEAP32[$478>>2]|0;
        $480 = (($479) + ($477<<2)|0);
        $481 = HEAP32[$480>>2]|0;
        $482 = $481 << $476;
        HEAP32[$480>>2] = $482;
        $483 = $getBits;
        $484 = $pIO;
        $485 = $iModelBits;
        $486 = (FUNCTION_TABLE_iii[$483 & 255]($484,$485)|0);
        $487 = $k;
        $488 = (($aDC) + 8|0);
        $489 = HEAP32[$488>>2]|0;
        $490 = (($489) + ($487<<2)|0);
        $491 = HEAP32[$490>>2]|0;
        $492 = (($491) - ($486))|0;
        HEAP32[$490>>2] = $492;
       } else {
        $493 = $getBits;
        $494 = $pIO;
        $495 = $iModelBits;
        $496 = (FUNCTION_TABLE_iii[$493 & 255]($494,$495)|0);
        $497 = $k;
        $498 = (($aDC) + 8|0);
        $499 = HEAP32[$498>>2]|0;
        $500 = (($499) + ($497<<2)|0);
        HEAP32[$500>>2] = $496;
        $501 = $k;
        $502 = (($aDC) + 8|0);
        $503 = HEAP32[$502>>2]|0;
        $504 = (($503) + ($501<<2)|0);
        $505 = HEAP32[$504>>2]|0;
        $506 = ($505|0)!=(0);
        do {
         if ($506) {
          $507 = $pIO;
          $508 = (__getBool16($507)|0);
          $509 = ($508|0)!=(0);
          if (!($509)) {
           break;
          }
          $510 = $k;
          $511 = (($aDC) + 8|0);
          $512 = HEAP32[$511>>2]|0;
          $513 = (($512) + ($510<<2)|0);
          $514 = HEAP32[$513>>2]|0;
          $515 = (0 - ($514))|0;
          $516 = $k;
          $517 = (($aDC) + 8|0);
          $518 = HEAP32[$517>>2]|0;
          $519 = (($518) + ($516<<2)|0);
          HEAP32[$519>>2] = $515;
         }
        } while(0);
       }
      }
      $520 = $k;
      $521 = (($520) + 1)|0;
      $k = $521;
     }
    } else {
     label = 111;
    }
   }
   if ((label|0) == 111) {
    label = 0;
    $k = 1;
    while(1) {
     $522 = $k;
     $523 = ($522|0)<(16);
     if (!($523)) {
      break;
     }
     $524 = $k;
     $525 = $pCoeffs;
     $526 = (($525) + ($524<<2)|0);
     $527 = HEAP32[$526>>2]|0;
     $528 = ($527|0)>(0);
     if ($528) {
      $529 = $iModelBits;
      $530 = $k;
      $531 = $pCoeffs;
      $532 = (($531) + ($530<<2)|0);
      $533 = HEAP32[$532>>2]|0;
      $534 = $533 << $529;
      HEAP32[$532>>2] = $534;
      $535 = $getBits;
      $536 = $pIO;
      $537 = $iModelBits;
      $538 = (FUNCTION_TABLE_iii[$535 & 255]($536,$537)|0);
      $539 = $k;
      $540 = $pCoeffs;
      $541 = (($540) + ($539<<2)|0);
      $542 = HEAP32[$541>>2]|0;
      $543 = (($542) + ($538))|0;
      HEAP32[$541>>2] = $543;
     } else {
      $544 = $k;
      $545 = $pCoeffs;
      $546 = (($545) + ($544<<2)|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = ($547|0)<(0);
      if ($548) {
       $549 = $iModelBits;
       $550 = $k;
       $551 = $pCoeffs;
       $552 = (($551) + ($550<<2)|0);
       $553 = HEAP32[$552>>2]|0;
       $554 = $553 << $549;
       HEAP32[$552>>2] = $554;
       $555 = $getBits;
       $556 = $pIO;
       $557 = $iModelBits;
       $558 = (FUNCTION_TABLE_iii[$555 & 255]($556,$557)|0);
       $559 = $k;
       $560 = $pCoeffs;
       $561 = (($560) + ($559<<2)|0);
       $562 = HEAP32[$561>>2]|0;
       $563 = (($562) - ($558))|0;
       HEAP32[$561>>2] = $563;
      } else {
       $564 = $pIO;
       $565 = $iModelBits;
       $566 = (($565) + 1)|0;
       $567 = (__peekBit16($564,$566)|0);
       $r1 = $567;
       $568 = $r1;
       $569 = $568 >> 1;
       $570 = $r1;
       $571 = $570 & 1;
       $572 = (0 - ($571))|0;
       $573 = $569 ^ $572;
       $574 = $r1;
       $575 = $574 & 1;
       $576 = (($573) + ($575))|0;
       $577 = $k;
       $578 = $pCoeffs;
       $579 = (($578) + ($577<<2)|0);
       HEAP32[$579>>2] = $576;
       $580 = $pIO;
       $581 = $iModelBits;
       $582 = $k;
       $583 = $pCoeffs;
       $584 = (($583) + ($582<<2)|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = ($585|0)!=(0);
       $587 = $586&1;
       $588 = (($581) + ($587))|0;
       (__flushBit16($580,$588)|0);
      }
     }
     $589 = $k;
     $590 = (($589) + 1)|0;
     $k = $590;
    }
   }
  }
  $591 = (($aLaplacianMean) + 4|0);
  $pLM = $591;
  $592 = $2;
  $593 = (($592) + 512|0);
  $594 = (($593) + 8|0);
  $595 = (($594) + 4|0);
  $596 = HEAP32[$595>>2]|0;
  $iModelBits = $596;
  $597 = $iCBP;
  $598 = $597 >> 1;
  $iCBP = $598;
  $599 = $iChannel;
  $600 = (($599) + 1)|0;
  $iChannel = $600;
 }
 $601 = $cf;
 $602 = $iChannels;
 $603 = $2;
 $604 = (($603) + 512|0);
 _UpdateModelMB($601,$602,$aLaplacianMean,$604);
 $605 = $1;
 $606 = (($605) + 34312|0);
 $607 = HEAP32[$606>>2]|0;
 $608 = ($607|0)!=(0);
 if ($608) {
  $609 = $2;
  (_AdaptLowpassDec($609)|0);
 }
 $0 = 0;
 $610 = $0;
 STACKTOP = sp;return ($610|0);
}
function _DecodeBlock($bChroma,$aLocalCoef,$pAHexpt,$iContextOffset,$pIO,$iLocation) {
 $bChroma = $bChroma|0;
 $aLocalCoef = $aLocalCoef|0;
 $pAHexpt = $pAHexpt|0;
 $iContextOffset = $iContextOffset|0;
 $pIO = $pIO|0;
 $iLocation = $iLocation|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iCont = 0, $iIndex = 0;
 var $iNumNonzero = 0, $iSR = 0, $iSRn = 0, $iSign = 0, $pAH1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iIndex = sp + 12|0;
 $0 = $bChroma;
 $1 = $aLocalCoef;
 $2 = $pAHexpt;
 $3 = $iContextOffset;
 $4 = $pIO;
 $5 = $iLocation;
 $iNumNonzero = 1;
 $6 = $2;
 $7 = $3;
 $8 = (($6) + ($7<<2)|0);
 $9 = $0;
 $10 = ($9*3)|0;
 $11 = (($8) + ($10<<2)|0);
 $pAH1 = $11;
 $12 = $pAH1;
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 _DecodeFirstIndex($iIndex,$13,$14);
 $15 = HEAP32[$iIndex>>2]|0;
 $16 = $15 & 1;
 $iSR = $16;
 $17 = HEAP32[$iIndex>>2]|0;
 $18 = $17 >> 2;
 $iSRn = $18;
 $19 = $iSR;
 $20 = $iSRn;
 $21 = $19 & $20;
 $iCont = $21;
 $22 = $4;
 $23 = (__getSign($22)|0);
 $iSign = $23;
 $24 = HEAP32[$iIndex>>2]|0;
 $25 = $24 & 2;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $3;
  $28 = (6 + ($27))|0;
  $29 = $iCont;
  $30 = (($28) + ($29))|0;
  $31 = $2;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $4;
  $35 = (_DecodeSignificantAbsLevel($33,$34)|0);
  $36 = $iSign;
  $37 = $35 ^ $36;
  $38 = $iSign;
  $39 = (($37) - ($38))|0;
  $40 = $1;
  $41 = (($40) + 4|0);
  HEAP32[$41>>2] = $39;
 } else {
  $42 = $iSign;
  $43 = 1 | $42;
  $44 = $1;
  $45 = (($44) + 4|0);
  HEAP32[$45>>2] = $43;
 }
 $46 = $1;
 HEAP32[$46>>2] = 0;
 $47 = $iSR;
 $48 = ($47|0)==(0);
 if ($48) {
  $49 = $5;
  $50 = (15 - ($49))|0;
  $51 = $2;
  $52 = HEAP32[$51>>2]|0;
  $53 = $4;
  $54 = (_DecodeSignificantRun($50,$52,$53)|0);
  $55 = $1;
  HEAP32[$55>>2] = $54;
 }
 $56 = $1;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + 1)|0;
 $59 = $5;
 $60 = (($59) + ($58))|0;
 $5 = $60;
 while(1) {
  $61 = $iSRn;
  $62 = ($61|0)!=(0);
  if (!($62)) {
   label = 17;
   break;
  }
  $63 = $iSRn;
  $64 = $63 & 1;
  $iSR = $64;
  $65 = $iNumNonzero;
  $66 = $65<<1;
  $67 = $1;
  $68 = (($67) + ($66<<2)|0);
  HEAP32[$68>>2] = 0;
  $69 = $iSR;
  $70 = ($69|0)==(0);
  if ($70) {
   $71 = $5;
   $72 = (15 - ($71))|0;
   $73 = $2;
   $74 = HEAP32[$73>>2]|0;
   $75 = $4;
   $76 = (_DecodeSignificantRun($72,$74,$75)|0);
   $77 = $iNumNonzero;
   $78 = $77<<1;
   $79 = $1;
   $80 = (($79) + ($78<<2)|0);
   HEAP32[$80>>2] = $76;
  }
  $81 = $iNumNonzero;
  $82 = $81<<1;
  $83 = $1;
  $84 = (($83) + ($82<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + 1)|0;
  $87 = $5;
  $88 = (($87) + ($86))|0;
  $5 = $88;
  $89 = $5;
  $90 = $iCont;
  $91 = (($90) + 1)|0;
  $92 = $pAH1;
  $93 = (($92) + ($91<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $4;
  _DecodeIndex($iIndex,$89,$94,$95);
  $96 = HEAP32[$iIndex>>2]|0;
  $97 = $96 >> 1;
  $iSRn = $97;
  $98 = $iSRn;
  $99 = ($98|0)>=(0);
  if (!($99)) {
   label = 12;
   break;
  }
  $100 = $iSRn;
  $101 = ($100|0)<(3);
  if (!($101)) {
   label = 12;
   break;
  }
  $102 = $iSRn;
  $103 = $iCont;
  $104 = $103 & $102;
  $iCont = $104;
  $105 = $4;
  $106 = (__getSign($105)|0);
  $iSign = $106;
  $107 = HEAP32[$iIndex>>2]|0;
  $108 = $107 & 1;
  $109 = ($108|0)!=(0);
  if ($109) {
   $110 = $3;
   $111 = (6 + ($110))|0;
   $112 = $iCont;
   $113 = (($111) + ($112))|0;
   $114 = $2;
   $115 = (($114) + ($113<<2)|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $4;
   $118 = (_DecodeSignificantAbsLevel($116,$117)|0);
   $119 = $iSign;
   $120 = $118 ^ $119;
   $121 = $iSign;
   $122 = (($120) - ($121))|0;
   $123 = $iNumNonzero;
   $124 = $123<<1;
   $125 = (($124) + 1)|0;
   $126 = $1;
   $127 = (($126) + ($125<<2)|0);
   HEAP32[$127>>2] = $122;
  } else {
   $128 = $iSign;
   $129 = 1 | $128;
   $130 = $iNumNonzero;
   $131 = $130<<1;
   $132 = (($131) + 1)|0;
   $133 = $1;
   $134 = (($133) + ($132<<2)|0);
   HEAP32[$134>>2] = $129;
  }
  $135 = $iNumNonzero;
  $136 = (($135) + 1)|0;
  $iNumNonzero = $136;
 }
 if ((label|0) == 12) {
  ___assert_fail((8000|0),(7904|0),486,(8392|0));
  // unreachable;
 }
 else if ((label|0) == 17) {
  $137 = $iNumNonzero;
  STACKTOP = sp;return ($137|0);
 }
 return 0|0;
}
function __peekBit16($pIO,$cBits) {
 $pIO = $pIO|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cBits;
 $2 = $1;
 $3 = (0)<=($2|0);
 if ($3) {
  $4 = $1;
  $5 = ($4>>>0)<=(16);
  if ($5) {
   $6 = $0;
   $7 = (($6) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $1;
   $10 = (32 - ($9))|0;
   $11 = $8 >>> $10;
   STACKTOP = sp;return ($11|0);
  }
 }
 ___assert_fail((8304|0),(7904|0),73,(8376|0));
 // unreachable;
 return 0|0;
}
function __flushBit16($pIO,$cBits) {
 $pIO = $pIO|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cBits;
 $2 = $1;
 $3 = (0)<=($2|0);
 if (!($3)) {
  ___assert_fail((8304|0),(7904|0),80,(8336|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4>>>0)<=(16);
 if (!($5)) {
  ___assert_fail((8304|0),(7904|0),80,(8336|0));
  // unreachable;
 }
 $6 = $0;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $1;
  $12 = $0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11))|0;
  HEAP32[$13>>2] = $15;
  $16 = $0;
  $17 = (($16) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 >>> 3;
  $23 = (($18) + ($22)|0);
  $24 = $23;
  $25 = $0;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $24 & $27;
  $29 = $28;
  $30 = $0;
  $31 = (($30) + 20|0);
  HEAP32[$31>>2] = $29;
  $32 = $0;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & 15;
  HEAP32[$33>>2] = $35;
  $36 = $0;
  $37 = (($36) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (__load4($38)|0);
  $40 = $0;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $39 << $42;
  $44 = $0;
  $45 = (($44) + 4|0);
  HEAP32[$45>>2] = $43;
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((8352|0),(7904|0),80,(8336|0));
  // unreachable;
 }
 return 0|0;
}
function _AdaptLowpassDec($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $kk = 0;
 while(1) {
  $2 = $kk;
  $3 = ($2|0)<(13);
  if (!($3)) {
   label = 7;
   break;
  }
  $4 = $kk;
  $5 = $1;
  $6 = (($5) + 24|0);
  $7 = (($6) + ($4<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_AdaptDecFixed($8)|0);
  $10 = (0)!=($9|0);
  if ($10) {
   break;
  }
  $11 = $kk;
  $12 = (($11) + 1)|0;
  $kk = $12;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $0 = -1;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _DecodeMacroblockDC($pSC,$pContext,$iMBX,$iMBY) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 $iMBX = $iMBX|0;
 $iMBY = $iMBY|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $aLaplacianMean = 0, $bandUpperLimit = 0, $cf = 0, $err = 0, $i = 0, $iChannels = 0, $iIndex = 0, $iModelBits = 0, $iQDCU = 0, $iQDCV = 0, $iQDCY = 0, $kk = 0, $pAH = 0, $pIO = 0, $pLM = 0, $pMBInfo = 0, $pTile = 0, $upperLimit = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aLaplacianMean = sp + 16|0;
 $1 = $pSC;
 $2 = $pContext;
 $3 = $iMBX;
 $4 = $iMBY;
 $5 = $1;
 $6 = (($5) + 34316|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = (($8) + 34296|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + (($10*240)|0)|0);
 $pTile = $11;
 $12 = $1;
 $13 = (($12) + 32976|0);
 $pMBInfo = $13;
 $14 = $1;
 $15 = (($14) + 34136|0);
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $cf = $17;
 $18 = $1;
 $19 = (($18) + 34136|0);
 $20 = (($19) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $iChannels = $21;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $pIO = $23;
 ;HEAP32[$aLaplacianMean+0>>2]=0|0;HEAP32[$aLaplacianMean+4>>2]=0|0;
 $pLM = $aLaplacianMean;
 $24 = $2;
 $25 = (($24) + 532|0);
 $26 = (($25) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $iModelBits = $27;
 $28 = $1;
 $29 = (($28) + 84|0);
 $30 = (($29) + 60|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $1;
 $33 = (($32) + 4|0);
 $34 = (($33) + 76|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($31) + ($35))|0;
 $upperLimit = $36;
 $37 = $1;
 $38 = (($37) + 34280|0);
 $39 = HEAP32[$38>>2]|0;
 $bandUpperLimit = $39;
 $40 = $3;
 $3 = $40;
 $41 = $4;
 $4 = $41;
 $42 = $bandUpperLimit;
 $43 = (0)!=($42|0);
 if ($43) {
  $44 = $bandUpperLimit;
  $45 = $upperLimit;
  $46 = ($44>>>0)<($45>>>0);
  if ($46) {
   $47 = $bandUpperLimit;
   $upperLimit = $47;
  }
 }
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = $iChannels;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $pMBInfo;
  $53 = (($52) + ($51<<6)|0);
  dest=$53+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $56 = $pIO;
 $57 = (($56) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $upperLimit;
 $60 = ($58>>>0)<($59>>>0);
 do {
  if ($60) {
   $61 = $1;
   $62 = $pIO;
   $63 = (_readIS($61,$62)|0);
   $err = $63;
   $64 = $err;
   $65 = (0)!=($64|0);
   if (!($65)) {
    break;
   }
   $0 = -1;
   $341 = $0;
   STACKTOP = sp;return ($341|0);
  }
 } while(0);
 $66 = $pMBInfo;
 $67 = (($66) + 1157|0);
 HEAP8[$67>>0] = 0;
 $68 = $pMBInfo;
 $69 = (($68) + 1156|0);
 HEAP8[$69>>0] = 0;
 $70 = $1;
 $71 = (($70) + 84|0);
 $72 = (($71) + 28|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0);
 if ($74) {
  $75 = $1;
  $76 = (($75) + 84|0);
  $77 = (($76) + 44|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)!=(3);
  if ($79) {
   $80 = $pTile;
   $81 = (($80) + 194|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = ($83|0)>(0);
   if ($84) {
    $85 = $pIO;
    $86 = $pTile;
    $87 = (($86) + 194|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = (_decodeQPIndex($85,$88)|0);
    $90 = $pMBInfo;
    $91 = (($90) + 1156|0);
    HEAP8[$91>>0] = $89;
   }
   $92 = $1;
   $93 = (($92) + 84|0);
   $94 = (($93) + 44|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)!=(2);
   if ($96) {
    $97 = $pTile;
    $98 = (($97) + 195|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = ($100|0)>(0);
    if ($101) {
     $102 = $pIO;
     $103 = $pTile;
     $104 = (($103) + 195|0);
     $105 = HEAP8[$104>>0]|0;
     $106 = (_decodeQPIndex($102,$105)|0);
     $107 = $pMBInfo;
     $108 = (($107) + 1157|0);
     HEAP8[$108>>0] = $106;
    }
   }
  }
 }
 $109 = $pTile;
 $110 = (($109) + 195|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = $pTile;
  $115 = (($114) + 193|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&255;
  $118 = ($117|0)>(1);
  if ($118) {
   $119 = $pMBInfo;
   $120 = (($119) + 1156|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $pMBInfo;
   $123 = (($122) + 1157|0);
   HEAP8[$123>>0] = $121;
  }
 }
 $124 = $pMBInfo;
 $125 = (($124) + 1156|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = $pTile;
 $129 = (($128) + 192|0);
 $130 = HEAP8[$129>>0]|0;
 $131 = $130&255;
 $132 = ($127|0)>=($131|0);
 if (!($132)) {
  $133 = $pMBInfo;
  $134 = (($133) + 1157|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = $pTile;
  $138 = (($137) + 193|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $139&255;
  $141 = ($136|0)>=($140|0);
  if (!($141)) {
   $142 = $cf;
   $143 = ($142|0)==(0);
   if ($143) {
    label = 29;
   } else {
    $144 = $cf;
    $145 = ($144|0)==(4);
    if ($145) {
     label = 29;
    } else {
     $146 = $cf;
     $147 = ($146|0)==(6);
     if ($147) {
      label = 29;
     } else {
      $192 = $2;
      $193 = (($192) + 24|0);
      $194 = (($193) + 8|0);
      $195 = HEAP32[$194>>2]|0;
      $pAH = $195;
      $196 = $pAH;
      $197 = (($196) + 20|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = $pIO;
      $200 = (_getHuff($198,$199)|0);
      $iIndex = $200;
      $201 = $iIndex;
      $202 = $201 >> 2;
      $iQDCY = $202;
      $203 = $iIndex;
      $204 = $203 >> 1;
      $205 = $204 & 1;
      $iQDCU = $205;
      $206 = $iIndex;
      $207 = $206 & 1;
      $iQDCV = $207;
      $208 = $iQDCY;
      $209 = ($208|0)!=(0);
      if ($209) {
       $210 = $2;
       $211 = (($210) + 24|0);
       $212 = (($211) + 12|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = $pIO;
       $215 = (_DecodeSignificantAbsLevel($213,$214)|0);
       $216 = (($215) - 1)|0;
       $iQDCY = $216;
       $217 = $pLM;
       $218 = HEAP32[$217>>2]|0;
       $219 = (($218) + 1)|0;
       HEAP32[$217>>2] = $219;
      }
      $220 = $iModelBits;
      $221 = ($220|0)!=(0);
      if ($221) {
       $222 = $iQDCY;
       $223 = $iModelBits;
       $224 = $222 << $223;
       $225 = $pIO;
       $226 = $iModelBits;
       $227 = (__getBit16($225,$226)|0);
       $228 = $224 | $227;
       $iQDCY = $228;
      }
      $229 = $iQDCY;
      $230 = ($229|0)!=(0);
      if ($230) {
       $231 = $pIO;
       $232 = (__getBool16($231)|0);
       $233 = ($232|0)!=(0);
       if ($233) {
        $234 = $iQDCY;
        $235 = (0 - ($234))|0;
        $iQDCY = $235;
       }
      }
      $236 = $iQDCY;
      $237 = $pMBInfo;
      HEAP32[$237>>2] = $236;
      $238 = (($aLaplacianMean) + 4|0);
      $pLM = $238;
      $239 = $2;
      $240 = (($239) + 532|0);
      $241 = (($240) + 8|0);
      $242 = (($241) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $iModelBits = $243;
      $244 = $iQDCU;
      $245 = ($244|0)!=(0);
      if ($245) {
       $246 = $2;
       $247 = (($246) + 24|0);
       $248 = (($247) + 16|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = $pIO;
       $251 = (_DecodeSignificantAbsLevel($249,$250)|0);
       $252 = (($251) - 1)|0;
       $iQDCU = $252;
       $253 = $pLM;
       $254 = HEAP32[$253>>2]|0;
       $255 = (($254) + 1)|0;
       HEAP32[$253>>2] = $255;
      }
      $256 = $iModelBits;
      $257 = ($256|0)!=(0);
      if ($257) {
       $258 = $iQDCU;
       $259 = $iModelBits;
       $260 = $258 << $259;
       $261 = $pIO;
       $262 = $iModelBits;
       $263 = (__getBit16($261,$262)|0);
       $264 = $260 | $263;
       $iQDCU = $264;
      }
      $265 = $iQDCU;
      $266 = ($265|0)!=(0);
      if ($266) {
       $267 = $pIO;
       $268 = (__getBool16($267)|0);
       $269 = ($268|0)!=(0);
       if ($269) {
        $270 = $iQDCU;
        $271 = (0 - ($270))|0;
        $iQDCU = $271;
       }
      }
      $272 = $iQDCU;
      $273 = $pMBInfo;
      $274 = (($273) + 64|0);
      HEAP32[$274>>2] = $272;
      $275 = $iQDCV;
      $276 = ($275|0)!=(0);
      if ($276) {
       $277 = $2;
       $278 = (($277) + 24|0);
       $279 = (($278) + 16|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = $pIO;
       $282 = (_DecodeSignificantAbsLevel($280,$281)|0);
       $283 = (($282) - 1)|0;
       $iQDCV = $283;
       $284 = $pLM;
       $285 = HEAP32[$284>>2]|0;
       $286 = (($285) + 1)|0;
       HEAP32[$284>>2] = $286;
      }
      $287 = $iModelBits;
      $288 = ($287|0)!=(0);
      if ($288) {
       $289 = $iQDCV;
       $290 = $iModelBits;
       $291 = $289 << $290;
       $292 = $pIO;
       $293 = $iModelBits;
       $294 = (__getBit16($292,$293)|0);
       $295 = $291 | $294;
       $iQDCV = $295;
      }
      $296 = $iQDCV;
      $297 = ($296|0)!=(0);
      do {
       if ($297) {
        $298 = $pIO;
        $299 = (__getBool16($298)|0);
        $300 = ($299|0)!=(0);
        if (!($300)) {
         break;
        }
        $301 = $iQDCV;
        $302 = (0 - ($301))|0;
        $iQDCV = $302;
       }
      } while(0);
      $303 = $iQDCV;
      $304 = $pMBInfo;
      $305 = (($304) + 128|0);
      HEAP32[$305>>2] = $303;
     }
    }
   }
   if ((label|0) == 29) {
    $i = 0;
    while(1) {
     $148 = $i;
     $149 = $iChannels;
     $150 = ($148|0)<($149|0);
     if (!($150)) {
      break;
     }
     $iQDCY = 0;
     $151 = $pIO;
     $152 = (__getBool16($151)|0);
     $153 = ($152|0)!=(0);
     if ($153) {
      $154 = $2;
      $155 = (($154) + 24|0);
      $156 = (($155) + 12|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = $pIO;
      $159 = (_DecodeSignificantAbsLevel($157,$158)|0);
      $160 = (($159) - 1)|0;
      $iQDCY = $160;
      $161 = $pLM;
      $162 = HEAP32[$161>>2]|0;
      $163 = (($162) + 1)|0;
      HEAP32[$161>>2] = $163;
     }
     $164 = $iModelBits;
     $165 = ($164|0)!=(0);
     if ($165) {
      $166 = $iQDCY;
      $167 = $iModelBits;
      $168 = $166 << $167;
      $169 = $pIO;
      $170 = $iModelBits;
      $171 = (__getBit16($169,$170)|0);
      $172 = $168 | $171;
      $iQDCY = $172;
     }
     $173 = $iQDCY;
     $174 = ($173|0)!=(0);
     if ($174) {
      $175 = $pIO;
      $176 = (__getBool16($175)|0);
      $177 = ($176|0)!=(0);
      if ($177) {
       $178 = $iQDCY;
       $179 = (0 - ($178))|0;
       $iQDCY = $179;
      }
     }
     $180 = $iQDCY;
     $181 = $i;
     $182 = $pMBInfo;
     $183 = (($182) + ($181<<6)|0);
     HEAP32[$183>>2] = $180;
     $184 = (($aLaplacianMean) + 4|0);
     $pLM = $184;
     $185 = $2;
     $186 = (($185) + 532|0);
     $187 = (($186) + 8|0);
     $188 = (($187) + 4|0);
     $189 = HEAP32[$188>>2]|0;
     $iModelBits = $189;
     $190 = $i;
     $191 = (($190) + 1)|0;
     $i = $191;
    }
   }
   $306 = $cf;
   $307 = $iChannels;
   $308 = $2;
   $309 = (($308) + 532|0);
   _UpdateModelMB($306,$307,$aLaplacianMean,$309);
   $310 = $1;
   $311 = (($310) + 84|0);
   $312 = (($311) + 28|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = ($313|0)!=(1);
   if ($314) {
    label = 65;
   } else {
    $315 = $1;
    $316 = (($315) + 34248|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = (($317) + 12|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = ($319>>>0)<(16);
    if ($320) {
     label = 65;
    } else {
     label = 66;
    }
   }
   if ((label|0) == 65) {
    $321 = $1;
    $322 = (($321) + 84|0);
    $323 = (($322) + 44|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ($324|0)==(3);
    if ($325) {
     label = 66;
    }
   }
   do {
    if ((label|0) == 66) {
     $326 = $1;
     $327 = (($326) + 34312|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = ($328|0)!=(0);
     if ($329) {
      $kk = 2;
      while(1) {
       $330 = $kk;
       $331 = ($330|0)<(5);
       if (!($331)) {
        label = 73;
        break;
       }
       $332 = $kk;
       $333 = $2;
       $334 = (($333) + 24|0);
       $335 = (($334) + ($332<<2)|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = (_AdaptDecFixed($336)|0);
       $338 = (0)!=($337|0);
       if ($338) {
        break;
       }
       $339 = $kk;
       $340 = (($339) + 1)|0;
       $kk = $340;
      }
      if ((label|0) == 73) {
       break;
      }
      $0 = -1;
      $341 = $0;
      STACKTOP = sp;return ($341|0);
     }
    }
   } while(0);
   $0 = 0;
   $341 = $0;
   STACKTOP = sp;return ($341|0);
  }
 }
 $0 = -1;
 $341 = $0;
 STACKTOP = sp;return ($341|0);
}
function _DecodeSignificantAbsLevel($pAHexpt,$pIO) {
 $pAHexpt = $pAHexpt|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $iFixed = 0, $iIndex = 0, $iLevel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pAHexpt;
 $1 = $pIO;
 $2 = $0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (_getHuff($4,$5)|0);
 $iIndex = $6;
 $7 = $iIndex;
 $8 = ($7>>>0)<=(6);
 if (!($8)) {
  ___assert_fail((8256|0),(7904|0),769,(8272|0));
  // unreachable;
 }
 $9 = $iIndex;
 $10 = $0;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($14))|0;
 HEAP32[$16>>2] = $18;
 $19 = $iIndex;
 $20 = ($19>>>0)<(2);
 if ($20) {
  $21 = $iIndex;
  $22 = (($21) + 2)|0;
  $iLevel = $22;
  $59 = $iLevel;
  STACKTOP = sp;return ($59|0);
 }
 $23 = $iIndex;
 $24 = ($23>>>0)<(6);
 if ($24) {
  $25 = $iIndex;
  $26 = (8232 + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $iFixed = $27;
  $28 = $iIndex;
  $29 = (8208 + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = $iFixed;
  $33 = (__getBit16($31,$32)|0);
  $34 = (($30) + ($33))|0;
  $iLevel = $34;
 } else {
  $35 = $1;
  $36 = (__getBit16($35,4)|0);
  $37 = (($36) + 4)|0;
  $iFixed = $37;
  $38 = $iFixed;
  $39 = ($38|0)==(19);
  if ($39) {
   $40 = $1;
   $41 = (__getBit16($40,2)|0);
   $42 = $iFixed;
   $43 = (($42) + ($41))|0;
   $iFixed = $43;
   $44 = $iFixed;
   $45 = ($44|0)==(22);
   if ($45) {
    $46 = $1;
    $47 = (__getBit16($46,3)|0);
    $48 = $iFixed;
    $49 = (($48) + ($47))|0;
    $iFixed = $49;
   }
  }
  $50 = $iFixed;
  $51 = 1 << $50;
  $52 = (2 + ($51))|0;
  $iLevel = $52;
  $53 = $1;
  $54 = $iFixed;
  $55 = (_getBit32($53,$54)|0);
  $iIndex = $55;
  $56 = $iIndex;
  $57 = $iLevel;
  $58 = (($57) + ($56))|0;
  $iLevel = $58;
 }
 $59 = $iLevel;
 STACKTOP = sp;return ($59|0);
}
function _AdaptDecFixed($pAH) {
 $pAH = $pAH|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pAH;
 $1 = $0;
 _AdaptDiscriminant($1);
 STACKTOP = sp;return 0;
}
function _DecodeMacroblockHighpass($pSC,$pContext,$iMBX,$iMBY) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 $iMBX = $iMBX|0;
 $iMBY = $iMBY|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iScale = 0, $iWeight = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pContext;
 $3 = $iMBX;
 $4 = $iMBY;
 $5 = $1;
 $6 = (($5) + 34308|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $iScale = 2;
  $9 = $iScale;
  $10 = $9<<4;
  $iWeight = $10;
  $11 = $2;
  $12 = (($11) + 364|0);
  HEAP32[$12>>2] = 32767;
  $13 = $2;
  $14 = (($13) + 236|0);
  HEAP32[$14>>2] = 32767;
  $k = 1;
  while(1) {
   $15 = $k;
   $16 = ($15|0)<(16);
   if (!($16)) {
    break;
   }
   $17 = $iWeight;
   $18 = $k;
   $19 = $2;
   $20 = (($19) + 364|0);
   $21 = (($20) + ($18<<3)|0);
   HEAP32[$21>>2] = $17;
   $22 = $k;
   $23 = $2;
   $24 = (($23) + 236|0);
   $25 = (($24) + ($22<<3)|0);
   HEAP32[$25>>2] = $17;
   $26 = $iScale;
   $27 = $iWeight;
   $28 = (($27) - ($26))|0;
   $iWeight = $28;
   $29 = $k;
   $30 = (($29) + 1)|0;
   $k = $30;
  }
 }
 $31 = $1;
 $32 = (($31) + 84|0);
 $33 = (($32) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0);
 do {
  if ($35) {
   $36 = $1;
   $37 = (($36) + 34296|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = (($39) + 34316|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + (($38*240)|0)|0);
   $43 = (($42) + 195|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = ($45|0)>(0);
   if ($46) {
    $47 = $2;
    $48 = (($47) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $1;
    $51 = (($50) + 34296|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $1;
    $54 = (($53) + 34316|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + (($52*240)|0)|0);
    $57 = (($56) + 195|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = (_decodeQPIndex($49,$58)|0);
    $60 = $1;
    $61 = (($60) + 32976|0);
    $62 = (($61) + 1157|0);
    HEAP8[$62>>0] = $59;
    $63 = $1;
    $64 = (($63) + 32976|0);
    $65 = (($64) + 1157|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $1;
    $69 = (($68) + 34296|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $1;
    $72 = (($71) + 34316|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + (($70*240)|0)|0);
    $75 = (($74) + 193|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = ($67|0)>=($77|0);
    if ($78) {
     break;
    } else {
     label = 16;
     break;
    }
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $79 = $1;
  $80 = (($79) + 34296|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $1;
  $83 = (($82) + 34316|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + (($81*240)|0)|0);
  $86 = (($85) + 195|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = ($88|0)==(0);
  if ($89) {
   $90 = $1;
   $91 = (($90) + 34296|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $1;
   $94 = (($93) + 34316|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + (($92*240)|0)|0);
   $97 = (($96) + 193|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = $98&255;
   $100 = ($99|0)>(1);
   if ($100) {
    $101 = $1;
    $102 = (($101) + 32976|0);
    $103 = (($102) + 1156|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $1;
    $106 = (($105) + 32976|0);
    $107 = (($106) + 1157|0);
    HEAP8[$107>>0] = $104;
   }
  }
  label = 16;
 }
 do {
  if ((label|0) == 16) {
   $108 = $1;
   $109 = $2;
   (_DecodeCBP($108,$109)|0);
   $110 = $1;
   $111 = $2;
   _predCBPDec($110,$111);
   $112 = $1;
   $113 = $2;
   $114 = $3;
   $115 = $4;
   $116 = $2;
   $117 = (($116) + 8|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $2;
   $120 = (($119) + 12|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (_DecodeCoeffs($112,$113,$114,$115,$118,$121)|0);
   $123 = ($122|0)!=(0);
   if ($123) {
    break;
   }
   $124 = $1;
   $125 = (($124) + 34312|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $2;
    (_AdaptHighpassDec($128)|0);
   }
   $0 = 0;
   $129 = $0;
   STACKTOP = sp;return ($129|0);
  }
 } while(0);
 $0 = -1;
 $129 = $0;
 STACKTOP = sp;return ($129|0);
}
function _DecodeCBP($pSC,$pContext) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bIsChroma = 0, $bandUpperLimit = 0, $cf = 0, $err = 0, $i = 0, $iBlock = 0, $iCBPCU = 0, $iCBPCV = 0, $iCBPCY = 0, $iChannel = 0, $iCode = 0, $iCode1 = 0;
 var $iCode2 = 0, $iNumBlockCBP = 0, $iNumCBP = 0, $k = 0, $pAHCBP = 0, $pAHCBP1 = 0, $pAHex1 = 0, $pIO = 0, $upperLimit = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pContext;
 $3 = $2;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $pIO = $5;
 $6 = $1;
 $7 = (($6) + 34136|0);
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $cf = $9;
 $10 = $cf;
 $11 = ($10|0)==(6);
 if ($11) {
  label = 3;
 } else {
  $12 = $cf;
  $13 = ($12|0)==(4);
  if ($13) {
   label = 3;
  } else {
   $18 = 1;
  }
 }
 if ((label|0) == 3) {
  $14 = $1;
  $15 = (($14) + 34136|0);
  $16 = (($15) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17;
 }
 $iChannel = $18;
 $19 = $2;
 $20 = (($19) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $pAHCBP = $21;
 $22 = $2;
 $23 = (($22) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $pAHCBP1 = $24;
 $25 = $2;
 $26 = (($25) + 24|0);
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $pAHex1 = $28;
 $29 = $1;
 $30 = (($29) + 84|0);
 $31 = (($30) + 60|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $1;
 $34 = (($33) + 4|0);
 $35 = (($34) + 76|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($32) + ($36))|0;
 $upperLimit = $37;
 $38 = $1;
 $39 = (($38) + 34280|0);
 $40 = HEAP32[$39>>2]|0;
 $bandUpperLimit = $40;
 $41 = $bandUpperLimit;
 $42 = (0)!=($41|0);
 if ($42) {
  $43 = $bandUpperLimit;
  $44 = $upperLimit;
  $45 = ($43>>>0)<($44>>>0);
  if ($45) {
   $46 = $bandUpperLimit;
   $upperLimit = $46;
  }
 }
 $47 = $pIO;
 $48 = (($47) + 28|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $upperLimit;
 $51 = ($49>>>0)<($50>>>0);
 do {
  if ($51) {
   $52 = $1;
   $53 = $pIO;
   $54 = (_readIS($52,$53)|0);
   $err = $54;
   $55 = $err;
   $56 = (0)!=($55|0);
   if (!($56)) {
    break;
   }
   $0 = -1;
   $307 = $0;
   STACKTOP = sp;return ($307|0);
  }
 } while(0);
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = $iChannel;
  $59 = ($57|0)<($58|0);
  if (!($59)) {
   break;
  }
  $iCBPCV = 0;
  $iCBPCU = 0;
  $iCBPCY = 0;
  $60 = $pAHCBP1;
  $61 = (($60) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $pIO;
  $64 = (__getHuffShort($62,$63)|0);
  $iNumCBP = $64;
  $65 = $iNumCBP;
  $66 = $pAHCBP1;
  $67 = (($66) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($65<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $pAHCBP1;
  $72 = (($71) + 28|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($70))|0;
  HEAP32[$72>>2] = $74;
  $75 = $iNumCBP;
  if ((($75|0) == 4)) {
   $iNumCBP = 15;
  } else if ((($75|0) == 1)) {
   $90 = $pIO;
   $91 = (__getBit16($90,2)|0);
   $92 = 1 << $91;
   $iNumCBP = $92;
  } else if ((($75|0) == 3)) {
   $93 = $pIO;
   $94 = (__getBit16($93,2)|0);
   $95 = 1 << $94;
   $96 = 15 ^ $95;
   $iNumCBP = $96;
  } else if ((($75|0) == 2)) {
   $76 = $pIO;
   $77 = (__getBit16($76,2)|0);
   $iNumCBP = $77;
   $78 = $iNumCBP;
   $79 = ($78|0)==(0);
   if ($79) {
    $iNumCBP = 3;
   } else {
    $80 = $iNumCBP;
    $81 = ($80|0)==(1);
    if ($81) {
     $iNumCBP = 5;
    } else {
     $82 = $iNumCBP;
     $83 = $82<<1;
     $84 = $pIO;
     $85 = (__getBool16($84)|0);
     $86 = (($83) + ($85))|0;
     $87 = (($86) - 4)|0;
     $88 = (8048 + ($87<<2)|0);
     $89 = HEAP32[$88>>2]|0;
     $iNumCBP = $89;
    }
   }
  }
  $iBlock = 0;
  while(1) {
   $97 = $iBlock;
   $98 = ($97|0)<(4);
   if (!($98)) {
    break;
   }
   $99 = $iNumCBP;
   $100 = $iBlock;
   $101 = 1 << $100;
   $102 = $99 & $101;
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = $pAHCBP;
    $105 = (($104) + 20|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $pIO;
    $108 = (_getHuff($106,$107)|0);
    $iNumBlockCBP = $108;
    $109 = $iNumBlockCBP;
    $110 = (($109) + 1)|0;
    $val = $110;
    $111 = $iNumBlockCBP;
    $112 = $pAHCBP;
    $113 = (($112) + 8|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + ($111<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $pAHCBP;
    $118 = (($117) + 28|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + ($116))|0;
    HEAP32[$118>>2] = $120;
    $iNumBlockCBP = 0;
    $121 = $val;
    $122 = ($121>>>0)>=(6);
    if ($122) {
     $123 = $pIO;
     $124 = (__getBool16($123)|0);
     $125 = ($124|0)!=(0);
     if ($125) {
      $iNumBlockCBP = 16;
     } else {
      $126 = $pIO;
      $127 = (__getBool16($126)|0);
      $128 = ($127|0)!=(0);
      if ($128) {
       $iNumBlockCBP = 32;
      } else {
       $iNumBlockCBP = 48;
      }
     }
     $129 = $val;
     $130 = ($129|0)==(9);
     if ($130) {
      $131 = $pIO;
      $132 = (__getBool16($131)|0);
      $133 = ($132|0)!=(0);
      if ($133) {
      } else {
       $134 = $pIO;
       $135 = (__getBool16($134)|0);
       $136 = ($135|0)!=(0);
       if ($136) {
        $val = 10;
       } else {
        $val = 11;
       }
      }
     }
     $137 = $val;
     $138 = (($137) - 6)|0;
     $val = $138;
    }
    $139 = $val;
    $140 = (8088 + ($139<<2)|0);
    $141 = HEAP32[$140>>2]|0;
    $iCode1 = $141;
    $142 = $val;
    $143 = (8064 + ($142<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)!=(0);
    if ($145) {
     $146 = $pIO;
     $147 = $val;
     $148 = (8064 + ($147<<2)|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (__getBit16($146,$149)|0);
     $151 = $iCode1;
     $152 = (($151) + ($150))|0;
     $iCode1 = $152;
    }
    $153 = $iCode1;
    $154 = (8112 + ($153<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $iNumBlockCBP;
    $157 = (($156) + ($155))|0;
    $iNumBlockCBP = $157;
    $158 = $cf;
    if ((($158|0) == 1)) {
     $218 = $iNumBlockCBP;
     $219 = $218 & 15;
     $220 = $iBlock;
     $221 = $220<<2;
     $222 = $219 << $221;
     $223 = $iCBPCY;
     $224 = $223 | $222;
     $iCBPCY = $224;
     $225 = $iNumBlockCBP;
     $226 = $225 >> 4;
     $227 = $226 & 1;
     $228 = $iBlock;
     $229 = $227 << $228;
     $230 = $iCBPCU;
     $231 = $230 | $229;
     $iCBPCU = $231;
     $232 = $iNumBlockCBP;
     $233 = $232 >> 5;
     $234 = $233 & 1;
     $235 = $iBlock;
     $236 = $234 << $235;
     $237 = $iCBPCV;
     $238 = $237 | $236;
     $iCBPCV = $238;
    } else if ((($158|0) == 2)) {
     $239 = $iNumBlockCBP;
     $240 = $239 & 15;
     $241 = $iBlock;
     $242 = $241<<2;
     $243 = $240 << $242;
     $244 = $iCBPCY;
     $245 = $244 | $243;
     $iCBPCY = $245;
     $k = 0;
     while(1) {
      $246 = $k;
      $247 = ($246|0)<(2);
      if (!($247)) {
       break;
      }
      $iCode2 = 5;
      $248 = $iNumBlockCBP;
      $249 = $k;
      $250 = (($249) + 4)|0;
      $251 = $248 >> $250;
      $252 = $251 & 1;
      $253 = ($252|0)!=(0);
      if ($253) {
       $254 = $pIO;
       $255 = (__getBool16($254)|0);
       $256 = ($255|0)!=(0);
       if ($256) {
        $iCode2 = 1;
       } else {
        $257 = $pIO;
        $258 = (__getBool16($257)|0);
        $259 = ($258|0)!=(0);
        if ($259) {
         $iCode2 = 4;
        }
       }
       $260 = $iBlock;
       $261 = (8192 + ($260<<2)|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = $iCode2;
       $264 = $263 << $262;
       $iCode2 = $264;
       $265 = $k;
       $266 = ($265|0)==(0);
       if ($266) {
        $267 = $iCode2;
        $268 = $iCBPCU;
        $269 = $268 | $267;
        $iCBPCU = $269;
       } else {
        $270 = $iCode2;
        $271 = $iCBPCV;
        $272 = $271 | $270;
        $iCBPCV = $272;
       }
      }
      $273 = $k;
      $274 = (($273) + 1)|0;
      $k = $274;
     }
    } else if ((($158|0) == 3)) {
     $159 = $iNumBlockCBP;
     $160 = $159 & 15;
     $161 = $iBlock;
     $162 = $161<<2;
     $163 = $160 << $162;
     $164 = $iCBPCY;
     $165 = $164 | $163;
     $iCBPCY = $165;
     $k = 0;
     while(1) {
      $166 = $k;
      $167 = ($166|0)<(2);
      if (!($167)) {
       break;
      }
      $168 = $iNumBlockCBP;
      $169 = $k;
      $170 = (($169) + 4)|0;
      $171 = $168 >> $170;
      $172 = $171 & 1;
      $bIsChroma = $172;
      $173 = $bIsChroma;
      $174 = ($173|0)!=(0);
      if ($174) {
       $175 = $pAHex1;
       $176 = (($175) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = $pIO;
       $179 = (__getHuffShort($177,$178)|0);
       $iCode = $179;
       $180 = $iCode;
       if ((($180|0) == 1)) {
        $181 = $pIO;
        $182 = (__getBit16($181,2)|0);
        $iCode = $182;
        $183 = $iCode;
        $184 = ($183|0)==(0);
        if ($184) {
         $iCode = 3;
        } else {
         $185 = $iCode;
         $186 = ($185|0)==(1);
         if ($186) {
          $iCode = 5;
         } else {
          $187 = $iCode;
          $188 = $187<<1;
          $189 = $pIO;
          $190 = (__getBool16($189)|0);
          $191 = (($188) + ($190))|0;
          $192 = (($191) - 4)|0;
          $193 = (8176 + ($192<<2)|0);
          $194 = HEAP32[$193>>2]|0;
          $iCode = $194;
         }
        }
       } else if ((($180|0) == 0)) {
        $195 = $pIO;
        $196 = (__getBit16($195,2)|0);
        $197 = 1 << $196;
        $iCode = $197;
       } else if ((($180|0) == 2)) {
        $198 = $pIO;
        $199 = (__getBit16($198,2)|0);
        $200 = 1 << $199;
        $201 = 15 ^ $200;
        $iCode = $201;
       } else if ((($180|0) == 3)) {
        $iCode = 15;
       }
       $202 = $k;
       $203 = ($202|0)==(0);
       if ($203) {
        $204 = $iCode;
        $205 = $iBlock;
        $206 = $205<<2;
        $207 = $204 << $206;
        $208 = $iCBPCU;
        $209 = $208 | $207;
        $iCBPCU = $209;
       } else {
        $210 = $iCode;
        $211 = $iBlock;
        $212 = $211<<2;
        $213 = $210 << $212;
        $214 = $iCBPCV;
        $215 = $214 | $213;
        $iCBPCV = $215;
       }
      }
      $216 = $k;
      $217 = (($216) + 1)|0;
      $k = $217;
     }
    } else {
     $275 = $iNumBlockCBP;
     $276 = $iBlock;
     $277 = $276<<2;
     $278 = $275 << $277;
     $279 = $iCBPCY;
     $280 = $279 | $278;
     $iCBPCY = $280;
    }
   }
   $281 = $iBlock;
   $282 = (($281) + 1)|0;
   $iBlock = $282;
  }
  $283 = $iCBPCY;
  $284 = $i;
  $285 = $1;
  $286 = (($285) + 32976|0);
  $287 = (($286) + 1092|0);
  $288 = (($287) + ($284<<2)|0);
  HEAP32[$288>>2] = $283;
  $289 = $cf;
  $290 = ($289|0)==(1);
  if ($290) {
   label = 91;
  } else {
   $291 = $cf;
   $292 = ($291|0)==(3);
   if ($292) {
    label = 91;
   } else {
    $293 = $cf;
    $294 = ($293|0)==(2);
    if ($294) {
     label = 91;
    }
   }
  }
  if ((label|0) == 91) {
   label = 0;
   $295 = $iCBPCU;
   $296 = $1;
   $297 = (($296) + 32976|0);
   $298 = (($297) + 1092|0);
   $299 = (($298) + 4|0);
   HEAP32[$299>>2] = $295;
   $300 = $iCBPCV;
   $301 = $1;
   $302 = (($301) + 32976|0);
   $303 = (($302) + 1092|0);
   $304 = (($303) + 8|0);
   HEAP32[$304>>2] = $300;
  }
  $305 = $i;
  $306 = (($305) + 1)|0;
  $i = $306;
 }
 $0 = 0;
 $307 = $0;
 STACKTOP = sp;return ($307|0);
}
function _DecodeCoeffs($pSC,$pContext,$iMBX,$iMBY,$pIO,$pIOFL) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 $iMBX = $iMBX|0;
 $iMBY = $iMBY|0;
 $pIO = $pIO|0;
 $pIOFL = $pIOFL|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aLaplacianMean = 0, $bChroma = 0, $cf = 0, $err = 0, $i = 0, $iBlock = 0, $iCBPCU = 0, $iCBPCV = 0, $iCBPCY = 0, $iChannels = 0, $iIndex = 0, $iModelBits = 0, $iNBlocks = 0, $iNumNonZero = 0, $iOrient = 0, $iPlanes = 0;
 var $iQP = 0, $iSubblock = 0, $pCoeffs = 0, $pLM = 0, $pOrder = 0, $pScan = 0, $pTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aLaplacianMean = sp + 8|0;
 $1 = $pSC;
 $2 = $pContext;
 $3 = $iMBX;
 $4 = $iMBY;
 $5 = $pIO;
 $6 = $pIOFL;
 $7 = $1;
 $8 = (($7) + 34316|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (($10) + 34296|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) + (($12*240)|0)|0);
 $pTile = $13;
 $14 = $1;
 $15 = (($14) + 34136|0);
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $cf = $17;
 $18 = $1;
 $19 = (($18) + 34136|0);
 $20 = (($19) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $iChannels = $21;
 $22 = $cf;
 $23 = ($22|0)==(1);
 if ($23) {
  label = 3;
 } else {
  $24 = $cf;
  $25 = ($24|0)==(2);
  if ($25) {
   label = 3;
  } else {
   $26 = $iChannels;
   $27 = $26;
  }
 }
 if ((label|0) == 3) {
  $27 = 1;
 }
 $iPlanes = $27;
 $iNBlocks = 4;
 $28 = $2;
 $29 = (($28) + 492|0);
 $30 = (($29) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $iModelBits = $31;
 ;HEAP32[$aLaplacianMean+0>>2]=0|0;HEAP32[$aLaplacianMean+4>>2]=0|0;
 $pLM = $aLaplacianMean;
 $pOrder = 14048;
 $32 = $1;
 $33 = (($32) + 32976|0);
 $34 = (($33) + 1024|0);
 $35 = HEAP32[$34>>2]|0;
 $iOrient = $35;
 $bChroma = 0;
 $36 = $1;
 $37 = (($36) + 32976|0);
 $38 = (($37) + 1028|0);
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $iCBPCU = $40;
 $41 = $1;
 $42 = (($41) + 32976|0);
 $43 = (($42) + 1028|0);
 $44 = (($43) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $iCBPCV = $45;
 $46 = $1;
 $47 = (($46) + 32976|0);
 $48 = (($47) + 1028|0);
 $49 = HEAP32[$48>>2]|0;
 $iCBPCY = $49;
 $50 = $3;
 $3 = $50;
 $51 = $4;
 $4 = $51;
 $52 = $iOrient;
 $53 = ($52|0)==(1);
 if ($53) {
  $54 = $2;
  $55 = (($54) + 364|0);
  $pScan = $55;
 } else {
  $56 = $2;
  $57 = (($56) + 236|0);
  $pScan = $57;
 }
 $58 = $cf;
 $59 = ($58|0)==(1);
 if ($59) {
  $iNBlocks = 6;
  $60 = $iCBPCU;
  $61 = $60 << 16;
  $62 = $iCBPCV;
  $63 = $62 << 20;
  $64 = (($61) + ($63))|0;
  $65 = $iCBPCY;
  $66 = (($65) + ($64))|0;
  $iCBPCY = $66;
 } else {
  $67 = $cf;
  $68 = ($67|0)==(2);
  if ($68) {
   $iNBlocks = 8;
   $69 = $iCBPCU;
   $70 = $69 << 16;
   $71 = $iCBPCV;
   $72 = $71 << 24;
   $73 = (($70) + ($72))|0;
   $74 = $iCBPCY;
   $75 = (($74) + ($73))|0;
   $iCBPCY = $75;
  }
 }
 $i = 0;
 L18: while(1) {
  $76 = $i;
  $77 = $iPlanes;
  $78 = ($76|0)<($77|0);
  if (!($78)) {
   label = 56;
   break;
  }
  $iIndex = 0;
  $79 = $1;
  $80 = (($79) + 84|0);
  $81 = (($80) + 44|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(1);
  if ($83) {
   $84 = $1;
   $85 = $6;
   $86 = (_readIS($84,$85)|0);
   $err = $86;
   $87 = $err;
   $88 = (-115)==($87|0);
   if ($88) {
    label = 17;
    break;
   }
  }
  $iBlock = 0;
  while(1) {
   $89 = $iBlock;
   $90 = $iNBlocks;
   $91 = ($89|0)<($90|0);
   if (!($91)) {
    break;
   }
   $92 = $5;
   $93 = $6;
   $94 = ($92|0)!=($93|0);
   if ($94) {
   }
   $95 = $1;
   $96 = (($95) + 34136|0);
   $97 = (($96) + 56|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)!=(0);
   if ($99) {
    $125 = 1;
   } else {
    $100 = $1;
    $101 = (($100) + 32976|0);
    $102 = (($101) + 1157|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = $iPlanes;
    $106 = ($105|0)>(1);
    if ($106) {
     $107 = $i;
     $120 = $107;
    } else {
     $108 = $iBlock;
     $109 = ($108|0)>(3);
     if ($109) {
      $110 = $cf;
      $111 = ($110|0)==(1);
      if ($111) {
       $112 = $iBlock;
       $113 = (($112) - 3)|0;
       $242 = $113;
      } else {
       $114 = $iBlock;
       $115 = (($114|0) / 2)&-1;
       $116 = (($115) - 1)|0;
       $242 = $116;
      }
      $243 = $242;
     } else {
      $243 = 0;
     }
     $120 = $243;
    }
    $117 = $pTile;
    $118 = (($117) + 128|0);
    $119 = (($118) + ($120<<2)|0);
    $121 = HEAP32[$119>>2]|0;
    $122 = (($121) + (($104*20)|0)|0);
    $123 = (($122) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $124;
   }
   $iQP = $125;
   $iSubblock = 0;
   while(1) {
    $126 = $iSubblock;
    $127 = ($126|0)<(4);
    if (!($127)) {
     break;
    }
    $128 = $i;
    $129 = $1;
    $130 = (($129) + 34756|0);
    $131 = (($130) + ($128<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $iIndex;
    $134 = $133 & 15;
    $135 = (13936 + ($134<<2)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($132) + ($136<<2)|0);
    $pCoeffs = $137;
    $138 = $iBlock;
    $139 = ($138|0)>=(4);
    if ($139) {
     $140 = $cf;
     $141 = ($140|0)==(1);
     if ($141) {
      $142 = $iBlock;
      $143 = (($142) - 3)|0;
      $144 = $1;
      $145 = (($144) + 34756|0);
      $146 = (($145) + ($143<<2)|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = $iSubblock;
      $149 = (14000 + ($148<<2)|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (($147) + ($150<<2)|0);
      $pCoeffs = $151;
     } else {
      $152 = $iBlock;
      $153 = $152 >> 1;
      $154 = 1 & $153;
      $155 = (1 + ($154))|0;
      $156 = $1;
      $157 = (($156) + 34756|0);
      $158 = (($157) + ($155<<2)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $iBlock;
      $161 = $160 & 1;
      $162 = $161<<5;
      $163 = (($159) + ($162<<2)|0);
      $164 = $iSubblock;
      $165 = (14016 + ($164<<2)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = (($163) + ($166<<2)|0);
      $pCoeffs = $167;
     }
    }
    $168 = $1;
    $169 = (($168) + 34248|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($170) + 8|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = ($172|0)==(0);
    if (!($173)) {
     $174 = $1;
     $175 = (($174) + 84|0);
     $176 = (($175) + 28|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ($177|0)==(1);
     if (!($178)) {
      $179 = $1;
      $180 = (($179) + 84|0);
      $181 = (($180) + 44|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = ($182|0)==(1);
      if (!($183)) {
       label = 45;
       break L18;
      }
     }
    }
    $184 = $iCBPCY;
    $185 = $184 & 1;
    $186 = $bChroma;
    $187 = $2;
    $188 = (($187) + 24|0);
    $189 = $5;
    $190 = $6;
    $191 = $pCoeffs;
    $192 = $pScan;
    $193 = $iModelBits;
    $194 = $2;
    $195 = (($194) + 584|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = $iQP;
    $198 = $pOrder;
    $199 = $1;
    $200 = (($199) + 34248|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = (($201) + 8|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (_DecodeBlockAdaptive($185,$186,$188,$189,$190,$191,$192,$193,$196,$197,$198,$203)|0);
    $iNumNonZero = $204;
    $205 = $iNumNonZero;
    $206 = ($205|0)>(16);
    if ($206) {
     label = 47;
     break L18;
    }
    $207 = $iNumNonZero;
    $208 = $pLM;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($209) + ($207))|0;
    HEAP32[$208>>2] = $210;
    $211 = $iSubblock;
    $212 = (($211) + 1)|0;
    $iSubblock = $212;
    $213 = $iIndex;
    $214 = (($213) + 1)|0;
    $iIndex = $214;
    $215 = $iCBPCY;
    $216 = $215 >> 1;
    $iCBPCY = $216;
   }
   $217 = $iBlock;
   $218 = ($217|0)==(3);
   if ($218) {
    $219 = $2;
    $220 = (($219) + 492|0);
    $221 = (($220) + 8|0);
    $222 = (($221) + 4|0);
    $223 = HEAP32[$222>>2]|0;
    $iModelBits = $223;
    $224 = (($aLaplacianMean) + 4|0);
    $pLM = $224;
    $bChroma = 1;
   }
   $225 = $iBlock;
   $226 = (($225) + 1)|0;
   $iBlock = $226;
  }
  $227 = $i;
  $228 = (($227) + 1)|0;
  $229 = $228 & 15;
  $230 = $1;
  $231 = (($230) + 32976|0);
  $232 = (($231) + 1028|0);
  $233 = (($232) + ($229<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $iCBPCY = $234;
  $235 = $i;
  $236 = (($235) + 1)|0;
  $i = $236;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 45) {
  ___assert_fail((7776|0),(7904|0),729,(7928|0));
  // unreachable;
 }
 else if ((label|0) == 47) {
  $0 = -1;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 56) {
  $237 = $cf;
  $238 = $iChannels;
  $239 = $2;
  $240 = (($239) + 492|0);
  _UpdateModelMB($237,$238,$aLaplacianMean,$240);
  $0 = 0;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 return 0|0;
}
function _AdaptHighpassDec($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_AdaptDecFixed($4)|0);
 $6 = (0)!=($5|0);
 do {
  if ($6) {
  } else {
   $7 = $1;
   $8 = (($7) + 20|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_AdaptDecFixed($9)|0);
   $11 = (0)!=($10|0);
   if ($11) {
    break;
   }
   $kk = 0;
   while(1) {
    $12 = $kk;
    $13 = ($12|0)<(8);
    if (!($13)) {
     break;
    }
    $14 = $kk;
    $15 = (($14) + 8)|0;
    $16 = (($15) + 5)|0;
    $17 = $1;
    $18 = (($17) + 24|0);
    $19 = (($18) + ($16<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_AdaptDecFixed($20)|0);
    $22 = (0)!=($21|0);
    if ($22) {
     label = 8;
     break;
    }
    $23 = $kk;
    $24 = (($23) + 1)|0;
    $kk = $24;
   }
   if ((label|0) == 8) {
    break;
   }
   $0 = 0;
   $25 = $0;
   STACKTOP = sp;return ($25|0);
  }
 } while(0);
 $0 = -1;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _DecodeBlockAdaptive($bNoSkip,$bChroma,$pAdHuff,$pIO,$pIOFL,$pCoeffs,$pScan,$iModelBits,$iTrim,$iQP,$pOrder,$bSkipFlexbits) {
 $bNoSkip = $bNoSkip|0;
 $bChroma = $bChroma|0;
 $pAdHuff = $pAdHuff|0;
 $pIO = $pIO|0;
 $pIOFL = $pIOFL|0;
 $pCoeffs = $pCoeffs|0;
 $pScan = $pScan|0;
 $iModelBits = $iModelBits|0;
 $iTrim = $iTrim|0;
 $iQP = $iQP|0;
 $pOrder = $pOrder|0;
 $bSkipFlexbits = $bSkipFlexbits|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fine = 0, $fine1 = 0, $fine3 = 0, $fine4 = 0, $iFlex = 0, $iNumNonzero = 0, $iQP1 = 0;
 var $iQP12 = 0, $k = 0, $kk = 0, $pk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bNoSkip;
 $1 = $bChroma;
 $2 = $pAdHuff;
 $3 = $pIO;
 $4 = $pIOFL;
 $5 = $pCoeffs;
 $6 = $pScan;
 $7 = $iModelBits;
 $8 = $iTrim;
 $9 = $iQP;
 $10 = $pOrder;
 $11 = $bSkipFlexbits;
 $iNumNonzero = 0;
 $12 = $7;
 $13 = $8;
 $14 = (($12) - ($13))|0;
 $iFlex = $14;
 $15 = $iFlex;
 $16 = ($15|0)<(0);
 if ($16) {
  label = 3;
 } else {
  $17 = $11;
  $18 = ($17|0)!=(0);
  if ($18) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $iFlex = 0;
 }
 $19 = $0;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $9;
  $22 = $7;
  $23 = $21 << $22;
  $iQP1 = $23;
  $24 = $1;
  $25 = $2;
  $26 = $3;
  $27 = $iQP1;
  $28 = $5;
  $29 = $6;
  $30 = (_DecodeBlockHighpass($24,$25,$26,$27,$28,$29)|0);
  $iNumNonzero = $30;
 }
 $31 = $iFlex;
 $32 = ($31|0)!=(0);
 if (!($32)) {
  $132 = $iNumNonzero;
  STACKTOP = sp;return ($132|0);
 }
 $33 = $9;
 $34 = $8;
 $35 = (($33) + ($34))|0;
 $36 = ($35|0)==(1);
 if ($36) {
  $37 = $8;
  $38 = ($37|0)==(0);
  if (!($38)) {
   ___assert_fail((7944|0),(7904|0),603,(7960|0));
   // unreachable;
  }
  $39 = $9;
  $40 = ($39|0)==(1);
  if (!($40)) {
   ___assert_fail((7984|0),(7904|0),604,(7960|0));
   // unreachable;
  }
  $k = 1;
  while(1) {
   $41 = $k;
   $42 = ($41>>>0)<(16);
   if (!($42)) {
    break;
   }
   $43 = $5;
   $44 = $k;
   $45 = $10;
   $46 = (($45) + ($44<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($43) + ($47<<2)|0);
   $pk = $48;
   $49 = $pk;
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)<(0);
   if ($51) {
    $52 = $4;
    $53 = $iFlex;
    $54 = (__getBit16($52,$53)|0);
    $fine = $54;
    $55 = $fine;
    $56 = $pk;
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) - ($55))|0;
    HEAP32[$56>>2] = $58;
   } else {
    $59 = $pk;
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)>(0);
    if ($61) {
     $62 = $4;
     $63 = $iFlex;
     $64 = (__getBit16($62,$63)|0);
     $fine1 = $64;
     $65 = $fine1;
     $66 = $pk;
     $67 = HEAP32[$66>>2]|0;
     $68 = (($67) + ($65))|0;
     HEAP32[$66>>2] = $68;
    } else {
     $69 = $4;
     $70 = $iFlex;
     $71 = (__getBit16s($69,$70)|0);
     $72 = $pk;
     HEAP32[$72>>2] = $71;
    }
   }
   $73 = $k;
   $74 = (($73) + 1)|0;
   $k = $74;
  }
 } else {
  $75 = $9;
  $76 = $8;
  $77 = $75 << $76;
  $iQP12 = $77;
  $k = 1;
  while(1) {
   $78 = $k;
   $79 = ($78>>>0)<(16);
   if (!($79)) {
    break;
   }
   $80 = $k;
   $81 = $10;
   $82 = (($81) + ($80<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $5;
   $85 = (($84) + ($83<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $kk = $86;
   $87 = $kk;
   $88 = ($87|0)<(0);
   if ($88) {
    $89 = $4;
    $90 = $iFlex;
    $91 = (__getBit16($89,$90)|0);
    $fine3 = $91;
    $92 = $iQP12;
    $93 = $fine3;
    $94 = Math_imul($92, $93)|0;
    $95 = $k;
    $96 = $10;
    $97 = (($96) + ($95<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $5;
    $100 = (($99) + ($98<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) - ($94))|0;
    HEAP32[$100>>2] = $102;
   } else {
    $103 = $kk;
    $104 = ($103|0)>(0);
    if ($104) {
     $105 = $4;
     $106 = $iFlex;
     $107 = (__getBit16($105,$106)|0);
     $fine4 = $107;
     $108 = $iQP12;
     $109 = $fine4;
     $110 = Math_imul($108, $109)|0;
     $111 = $k;
     $112 = $10;
     $113 = (($112) + ($111<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $5;
     $116 = (($115) + ($114<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (($117) + ($110))|0;
     HEAP32[$116>>2] = $118;
    } else {
     $119 = $iQP12;
     $120 = $4;
     $121 = $iFlex;
     $122 = (__getBit16s($120,$121)|0);
     $123 = Math_imul($119, $122)|0;
     $124 = $k;
     $125 = $10;
     $126 = (($125) + ($124<<2)|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $5;
     $129 = (($128) + ($127<<2)|0);
     HEAP32[$129>>2] = $123;
    }
   }
   $130 = $k;
   $131 = (($130) + 1)|0;
   $k = $131;
  }
 }
 $132 = $iNumNonzero;
 STACKTOP = sp;return ($132|0);
}
function _DecodeBlockHighpass($bChroma,$pAHexpt,$pIO,$iQP,$pCoef,$pScan) {
 $bChroma = $bChroma|0;
 $pAHexpt = $pAHexpt|0;
 $pIO = $pIO|0;
 $iQP = $iQP|0;
 $pCoef = $pCoef|0;
 $pScan = $pScan|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cTemp = 0, $cTemp1 = 0, $iCont = 0, $iContextOffset = 0, $iIndex = 0, $iLevel = 0;
 var $iLoc = 0, $iNumNonzero = 0, $iSR = 0, $iSRn = 0, $iSign = 0, $pAH1 = 0, $pConstScan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iIndex = sp + 12|0;
 $cTemp = sp + 32|0;
 $cTemp1 = sp + 40|0;
 $1 = $bChroma;
 $2 = $pAHexpt;
 $3 = $pIO;
 $4 = $iQP;
 $5 = $pCoef;
 $6 = $pScan;
 $iContextOffset = 13;
 $iLoc = 1;
 $iNumNonzero = 1;
 $7 = $2;
 $8 = (($7) + 52|0);
 $9 = $1;
 $10 = ($9*3)|0;
 $11 = (($8) + ($10<<2)|0);
 $pAH1 = $11;
 $12 = $6;
 $pConstScan = $12;
 $13 = $pAH1;
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 _DecodeFirstIndex($iIndex,$14,$15);
 $16 = HEAP32[$iIndex>>2]|0;
 $17 = $16 & 1;
 $iSR = $17;
 $18 = HEAP32[$iIndex>>2]|0;
 $19 = $18 >> 2;
 $iSRn = $19;
 $20 = $iSR;
 $21 = $iSRn;
 $22 = $20 & $21;
 $iCont = $22;
 $23 = $3;
 $24 = (__getSign($23)|0);
 $iSign = $24;
 $25 = $4;
 $26 = $iSign;
 $27 = $25 ^ $26;
 $28 = $iSign;
 $29 = (($27) - ($28))|0;
 $iLevel = $29;
 $30 = HEAP32[$iIndex>>2]|0;
 $31 = $30 & 2;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $iCont;
  $34 = (19 + ($33))|0;
  $35 = $2;
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $3;
  $39 = (_DecodeSignificantAbsLevel($37,$38)|0);
  $40 = $iLevel;
  $41 = Math_imul($40, $39)|0;
  $iLevel = $41;
 }
 $42 = $iSR;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = $iLoc;
  $45 = (15 - ($44))|0;
  $46 = $2;
  $47 = HEAP32[$46>>2]|0;
  $48 = $3;
  $49 = (_DecodeSignificantRun($45,$47,$48)|0);
  $50 = $iLoc;
  $51 = (($50) + ($49))|0;
  $iLoc = $51;
 }
 $52 = $iLoc;
 $53 = $52 & 15;
 $iLoc = $53;
 $54 = $iLevel;
 $55 = $iLoc;
 $56 = $pConstScan;
 $57 = (($56) + ($55<<3)|0);
 $58 = (($57) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $5;
 $61 = (($60) + ($59<<2)|0);
 HEAP32[$61>>2] = $54;
 $62 = $iLoc;
 $63 = $6;
 $64 = (($63) + ($62<<3)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + 1)|0;
 HEAP32[$64>>2] = $66;
 $67 = $iLoc;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $iLoc;
  $70 = $6;
  $71 = (($70) + ($69<<3)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $iLoc;
  $74 = (($73) - 1)|0;
  $75 = $6;
  $76 = (($75) + ($74<<3)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($72>>>0)>($77>>>0);
  if ($78) {
   $79 = $iLoc;
   $80 = $6;
   $81 = (($80) + ($79<<3)|0);
   ;HEAP32[$cTemp+0>>2]=HEAP32[$81+0>>2]|0;HEAP32[$cTemp+4>>2]=HEAP32[$81+4>>2]|0;
   $82 = $iLoc;
   $83 = $6;
   $84 = (($83) + ($82<<3)|0);
   $85 = $iLoc;
   $86 = (($85) - 1)|0;
   $87 = $6;
   $88 = (($87) + ($86<<3)|0);
   ;HEAP32[$84+0>>2]=HEAP32[$88+0>>2]|0;HEAP32[$84+4>>2]=HEAP32[$88+4>>2]|0;
   $89 = $iLoc;
   $90 = (($89) - 1)|0;
   $91 = $6;
   $92 = (($91) + ($90<<3)|0);
   ;HEAP32[$92+0>>2]=HEAP32[$cTemp+0>>2]|0;HEAP32[$92+4>>2]=HEAP32[$cTemp+4>>2]|0;
  }
 }
 $93 = $iLoc;
 $94 = (($93) + 1)|0;
 $95 = $94 & 15;
 $iLoc = $95;
 while(1) {
  $96 = $iSRn;
  $97 = ($96|0)!=(0);
  if (!($97)) {
   label = 23;
   break;
  }
  $98 = $iSRn;
  $99 = $98 & 1;
  $iSR = $99;
  $100 = $iSR;
  $101 = ($100|0)==(0);
  if ($101) {
   $102 = $iLoc;
   $103 = (15 - ($102))|0;
   $104 = $2;
   $105 = HEAP32[$104>>2]|0;
   $106 = $3;
   $107 = (_DecodeSignificantRun($103,$105,$106)|0);
   $108 = $iLoc;
   $109 = (($108) + ($107))|0;
   $iLoc = $109;
   $110 = $iLoc;
   $111 = ($110>>>0)>=(16);
   if ($111) {
    label = 12;
    break;
   }
  }
  $112 = $iLoc;
  $113 = (($112) + 1)|0;
  $114 = $iCont;
  $115 = (($114) + 1)|0;
  $116 = $pAH1;
  $117 = (($116) + ($115<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $3;
  _DecodeIndex($iIndex,$113,$118,$119);
  $120 = HEAP32[$iIndex>>2]|0;
  $121 = $120 >> 1;
  $iSRn = $121;
  $122 = $iSRn;
  $123 = ($122|0)>=(0);
  if (!($123)) {
   label = 16;
   break;
  }
  $124 = $iSRn;
  $125 = ($124|0)<(3);
  if (!($125)) {
   label = 16;
   break;
  }
  $126 = $iSRn;
  $127 = $iCont;
  $128 = $127 & $126;
  $iCont = $128;
  $129 = $3;
  $130 = (__getSign($129)|0);
  $iSign = $130;
  $131 = $4;
  $132 = $iSign;
  $133 = $131 ^ $132;
  $134 = $iSign;
  $135 = (($133) - ($134))|0;
  $iLevel = $135;
  $136 = HEAP32[$iIndex>>2]|0;
  $137 = $136 & 1;
  $138 = ($137|0)!=(0);
  if ($138) {
   $139 = $iCont;
   $140 = (19 + ($139))|0;
   $141 = $2;
   $142 = (($141) + ($140<<2)|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $3;
   $145 = (_DecodeSignificantAbsLevel($143,$144)|0);
   $146 = $iLevel;
   $147 = Math_imul($146, $145)|0;
   $iLevel = $147;
  }
  $148 = $iLevel;
  $149 = $iLoc;
  $150 = $pConstScan;
  $151 = (($150) + ($149<<3)|0);
  $152 = (($151) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $5;
  $155 = (($154) + ($153<<2)|0);
  HEAP32[$155>>2] = $148;
  $156 = $iLoc;
  $157 = $6;
  $158 = (($157) + ($156<<3)|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + 1)|0;
  HEAP32[$158>>2] = $160;
  $161 = $iLoc;
  $162 = ($161|0)!=(0);
  if ($162) {
   $163 = $iLoc;
   $164 = $6;
   $165 = (($164) + ($163<<3)|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $iLoc;
   $168 = (($167) - 1)|0;
   $169 = $6;
   $170 = (($169) + ($168<<3)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($166>>>0)>($171>>>0);
   if ($172) {
    $173 = $iLoc;
    $174 = $6;
    $175 = (($174) + ($173<<3)|0);
    ;HEAP32[$cTemp1+0>>2]=HEAP32[$175+0>>2]|0;HEAP32[$cTemp1+4>>2]=HEAP32[$175+4>>2]|0;
    $176 = $iLoc;
    $177 = $6;
    $178 = (($177) + ($176<<3)|0);
    $179 = $iLoc;
    $180 = (($179) - 1)|0;
    $181 = $6;
    $182 = (($181) + ($180<<3)|0);
    ;HEAP32[$178+0>>2]=HEAP32[$182+0>>2]|0;HEAP32[$178+4>>2]=HEAP32[$182+4>>2]|0;
    $183 = $iLoc;
    $184 = (($183) - 1)|0;
    $185 = $6;
    $186 = (($185) + ($184<<3)|0);
    ;HEAP32[$186+0>>2]=HEAP32[$cTemp1+0>>2]|0;HEAP32[$186+4>>2]=HEAP32[$cTemp1+4>>2]|0;
   }
  }
  $187 = $iLoc;
  $188 = (($187) + 1)|0;
  $189 = $188 & 15;
  $iLoc = $189;
  $190 = $iNumNonzero;
  $191 = (($190) + 1)|0;
  $iNumNonzero = $191;
 }
 if ((label|0) == 12) {
  $0 = 16;
  $193 = $0;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 16) {
  ___assert_fail((8000|0),(7904|0),553,(8024|0));
  // unreachable;
 }
 else if ((label|0) == 23) {
  $192 = $iNumNonzero;
  $0 = $192;
  $193 = $0;
  STACKTOP = sp;return ($193|0);
 }
 return 0|0;
}
function __getBit16s($pIO,$cBits) {
 $pIO = $pIO|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $iRet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cBits;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + 1)|0;
 $5 = (__peekBit16($2,$4)|0);
 $iRet = $5;
 $6 = $iRet;
 $7 = $6 >> 1;
 $8 = $iRet;
 $9 = $8 & 1;
 $10 = (0 - ($9))|0;
 $11 = $7 ^ $10;
 $12 = $iRet;
 $13 = $12 & 1;
 $14 = (($11) + ($13))|0;
 $iRet = $14;
 $15 = $0;
 $16 = $1;
 $17 = $iRet;
 $18 = ($17|0)!=(0);
 $19 = $18&1;
 $20 = (($16) + ($19))|0;
 (__flushBit16($15,$20)|0);
 $21 = $iRet;
 STACKTOP = sp;return ($21|0);
}
function _DecodeFirstIndex($pIndex,$pAHexpt,$pIO) {
 $pIndex = $pIndex|0;
 $pAHexpt = $pAHexpt|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iIndex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIndex;
 $1 = $pAHexpt;
 $2 = $pIO;
 $3 = $1;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (_getHuff($5,$6)|0);
 $iIndex = $7;
 $8 = $iIndex;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = (($14) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($13))|0;
 HEAP32[$15>>2] = $17;
 $18 = $iIndex;
 $19 = $1;
 $20 = (($19) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = (($24) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($23))|0;
 HEAP32[$25>>2] = $27;
 $28 = $iIndex;
 $29 = $0;
 HEAP32[$29>>2] = $28;
 STACKTOP = sp;return;
}
function __getSign($pIO) {
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uiRet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >> 31;
 $uiRet = $4;
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)<(16);
 if ($12) {
  $13 = $0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 << 1;
  HEAP32[$14>>2] = $16;
  $47 = $uiRet;
  STACKTOP = sp;return ($47|0);
 } else {
  $17 = $0;
  $18 = (($17) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 3;
  $24 = (($19) + ($23)|0);
  $25 = $24;
  $26 = $0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $25 & $28;
  $30 = $29;
  $31 = $0;
  $32 = (($31) + 20|0);
  HEAP32[$32>>2] = $30;
  $33 = $0;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 15;
  HEAP32[$34>>2] = $36;
  $37 = $0;
  $38 = (($37) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (__load4($39)|0);
  $41 = $0;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $40 << $43;
  $45 = $0;
  $46 = (($45) + 4|0);
  HEAP32[$46>>2] = $44;
  $47 = $uiRet;
  STACKTOP = sp;return ($47|0);
 }
 return 0|0;
}
function _DecodeIndex($pIndex,$iLoc,$pAHexpt,$pIO) {
 $pIndex = $pIndex|0;
 $iLoc = $iLoc|0;
 $pAHexpt = $pAHexpt|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iIndex = 0, $iSL = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIndex;
 $1 = $iLoc;
 $2 = $pAHexpt;
 $3 = $pIO;
 $4 = $1;
 $5 = ($4|0)<(15);
 if ($5) {
  $6 = $2;
  $7 = (($6) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $3;
  $10 = (__getHuffShort($8,$9)|0);
  $iIndex = $10;
  $11 = $iIndex;
  $12 = $2;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = (($17) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16))|0;
  HEAP32[$18>>2] = $20;
  $21 = $iIndex;
  $22 = $2;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $2;
  $28 = (($27) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26))|0;
  HEAP32[$28>>2] = $30;
  $31 = $iIndex;
  $32 = $0;
  HEAP32[$32>>2] = $31;
  STACKTOP = sp;return;
 }
 $33 = $1;
 $34 = ($33|0)==(15);
 if ($34) {
  $35 = $3;
  $36 = (__getBool16($35)|0);
  $37 = ($36|0)==(0);
  if ($37) {
   $iIndex = 0;
  } else {
   $38 = $3;
   $39 = (__getBool16($38)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    $iIndex = 2;
   } else {
    $41 = $3;
    $42 = (__getBool16($41)|0);
    $43 = $42<<1;
    $44 = (1 + ($43))|0;
    $iIndex = $44;
   }
  }
  $45 = $iIndex;
  $46 = $0;
  HEAP32[$46>>2] = $45;
 } else {
  $47 = $3;
  $48 = (__getBit16($47,1)|0);
  $iSL = $48;
  $49 = $iSL;
  $50 = $0;
  HEAP32[$50>>2] = $49;
 }
 STACKTOP = sp;return;
}
function __load4($pv) {
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pv;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__byteswap_ulong($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _readQuantizer($pQuantizer,$pIO,$cChannel,$iPos) {
 $pQuantizer = $pQuantizer|0;
 $pIO = $pIO|0;
 $cChannel = $cChannel|0;
 $iPos = $iPos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cChMode = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pQuantizer;
 $1 = $pIO;
 $2 = $cChannel;
 $3 = $iPos;
 $cChMode = 0;
 $4 = $2;
 $5 = ($4>>>0)>(1);
 if ($5) {
  $6 = $1;
  $7 = (_getBit16($6,2)|0);
  $8 = $7&255;
  $cChMode = $8;
 }
 $9 = $1;
 $10 = (_getBit16($9,8)|0);
 $11 = $10&255;
 $12 = $3;
 $13 = $0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($12*20)|0)|0);
 HEAP8[$15>>0] = $11;
 $16 = $cChMode;
 $17 = $16&255;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = $1;
  $20 = (_getBit16($19,8)|0);
  $21 = $20&255;
  $22 = $3;
  $23 = $0;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + (($22*20)|0)|0);
  HEAP8[$26>>0] = $21;
  $44 = $cChMode;
  STACKTOP = sp;return ($44|0);
 }
 $27 = $cChMode;
 $28 = $27&255;
 $29 = ($28|0)>(0);
 if ($29) {
  $i = 1;
  while(1) {
   $30 = $i;
   $31 = $2;
   $32 = ($30>>>0)<($31>>>0);
   if (!($32)) {
    break;
   }
   $33 = $1;
   $34 = (_getBit16($33,8)|0);
   $35 = $34&255;
   $36 = $3;
   $37 = $i;
   $38 = $0;
   $39 = (($38) + ($37<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + (($36*20)|0)|0);
   HEAP8[$41>>0] = $35;
   $42 = $i;
   $43 = (($42) + 1)|0;
   $i = $43;
  }
 }
 $44 = $cChMode;
 STACKTOP = sp;return ($44|0);
}
function _readPacketHeader($pIO,$ptPacketType,$pID) {
 $pIO = $pIO|0;
 $ptPacketType = $ptPacketType|0;
 $pID = $pID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pIO;
 $2 = $ptPacketType;
 $3 = $pID;
 $4 = $2;
 $2 = $4;
 $5 = $3;
 $3 = $5;
 $6 = $1;
 $7 = (_getBit16($6,8)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $1;
  $10 = (_getBit16($9,8)|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = $1;
   $13 = (_getBit16($12,8)|0);
   $14 = ($13|0)!=(1);
   if (!($14)) {
    $15 = $1;
    (_getBit16($15,8)|0);
    $0 = 0;
    $16 = $0;
    STACKTOP = sp;return ($16|0);
   }
  }
 }
 $0 = -1;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _readTileHeaderDC($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $iTile = 0, $pTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pIO;
 $3 = $1;
 $4 = (($3) + 34136|0);
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  $10 = (($9) + 34316|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = (($12) + 34296|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($11) + (($14*240)|0)|0);
  $pTile = $15;
  $16 = $1;
  $17 = (($16) + 34292|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  $20 = (($19) + 34296|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($18) + ($21))|0;
  $23 = ($22|0)==(0);
  do {
   if ($23) {
    $iTile = 0;
    while(1) {
     $24 = $iTile;
     $25 = $1;
     $26 = (($25) + 84|0);
     $27 = (($26) + 64|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($24>>>0)<=($28>>>0);
     if (!($29)) {
      label = 9;
      break;
     }
     $30 = $iTile;
     $31 = $1;
     $32 = (($31) + 34316|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (($33) + (($30*240)|0)|0);
     $35 = $1;
     $36 = (($35) + 34136|0);
     $37 = (($36) + 36|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (_allocateQuantizer($34,$38,1)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      break;
     }
     $41 = $iTile;
     $42 = (($41) + 1)|0;
     $iTile = $42;
    }
    if ((label|0) == 9) {
     break;
    }
    $0 = -1;
    $64 = $0;
    STACKTOP = sp;return ($64|0);
   }
  } while(0);
  $43 = $pTile;
  $44 = $2;
  $45 = $1;
  $46 = (($45) + 34136|0);
  $47 = (($46) + 36|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_readQuantizer($43,$44,$48,0)|0);
  $50 = $pTile;
  $51 = (($50) + 204|0);
  HEAP8[$51>>0] = $49;
  $52 = $pTile;
  $53 = $pTile;
  $54 = (($53) + 204|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $1;
  $57 = (($56) + 34136|0);
  $58 = (($57) + 36|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $1;
  $61 = (($60) + 34136|0);
  $62 = (($61) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  _formatQuantizer($52,$55,$59,0,1,$63);
 }
 $0 = 0;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function _readTileHeaderLP($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $pTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pIO;
 $3 = $1;
 $4 = (($3) + 84|0);
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(3);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 34136|0);
  $10 = (($9) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 2;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $1;
   $15 = (($14) + 34316|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 34296|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($16) + (($19*240)|0)|0);
   $pTile = $20;
   $21 = $2;
   $22 = (_getBit16($21,1)|0);
   $23 = ($22|0)==(1);
   $24 = $23 ? 1 : 0;
   $25 = $pTile;
   $26 = (($25) + 196|0);
   HEAP32[$26>>2] = $24;
   $27 = $pTile;
   $28 = (($27) + 194|0);
   HEAP8[$28>>0] = 0;
   $29 = $pTile;
   $30 = (($29) + 192|0);
   HEAP8[$30>>0] = 1;
   $31 = $1;
   $32 = (($31) + 34292|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33>>>0)>(0);
   if ($34) {
    $35 = $pTile;
    $36 = (($35) + 64|0);
    _freeQuantizer($36);
   }
   $37 = $pTile;
   $38 = (($37) + 196|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(1);
   do {
    if ($40) {
     $41 = $pTile;
     $42 = (($41) + 64|0);
     $43 = $1;
     $44 = (($43) + 34136|0);
     $45 = (($44) + 36|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $pTile;
     $48 = (($47) + 192|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = (_allocateQuantizer($42,$46,$50)|0);
     $52 = ($51|0)!=(0);
     if (!($52)) {
      $53 = $1;
      $54 = $1;
      $55 = (($54) + 34296|0);
      $56 = HEAP32[$55>>2]|0;
      _useDCQuantizer($53,$56);
      break;
     }
     $0 = -1;
     $125 = $0;
     STACKTOP = sp;return ($125|0);
    } else {
     $57 = $2;
     $58 = (_getBit16($57,4)|0);
     $59 = $58&255;
     $60 = $59&255;
     $61 = (($60) + 1)|0;
     $62 = $61&255;
     $63 = $pTile;
     $64 = (($63) + 192|0);
     HEAP8[$64>>0] = $62;
     $65 = $pTile;
     $66 = (($65) + 192|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = (_dquantBits($67)|0);
     $69 = $pTile;
     $70 = (($69) + 194|0);
     HEAP8[$70>>0] = $68;
     $71 = $pTile;
     $72 = (($71) + 64|0);
     $73 = $1;
     $74 = (($73) + 34136|0);
     $75 = (($74) + 36|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $pTile;
     $78 = (($77) + 192|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     $81 = (_allocateQuantizer($72,$76,$80)|0);
     $82 = ($81|0)!=(0);
     if ($82) {
      $0 = -1;
      $125 = $0;
      STACKTOP = sp;return ($125|0);
     }
     $i = 0;
     while(1) {
      $83 = $i;
      $84 = $83&255;
      $85 = $pTile;
      $86 = (($85) + 192|0);
      $87 = HEAP8[$86>>0]|0;
      $88 = $87&255;
      $89 = ($84|0)<($88|0);
      if (!($89)) {
       break;
      }
      $90 = $pTile;
      $91 = (($90) + 64|0);
      $92 = $2;
      $93 = $1;
      $94 = (($93) + 34136|0);
      $95 = (($94) + 36|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = $i;
      $98 = $97&255;
      $99 = (_readQuantizer($91,$92,$96,$98)|0);
      $100 = $i;
      $101 = $100&255;
      $102 = $pTile;
      $103 = (($102) + 205|0);
      $104 = (($103) + ($101)|0);
      HEAP8[$104>>0] = $99;
      $105 = $pTile;
      $106 = (($105) + 64|0);
      $107 = $i;
      $108 = $107&255;
      $109 = $pTile;
      $110 = (($109) + 205|0);
      $111 = (($110) + ($108)|0);
      $112 = HEAP8[$111>>0]|0;
      $113 = $1;
      $114 = (($113) + 34136|0);
      $115 = (($114) + 36|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $i;
      $118 = $117&255;
      $119 = $1;
      $120 = (($119) + 34136|0);
      $121 = (($120) + 20|0);
      $122 = HEAP32[$121>>2]|0;
      _formatQuantizer($106,$112,$116,$118,1,$122);
      $123 = $i;
      $124 = (($123) + 1)<<24>>24;
      $i = $124;
     }
    }
   } while(0);
  }
 }
 $0 = 0;
 $125 = $0;
 STACKTOP = sp;return ($125|0);
}
function _readTileHeaderHP($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $pTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pIO;
 $3 = $1;
 $4 = (($3) + 84|0);
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(3);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 84|0);
  $10 = (($9) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(2);
  if ($12) {
   $13 = $1;
   $14 = (($13) + 34136|0);
   $15 = (($14) + 60|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 & 4;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $1;
    $20 = (($19) + 34316|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $1;
    $23 = (($22) + 34296|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($21) + (($24*240)|0)|0);
    $pTile = $25;
    $26 = $2;
    $27 = (_getBit16($26,1)|0);
    $28 = ($27|0)==(1);
    $29 = $28 ? 1 : 0;
    $30 = $pTile;
    $31 = (($30) + 200|0);
    HEAP32[$31>>2] = $29;
    $32 = $pTile;
    $33 = (($32) + 195|0);
    HEAP8[$33>>0] = 0;
    $34 = $pTile;
    $35 = (($34) + 193|0);
    HEAP8[$35>>0] = 1;
    $36 = $1;
    $37 = (($36) + 34292|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38>>>0)>(0);
    if ($39) {
     $40 = $pTile;
     $41 = (($40) + 128|0);
     _freeQuantizer($41);
    }
    $42 = $pTile;
    $43 = (($42) + 200|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(1);
    do {
     if ($45) {
      $46 = $pTile;
      $47 = (($46) + 192|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $pTile;
      $50 = (($49) + 193|0);
      HEAP8[$50>>0] = $48;
      $51 = $pTile;
      $52 = (($51) + 128|0);
      $53 = $1;
      $54 = (($53) + 34136|0);
      $55 = (($54) + 36|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = $pTile;
      $58 = (($57) + 193|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59&255;
      $61 = (_allocateQuantizer($52,$56,$60)|0);
      $62 = ($61|0)!=(0);
      if (!($62)) {
       $63 = $1;
       $64 = $pTile;
       $65 = (($64) + 193|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = $66&255;
       $68 = $1;
       $69 = (($68) + 34296|0);
       $70 = HEAP32[$69>>2]|0;
       _useLPQuantizer($63,$67,$70);
       break;
      }
      $0 = -1;
      $139 = $0;
      STACKTOP = sp;return ($139|0);
     } else {
      $71 = $2;
      $72 = (_getBit16($71,4)|0);
      $73 = $72&255;
      $74 = $73&255;
      $75 = (($74) + 1)|0;
      $76 = $75&255;
      $77 = $pTile;
      $78 = (($77) + 193|0);
      HEAP8[$78>>0] = $76;
      $79 = $pTile;
      $80 = (($79) + 193|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = (_dquantBits($81)|0);
      $83 = $pTile;
      $84 = (($83) + 195|0);
      HEAP8[$84>>0] = $82;
      $85 = $pTile;
      $86 = (($85) + 128|0);
      $87 = $1;
      $88 = (($87) + 34136|0);
      $89 = (($88) + 36|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = $pTile;
      $92 = (($91) + 193|0);
      $93 = HEAP8[$92>>0]|0;
      $94 = $93&255;
      $95 = (_allocateQuantizer($86,$90,$94)|0);
      $96 = ($95|0)!=(0);
      if ($96) {
       $0 = -1;
       $139 = $0;
       STACKTOP = sp;return ($139|0);
      }
      $i = 0;
      while(1) {
       $97 = $i;
       $98 = $97&255;
       $99 = $pTile;
       $100 = (($99) + 193|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101&255;
       $103 = ($98|0)<($102|0);
       if (!($103)) {
        break;
       }
       $104 = $pTile;
       $105 = (($104) + 128|0);
       $106 = $2;
       $107 = $1;
       $108 = (($107) + 34136|0);
       $109 = (($108) + 36|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = $i;
       $112 = $111&255;
       $113 = (_readQuantizer($105,$106,$110,$112)|0);
       $114 = $i;
       $115 = $114&255;
       $116 = $pTile;
       $117 = (($116) + 221|0);
       $118 = (($117) + ($115)|0);
       HEAP8[$118>>0] = $113;
       $119 = $pTile;
       $120 = (($119) + 128|0);
       $121 = $i;
       $122 = $121&255;
       $123 = $pTile;
       $124 = (($123) + 221|0);
       $125 = (($124) + ($122)|0);
       $126 = HEAP8[$125>>0]|0;
       $127 = $1;
       $128 = (($127) + 34136|0);
       $129 = (($128) + 36|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = $i;
       $132 = $131&255;
       $133 = $1;
       $134 = (($133) + 34136|0);
       $135 = (($134) + 20|0);
       $136 = HEAP32[$135>>2]|0;
       _formatQuantizer($120,$126,$130,$132,0,$136);
       $137 = $i;
       $138 = (($137) + 1)<<24>>24;
       $i = $138;
      }
     }
    } while(0);
   }
  }
 }
 $0 = 0;
 $139 = $0;
 STACKTOP = sp;return ($139|0);
}
function _readPackets($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cBands = 0, $err = 0, $indexWithinTile = 0, $k = 0;
 var $offset = 0, $pContext = 0, $pID = 0, $pIO = 0, $pIOInfo = 0, $ppWS = 0, $tileCol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 34360|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 34356|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = (($9) + 34292|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = (($12) + 84|0);
  $14 = (($13) + 16456|0);
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($8|0)==($16|0);
  if ($17) {
   $18 = $1;
   $19 = (($18) + 35036|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(0);
   do {
    if ($21) {
     $22 = $1;
     $23 = (($22) + 34328|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24>>>0)>(0);
     if ($25) {
      $k = 0;
      while(1) {
       $26 = $k;
       $27 = $1;
       $28 = (($27) + 84|0);
       $29 = (($28) + 64|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($26>>>0)<=($30>>>0);
       if (!($31)) {
        break;
       }
       $32 = $k;
       $33 = $1;
       $34 = (($33) + 34336|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($35) + (($32*592)|0)|0);
       _ResetCodingContextDec($36);
       $37 = $k;
       $38 = (($37) + 1)|0;
       $k = $38;
      }
     } else {
      $39 = $1;
      $40 = (($39) + 34336|0);
      $41 = HEAP32[$40>>2]|0;
      _ResetCodingContextDec($41);
     }
    } else {
     $k = 0;
     while(1) {
      $42 = $k;
      $43 = $1;
      $44 = (($43) + 34328|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($42>>>0)<($45>>>0);
      if (!($46)) {
       label = 40;
       break;
      }
      $47 = $1;
      $48 = (($47) + 35024|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)!=(0|0);
      if ($50) {
       $51 = $1;
       $52 = (($51) + 84|0);
       $53 = (($52) + 28|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(0);
       if ($55) {
        $59 = 1;
       } else {
        $56 = $1;
        $57 = (($56) + 34252|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = $58;
       }
       $cBands = $59;
       $60 = $1;
       $61 = (($60) + 35024|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = $1;
       $64 = (($63) + 84|0);
       $65 = (($64) + 64|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($66) + 1)|0;
       $68 = $1;
       $69 = (($68) + 34292|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = Math_imul($67, $70)|0;
       $72 = $cBands;
       $73 = Math_imul($71, $72)|0;
       $74 = (($62) + ($73<<2)|0);
       $75 = $k;
       $76 = $cBands;
       $77 = (($75>>>0) / ($76>>>0))&-1;
       $78 = $cBands;
       $79 = Math_imul($77, $78)|0;
       $80 = (($74) + ($79<<2)|0);
       $81 = $k;
       $82 = $cBands;
       $83 = (($81>>>0) % ($82>>>0))&-1;
       $84 = (($80) + ($83<<2)|0);
       $ppWS = $84;
       $85 = $1;
       $86 = (($85) + 34292|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($87>>>0)>(0);
       if ($88) {
        $89 = $k;
        $90 = $1;
        $91 = (($90) + 34320|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = (($92) + ($89<<2)|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = (($94) + 24|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ($96|0)!=(0|0);
        if ($97) {
         $98 = $1;
         $99 = $k;
         $100 = $1;
         $101 = (($100) + 34320|0);
         $102 = HEAP32[$101>>2]|0;
         $103 = (($102) + ($99<<2)|0);
         $104 = HEAP32[$103>>2]|0;
         _detachISRead($98,$104);
        }
       }
       $105 = $ppWS;
       $106 = HEAP32[$105>>2]|0;
       $107 = ($106|0)!=(0|0);
       if ($107) {
        $108 = $k;
        $109 = $1;
        $110 = (($109) + 34320|0);
        $111 = HEAP32[$110>>2]|0;
        $112 = (($111) + ($108<<2)|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = $ppWS;
        $115 = HEAP32[$114>>2]|0;
        $116 = $1;
        $117 = (_attachISRead($113,$115,$116)|0);
        $err = $117;
        $118 = $err;
        $119 = (0)!=($118|0);
        if ($119) {
         label = 23;
         break;
        }
       }
      } else {
       $120 = $k;
       $121 = $1;
       $122 = (($121) + 34252|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = (($120>>>0) / ($123>>>0))&-1;
       $tileCol = $124;
       $125 = $k;
       $126 = $1;
       $127 = (($126) + 34252|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = (($125>>>0) % ($128>>>0))&-1;
       $indexWithinTile = $129;
       $130 = $1;
       $131 = (($130) + 34260|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = $1;
       $134 = (($133) + 34292|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = Math_imul($132, $135)|0;
       $137 = $tileCol;
       $138 = $1;
       $139 = (($138) + 34256|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = Math_imul($137, $140)|0;
       $142 = (($136) + ($141))|0;
       $143 = $indexWithinTile;
       $144 = (($142) + ($143))|0;
       $145 = $1;
       $146 = (($145) + 34288|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (($147) + ($144<<2)|0);
       $149 = HEAP32[$148>>2]|0;
       $offset = $149;
       $150 = $1;
       $151 = (($150) + 34292|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($152>>>0)>(0);
       if ($153) {
        $154 = $1;
        $155 = $k;
        $156 = $1;
        $157 = (($156) + 34320|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = (($158) + ($155<<2)|0);
        $160 = HEAP32[$159>>2]|0;
        _detachISRead($154,$160);
       }
       $161 = $1;
       $162 = (($161) + 84|0);
       $163 = (($162) + 28|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==(0);
       do {
        if ($165) {
         label = 32;
        } else {
         $166 = $1;
         $167 = (($166) + 34292|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = (0)==($168|0);
         if ($169) {
          $170 = $k;
          $171 = (0)==($170|0);
          if ($171) {
           label = 32;
           break;
          }
         }
         $172 = $offset;
         $173 = (0)!=($172|0);
         if ($173) {
          label = 32;
         }
        }
       } while(0);
       if ((label|0) == 32) {
        label = 0;
        $174 = $1;
        $175 = (($174) + 84|0);
        $176 = (($175) + 52|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = (($177) + 44|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = $1;
        $181 = (($180) + 84|0);
        $182 = (($181) + 52|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = $offset;
        $185 = $1;
        $186 = (($185) + 34332|0);
        $187 = HEAP32[$186>>2]|0;
        $188 = (($184) + ($187))|0;
        $189 = (FUNCTION_TABLE_iii[$179 & 255]($183,$188)|0);
        $err = $189;
        $190 = $err;
        $191 = (0)!=($190|0);
        if ($191) {
         label = 33;
         break;
        }
        $192 = $k;
        $193 = $1;
        $194 = (($193) + 34320|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = (($195) + ($192<<2)|0);
        $197 = HEAP32[$196>>2]|0;
        $198 = $1;
        $199 = (($198) + 84|0);
        $200 = (($199) + 52|0);
        $201 = HEAP32[$200>>2]|0;
        $202 = $1;
        $203 = (_attachISRead($197,$201,$202)|0);
        $err = $203;
        $204 = $err;
        $205 = (0)!=($204|0);
        if ($205) {
         label = 35;
         break;
        }
       }
      }
      $206 = $k;
      $207 = (($206) + 1)|0;
      $k = $207;
     }
     if ((label|0) == 23) {
      $0 = -1;
      $535 = $0;
      STACKTOP = sp;return ($535|0);
     }
     else if ((label|0) == 33) {
      $0 = -1;
      $535 = $0;
      STACKTOP = sp;return ($535|0);
     }
     else if ((label|0) == 35) {
      $0 = -1;
      $535 = $0;
      STACKTOP = sp;return ($535|0);
     }
     else if ((label|0) == 40) {
      $208 = $1;
      $209 = (($208) + 34328|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = ($210|0)==(0);
      if ($211) {
       $212 = $1;
       $213 = $1;
       $214 = (($213) + 34272|0);
       $215 = HEAP32[$214>>2]|0;
       _detachISRead($212,$215);
       $216 = $1;
       $217 = (($216) + 35024|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = ($218|0)!=(0|0);
       do {
        if ($219) {
         $220 = $1;
         $221 = (($220) + 34272|0);
         $222 = HEAP32[$221>>2]|0;
         $223 = $1;
         $224 = (($223) + 35024|0);
         $225 = HEAP32[$224>>2]|0;
         $226 = HEAP32[$225>>2]|0;
         $227 = $1;
         $228 = (_attachISRead($222,$226,$227)|0);
         $err = $228;
         $229 = $err;
         $230 = (0)!=($229|0);
         if (!($230)) {
          break;
         }
         $0 = -1;
         $535 = $0;
         STACKTOP = sp;return ($535|0);
        } else {
         $231 = $1;
         $232 = (($231) + 84|0);
         $233 = (($232) + 52|0);
         $234 = HEAP32[$233>>2]|0;
         $235 = (($234) + 44|0);
         $236 = HEAP32[$235>>2]|0;
         $237 = $1;
         $238 = (($237) + 84|0);
         $239 = (($238) + 52|0);
         $240 = HEAP32[$239>>2]|0;
         $241 = $1;
         $242 = (($241) + 34332|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = (FUNCTION_TABLE_iii[$236 & 255]($240,$243)|0);
         $err = $244;
         $245 = $err;
         $246 = (0)!=($245|0);
         if ($246) {
          $0 = -1;
          $535 = $0;
          STACKTOP = sp;return ($535|0);
         }
         $247 = $1;
         $248 = (($247) + 34272|0);
         $249 = HEAP32[$248>>2]|0;
         $250 = $1;
         $251 = (($250) + 84|0);
         $252 = (($251) + 52|0);
         $253 = HEAP32[$252>>2]|0;
         $254 = $1;
         $255 = (_attachISRead($249,$253,$254)|0);
         $err = $255;
         $256 = $err;
         $257 = (0)!=($256|0);
         if (!($257)) {
          break;
         }
         $0 = -1;
         $535 = $0;
         STACKTOP = sp;return ($535|0);
        }
       } while(0);
      }
      $k = 0;
      while(1) {
       $258 = $k;
       $259 = $1;
       $260 = (($259) + 84|0);
       $261 = (($260) + 64|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = ($258>>>0)<=($262>>>0);
       if (!($263)) {
        label = 89;
        break;
       }
       $264 = $1;
       $265 = (($264) + 34292|0);
       $266 = HEAP32[$265>>2]|0;
       $267 = $1;
       $268 = (($267) + 84|0);
       $269 = (($268) + 64|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = (($270) + 1)|0;
       $272 = Math_imul($266, $271)|0;
       $273 = $k;
       $274 = (($272) + ($273))|0;
       $275 = $274 & 31;
       $276 = $275&255;
       $pID = $276;
       $277 = $1;
       $278 = (($277) + 84|0);
       $279 = (($278) + 28|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = ($280|0)==(0);
       if ($281) {
        $282 = $1;
        $283 = (($282) + 34328|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = ($284|0)==(0);
        if ($285) {
         $286 = $1;
         $287 = (($286) + 34272|0);
         $288 = HEAP32[$287>>2]|0;
         $295 = $288;
        } else {
         $289 = $k;
         $290 = $1;
         $291 = (($290) + 34320|0);
         $292 = HEAP32[$291>>2]|0;
         $293 = (($292) + ($289<<2)|0);
         $294 = HEAP32[$293>>2]|0;
         $295 = $294;
        }
        $pIO = $295;
        $296 = $pIO;
        $297 = (($296) + 24|0);
        $298 = HEAP32[$297>>2]|0;
        $299 = ($298|0)==(0|0);
        if ($299) {
         label = 59;
         break;
        }
        $300 = $pIO;
        $301 = $pID;
        $302 = (_readPacketHeader($300,0,$301)|0);
        $303 = ($302|0)!=(0);
        if ($303) {
         label = 59;
         break;
        }
        $304 = $1;
        $305 = (($304) + 34136|0);
        $306 = (($305) + 28|0);
        $307 = HEAP32[$306>>2]|0;
        $308 = ($307|0)!=(0);
        if ($308) {
         $309 = $pIO;
         $310 = (_getBit16($309,4)|0);
         $317 = $310;
        } else {
         $317 = 0;
        }
        $311 = $k;
        $312 = $1;
        $313 = (($312) + 34336|0);
        $314 = HEAP32[$313>>2]|0;
        $315 = (($314) + (($311*592)|0)|0);
        $316 = (($315) + 584|0);
        HEAP32[$316>>2] = $317;
       } else {
        $318 = $k;
        $319 = $1;
        $320 = (($319) + 34252|0);
        $321 = HEAP32[$320>>2]|0;
        $322 = Math_imul($318, $321)|0;
        $323 = (($322) + 0)|0;
        $324 = $1;
        $325 = (($324) + 34320|0);
        $326 = HEAP32[$325>>2]|0;
        $327 = (($326) + ($323<<2)|0);
        $328 = HEAP32[$327>>2]|0;
        $329 = ($328|0)==(0|0);
        if ($329) {
         label = 66;
         break;
        }
        $330 = $k;
        $331 = $1;
        $332 = (($331) + 34252|0);
        $333 = HEAP32[$332>>2]|0;
        $334 = Math_imul($330, $333)|0;
        $335 = (($334) + 0)|0;
        $336 = $1;
        $337 = (($336) + 34320|0);
        $338 = HEAP32[$337>>2]|0;
        $339 = (($338) + ($335<<2)|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = $pID;
        $342 = (_readPacketHeader($340,1,$341)|0);
        $343 = ($342|0)!=(0);
        if ($343) {
         label = 66;
         break;
        }
        $344 = $1;
        $345 = (($344) + 34252|0);
        $346 = HEAP32[$345>>2]|0;
        $347 = ($346>>>0)>(1);
        if ($347) {
         $348 = $k;
         $349 = $1;
         $350 = (($349) + 34252|0);
         $351 = HEAP32[$350>>2]|0;
         $352 = Math_imul($348, $351)|0;
         $353 = (($352) + 1)|0;
         $354 = $1;
         $355 = (($354) + 34320|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = (($356) + ($353<<2)|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358|0)==(0|0);
         if ($359) {
          label = 70;
          break;
         }
         $360 = $k;
         $361 = $1;
         $362 = (($361) + 34252|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = Math_imul($360, $363)|0;
         $365 = (($364) + 1)|0;
         $366 = $1;
         $367 = (($366) + 34320|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = (($368) + ($365<<2)|0);
         $370 = HEAP32[$369>>2]|0;
         $371 = $pID;
         $372 = (_readPacketHeader($370,2,$371)|0);
         $373 = ($372|0)!=(0);
         if ($373) {
          label = 70;
          break;
         }
        }
        $374 = $1;
        $375 = (($374) + 34252|0);
        $376 = HEAP32[$375>>2]|0;
        $377 = ($376>>>0)>(2);
        if ($377) {
         $378 = $k;
         $379 = $1;
         $380 = (($379) + 34252|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = Math_imul($378, $381)|0;
         $383 = (($382) + 2)|0;
         $384 = $1;
         $385 = (($384) + 34320|0);
         $386 = HEAP32[$385>>2]|0;
         $387 = (($386) + ($383<<2)|0);
         $388 = HEAP32[$387>>2]|0;
         $389 = ($388|0)==(0|0);
         if ($389) {
          label = 75;
          break;
         }
         $390 = $k;
         $391 = $1;
         $392 = (($391) + 34252|0);
         $393 = HEAP32[$392>>2]|0;
         $394 = Math_imul($390, $393)|0;
         $395 = (($394) + 2)|0;
         $396 = $1;
         $397 = (($396) + 34320|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = (($398) + ($395<<2)|0);
         $400 = HEAP32[$399>>2]|0;
         $401 = $pID;
         $402 = (_readPacketHeader($400,3,$401)|0);
         $403 = ($402|0)!=(0);
         if ($403) {
          label = 75;
          break;
         }
        }
        $404 = $1;
        $405 = (($404) + 34252|0);
        $406 = HEAP32[$405>>2]|0;
        $407 = ($406>>>0)>(3);
        if ($407) {
         $408 = $k;
         $409 = $1;
         $410 = (($409) + 34252|0);
         $411 = HEAP32[$410>>2]|0;
         $412 = Math_imul($408, $411)|0;
         $413 = (($412) + 3)|0;
         $414 = $1;
         $415 = (($414) + 34320|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = (($416) + ($413<<2)|0);
         $418 = HEAP32[$417>>2]|0;
         $pIOInfo = $418;
         $419 = $pIOInfo;
         $420 = (0|0)==($419|0);
         if ($420) {
          label = 79;
          break;
         }
         $421 = $pIOInfo;
         $422 = (($421) + 20|0);
         $423 = HEAP32[$422>>2]|0;
         $424 = (0|0)!=($423|0);
         if ($424) {
          $425 = $k;
          $426 = $1;
          $427 = (($426) + 34252|0);
          $428 = HEAP32[$427>>2]|0;
          $429 = Math_imul($425, $428)|0;
          $430 = (($429) + 3)|0;
          $431 = $1;
          $432 = (($431) + 34320|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = (($433) + ($430<<2)|0);
          $435 = HEAP32[$434>>2]|0;
          $436 = $pID;
          (_readPacketHeader($435,4,$436)|0);
          $437 = $1;
          $438 = (($437) + 34136|0);
          $439 = (($438) + 28|0);
          $440 = HEAP32[$439>>2]|0;
          $441 = ($440|0)!=(0);
          if ($441) {
           $442 = $k;
           $443 = $1;
           $444 = (($443) + 34252|0);
           $445 = HEAP32[$444>>2]|0;
           $446 = Math_imul($442, $445)|0;
           $447 = (($446) + 3)|0;
           $448 = $1;
           $449 = (($448) + 34320|0);
           $450 = HEAP32[$449>>2]|0;
           $451 = (($450) + ($447<<2)|0);
           $452 = HEAP32[$451>>2]|0;
           $453 = (_getBit16($452,4)|0);
           $460 = $453;
          } else {
           $460 = 0;
          }
          $454 = $k;
          $455 = $1;
          $456 = (($455) + 34336|0);
          $457 = HEAP32[$456>>2]|0;
          $458 = (($457) + (($454*592)|0)|0);
          $459 = (($458) + 584|0);
          HEAP32[$459>>2] = $460;
         }
        }
       }
       $461 = $k;
       $462 = $1;
       $463 = (($462) + 34336|0);
       $464 = HEAP32[$463>>2]|0;
       $465 = (($464) + (($461*592)|0)|0);
       _ResetCodingContextDec($465);
       $466 = $k;
       $467 = (($466) + 1)|0;
       $k = $467;
      }
      if ((label|0) == 59) {
       $0 = -1;
       $535 = $0;
       STACKTOP = sp;return ($535|0);
      }
      else if ((label|0) == 66) {
       $0 = -1;
       $535 = $0;
       STACKTOP = sp;return ($535|0);
      }
      else if ((label|0) == 70) {
       $0 = -1;
       $535 = $0;
       STACKTOP = sp;return ($535|0);
      }
      else if ((label|0) == 75) {
       $0 = -1;
       $535 = $0;
       STACKTOP = sp;return ($535|0);
      }
      else if ((label|0) == 79) {
       $0 = -1;
       $535 = $0;
       STACKTOP = sp;return ($535|0);
      }
      else if ((label|0) == 89) {
       break;
      }
     }
    }
   } while(0);
  }
 }
 $468 = $1;
 $469 = (($468) + 34300|0);
 $470 = HEAP32[$469>>2]|0;
 $471 = ($470|0)!=(0);
 if ($471) {
  $472 = $1;
  $473 = (($472) + 34304|0);
  $474 = HEAP32[$473>>2]|0;
  $475 = ($474|0)!=(0);
  if ($475) {
   $476 = $1;
   $477 = (($476) + 35036|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = ($478|0)==(0);
   if ($479) {
    $480 = $1;
    $481 = (($480) + 34296|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = $1;
    $484 = (($483) + 34336|0);
    $485 = HEAP32[$484>>2]|0;
    $486 = (($485) + (($482*592)|0)|0);
    $pContext = $486;
    $487 = $1;
    $488 = $pContext;
    $489 = HEAP32[$488>>2]|0;
    (_readTileHeaderDC($487,$489)|0);
    $490 = $1;
    $491 = (($490) + 35032|0);
    $492 = HEAP32[$491>>2]|0;
    $493 = ($492|0)!=(0|0);
    if ($493) {
     $494 = $1;
     $495 = (($494) + 35032|0);
     $496 = HEAP32[$495>>2]|0;
     $497 = $pContext;
     $498 = HEAP32[$497>>2]|0;
     (_readTileHeaderDC($496,$498)|0);
    }
    $499 = $1;
    $500 = (($499) + 34252|0);
    $501 = HEAP32[$500>>2]|0;
    $502 = ($501>>>0)>(1);
    if ($502) {
     $503 = $1;
     $504 = $pContext;
     $505 = (($504) + 4|0);
     $506 = HEAP32[$505>>2]|0;
     (_readTileHeaderLP($503,$506)|0);
     $507 = $1;
     $508 = (($507) + 35032|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($509|0)!=(0|0);
     if ($510) {
      $511 = $1;
      $512 = (($511) + 35032|0);
      $513 = HEAP32[$512>>2]|0;
      $514 = $pContext;
      $515 = (($514) + 4|0);
      $516 = HEAP32[$515>>2]|0;
      (_readTileHeaderLP($513,$516)|0);
     }
    }
    $517 = $1;
    $518 = (($517) + 34252|0);
    $519 = HEAP32[$518>>2]|0;
    $520 = ($519>>>0)>(2);
    if ($520) {
     $521 = $1;
     $522 = $pContext;
     $523 = (($522) + 8|0);
     $524 = HEAP32[$523>>2]|0;
     (_readTileHeaderHP($521,$524)|0);
     $525 = $1;
     $526 = (($525) + 35032|0);
     $527 = HEAP32[$526>>2]|0;
     $528 = ($527|0)!=(0|0);
     if ($528) {
      $529 = $1;
      $530 = (($529) + 35032|0);
      $531 = HEAP32[$530>>2]|0;
      $532 = $pContext;
      $533 = (($532) + 8|0);
      $534 = HEAP32[$533>>2]|0;
      (_readTileHeaderHP($531,$534)|0);
     }
    }
   }
  }
 }
 $0 = 0;
 $535 = $0;
 STACKTOP = sp;return ($535|0);
}
function _processMacroblockDec($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bottom = 0, $bottomORright = 0, $j = 0, $jend = 0, $olOverlap = 0, $pContext = 0, $rBottom = 0, $rExt = 0, $rLeft = 0, $rRight = 0, $rTop = 0, $result = 0, $tBottom = 0, $tLeft = 0, $tRight = 0, $tTop = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 84|0);
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $olOverlap = $5;
 $6 = $1;
 $7 = (($6) + 34356|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 34368|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)==($11|0);
 $13 = $12&1;
 $bottom = $13;
 $14 = $bottom;
 $15 = ($14|0)!=(0);
 if ($15) {
  $24 = 1;
 } else {
  $16 = $1;
  $17 = (($16) + 34360|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  $20 = (($19) + 34364|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)==($21|0);
  $24 = $22;
 }
 $23 = $24&1;
 $bottomORright = $23;
 $result = 0;
 $25 = $1;
 $26 = (($25) + 35032|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 $29 = $28&1;
 $jend = $29;
 $j = 0;
 while(1) {
  $30 = $j;
  $31 = $jend;
  $32 = ($30>>>0)<=($31>>>0);
  if (!($32)) {
   label = 53;
   break;
  }
  $33 = $bottomORright;
  $34 = ($33|0)!=(0);
  if (!($34)) {
   $35 = $1;
   $36 = $1;
   $37 = (($36) + 34360|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = (($39) + 34356|0);
   $41 = HEAP32[$40>>2]|0;
   _getTilePos($35,$38,$41);
   $42 = $jend;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $1;
    $45 = (($44) + 34296|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $1;
    $48 = (($47) + 35032|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + 34296|0);
    HEAP32[$50>>2] = $46;
    $51 = $1;
    $52 = (($51) + 34292|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $1;
    $55 = (($54) + 35032|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + 34292|0);
    HEAP32[$57>>2] = $53;
   }
   $58 = $1;
   $59 = (($58) + 34296|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $1;
   $62 = (($61) + 34336|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + (($60*592)|0)|0);
   $pContext = $64;
   $65 = $1;
   $66 = (_readPackets($65)|0);
   $67 = ($66|0)!=(0);
   if ($67) {
    label = 9;
    break;
   }
   $68 = $1;
   $69 = (($68) + 34248|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)!=(0);
   if (!($72)) {
    $73 = $1;
    $74 = (($73) + 34360|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $1;
    $77 = (($76) + 34296|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $1;
    $80 = (($79) + 84|0);
    $81 = (($80) + 68|0);
    $82 = (($81) + ($78<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($75|0)==($83|0);
    if ($84) {
     $85 = $1;
     $86 = (($85) + 34248|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($87) + 24|0);
     $89 = HEAP32[$88>>2]|0;
     $rLeft = $89;
     $90 = $1;
     $91 = (($90) + 34248|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($92) + 28|0);
     $94 = HEAP32[$93>>2]|0;
     $rRight = $94;
     $95 = $1;
     $96 = (($95) + 34248|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + 32|0);
     $99 = HEAP32[$98>>2]|0;
     $rTop = $99;
     $100 = $1;
     $101 = (($100) + 34248|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($102) + 36|0);
     $104 = HEAP32[$103>>2]|0;
     $rBottom = $104;
     $105 = $olOverlap;
     $106 = ($105|0)==(0);
     if ($106) {
      $110 = 0;
     } else {
      $107 = $olOverlap;
      $108 = ($107|0)==(1);
      $109 = $108 ? 2 : 10;
      $110 = $109;
     }
     $rExt = $110;
     $111 = $1;
     $112 = (($111) + 34360|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $113<<4;
     $tLeft = $114;
     $115 = $1;
     $116 = (($115) + 34292|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $1;
     $119 = (($118) + 84|0);
     $120 = (($119) + 16456|0);
     $121 = (($120) + ($117<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $122<<4;
     $tTop = $123;
     $124 = $1;
     $125 = (($124) + 34296|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $1;
     $128 = (($127) + 84|0);
     $129 = (($128) + 64|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($126|0)!=($130|0);
     if ($131) {
      $132 = $1;
      $133 = (($132) + 34296|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (($134) + 1)|0;
      $136 = $1;
      $137 = (($136) + 84|0);
      $138 = (($137) + 68|0);
      $139 = (($138) + ($135<<2)|0);
      $140 = HEAP32[$139>>2]|0;
      $145 = $140;
     } else {
      $141 = $1;
      $142 = (($141) + 34364|0);
      $143 = HEAP32[$142>>2]|0;
      $145 = $143;
     }
     $144 = $145<<4;
     $tRight = $144;
     $146 = $1;
     $147 = (($146) + 34292|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $1;
     $150 = (($149) + 84|0);
     $151 = (($150) + 16452|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($148|0)!=($152|0);
     if ($153) {
      $154 = $1;
      $155 = (($154) + 34292|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (($156) + 1)|0;
      $158 = $1;
      $159 = (($158) + 84|0);
      $160 = (($159) + 16456|0);
      $161 = (($160) + ($157<<2)|0);
      $162 = HEAP32[$161>>2]|0;
      $167 = $162;
     } else {
      $163 = $1;
      $164 = (($163) + 34368|0);
      $165 = HEAP32[$164>>2]|0;
      $167 = $165;
     }
     $166 = $167<<4;
     $tBottom = $166;
     $168 = $rLeft;
     $169 = $tRight;
     $170 = $rExt;
     $171 = (($169) + ($170))|0;
     $172 = ($168>>>0)>=($171>>>0);
     if ($172) {
      $197 = 1;
     } else {
      $173 = $rTop;
      $174 = $tBottom;
      $175 = $rExt;
      $176 = (($174) + ($175))|0;
      $177 = ($173>>>0)>=($176>>>0);
      if ($177) {
       $197 = 1;
      } else {
       $178 = $tLeft;
       $179 = $rRight;
       $180 = $rExt;
       $181 = (($179) + ($180))|0;
       $182 = ($178>>>0)>($181>>>0);
       if ($182) {
        $197 = 1;
       } else {
        $183 = $tTop;
        $184 = $rBottom;
        $185 = $rExt;
        $186 = (($184) + ($185))|0;
        $187 = ($183>>>0)>($186>>>0);
        if ($187) {
         $197 = 1;
        } else {
         $188 = $1;
         $189 = (($188) + 34356|0);
         $190 = HEAP32[$189>>2]|0;
         $191 = $190<<4;
         $192 = $rBottom;
         $193 = $rExt;
         $194 = (($192) + ($193))|0;
         $195 = ($191>>>0)>($194>>>0);
         $197 = $195;
        }
       }
      }
     }
     $196 = $197 ? 0 : 1;
     $198 = $pContext;
     $199 = (($198) + 588|0);
     HEAP32[$199>>2] = $196;
    }
   }
   $200 = $1;
   $201 = (($200) + 34248|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = HEAP32[$202>>2]|0;
   $204 = ($203|0)!=(0);
   if ($204) {
    label = 30;
   } else {
    $205 = $pContext;
    $206 = (($205) + 588|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = ($207|0)!=(0);
    if ($208) {
     label = 30;
    }
   }
   if ((label|0) == 30) {
    label = 0;
    $209 = $1;
    $210 = $pContext;
    $211 = $1;
    $212 = (($211) + 34360|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = $1;
    $215 = (($214) + 34356|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (_DecodeMacroblockDC($209,$210,$213,$216)|0);
    $result = $217;
    $218 = ($217|0)!=(0);
    if ($218) {
     label = 31;
     break;
    }
    $220 = $1;
    $221 = (($220) + 34248|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = (($222) + 20|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = ($224|0)!=(0);
    if ($225) {
     $226 = $1;
     $227 = $pContext;
     $228 = $1;
     $229 = (($228) + 34360|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $1;
     $232 = (($231) + 34356|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = (_DecodeMacroblockLowpass($226,$227,$230,$233)|0);
     $result = $234;
     $235 = ($234|0)!=(0);
     if ($235) {
      label = 34;
      break;
     }
    }
    $237 = $1;
    _predDCACDec($237);
    $238 = $1;
    (_dequantizeMacroblock($238)|0);
    $239 = $1;
    $240 = (($239) + 34248|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = (($241) + 16|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = ($243|0)!=(0);
    if ($244) {
     $245 = $1;
     $246 = $pContext;
     $247 = $1;
     $248 = (($247) + 34360|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = $1;
     $251 = (($250) + 34356|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = (_DecodeMacroblockHighpass($245,$246,$249,$252)|0);
     $result = $253;
     $254 = ($253|0)!=(0);
     if ($254) {
      label = 38;
      break;
     }
     $256 = $1;
     _predACDec($256);
    }
    $257 = $1;
    $258 = $1;
    $259 = (($258) + 32976|0);
    $260 = $1;
    $261 = (($260) + 34360|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = $1;
    $264 = (($263) + 34136|0);
    $265 = (($264) + 8|0);
    $266 = HEAP32[$265>>2]|0;
    _updatePredInfo($257,$259,$262,$266);
   }
  }
  $267 = $1;
  $268 = (($267) + 34248|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = HEAP32[$269>>2]|0;
  $271 = ($270|0)!=(0);
  do {
   if ($271) {
    label = 48;
   } else {
    $272 = $1;
    $273 = (($272) + 34360|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = $274<<4;
    $276 = $1;
    $277 = (($276) + 34248|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = (($278) + 28|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = (($280) + 25)|0;
    $282 = ($275>>>0)>($281>>>0);
    if (!($282)) {
     $283 = $1;
     $284 = (($283) + 34360|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = $285<<4;
     $287 = (($286) + 25)|0;
     $288 = $1;
     $289 = (($288) + 34248|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = (($290) + 24|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = ($287>>>0)<($292>>>0);
     if (!($293)) {
      $294 = $1;
      $295 = (($294) + 34356|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = $296<<4;
      $298 = $1;
      $299 = (($298) + 34248|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = (($300) + 36|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = (($302) + 25)|0;
      $304 = ($297>>>0)>($303>>>0);
      if (!($304)) {
       $305 = $1;
       $306 = (($305) + 34356|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = $307<<4;
       $309 = (($308) + 25)|0;
       $310 = $1;
       $311 = (($310) + 34248|0);
       $312 = HEAP32[$311>>2]|0;
       $313 = (($312) + 32|0);
       $314 = HEAP32[$313>>2]|0;
       $315 = ($309>>>0)<($314>>>0);
       if (!($315)) {
        label = 48;
        break;
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 48) {
   label = 0;
   $316 = $1;
   $317 = (($316) + 34452|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = $1;
   (FUNCTION_TABLE_ii[$318 & 255]($319)|0);
  }
  $320 = $jend;
  $321 = ($320|0)!=(0);
  if ($321) {
   $322 = $1;
   $323 = (($322) + 34356|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = $1;
   $326 = (($325) + 35032|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($327) + 34356|0);
   HEAP32[$328>>2] = $324;
   $329 = $1;
   $330 = (($329) + 34360|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = $1;
   $333 = (($332) + 35032|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = (($334) + 34360|0);
   HEAP32[$335>>2] = $331;
   $336 = $1;
   $337 = (($336) + 35032|0);
   $338 = HEAP32[$337>>2]|0;
   $1 = $338;
  }
  $339 = $j;
  $340 = (($339) + 1)|0;
  $j = $340;
 }
 if ((label|0) == 9) {
  $0 = -1;
  $342 = $0;
  STACKTOP = sp;return ($342|0);
 }
 else if ((label|0) == 31) {
  $219 = $result;
  $0 = $219;
  $342 = $0;
  STACKTOP = sp;return ($342|0);
 }
 else if ((label|0) == 34) {
  $236 = $result;
  $0 = $236;
  $342 = $0;
  STACKTOP = sp;return ($342|0);
 }
 else if ((label|0) == 38) {
  $255 = $result;
  $0 = $255;
  $342 = $0;
  STACKTOP = sp;return ($342|0);
 }
 else if ((label|0) == 53) {
  $341 = $result;
  $0 = $341;
  $342 = $0;
  STACKTOP = sp;return ($342|0);
 }
 return 0|0;
}
function _interpolateUV($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cMB = 0, $cPix = 0, $cShift = 0, $cWidth = 0, $cfExt = 0, $iC = 0, $iColumn = 0, $iIdxB = 0, $iIdxC = 0, $iIdxC1 = 0, $iIdxD = 0, $iIdxL = 0, $iIdxL2 = 0, $iIdxS = 0, $iIdxT = 0, $iL = 0, $iRow = 0, $pDstU = 0, $pDstV = 0, $pSrcU = 0;
 var $pSrcV = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $cfExt = $4;
 $5 = $0;
 $6 = (($5) + 34364|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7<<4;
 $cWidth = $8;
 $9 = $0;
 $10 = (($9) + 34564|0);
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $pSrcU = $12;
 $13 = $0;
 $14 = (($13) + 34564|0);
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $pSrcV = $16;
 $17 = $0;
 $18 = (($17) + 34884|0);
 $19 = HEAP32[$18>>2]|0;
 $pDstU = $19;
 $20 = $0;
 $21 = (($20) + 34888|0);
 $22 = HEAP32[$21>>2]|0;
 $pDstV = $22;
 $iIdxS = 0;
 $iIdxD = 0;
 $23 = $0;
 $24 = (($23) + 34136|0);
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(2);
 if ($27) {
  $iRow = 0;
  while(1) {
   $28 = $iRow;
   $29 = ($28>>>0)<(16);
   if (!($29)) {
    break;
   }
   $iColumn = 0;
   while(1) {
    $30 = $iColumn;
    $31 = $cWidth;
    $32 = ($30>>>0)<($31>>>0);
    if (!($32)) {
     break;
    }
    $33 = $iColumn;
    $34 = $33 >>> 4;
    $35 = $34 << 7;
    $36 = $iColumn;
    $37 = $36 >>> 1;
    $38 = $37 & 7;
    $39 = $iRow;
    $40 = (14240 + ($39<<4)|0);
    $41 = (($40) + ($38)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = (($35) + ($43))|0;
    $iIdxS = $44;
    $45 = $iColumn;
    $46 = $45 >>> 4;
    $47 = $46 << 8;
    $48 = $iColumn;
    $49 = $48 & 15;
    $50 = $iRow;
    $51 = (14240 + ($50<<4)|0);
    $52 = (($51) + ($49)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = (($47) + ($54))|0;
    $iIdxD = $55;
    $56 = $iIdxS;
    $57 = $pSrcU;
    $58 = (($57) + ($56<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $iIdxD;
    $61 = $pDstU;
    $62 = (($61) + ($60<<2)|0);
    HEAP32[$62>>2] = $59;
    $63 = $iIdxS;
    $64 = $pSrcV;
    $65 = (($64) + ($63<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $iIdxD;
    $68 = $pDstV;
    $69 = (($68) + ($67<<2)|0);
    HEAP32[$69>>2] = $66;
    $70 = $iColumn;
    $71 = ($70>>>0)>(0);
    if ($71) {
     $72 = $iColumn;
     $73 = (($72) - 2)|0;
     $iL = $73;
     $74 = $iL;
     $75 = $74 >>> 4;
     $76 = $75 << 8;
     $77 = $iL;
     $78 = $77 & 15;
     $79 = $iRow;
     $80 = (14240 + ($79<<4)|0);
     $81 = (($80) + ($78)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = (($76) + ($83))|0;
     $iIdxL = $84;
     $85 = $iColumn;
     $86 = (($85) - 1)|0;
     $iC = $86;
     $87 = $iC;
     $88 = $87 >>> 4;
     $89 = $88 << 8;
     $90 = $iC;
     $91 = $90 & 15;
     $92 = $iRow;
     $93 = (14240 + ($92<<4)|0);
     $94 = (($93) + ($91)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95&255;
     $97 = (($89) + ($96))|0;
     $iIdxC = $97;
     $98 = $iIdxL;
     $99 = $pDstU;
     $100 = (($99) + ($98<<2)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $iIdxD;
     $103 = $pDstU;
     $104 = (($103) + ($102<<2)|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (($101) + ($105))|0;
     $107 = (($106) + 1)|0;
     $108 = $107 >> 1;
     $109 = $iIdxC;
     $110 = $pDstU;
     $111 = (($110) + ($109<<2)|0);
     HEAP32[$111>>2] = $108;
     $112 = $iIdxL;
     $113 = $pDstV;
     $114 = (($113) + ($112<<2)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = $iIdxD;
     $117 = $pDstV;
     $118 = (($117) + ($116<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($115) + ($119))|0;
     $121 = (($120) + 1)|0;
     $122 = $121 >> 1;
     $123 = $iIdxC;
     $124 = $pDstV;
     $125 = (($124) + ($123<<2)|0);
     HEAP32[$125>>2] = $122;
    }
    $126 = $iColumn;
    $127 = (($126) + 2)|0;
    $iColumn = $127;
   }
   $128 = $iColumn;
   $129 = (($128) - 1)|0;
   $130 = $129 >>> 4;
   $131 = $130 << 8;
   $132 = $iColumn;
   $133 = (($132) - 1)|0;
   $134 = $133 & 15;
   $135 = $iRow;
   $136 = (14240 + ($135<<4)|0);
   $137 = (($136) + ($134)|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($131) + ($139))|0;
   $iIdxS = $140;
   $141 = $iIdxD;
   $142 = $pDstU;
   $143 = (($142) + ($141<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $iIdxS;
   $146 = $pDstU;
   $147 = (($146) + ($145<<2)|0);
   HEAP32[$147>>2] = $144;
   $148 = $iIdxD;
   $149 = $pDstV;
   $150 = (($149) + ($148<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $iIdxS;
   $153 = $pDstV;
   $154 = (($153) + ($152<<2)|0);
   HEAP32[$154>>2] = $151;
   $155 = $iRow;
   $156 = (($155) + 1)|0;
   $iRow = $156;
  }
  STACKTOP = sp;return;
 }
 $157 = $cfExt;
 $158 = ($157|0)==(2);
 $159 = $158 ? 3 : 4;
 $cShift = $159;
 $iColumn = 0;
 while(1) {
  $160 = $iColumn;
  $161 = $cWidth;
  $162 = ($160>>>0)<($161>>>0);
  if (!($162)) {
   break;
  }
  $163 = $iColumn;
  $164 = $163 >>> 4;
  $165 = $cShift;
  $166 = (4 + ($165))|0;
  $167 = $164 << $166;
  $cMB = $167;
  $168 = $iColumn;
  $169 = $cShift;
  $170 = (4 - ($169))|0;
  $171 = $168 >>> $170;
  $172 = $cShift;
  $173 = 1 << $172;
  $174 = (($173) - 1)|0;
  $175 = $171 & $174;
  $cPix = $175;
  $iRow = 0;
  while(1) {
   $176 = $iRow;
   $177 = ($176>>>0)<(16);
   if (!($177)) {
    break;
   }
   $178 = $iColumn;
   $179 = $178 >>> 4;
   $180 = $179 << 6;
   $181 = $iColumn;
   $182 = $181 >>> 1;
   $183 = $182 & 7;
   $184 = $iRow;
   $185 = $184 >>> 1;
   $186 = (14496 + ($185<<3)|0);
   $187 = (($186) + ($183)|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = (($180) + ($189))|0;
   $iIdxS = $190;
   $191 = $cMB;
   $192 = $cPix;
   $193 = $iRow;
   $194 = (14240 + ($193<<4)|0);
   $195 = (($194) + ($192)|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $198 = (($191) + ($197))|0;
   $iIdxD = $198;
   $199 = $iIdxS;
   $200 = $pSrcU;
   $201 = (($200) + ($199<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $iIdxD;
   $204 = $pDstU;
   $205 = (($204) + ($203<<2)|0);
   HEAP32[$205>>2] = $202;
   $206 = $iIdxS;
   $207 = $pSrcV;
   $208 = (($207) + ($206<<2)|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $iIdxD;
   $211 = $pDstV;
   $212 = (($211) + ($210<<2)|0);
   HEAP32[$212>>2] = $209;
   $213 = $iRow;
   $214 = ($213>>>0)>(0);
   if ($214) {
    $215 = $cMB;
    $216 = $cPix;
    $217 = $iRow;
    $218 = (($217) - 2)|0;
    $219 = (14240 + ($218<<4)|0);
    $220 = (($219) + ($216)|0);
    $221 = HEAP8[$220>>0]|0;
    $222 = $221&255;
    $223 = (($215) + ($222))|0;
    $iIdxT = $223;
    $224 = $cMB;
    $225 = $cPix;
    $226 = $iRow;
    $227 = (($226) - 1)|0;
    $228 = (14240 + ($227<<4)|0);
    $229 = (($228) + ($225)|0);
    $230 = HEAP8[$229>>0]|0;
    $231 = $230&255;
    $232 = (($224) + ($231))|0;
    $iIdxC1 = $232;
    $233 = $iIdxT;
    $234 = $pDstU;
    $235 = (($234) + ($233<<2)|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $iIdxD;
    $238 = $pDstU;
    $239 = (($238) + ($237<<2)|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = (($236) + ($240))|0;
    $242 = (($241) + 1)|0;
    $243 = $242 >> 1;
    $244 = $iIdxC1;
    $245 = $pDstU;
    $246 = (($245) + ($244<<2)|0);
    HEAP32[$246>>2] = $243;
    $247 = $iIdxT;
    $248 = $pDstV;
    $249 = (($248) + ($247<<2)|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = $iIdxD;
    $252 = $pDstV;
    $253 = (($252) + ($251<<2)|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = (($250) + ($254))|0;
    $256 = (($255) + 1)|0;
    $257 = $256 >> 1;
    $258 = $iIdxC1;
    $259 = $pDstV;
    $260 = (($259) + ($258<<2)|0);
    HEAP32[$260>>2] = $257;
   }
   $261 = $iRow;
   $262 = (($261) + 2)|0;
   $iRow = $262;
  }
  $263 = $cMB;
  $264 = $cPix;
  $265 = (((14240 + 240|0)) + ($264)|0);
  $266 = HEAP8[$265>>0]|0;
  $267 = $266&255;
  $268 = (($263) + ($267))|0;
  $iIdxS = $268;
  $269 = $0;
  $270 = (($269) + 34356|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $0;
  $273 = (($272) + 34368|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = ($271|0)==($274|0);
  if ($275) {
   $276 = $iIdxD;
   $277 = $pDstU;
   $278 = (($277) + ($276<<2)|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $iIdxS;
   $281 = $pDstU;
   $282 = (($281) + ($280<<2)|0);
   HEAP32[$282>>2] = $279;
   $283 = $iIdxD;
   $284 = $pDstV;
   $285 = (($284) + ($283<<2)|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $iIdxS;
   $288 = $pDstV;
   $289 = (($288) + ($287<<2)|0);
   HEAP32[$289>>2] = $286;
  } else {
   $290 = $iColumn;
   $291 = $290 >>> 4;
   $292 = $291 << 6;
   $293 = $iColumn;
   $294 = $293 >>> 1;
   $295 = $294 & 7;
   $296 = (14496 + ($295)|0);
   $297 = HEAP8[$296>>0]|0;
   $298 = $297&255;
   $299 = (($292) + ($298))|0;
   $iIdxB = $299;
   $300 = $iIdxB;
   $301 = $0;
   $302 = (($301) + 34628|0);
   $303 = (($302) + 4|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = (($304) + ($300<<2)|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = $iIdxD;
   $308 = $pDstU;
   $309 = (($308) + ($307<<2)|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = (($306) + ($310))|0;
   $312 = (($311) + 1)|0;
   $313 = $312 >> 1;
   $314 = $iIdxS;
   $315 = $pDstU;
   $316 = (($315) + ($314<<2)|0);
   HEAP32[$316>>2] = $313;
   $317 = $iIdxB;
   $318 = $0;
   $319 = (($318) + 34628|0);
   $320 = (($319) + 8|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = (($321) + ($317<<2)|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $iIdxD;
   $325 = $pDstV;
   $326 = (($325) + ($324<<2)|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($323) + ($327))|0;
   $329 = (($328) + 1)|0;
   $330 = $329 >> 1;
   $331 = $iIdxS;
   $332 = $pDstV;
   $333 = (($332) + ($331<<2)|0);
   HEAP32[$333>>2] = $330;
  }
  $334 = $iColumn;
  $335 = (($334) + 2)|0;
  $iColumn = $335;
 }
 $336 = $cfExt;
 $337 = ($336|0)!=(2);
 if ($337) {
  $iRow = 0;
  while(1) {
   $338 = $iRow;
   $339 = ($338>>>0)<(16);
   if (!($339)) {
    break;
   }
   $iColumn = 1;
   while(1) {
    $340 = $iColumn;
    $341 = $cWidth;
    $342 = (($341) - 2)|0;
    $343 = ($340>>>0)<($342>>>0);
    if (!($343)) {
     break;
    }
    $344 = $iColumn;
    $345 = (($344) - 1)|0;
    $346 = $345 >>> 4;
    $347 = $346 << 8;
    $348 = $iColumn;
    $349 = (($348) - 1)|0;
    $350 = $349 & 15;
    $351 = $iRow;
    $352 = (14240 + ($351<<4)|0);
    $353 = (($352) + ($350)|0);
    $354 = HEAP8[$353>>0]|0;
    $355 = $354&255;
    $356 = (($347) + ($355))|0;
    $iIdxL2 = $356;
    $357 = $iColumn;
    $358 = $357 >>> 4;
    $359 = $358 << 8;
    $360 = $iColumn;
    $361 = $360 & 15;
    $362 = $iRow;
    $363 = (14240 + ($362<<4)|0);
    $364 = (($363) + ($361)|0);
    $365 = HEAP8[$364>>0]|0;
    $366 = $365&255;
    $367 = (($359) + ($366))|0;
    $iIdxD = $367;
    $368 = $iColumn;
    $369 = (($368) + 1)|0;
    $370 = $369 >>> 4;
    $371 = $370 << 8;
    $372 = $iColumn;
    $373 = (($372) + 1)|0;
    $374 = $373 & 15;
    $375 = $iRow;
    $376 = (14240 + ($375<<4)|0);
    $377 = (($376) + ($374)|0);
    $378 = HEAP8[$377>>0]|0;
    $379 = $378&255;
    $380 = (($371) + ($379))|0;
    $iIdxS = $380;
    $381 = $iIdxS;
    $382 = $pDstU;
    $383 = (($382) + ($381<<2)|0);
    $384 = HEAP32[$383>>2]|0;
    $385 = $iIdxL2;
    $386 = $pDstU;
    $387 = (($386) + ($385<<2)|0);
    $388 = HEAP32[$387>>2]|0;
    $389 = (($384) + ($388))|0;
    $390 = (($389) + 1)|0;
    $391 = $390 >> 1;
    $392 = $iIdxD;
    $393 = $pDstU;
    $394 = (($393) + ($392<<2)|0);
    HEAP32[$394>>2] = $391;
    $395 = $iIdxS;
    $396 = $pDstV;
    $397 = (($396) + ($395<<2)|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = $iIdxL2;
    $400 = $pDstV;
    $401 = (($400) + ($399<<2)|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = (($398) + ($402))|0;
    $404 = (($403) + 1)|0;
    $405 = $404 >> 1;
    $406 = $iIdxD;
    $407 = $pDstV;
    $408 = (($407) + ($406<<2)|0);
    HEAP32[$408>>2] = $405;
    $409 = $iColumn;
    $410 = (($409) + 2)|0;
    $iColumn = $410;
   }
   $411 = $cWidth;
   $412 = (($411) - 1)|0;
   $413 = $412 >>> 4;
   $414 = $413 << 8;
   $415 = $cWidth;
   $416 = (($415) - 1)|0;
   $417 = $416 & 15;
   $418 = $iRow;
   $419 = (14240 + ($418<<4)|0);
   $420 = (($419) + ($417)|0);
   $421 = HEAP8[$420>>0]|0;
   $422 = $421&255;
   $423 = (($414) + ($422))|0;
   $iIdxD = $423;
   $424 = $iIdxS;
   $425 = $pDstU;
   $426 = (($425) + ($424<<2)|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = $iIdxD;
   $429 = $pDstU;
   $430 = (($429) + ($428<<2)|0);
   HEAP32[$430>>2] = $427;
   $431 = $iIdxS;
   $432 = $pDstV;
   $433 = (($432) + ($431<<2)|0);
   $434 = HEAP32[$433>>2]|0;
   $435 = $iIdxD;
   $436 = $pDstV;
   $437 = (($436) + ($435<<2)|0);
   HEAP32[$437>>2] = $434;
   $438 = $iRow;
   $439 = (($438) + 1)|0;
   $iRow = $439;
  }
 }
 STACKTOP = sp;return;
}
function _outputNChannel($pSC,$iFirstRow,$iFirstColumn,$cWidth,$cHeight,$iShift,$iBias) {
 $pSC = $pSC|0;
 $iFirstRow = $iFirstRow|0;
 $iFirstColumn = $iFirstColumn|0;
 $cWidth = $cWidth|0;
 $cHeight = $cHeight|0;
 $iShift = $iShift|0;
 $iBias = $iBias|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cChannel = 0, $iChannel = 0, $iColumn = 0, $iRow = 0, $iY = 0, $nExpBias = 0, $nLen = 0, $p = 0, $p10 = 0, $p12 = 0, $p2 = 0, $p4 = 0, $p6 = 0, $p8 = 0;
 var $pChannel = 0, $pDst = 0, $pDst1 = 0, $pDst11 = 0, $pDst3 = 0, $pDst5 = 0, $pDst7 = 0, $pDst9 = 0, $pII = 0, $pOffsetX = 0, $pOffsetY = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pChannel = sp + 80|0;
 $0 = $pSC;
 $1 = $iFirstRow;
 $2 = $iFirstColumn;
 $3 = $cWidth;
 $4 = $cHeight;
 $5 = $iShift;
 $6 = $iBias;
 $7 = $0;
 $8 = (($7) + 4|0);
 $pII = $8;
 $9 = $pII;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $17 = 1;
 } else {
  $13 = $0;
  $14 = (($13) + 84|0);
  $15 = (($14) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16;
 }
 $cChannel = $17;
 $18 = $0;
 $19 = (($18) + 84|0);
 $20 = (($19) + 32840|0);
 $21 = HEAP8[$20>>0]|0;
 $nLen = $21;
 $22 = $0;
 $23 = (($22) + 84|0);
 $24 = (($23) + 32841|0);
 $25 = HEAP8[$24>>0]|0;
 $nExpBias = $25;
 $26 = $0;
 $27 = (($26) + 34248|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 40|0);
 $30 = HEAP32[$29>>2]|0;
 $pOffsetX = $30;
 $31 = $0;
 $32 = (($31) + 34248|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = (($36) + 34356|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) - 1)|0;
 $40 = $39<<4;
 $41 = (($35) + ($40<<2)|0);
 $pOffsetY = $41;
 $42 = $cChannel;
 $43 = ($42>>>0)<=(16);
 if (!($43)) {
  ___assert_fail((8440|0),(8456|0),720,(8480|0));
  // unreachable;
 }
 $iChannel = 0;
 while(1) {
  $44 = $iChannel;
  $45 = $cChannel;
  $46 = ($44>>>0)<($45>>>0);
  if (!($46)) {
   break;
  }
  $47 = $iChannel;
  $48 = $0;
  $49 = (($48) + 34564|0);
  $50 = (($49) + ($47<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $iChannel;
  $53 = $52 & 15;
  $54 = (($pChannel) + ($53<<2)|0);
  HEAP32[$54>>2] = $51;
  $55 = $iChannel;
  $56 = (($55) + 1)|0;
  $iChannel = $56;
 }
 $57 = $0;
 $58 = (($57) + 34264|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = $0;
  $62 = (($61) + 34884|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($pChannel) + 4|0);
  HEAP32[$64>>2] = $63;
  $65 = $0;
  $66 = (($65) + 34888|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($pChannel) + 8|0);
  HEAP32[$68>>2] = $67;
 }
 $69 = $0;
 $70 = (($69) + 4|0);
 $71 = (($70) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 switch ($72|0) {
 case 5:  {
  $324 = $1;
  $iRow = $324;
  while(1) {
   $325 = $iRow;
   $326 = $4;
   $327 = ($325>>>0)<($326>>>0);
   if (!($327)) {
    break;
   }
   $328 = $2;
   $iColumn = $328;
   $329 = $iRow;
   $330 = $pOffsetY;
   $331 = (($330) + ($329<<2)|0);
   $332 = HEAP32[$331>>2]|0;
   $iY = $332;
   while(1) {
    $333 = $iColumn;
    $334 = $3;
    $335 = ($333>>>0)<($334>>>0);
    if (!($335)) {
     break;
    }
    $336 = $0;
    $337 = (($336) + 32952|0);
    $338 = HEAP32[$337>>2]|0;
    $339 = $iY;
    $340 = (($338) + ($339<<2)|0);
    $341 = $iColumn;
    $342 = $pOffsetX;
    $343 = (($342) + ($341<<2)|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = (($340) + ($344<<2)|0);
    $pDst7 = $345;
    $iChannel = 0;
    while(1) {
     $346 = $iChannel;
     $347 = $cChannel;
     $348 = ($346>>>0)<($347>>>0);
     if (!($348)) {
      break;
     }
     $349 = $iColumn;
     $350 = $349 >>> 4;
     $351 = $350 << 8;
     $352 = $iColumn;
     $353 = $352 & 15;
     $354 = $iRow;
     $355 = (14240 + ($354<<4)|0);
     $356 = (($355) + ($353)|0);
     $357 = HEAP8[$356>>0]|0;
     $358 = $357&255;
     $359 = (($351) + ($358))|0;
     $360 = $iChannel;
     $361 = $360 & 15;
     $362 = (($pChannel) + ($361<<2)|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = (($363) + ($359<<2)|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = $6;
     $367 = (($365) + ($366))|0;
     $368 = $5;
     $369 = $367 >> $368;
     $p8 = $369;
     $370 = $nLen;
     $371 = $370&255;
     $372 = $p8;
     $373 = $372 << $371;
     $p8 = $373;
     $374 = $p8;
     $375 = $iChannel;
     $376 = $pDst7;
     $377 = (($376) + ($375<<2)|0);
     HEAP32[$377>>2] = $374;
     $378 = $iChannel;
     $379 = (($378) + 1)|0;
     $iChannel = $379;
    }
    $380 = $iColumn;
    $381 = (($380) + 1)|0;
    $iColumn = $381;
   }
   $382 = $iRow;
   $383 = (($382) + 1)|0;
   $iRow = $383;
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $267 = $1;
  $iRow = $267;
  while(1) {
   $268 = $iRow;
   $269 = $4;
   $270 = ($268>>>0)<($269>>>0);
   if (!($270)) {
    break;
   }
   $271 = $2;
   $iColumn = $271;
   $272 = $iRow;
   $273 = $pOffsetY;
   $274 = (($273) + ($272<<2)|0);
   $275 = HEAP32[$274>>2]|0;
   $iY = $275;
   while(1) {
    $276 = $iColumn;
    $277 = $3;
    $278 = ($276>>>0)<($277>>>0);
    if (!($278)) {
     break;
    }
    $279 = $0;
    $280 = (($279) + 32952|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = $iY;
    $283 = (($281) + ($282<<1)|0);
    $284 = $iColumn;
    $285 = $pOffsetX;
    $286 = (($285) + ($284<<2)|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = (($283) + ($287<<1)|0);
    $pDst5 = $288;
    $iChannel = 0;
    while(1) {
     $289 = $iChannel;
     $290 = $cChannel;
     $291 = ($289>>>0)<($290>>>0);
     if (!($291)) {
      break;
     }
     $292 = $iColumn;
     $293 = $292 >>> 4;
     $294 = $293 << 8;
     $295 = $iColumn;
     $296 = $295 & 15;
     $297 = $iRow;
     $298 = (14240 + ($297<<4)|0);
     $299 = (($298) + ($296)|0);
     $300 = HEAP8[$299>>0]|0;
     $301 = $300&255;
     $302 = (($294) + ($301))|0;
     $303 = $iChannel;
     $304 = $303 & 15;
     $305 = (($pChannel) + ($304<<2)|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = (($306) + ($302<<2)|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = $6;
     $310 = (($308) + ($309))|0;
     $311 = $5;
     $312 = $310 >> $311;
     $p6 = $312;
     $313 = $p6;
     $314 = (_backwardHalf($313)|0);
     $315 = $iChannel;
     $316 = $pDst5;
     $317 = (($316) + ($315<<1)|0);
     HEAP16[$317>>1] = $314;
     $318 = $iChannel;
     $319 = (($318) + 1)|0;
     $iChannel = $319;
    }
    $320 = $iColumn;
    $321 = (($320) + 1)|0;
    $iColumn = $321;
   }
   $322 = $iRow;
   $323 = (($322) + 1)|0;
   $iRow = $323;
  }
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $444 = $1;
  $iRow = $444;
  while(1) {
   $445 = $iRow;
   $446 = $4;
   $447 = ($445>>>0)<($446>>>0);
   if (!($447)) {
    break;
   }
   $448 = $2;
   $iColumn = $448;
   $449 = $iRow;
   $450 = $pOffsetY;
   $451 = (($450) + ($449<<2)|0);
   $452 = HEAP32[$451>>2]|0;
   $iY = $452;
   while(1) {
    $453 = $iColumn;
    $454 = $3;
    $455 = ($453>>>0)<($454>>>0);
    if (!($455)) {
     break;
    }
    $456 = $0;
    $457 = (($456) + 32952|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = $iY;
    $460 = (($458) + ($459<<2)|0);
    $461 = $iColumn;
    $462 = $pOffsetX;
    $463 = (($462) + ($461<<2)|0);
    $464 = HEAP32[$463>>2]|0;
    $465 = (($460) + ($464<<2)|0);
    $pDst11 = $465;
    $iChannel = 0;
    while(1) {
     $466 = $iChannel;
     $467 = $cChannel;
     $468 = ($466>>>0)<($467>>>0);
     if (!($468)) {
      break;
     }
     $469 = $iColumn;
     $470 = $469 >>> 4;
     $471 = $470 << 8;
     $472 = $iColumn;
     $473 = $472 & 15;
     $474 = $iRow;
     $475 = (14240 + ($474<<4)|0);
     $476 = (($475) + ($473)|0);
     $477 = HEAP8[$476>>0]|0;
     $478 = $477&255;
     $479 = (($471) + ($478))|0;
     $480 = $iChannel;
     $481 = $480 & 15;
     $482 = (($pChannel) + ($481<<2)|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = (($483) + ($479<<2)|0);
     $485 = HEAP32[$484>>2]|0;
     $486 = $6;
     $487 = (($485) + ($486))|0;
     $488 = $5;
     $489 = $487 >> $488;
     $p12 = $489;
     $490 = $p12;
     $491 = $nExpBias;
     $492 = $nLen;
     $493 = (+_pixel2float($490,$491,$492));
     $494 = $iChannel;
     $495 = $pDst11;
     $496 = (($495) + ($494<<2)|0);
     HEAPF32[$496>>2] = $493;
     $497 = $iChannel;
     $498 = (($497) + 1)|0;
     $iChannel = $498;
    }
    $499 = $iColumn;
    $500 = (($499) + 1)|0;
    $iColumn = $500;
   }
   $501 = $iRow;
   $502 = (($501) + 1)|0;
   $iRow = $502;
  }
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $384 = $1;
  $iRow = $384;
  while(1) {
   $385 = $iRow;
   $386 = $4;
   $387 = ($385>>>0)<($386>>>0);
   if (!($387)) {
    break;
   }
   $388 = $2;
   $iColumn = $388;
   $389 = $iRow;
   $390 = $pOffsetY;
   $391 = (($390) + ($389<<2)|0);
   $392 = HEAP32[$391>>2]|0;
   $iY = $392;
   while(1) {
    $393 = $iColumn;
    $394 = $3;
    $395 = ($393>>>0)<($394>>>0);
    if (!($395)) {
     break;
    }
    $396 = $0;
    $397 = (($396) + 32952|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = $iY;
    $400 = (($398) + ($399<<2)|0);
    $401 = $iColumn;
    $402 = $pOffsetX;
    $403 = (($402) + ($401<<2)|0);
    $404 = HEAP32[$403>>2]|0;
    $405 = (($400) + ($404<<2)|0);
    $pDst9 = $405;
    $iChannel = 0;
    while(1) {
     $406 = $iChannel;
     $407 = $cChannel;
     $408 = ($406>>>0)<($407>>>0);
     if (!($408)) {
      break;
     }
     $409 = $iColumn;
     $410 = $409 >>> 4;
     $411 = $410 << 8;
     $412 = $iColumn;
     $413 = $412 & 15;
     $414 = $iRow;
     $415 = (14240 + ($414<<4)|0);
     $416 = (($415) + ($413)|0);
     $417 = HEAP8[$416>>0]|0;
     $418 = $417&255;
     $419 = (($411) + ($418))|0;
     $420 = $iChannel;
     $421 = $420 & 15;
     $422 = (($pChannel) + ($421<<2)|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = (($423) + ($419<<2)|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = $6;
     $427 = (($425) + ($426))|0;
     $428 = $5;
     $429 = $427 >> $428;
     $p10 = $429;
     $430 = $nLen;
     $431 = $430&255;
     $432 = $p10;
     $433 = $432 << $431;
     $p10 = $433;
     $434 = $p10;
     $435 = $iChannel;
     $436 = $pDst9;
     $437 = (($436) + ($435<<2)|0);
     HEAP32[$437>>2] = $434;
     $438 = $iChannel;
     $439 = (($438) + 1)|0;
     $iChannel = $439;
    }
    $440 = $iColumn;
    $441 = (($440) + 1)|0;
    $iColumn = $441;
   }
   $442 = $iRow;
   $443 = (($442) + 1)|0;
   $iRow = $443;
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $201 = $1;
  $iRow = $201;
  while(1) {
   $202 = $iRow;
   $203 = $4;
   $204 = ($202>>>0)<($203>>>0);
   if (!($204)) {
    break;
   }
   $205 = $2;
   $iColumn = $205;
   $206 = $iRow;
   $207 = $pOffsetY;
   $208 = (($207) + ($206<<2)|0);
   $209 = HEAP32[$208>>2]|0;
   $iY = $209;
   while(1) {
    $210 = $iColumn;
    $211 = $3;
    $212 = ($210>>>0)<($211>>>0);
    if (!($212)) {
     break;
    }
    $213 = $0;
    $214 = (($213) + 32952|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $iY;
    $217 = (($215) + ($216<<1)|0);
    $218 = $iColumn;
    $219 = $pOffsetX;
    $220 = (($219) + ($218<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = (($217) + ($221<<1)|0);
    $pDst3 = $222;
    $iChannel = 0;
    while(1) {
     $223 = $iChannel;
     $224 = $cChannel;
     $225 = ($223>>>0)<($224>>>0);
     if (!($225)) {
      break;
     }
     $226 = $iColumn;
     $227 = $226 >>> 4;
     $228 = $227 << 8;
     $229 = $iColumn;
     $230 = $229 & 15;
     $231 = $iRow;
     $232 = (14240 + ($231<<4)|0);
     $233 = (($232) + ($230)|0);
     $234 = HEAP8[$233>>0]|0;
     $235 = $234&255;
     $236 = (($228) + ($235))|0;
     $237 = $iChannel;
     $238 = $237 & 15;
     $239 = (($pChannel) + ($238<<2)|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = (($240) + ($236<<2)|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = $6;
     $244 = (($242) + ($243))|0;
     $245 = $5;
     $246 = $244 >> $245;
     $p4 = $246;
     $247 = $nLen;
     $248 = $247&255;
     $249 = $p4;
     $250 = $249 << $248;
     $p4 = $250;
     $251 = $p4;
     $252 = ($251|0)<(-32768);
     if ($252) {
      $257 = -32768;
     } else {
      $253 = $p4;
      $254 = (32767)<($253|0);
      if ($254) {
       $505 = 32767;
      } else {
       $255 = $p4;
       $505 = $255;
      }
      $257 = $505;
     }
     $256 = $257&65535;
     $258 = $iChannel;
     $259 = $pDst3;
     $260 = (($259) + ($258<<1)|0);
     HEAP16[$260>>1] = $256;
     $261 = $iChannel;
     $262 = (($261) + 1)|0;
     $iChannel = $262;
    }
    $263 = $iColumn;
    $264 = (($263) + 1)|0;
    $iColumn = $264;
   }
   $265 = $iRow;
   $266 = (($265) + 1)|0;
   $iRow = $266;
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $135 = $1;
  $iRow = $135;
  while(1) {
   $136 = $iRow;
   $137 = $4;
   $138 = ($136>>>0)<($137>>>0);
   if (!($138)) {
    break;
   }
   $139 = $2;
   $iColumn = $139;
   $140 = $iRow;
   $141 = $pOffsetY;
   $142 = (($141) + ($140<<2)|0);
   $143 = HEAP32[$142>>2]|0;
   $iY = $143;
   while(1) {
    $144 = $iColumn;
    $145 = $3;
    $146 = ($144>>>0)<($145>>>0);
    if (!($146)) {
     break;
    }
    $147 = $0;
    $148 = (($147) + 32952|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $iY;
    $151 = (($149) + ($150<<1)|0);
    $152 = $iColumn;
    $153 = $pOffsetX;
    $154 = (($153) + ($152<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (($151) + ($155<<1)|0);
    $pDst1 = $156;
    $iChannel = 0;
    while(1) {
     $157 = $iChannel;
     $158 = $cChannel;
     $159 = ($157>>>0)<($158>>>0);
     if (!($159)) {
      break;
     }
     $160 = $iColumn;
     $161 = $160 >>> 4;
     $162 = $161 << 8;
     $163 = $iColumn;
     $164 = $163 & 15;
     $165 = $iRow;
     $166 = (14240 + ($165<<4)|0);
     $167 = (($166) + ($164)|0);
     $168 = HEAP8[$167>>0]|0;
     $169 = $168&255;
     $170 = (($162) + ($169))|0;
     $171 = $iChannel;
     $172 = $171 & 15;
     $173 = (($pChannel) + ($172<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (($174) + ($170<<2)|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $6;
     $178 = (($176) + ($177))|0;
     $179 = $5;
     $180 = $178 >> $179;
     $p2 = $180;
     $181 = $nLen;
     $182 = $181&255;
     $183 = $p2;
     $184 = $183 << $182;
     $p2 = $184;
     $185 = $p2;
     $186 = ($185|0)<(0);
     if ($186) {
      $191 = 0;
     } else {
      $187 = $p2;
      $188 = (65535)<($187|0);
      if ($188) {
       $504 = 65535;
      } else {
       $189 = $p2;
       $504 = $189;
      }
      $191 = $504;
     }
     $190 = $191&65535;
     $192 = $iChannel;
     $193 = $pDst1;
     $194 = (($193) + ($192<<1)|0);
     HEAP16[$194>>1] = $190;
     $195 = $iChannel;
     $196 = (($195) + 1)|0;
     $iChannel = $196;
    }
    $197 = $iColumn;
    $198 = (($197) + 1)|0;
    $iColumn = $198;
   }
   $199 = $iRow;
   $200 = (($199) + 1)|0;
   $iRow = $200;
  }
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $73 = $1;
  $iRow = $73;
  while(1) {
   $74 = $iRow;
   $75 = $4;
   $76 = ($74>>>0)<($75>>>0);
   if (!($76)) {
    break;
   }
   $77 = $2;
   $iColumn = $77;
   $78 = $iRow;
   $79 = $pOffsetY;
   $80 = (($79) + ($78<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $iY = $81;
   while(1) {
    $82 = $iColumn;
    $83 = $3;
    $84 = ($82>>>0)<($83>>>0);
    if (!($84)) {
     break;
    }
    $85 = $0;
    $86 = (($85) + 32952|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $iY;
    $89 = (($87) + ($88)|0);
    $90 = $iColumn;
    $91 = $pOffsetX;
    $92 = (($91) + ($90<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($89) + ($93)|0);
    $pDst = $94;
    $iChannel = 0;
    while(1) {
     $95 = $iChannel;
     $96 = $cChannel;
     $97 = ($95>>>0)<($96>>>0);
     if (!($97)) {
      break;
     }
     $98 = $iColumn;
     $99 = $98 >>> 4;
     $100 = $99 << 8;
     $101 = $iColumn;
     $102 = $101 & 15;
     $103 = $iRow;
     $104 = (14240 + ($103<<4)|0);
     $105 = (($104) + ($102)|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = (($100) + ($107))|0;
     $109 = $iChannel;
     $110 = $109 & 15;
     $111 = (($pChannel) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (($112) + ($108<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $6;
     $116 = (($114) + ($115))|0;
     $117 = $5;
     $118 = $116 >> $117;
     $p = $118;
     $119 = $p;
     $120 = ($119|0)<(0);
     if ($120) {
      $125 = 0;
     } else {
      $121 = $p;
      $122 = (255)<($121|0);
      if ($122) {
       $503 = 255;
      } else {
       $123 = $p;
       $503 = $123;
      }
      $125 = $503;
     }
     $124 = $125&255;
     $126 = $iChannel;
     $127 = $pDst;
     $128 = (($127) + ($126)|0);
     HEAP8[$128>>0] = $124;
     $129 = $iChannel;
     $130 = (($129) + 1)|0;
     $iChannel = $130;
    }
    $131 = $iColumn;
    $132 = (($131) + 1)|0;
    $iColumn = $132;
   }
   $133 = $iRow;
   $134 = (($133) + 1)|0;
   $iRow = $134;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((8496|0),(8456|0),832,(8480|0));
  // unreachable;
 }
 }
}
function _backwardHalf($hHalf) {
 $hHalf = $hHalf|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hHalf;
 $1 = $0;
 $2 = $1 >> 31;
 $s = $2;
 $3 = $0;
 $4 = $3 & 32767;
 $5 = $s;
 $6 = $4 ^ $5;
 $7 = $s;
 $8 = (($6) - ($7))|0;
 $0 = $8;
 $9 = $0;
 $10 = $9&65535;
 STACKTOP = sp;return ($10|0);
}
function _pixel2float($_h,$_c,$_lm) {
 $_h = $_h|0;
 $_c = $_c|0;
 $_lm = $_lm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $iTempH = 0, $lmshift = 0, $m = 0, $s = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x = sp + 20|0;
 $0 = $_h;
 $1 = $_c;
 $2 = $_lm;
 $3 = $2;
 $4 = $3&255;
 $5 = 1 << $4;
 $lmshift = $5;
 $6 = $0;
 $iTempH = $6;
 $7 = $iTempH;
 $8 = $7 >> 31;
 $s = $8;
 $9 = $iTempH;
 $10 = $s;
 $11 = $9 ^ $10;
 $12 = $s;
 $13 = (($11) - ($12))|0;
 $iTempH = $13;
 $14 = $iTempH;
 $15 = $2;
 $16 = $15&255;
 $17 = $14 >>> $16;
 $e = $17;
 $18 = $iTempH;
 $19 = $lmshift;
 $20 = (($19) - 1)|0;
 $21 = $18 & $20;
 $22 = $lmshift;
 $23 = $21 | $22;
 $m = $23;
 $24 = $e;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $lmshift;
  $27 = $m;
  $28 = $27 ^ $26;
  $m = $28;
  $e = 1;
 }
 $29 = $1;
 $30 = $29 << 24 >> 24;
 $31 = (127 - ($30))|0;
 $32 = $e;
 $33 = (($32) + ($31))|0;
 $e = $33;
 while(1) {
  $34 = $m;
  $35 = $lmshift;
  $36 = ($34|0)<($35|0);
  if ($36) {
   $37 = $e;
   $38 = ($37|0)>(1);
   if ($38) {
    $39 = $m;
    $40 = ($39|0)>(0);
    $64 = $40;
   } else {
    $64 = 0;
   }
  } else {
   $64 = 0;
  }
  if (!($64)) {
   break;
  }
  $41 = $e;
  $42 = (($41) + -1)|0;
  $e = $42;
  $43 = $m;
  $44 = $43 << 1;
  $m = $44;
 }
 $45 = $m;
 $46 = $lmshift;
 $47 = ($45|0)<($46|0);
 if ($47) {
  $e = 0;
 } else {
  $48 = $lmshift;
  $49 = $m;
  $50 = $49 ^ $48;
  $m = $50;
 }
 $51 = $2;
 $52 = $51&255;
 $53 = (23 - ($52))|0;
 $54 = $m;
 $55 = $54 << $53;
 $m = $55;
 $56 = $s;
 $57 = $56 & -2147483648;
 $58 = $e;
 $59 = $58 << 23;
 $60 = $57 | $59;
 $61 = $m;
 $62 = $60 | $61;
 HEAP32[$x>>2] = $62;
 $63 = +HEAPF32[$x>>2];
 STACKTOP = sp;return (+$63);
}
function _outputMBRowAlpha($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a10 = 0, $a2 = 0, $a4 = 0, $a6 = 0, $a8 = 0, $bd = 0, $cHeight = 0, $cWidth = 0, $iAlphaPos = 0, $iBias = 0, $iBias1 = 0;
 var $iBias3 = 0, $iBias5 = 0, $iBias7 = 0, $iBias9 = 0, $iColumn = 0, $iFirstColumn = 0, $iFirstRow = 0, $iRow = 0, $iShift = 0, $iY = 0, $nExpBias = 0, $nLen = 0, $pA = 0, $pOffsetX = 0, $pOffsetY = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = $1;
  $8 = (($7) + 84|0);
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(7);
  if ($11) {
   $0 = 0;
   $504 = $0;
   STACKTOP = sp;return ($504|0);
  }
 }
 $12 = $1;
 $13 = (($12) + 35036|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $1;
  $17 = (($16) + 35032|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $1;
   $21 = (($20) + 4|0);
   $22 = (($21) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $bd = $23;
   $24 = $1;
   $25 = (($24) + 34136|0);
   $26 = (($25) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 3 : 0;
   $iShift = $29;
   $30 = $1;
   $31 = (($30) + 34248|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 1)|0;
   $36 = $1;
   $37 = (($36) + 34356|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) - 1)|0;
   $40 = $39<<4;
   $41 = (($35) - ($40))|0;
   $42 = ($41>>>0)<(16);
   if ($42) {
    $43 = $1;
    $44 = (($43) + 34248|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 36|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 1)|0;
    $49 = $1;
    $50 = (($49) + 34356|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) - 1)|0;
    $53 = $52<<4;
    $54 = (($48) - ($53))|0;
    $55 = $54;
   } else {
    $55 = 16;
   }
   $cHeight = $55;
   $56 = $1;
   $57 = (($56) + 34248|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 28|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1)|0;
   $cWidth = $61;
   $62 = $1;
   $63 = (($62) + 34356|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) - 1)|0;
   $66 = $65<<4;
   $67 = $1;
   $68 = (($67) + 34248|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($66>>>0)>($71>>>0);
   if ($72) {
    $79 = 0;
   } else {
    $73 = $1;
    $74 = (($73) + 34248|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + 32|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $77 & 15;
    $79 = $78;
   }
   $iFirstRow = $79;
   $80 = $1;
   $81 = (($80) + 34248|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + 24|0);
   $84 = HEAP32[$83>>2]|0;
   $iFirstColumn = $84;
   $85 = $1;
   $86 = (($85) + 4|0);
   $87 = (($86) + 20|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $1;
   $90 = (($89) + 4|0);
   $91 = (($90) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(4);
   $94 = $93 ? 4 : 3;
   $95 = (($88) + ($94))|0;
   $iAlphaPos = $95;
   $96 = $1;
   $97 = (($96) + 35032|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + 34564|0);
   $100 = HEAP32[$99>>2]|0;
   $pA = $100;
   $101 = $1;
   $102 = (($101) + 84|0);
   $103 = (($102) + 32840|0);
   $104 = HEAP8[$103>>0]|0;
   $nLen = $104;
   $105 = $1;
   $106 = (($105) + 84|0);
   $107 = (($106) + 32841|0);
   $108 = HEAP8[$107>>0]|0;
   $nExpBias = $108;
   $109 = $1;
   $110 = (($109) + 34248|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + 40|0);
   $113 = HEAP32[$112>>2]|0;
   $pOffsetX = $113;
   $114 = $1;
   $115 = (($114) + 34248|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + 44|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $1;
   $120 = (($119) + 34356|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) - 1)|0;
   $123 = $122<<4;
   $124 = (($118) + ($123<<2)|0);
   $pOffsetY = $124;
   $125 = $1;
   $126 = (($125) + 4|0);
   $127 = (($126) + 8|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (7)!=($128|0);
   if ($129) {
    $130 = $1;
    $131 = (($130) + 4|0);
    $132 = (($131) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (4)!=($133|0);
    if ($134) {
     $0 = -1;
     $504 = $0;
     STACKTOP = sp;return ($504|0);
    }
   }
   $135 = $bd;
   $136 = ($135|0)==(1);
   if ($136) {
    $137 = $iShift;
    $138 = (($137) + 7)|0;
    $139 = 1 << $138;
    $140 = $iShift;
    $141 = ($140|0)==(0);
    if ($141) {
     $146 = 0;
    } else {
     $142 = $iShift;
     $143 = (($142) - 1)|0;
     $144 = 1 << $143;
     $146 = $144;
    }
    $145 = (($139) + ($146))|0;
    $iBias = $145;
    $147 = $iFirstRow;
    $iRow = $147;
    while(1) {
     $148 = $iRow;
     $149 = $cHeight;
     $150 = ($148>>>0)<($149>>>0);
     if (!($150)) {
      break;
     }
     $151 = $iFirstColumn;
     $iColumn = $151;
     $152 = $iRow;
     $153 = $pOffsetY;
     $154 = (($153) + ($152<<2)|0);
     $155 = HEAP32[$154>>2]|0;
     $iY = $155;
     while(1) {
      $156 = $iColumn;
      $157 = $cWidth;
      $158 = ($156>>>0)<($157>>>0);
      if (!($158)) {
       break;
      }
      $159 = $iColumn;
      $160 = $159 >>> 4;
      $161 = $160 << 8;
      $162 = $iColumn;
      $163 = $162 & 15;
      $164 = $iRow;
      $165 = (14240 + ($164<<4)|0);
      $166 = (($165) + ($163)|0);
      $167 = HEAP8[$166>>0]|0;
      $168 = $167&255;
      $169 = (($161) + ($168))|0;
      $170 = $pA;
      $171 = (($170) + ($169<<2)|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = $iBias;
      $174 = (($172) + ($173))|0;
      $175 = $iShift;
      $176 = $174 >> $175;
      $a = $176;
      $177 = $a;
      $178 = ($177|0)<(0);
      if ($178) {
       $183 = 0;
      } else {
       $179 = $a;
       $180 = (255)<($179|0);
       if ($180) {
        $505 = 255;
       } else {
        $181 = $a;
        $505 = $181;
       }
       $183 = $505;
      }
      $182 = $183&255;
      $184 = $iAlphaPos;
      $185 = $1;
      $186 = (($185) + 32952|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = $iColumn;
      $189 = $pOffsetX;
      $190 = (($189) + ($188<<2)|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = (($187) + ($191)|0);
      $193 = $iY;
      $194 = (($192) + ($193)|0);
      $195 = (($194) + ($184)|0);
      HEAP8[$195>>0] = $182;
      $196 = $iColumn;
      $197 = (($196) + 1)|0;
      $iColumn = $197;
     }
     $198 = $iRow;
     $199 = (($198) + 1)|0;
     $iRow = $199;
    }
   } else {
    $200 = $bd;
    $201 = ($200|0)==(2);
    if ($201) {
     $202 = $iShift;
     $203 = (($202) + 15)|0;
     $204 = 1 << $203;
     $205 = $iShift;
     $206 = ($205|0)==(0);
     if ($206) {
      $211 = 0;
     } else {
      $207 = $iShift;
      $208 = (($207) - 1)|0;
      $209 = 1 << $208;
      $211 = $209;
     }
     $210 = (($204) + ($211))|0;
     $iBias1 = $210;
     $212 = $iFirstRow;
     $iRow = $212;
     while(1) {
      $213 = $iRow;
      $214 = $cHeight;
      $215 = ($213>>>0)<($214>>>0);
      if (!($215)) {
       break;
      }
      $216 = $iFirstColumn;
      $iColumn = $216;
      $217 = $iRow;
      $218 = $pOffsetY;
      $219 = (($218) + ($217<<2)|0);
      $220 = HEAP32[$219>>2]|0;
      $iY = $220;
      while(1) {
       $221 = $iColumn;
       $222 = $cWidth;
       $223 = ($221>>>0)<($222>>>0);
       if (!($223)) {
        break;
       }
       $224 = $iColumn;
       $225 = $224 >>> 4;
       $226 = $225 << 8;
       $227 = $iColumn;
       $228 = $227 & 15;
       $229 = $iRow;
       $230 = (14240 + ($229<<4)|0);
       $231 = (($230) + ($228)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = (($226) + ($233))|0;
       $235 = $pA;
       $236 = (($235) + ($234<<2)|0);
       $237 = HEAP32[$236>>2]|0;
       $238 = $iBias1;
       $239 = (($237) + ($238))|0;
       $240 = $iShift;
       $241 = $239 >> $240;
       $242 = $nLen;
       $243 = $242&255;
       $244 = $241 << $243;
       $a2 = $244;
       $245 = $a2;
       $246 = ($245|0)<(0);
       if ($246) {
        $251 = 0;
       } else {
        $247 = $a2;
        $248 = (65535)<($247|0);
        if ($248) {
         $506 = 65535;
        } else {
         $249 = $a2;
         $506 = $249;
        }
        $251 = $506;
       }
       $250 = $251&65535;
       $252 = $iAlphaPos;
       $253 = $1;
       $254 = (($253) + 32952|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = $iColumn;
       $257 = $pOffsetX;
       $258 = (($257) + ($256<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = (($255) + ($259<<1)|0);
       $261 = $iY;
       $262 = (($260) + ($261<<1)|0);
       $263 = (($262) + ($252<<1)|0);
       HEAP16[$263>>1] = $250;
       $264 = $iColumn;
       $265 = (($264) + 1)|0;
       $iColumn = $265;
      }
      $266 = $iRow;
      $267 = (($266) + 1)|0;
      $iRow = $267;
     }
    } else {
     $268 = $bd;
     $269 = ($268|0)==(3);
     if ($269) {
      $270 = $iShift;
      $271 = ($270|0)==(0);
      if ($271) {
       $275 = 0;
      } else {
       $272 = $iShift;
       $273 = (($272) - 1)|0;
       $274 = 1 << $273;
       $275 = $274;
      }
      $iBias3 = $275;
      $276 = $iFirstRow;
      $iRow = $276;
      while(1) {
       $277 = $iRow;
       $278 = $cHeight;
       $279 = ($277>>>0)<($278>>>0);
       if (!($279)) {
        break;
       }
       $280 = $iFirstColumn;
       $iColumn = $280;
       $281 = $iRow;
       $282 = $pOffsetY;
       $283 = (($282) + ($281<<2)|0);
       $284 = HEAP32[$283>>2]|0;
       $iY = $284;
       while(1) {
        $285 = $iColumn;
        $286 = $cWidth;
        $287 = ($285>>>0)<($286>>>0);
        if (!($287)) {
         break;
        }
        $288 = $iColumn;
        $289 = $288 >>> 4;
        $290 = $289 << 8;
        $291 = $iColumn;
        $292 = $291 & 15;
        $293 = $iRow;
        $294 = (14240 + ($293<<4)|0);
        $295 = (($294) + ($292)|0);
        $296 = HEAP8[$295>>0]|0;
        $297 = $296&255;
        $298 = (($290) + ($297))|0;
        $299 = $pA;
        $300 = (($299) + ($298<<2)|0);
        $301 = HEAP32[$300>>2]|0;
        $302 = $iBias3;
        $303 = (($301) + ($302))|0;
        $304 = $iShift;
        $305 = $303 >> $304;
        $306 = $nLen;
        $307 = $306&255;
        $308 = $305 << $307;
        $a4 = $308;
        $309 = $a4;
        $310 = ($309|0)<(-32768);
        if ($310) {
         $315 = -32768;
        } else {
         $311 = $a4;
         $312 = (32767)<($311|0);
         if ($312) {
          $507 = 32767;
         } else {
          $313 = $a4;
          $507 = $313;
         }
         $315 = $507;
        }
        $314 = $315&65535;
        $316 = $iAlphaPos;
        $317 = $1;
        $318 = (($317) + 32952|0);
        $319 = HEAP32[$318>>2]|0;
        $320 = $iColumn;
        $321 = $pOffsetX;
        $322 = (($321) + ($320<<2)|0);
        $323 = HEAP32[$322>>2]|0;
        $324 = (($319) + ($323<<1)|0);
        $325 = $iY;
        $326 = (($324) + ($325<<1)|0);
        $327 = (($326) + ($316<<1)|0);
        HEAP16[$327>>1] = $314;
        $328 = $iColumn;
        $329 = (($328) + 1)|0;
        $iColumn = $329;
       }
       $330 = $iRow;
       $331 = (($330) + 1)|0;
       $iRow = $331;
      }
     } else {
      $332 = $bd;
      $333 = ($332|0)==(4);
      if ($333) {
       $334 = $iShift;
       $335 = ($334|0)==(0);
       if ($335) {
        $339 = 0;
       } else {
        $336 = $iShift;
        $337 = (($336) - 1)|0;
        $338 = 1 << $337;
        $339 = $338;
       }
       $iBias5 = $339;
       $340 = $iFirstRow;
       $iRow = $340;
       while(1) {
        $341 = $iRow;
        $342 = $cHeight;
        $343 = ($341>>>0)<($342>>>0);
        if (!($343)) {
         break;
        }
        $344 = $iFirstColumn;
        $iColumn = $344;
        $345 = $iRow;
        $346 = $pOffsetY;
        $347 = (($346) + ($345<<2)|0);
        $348 = HEAP32[$347>>2]|0;
        $iY = $348;
        while(1) {
         $349 = $iColumn;
         $350 = $cWidth;
         $351 = ($349>>>0)<($350>>>0);
         if (!($351)) {
          break;
         }
         $352 = $iColumn;
         $353 = $352 >>> 4;
         $354 = $353 << 8;
         $355 = $iColumn;
         $356 = $355 & 15;
         $357 = $iRow;
         $358 = (14240 + ($357<<4)|0);
         $359 = (($358) + ($356)|0);
         $360 = HEAP8[$359>>0]|0;
         $361 = $360&255;
         $362 = (($354) + ($361))|0;
         $363 = $pA;
         $364 = (($363) + ($362<<2)|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = $iBias5;
         $367 = (($365) + ($366))|0;
         $368 = $iShift;
         $369 = $367 >> $368;
         $a6 = $369;
         $370 = $a6;
         $371 = (_backwardHalf($370)|0);
         $372 = $iAlphaPos;
         $373 = $1;
         $374 = (($373) + 32952|0);
         $375 = HEAP32[$374>>2]|0;
         $376 = $iColumn;
         $377 = $pOffsetX;
         $378 = (($377) + ($376<<2)|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (($375) + ($379<<1)|0);
         $381 = $iY;
         $382 = (($380) + ($381<<1)|0);
         $383 = (($382) + ($372<<1)|0);
         HEAP16[$383>>1] = $371;
         $384 = $iColumn;
         $385 = (($384) + 1)|0;
         $iColumn = $385;
        }
        $386 = $iRow;
        $387 = (($386) + 1)|0;
        $iRow = $387;
       }
      } else {
       $388 = $bd;
       $389 = ($388|0)==(6);
       if ($389) {
        $390 = $iShift;
        $391 = ($390|0)==(0);
        if ($391) {
         $395 = 0;
        } else {
         $392 = $iShift;
         $393 = (($392) - 1)|0;
         $394 = 1 << $393;
         $395 = $394;
        }
        $iBias7 = $395;
        $396 = $iFirstRow;
        $iRow = $396;
        while(1) {
         $397 = $iRow;
         $398 = $cHeight;
         $399 = ($397>>>0)<($398>>>0);
         if (!($399)) {
          break;
         }
         $400 = $iFirstColumn;
         $iColumn = $400;
         $401 = $iRow;
         $402 = $pOffsetY;
         $403 = (($402) + ($401<<2)|0);
         $404 = HEAP32[$403>>2]|0;
         $iY = $404;
         while(1) {
          $405 = $iColumn;
          $406 = $cWidth;
          $407 = ($405>>>0)<($406>>>0);
          if (!($407)) {
           break;
          }
          $408 = $iColumn;
          $409 = $408 >>> 4;
          $410 = $409 << 8;
          $411 = $iColumn;
          $412 = $411 & 15;
          $413 = $iRow;
          $414 = (14240 + ($413<<4)|0);
          $415 = (($414) + ($412)|0);
          $416 = HEAP8[$415>>0]|0;
          $417 = $416&255;
          $418 = (($410) + ($417))|0;
          $419 = $pA;
          $420 = (($419) + ($418<<2)|0);
          $421 = HEAP32[$420>>2]|0;
          $422 = $iBias7;
          $423 = (($421) + ($422))|0;
          $424 = $iShift;
          $425 = $423 >> $424;
          $426 = $nLen;
          $427 = $426&255;
          $428 = $425 << $427;
          $a8 = $428;
          $429 = $a8;
          $430 = $iAlphaPos;
          $431 = $1;
          $432 = (($431) + 32952|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $iColumn;
          $435 = $pOffsetX;
          $436 = (($435) + ($434<<2)|0);
          $437 = HEAP32[$436>>2]|0;
          $438 = (($433) + ($437<<2)|0);
          $439 = $iY;
          $440 = (($438) + ($439<<2)|0);
          $441 = (($440) + ($430<<2)|0);
          HEAP32[$441>>2] = $429;
          $442 = $iColumn;
          $443 = (($442) + 1)|0;
          $iColumn = $443;
         }
         $444 = $iRow;
         $445 = (($444) + 1)|0;
         $iRow = $445;
        }
       } else {
        $446 = $bd;
        $447 = ($446|0)==(7);
        if (!($447)) {
         $0 = -1;
         $504 = $0;
         STACKTOP = sp;return ($504|0);
        }
        $448 = $iShift;
        $449 = ($448|0)==(0);
        if ($449) {
         $453 = 0;
        } else {
         $450 = $iShift;
         $451 = (($450) - 1)|0;
         $452 = 1 << $451;
         $453 = $452;
        }
        $iBias9 = $453;
        $454 = $iFirstRow;
        $iRow = $454;
        while(1) {
         $455 = $iRow;
         $456 = $cHeight;
         $457 = ($455>>>0)<($456>>>0);
         if (!($457)) {
          break;
         }
         $458 = $iFirstColumn;
         $iColumn = $458;
         $459 = $iRow;
         $460 = $pOffsetY;
         $461 = (($460) + ($459<<2)|0);
         $462 = HEAP32[$461>>2]|0;
         $iY = $462;
         while(1) {
          $463 = $iColumn;
          $464 = $cWidth;
          $465 = ($463>>>0)<($464>>>0);
          if (!($465)) {
           break;
          }
          $466 = $iColumn;
          $467 = $466 >>> 4;
          $468 = $467 << 8;
          $469 = $iColumn;
          $470 = $469 & 15;
          $471 = $iRow;
          $472 = (14240 + ($471<<4)|0);
          $473 = (($472) + ($470)|0);
          $474 = HEAP8[$473>>0]|0;
          $475 = $474&255;
          $476 = (($468) + ($475))|0;
          $477 = $pA;
          $478 = (($477) + ($476<<2)|0);
          $479 = HEAP32[$478>>2]|0;
          $480 = $iBias9;
          $481 = (($479) + ($480))|0;
          $482 = $iShift;
          $483 = $481 >> $482;
          $a10 = $483;
          $484 = $a10;
          $485 = $nExpBias;
          $486 = $nLen;
          $487 = (+_pixel2float($484,$485,$486));
          $488 = $iAlphaPos;
          $489 = $1;
          $490 = (($489) + 32952|0);
          $491 = HEAP32[$490>>2]|0;
          $492 = $iColumn;
          $493 = $pOffsetX;
          $494 = (($493) + ($492<<2)|0);
          $495 = HEAP32[$494>>2]|0;
          $496 = (($491) + ($495<<2)|0);
          $497 = $iY;
          $498 = (($496) + ($497<<2)|0);
          $499 = (($498) + ($488<<2)|0);
          HEAPF32[$499>>2] = $487;
          $500 = $iColumn;
          $501 = (($500) + 1)|0;
          $iColumn = $501;
         }
         $502 = $iRow;
         $503 = (($502) + 1)|0;
         $iRow = $503;
        }
       }
      }
     }
    }
   }
  }
 }
 $0 = 0;
 $504 = $0;
 STACKTOP = sp;return ($504|0);
}
function _outputMBRow($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0;
 var $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0;
 var $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0;
 var $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0;
 var $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0;
 var $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0;
 var $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0;
 var $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0;
 var $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0;
 var $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0;
 var $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0;
 var $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0;
 var $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0;
 var $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0;
 var $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0;
 var $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0;
 var $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0;
 var $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0;
 var $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0;
 var $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0;
 var $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0;
 var $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0;
 var $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0;
 var $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0;
 var $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0;
 var $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0;
 var $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0;
 var $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0;
 var $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0.0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0.0, $3265 = 0;
 var $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0.0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0;
 var $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0;
 var $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0;
 var $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0;
 var $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0;
 var $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0;
 var $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0;
 var $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0;
 var $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0;
 var $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0;
 var $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0;
 var $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0;
 var $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0;
 var $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0;
 var $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0;
 var $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0;
 var $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0;
 var $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0;
 var $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0;
 var $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0;
 var $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0;
 var $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0;
 var $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0;
 var $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0;
 var $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0;
 var $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0;
 var $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0;
 var $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0;
 var $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0;
 var $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0;
 var $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0;
 var $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0;
 var $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0;
 var $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0;
 var $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0;
 var $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0;
 var $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0;
 var $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0;
 var $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0;
 var $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0;
 var $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0;
 var $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0;
 var $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0;
 var $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0;
 var $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0;
 var $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0;
 var $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0;
 var $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0;
 var $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $a = 0, $b = 0, $b20 = 0, $b25 = 0, $b55 = 0, $b65 = 0, $b70 = 0, $b75 = 0, $b80 = 0, $b84 = 0, $b89 = 0, $b94 = 0, $bd = 0, $c = 0, $c44 = 0, $c56 = 0, $cByte = 0, $cByte96 = 0, $cChannel = 0;
 var $cHeight = 0, $cShift = 0, $cShift97 = 0, $cWidth = 0, $cfExt = 0, $g = 0, $g19 = 0, $g24 = 0, $g54 = 0, $g64 = 0, $g69 = 0, $g74 = 0, $g79 = 0, $g83 = 0, $g88 = 0, $g93 = 0, $i0 = 0, $i031 = 0, $i040 = 0, $i1 = 0;
 var $i132 = 0, $i141 = 0, $i2 = 0, $i242 = 0, $i3 = 0, $i343 = 0, $iB = 0, $iBias = 0, $iBias1 = 0, $iBias149 = 0, $iBias2 = 0, $iBias21 = 0, $iBias250 = 0, $iBias51 = 0, $iBias61 = 0, $iBias66 = 0, $iBias71 = 0, $iBias76 = 0, $iBias81 = 0, $iBias86 = 0;
 var $iBias91 = 0, $iChannel = 0, $iColumn = 0, $iFirstColumn = 0, $iFirstRow = 0, $iIdx = 0, $iPos = 0, $iR = 0, $iRow = 0, $iShift = 0, $iTh = 0, $iY = 0, $iY101 = 0, $iY98 = 0, $iY99 = 0, $k = 0, $k47 = 0, $k59 = 0, $m = 0, $m45 = 0;
 var $m57 = 0, $nExpBias = 0, $nLen = 0, $oO = 0, $oO30 = 0, $oO39 = 0, $p = 0, $pA = 0, $pChannel = 0, $pDst = 0, $pDst22 = 0, $pDst52 = 0, $pDst62 = 0, $pDst67 = 0, $pDst7 = 0, $pDst72 = 0, $pDst77 = 0, $pDst85 = 0, $pDst90 = 0, $pDst95 = 0;
 var $pII = 0, $pK = 0, $pK48 = 0, $pK60 = 0, $pOffsetX = 0, $pOffsetY = 0, $pRow = 0, $pRow1 = 0, $pRow6 = 0, $pT = 0, $pT100 = 0, $pT102 = 0, $pU = 0, $pV = 0, $pY = 0, $r = 0, $r18 = 0, $r23 = 0, $r53 = 0, $r63 = 0;
 var $r68 = 0, $r73 = 0, $r78 = 0, $r82 = 0, $r87 = 0, $r92 = 0, $u = 0, $u10 = 0, $u16 = 0, $u28 = 0, $u37 = 0, $u4 = 0, $v = 0, $v11 = 0, $v17 = 0, $v29 = 0, $v38 = 0, $v5 = 0, $y = 0, $y0 = 0;
 var $y012 = 0, $y02 = 0, $y026 = 0, $y033 = 0, $y08 = 0, $y1 = 0, $y113 = 0, $y127 = 0, $y13 = 0, $y134 = 0, $y19 = 0, $y2 = 0, $y214 = 0, $y235 = 0, $y3 = 0, $y315 = 0, $y336 = 0, $y46 = 0, $y58 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pChannel = sp + 528|0;
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 34136|0);
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $11 = 0;
 } else {
  $7 = $1;
  $8 = (($7) + 4|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10;
 }
 $cfExt = $11;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $bd = $15;
 $16 = $1;
 $17 = (($16) + 34136|0);
 $18 = (($17) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 $21 = $20 ? 3 : 0;
 $iShift = $21;
 $22 = $1;
 $23 = (($22) + 34248|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 36|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 $28 = $1;
 $29 = (($28) + 34356|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) - 1)|0;
 $32 = $31<<4;
 $33 = (($27) - ($32))|0;
 $34 = ($33>>>0)<(16);
 if ($34) {
  $35 = $1;
  $36 = (($35) + 34248|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 1)|0;
  $41 = $1;
  $42 = (($41) + 34356|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) - 1)|0;
  $45 = $44<<4;
  $46 = (($40) - ($45))|0;
  $47 = $46;
 } else {
  $47 = 16;
 }
 $cHeight = $47;
 $48 = $1;
 $49 = (($48) + 34248|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 $cWidth = $53;
 $54 = $1;
 $55 = (($54) + 34356|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) - 1)|0;
 $58 = $57<<4;
 $59 = $1;
 $60 = (($59) + 34248|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 32|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($58>>>0)>($63>>>0);
 if ($64) {
  $71 = 0;
 } else {
  $65 = $1;
  $66 = (($65) + 34248|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 32|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69 & 15;
  $71 = $70;
 }
 $iFirstRow = $71;
 $72 = $1;
 $73 = (($72) + 34248|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + 24|0);
 $76 = HEAP32[$75>>2]|0;
 $iFirstColumn = $76;
 $77 = $1;
 $78 = (($77) + 34564|0);
 $79 = HEAP32[$78>>2]|0;
 $pY = $79;
 $80 = $1;
 $81 = (($80) + 34264|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = $1;
  $85 = (($84) + 34884|0);
  $86 = HEAP32[$85>>2]|0;
  $91 = $86;
 } else {
  $87 = $1;
  $88 = (($87) + 34564|0);
  $89 = (($88) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90;
 }
 $pU = $91;
 $92 = $1;
 $93 = (($92) + 34264|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $1;
  $97 = (($96) + 34888|0);
  $98 = HEAP32[$97>>2]|0;
  $103 = $98;
 } else {
  $99 = $1;
  $100 = (($99) + 34564|0);
  $101 = (($100) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $102;
 }
 $pV = $103;
 $pA = 0;
 $104 = $1;
 $105 = (($104) + 4|0);
 $106 = (($105) + 24|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0);
 $109 = $108 ? 2 : 0;
 $iB = $109;
 $110 = $iB;
 $111 = (2 - ($110))|0;
 $iR = $111;
 $112 = $1;
 $113 = (($112) + 84|0);
 $114 = (($113) + 32840|0);
 $115 = HEAP8[$114>>0]|0;
 $nLen = $115;
 $116 = $1;
 $117 = (($116) + 84|0);
 $118 = (($117) + 32841|0);
 $119 = HEAP8[$118>>0]|0;
 $nExpBias = $119;
 $120 = $1;
 $121 = (($120) + 34248|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) + 40|0);
 $124 = HEAP32[$123>>2]|0;
 $pOffsetX = $124;
 $125 = $1;
 $126 = (($125) + 34248|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($127) + 44|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $1;
 $131 = (($130) + 34356|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) - 1)|0;
 $134 = $cfExt;
 $135 = ($134|0)==(1);
 $136 = $135 ? 8 : 16;
 $137 = Math_imul($133, $136)|0;
 $138 = (($129) + ($137<<2)|0);
 $pOffsetY = $138;
 $139 = $1;
 $140 = (($139) + 35032|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0|0);
 do {
  if ($142) {
   $143 = $1;
   $144 = (($143) + 34136|0);
   $145 = (($144) + 20|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $1;
   $148 = (($147) + 35032|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($149) + 34136|0);
   $151 = (($150) + 20|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($146|0)==($152|0);
   if ($153) {
    break;
   } else {
    ___assert_fail((8504|0),(8456|0),993,(8576|0));
    // unreachable;
   }
  }
 } while(0);
 $154 = $1;
 $155 = $1;
 $156 = (($155) + 4|0);
 $157 = (($156) + 64|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ($158>>>0)>=(4);
 if ($159) {
  $160 = $1;
  $161 = (($160) + 4|0);
  $162 = (($161) + 44|0);
  $163 = HEAP32[$162>>2]|0;
  $171 = $163;
 } else {
  $164 = $1;
  $165 = (($164) + 4|0);
  $166 = (($165) + 36|0);
  $167 = HEAP32[$166>>2]|0;
  $171 = $167;
 }
 $168 = $cHeight;
 $169 = $iFirstRow;
 $170 = (($168) - ($169))|0;
 $172 = (_checkImageBuffer($154,$171,$170)|0);
 $173 = ($172|0)!=(0);
 if ($173) {
  $0 = -1;
  $4071 = $0;
  STACKTOP = sp;return ($4071|0);
 }
 $174 = $1;
 $175 = (($174) + 34264|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = ($176|0)!=(0);
 if ($177) {
  $178 = $1;
  _interpolateUV($178);
 }
 $179 = $1;
 $180 = (($179) + 84|0);
 $181 = (($180) + 32856|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = ($182|0)!=(0);
 if ($183) {
  $184 = $1;
  $185 = (($184) + 32952|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = $1;
  $188 = (($187) + 34356|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) - 1)|0;
  $191 = $1;
  $192 = (($191) + 34136|0);
  $193 = (($192) + 8|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = ($194|0)==(1);
  $196 = $195 ? 8 : 16;
  $197 = Math_imul($190, $196)|0;
  $198 = $1;
  $199 = (($198) + 32952|0);
  $200 = (($199) + 8|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = Math_imul($197, $201)|0;
  $203 = (($202>>>0) / 4)&-1;
  $204 = (($186) + ($203<<2)|0);
  $pDst = $204;
  $205 = $1;
  $206 = (($205) + 34136|0);
  $207 = (($206) + 8|0);
  $208 = HEAP32[$207>>2]|0;
  switch ($208|0) {
  case 1:  {
   $362 = $iFirstRow;
   $iRow = $362;
   while(1) {
    $363 = $iRow;
    $364 = $cHeight;
    $365 = ($363>>>0)<($364>>>0);
    if (!($365)) {
     break;
    }
    $366 = $pDst;
    $pRow6 = $366;
    $367 = $iFirstColumn;
    $iColumn = $367;
    while(1) {
     $368 = $iColumn;
     $369 = $cWidth;
     $370 = ($368>>>0)<($369>>>0);
     if (!($370)) {
      break;
     }
     $371 = $iColumn;
     $372 = $371 >>> 4;
     $373 = $372 << 6;
     $374 = $iColumn;
     $375 = $374 >>> 1;
     $376 = $375 & 7;
     $377 = $iRow;
     $378 = $377 >>> 1;
     $379 = (14496 + ($378<<3)|0);
     $380 = (($379) + ($376)|0);
     $381 = HEAP8[$380>>0]|0;
     $382 = $381&255;
     $383 = (($373) + ($382))|0;
     $iIdx = $383;
     $384 = $iIdx;
     $385 = $pU;
     $386 = (($385) + ($384<<2)|0);
     $387 = HEAP32[$386>>2]|0;
     $u4 = $387;
     $388 = $iIdx;
     $389 = $pV;
     $390 = (($389) + ($388<<2)|0);
     $391 = HEAP32[$390>>2]|0;
     $v5 = $391;
     $392 = $iColumn;
     $393 = $392 >>> 4;
     $394 = $393 << 8;
     $395 = $iColumn;
     $396 = $395 & 15;
     $397 = $iRow;
     $398 = (14240 + ($397<<4)|0);
     $399 = (($398) + ($396)|0);
     $400 = HEAP8[$399>>0]|0;
     $401 = $400&255;
     $402 = (($394) + ($401))|0;
     $403 = $pY;
     $404 = (($403) + ($402<<2)|0);
     $405 = HEAP32[$404>>2]|0;
     $y02 = $405;
     $406 = $iColumn;
     $407 = (($406) + 1)|0;
     $408 = $407 >>> 4;
     $409 = $408 << 8;
     $410 = $iColumn;
     $411 = (($410) + 1)|0;
     $412 = $411 & 15;
     $413 = $iRow;
     $414 = (14240 + ($413<<4)|0);
     $415 = (($414) + ($412)|0);
     $416 = HEAP8[$415>>0]|0;
     $417 = $416&255;
     $418 = (($409) + ($417))|0;
     $419 = $pY;
     $420 = (($419) + ($418<<2)|0);
     $421 = HEAP32[$420>>2]|0;
     $y13 = $421;
     $422 = $iColumn;
     $423 = $422 >>> 4;
     $424 = $423 << 8;
     $425 = $iColumn;
     $426 = $425 & 15;
     $427 = $iRow;
     $428 = (($427) + 1)|0;
     $429 = (14240 + ($428<<4)|0);
     $430 = (($429) + ($426)|0);
     $431 = HEAP8[$430>>0]|0;
     $432 = $431&255;
     $433 = (($424) + ($432))|0;
     $434 = $pY;
     $435 = (($434) + ($433<<2)|0);
     $436 = HEAP32[$435>>2]|0;
     $y2 = $436;
     $437 = $iColumn;
     $438 = (($437) + 1)|0;
     $439 = $438 >>> 4;
     $440 = $439 << 8;
     $441 = $iColumn;
     $442 = (($441) + 1)|0;
     $443 = $442 & 15;
     $444 = $iRow;
     $445 = (($444) + 1)|0;
     $446 = (14240 + ($445<<4)|0);
     $447 = (($446) + ($443)|0);
     $448 = HEAP8[$447>>0]|0;
     $449 = $448&255;
     $450 = (($440) + ($449))|0;
     $451 = $pY;
     $452 = (($451) + ($450<<2)|0);
     $453 = HEAP32[$452>>2]|0;
     $y3 = $453;
     $454 = $y02;
     $455 = $pRow6;
     HEAP32[$455>>2] = $454;
     $456 = $y13;
     $457 = $pRow6;
     $458 = (($457) + 4|0);
     HEAP32[$458>>2] = $456;
     $459 = $y2;
     $460 = $pRow6;
     $461 = (($460) + 8|0);
     HEAP32[$461>>2] = $459;
     $462 = $y3;
     $463 = $pRow6;
     $464 = (($463) + 12|0);
     HEAP32[$464>>2] = $462;
     $465 = $u4;
     $466 = $pRow6;
     $467 = (($466) + 16|0);
     HEAP32[$467>>2] = $465;
     $468 = $v5;
     $469 = $pRow6;
     $470 = (($469) + 20|0);
     HEAP32[$470>>2] = $468;
     $471 = $pRow6;
     $472 = (($471) + 24|0);
     $pRow6 = $472;
     $473 = $iColumn;
     $474 = (($473) + 2)|0;
     $iColumn = $474;
    }
    $475 = $1;
    $476 = (($475) + 32952|0);
    $477 = (($476) + 8|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = (($478>>>0) / 4)&-1;
    $480 = $pDst;
    $481 = (($480) + ($479<<2)|0);
    $pDst = $481;
    $482 = $iRow;
    $483 = (($482) + 2)|0;
    $iRow = $483;
   }
   break;
  }
  case 6: case 3: case 0:  {
   $209 = $1;
   $210 = (($209) + 4|0);
   $211 = (($210) + 8|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ($212|0)==(0);
   if ($213) {
    $218 = 1;
   } else {
    $214 = $1;
    $215 = (($214) + 84|0);
    $216 = (($215) + 32|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $217;
   }
   $cChannel = $218;
   $219 = $cChannel;
   $220 = ($219>>>0)<=(16);
   if (!($220)) {
    ___assert_fail((8440|0),(8456|0),1016,(8576|0));
    // unreachable;
   }
   $iChannel = 0;
   while(1) {
    $221 = $iChannel;
    $222 = $cChannel;
    $223 = ($221>>>0)<($222>>>0);
    if (!($223)) {
     break;
    }
    $224 = $iChannel;
    $225 = $1;
    $226 = (($225) + 34564|0);
    $227 = (($226) + ($224<<2)|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = $iChannel;
    $230 = $229 & 15;
    $231 = (($pChannel) + ($230<<2)|0);
    HEAP32[$231>>2] = $228;
    $232 = $iChannel;
    $233 = (($232) + 1)|0;
    $iChannel = $233;
   }
   $234 = $iFirstRow;
   $iRow = $234;
   while(1) {
    $235 = $iRow;
    $236 = $cHeight;
    $237 = ($235>>>0)<($236>>>0);
    if (!($237)) {
     break;
    }
    $238 = $pDst;
    $pRow = $238;
    $239 = $iFirstColumn;
    $iColumn = $239;
    while(1) {
     $240 = $iColumn;
     $241 = $cWidth;
     $242 = ($240>>>0)<($241>>>0);
     if (!($242)) {
      break;
     }
     $iChannel = 0;
     while(1) {
      $243 = $iChannel;
      $244 = $cChannel;
      $245 = ($243>>>0)<($244>>>0);
      if (!($245)) {
       break;
      }
      $246 = $iColumn;
      $247 = $246 >>> 4;
      $248 = $247 << 8;
      $249 = $iColumn;
      $250 = $249 & 15;
      $251 = $iRow;
      $252 = (14240 + ($251<<4)|0);
      $253 = (($252) + ($250)|0);
      $254 = HEAP8[$253>>0]|0;
      $255 = $254&255;
      $256 = (($248) + ($255))|0;
      $257 = $iChannel;
      $258 = $257 & 15;
      $259 = (($pChannel) + ($258<<2)|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = (($260) + ($256<<2)|0);
      $262 = HEAP32[$261>>2]|0;
      $p = $262;
      $263 = $p;
      $264 = $pRow;
      $265 = (($264) + 4|0);
      $pRow = $265;
      HEAP32[$264>>2] = $263;
      $266 = $iChannel;
      $267 = (($266) + 1)|0;
      $iChannel = $267;
     }
     $268 = $iColumn;
     $269 = (($268) + 1)|0;
     $iColumn = $269;
    }
    $270 = $1;
    $271 = (($270) + 32952|0);
    $272 = (($271) + 8|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = (($273>>>0) / 4)&-1;
    $275 = $pDst;
    $276 = (($275) + ($274<<2)|0);
    $pDst = $276;
    $277 = $iRow;
    $278 = (($277) + 1)|0;
    $iRow = $278;
   }
   break;
  }
  case 2:  {
   $279 = $iFirstRow;
   $iRow = $279;
   while(1) {
    $280 = $iRow;
    $281 = $cHeight;
    $282 = ($280>>>0)<($281>>>0);
    if (!($282)) {
     break;
    }
    $283 = $pDst;
    $pRow1 = $283;
    $284 = $iFirstColumn;
    $iColumn = $284;
    while(1) {
     $285 = $iColumn;
     $286 = $cWidth;
     $287 = ($285>>>0)<($286>>>0);
     if (!($287)) {
      break;
     }
     $288 = $iColumn;
     $289 = $288 >>> 4;
     $290 = $289 << 7;
     $291 = $iColumn;
     $292 = $291 >>> 1;
     $293 = $292 & 7;
     $294 = $iRow;
     $295 = (14240 + ($294<<4)|0);
     $296 = (($295) + ($293)|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = (($290) + ($298))|0;
     $iIdx = $299;
     $300 = $iIdx;
     $301 = $pU;
     $302 = (($301) + ($300<<2)|0);
     $303 = HEAP32[$302>>2]|0;
     $u = $303;
     $304 = $iIdx;
     $305 = $pV;
     $306 = (($305) + ($304<<2)|0);
     $307 = HEAP32[$306>>2]|0;
     $v = $307;
     $308 = $iColumn;
     $309 = $308 >>> 4;
     $310 = $309 << 8;
     $311 = $iColumn;
     $312 = $311 & 15;
     $313 = $iRow;
     $314 = (14240 + ($313<<4)|0);
     $315 = (($314) + ($312)|0);
     $316 = HEAP8[$315>>0]|0;
     $317 = $316&255;
     $318 = (($310) + ($317))|0;
     $319 = $pY;
     $320 = (($319) + ($318<<2)|0);
     $321 = HEAP32[$320>>2]|0;
     $y0 = $321;
     $322 = $iColumn;
     $323 = (($322) + 1)|0;
     $324 = $323 >>> 4;
     $325 = $324 << 8;
     $326 = $iColumn;
     $327 = (($326) + 1)|0;
     $328 = $327 & 15;
     $329 = $iRow;
     $330 = (14240 + ($329<<4)|0);
     $331 = (($330) + ($328)|0);
     $332 = HEAP8[$331>>0]|0;
     $333 = $332&255;
     $334 = (($325) + ($333))|0;
     $335 = $pY;
     $336 = (($335) + ($334<<2)|0);
     $337 = HEAP32[$336>>2]|0;
     $y1 = $337;
     $338 = $u;
     $339 = $pRow1;
     HEAP32[$339>>2] = $338;
     $340 = $y0;
     $341 = $pRow1;
     $342 = (($341) + 4|0);
     HEAP32[$342>>2] = $340;
     $343 = $v;
     $344 = $pRow1;
     $345 = (($344) + 8|0);
     HEAP32[$345>>2] = $343;
     $346 = $y1;
     $347 = $pRow1;
     $348 = (($347) + 12|0);
     HEAP32[$348>>2] = $346;
     $349 = $pRow1;
     $350 = (($349) + 16|0);
     $pRow1 = $350;
     $351 = $iColumn;
     $352 = (($351) + 2)|0;
     $iColumn = $352;
    }
    $353 = $1;
    $354 = (($353) + 32952|0);
    $355 = (($354) + 8|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = (($356>>>0) / 4)&-1;
    $358 = $pDst;
    $359 = (($358) + ($357<<2)|0);
    $pDst = $359;
    $360 = $iRow;
    $361 = (($360) + 1)|0;
    $iRow = $361;
   }
   break;
  }
  default: {
   ___assert_fail((8496|0),(8456|0),1081,(8576|0));
   // unreachable;
  }
  }
 } else {
  $484 = $bd;
  $485 = ($484|0)==(1);
  if ($485) {
   $486 = $iShift;
   $487 = 128 << $486;
   $iBias1 = $487;
   $488 = $1;
   $489 = (($488) + 34136|0);
   $490 = (($489) + 20|0);
   $491 = HEAP32[$490>>2]|0;
   $492 = ($491|0)!=(0);
   $493 = $492 ? 3 : 0;
   $iBias2 = $493;
   $494 = $iBias1;
   $495 = $iBias2;
   $496 = (($494) + ($495))|0;
   $iBias = $496;
   $497 = $cfExt;
   switch ($497|0) {
   case 7:  {
    $498 = $1;
    $499 = (($498) + 35032|0);
    $500 = HEAP32[$499>>2]|0;
    $501 = ($500|0)!=(0|0);
    if ($501) {
     $502 = $1;
     $503 = (($502) + 84|0);
     $504 = (($503) + 36|0);
     $505 = HEAP8[$504>>0]|0;
     $506 = $505&255;
     $507 = ($506|0)>(0);
     if ($507) {
      $508 = $1;
      $509 = (($508) + 35032|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = (($510) + 34564|0);
      $512 = HEAP32[$511>>2]|0;
      $pA = $512;
      $513 = $1;
      $514 = (($513) + 34136|0);
      $515 = (($514) + 20|0);
      $516 = HEAP32[$515>>2]|0;
      $517 = ($516|0)==(0);
      if ($517) {
       $518 = $iFirstRow;
       $iRow = $518;
       while(1) {
        $519 = $iRow;
        $520 = $cHeight;
        $521 = ($519>>>0)<($520>>>0);
        if (!($521)) {
         break;
        }
        $522 = $iFirstColumn;
        $iColumn = $522;
        $523 = $iRow;
        $524 = $pOffsetY;
        $525 = (($524) + ($523<<2)|0);
        $526 = HEAP32[$525>>2]|0;
        $iY = $526;
        while(1) {
         $527 = $iColumn;
         $528 = $cWidth;
         $529 = ($527>>>0)<($528>>>0);
         if (!($529)) {
          break;
         }
         $530 = $iColumn;
         $531 = $530 >>> 4;
         $532 = $531 << 8;
         $533 = $iColumn;
         $534 = $533 & 15;
         $535 = $iRow;
         $536 = (14240 + ($535<<4)|0);
         $537 = (($536) + ($534)|0);
         $538 = HEAP8[$537>>0]|0;
         $539 = $538&255;
         $540 = (($532) + ($539))|0;
         $iIdx = $540;
         $541 = $iIdx;
         $542 = $pY;
         $543 = (($542) + ($541<<2)|0);
         $544 = HEAP32[$543>>2]|0;
         $545 = $iBias;
         $546 = (($544) + ($545))|0;
         $g = $546;
         $547 = $iIdx;
         $548 = $pU;
         $549 = (($548) + ($547<<2)|0);
         $550 = HEAP32[$549>>2]|0;
         $551 = (0 - ($550))|0;
         $r = $551;
         $552 = $iIdx;
         $553 = $pV;
         $554 = (($553) + ($552<<2)|0);
         $555 = HEAP32[$554>>2]|0;
         $b = $555;
         $556 = $iIdx;
         $557 = $pA;
         $558 = (($557) + ($556<<2)|0);
         $559 = HEAP32[$558>>2]|0;
         $560 = $iBias;
         $561 = (($559) + ($560))|0;
         $a = $561;
         $562 = $r;
         $563 = (($562) + 0)|0;
         $564 = $563 >> 1;
         $565 = $g;
         $566 = (($565) - ($564))|0;
         $g = $566;
         $567 = $b;
         $568 = (($567) + 1)|0;
         $569 = $568 >> 1;
         $570 = $g;
         $571 = (($569) - ($570))|0;
         $572 = $r;
         $573 = (($572) - ($571))|0;
         $r = $573;
         $574 = $r;
         $575 = $b;
         $576 = (($575) + ($574))|0;
         $b = $576;
         $577 = $1;
         $578 = (($577) + 32952|0);
         $579 = HEAP32[$578>>2]|0;
         $580 = $iColumn;
         $581 = $pOffsetX;
         $582 = (($581) + ($580<<2)|0);
         $583 = HEAP32[$582>>2]|0;
         $584 = (($579) + ($583)|0);
         $585 = $iY;
         $586 = (($584) + ($585)|0);
         $pDst7 = $586;
         $587 = $g;
         $588 = $b;
         $589 = $587 | $588;
         $590 = $r;
         $591 = $589 | $590;
         $592 = $a;
         $593 = $591 | $592;
         $594 = $593 & -256;
         $595 = ($594|0)!=(0);
         if ($595) {
          $596 = $r;
          $597 = ($596|0)<(0);
          if ($597) {
           $602 = 0;
          } else {
           $598 = $r;
           $599 = (255)<($598|0);
           if ($599) {
            $4072 = 255;
           } else {
            $600 = $r;
            $4072 = $600;
           }
           $602 = $4072;
          }
          $601 = $602&255;
          $603 = $iR;
          $604 = $pDst7;
          $605 = (($604) + ($603)|0);
          HEAP8[$605>>0] = $601;
          $606 = $g;
          $607 = ($606|0)<(0);
          if ($607) {
           $612 = 0;
          } else {
           $608 = $g;
           $609 = (255)<($608|0);
           if ($609) {
            $4073 = 255;
           } else {
            $610 = $g;
            $4073 = $610;
           }
           $612 = $4073;
          }
          $611 = $612&255;
          $613 = $pDst7;
          $614 = (($613) + 1|0);
          HEAP8[$614>>0] = $611;
          $615 = $b;
          $616 = ($615|0)<(0);
          if ($616) {
           $621 = 0;
          } else {
           $617 = $b;
           $618 = (255)<($617|0);
           if ($618) {
            $4074 = 255;
           } else {
            $619 = $b;
            $4074 = $619;
           }
           $621 = $4074;
          }
          $620 = $621&255;
          $622 = $iB;
          $623 = $pDst7;
          $624 = (($623) + ($622)|0);
          HEAP8[$624>>0] = $620;
          $625 = $a;
          $626 = ($625|0)<(0);
          if ($626) {
           $631 = 0;
          } else {
           $627 = $a;
           $628 = (255)<($627|0);
           if ($628) {
            $4075 = 255;
           } else {
            $629 = $a;
            $4075 = $629;
           }
           $631 = $4075;
          }
          $630 = $631&255;
          $632 = $pDst7;
          $633 = (($632) + 3|0);
          HEAP8[$633>>0] = $630;
         } else {
          $634 = $r;
          $635 = $634&255;
          $636 = $iR;
          $637 = $pDst7;
          $638 = (($637) + ($636)|0);
          HEAP8[$638>>0] = $635;
          $639 = $g;
          $640 = $639&255;
          $641 = $pDst7;
          $642 = (($641) + 1|0);
          HEAP8[$642>>0] = $640;
          $643 = $b;
          $644 = $643&255;
          $645 = $iB;
          $646 = $pDst7;
          $647 = (($646) + ($645)|0);
          HEAP8[$647>>0] = $644;
          $648 = $a;
          $649 = $648&255;
          $650 = $pDst7;
          $651 = (($650) + 3|0);
          HEAP8[$651>>0] = $649;
         }
         $652 = $iColumn;
         $653 = (($652) + 1)|0;
         $iColumn = $653;
        }
        $654 = $iRow;
        $655 = (($654) + 1)|0;
        $iRow = $655;
       }
      } else {
       $656 = $iFirstRow;
       $iRow = $656;
       while(1) {
        $657 = $iRow;
        $658 = $cHeight;
        $659 = ($657>>>0)<($658>>>0);
        if (!($659)) {
         break;
        }
        $660 = $iFirstColumn;
        $iColumn = $660;
        $661 = $iRow;
        $662 = $pOffsetY;
        $663 = (($662) + ($661<<2)|0);
        $664 = HEAP32[$663>>2]|0;
        $iY = $664;
        while(1) {
         $665 = $iColumn;
         $666 = $cWidth;
         $667 = ($665>>>0)<($666>>>0);
         if (!($667)) {
          break;
         }
         $668 = $iColumn;
         $669 = $668 >>> 4;
         $670 = $669 << 8;
         $671 = $iColumn;
         $672 = $671 & 15;
         $673 = $iRow;
         $674 = (14240 + ($673<<4)|0);
         $675 = (($674) + ($672)|0);
         $676 = HEAP8[$675>>0]|0;
         $677 = $676&255;
         $678 = (($670) + ($677))|0;
         $iIdx = $678;
         $679 = $iIdx;
         $680 = $pY;
         $681 = (($680) + ($679<<2)|0);
         $682 = HEAP32[$681>>2]|0;
         $683 = $iBias;
         $684 = (($682) + ($683))|0;
         $g = $684;
         $685 = $iIdx;
         $686 = $pU;
         $687 = (($686) + ($685<<2)|0);
         $688 = HEAP32[$687>>2]|0;
         $689 = (0 - ($688))|0;
         $r = $689;
         $690 = $iIdx;
         $691 = $pV;
         $692 = (($691) + ($690<<2)|0);
         $693 = HEAP32[$692>>2]|0;
         $b = $693;
         $694 = $iIdx;
         $695 = $pA;
         $696 = (($695) + ($694<<2)|0);
         $697 = HEAP32[$696>>2]|0;
         $698 = $iBias;
         $699 = (($697) + ($698))|0;
         $a = $699;
         $700 = $r;
         $701 = (($700) + 0)|0;
         $702 = $701 >> 1;
         $703 = $g;
         $704 = (($703) - ($702))|0;
         $g = $704;
         $705 = $b;
         $706 = (($705) + 1)|0;
         $707 = $706 >> 1;
         $708 = $g;
         $709 = (($707) - ($708))|0;
         $710 = $r;
         $711 = (($710) - ($709))|0;
         $r = $711;
         $712 = $r;
         $713 = $b;
         $714 = (($713) + ($712))|0;
         $b = $714;
         $715 = $iShift;
         $716 = $g;
         $717 = $716 >> $715;
         $g = $717;
         $718 = $iShift;
         $719 = $b;
         $720 = $719 >> $718;
         $b = $720;
         $721 = $iShift;
         $722 = $r;
         $723 = $722 >> $721;
         $r = $723;
         $724 = $iShift;
         $725 = $a;
         $726 = $725 >> $724;
         $a = $726;
         $727 = $1;
         $728 = (($727) + 32952|0);
         $729 = HEAP32[$728>>2]|0;
         $730 = $iColumn;
         $731 = $pOffsetX;
         $732 = (($731) + ($730<<2)|0);
         $733 = HEAP32[$732>>2]|0;
         $734 = (($729) + ($733)|0);
         $735 = $iY;
         $736 = (($734) + ($735)|0);
         $pDst7 = $736;
         $737 = $g;
         $738 = $b;
         $739 = $737 | $738;
         $740 = $r;
         $741 = $739 | $740;
         $742 = $a;
         $743 = $741 | $742;
         $744 = $743 & -256;
         $745 = ($744|0)!=(0);
         if ($745) {
          $746 = $r;
          $747 = ($746|0)<(0);
          if ($747) {
           $752 = 0;
          } else {
           $748 = $r;
           $749 = (255)<($748|0);
           if ($749) {
            $4076 = 255;
           } else {
            $750 = $r;
            $4076 = $750;
           }
           $752 = $4076;
          }
          $751 = $752&255;
          $753 = $iR;
          $754 = $pDst7;
          $755 = (($754) + ($753)|0);
          HEAP8[$755>>0] = $751;
          $756 = $g;
          $757 = ($756|0)<(0);
          if ($757) {
           $762 = 0;
          } else {
           $758 = $g;
           $759 = (255)<($758|0);
           if ($759) {
            $4077 = 255;
           } else {
            $760 = $g;
            $4077 = $760;
           }
           $762 = $4077;
          }
          $761 = $762&255;
          $763 = $pDst7;
          $764 = (($763) + 1|0);
          HEAP8[$764>>0] = $761;
          $765 = $b;
          $766 = ($765|0)<(0);
          if ($766) {
           $771 = 0;
          } else {
           $767 = $b;
           $768 = (255)<($767|0);
           if ($768) {
            $4078 = 255;
           } else {
            $769 = $b;
            $4078 = $769;
           }
           $771 = $4078;
          }
          $770 = $771&255;
          $772 = $iB;
          $773 = $pDst7;
          $774 = (($773) + ($772)|0);
          HEAP8[$774>>0] = $770;
          $775 = $a;
          $776 = ($775|0)<(0);
          if ($776) {
           $781 = 0;
          } else {
           $777 = $a;
           $778 = (255)<($777|0);
           if ($778) {
            $4079 = 255;
           } else {
            $779 = $a;
            $4079 = $779;
           }
           $781 = $4079;
          }
          $780 = $781&255;
          $782 = $pDst7;
          $783 = (($782) + 3|0);
          HEAP8[$783>>0] = $780;
         } else {
          $784 = $r;
          $785 = $784&255;
          $786 = $iR;
          $787 = $pDst7;
          $788 = (($787) + ($786)|0);
          HEAP8[$788>>0] = $785;
          $789 = $g;
          $790 = $789&255;
          $791 = $pDst7;
          $792 = (($791) + 1|0);
          HEAP8[$792>>0] = $790;
          $793 = $b;
          $794 = $793&255;
          $795 = $iB;
          $796 = $pDst7;
          $797 = (($796) + ($795)|0);
          HEAP8[$797>>0] = $794;
          $798 = $a;
          $799 = $798&255;
          $800 = $pDst7;
          $801 = (($800) + 3|0);
          HEAP8[$801>>0] = $799;
         }
         $802 = $iColumn;
         $803 = (($802) + 1)|0;
         $iColumn = $803;
        }
        $804 = $iRow;
        $805 = (($804) + 1)|0;
        $iRow = $805;
       }
      }
     } else {
      label = 149;
     }
    } else {
     label = 149;
    }
    if ((label|0) == 149) {
     $806 = $1;
     $807 = (($806) + 34136|0);
     $808 = (($807) + 20|0);
     $809 = HEAP32[$808>>2]|0;
     $810 = ($809|0)==(0);
     if ($810) {
      $811 = $iFirstRow;
      $iRow = $811;
      while(1) {
       $812 = $iRow;
       $813 = $cHeight;
       $814 = ($812>>>0)<($813>>>0);
       if (!($814)) {
        break;
       }
       $815 = $iFirstColumn;
       $iColumn = $815;
       $816 = $iRow;
       $817 = $pOffsetY;
       $818 = (($817) + ($816<<2)|0);
       $819 = HEAP32[$818>>2]|0;
       $iY = $819;
       while(1) {
        $820 = $iColumn;
        $821 = $cWidth;
        $822 = ($820>>>0)<($821>>>0);
        if (!($822)) {
         break;
        }
        $823 = $iColumn;
        $824 = $823 >>> 4;
        $825 = $824 << 8;
        $826 = $iColumn;
        $827 = $826 & 15;
        $828 = $iRow;
        $829 = (14240 + ($828<<4)|0);
        $830 = (($829) + ($827)|0);
        $831 = HEAP8[$830>>0]|0;
        $832 = $831&255;
        $833 = (($825) + ($832))|0;
        $iIdx = $833;
        $834 = $iIdx;
        $835 = $pY;
        $836 = (($835) + ($834<<2)|0);
        $837 = HEAP32[$836>>2]|0;
        $838 = $iBias;
        $839 = (($837) + ($838))|0;
        $g = $839;
        $840 = $iIdx;
        $841 = $pU;
        $842 = (($841) + ($840<<2)|0);
        $843 = HEAP32[$842>>2]|0;
        $844 = (0 - ($843))|0;
        $r = $844;
        $845 = $iIdx;
        $846 = $pV;
        $847 = (($846) + ($845<<2)|0);
        $848 = HEAP32[$847>>2]|0;
        $b = $848;
        $849 = $r;
        $850 = (($849) + 0)|0;
        $851 = $850 >> 1;
        $852 = $g;
        $853 = (($852) - ($851))|0;
        $g = $853;
        $854 = $b;
        $855 = (($854) + 1)|0;
        $856 = $855 >> 1;
        $857 = $g;
        $858 = (($856) - ($857))|0;
        $859 = $r;
        $860 = (($859) - ($858))|0;
        $r = $860;
        $861 = $r;
        $862 = $b;
        $863 = (($862) + ($861))|0;
        $b = $863;
        $864 = $1;
        $865 = (($864) + 32952|0);
        $866 = HEAP32[$865>>2]|0;
        $867 = $iColumn;
        $868 = $pOffsetX;
        $869 = (($868) + ($867<<2)|0);
        $870 = HEAP32[$869>>2]|0;
        $871 = (($866) + ($870)|0);
        $872 = $iY;
        $873 = (($871) + ($872)|0);
        $pDst7 = $873;
        $874 = $g;
        $875 = $b;
        $876 = $874 | $875;
        $877 = $r;
        $878 = $876 | $877;
        $879 = $878 & -256;
        $880 = ($879|0)!=(0);
        if ($880) {
         $881 = $r;
         $882 = ($881|0)<(0);
         if ($882) {
          $887 = 0;
         } else {
          $883 = $r;
          $884 = (255)<($883|0);
          if ($884) {
           $4080 = 255;
          } else {
           $885 = $r;
           $4080 = $885;
          }
          $887 = $4080;
         }
         $886 = $887&255;
         $888 = $iR;
         $889 = $pDst7;
         $890 = (($889) + ($888)|0);
         HEAP8[$890>>0] = $886;
         $891 = $g;
         $892 = ($891|0)<(0);
         if ($892) {
          $897 = 0;
         } else {
          $893 = $g;
          $894 = (255)<($893|0);
          if ($894) {
           $4081 = 255;
          } else {
           $895 = $g;
           $4081 = $895;
          }
          $897 = $4081;
         }
         $896 = $897&255;
         $898 = $pDst7;
         $899 = (($898) + 1|0);
         HEAP8[$899>>0] = $896;
         $900 = $b;
         $901 = ($900|0)<(0);
         if ($901) {
          $906 = 0;
         } else {
          $902 = $b;
          $903 = (255)<($902|0);
          if ($903) {
           $4082 = 255;
          } else {
           $904 = $b;
           $4082 = $904;
          }
          $906 = $4082;
         }
         $905 = $906&255;
         $907 = $iB;
         $908 = $pDst7;
         $909 = (($908) + ($907)|0);
         HEAP8[$909>>0] = $905;
        } else {
         $910 = $r;
         $911 = $910&255;
         $912 = $iR;
         $913 = $pDst7;
         $914 = (($913) + ($912)|0);
         HEAP8[$914>>0] = $911;
         $915 = $g;
         $916 = $915&255;
         $917 = $pDst7;
         $918 = (($917) + 1|0);
         HEAP8[$918>>0] = $916;
         $919 = $b;
         $920 = $919&255;
         $921 = $iB;
         $922 = $pDst7;
         $923 = (($922) + ($921)|0);
         HEAP8[$923>>0] = $920;
        }
        $924 = $iColumn;
        $925 = (($924) + 1)|0;
        $iColumn = $925;
       }
       $926 = $iRow;
       $927 = (($926) + 1)|0;
       $iRow = $927;
      }
     } else {
      $928 = $iFirstRow;
      $iRow = $928;
      while(1) {
       $929 = $iRow;
       $930 = $cHeight;
       $931 = ($929>>>0)<($930>>>0);
       if (!($931)) {
        break;
       }
       $932 = $iFirstColumn;
       $iColumn = $932;
       $933 = $iRow;
       $934 = $pOffsetY;
       $935 = (($934) + ($933<<2)|0);
       $936 = HEAP32[$935>>2]|0;
       $iY = $936;
       while(1) {
        $937 = $iColumn;
        $938 = $cWidth;
        $939 = ($937>>>0)<($938>>>0);
        if (!($939)) {
         break;
        }
        $940 = $iColumn;
        $941 = $940 >>> 4;
        $942 = $941 << 8;
        $943 = $iColumn;
        $944 = $943 & 15;
        $945 = $iRow;
        $946 = (14240 + ($945<<4)|0);
        $947 = (($946) + ($944)|0);
        $948 = HEAP8[$947>>0]|0;
        $949 = $948&255;
        $950 = (($942) + ($949))|0;
        $iIdx = $950;
        $951 = $iIdx;
        $952 = $pY;
        $953 = (($952) + ($951<<2)|0);
        $954 = HEAP32[$953>>2]|0;
        $955 = $iBias;
        $956 = (($954) + ($955))|0;
        $g = $956;
        $957 = $iIdx;
        $958 = $pU;
        $959 = (($958) + ($957<<2)|0);
        $960 = HEAP32[$959>>2]|0;
        $961 = (0 - ($960))|0;
        $r = $961;
        $962 = $iIdx;
        $963 = $pV;
        $964 = (($963) + ($962<<2)|0);
        $965 = HEAP32[$964>>2]|0;
        $b = $965;
        $966 = $r;
        $967 = (($966) + 0)|0;
        $968 = $967 >> 1;
        $969 = $g;
        $970 = (($969) - ($968))|0;
        $g = $970;
        $971 = $b;
        $972 = (($971) + 1)|0;
        $973 = $972 >> 1;
        $974 = $g;
        $975 = (($973) - ($974))|0;
        $976 = $r;
        $977 = (($976) - ($975))|0;
        $r = $977;
        $978 = $r;
        $979 = $b;
        $980 = (($979) + ($978))|0;
        $b = $980;
        $981 = $iShift;
        $982 = $g;
        $983 = $982 >> $981;
        $g = $983;
        $984 = $iShift;
        $985 = $b;
        $986 = $985 >> $984;
        $b = $986;
        $987 = $iShift;
        $988 = $r;
        $989 = $988 >> $987;
        $r = $989;
        $990 = $1;
        $991 = (($990) + 32952|0);
        $992 = HEAP32[$991>>2]|0;
        $993 = $iColumn;
        $994 = $pOffsetX;
        $995 = (($994) + ($993<<2)|0);
        $996 = HEAP32[$995>>2]|0;
        $997 = (($992) + ($996)|0);
        $998 = $iY;
        $999 = (($997) + ($998)|0);
        $pDst7 = $999;
        $1000 = $g;
        $1001 = $b;
        $1002 = $1000 | $1001;
        $1003 = $r;
        $1004 = $1002 | $1003;
        $1005 = $1004 & -256;
        $1006 = ($1005|0)!=(0);
        if ($1006) {
         $1007 = $r;
         $1008 = ($1007|0)<(0);
         if ($1008) {
          $1013 = 0;
         } else {
          $1009 = $r;
          $1010 = (255)<($1009|0);
          if ($1010) {
           $4083 = 255;
          } else {
           $1011 = $r;
           $4083 = $1011;
          }
          $1013 = $4083;
         }
         $1012 = $1013&255;
         $1014 = $iR;
         $1015 = $pDst7;
         $1016 = (($1015) + ($1014)|0);
         HEAP8[$1016>>0] = $1012;
         $1017 = $g;
         $1018 = ($1017|0)<(0);
         if ($1018) {
          $1023 = 0;
         } else {
          $1019 = $g;
          $1020 = (255)<($1019|0);
          if ($1020) {
           $4084 = 255;
          } else {
           $1021 = $g;
           $4084 = $1021;
          }
          $1023 = $4084;
         }
         $1022 = $1023&255;
         $1024 = $pDst7;
         $1025 = (($1024) + 1|0);
         HEAP8[$1025>>0] = $1022;
         $1026 = $b;
         $1027 = ($1026|0)<(0);
         if ($1027) {
          $1032 = 0;
         } else {
          $1028 = $b;
          $1029 = (255)<($1028|0);
          if ($1029) {
           $4085 = 255;
          } else {
           $1030 = $b;
           $4085 = $1030;
          }
          $1032 = $4085;
         }
         $1031 = $1032&255;
         $1033 = $iB;
         $1034 = $pDst7;
         $1035 = (($1034) + ($1033)|0);
         HEAP8[$1035>>0] = $1031;
        } else {
         $1036 = $r;
         $1037 = $1036&255;
         $1038 = $iR;
         $1039 = $pDst7;
         $1040 = (($1039) + ($1038)|0);
         HEAP8[$1040>>0] = $1037;
         $1041 = $g;
         $1042 = $1041&255;
         $1043 = $pDst7;
         $1044 = (($1043) + 1|0);
         HEAP8[$1044>>0] = $1042;
         $1045 = $b;
         $1046 = $1045&255;
         $1047 = $iB;
         $1048 = $pDst7;
         $1049 = (($1048) + ($1047)|0);
         HEAP8[$1049>>0] = $1046;
        }
        $1050 = $iColumn;
        $1051 = (($1050) + 1)|0;
        $iColumn = $1051;
       }
       $1052 = $iRow;
       $1053 = (($1052) + 1)|0;
       $iRow = $1053;
      }
     }
    }
    break;
   }
   case 4:  {
    $1466 = $1;
    $1467 = (($1466) + 34564|0);
    $1468 = (($1467) + 12|0);
    $1469 = HEAP32[$1468>>2]|0;
    $pK = $1469;
    $1470 = $iFirstRow;
    $iRow = $1470;
    while(1) {
     $1471 = $iRow;
     $1472 = $cHeight;
     $1473 = ($1471>>>0)<($1472>>>0);
     if (!($1473)) {
      break;
     }
     $1474 = $iFirstColumn;
     $iColumn = $1474;
     $1475 = $iRow;
     $1476 = $pOffsetY;
     $1477 = (($1476) + ($1475<<2)|0);
     $1478 = HEAP32[$1477>>2]|0;
     $iY = $1478;
     while(1) {
      $1479 = $iColumn;
      $1480 = $cWidth;
      $1481 = ($1479>>>0)<($1480>>>0);
      if (!($1481)) {
       break;
      }
      $1482 = $iColumn;
      $1483 = $1482 >>> 4;
      $1484 = $1483 << 8;
      $1485 = $iColumn;
      $1486 = $1485 & 15;
      $1487 = $iRow;
      $1488 = (14240 + ($1487<<4)|0);
      $1489 = (($1488) + ($1486)|0);
      $1490 = HEAP8[$1489>>0]|0;
      $1491 = $1490&255;
      $1492 = (($1484) + ($1491))|0;
      $iIdx = $1492;
      $1493 = $iIdx;
      $1494 = $pY;
      $1495 = (($1494) + ($1493<<2)|0);
      $1496 = HEAP32[$1495>>2]|0;
      $1497 = (0 - ($1496))|0;
      $1498 = $iBias1;
      $1499 = (($1497) + ($1498))|0;
      $m = $1499;
      $1500 = $iIdx;
      $1501 = $pU;
      $1502 = (($1501) + ($1500<<2)|0);
      $1503 = HEAP32[$1502>>2]|0;
      $c = $1503;
      $1504 = $iIdx;
      $1505 = $pV;
      $1506 = (($1505) + ($1504<<2)|0);
      $1507 = HEAP32[$1506>>2]|0;
      $1508 = (0 - ($1507))|0;
      $y = $1508;
      $1509 = $iIdx;
      $1510 = $pK;
      $1511 = (($1510) + ($1509<<2)|0);
      $1512 = HEAP32[$1511>>2]|0;
      $1513 = $iBias2;
      $1514 = (($1512) + ($1513))|0;
      $k = $1514;
      $1515 = $m;
      $1516 = (($1515) + 1)|0;
      $1517 = $1516 >> 1;
      $1518 = $k;
      $1519 = (($1518) - ($1517))|0;
      $k = $1519;
      $1520 = $c;
      $1521 = $1520 >> 1;
      $1522 = $k;
      $1523 = (($1521) - ($1522))|0;
      $1524 = $m;
      $1525 = (($1524) - ($1523))|0;
      $m = $1525;
      $1526 = $y;
      $1527 = (($1526) + 1)|0;
      $1528 = $1527 >> 1;
      $1529 = $m;
      $1530 = (($1528) - ($1529))|0;
      $1531 = $c;
      $1532 = (($1531) - ($1530))|0;
      $c = $1532;
      $1533 = $c;
      $1534 = $y;
      $1535 = (($1534) + ($1533))|0;
      $y = $1535;
      $1536 = $iShift;
      $1537 = $c;
      $1538 = $1537 >> $1536;
      $c = $1538;
      $1539 = $iShift;
      $1540 = $m;
      $1541 = $1540 >> $1539;
      $m = $1541;
      $1542 = $iShift;
      $1543 = $y;
      $1544 = $1543 >> $1542;
      $y = $1544;
      $1545 = $iShift;
      $1546 = $k;
      $1547 = $1546 >> $1545;
      $k = $1547;
      $1548 = $1;
      $1549 = (($1548) + 32952|0);
      $1550 = HEAP32[$1549>>2]|0;
      $1551 = $iColumn;
      $1552 = $pOffsetX;
      $1553 = (($1552) + ($1551<<2)|0);
      $1554 = HEAP32[$1553>>2]|0;
      $1555 = (($1550) + ($1554)|0);
      $1556 = $iY;
      $1557 = (($1555) + ($1556)|0);
      $pDst7 = $1557;
      $1558 = $c;
      $1559 = $m;
      $1560 = $1558 | $1559;
      $1561 = $y;
      $1562 = $1560 | $1561;
      $1563 = $k;
      $1564 = $1562 | $1563;
      $1565 = $1564 & -256;
      $1566 = ($1565|0)!=(0);
      if ($1566) {
       $1567 = $c;
       $1568 = ($1567|0)<(0);
       if ($1568) {
        $1573 = 0;
       } else {
        $1569 = $c;
        $1570 = (255)<($1569|0);
        if ($1570) {
         $4096 = 255;
        } else {
         $1571 = $c;
         $4096 = $1571;
        }
        $1573 = $4096;
       }
       $1572 = $1573&255;
       $1574 = $pDst7;
       HEAP8[$1574>>0] = $1572;
       $1575 = $m;
       $1576 = ($1575|0)<(0);
       if ($1576) {
        $1581 = 0;
       } else {
        $1577 = $m;
        $1578 = (255)<($1577|0);
        if ($1578) {
         $4097 = 255;
        } else {
         $1579 = $m;
         $4097 = $1579;
        }
        $1581 = $4097;
       }
       $1580 = $1581&255;
       $1582 = $pDst7;
       $1583 = (($1582) + 1|0);
       HEAP8[$1583>>0] = $1580;
       $1584 = $y;
       $1585 = ($1584|0)<(0);
       if ($1585) {
        $1590 = 0;
       } else {
        $1586 = $y;
        $1587 = (255)<($1586|0);
        if ($1587) {
         $4098 = 255;
        } else {
         $1588 = $y;
         $4098 = $1588;
        }
        $1590 = $4098;
       }
       $1589 = $1590&255;
       $1591 = $pDst7;
       $1592 = (($1591) + 2|0);
       HEAP8[$1592>>0] = $1589;
       $1593 = $k;
       $1594 = ($1593|0)<(0);
       if ($1594) {
        $1599 = 0;
       } else {
        $1595 = $k;
        $1596 = (255)<($1595|0);
        if ($1596) {
         $4099 = 255;
        } else {
         $1597 = $k;
         $4099 = $1597;
        }
        $1599 = $4099;
       }
       $1598 = $1599&255;
       $1600 = $pDst7;
       $1601 = (($1600) + 3|0);
       HEAP8[$1601>>0] = $1598;
      } else {
       $1602 = $c;
       $1603 = $1602&255;
       $1604 = $pDst7;
       HEAP8[$1604>>0] = $1603;
       $1605 = $m;
       $1606 = $1605&255;
       $1607 = $pDst7;
       $1608 = (($1607) + 1|0);
       HEAP8[$1608>>0] = $1606;
       $1609 = $y;
       $1610 = $1609&255;
       $1611 = $pDst7;
       $1612 = (($1611) + 2|0);
       HEAP8[$1612>>0] = $1610;
       $1613 = $k;
       $1614 = $1613&255;
       $1615 = $pDst7;
       $1616 = (($1615) + 3|0);
       HEAP8[$1616>>0] = $1614;
      }
      $1617 = $iColumn;
      $1618 = (($1617) + 1)|0;
      $iColumn = $1618;
     }
     $1619 = $iRow;
     $1620 = (($1619) + 1)|0;
     $iRow = $1620;
    }
    break;
   }
   case 8:  {
    $1621 = $iFirstRow;
    $iRow = $1621;
    while(1) {
     $1622 = $iRow;
     $1623 = $cHeight;
     $1624 = ($1622>>>0)<($1623>>>0);
     if (!($1624)) {
      break;
     }
     $1625 = $iFirstColumn;
     $iColumn = $1625;
     $1626 = $iRow;
     $1627 = $pOffsetY;
     $1628 = (($1627) + ($1626<<2)|0);
     $1629 = HEAP32[$1628>>2]|0;
     $iY = $1629;
     while(1) {
      $1630 = $iColumn;
      $1631 = $cWidth;
      $1632 = ($1630>>>0)<($1631>>>0);
      if (!($1632)) {
       break;
      }
      $1633 = $iColumn;
      $1634 = $1633 >>> 4;
      $1635 = $1634 << 8;
      $1636 = $iColumn;
      $1637 = $1636 & 15;
      $1638 = $iRow;
      $1639 = (14240 + ($1638<<4)|0);
      $1640 = (($1639) + ($1637)|0);
      $1641 = HEAP8[$1640>>0]|0;
      $1642 = $1641&255;
      $1643 = (($1635) + ($1642))|0;
      $iIdx = $1643;
      $1644 = $iIdx;
      $1645 = $pY;
      $1646 = (($1645) + ($1644<<2)|0);
      $1647 = HEAP32[$1646>>2]|0;
      $1648 = $iBias2;
      $1649 = (($1647) + ($1648))|0;
      $g19 = $1649;
      $1650 = $iIdx;
      $1651 = $pU;
      $1652 = (($1651) + ($1650<<2)|0);
      $1653 = HEAP32[$1652>>2]|0;
      $1654 = (0 - ($1653))|0;
      $r18 = $1654;
      $1655 = $iIdx;
      $1656 = $pV;
      $1657 = (($1656) + ($1655<<2)|0);
      $1658 = HEAP32[$1657>>2]|0;
      $b20 = $1658;
      $1659 = $r18;
      $1660 = (($1659) + 0)|0;
      $1661 = $1660 >> 1;
      $1662 = $g19;
      $1663 = (($1662) - ($1661))|0;
      $g19 = $1663;
      $1664 = $b20;
      $1665 = (($1664) + 1)|0;
      $1666 = $1665 >> 1;
      $1667 = $g19;
      $1668 = (($1666) - ($1667))|0;
      $1669 = $r18;
      $1670 = (($1669) - ($1668))|0;
      $r18 = $1670;
      $1671 = $r18;
      $1672 = $b20;
      $1673 = (($1672) + ($1671))|0;
      $b20 = $1673;
      $1674 = $1;
      $1675 = (($1674) + 32952|0);
      $1676 = HEAP32[$1675>>2]|0;
      $1677 = $iColumn;
      $1678 = $pOffsetX;
      $1679 = (($1678) + ($1677<<2)|0);
      $1680 = HEAP32[$1679>>2]|0;
      $1681 = (($1676) + ($1680)|0);
      $1682 = $iY;
      $1683 = (($1681) + ($1682)|0);
      $pDst7 = $1683;
      $1684 = $r18;
      $1685 = $iShift;
      $1686 = $1684 >> $1685;
      $1687 = $g19;
      $1688 = $iShift;
      $1689 = $1687 >> $1688;
      $1690 = $b20;
      $1691 = $iShift;
      $1692 = $1690 >> $1691;
      $1693 = $pDst7;
      $1694 = $pDst7;
      $1695 = (($1694) + 1|0);
      $1696 = $pDst7;
      $1697 = (($1696) + 2|0);
      $1698 = $pDst7;
      $1699 = (($1698) + 3|0);
      _inverseConvertRGBE($1686,$1689,$1692,$1693,$1695,$1697,$1699);
      $1700 = $iColumn;
      $1701 = (($1700) + 1)|0;
      $iColumn = $1701;
     }
     $1702 = $iRow;
     $1703 = (($1702) + 1)|0;
     $iRow = $1703;
    }
    break;
   }
   case 6: case 3: case 0:  {
    $1054 = $1;
    $1055 = $iFirstRow;
    $1056 = $iFirstColumn;
    $1057 = $cWidth;
    $1058 = $cHeight;
    $1059 = $iShift;
    $1060 = $iBias;
    _outputNChannel($1054,$1055,$1056,$1057,$1058,$1059,$1060);
    break;
   }
   case 2:  {
    $1061 = $iFirstRow;
    $iRow = $1061;
    while(1) {
     $1062 = $iRow;
     $1063 = $cHeight;
     $1064 = ($1062>>>0)<($1063>>>0);
     if (!($1064)) {
      break;
     }
     $1065 = $iFirstColumn;
     $iColumn = $1065;
     $1066 = $iRow;
     $1067 = $pOffsetY;
     $1068 = (($1067) + ($1066<<2)|0);
     $1069 = HEAP32[$1068>>2]|0;
     $iY = $1069;
     while(1) {
      $1070 = $iColumn;
      $1071 = $cWidth;
      $1072 = ($1070>>>0)<($1071>>>0);
      if (!($1072)) {
       break;
      }
      $1073 = $iColumn;
      $1074 = $1073 >>> 4;
      $1075 = $1074 << 7;
      $1076 = $iColumn;
      $1077 = $1076 >>> 1;
      $1078 = $1077 & 7;
      $1079 = $iRow;
      $1080 = (14240 + ($1079<<4)|0);
      $1081 = (($1080) + ($1078)|0);
      $1082 = HEAP8[$1081>>0]|0;
      $1083 = $1082&255;
      $1084 = (($1075) + ($1083))|0;
      $iIdx = $1084;
      $1085 = $iIdx;
      $1086 = $pU;
      $1087 = (($1086) + ($1085<<2)|0);
      $1088 = HEAP32[$1087>>2]|0;
      $1089 = $iBias;
      $1090 = (($1088) + ($1089))|0;
      $1091 = $iShift;
      $1092 = $1090 >> $1091;
      $u10 = $1092;
      $1093 = $iIdx;
      $1094 = $pV;
      $1095 = (($1094) + ($1093<<2)|0);
      $1096 = HEAP32[$1095>>2]|0;
      $1097 = $iBias;
      $1098 = (($1096) + ($1097))|0;
      $1099 = $iShift;
      $1100 = $1098 >> $1099;
      $v11 = $1100;
      $1101 = $iColumn;
      $1102 = $1101 >>> 4;
      $1103 = $1102 << 8;
      $1104 = $iColumn;
      $1105 = $1104 & 15;
      $1106 = $iRow;
      $1107 = (14240 + ($1106<<4)|0);
      $1108 = (($1107) + ($1105)|0);
      $1109 = HEAP8[$1108>>0]|0;
      $1110 = $1109&255;
      $1111 = (($1103) + ($1110))|0;
      $1112 = $pY;
      $1113 = (($1112) + ($1111<<2)|0);
      $1114 = HEAP32[$1113>>2]|0;
      $1115 = $iBias;
      $1116 = (($1114) + ($1115))|0;
      $1117 = $iShift;
      $1118 = $1116 >> $1117;
      $y08 = $1118;
      $1119 = $iColumn;
      $1120 = (($1119) + 1)|0;
      $1121 = $1120 >>> 4;
      $1122 = $1121 << 8;
      $1123 = $iColumn;
      $1124 = (($1123) + 1)|0;
      $1125 = $1124 & 15;
      $1126 = $iRow;
      $1127 = (14240 + ($1126<<4)|0);
      $1128 = (($1127) + ($1125)|0);
      $1129 = HEAP8[$1128>>0]|0;
      $1130 = $1129&255;
      $1131 = (($1122) + ($1130))|0;
      $1132 = $pY;
      $1133 = (($1132) + ($1131<<2)|0);
      $1134 = HEAP32[$1133>>2]|0;
      $1135 = $iBias;
      $1136 = (($1134) + ($1135))|0;
      $1137 = $iShift;
      $1138 = $1136 >> $1137;
      $y19 = $1138;
      $1139 = $1;
      $1140 = (($1139) + 32952|0);
      $1141 = HEAP32[$1140>>2]|0;
      $1142 = $iColumn;
      $1143 = $1142 >>> 1;
      $1144 = $pOffsetX;
      $1145 = (($1144) + ($1143<<2)|0);
      $1146 = HEAP32[$1145>>2]|0;
      $1147 = (($1141) + ($1146)|0);
      $1148 = $iY;
      $1149 = (($1147) + ($1148)|0);
      $pDst7 = $1149;
      $1150 = $y08;
      $1151 = $y19;
      $1152 = $1150 | $1151;
      $1153 = $u10;
      $1154 = $1152 | $1153;
      $1155 = $v11;
      $1156 = $1154 | $1155;
      $1157 = $1156 & -256;
      $1158 = ($1157|0)!=(0);
      if ($1158) {
       $1159 = $u10;
       $1160 = ($1159|0)<(0);
       if ($1160) {
        $1165 = 0;
       } else {
        $1161 = $u10;
        $1162 = (255)<($1161|0);
        if ($1162) {
         $4086 = 255;
        } else {
         $1163 = $u10;
         $4086 = $1163;
        }
        $1165 = $4086;
       }
       $1164 = $1165&255;
       $1166 = $pDst7;
       HEAP8[$1166>>0] = $1164;
       $1167 = $y08;
       $1168 = ($1167|0)<(0);
       if ($1168) {
        $1173 = 0;
       } else {
        $1169 = $y08;
        $1170 = (255)<($1169|0);
        if ($1170) {
         $4087 = 255;
        } else {
         $1171 = $y08;
         $4087 = $1171;
        }
        $1173 = $4087;
       }
       $1172 = $1173&255;
       $1174 = $pDst7;
       $1175 = (($1174) + 1|0);
       HEAP8[$1175>>0] = $1172;
       $1176 = $v11;
       $1177 = ($1176|0)<(0);
       if ($1177) {
        $1182 = 0;
       } else {
        $1178 = $v11;
        $1179 = (255)<($1178|0);
        if ($1179) {
         $4088 = 255;
        } else {
         $1180 = $v11;
         $4088 = $1180;
        }
        $1182 = $4088;
       }
       $1181 = $1182&255;
       $1183 = $pDst7;
       $1184 = (($1183) + 2|0);
       HEAP8[$1184>>0] = $1181;
       $1185 = $y19;
       $1186 = ($1185|0)<(0);
       if ($1186) {
        $1191 = 0;
       } else {
        $1187 = $y19;
        $1188 = (255)<($1187|0);
        if ($1188) {
         $4089 = 255;
        } else {
         $1189 = $y19;
         $4089 = $1189;
        }
        $1191 = $4089;
       }
       $1190 = $1191&255;
       $1192 = $pDst7;
       $1193 = (($1192) + 3|0);
       HEAP8[$1193>>0] = $1190;
      } else {
       $1194 = $u10;
       $1195 = $1194&255;
       $1196 = $pDst7;
       HEAP8[$1196>>0] = $1195;
       $1197 = $y08;
       $1198 = $1197&255;
       $1199 = $pDst7;
       $1200 = (($1199) + 1|0);
       HEAP8[$1200>>0] = $1198;
       $1201 = $v11;
       $1202 = $1201&255;
       $1203 = $pDst7;
       $1204 = (($1203) + 2|0);
       HEAP8[$1204>>0] = $1202;
       $1205 = $y19;
       $1206 = $1205&255;
       $1207 = $pDst7;
       $1208 = (($1207) + 3|0);
       HEAP8[$1208>>0] = $1206;
      }
      $1209 = $iColumn;
      $1210 = (($1209) + 2)|0;
      $iColumn = $1210;
     }
     $1211 = $iRow;
     $1212 = (($1211) + 1)|0;
     $iRow = $1212;
    }
    break;
   }
   case 1:  {
    $1213 = $1;
    $1214 = (($1213) + 4|0);
    $1215 = (($1214) + 64|0);
    $1216 = HEAP32[$1215>>2]|0;
    $oO = $1216;
    $1217 = $oO;
    $1218 = (8592 + ($1217<<4)|0);
    $1219 = HEAP32[$1218>>2]|0;
    $i0 = $1219;
    $1220 = $oO;
    $1221 = (8592 + ($1220<<4)|0);
    $1222 = (($1221) + 4|0);
    $1223 = HEAP32[$1222>>2]|0;
    $i1 = $1223;
    $1224 = $oO;
    $1225 = (8592 + ($1224<<4)|0);
    $1226 = (($1225) + 8|0);
    $1227 = HEAP32[$1226>>2]|0;
    $i2 = $1227;
    $1228 = $oO;
    $1229 = (8592 + ($1228<<4)|0);
    $1230 = (($1229) + 12|0);
    $1231 = HEAP32[$1230>>2]|0;
    $i3 = $1231;
    $1232 = $iFirstRow;
    $iRow = $1232;
    while(1) {
     $1233 = $iRow;
     $1234 = $cHeight;
     $1235 = ($1233>>>0)<($1234>>>0);
     if (!($1235)) {
      break;
     }
     $1236 = $iFirstColumn;
     $iColumn = $1236;
     $1237 = $iRow;
     $1238 = $1237 >>> 1;
     $1239 = $pOffsetY;
     $1240 = (($1239) + ($1238<<2)|0);
     $1241 = HEAP32[$1240>>2]|0;
     $iY = $1241;
     while(1) {
      $1242 = $iColumn;
      $1243 = $cWidth;
      $1244 = ($1242>>>0)<($1243>>>0);
      if (!($1244)) {
       break;
      }
      $1245 = $iColumn;
      $1246 = $1245 >>> 4;
      $1247 = $1246 << 6;
      $1248 = $iColumn;
      $1249 = $1248 >>> 1;
      $1250 = $1249 & 7;
      $1251 = $iRow;
      $1252 = $1251 >>> 1;
      $1253 = (14496 + ($1252<<3)|0);
      $1254 = (($1253) + ($1250)|0);
      $1255 = HEAP8[$1254>>0]|0;
      $1256 = $1255&255;
      $1257 = (($1247) + ($1256))|0;
      $iIdx = $1257;
      $1258 = $iIdx;
      $1259 = $pU;
      $1260 = (($1259) + ($1258<<2)|0);
      $1261 = HEAP32[$1260>>2]|0;
      $1262 = $iBias;
      $1263 = (($1261) + ($1262))|0;
      $1264 = $iShift;
      $1265 = $1263 >> $1264;
      $u16 = $1265;
      $1266 = $iIdx;
      $1267 = $pV;
      $1268 = (($1267) + ($1266<<2)|0);
      $1269 = HEAP32[$1268>>2]|0;
      $1270 = $iBias;
      $1271 = (($1269) + ($1270))|0;
      $1272 = $iShift;
      $1273 = $1271 >> $1272;
      $v17 = $1273;
      $1274 = $iColumn;
      $1275 = $1274 >>> 4;
      $1276 = $1275 << 8;
      $1277 = $iColumn;
      $1278 = $1277 & 15;
      $1279 = $iRow;
      $1280 = (14240 + ($1279<<4)|0);
      $1281 = (($1280) + ($1278)|0);
      $1282 = HEAP8[$1281>>0]|0;
      $1283 = $1282&255;
      $1284 = (($1276) + ($1283))|0;
      $1285 = $pY;
      $1286 = (($1285) + ($1284<<2)|0);
      $1287 = HEAP32[$1286>>2]|0;
      $1288 = $iBias;
      $1289 = (($1287) + ($1288))|0;
      $1290 = $iShift;
      $1291 = $1289 >> $1290;
      $y012 = $1291;
      $1292 = $iColumn;
      $1293 = (($1292) + 1)|0;
      $1294 = $1293 >>> 4;
      $1295 = $1294 << 8;
      $1296 = $iColumn;
      $1297 = (($1296) + 1)|0;
      $1298 = $1297 & 15;
      $1299 = $iRow;
      $1300 = (14240 + ($1299<<4)|0);
      $1301 = (($1300) + ($1298)|0);
      $1302 = HEAP8[$1301>>0]|0;
      $1303 = $1302&255;
      $1304 = (($1295) + ($1303))|0;
      $1305 = $pY;
      $1306 = (($1305) + ($1304<<2)|0);
      $1307 = HEAP32[$1306>>2]|0;
      $1308 = $iBias;
      $1309 = (($1307) + ($1308))|0;
      $1310 = $iShift;
      $1311 = $1309 >> $1310;
      $y113 = $1311;
      $1312 = $iColumn;
      $1313 = $1312 >>> 4;
      $1314 = $1313 << 8;
      $1315 = $iColumn;
      $1316 = $1315 & 15;
      $1317 = $iRow;
      $1318 = (($1317) + 1)|0;
      $1319 = (14240 + ($1318<<4)|0);
      $1320 = (($1319) + ($1316)|0);
      $1321 = HEAP8[$1320>>0]|0;
      $1322 = $1321&255;
      $1323 = (($1314) + ($1322))|0;
      $1324 = $pY;
      $1325 = (($1324) + ($1323<<2)|0);
      $1326 = HEAP32[$1325>>2]|0;
      $1327 = $iBias;
      $1328 = (($1326) + ($1327))|0;
      $1329 = $iShift;
      $1330 = $1328 >> $1329;
      $y214 = $1330;
      $1331 = $iColumn;
      $1332 = (($1331) + 1)|0;
      $1333 = $1332 >>> 4;
      $1334 = $1333 << 8;
      $1335 = $iColumn;
      $1336 = (($1335) + 1)|0;
      $1337 = $1336 & 15;
      $1338 = $iRow;
      $1339 = (($1338) + 1)|0;
      $1340 = (14240 + ($1339<<4)|0);
      $1341 = (($1340) + ($1337)|0);
      $1342 = HEAP8[$1341>>0]|0;
      $1343 = $1342&255;
      $1344 = (($1334) + ($1343))|0;
      $1345 = $pY;
      $1346 = (($1345) + ($1344<<2)|0);
      $1347 = HEAP32[$1346>>2]|0;
      $1348 = $iBias;
      $1349 = (($1347) + ($1348))|0;
      $1350 = $iShift;
      $1351 = $1349 >> $1350;
      $y315 = $1351;
      $1352 = $1;
      $1353 = (($1352) + 32952|0);
      $1354 = HEAP32[$1353>>2]|0;
      $1355 = $iColumn;
      $1356 = $1355 >>> 1;
      $1357 = $pOffsetX;
      $1358 = (($1357) + ($1356<<2)|0);
      $1359 = HEAP32[$1358>>2]|0;
      $1360 = (($1354) + ($1359)|0);
      $1361 = $iY;
      $1362 = (($1360) + ($1361)|0);
      $pDst7 = $1362;
      $1363 = $y012;
      $1364 = $y113;
      $1365 = $1363 | $1364;
      $1366 = $y214;
      $1367 = $1365 | $1366;
      $1368 = $y315;
      $1369 = $1367 | $1368;
      $1370 = $u16;
      $1371 = $1369 | $1370;
      $1372 = $v17;
      $1373 = $1371 | $1372;
      $1374 = $1373 & -256;
      $1375 = ($1374|0)!=(0);
      if ($1375) {
       $1376 = $y012;
       $1377 = ($1376|0)<(0);
       if ($1377) {
        $1382 = 0;
       } else {
        $1378 = $y012;
        $1379 = (255)<($1378|0);
        if ($1379) {
         $4090 = 255;
        } else {
         $1380 = $y012;
         $4090 = $1380;
        }
        $1382 = $4090;
       }
       $1381 = $1382&255;
       $1383 = $i0;
       $1384 = $pDst7;
       $1385 = (($1384) + ($1383)|0);
       HEAP8[$1385>>0] = $1381;
       $1386 = $y113;
       $1387 = ($1386|0)<(0);
       if ($1387) {
        $1392 = 0;
       } else {
        $1388 = $y113;
        $1389 = (255)<($1388|0);
        if ($1389) {
         $4091 = 255;
        } else {
         $1390 = $y113;
         $4091 = $1390;
        }
        $1392 = $4091;
       }
       $1391 = $1392&255;
       $1393 = $i1;
       $1394 = $pDst7;
       $1395 = (($1394) + ($1393)|0);
       HEAP8[$1395>>0] = $1391;
       $1396 = $y214;
       $1397 = ($1396|0)<(0);
       if ($1397) {
        $1402 = 0;
       } else {
        $1398 = $y214;
        $1399 = (255)<($1398|0);
        if ($1399) {
         $4092 = 255;
        } else {
         $1400 = $y214;
         $4092 = $1400;
        }
        $1402 = $4092;
       }
       $1401 = $1402&255;
       $1403 = $i2;
       $1404 = $pDst7;
       $1405 = (($1404) + ($1403)|0);
       HEAP8[$1405>>0] = $1401;
       $1406 = $y315;
       $1407 = ($1406|0)<(0);
       if ($1407) {
        $1412 = 0;
       } else {
        $1408 = $y315;
        $1409 = (255)<($1408|0);
        if ($1409) {
         $4093 = 255;
        } else {
         $1410 = $y315;
         $4093 = $1410;
        }
        $1412 = $4093;
       }
       $1411 = $1412&255;
       $1413 = $i3;
       $1414 = $pDst7;
       $1415 = (($1414) + ($1413)|0);
       HEAP8[$1415>>0] = $1411;
       $1416 = $u16;
       $1417 = ($1416|0)<(0);
       if ($1417) {
        $1422 = 0;
       } else {
        $1418 = $u16;
        $1419 = (255)<($1418|0);
        if ($1419) {
         $4094 = 255;
        } else {
         $1420 = $u16;
         $4094 = $1420;
        }
        $1422 = $4094;
       }
       $1421 = $1422&255;
       $1423 = $pDst7;
       $1424 = (($1423) + 4|0);
       HEAP8[$1424>>0] = $1421;
       $1425 = $v17;
       $1426 = ($1425|0)<(0);
       if ($1426) {
        $1431 = 0;
       } else {
        $1427 = $v17;
        $1428 = (255)<($1427|0);
        if ($1428) {
         $4095 = 255;
        } else {
         $1429 = $v17;
         $4095 = $1429;
        }
        $1431 = $4095;
       }
       $1430 = $1431&255;
       $1432 = $pDst7;
       $1433 = (($1432) + 5|0);
       HEAP8[$1433>>0] = $1430;
      } else {
       $1434 = $y012;
       $1435 = $1434&255;
       $1436 = $i0;
       $1437 = $pDst7;
       $1438 = (($1437) + ($1436)|0);
       HEAP8[$1438>>0] = $1435;
       $1439 = $y113;
       $1440 = $1439&255;
       $1441 = $i1;
       $1442 = $pDst7;
       $1443 = (($1442) + ($1441)|0);
       HEAP8[$1443>>0] = $1440;
       $1444 = $y214;
       $1445 = $1444&255;
       $1446 = $i2;
       $1447 = $pDst7;
       $1448 = (($1447) + ($1446)|0);
       HEAP8[$1448>>0] = $1445;
       $1449 = $y315;
       $1450 = $1449&255;
       $1451 = $i3;
       $1452 = $pDst7;
       $1453 = (($1452) + ($1451)|0);
       HEAP8[$1453>>0] = $1450;
       $1454 = $u16;
       $1455 = $1454&255;
       $1456 = $pDst7;
       $1457 = (($1456) + 4|0);
       HEAP8[$1457>>0] = $1455;
       $1458 = $v17;
       $1459 = $1458&255;
       $1460 = $pDst7;
       $1461 = (($1460) + 5|0);
       HEAP8[$1461>>0] = $1459;
      }
      $1462 = $iColumn;
      $1463 = (($1462) + 2)|0;
      $iColumn = $1463;
     }
     $1464 = $iRow;
     $1465 = (($1464) + 2)|0;
     $iRow = $1465;
    }
    break;
   }
   default: {
    ___assert_fail((8496|0),(8456|0),1277,(8576|0));
    // unreachable;
   }
   }
  } else {
   $1704 = $bd;
   $1705 = ($1704|0)==(2);
   if ($1705) {
    $1706 = $nLen;
    $1707 = $1706&255;
    $1708 = 32768 >> $1707;
    $1709 = $iShift;
    $1710 = $1708 << $1709;
    $1711 = $iShift;
    $1712 = ($1711|0)==(0);
    if ($1712) {
     $1717 = 0;
    } else {
     $1713 = $iShift;
     $1714 = (($1713) - 1)|0;
     $1715 = 1 << $1714;
     $1717 = $1715;
    }
    $1716 = (($1710) + ($1717))|0;
    $iBias21 = $1716;
    $1718 = $cfExt;
    switch ($1718|0) {
    case 7:  {
     $1719 = $1;
     $1720 = (($1719) + 34136|0);
     $1721 = (($1720) + 20|0);
     $1722 = HEAP32[$1721>>2]|0;
     $1723 = ($1722|0)==(0);
     if ($1723) {
      $1724 = $iFirstRow;
      $iRow = $1724;
      while(1) {
       $1725 = $iRow;
       $1726 = $cHeight;
       $1727 = ($1725>>>0)<($1726>>>0);
       if (!($1727)) {
        break;
       }
       $1728 = $iFirstColumn;
       $iColumn = $1728;
       $1729 = $iRow;
       $1730 = $pOffsetY;
       $1731 = (($1730) + ($1729<<2)|0);
       $1732 = HEAP32[$1731>>2]|0;
       $iY = $1732;
       while(1) {
        $1733 = $iColumn;
        $1734 = $cWidth;
        $1735 = ($1733>>>0)<($1734>>>0);
        if (!($1735)) {
         break;
        }
        $1736 = $iColumn;
        $1737 = $1736 >>> 4;
        $1738 = $1737 << 8;
        $1739 = $iColumn;
        $1740 = $1739 & 15;
        $1741 = $iRow;
        $1742 = (14240 + ($1741<<4)|0);
        $1743 = (($1742) + ($1740)|0);
        $1744 = HEAP8[$1743>>0]|0;
        $1745 = $1744&255;
        $1746 = (($1738) + ($1745))|0;
        $iIdx = $1746;
        $1747 = $iIdx;
        $1748 = $pY;
        $1749 = (($1748) + ($1747<<2)|0);
        $1750 = HEAP32[$1749>>2]|0;
        $1751 = $iBias21;
        $1752 = (($1750) + ($1751))|0;
        $g24 = $1752;
        $1753 = $iIdx;
        $1754 = $pU;
        $1755 = (($1754) + ($1753<<2)|0);
        $1756 = HEAP32[$1755>>2]|0;
        $1757 = (0 - ($1756))|0;
        $r23 = $1757;
        $1758 = $iIdx;
        $1759 = $pV;
        $1760 = (($1759) + ($1758<<2)|0);
        $1761 = HEAP32[$1760>>2]|0;
        $b25 = $1761;
        $1762 = $r23;
        $1763 = (($1762) + 0)|0;
        $1764 = $1763 >> 1;
        $1765 = $g24;
        $1766 = (($1765) - ($1764))|0;
        $g24 = $1766;
        $1767 = $b25;
        $1768 = (($1767) + 1)|0;
        $1769 = $1768 >> 1;
        $1770 = $g24;
        $1771 = (($1769) - ($1770))|0;
        $1772 = $r23;
        $1773 = (($1772) - ($1771))|0;
        $r23 = $1773;
        $1774 = $r23;
        $1775 = $b25;
        $1776 = (($1775) + ($1774))|0;
        $b25 = $1776;
        $1777 = $nLen;
        $1778 = $1777&255;
        $1779 = $g24;
        $1780 = $1779 << $1778;
        $g24 = $1780;
        $1781 = $nLen;
        $1782 = $1781&255;
        $1783 = $b25;
        $1784 = $1783 << $1782;
        $b25 = $1784;
        $1785 = $nLen;
        $1786 = $1785&255;
        $1787 = $r23;
        $1788 = $1787 << $1786;
        $r23 = $1788;
        $1789 = $1;
        $1790 = (($1789) + 32952|0);
        $1791 = HEAP32[$1790>>2]|0;
        $1792 = $iColumn;
        $1793 = $pOffsetX;
        $1794 = (($1793) + ($1792<<2)|0);
        $1795 = HEAP32[$1794>>2]|0;
        $1796 = (($1791) + ($1795<<1)|0);
        $1797 = $iY;
        $1798 = (($1796) + ($1797<<1)|0);
        $pDst22 = $1798;
        $1799 = $g24;
        $1800 = $b25;
        $1801 = $1799 | $1800;
        $1802 = $r23;
        $1803 = $1801 | $1802;
        $1804 = $1803 & -65536;
        $1805 = ($1804|0)!=(0);
        if ($1805) {
         $1806 = $r23;
         $1807 = ($1806|0)<(0);
         if ($1807) {
          $1812 = 0;
         } else {
          $1808 = $r23;
          $1809 = (65535)<($1808|0);
          if ($1809) {
           $4100 = 65535;
          } else {
           $1810 = $r23;
           $4100 = $1810;
          }
          $1812 = $4100;
         }
         $1811 = $1812&65535;
         $1813 = $pDst22;
         HEAP16[$1813>>1] = $1811;
         $1814 = $g24;
         $1815 = ($1814|0)<(0);
         if ($1815) {
          $1820 = 0;
         } else {
          $1816 = $g24;
          $1817 = (65535)<($1816|0);
          if ($1817) {
           $4101 = 65535;
          } else {
           $1818 = $g24;
           $4101 = $1818;
          }
          $1820 = $4101;
         }
         $1819 = $1820&65535;
         $1821 = $pDst22;
         $1822 = (($1821) + 2|0);
         HEAP16[$1822>>1] = $1819;
         $1823 = $b25;
         $1824 = ($1823|0)<(0);
         if ($1824) {
          $1829 = 0;
         } else {
          $1825 = $b25;
          $1826 = (65535)<($1825|0);
          if ($1826) {
           $4102 = 65535;
          } else {
           $1827 = $b25;
           $4102 = $1827;
          }
          $1829 = $4102;
         }
         $1828 = $1829&65535;
         $1830 = $pDst22;
         $1831 = (($1830) + 4|0);
         HEAP16[$1831>>1] = $1828;
        } else {
         $1832 = $r23;
         $1833 = $1832&65535;
         $1834 = $pDst22;
         HEAP16[$1834>>1] = $1833;
         $1835 = $g24;
         $1836 = $1835&65535;
         $1837 = $pDst22;
         $1838 = (($1837) + 2|0);
         HEAP16[$1838>>1] = $1836;
         $1839 = $b25;
         $1840 = $1839&65535;
         $1841 = $pDst22;
         $1842 = (($1841) + 4|0);
         HEAP16[$1842>>1] = $1840;
        }
        $1843 = $iColumn;
        $1844 = (($1843) + 1)|0;
        $iColumn = $1844;
       }
       $1845 = $iRow;
       $1846 = (($1845) + 1)|0;
       $iRow = $1846;
      }
     } else {
      $1847 = $iFirstRow;
      $iRow = $1847;
      while(1) {
       $1848 = $iRow;
       $1849 = $cHeight;
       $1850 = ($1848>>>0)<($1849>>>0);
       if (!($1850)) {
        break;
       }
       $1851 = $iFirstColumn;
       $iColumn = $1851;
       $1852 = $iRow;
       $1853 = $pOffsetY;
       $1854 = (($1853) + ($1852<<2)|0);
       $1855 = HEAP32[$1854>>2]|0;
       $iY = $1855;
       while(1) {
        $1856 = $iColumn;
        $1857 = $cWidth;
        $1858 = ($1856>>>0)<($1857>>>0);
        if (!($1858)) {
         break;
        }
        $1859 = $iColumn;
        $1860 = $1859 >>> 4;
        $1861 = $1860 << 8;
        $1862 = $iColumn;
        $1863 = $1862 & 15;
        $1864 = $iRow;
        $1865 = (14240 + ($1864<<4)|0);
        $1866 = (($1865) + ($1863)|0);
        $1867 = HEAP8[$1866>>0]|0;
        $1868 = $1867&255;
        $1869 = (($1861) + ($1868))|0;
        $iIdx = $1869;
        $1870 = $iIdx;
        $1871 = $pY;
        $1872 = (($1871) + ($1870<<2)|0);
        $1873 = HEAP32[$1872>>2]|0;
        $1874 = $iBias21;
        $1875 = (($1873) + ($1874))|0;
        $g24 = $1875;
        $1876 = $iIdx;
        $1877 = $pU;
        $1878 = (($1877) + ($1876<<2)|0);
        $1879 = HEAP32[$1878>>2]|0;
        $1880 = (0 - ($1879))|0;
        $r23 = $1880;
        $1881 = $iIdx;
        $1882 = $pV;
        $1883 = (($1882) + ($1881<<2)|0);
        $1884 = HEAP32[$1883>>2]|0;
        $b25 = $1884;
        $1885 = $r23;
        $1886 = (($1885) + 0)|0;
        $1887 = $1886 >> 1;
        $1888 = $g24;
        $1889 = (($1888) - ($1887))|0;
        $g24 = $1889;
        $1890 = $b25;
        $1891 = (($1890) + 1)|0;
        $1892 = $1891 >> 1;
        $1893 = $g24;
        $1894 = (($1892) - ($1893))|0;
        $1895 = $r23;
        $1896 = (($1895) - ($1894))|0;
        $r23 = $1896;
        $1897 = $r23;
        $1898 = $b25;
        $1899 = (($1898) + ($1897))|0;
        $b25 = $1899;
        $1900 = $g24;
        $1901 = $iShift;
        $1902 = $1900 >> $1901;
        $1903 = $nLen;
        $1904 = $1903&255;
        $1905 = $1902 << $1904;
        $g24 = $1905;
        $1906 = $b25;
        $1907 = $iShift;
        $1908 = $1906 >> $1907;
        $1909 = $nLen;
        $1910 = $1909&255;
        $1911 = $1908 << $1910;
        $b25 = $1911;
        $1912 = $r23;
        $1913 = $iShift;
        $1914 = $1912 >> $1913;
        $1915 = $nLen;
        $1916 = $1915&255;
        $1917 = $1914 << $1916;
        $r23 = $1917;
        $1918 = $1;
        $1919 = (($1918) + 32952|0);
        $1920 = HEAP32[$1919>>2]|0;
        $1921 = $iColumn;
        $1922 = $pOffsetX;
        $1923 = (($1922) + ($1921<<2)|0);
        $1924 = HEAP32[$1923>>2]|0;
        $1925 = (($1920) + ($1924<<1)|0);
        $1926 = $iY;
        $1927 = (($1925) + ($1926<<1)|0);
        $pDst22 = $1927;
        $1928 = $g24;
        $1929 = $b25;
        $1930 = $1928 | $1929;
        $1931 = $r23;
        $1932 = $1930 | $1931;
        $1933 = $1932 & -65536;
        $1934 = ($1933|0)!=(0);
        if ($1934) {
         $1935 = $r23;
         $1936 = ($1935|0)<(0);
         if ($1936) {
          $1941 = 0;
         } else {
          $1937 = $r23;
          $1938 = (65535)<($1937|0);
          if ($1938) {
           $4103 = 65535;
          } else {
           $1939 = $r23;
           $4103 = $1939;
          }
          $1941 = $4103;
         }
         $1940 = $1941&65535;
         $1942 = $pDst22;
         HEAP16[$1942>>1] = $1940;
         $1943 = $g24;
         $1944 = ($1943|0)<(0);
         if ($1944) {
          $1949 = 0;
         } else {
          $1945 = $g24;
          $1946 = (65535)<($1945|0);
          if ($1946) {
           $4104 = 65535;
          } else {
           $1947 = $g24;
           $4104 = $1947;
          }
          $1949 = $4104;
         }
         $1948 = $1949&65535;
         $1950 = $pDst22;
         $1951 = (($1950) + 2|0);
         HEAP16[$1951>>1] = $1948;
         $1952 = $b25;
         $1953 = ($1952|0)<(0);
         if ($1953) {
          $1958 = 0;
         } else {
          $1954 = $b25;
          $1955 = (65535)<($1954|0);
          if ($1955) {
           $4105 = 65535;
          } else {
           $1956 = $b25;
           $4105 = $1956;
          }
          $1958 = $4105;
         }
         $1957 = $1958&65535;
         $1959 = $pDst22;
         $1960 = (($1959) + 4|0);
         HEAP16[$1960>>1] = $1957;
        } else {
         $1961 = $r23;
         $1962 = $1961&65535;
         $1963 = $pDst22;
         HEAP16[$1963>>1] = $1962;
         $1964 = $g24;
         $1965 = $1964&65535;
         $1966 = $pDst22;
         $1967 = (($1966) + 2|0);
         HEAP16[$1967>>1] = $1965;
         $1968 = $b25;
         $1969 = $1968&65535;
         $1970 = $pDst22;
         $1971 = (($1970) + 4|0);
         HEAP16[$1971>>1] = $1969;
        }
        $1972 = $iColumn;
        $1973 = (($1972) + 1)|0;
        $iColumn = $1973;
       }
       $1974 = $iRow;
       $1975 = (($1974) + 1)|0;
       $iRow = $1975;
      }
     }
     break;
    }
    case 6: case 3: case 0:  {
     $1976 = $1;
     $1977 = $iFirstRow;
     $1978 = $iFirstColumn;
     $1979 = $cWidth;
     $1980 = $cHeight;
     $1981 = $iShift;
     $1982 = $iBias21;
     _outputNChannel($1976,$1977,$1978,$1979,$1980,$1981,$1982);
     break;
    }
    case 2:  {
     $1983 = $1;
     $1984 = (($1983) + 4|0);
     $1985 = (($1984) + 64|0);
     $1986 = HEAP32[$1985>>2]|0;
     $oO30 = $1986;
     $1987 = $oO30;
     $1988 = ($1987|0)==(2);
     do {
      if ($1988) {
       $1996 = 1;
      } else {
       $1989 = $oO30;
       $1990 = ($1989|0)==(3);
       if ($1990) {
        $1996 = 1;
       } else {
        $1991 = $oO30;
        $1992 = ($1991|0)==(5);
        if ($1992) {
         $1996 = 1;
         break;
        }
        $1993 = $oO30;
        $1994 = ($1993|0)==(7);
        $1996 = $1994;
       }
      }
     } while(0);
     $1995 = $1996 ? 1 : 0;
     $i031 = $1995;
     $1997 = $i031;
     $1998 = (1 - ($1997))|0;
     $i132 = $1998;
     $1999 = $iFirstRow;
     $iRow = $1999;
     while(1) {
      $2000 = $iRow;
      $2001 = $cHeight;
      $2002 = ($2000>>>0)<($2001>>>0);
      if (!($2002)) {
       break;
      }
      $2003 = $iFirstColumn;
      $iColumn = $2003;
      $2004 = $iRow;
      $2005 = $pOffsetY;
      $2006 = (($2005) + ($2004<<2)|0);
      $2007 = HEAP32[$2006>>2]|0;
      $iY = $2007;
      while(1) {
       $2008 = $iColumn;
       $2009 = $cWidth;
       $2010 = ($2008>>>0)<($2009>>>0);
       if (!($2010)) {
        break;
       }
       $2011 = $iColumn;
       $2012 = $2011 >>> 4;
       $2013 = $2012 << 7;
       $2014 = $iColumn;
       $2015 = $2014 >>> 1;
       $2016 = $2015 & 7;
       $2017 = $iRow;
       $2018 = (14240 + ($2017<<4)|0);
       $2019 = (($2018) + ($2016)|0);
       $2020 = HEAP8[$2019>>0]|0;
       $2021 = $2020&255;
       $2022 = (($2013) + ($2021))|0;
       $iIdx = $2022;
       $2023 = $iIdx;
       $2024 = $pU;
       $2025 = (($2024) + ($2023<<2)|0);
       $2026 = HEAP32[$2025>>2]|0;
       $2027 = $iBias21;
       $2028 = (($2026) + ($2027))|0;
       $2029 = $iShift;
       $2030 = $2028 >> $2029;
       $2031 = $nLen;
       $2032 = $2031&255;
       $2033 = $2030 << $2032;
       $u28 = $2033;
       $2034 = $iIdx;
       $2035 = $pV;
       $2036 = (($2035) + ($2034<<2)|0);
       $2037 = HEAP32[$2036>>2]|0;
       $2038 = $iBias21;
       $2039 = (($2037) + ($2038))|0;
       $2040 = $iShift;
       $2041 = $2039 >> $2040;
       $2042 = $nLen;
       $2043 = $2042&255;
       $2044 = $2041 << $2043;
       $v29 = $2044;
       $2045 = $iColumn;
       $2046 = $2045 >>> 4;
       $2047 = $2046 << 8;
       $2048 = $iColumn;
       $2049 = $2048 & 15;
       $2050 = $iRow;
       $2051 = (14240 + ($2050<<4)|0);
       $2052 = (($2051) + ($2049)|0);
       $2053 = HEAP8[$2052>>0]|0;
       $2054 = $2053&255;
       $2055 = (($2047) + ($2054))|0;
       $2056 = $pY;
       $2057 = (($2056) + ($2055<<2)|0);
       $2058 = HEAP32[$2057>>2]|0;
       $2059 = $iBias21;
       $2060 = (($2058) + ($2059))|0;
       $2061 = $iShift;
       $2062 = $2060 >> $2061;
       $2063 = $nLen;
       $2064 = $2063&255;
       $2065 = $2062 << $2064;
       $y026 = $2065;
       $2066 = $iColumn;
       $2067 = (($2066) + 1)|0;
       $2068 = $2067 >>> 4;
       $2069 = $2068 << 8;
       $2070 = $iColumn;
       $2071 = (($2070) + 1)|0;
       $2072 = $2071 & 15;
       $2073 = $iRow;
       $2074 = (14240 + ($2073<<4)|0);
       $2075 = (($2074) + ($2072)|0);
       $2076 = HEAP8[$2075>>0]|0;
       $2077 = $2076&255;
       $2078 = (($2069) + ($2077))|0;
       $2079 = $pY;
       $2080 = (($2079) + ($2078<<2)|0);
       $2081 = HEAP32[$2080>>2]|0;
       $2082 = $iBias21;
       $2083 = (($2081) + ($2082))|0;
       $2084 = $iShift;
       $2085 = $2083 >> $2084;
       $2086 = $nLen;
       $2087 = $2086&255;
       $2088 = $2085 << $2087;
       $y127 = $2088;
       $2089 = $1;
       $2090 = (($2089) + 32952|0);
       $2091 = HEAP32[$2090>>2]|0;
       $2092 = $iColumn;
       $2093 = $2092 >>> 1;
       $2094 = $pOffsetX;
       $2095 = (($2094) + ($2093<<2)|0);
       $2096 = HEAP32[$2095>>2]|0;
       $2097 = (($2091) + ($2096<<1)|0);
       $2098 = $iY;
       $2099 = (($2097) + ($2098<<1)|0);
       $pDst22 = $2099;
       $2100 = $y026;
       $2101 = $y127;
       $2102 = $2100 | $2101;
       $2103 = $u28;
       $2104 = $2102 | $2103;
       $2105 = $v29;
       $2106 = $2104 | $2105;
       $2107 = $2106 & -65536;
       $2108 = ($2107|0)!=(0);
       if ($2108) {
        $2109 = $u28;
        $2110 = ($2109|0)<(0);
        if ($2110) {
         $2115 = 0;
        } else {
         $2111 = $u28;
         $2112 = (65535)<($2111|0);
         if ($2112) {
          $4106 = 65535;
         } else {
          $2113 = $u28;
          $4106 = $2113;
         }
         $2115 = $4106;
        }
        $2114 = $2115&65535;
        $2116 = $i031;
        $2117 = $pDst22;
        $2118 = (($2117) + ($2116<<1)|0);
        HEAP16[$2118>>1] = $2114;
        $2119 = $y026;
        $2120 = ($2119|0)<(0);
        if ($2120) {
         $2125 = 0;
        } else {
         $2121 = $y026;
         $2122 = (65535)<($2121|0);
         if ($2122) {
          $4107 = 65535;
         } else {
          $2123 = $y026;
          $4107 = $2123;
         }
         $2125 = $4107;
        }
        $2124 = $2125&65535;
        $2126 = $i132;
        $2127 = $pDst22;
        $2128 = (($2127) + ($2126<<1)|0);
        HEAP16[$2128>>1] = $2124;
        $2129 = $v29;
        $2130 = ($2129|0)<(0);
        if ($2130) {
         $2135 = 0;
        } else {
         $2131 = $v29;
         $2132 = (65535)<($2131|0);
         if ($2132) {
          $4108 = 65535;
         } else {
          $2133 = $v29;
          $4108 = $2133;
         }
         $2135 = $4108;
        }
        $2134 = $2135&65535;
        $2136 = $pDst22;
        $2137 = (($2136) + 4|0);
        HEAP16[$2137>>1] = $2134;
        $2138 = $y127;
        $2139 = ($2138|0)<(0);
        if ($2139) {
         $2144 = 0;
        } else {
         $2140 = $y127;
         $2141 = (65535)<($2140|0);
         if ($2141) {
          $4109 = 65535;
         } else {
          $2142 = $y127;
          $4109 = $2142;
         }
         $2144 = $4109;
        }
        $2143 = $2144&65535;
        $2145 = $pDst22;
        $2146 = (($2145) + 6|0);
        HEAP16[$2146>>1] = $2143;
       } else {
        $2147 = $u28;
        $2148 = $2147&65535;
        $2149 = $i031;
        $2150 = $pDst22;
        $2151 = (($2150) + ($2149<<1)|0);
        HEAP16[$2151>>1] = $2148;
        $2152 = $y026;
        $2153 = $2152&65535;
        $2154 = $i132;
        $2155 = $pDst22;
        $2156 = (($2155) + ($2154<<1)|0);
        HEAP16[$2156>>1] = $2153;
        $2157 = $v29;
        $2158 = $2157&65535;
        $2159 = $pDst22;
        $2160 = (($2159) + 4|0);
        HEAP16[$2160>>1] = $2158;
        $2161 = $y127;
        $2162 = $2161&65535;
        $2163 = $pDst22;
        $2164 = (($2163) + 6|0);
        HEAP16[$2164>>1] = $2162;
       }
       $2165 = $iColumn;
       $2166 = (($2165) + 2)|0;
       $iColumn = $2166;
      }
      $2167 = $iRow;
      $2168 = (($2167) + 1)|0;
      $iRow = $2168;
     }
     break;
    }
    case 4:  {
     $2439 = $1;
     $2440 = (($2439) + 34564|0);
     $2441 = (($2440) + 12|0);
     $2442 = HEAP32[$2441>>2]|0;
     $pK48 = $2442;
     $2443 = $nLen;
     $2444 = $2443&255;
     $2445 = 32768 >> $2444;
     $2446 = $iShift;
     $2447 = $2445 << $2446;
     $iBias149 = $2447;
     $2448 = $iBias21;
     $2449 = $iBias149;
     $2450 = (($2448) - ($2449))|0;
     $iBias250 = $2450;
     $2451 = $iFirstRow;
     $iRow = $2451;
     while(1) {
      $2452 = $iRow;
      $2453 = $cHeight;
      $2454 = ($2452>>>0)<($2453>>>0);
      if (!($2454)) {
       break;
      }
      $2455 = $iFirstColumn;
      $iColumn = $2455;
      $2456 = $iRow;
      $2457 = $pOffsetY;
      $2458 = (($2457) + ($2456<<2)|0);
      $2459 = HEAP32[$2458>>2]|0;
      $iY = $2459;
      while(1) {
       $2460 = $iColumn;
       $2461 = $cWidth;
       $2462 = ($2460>>>0)<($2461>>>0);
       if (!($2462)) {
        break;
       }
       $2463 = $iColumn;
       $2464 = $2463 >>> 4;
       $2465 = $2464 << 8;
       $2466 = $iColumn;
       $2467 = $2466 & 15;
       $2468 = $iRow;
       $2469 = (14240 + ($2468<<4)|0);
       $2470 = (($2469) + ($2467)|0);
       $2471 = HEAP8[$2470>>0]|0;
       $2472 = $2471&255;
       $2473 = (($2465) + ($2472))|0;
       $iIdx = $2473;
       $2474 = $iIdx;
       $2475 = $pY;
       $2476 = (($2475) + ($2474<<2)|0);
       $2477 = HEAP32[$2476>>2]|0;
       $2478 = (0 - ($2477))|0;
       $2479 = $iBias149;
       $2480 = (($2478) + ($2479))|0;
       $m45 = $2480;
       $2481 = $iIdx;
       $2482 = $pU;
       $2483 = (($2482) + ($2481<<2)|0);
       $2484 = HEAP32[$2483>>2]|0;
       $c44 = $2484;
       $2485 = $iIdx;
       $2486 = $pV;
       $2487 = (($2486) + ($2485<<2)|0);
       $2488 = HEAP32[$2487>>2]|0;
       $2489 = (0 - ($2488))|0;
       $y46 = $2489;
       $2490 = $iIdx;
       $2491 = $pK48;
       $2492 = (($2491) + ($2490<<2)|0);
       $2493 = HEAP32[$2492>>2]|0;
       $2494 = $iBias250;
       $2495 = (($2493) + ($2494))|0;
       $k47 = $2495;
       $2496 = $m45;
       $2497 = (($2496) + 1)|0;
       $2498 = $2497 >> 1;
       $2499 = $k47;
       $2500 = (($2499) - ($2498))|0;
       $k47 = $2500;
       $2501 = $c44;
       $2502 = $2501 >> 1;
       $2503 = $k47;
       $2504 = (($2502) - ($2503))|0;
       $2505 = $m45;
       $2506 = (($2505) - ($2504))|0;
       $m45 = $2506;
       $2507 = $y46;
       $2508 = (($2507) + 1)|0;
       $2509 = $2508 >> 1;
       $2510 = $m45;
       $2511 = (($2509) - ($2510))|0;
       $2512 = $c44;
       $2513 = (($2512) - ($2511))|0;
       $c44 = $2513;
       $2514 = $c44;
       $2515 = $y46;
       $2516 = (($2515) + ($2514))|0;
       $y46 = $2516;
       $2517 = $c44;
       $2518 = $iShift;
       $2519 = $2517 >> $2518;
       $2520 = $nLen;
       $2521 = $2520&255;
       $2522 = $2519 << $2521;
       $c44 = $2522;
       $2523 = $m45;
       $2524 = $iShift;
       $2525 = $2523 >> $2524;
       $2526 = $nLen;
       $2527 = $2526&255;
       $2528 = $2525 << $2527;
       $m45 = $2528;
       $2529 = $y46;
       $2530 = $iShift;
       $2531 = $2529 >> $2530;
       $2532 = $nLen;
       $2533 = $2532&255;
       $2534 = $2531 << $2533;
       $y46 = $2534;
       $2535 = $k47;
       $2536 = $iShift;
       $2537 = $2535 >> $2536;
       $2538 = $nLen;
       $2539 = $2538&255;
       $2540 = $2537 << $2539;
       $k47 = $2540;
       $2541 = $1;
       $2542 = (($2541) + 32952|0);
       $2543 = HEAP32[$2542>>2]|0;
       $2544 = $iColumn;
       $2545 = $pOffsetX;
       $2546 = (($2545) + ($2544<<2)|0);
       $2547 = HEAP32[$2546>>2]|0;
       $2548 = (($2543) + ($2547<<1)|0);
       $2549 = $iY;
       $2550 = (($2548) + ($2549<<1)|0);
       $pDst22 = $2550;
       $2551 = $c44;
       $2552 = $m45;
       $2553 = $2551 | $2552;
       $2554 = $y46;
       $2555 = $2553 | $2554;
       $2556 = $k47;
       $2557 = $2555 | $2556;
       $2558 = $2557 & -65536;
       $2559 = ($2558|0)!=(0);
       if ($2559) {
        $2560 = $c44;
        $2561 = ($2560|0)<(0);
        if ($2561) {
         $2566 = 0;
        } else {
         $2562 = $c44;
         $2563 = (65535)<($2562|0);
         if ($2563) {
          $4116 = 65535;
         } else {
          $2564 = $c44;
          $4116 = $2564;
         }
         $2566 = $4116;
        }
        $2565 = $2566&65535;
        $2567 = $pDst22;
        HEAP16[$2567>>1] = $2565;
        $2568 = $m45;
        $2569 = ($2568|0)<(0);
        if ($2569) {
         $2574 = 0;
        } else {
         $2570 = $m45;
         $2571 = (65535)<($2570|0);
         if ($2571) {
          $4117 = 65535;
         } else {
          $2572 = $m45;
          $4117 = $2572;
         }
         $2574 = $4117;
        }
        $2573 = $2574&65535;
        $2575 = $pDst22;
        $2576 = (($2575) + 2|0);
        HEAP16[$2576>>1] = $2573;
        $2577 = $y46;
        $2578 = ($2577|0)<(0);
        if ($2578) {
         $2583 = 0;
        } else {
         $2579 = $y46;
         $2580 = (65535)<($2579|0);
         if ($2580) {
          $4118 = 65535;
         } else {
          $2581 = $y46;
          $4118 = $2581;
         }
         $2583 = $4118;
        }
        $2582 = $2583&65535;
        $2584 = $pDst22;
        $2585 = (($2584) + 4|0);
        HEAP16[$2585>>1] = $2582;
        $2586 = $k47;
        $2587 = ($2586|0)<(0);
        if ($2587) {
         $2592 = 0;
        } else {
         $2588 = $k47;
         $2589 = (65535)<($2588|0);
         if ($2589) {
          $4119 = 65535;
         } else {
          $2590 = $k47;
          $4119 = $2590;
         }
         $2592 = $4119;
        }
        $2591 = $2592&65535;
        $2593 = $pDst22;
        $2594 = (($2593) + 6|0);
        HEAP16[$2594>>1] = $2591;
       } else {
        $2595 = $c44;
        $2596 = $2595&65535;
        $2597 = $pDst22;
        HEAP16[$2597>>1] = $2596;
        $2598 = $m45;
        $2599 = $2598&65535;
        $2600 = $pDst22;
        $2601 = (($2600) + 2|0);
        HEAP16[$2601>>1] = $2599;
        $2602 = $y46;
        $2603 = $2602&65535;
        $2604 = $pDst22;
        $2605 = (($2604) + 4|0);
        HEAP16[$2605>>1] = $2603;
        $2606 = $k47;
        $2607 = $2606&65535;
        $2608 = $pDst22;
        $2609 = (($2608) + 6|0);
        HEAP16[$2609>>1] = $2607;
       }
       $2610 = $iColumn;
       $2611 = (($2610) + 1)|0;
       $iColumn = $2611;
      }
      $2612 = $iRow;
      $2613 = (($2612) + 1)|0;
      $iRow = $2613;
     }
     break;
    }
    case 1:  {
     $2169 = $1;
     $2170 = (($2169) + 4|0);
     $2171 = (($2170) + 64|0);
     $2172 = HEAP32[$2171>>2]|0;
     $oO39 = $2172;
     $2173 = $oO39;
     $2174 = (8720 + ($2173<<4)|0);
     $2175 = HEAP32[$2174>>2]|0;
     $i040 = $2175;
     $2176 = $oO39;
     $2177 = (8720 + ($2176<<4)|0);
     $2178 = (($2177) + 4|0);
     $2179 = HEAP32[$2178>>2]|0;
     $i141 = $2179;
     $2180 = $oO39;
     $2181 = (8720 + ($2180<<4)|0);
     $2182 = (($2181) + 8|0);
     $2183 = HEAP32[$2182>>2]|0;
     $i242 = $2183;
     $2184 = $oO39;
     $2185 = (8720 + ($2184<<4)|0);
     $2186 = (($2185) + 12|0);
     $2187 = HEAP32[$2186>>2]|0;
     $i343 = $2187;
     $2188 = $iFirstRow;
     $iRow = $2188;
     while(1) {
      $2189 = $iRow;
      $2190 = $cHeight;
      $2191 = ($2189>>>0)<($2190>>>0);
      if (!($2191)) {
       break;
      }
      $2192 = $iFirstColumn;
      $iColumn = $2192;
      $2193 = $iRow;
      $2194 = $2193 >>> 1;
      $2195 = $pOffsetY;
      $2196 = (($2195) + ($2194<<2)|0);
      $2197 = HEAP32[$2196>>2]|0;
      $iY = $2197;
      while(1) {
       $2198 = $iColumn;
       $2199 = $cWidth;
       $2200 = ($2198>>>0)<($2199>>>0);
       if (!($2200)) {
        break;
       }
       $2201 = $iColumn;
       $2202 = $2201 >>> 3;
       $2203 = $2202 << 6;
       $2204 = $iColumn;
       $2205 = $2204 >>> 1;
       $2206 = $2205 & 7;
       $2207 = $iRow;
       $2208 = (14240 + ($2207<<4)|0);
       $2209 = (($2208) + ($2206)|0);
       $2210 = HEAP8[$2209>>0]|0;
       $2211 = $2210&255;
       $2212 = (($2203) + ($2211))|0;
       $iIdx = $2212;
       $2213 = $iIdx;
       $2214 = $pU;
       $2215 = (($2214) + ($2213<<2)|0);
       $2216 = HEAP32[$2215>>2]|0;
       $2217 = $iBias21;
       $2218 = (($2216) + ($2217))|0;
       $2219 = $iShift;
       $2220 = $2218 >> $2219;
       $2221 = $nLen;
       $2222 = $2221&255;
       $2223 = $2220 << $2222;
       $u37 = $2223;
       $2224 = $iIdx;
       $2225 = $pV;
       $2226 = (($2225) + ($2224<<2)|0);
       $2227 = HEAP32[$2226>>2]|0;
       $2228 = $iBias21;
       $2229 = (($2227) + ($2228))|0;
       $2230 = $iShift;
       $2231 = $2229 >> $2230;
       $2232 = $nLen;
       $2233 = $2232&255;
       $2234 = $2231 << $2233;
       $v38 = $2234;
       $2235 = $iColumn;
       $2236 = $2235 >>> 4;
       $2237 = $2236 << 8;
       $2238 = $iColumn;
       $2239 = $2238 & 15;
       $2240 = $iRow;
       $2241 = (14240 + ($2240<<4)|0);
       $2242 = (($2241) + ($2239)|0);
       $2243 = HEAP8[$2242>>0]|0;
       $2244 = $2243&255;
       $2245 = (($2237) + ($2244))|0;
       $2246 = $pY;
       $2247 = (($2246) + ($2245<<2)|0);
       $2248 = HEAP32[$2247>>2]|0;
       $2249 = $iBias21;
       $2250 = (($2248) + ($2249))|0;
       $2251 = $iShift;
       $2252 = $2250 >> $2251;
       $2253 = $nLen;
       $2254 = $2253&255;
       $2255 = $2252 << $2254;
       $y033 = $2255;
       $2256 = $iColumn;
       $2257 = (($2256) + 1)|0;
       $2258 = $2257 >>> 4;
       $2259 = $2258 << 8;
       $2260 = $iColumn;
       $2261 = (($2260) + 1)|0;
       $2262 = $2261 & 15;
       $2263 = $iRow;
       $2264 = (14240 + ($2263<<4)|0);
       $2265 = (($2264) + ($2262)|0);
       $2266 = HEAP8[$2265>>0]|0;
       $2267 = $2266&255;
       $2268 = (($2259) + ($2267))|0;
       $2269 = $pY;
       $2270 = (($2269) + ($2268<<2)|0);
       $2271 = HEAP32[$2270>>2]|0;
       $2272 = $iBias21;
       $2273 = (($2271) + ($2272))|0;
       $2274 = $iShift;
       $2275 = $2273 >> $2274;
       $2276 = $nLen;
       $2277 = $2276&255;
       $2278 = $2275 << $2277;
       $y134 = $2278;
       $2279 = $iColumn;
       $2280 = $2279 >>> 4;
       $2281 = $2280 << 8;
       $2282 = $iColumn;
       $2283 = $2282 & 15;
       $2284 = $iRow;
       $2285 = (($2284) + 1)|0;
       $2286 = (14240 + ($2285<<4)|0);
       $2287 = (($2286) + ($2283)|0);
       $2288 = HEAP8[$2287>>0]|0;
       $2289 = $2288&255;
       $2290 = (($2281) + ($2289))|0;
       $2291 = $pY;
       $2292 = (($2291) + ($2290<<2)|0);
       $2293 = HEAP32[$2292>>2]|0;
       $2294 = $iBias21;
       $2295 = (($2293) + ($2294))|0;
       $2296 = $iShift;
       $2297 = $2295 >> $2296;
       $2298 = $nLen;
       $2299 = $2298&255;
       $2300 = $2297 << $2299;
       $y235 = $2300;
       $2301 = $iColumn;
       $2302 = (($2301) + 1)|0;
       $2303 = $2302 >>> 4;
       $2304 = $2303 << 8;
       $2305 = $iColumn;
       $2306 = (($2305) + 1)|0;
       $2307 = $2306 & 15;
       $2308 = $iRow;
       $2309 = (($2308) + 1)|0;
       $2310 = (14240 + ($2309<<4)|0);
       $2311 = (($2310) + ($2307)|0);
       $2312 = HEAP8[$2311>>0]|0;
       $2313 = $2312&255;
       $2314 = (($2304) + ($2313))|0;
       $2315 = $pY;
       $2316 = (($2315) + ($2314<<2)|0);
       $2317 = HEAP32[$2316>>2]|0;
       $2318 = $iBias21;
       $2319 = (($2317) + ($2318))|0;
       $2320 = $iShift;
       $2321 = $2319 >> $2320;
       $2322 = $nLen;
       $2323 = $2322&255;
       $2324 = $2321 << $2323;
       $y336 = $2324;
       $2325 = $1;
       $2326 = (($2325) + 32952|0);
       $2327 = HEAP32[$2326>>2]|0;
       $2328 = $iColumn;
       $2329 = $2328 >>> 1;
       $2330 = $pOffsetX;
       $2331 = (($2330) + ($2329<<2)|0);
       $2332 = HEAP32[$2331>>2]|0;
       $2333 = (($2327) + ($2332<<1)|0);
       $2334 = $iY;
       $2335 = (($2333) + ($2334<<1)|0);
       $pDst22 = $2335;
       $2336 = $y033;
       $2337 = $y134;
       $2338 = $2336 | $2337;
       $2339 = $y235;
       $2340 = $2338 | $2339;
       $2341 = $y336;
       $2342 = $2340 | $2341;
       $2343 = $u37;
       $2344 = $2342 | $2343;
       $2345 = $v38;
       $2346 = $2344 | $2345;
       $2347 = $2346 & -65536;
       $2348 = ($2347|0)!=(0);
       if ($2348) {
        $2349 = $y033;
        $2350 = ($2349|0)<(0);
        if ($2350) {
         $2355 = 0;
        } else {
         $2351 = $y033;
         $2352 = (65535)<($2351|0);
         if ($2352) {
          $4110 = 65535;
         } else {
          $2353 = $y033;
          $4110 = $2353;
         }
         $2355 = $4110;
        }
        $2354 = $2355&65535;
        $2356 = $i040;
        $2357 = $pDst22;
        $2358 = (($2357) + ($2356<<1)|0);
        HEAP16[$2358>>1] = $2354;
        $2359 = $y134;
        $2360 = ($2359|0)<(0);
        if ($2360) {
         $2365 = 0;
        } else {
         $2361 = $y134;
         $2362 = (65535)<($2361|0);
         if ($2362) {
          $4111 = 65535;
         } else {
          $2363 = $y134;
          $4111 = $2363;
         }
         $2365 = $4111;
        }
        $2364 = $2365&65535;
        $2366 = $i141;
        $2367 = $pDst22;
        $2368 = (($2367) + ($2366<<1)|0);
        HEAP16[$2368>>1] = $2364;
        $2369 = $y235;
        $2370 = ($2369|0)<(0);
        if ($2370) {
         $2375 = 0;
        } else {
         $2371 = $y235;
         $2372 = (65535)<($2371|0);
         if ($2372) {
          $4112 = 65535;
         } else {
          $2373 = $y235;
          $4112 = $2373;
         }
         $2375 = $4112;
        }
        $2374 = $2375&65535;
        $2376 = $i242;
        $2377 = $pDst22;
        $2378 = (($2377) + ($2376<<1)|0);
        HEAP16[$2378>>1] = $2374;
        $2379 = $y336;
        $2380 = ($2379|0)<(0);
        if ($2380) {
         $2385 = 0;
        } else {
         $2381 = $y336;
         $2382 = (65535)<($2381|0);
         if ($2382) {
          $4113 = 65535;
         } else {
          $2383 = $y336;
          $4113 = $2383;
         }
         $2385 = $4113;
        }
        $2384 = $2385&65535;
        $2386 = $i343;
        $2387 = $pDst22;
        $2388 = (($2387) + ($2386<<1)|0);
        HEAP16[$2388>>1] = $2384;
        $2389 = $u37;
        $2390 = ($2389|0)<(0);
        if ($2390) {
         $2395 = 0;
        } else {
         $2391 = $u37;
         $2392 = (65535)<($2391|0);
         if ($2392) {
          $4114 = 65535;
         } else {
          $2393 = $u37;
          $4114 = $2393;
         }
         $2395 = $4114;
        }
        $2394 = $2395&65535;
        $2396 = $pDst22;
        $2397 = (($2396) + 8|0);
        HEAP16[$2397>>1] = $2394;
        $2398 = $v38;
        $2399 = ($2398|0)<(0);
        if ($2399) {
         $2404 = 0;
        } else {
         $2400 = $v38;
         $2401 = (65535)<($2400|0);
         if ($2401) {
          $4115 = 65535;
         } else {
          $2402 = $v38;
          $4115 = $2402;
         }
         $2404 = $4115;
        }
        $2403 = $2404&65535;
        $2405 = $pDst22;
        $2406 = (($2405) + 10|0);
        HEAP16[$2406>>1] = $2403;
       } else {
        $2407 = $y033;
        $2408 = $2407&65535;
        $2409 = $i040;
        $2410 = $pDst22;
        $2411 = (($2410) + ($2409<<1)|0);
        HEAP16[$2411>>1] = $2408;
        $2412 = $y134;
        $2413 = $2412&65535;
        $2414 = $i141;
        $2415 = $pDst22;
        $2416 = (($2415) + ($2414<<1)|0);
        HEAP16[$2416>>1] = $2413;
        $2417 = $y235;
        $2418 = $2417&65535;
        $2419 = $i242;
        $2420 = $pDst22;
        $2421 = (($2420) + ($2419<<1)|0);
        HEAP16[$2421>>1] = $2418;
        $2422 = $y336;
        $2423 = $2422&65535;
        $2424 = $i343;
        $2425 = $pDst22;
        $2426 = (($2425) + ($2424<<1)|0);
        HEAP16[$2426>>1] = $2423;
        $2427 = $u37;
        $2428 = $2427&65535;
        $2429 = $pDst22;
        $2430 = (($2429) + 8|0);
        HEAP16[$2430>>1] = $2428;
        $2431 = $v38;
        $2432 = $2431&65535;
        $2433 = $pDst22;
        $2434 = (($2433) + 10|0);
        HEAP16[$2434>>1] = $2432;
       }
       $2435 = $iColumn;
       $2436 = (($2435) + 2)|0;
       $iColumn = $2436;
      }
      $2437 = $iRow;
      $2438 = (($2437) + 2)|0;
      $iRow = $2438;
     }
     break;
    }
    default: {
     ___assert_fail((8496|0),(8456|0),1436,(8576|0));
     // unreachable;
    }
    }
   } else {
    $2614 = $bd;
    $2615 = ($2614|0)==(3);
    if ($2615) {
     $2616 = $1;
     $2617 = (($2616) + 34136|0);
     $2618 = (($2617) + 20|0);
     $2619 = HEAP32[$2618>>2]|0;
     $2620 = ($2619|0)!=(0);
     $2621 = $2620 ? 3 : 0;
     $iBias51 = $2621;
     $2622 = $cfExt;
     switch ($2622|0) {
     case 6: case 3: case 0:  {
      $2734 = $1;
      $2735 = $iFirstRow;
      $2736 = $iFirstColumn;
      $2737 = $cWidth;
      $2738 = $cHeight;
      $2739 = $iShift;
      $2740 = $iBias51;
      _outputNChannel($2734,$2735,$2736,$2737,$2738,$2739,$2740);
      break;
     }
     case 4:  {
      $2741 = $1;
      $2742 = (($2741) + 34564|0);
      $2743 = (($2742) + 12|0);
      $2744 = HEAP32[$2743>>2]|0;
      $pK60 = $2744;
      $2745 = $iFirstRow;
      $iRow = $2745;
      while(1) {
       $2746 = $iRow;
       $2747 = $cHeight;
       $2748 = ($2746>>>0)<($2747>>>0);
       if (!($2748)) {
        break;
       }
       $2749 = $iFirstColumn;
       $iColumn = $2749;
       $2750 = $iRow;
       $2751 = $pOffsetY;
       $2752 = (($2751) + ($2750<<2)|0);
       $2753 = HEAP32[$2752>>2]|0;
       $iY = $2753;
       while(1) {
        $2754 = $iColumn;
        $2755 = $cWidth;
        $2756 = ($2754>>>0)<($2755>>>0);
        if (!($2756)) {
         break;
        }
        $2757 = $iColumn;
        $2758 = $2757 >>> 4;
        $2759 = $2758 << 8;
        $2760 = $iColumn;
        $2761 = $2760 & 15;
        $2762 = $iRow;
        $2763 = (14240 + ($2762<<4)|0);
        $2764 = (($2763) + ($2761)|0);
        $2765 = HEAP8[$2764>>0]|0;
        $2766 = $2765&255;
        $2767 = (($2759) + ($2766))|0;
        $iIdx = $2767;
        $2768 = $iIdx;
        $2769 = $pY;
        $2770 = (($2769) + ($2768<<2)|0);
        $2771 = HEAP32[$2770>>2]|0;
        $2772 = (0 - ($2771))|0;
        $m57 = $2772;
        $2773 = $iIdx;
        $2774 = $pU;
        $2775 = (($2774) + ($2773<<2)|0);
        $2776 = HEAP32[$2775>>2]|0;
        $c56 = $2776;
        $2777 = $iIdx;
        $2778 = $pV;
        $2779 = (($2778) + ($2777<<2)|0);
        $2780 = HEAP32[$2779>>2]|0;
        $2781 = (0 - ($2780))|0;
        $y58 = $2781;
        $2782 = $iIdx;
        $2783 = $pK60;
        $2784 = (($2783) + ($2782<<2)|0);
        $2785 = HEAP32[$2784>>2]|0;
        $2786 = $iBias51;
        $2787 = (($2785) + ($2786))|0;
        $k59 = $2787;
        $2788 = $m57;
        $2789 = (($2788) + 1)|0;
        $2790 = $2789 >> 1;
        $2791 = $k59;
        $2792 = (($2791) - ($2790))|0;
        $k59 = $2792;
        $2793 = $c56;
        $2794 = $2793 >> 1;
        $2795 = $k59;
        $2796 = (($2794) - ($2795))|0;
        $2797 = $m57;
        $2798 = (($2797) - ($2796))|0;
        $m57 = $2798;
        $2799 = $y58;
        $2800 = (($2799) + 1)|0;
        $2801 = $2800 >> 1;
        $2802 = $m57;
        $2803 = (($2801) - ($2802))|0;
        $2804 = $c56;
        $2805 = (($2804) - ($2803))|0;
        $c56 = $2805;
        $2806 = $c56;
        $2807 = $y58;
        $2808 = (($2807) + ($2806))|0;
        $y58 = $2808;
        $2809 = $c56;
        $2810 = $iShift;
        $2811 = $2809 >> $2810;
        $2812 = $nLen;
        $2813 = $2812&255;
        $2814 = $2811 << $2813;
        $c56 = $2814;
        $2815 = $m57;
        $2816 = $iShift;
        $2817 = $2815 >> $2816;
        $2818 = $nLen;
        $2819 = $2818&255;
        $2820 = $2817 << $2819;
        $m57 = $2820;
        $2821 = $y58;
        $2822 = $iShift;
        $2823 = $2821 >> $2822;
        $2824 = $nLen;
        $2825 = $2824&255;
        $2826 = $2823 << $2825;
        $y58 = $2826;
        $2827 = $k59;
        $2828 = $iShift;
        $2829 = $2827 >> $2828;
        $2830 = $nLen;
        $2831 = $2830&255;
        $2832 = $2829 << $2831;
        $k59 = $2832;
        $2833 = $1;
        $2834 = (($2833) + 32952|0);
        $2835 = HEAP32[$2834>>2]|0;
        $2836 = $iColumn;
        $2837 = $pOffsetX;
        $2838 = (($2837) + ($2836<<2)|0);
        $2839 = HEAP32[$2838>>2]|0;
        $2840 = (($2835) + ($2839<<1)|0);
        $2841 = $iY;
        $2842 = (($2840) + ($2841<<1)|0);
        $pDst52 = $2842;
        $2843 = $c56;
        $2844 = $2843&65535;
        $2845 = $pDst52;
        HEAP16[$2845>>1] = $2844;
        $2846 = $m57;
        $2847 = $2846&65535;
        $2848 = $pDst52;
        $2849 = (($2848) + 2|0);
        HEAP16[$2849>>1] = $2847;
        $2850 = $y58;
        $2851 = $2850&65535;
        $2852 = $pDst52;
        $2853 = (($2852) + 4|0);
        HEAP16[$2853>>1] = $2851;
        $2854 = $k59;
        $2855 = $2854&65535;
        $2856 = $pDst52;
        $2857 = (($2856) + 6|0);
        HEAP16[$2857>>1] = $2855;
        $2858 = $iColumn;
        $2859 = (($2858) + 1)|0;
        $iColumn = $2859;
       }
       $2860 = $iRow;
       $2861 = (($2860) + 1)|0;
       $iRow = $2861;
      }
      break;
     }
     case 7:  {
      $2623 = $iFirstRow;
      $iRow = $2623;
      while(1) {
       $2624 = $iRow;
       $2625 = $cHeight;
       $2626 = ($2624>>>0)<($2625>>>0);
       if (!($2626)) {
        break;
       }
       $2627 = $iFirstColumn;
       $iColumn = $2627;
       $2628 = $iRow;
       $2629 = $pOffsetY;
       $2630 = (($2629) + ($2628<<2)|0);
       $2631 = HEAP32[$2630>>2]|0;
       $iY = $2631;
       while(1) {
        $2632 = $iColumn;
        $2633 = $cWidth;
        $2634 = ($2632>>>0)<($2633>>>0);
        if (!($2634)) {
         break;
        }
        $2635 = $iColumn;
        $2636 = $2635 >>> 4;
        $2637 = $2636 << 8;
        $2638 = $iColumn;
        $2639 = $2638 & 15;
        $2640 = $iRow;
        $2641 = (14240 + ($2640<<4)|0);
        $2642 = (($2641) + ($2639)|0);
        $2643 = HEAP8[$2642>>0]|0;
        $2644 = $2643&255;
        $2645 = (($2637) + ($2644))|0;
        $iIdx = $2645;
        $2646 = $iIdx;
        $2647 = $pY;
        $2648 = (($2647) + ($2646<<2)|0);
        $2649 = HEAP32[$2648>>2]|0;
        $2650 = $iBias51;
        $2651 = (($2649) + ($2650))|0;
        $g54 = $2651;
        $2652 = $iIdx;
        $2653 = $pU;
        $2654 = (($2653) + ($2652<<2)|0);
        $2655 = HEAP32[$2654>>2]|0;
        $2656 = (0 - ($2655))|0;
        $r53 = $2656;
        $2657 = $iIdx;
        $2658 = $pV;
        $2659 = (($2658) + ($2657<<2)|0);
        $2660 = HEAP32[$2659>>2]|0;
        $b55 = $2660;
        $2661 = $r53;
        $2662 = (($2661) + 0)|0;
        $2663 = $2662 >> 1;
        $2664 = $g54;
        $2665 = (($2664) - ($2663))|0;
        $g54 = $2665;
        $2666 = $b55;
        $2667 = (($2666) + 1)|0;
        $2668 = $2667 >> 1;
        $2669 = $g54;
        $2670 = (($2668) - ($2669))|0;
        $2671 = $r53;
        $2672 = (($2671) - ($2670))|0;
        $r53 = $2672;
        $2673 = $r53;
        $2674 = $b55;
        $2675 = (($2674) + ($2673))|0;
        $b55 = $2675;
        $2676 = $r53;
        $2677 = $iShift;
        $2678 = $2676 >> $2677;
        $2679 = $nLen;
        $2680 = $2679&255;
        $2681 = $2678 << $2680;
        $r53 = $2681;
        $2682 = $g54;
        $2683 = $iShift;
        $2684 = $2682 >> $2683;
        $2685 = $nLen;
        $2686 = $2685&255;
        $2687 = $2684 << $2686;
        $g54 = $2687;
        $2688 = $b55;
        $2689 = $iShift;
        $2690 = $2688 >> $2689;
        $2691 = $nLen;
        $2692 = $2691&255;
        $2693 = $2690 << $2692;
        $b55 = $2693;
        $2694 = $1;
        $2695 = (($2694) + 32952|0);
        $2696 = HEAP32[$2695>>2]|0;
        $2697 = $iColumn;
        $2698 = $pOffsetX;
        $2699 = (($2698) + ($2697<<2)|0);
        $2700 = HEAP32[$2699>>2]|0;
        $2701 = (($2696) + ($2700<<1)|0);
        $2702 = $iY;
        $2703 = (($2701) + ($2702<<1)|0);
        $pDst52 = $2703;
        $2704 = $r53;
        $2705 = ($2704|0)<(-32768);
        if ($2705) {
         $2710 = -32768;
        } else {
         $2706 = $r53;
         $2707 = (32767)<($2706|0);
         if ($2707) {
          $4120 = 32767;
         } else {
          $2708 = $r53;
          $4120 = $2708;
         }
         $2710 = $4120;
        }
        $2709 = $2710&65535;
        $2711 = $pDst52;
        HEAP16[$2711>>1] = $2709;
        $2712 = $g54;
        $2713 = ($2712|0)<(-32768);
        if ($2713) {
         $2718 = -32768;
        } else {
         $2714 = $g54;
         $2715 = (32767)<($2714|0);
         if ($2715) {
          $4121 = 32767;
         } else {
          $2716 = $g54;
          $4121 = $2716;
         }
         $2718 = $4121;
        }
        $2717 = $2718&65535;
        $2719 = $pDst52;
        $2720 = (($2719) + 2|0);
        HEAP16[$2720>>1] = $2717;
        $2721 = $b55;
        $2722 = ($2721|0)<(-32768);
        if ($2722) {
         $2727 = -32768;
        } else {
         $2723 = $b55;
         $2724 = (32767)<($2723|0);
         if ($2724) {
          $4122 = 32767;
         } else {
          $2725 = $b55;
          $4122 = $2725;
         }
         $2727 = $4122;
        }
        $2726 = $2727&65535;
        $2728 = $pDst52;
        $2729 = (($2728) + 4|0);
        HEAP16[$2729>>1] = $2726;
        $2730 = $iColumn;
        $2731 = (($2730) + 1)|0;
        $iColumn = $2731;
       }
       $2732 = $iRow;
       $2733 = (($2732) + 1)|0;
       $iRow = $2733;
      }
      break;
     }
     default: {
      ___assert_fail((8496|0),(8456|0),1494,(8576|0));
      // unreachable;
     }
     }
    } else {
     $2862 = $bd;
     $2863 = ($2862|0)==(4);
     if ($2863) {
      $2864 = $1;
      $2865 = (($2864) + 34136|0);
      $2866 = (($2865) + 20|0);
      $2867 = HEAP32[$2866>>2]|0;
      $2868 = ($2867|0)!=(0);
      $2869 = $2868 ? 3 : 0;
      $iBias61 = $2869;
      $2870 = $cfExt;
      if ((($2870|0) == 6) | (($2870|0) == 3) | (($2870|0) == 0)) {
       $2955 = $1;
       $2956 = $iFirstRow;
       $2957 = $iFirstColumn;
       $2958 = $cWidth;
       $2959 = $cHeight;
       $2960 = $iShift;
       $2961 = $iBias61;
       _outputNChannel($2955,$2956,$2957,$2958,$2959,$2960,$2961);
      } else if ((($2870|0) == 7)) {
       $2871 = $iFirstRow;
       $iRow = $2871;
       while(1) {
        $2872 = $iRow;
        $2873 = $cHeight;
        $2874 = ($2872>>>0)<($2873>>>0);
        if (!($2874)) {
         break;
        }
        $2875 = $iFirstColumn;
        $iColumn = $2875;
        $2876 = $iRow;
        $2877 = $pOffsetY;
        $2878 = (($2877) + ($2876<<2)|0);
        $2879 = HEAP32[$2878>>2]|0;
        $iY = $2879;
        while(1) {
         $2880 = $iColumn;
         $2881 = $cWidth;
         $2882 = ($2880>>>0)<($2881>>>0);
         if (!($2882)) {
          break;
         }
         $2883 = $iColumn;
         $2884 = $2883 >>> 4;
         $2885 = $2884 << 8;
         $2886 = $iColumn;
         $2887 = $2886 & 15;
         $2888 = $iRow;
         $2889 = (14240 + ($2888<<4)|0);
         $2890 = (($2889) + ($2887)|0);
         $2891 = HEAP8[$2890>>0]|0;
         $2892 = $2891&255;
         $2893 = (($2885) + ($2892))|0;
         $iIdx = $2893;
         $2894 = $iIdx;
         $2895 = $pY;
         $2896 = (($2895) + ($2894<<2)|0);
         $2897 = HEAP32[$2896>>2]|0;
         $2898 = $iBias61;
         $2899 = (($2897) + ($2898))|0;
         $g64 = $2899;
         $2900 = $iIdx;
         $2901 = $pU;
         $2902 = (($2901) + ($2900<<2)|0);
         $2903 = HEAP32[$2902>>2]|0;
         $2904 = (0 - ($2903))|0;
         $r63 = $2904;
         $2905 = $iIdx;
         $2906 = $pV;
         $2907 = (($2906) + ($2905<<2)|0);
         $2908 = HEAP32[$2907>>2]|0;
         $b65 = $2908;
         $2909 = $r63;
         $2910 = (($2909) + 0)|0;
         $2911 = $2910 >> 1;
         $2912 = $g64;
         $2913 = (($2912) - ($2911))|0;
         $g64 = $2913;
         $2914 = $b65;
         $2915 = (($2914) + 1)|0;
         $2916 = $2915 >> 1;
         $2917 = $g64;
         $2918 = (($2916) - ($2917))|0;
         $2919 = $r63;
         $2920 = (($2919) - ($2918))|0;
         $r63 = $2920;
         $2921 = $r63;
         $2922 = $b65;
         $2923 = (($2922) + ($2921))|0;
         $b65 = $2923;
         $2924 = $1;
         $2925 = (($2924) + 32952|0);
         $2926 = HEAP32[$2925>>2]|0;
         $2927 = $iColumn;
         $2928 = $pOffsetX;
         $2929 = (($2928) + ($2927<<2)|0);
         $2930 = HEAP32[$2929>>2]|0;
         $2931 = (($2926) + ($2930<<1)|0);
         $2932 = $iY;
         $2933 = (($2931) + ($2932<<1)|0);
         $pDst62 = $2933;
         $2934 = $r63;
         $2935 = $iShift;
         $2936 = $2934 >> $2935;
         $2937 = (_backwardHalf($2936)|0);
         $2938 = $pDst62;
         HEAP16[$2938>>1] = $2937;
         $2939 = $g64;
         $2940 = $iShift;
         $2941 = $2939 >> $2940;
         $2942 = (_backwardHalf($2941)|0);
         $2943 = $pDst62;
         $2944 = (($2943) + 2|0);
         HEAP16[$2944>>1] = $2942;
         $2945 = $b65;
         $2946 = $iShift;
         $2947 = $2945 >> $2946;
         $2948 = (_backwardHalf($2947)|0);
         $2949 = $pDst62;
         $2950 = (($2949) + 4|0);
         HEAP16[$2950>>1] = $2948;
         $2951 = $iColumn;
         $2952 = (($2951) + 1)|0;
         $iColumn = $2952;
        }
        $2953 = $iRow;
        $2954 = (($2953) + 1)|0;
        $iRow = $2954;
       }
      } else {
       ___assert_fail((8496|0),(8456|0),1532,(8576|0));
       // unreachable;
      }
     } else {
      $2962 = $bd;
      $2963 = ($2962|0)==(5);
      if ($2963) {
       $2964 = $nLen;
       $2965 = $2964&255;
       $2966 = -2147483648 >> $2965;
       $2967 = $iShift;
       $2968 = $2966 << $2967;
       $2969 = $iShift;
       $2970 = ($2969|0)==(0);
       if ($2970) {
        $2975 = 0;
       } else {
        $2971 = $iShift;
        $2972 = (($2971) - 1)|0;
        $2973 = 1 << $2972;
        $2975 = $2973;
       }
       $2974 = (($2968) + ($2975))|0;
       $iBias66 = $2974;
       $2976 = $cfExt;
       if ((($2976|0) == 7)) {
        $2977 = $iFirstRow;
        $iRow = $2977;
        while(1) {
         $2978 = $iRow;
         $2979 = $cHeight;
         $2980 = ($2978>>>0)<($2979>>>0);
         if (!($2980)) {
          break;
         }
         $2981 = $iFirstColumn;
         $iColumn = $2981;
         $2982 = $iRow;
         $2983 = $pOffsetY;
         $2984 = (($2983) + ($2982<<2)|0);
         $2985 = HEAP32[$2984>>2]|0;
         $iY = $2985;
         while(1) {
          $2986 = $iColumn;
          $2987 = $cWidth;
          $2988 = ($2986>>>0)<($2987>>>0);
          if (!($2988)) {
           break;
          }
          $2989 = $iColumn;
          $2990 = $2989 >>> 4;
          $2991 = $2990 << 8;
          $2992 = $iColumn;
          $2993 = $2992 & 15;
          $2994 = $iRow;
          $2995 = (14240 + ($2994<<4)|0);
          $2996 = (($2995) + ($2993)|0);
          $2997 = HEAP8[$2996>>0]|0;
          $2998 = $2997&255;
          $2999 = (($2991) + ($2998))|0;
          $iIdx = $2999;
          $3000 = $iIdx;
          $3001 = $pY;
          $3002 = (($3001) + ($3000<<2)|0);
          $3003 = HEAP32[$3002>>2]|0;
          $3004 = $iBias66;
          $3005 = (($3003) + ($3004))|0;
          $g69 = $3005;
          $3006 = $iIdx;
          $3007 = $pU;
          $3008 = (($3007) + ($3006<<2)|0);
          $3009 = HEAP32[$3008>>2]|0;
          $3010 = (0 - ($3009))|0;
          $r68 = $3010;
          $3011 = $iIdx;
          $3012 = $pV;
          $3013 = (($3012) + ($3011<<2)|0);
          $3014 = HEAP32[$3013>>2]|0;
          $b70 = $3014;
          $3015 = $r68;
          $3016 = (($3015) + 0)|0;
          $3017 = $3016 >> 1;
          $3018 = $g69;
          $3019 = (($3018) - ($3017))|0;
          $g69 = $3019;
          $3020 = $b70;
          $3021 = (($3020) + 1)|0;
          $3022 = $3021 >> 1;
          $3023 = $g69;
          $3024 = (($3022) - ($3023))|0;
          $3025 = $r68;
          $3026 = (($3025) - ($3024))|0;
          $r68 = $3026;
          $3027 = $r68;
          $3028 = $b70;
          $3029 = (($3028) + ($3027))|0;
          $b70 = $3029;
          $3030 = $1;
          $3031 = (($3030) + 32952|0);
          $3032 = HEAP32[$3031>>2]|0;
          $3033 = $iColumn;
          $3034 = $pOffsetX;
          $3035 = (($3034) + ($3033<<2)|0);
          $3036 = HEAP32[$3035>>2]|0;
          $3037 = (($3032) + ($3036<<2)|0);
          $3038 = $iY;
          $3039 = (($3037) + ($3038<<2)|0);
          $pDst67 = $3039;
          $3040 = $r68;
          $3041 = $iShift;
          $3042 = $3040 >> $3041;
          $3043 = $nLen;
          $3044 = $3043&255;
          $3045 = $3042 << $3044;
          $3046 = $pDst67;
          HEAP32[$3046>>2] = $3045;
          $3047 = $g69;
          $3048 = $iShift;
          $3049 = $3047 >> $3048;
          $3050 = $nLen;
          $3051 = $3050&255;
          $3052 = $3049 << $3051;
          $3053 = $pDst67;
          $3054 = (($3053) + 4|0);
          HEAP32[$3054>>2] = $3052;
          $3055 = $b70;
          $3056 = $iShift;
          $3057 = $3055 >> $3056;
          $3058 = $nLen;
          $3059 = $3058&255;
          $3060 = $3057 << $3059;
          $3061 = $pDst67;
          $3062 = (($3061) + 8|0);
          HEAP32[$3062>>2] = $3060;
          $3063 = $iColumn;
          $3064 = (($3063) + 1)|0;
          $iColumn = $3064;
         }
         $3065 = $iRow;
         $3066 = (($3065) + 1)|0;
         $iRow = $3066;
        }
       } else if ((($2976|0) == 6) | (($2976|0) == 3) | (($2976|0) == 0)) {
        $3067 = $1;
        $3068 = $iFirstRow;
        $3069 = $iFirstColumn;
        $3070 = $cWidth;
        $3071 = $cHeight;
        $3072 = $iShift;
        $3073 = $iBias66;
        _outputNChannel($3067,$3068,$3069,$3070,$3071,$3072,$3073);
       } else {
        ___assert_fail((8496|0),(8456|0),1571,(8576|0));
        // unreachable;
       }
      } else {
       $3074 = $bd;
       $3075 = ($3074|0)==(6);
       if ($3075) {
        $3076 = $1;
        $3077 = (($3076) + 34136|0);
        $3078 = (($3077) + 20|0);
        $3079 = HEAP32[$3078>>2]|0;
        $3080 = ($3079|0)!=(0);
        $3081 = $3080 ? 3 : 0;
        $iBias71 = $3081;
        $3082 = $cfExt;
        if ((($3082|0) == 6) | (($3082|0) == 3) | (($3082|0) == 0)) {
         $3173 = $1;
         $3174 = $iFirstRow;
         $3175 = $iFirstColumn;
         $3176 = $cWidth;
         $3177 = $cHeight;
         $3178 = $iShift;
         $3179 = $iBias71;
         _outputNChannel($3173,$3174,$3175,$3176,$3177,$3178,$3179);
        } else if ((($3082|0) == 7)) {
         $3083 = $iFirstRow;
         $iRow = $3083;
         while(1) {
          $3084 = $iRow;
          $3085 = $cHeight;
          $3086 = ($3084>>>0)<($3085>>>0);
          if (!($3086)) {
           break;
          }
          $3087 = $iFirstColumn;
          $iColumn = $3087;
          $3088 = $iRow;
          $3089 = $pOffsetY;
          $3090 = (($3089) + ($3088<<2)|0);
          $3091 = HEAP32[$3090>>2]|0;
          $iY = $3091;
          while(1) {
           $3092 = $iColumn;
           $3093 = $cWidth;
           $3094 = ($3092>>>0)<($3093>>>0);
           if (!($3094)) {
            break;
           }
           $3095 = $iColumn;
           $3096 = $3095 >>> 4;
           $3097 = $3096 << 8;
           $3098 = $iColumn;
           $3099 = $3098 & 15;
           $3100 = $iRow;
           $3101 = (14240 + ($3100<<4)|0);
           $3102 = (($3101) + ($3099)|0);
           $3103 = HEAP8[$3102>>0]|0;
           $3104 = $3103&255;
           $3105 = (($3097) + ($3104))|0;
           $iIdx = $3105;
           $3106 = $iIdx;
           $3107 = $pY;
           $3108 = (($3107) + ($3106<<2)|0);
           $3109 = HEAP32[$3108>>2]|0;
           $3110 = $iBias71;
           $3111 = (($3109) + ($3110))|0;
           $g74 = $3111;
           $3112 = $iIdx;
           $3113 = $pU;
           $3114 = (($3113) + ($3112<<2)|0);
           $3115 = HEAP32[$3114>>2]|0;
           $3116 = (0 - ($3115))|0;
           $r73 = $3116;
           $3117 = $iIdx;
           $3118 = $pV;
           $3119 = (($3118) + ($3117<<2)|0);
           $3120 = HEAP32[$3119>>2]|0;
           $b75 = $3120;
           $3121 = $r73;
           $3122 = (($3121) + 0)|0;
           $3123 = $3122 >> 1;
           $3124 = $g74;
           $3125 = (($3124) - ($3123))|0;
           $g74 = $3125;
           $3126 = $b75;
           $3127 = (($3126) + 1)|0;
           $3128 = $3127 >> 1;
           $3129 = $g74;
           $3130 = (($3128) - ($3129))|0;
           $3131 = $r73;
           $3132 = (($3131) - ($3130))|0;
           $r73 = $3132;
           $3133 = $r73;
           $3134 = $b75;
           $3135 = (($3134) + ($3133))|0;
           $b75 = $3135;
           $3136 = $1;
           $3137 = (($3136) + 32952|0);
           $3138 = HEAP32[$3137>>2]|0;
           $3139 = $iColumn;
           $3140 = $pOffsetX;
           $3141 = (($3140) + ($3139<<2)|0);
           $3142 = HEAP32[$3141>>2]|0;
           $3143 = (($3138) + ($3142<<2)|0);
           $3144 = $iY;
           $3145 = (($3143) + ($3144<<2)|0);
           $pDst72 = $3145;
           $3146 = $r73;
           $3147 = $iShift;
           $3148 = $3146 >> $3147;
           $3149 = $nLen;
           $3150 = $3149&255;
           $3151 = $3148 << $3150;
           $3152 = $pDst72;
           HEAP32[$3152>>2] = $3151;
           $3153 = $g74;
           $3154 = $iShift;
           $3155 = $3153 >> $3154;
           $3156 = $nLen;
           $3157 = $3156&255;
           $3158 = $3155 << $3157;
           $3159 = $pDst72;
           $3160 = (($3159) + 4|0);
           HEAP32[$3160>>2] = $3158;
           $3161 = $b75;
           $3162 = $iShift;
           $3163 = $3161 >> $3162;
           $3164 = $nLen;
           $3165 = $3164&255;
           $3166 = $3163 << $3165;
           $3167 = $pDst72;
           $3168 = (($3167) + 8|0);
           HEAP32[$3168>>2] = $3166;
           $3169 = $iColumn;
           $3170 = (($3169) + 1)|0;
           $iColumn = $3170;
          }
          $3171 = $iRow;
          $3172 = (($3171) + 1)|0;
          $iRow = $3172;
         }
        } else {
         ___assert_fail((8496|0),(8456|0),1609,(8576|0));
         // unreachable;
        }
       } else {
        $3180 = $bd;
        $3181 = ($3180|0)==(7);
        if ($3181) {
         $3182 = $1;
         $3183 = (($3182) + 34136|0);
         $3184 = (($3183) + 20|0);
         $3185 = HEAP32[$3184>>2]|0;
         $3186 = ($3185|0)!=(0);
         $3187 = $3186 ? 3 : 0;
         $iBias76 = $3187;
         $3188 = $cfExt;
         if ((($3188|0) == 6) | (($3188|0) == 3) | (($3188|0) == 0)) {
          $3279 = $1;
          $3280 = $iFirstRow;
          $3281 = $iFirstColumn;
          $3282 = $cWidth;
          $3283 = $cHeight;
          $3284 = $iShift;
          $3285 = $iBias76;
          _outputNChannel($3279,$3280,$3281,$3282,$3283,$3284,$3285);
         } else if ((($3188|0) == 7)) {
          $3189 = $iFirstRow;
          $iRow = $3189;
          while(1) {
           $3190 = $iRow;
           $3191 = $cHeight;
           $3192 = ($3190>>>0)<($3191>>>0);
           if (!($3192)) {
            break;
           }
           $3193 = $iFirstColumn;
           $iColumn = $3193;
           $3194 = $iRow;
           $3195 = $pOffsetY;
           $3196 = (($3195) + ($3194<<2)|0);
           $3197 = HEAP32[$3196>>2]|0;
           $iY = $3197;
           while(1) {
            $3198 = $iColumn;
            $3199 = $cWidth;
            $3200 = ($3198>>>0)<($3199>>>0);
            if (!($3200)) {
             break;
            }
            $3201 = $iColumn;
            $3202 = $3201 >>> 4;
            $3203 = $3202 << 8;
            $3204 = $iColumn;
            $3205 = $3204 & 15;
            $3206 = $iRow;
            $3207 = (14240 + ($3206<<4)|0);
            $3208 = (($3207) + ($3205)|0);
            $3209 = HEAP8[$3208>>0]|0;
            $3210 = $3209&255;
            $3211 = (($3203) + ($3210))|0;
            $iIdx = $3211;
            $3212 = $iIdx;
            $3213 = $pY;
            $3214 = (($3213) + ($3212<<2)|0);
            $3215 = HEAP32[$3214>>2]|0;
            $3216 = $iBias76;
            $3217 = (($3215) + ($3216))|0;
            $g79 = $3217;
            $3218 = $iIdx;
            $3219 = $pU;
            $3220 = (($3219) + ($3218<<2)|0);
            $3221 = HEAP32[$3220>>2]|0;
            $3222 = (0 - ($3221))|0;
            $r78 = $3222;
            $3223 = $iIdx;
            $3224 = $pV;
            $3225 = (($3224) + ($3223<<2)|0);
            $3226 = HEAP32[$3225>>2]|0;
            $b80 = $3226;
            $3227 = $r78;
            $3228 = (($3227) + 0)|0;
            $3229 = $3228 >> 1;
            $3230 = $g79;
            $3231 = (($3230) - ($3229))|0;
            $g79 = $3231;
            $3232 = $b80;
            $3233 = (($3232) + 1)|0;
            $3234 = $3233 >> 1;
            $3235 = $g79;
            $3236 = (($3234) - ($3235))|0;
            $3237 = $r78;
            $3238 = (($3237) - ($3236))|0;
            $r78 = $3238;
            $3239 = $r78;
            $3240 = $b80;
            $3241 = (($3240) + ($3239))|0;
            $b80 = $3241;
            $3242 = $1;
            $3243 = (($3242) + 32952|0);
            $3244 = HEAP32[$3243>>2]|0;
            $3245 = $iColumn;
            $3246 = $pOffsetX;
            $3247 = (($3246) + ($3245<<2)|0);
            $3248 = HEAP32[$3247>>2]|0;
            $3249 = (($3244) + ($3248<<2)|0);
            $3250 = $iY;
            $3251 = (($3249) + ($3250<<2)|0);
            $pDst77 = $3251;
            $3252 = $r78;
            $3253 = $iShift;
            $3254 = $3252 >> $3253;
            $3255 = $nExpBias;
            $3256 = $nLen;
            $3257 = (+_pixel2float($3254,$3255,$3256));
            $3258 = $pDst77;
            HEAPF32[$3258>>2] = $3257;
            $3259 = $g79;
            $3260 = $iShift;
            $3261 = $3259 >> $3260;
            $3262 = $nExpBias;
            $3263 = $nLen;
            $3264 = (+_pixel2float($3261,$3262,$3263));
            $3265 = $pDst77;
            $3266 = (($3265) + 4|0);
            HEAPF32[$3266>>2] = $3264;
            $3267 = $b80;
            $3268 = $iShift;
            $3269 = $3267 >> $3268;
            $3270 = $nExpBias;
            $3271 = $nLen;
            $3272 = (+_pixel2float($3269,$3270,$3271));
            $3273 = $pDst77;
            $3274 = (($3273) + 8|0);
            HEAPF32[$3274>>2] = $3272;
            $3275 = $iColumn;
            $3276 = (($3275) + 1)|0;
            $iColumn = $3276;
           }
           $3277 = $iRow;
           $3278 = (($3277) + 1)|0;
           $iRow = $3278;
          }
         } else {
          ___assert_fail((8496|0),(8456|0),1646,(8576|0));
          // unreachable;
         }
        } else {
         $3286 = $bd;
         $3287 = ($3286|0)==(8);
         if ($3287) {
          $3288 = $iShift;
          $3289 = 16 << $3288;
          $3290 = $1;
          $3291 = (($3290) + 34136|0);
          $3292 = (($3291) + 20|0);
          $3293 = HEAP32[$3292>>2]|0;
          $3294 = ($3293|0)!=(0);
          $3295 = $3294 ? 3 : 0;
          $3296 = (($3289) + ($3295))|0;
          $iBias81 = $3296;
          $3297 = $cfExt;
          $3298 = ($3297|0)==(7);
          if (!($3298)) {
           ___assert_fail((8848|0),(8456|0),1655,(8576|0));
           // unreachable;
          }
          $3299 = $iFirstRow;
          $iRow = $3299;
          while(1) {
           $3300 = $iRow;
           $3301 = $cHeight;
           $3302 = ($3300>>>0)<($3301>>>0);
           if (!($3302)) {
            break;
           }
           $3303 = $iFirstColumn;
           $iColumn = $3303;
           $3304 = $iRow;
           $3305 = $pOffsetY;
           $3306 = (($3305) + ($3304<<2)|0);
           $3307 = HEAP32[$3306>>2]|0;
           $iY = $3307;
           while(1) {
            $3308 = $iColumn;
            $3309 = $cWidth;
            $3310 = ($3308>>>0)<($3309>>>0);
            if (!($3310)) {
             break;
            }
            $3311 = $iColumn;
            $3312 = $3311 >>> 4;
            $3313 = $3312 << 8;
            $3314 = $iColumn;
            $3315 = $3314 & 15;
            $3316 = $iRow;
            $3317 = (14240 + ($3316<<4)|0);
            $3318 = (($3317) + ($3315)|0);
            $3319 = HEAP8[$3318>>0]|0;
            $3320 = $3319&255;
            $3321 = (($3313) + ($3320))|0;
            $iIdx = $3321;
            $3322 = $iIdx;
            $3323 = $pY;
            $3324 = (($3323) + ($3322<<2)|0);
            $3325 = HEAP32[$3324>>2]|0;
            $3326 = $iBias81;
            $3327 = (($3325) + ($3326))|0;
            $g83 = $3327;
            $3328 = $iIdx;
            $3329 = $pU;
            $3330 = (($3329) + ($3328<<2)|0);
            $3331 = HEAP32[$3330>>2]|0;
            $3332 = (0 - ($3331))|0;
            $r82 = $3332;
            $3333 = $iIdx;
            $3334 = $pV;
            $3335 = (($3334) + ($3333<<2)|0);
            $3336 = HEAP32[$3335>>2]|0;
            $b84 = $3336;
            $3337 = $r82;
            $3338 = (($3337) + 0)|0;
            $3339 = $3338 >> 1;
            $3340 = $g83;
            $3341 = (($3340) - ($3339))|0;
            $g83 = $3341;
            $3342 = $b84;
            $3343 = (($3342) + 1)|0;
            $3344 = $3343 >> 1;
            $3345 = $g83;
            $3346 = (($3344) - ($3345))|0;
            $3347 = $r82;
            $3348 = (($3347) - ($3346))|0;
            $r82 = $3348;
            $3349 = $r82;
            $3350 = $b84;
            $3351 = (($3350) + ($3349))|0;
            $b84 = $3351;
            $3352 = $iShift;
            $3353 = $g83;
            $3354 = $3353 >> $3352;
            $g83 = $3354;
            $3355 = $iShift;
            $3356 = $b84;
            $3357 = $3356 >> $3355;
            $b84 = $3357;
            $3358 = $iShift;
            $3359 = $r82;
            $3360 = $3359 >> $3358;
            $r82 = $3360;
            $3361 = $1;
            $3362 = (($3361) + 32952|0);
            $3363 = HEAP32[$3362>>2]|0;
            $3364 = $iColumn;
            $3365 = $pOffsetX;
            $3366 = (($3365) + ($3364<<2)|0);
            $3367 = HEAP32[$3366>>2]|0;
            $3368 = (($3363) + ($3367<<1)|0);
            $3369 = $iY;
            $3370 = (($3368) + ($3369<<1)|0);
            $pDst85 = $3370;
            $3371 = $1;
            $3372 = (($3371) + 34136|0);
            $3373 = (($3372) + 12|0);
            $3374 = HEAP32[$3373>>2]|0;
            $3375 = ($3374|0)!=(0);
            if ($3375) {
             $3376 = $b84;
             $3377 = ($3376|0)<(0);
             if ($3377) {
              $3382 = 0;
             } else {
              $3378 = $b84;
              $3379 = (31)<($3378|0);
              if ($3379) {
               $4123 = 31;
              } else {
               $3380 = $b84;
               $4123 = $3380;
              }
              $3382 = $4123;
             }
             $3381 = $3382&65535;
             $3383 = $3381&65535;
             $3384 = $g83;
             $3385 = ($3384|0)<(0);
             if ($3385) {
              $3390 = 0;
             } else {
              $3386 = $g83;
              $3387 = (31)<($3386|0);
              if ($3387) {
               $4124 = 31;
              } else {
               $3388 = $g83;
               $4124 = $3388;
              }
              $3390 = $4124;
             }
             $3389 = $3390&65535;
             $3391 = $3389&65535;
             $3392 = $3391 << 5;
             $3393 = (($3383) + ($3392))|0;
             $3394 = $r82;
             $3395 = ($3394|0)<(0);
             if ($3395) {
              $3400 = 0;
             } else {
              $3396 = $r82;
              $3397 = (31)<($3396|0);
              if ($3397) {
               $4125 = 31;
              } else {
               $3398 = $r82;
               $4125 = $3398;
              }
              $3400 = $4125;
             }
             $3399 = $3400&65535;
             $3401 = $3399&65535;
             $3402 = $3401 << 10;
             $3403 = (($3393) + ($3402))|0;
             $3404 = $3403&65535;
             $3405 = $pDst85;
             HEAP16[$3405>>1] = $3404;
            } else {
             $3406 = $r82;
             $3407 = ($3406|0)<(0);
             if ($3407) {
              $3412 = 0;
             } else {
              $3408 = $r82;
              $3409 = (31)<($3408|0);
              if ($3409) {
               $4126 = 31;
              } else {
               $3410 = $r82;
               $4126 = $3410;
              }
              $3412 = $4126;
             }
             $3411 = $3412&65535;
             $3413 = $3411&65535;
             $3414 = $g83;
             $3415 = ($3414|0)<(0);
             if ($3415) {
              $3420 = 0;
             } else {
              $3416 = $g83;
              $3417 = (31)<($3416|0);
              if ($3417) {
               $4127 = 31;
              } else {
               $3418 = $g83;
               $4127 = $3418;
              }
              $3420 = $4127;
             }
             $3419 = $3420&65535;
             $3421 = $3419&65535;
             $3422 = $3421 << 5;
             $3423 = (($3413) + ($3422))|0;
             $3424 = $b84;
             $3425 = ($3424|0)<(0);
             if ($3425) {
              $3430 = 0;
             } else {
              $3426 = $b84;
              $3427 = (31)<($3426|0);
              if ($3427) {
               $4128 = 31;
              } else {
               $3428 = $b84;
               $4128 = $3428;
              }
              $3430 = $4128;
             }
             $3429 = $3430&65535;
             $3431 = $3429&65535;
             $3432 = $3431 << 10;
             $3433 = (($3423) + ($3432))|0;
             $3434 = $3433&65535;
             $3435 = $pDst85;
             HEAP16[$3435>>1] = $3434;
            }
            $3436 = $iColumn;
            $3437 = (($3436) + 1)|0;
            $iColumn = $3437;
           }
           $3438 = $iRow;
           $3439 = (($3438) + 1)|0;
           $iRow = $3439;
          }
         } else {
          $3440 = $bd;
          $3441 = ($3440|0)==(10);
          if ($3441) {
           $3442 = $iShift;
           $3443 = 32 << $3442;
           $3444 = $1;
           $3445 = (($3444) + 34136|0);
           $3446 = (($3445) + 20|0);
           $3447 = HEAP32[$3446>>2]|0;
           $3448 = ($3447|0)!=(0);
           $3449 = $3448 ? 3 : 0;
           $3450 = (($3443) + ($3449))|0;
           $iBias86 = $3450;
           $3451 = $cfExt;
           $3452 = ($3451|0)==(7);
           if (!($3452)) {
            ___assert_fail((8848|0),(8456|0),1678,(8576|0));
            // unreachable;
           }
           $3453 = $iFirstRow;
           $iRow = $3453;
           while(1) {
            $3454 = $iRow;
            $3455 = $cHeight;
            $3456 = ($3454>>>0)<($3455>>>0);
            if (!($3456)) {
             break;
            }
            $3457 = $iFirstColumn;
            $iColumn = $3457;
            $3458 = $iRow;
            $3459 = $pOffsetY;
            $3460 = (($3459) + ($3458<<2)|0);
            $3461 = HEAP32[$3460>>2]|0;
            $iY = $3461;
            while(1) {
             $3462 = $iColumn;
             $3463 = $cWidth;
             $3464 = ($3462>>>0)<($3463>>>0);
             if (!($3464)) {
              break;
             }
             $3465 = $iColumn;
             $3466 = $3465 >>> 4;
             $3467 = $3466 << 8;
             $3468 = $iColumn;
             $3469 = $3468 & 15;
             $3470 = $iRow;
             $3471 = (14240 + ($3470<<4)|0);
             $3472 = (($3471) + ($3469)|0);
             $3473 = HEAP8[$3472>>0]|0;
             $3474 = $3473&255;
             $3475 = (($3467) + ($3474))|0;
             $iIdx = $3475;
             $3476 = $iIdx;
             $3477 = $pY;
             $3478 = (($3477) + ($3476<<2)|0);
             $3479 = HEAP32[$3478>>2]|0;
             $3480 = $iBias86;
             $3481 = (($3479) + ($3480))|0;
             $g88 = $3481;
             $3482 = $iIdx;
             $3483 = $pU;
             $3484 = (($3483) + ($3482<<2)|0);
             $3485 = HEAP32[$3484>>2]|0;
             $3486 = (0 - ($3485))|0;
             $r87 = $3486;
             $3487 = $iIdx;
             $3488 = $pV;
             $3489 = (($3488) + ($3487<<2)|0);
             $3490 = HEAP32[$3489>>2]|0;
             $b89 = $3490;
             $3491 = $r87;
             $3492 = (($3491) + 0)|0;
             $3493 = $3492 >> 1;
             $3494 = $g88;
             $3495 = (($3494) - ($3493))|0;
             $g88 = $3495;
             $3496 = $b89;
             $3497 = (($3496) + 1)|0;
             $3498 = $3497 >> 1;
             $3499 = $g88;
             $3500 = (($3498) - ($3499))|0;
             $3501 = $r87;
             $3502 = (($3501) - ($3500))|0;
             $r87 = $3502;
             $3503 = $r87;
             $3504 = $b89;
             $3505 = (($3504) + ($3503))|0;
             $b89 = $3505;
             $3506 = $iShift;
             $3507 = $g88;
             $3508 = $3507 >> $3506;
             $g88 = $3508;
             $3509 = $iShift;
             $3510 = (($3509) + 1)|0;
             $3511 = $b89;
             $3512 = $3511 >> $3510;
             $b89 = $3512;
             $3513 = $iShift;
             $3514 = (($3513) + 1)|0;
             $3515 = $r87;
             $3516 = $3515 >> $3514;
             $r87 = $3516;
             $3517 = $1;
             $3518 = (($3517) + 32952|0);
             $3519 = HEAP32[$3518>>2]|0;
             $3520 = $iColumn;
             $3521 = $pOffsetX;
             $3522 = (($3521) + ($3520<<2)|0);
             $3523 = HEAP32[$3522>>2]|0;
             $3524 = (($3519) + ($3523<<1)|0);
             $3525 = $iY;
             $3526 = (($3524) + ($3525<<1)|0);
             $pDst90 = $3526;
             $3527 = $1;
             $3528 = (($3527) + 34136|0);
             $3529 = (($3528) + 12|0);
             $3530 = HEAP32[$3529>>2]|0;
             $3531 = ($3530|0)!=(0);
             if ($3531) {
              $3532 = $b89;
              $3533 = ($3532|0)<(0);
              if ($3533) {
               $3538 = 0;
              } else {
               $3534 = $b89;
               $3535 = (31)<($3534|0);
               if ($3535) {
                $4129 = 31;
               } else {
                $3536 = $b89;
                $4129 = $3536;
               }
               $3538 = $4129;
              }
              $3537 = $3538&65535;
              $3539 = $3537&65535;
              $3540 = $g88;
              $3541 = ($3540|0)<(0);
              if ($3541) {
               $3546 = 0;
              } else {
               $3542 = $g88;
               $3543 = (63)<($3542|0);
               if ($3543) {
                $4130 = 63;
               } else {
                $3544 = $g88;
                $4130 = $3544;
               }
               $3546 = $4130;
              }
              $3545 = $3546&65535;
              $3547 = $3545&65535;
              $3548 = $3547 << 5;
              $3549 = (($3539) + ($3548))|0;
              $3550 = $r87;
              $3551 = ($3550|0)<(0);
              if ($3551) {
               $3556 = 0;
              } else {
               $3552 = $r87;
               $3553 = (31)<($3552|0);
               if ($3553) {
                $4131 = 31;
               } else {
                $3554 = $r87;
                $4131 = $3554;
               }
               $3556 = $4131;
              }
              $3555 = $3556&65535;
              $3557 = $3555&65535;
              $3558 = $3557 << 11;
              $3559 = (($3549) + ($3558))|0;
              $3560 = $3559&65535;
              $3561 = $pDst90;
              HEAP16[$3561>>1] = $3560;
             } else {
              $3562 = $r87;
              $3563 = ($3562|0)<(0);
              if ($3563) {
               $3568 = 0;
              } else {
               $3564 = $r87;
               $3565 = (31)<($3564|0);
               if ($3565) {
                $4132 = 31;
               } else {
                $3566 = $r87;
                $4132 = $3566;
               }
               $3568 = $4132;
              }
              $3567 = $3568&65535;
              $3569 = $3567&65535;
              $3570 = $g88;
              $3571 = ($3570|0)<(0);
              if ($3571) {
               $3576 = 0;
              } else {
               $3572 = $g88;
               $3573 = (63)<($3572|0);
               if ($3573) {
                $4133 = 63;
               } else {
                $3574 = $g88;
                $4133 = $3574;
               }
               $3576 = $4133;
              }
              $3575 = $3576&65535;
              $3577 = $3575&65535;
              $3578 = $3577 << 5;
              $3579 = (($3569) + ($3578))|0;
              $3580 = $b89;
              $3581 = ($3580|0)<(0);
              if ($3581) {
               $3586 = 0;
              } else {
               $3582 = $b89;
               $3583 = (31)<($3582|0);
               if ($3583) {
                $4134 = 31;
               } else {
                $3584 = $b89;
                $4134 = $3584;
               }
               $3586 = $4134;
              }
              $3585 = $3586&65535;
              $3587 = $3585&65535;
              $3588 = $3587 << 11;
              $3589 = (($3579) + ($3588))|0;
              $3590 = $3589&65535;
              $3591 = $pDst90;
              HEAP16[$3591>>1] = $3590;
             }
             $3592 = $iColumn;
             $3593 = (($3592) + 1)|0;
             $iColumn = $3593;
            }
            $3594 = $iRow;
            $3595 = (($3594) + 1)|0;
            $iRow = $3595;
           }
          } else {
           $3596 = $bd;
           $3597 = ($3596|0)==(9);
           if ($3597) {
            $3598 = $iShift;
            $3599 = 512 << $3598;
            $3600 = $1;
            $3601 = (($3600) + 34136|0);
            $3602 = (($3601) + 20|0);
            $3603 = HEAP32[$3602>>2]|0;
            $3604 = ($3603|0)!=(0);
            $3605 = $3604 ? 3 : 0;
            $3606 = (($3599) + ($3605))|0;
            $iBias91 = $3606;
            $3607 = $cfExt;
            $3608 = ($3607|0)==(7);
            if (!($3608)) {
             ___assert_fail((8848|0),(8456|0),1701,(8576|0));
             // unreachable;
            }
            $3609 = $iFirstRow;
            $iRow = $3609;
            while(1) {
             $3610 = $iRow;
             $3611 = $cHeight;
             $3612 = ($3610>>>0)<($3611>>>0);
             if (!($3612)) {
              break;
             }
             $3613 = $iFirstColumn;
             $iColumn = $3613;
             $3614 = $iRow;
             $3615 = $pOffsetY;
             $3616 = (($3615) + ($3614<<2)|0);
             $3617 = HEAP32[$3616>>2]|0;
             $iY = $3617;
             while(1) {
              $3618 = $iColumn;
              $3619 = $cWidth;
              $3620 = ($3618>>>0)<($3619>>>0);
              if (!($3620)) {
               break;
              }
              $3621 = $iColumn;
              $3622 = $3621 >>> 4;
              $3623 = $3622 << 8;
              $3624 = $iColumn;
              $3625 = $3624 & 15;
              $3626 = $iRow;
              $3627 = (14240 + ($3626<<4)|0);
              $3628 = (($3627) + ($3625)|0);
              $3629 = HEAP8[$3628>>0]|0;
              $3630 = $3629&255;
              $3631 = (($3623) + ($3630))|0;
              $iIdx = $3631;
              $3632 = $iIdx;
              $3633 = $pY;
              $3634 = (($3633) + ($3632<<2)|0);
              $3635 = HEAP32[$3634>>2]|0;
              $3636 = $iBias91;
              $3637 = (($3635) + ($3636))|0;
              $g93 = $3637;
              $3638 = $iIdx;
              $3639 = $pU;
              $3640 = (($3639) + ($3638<<2)|0);
              $3641 = HEAP32[$3640>>2]|0;
              $3642 = (0 - ($3641))|0;
              $r92 = $3642;
              $3643 = $iIdx;
              $3644 = $pV;
              $3645 = (($3644) + ($3643<<2)|0);
              $3646 = HEAP32[$3645>>2]|0;
              $b94 = $3646;
              $3647 = $r92;
              $3648 = (($3647) + 0)|0;
              $3649 = $3648 >> 1;
              $3650 = $g93;
              $3651 = (($3650) - ($3649))|0;
              $g93 = $3651;
              $3652 = $b94;
              $3653 = (($3652) + 1)|0;
              $3654 = $3653 >> 1;
              $3655 = $g93;
              $3656 = (($3654) - ($3655))|0;
              $3657 = $r92;
              $3658 = (($3657) - ($3656))|0;
              $r92 = $3658;
              $3659 = $r92;
              $3660 = $b94;
              $3661 = (($3660) + ($3659))|0;
              $b94 = $3661;
              $3662 = $iShift;
              $3663 = $g93;
              $3664 = $3663 >> $3662;
              $g93 = $3664;
              $3665 = $iShift;
              $3666 = $b94;
              $3667 = $3666 >> $3665;
              $b94 = $3667;
              $3668 = $iShift;
              $3669 = $r92;
              $3670 = $3669 >> $3668;
              $r92 = $3670;
              $3671 = $1;
              $3672 = (($3671) + 32952|0);
              $3673 = HEAP32[$3672>>2]|0;
              $3674 = $iColumn;
              $3675 = $pOffsetX;
              $3676 = (($3675) + ($3674<<2)|0);
              $3677 = HEAP32[$3676>>2]|0;
              $3678 = (($3673) + ($3677<<2)|0);
              $3679 = $iY;
              $3680 = (($3678) + ($3679<<2)|0);
              $pDst95 = $3680;
              $3681 = $1;
              $3682 = (($3681) + 34136|0);
              $3683 = (($3682) + 12|0);
              $3684 = HEAP32[$3683>>2]|0;
              $3685 = ($3684|0)!=(0);
              if ($3685) {
               $3686 = $b94;
               $3687 = ($3686|0)<(0);
               if ($3687) {
                $3699 = 0;
               } else {
                $3688 = $b94;
                $3689 = (1023)<($3688|0);
                if ($3689) {
                 $4135 = 1023;
                } else {
                 $3690 = $b94;
                 $4135 = $3690;
                }
                $3699 = $4135;
               }
               $3691 = $g93;
               $3692 = ($3691|0)<(0);
               if ($3692) {
                $3697 = 0;
               } else {
                $3693 = $g93;
                $3694 = (1023)<($3693|0);
                if ($3694) {
                 $4136 = 1023;
                } else {
                 $3695 = $g93;
                 $4136 = $3695;
                }
                $3697 = $4136;
               }
               $3696 = $3697 << 10;
               $3698 = (($3699) + ($3696))|0;
               $3700 = $r92;
               $3701 = ($3700|0)<(0);
               if ($3701) {
                $3706 = 0;
               } else {
                $3702 = $r92;
                $3703 = (1023)<($3702|0);
                if ($3703) {
                 $4137 = 1023;
                } else {
                 $3704 = $r92;
                 $4137 = $3704;
                }
                $3706 = $4137;
               }
               $3705 = $3706 << 20;
               $3707 = (($3698) + ($3705))|0;
               $3708 = $pDst95;
               HEAP32[$3708>>2] = $3707;
              } else {
               $3709 = $r92;
               $3710 = ($3709|0)<(0);
               if ($3710) {
                $3722 = 0;
               } else {
                $3711 = $r92;
                $3712 = (1023)<($3711|0);
                if ($3712) {
                 $4138 = 1023;
                } else {
                 $3713 = $r92;
                 $4138 = $3713;
                }
                $3722 = $4138;
               }
               $3714 = $g93;
               $3715 = ($3714|0)<(0);
               if ($3715) {
                $3720 = 0;
               } else {
                $3716 = $g93;
                $3717 = (1023)<($3716|0);
                if ($3717) {
                 $4139 = 1023;
                } else {
                 $3718 = $g93;
                 $4139 = $3718;
                }
                $3720 = $4139;
               }
               $3719 = $3720 << 10;
               $3721 = (($3722) + ($3719))|0;
               $3723 = $b94;
               $3724 = ($3723|0)<(0);
               if ($3724) {
                $3729 = 0;
               } else {
                $3725 = $b94;
                $3726 = (1023)<($3725|0);
                if ($3726) {
                 $4140 = 1023;
                } else {
                 $3727 = $b94;
                 $4140 = $3727;
                }
                $3729 = $4140;
               }
               $3728 = $3729 << 20;
               $3730 = (($3721) + ($3728))|0;
               $3731 = $pDst95;
               HEAP32[$3731>>2] = $3730;
              }
              $3732 = $iColumn;
              $3733 = (($3732) + 1)|0;
              $iColumn = $3733;
             }
             $3734 = $iRow;
             $3735 = (($3734) + 1)|0;
             $iRow = $3735;
            }
           } else {
            $3736 = $bd;
            $3737 = ($3736|0)==(0);
            if ($3737) {
             $3738 = $1;
             $3739 = (($3738) + 4|0);
             $3740 = (($3739) + 20|0);
             $3741 = HEAP32[$3740>>2]|0;
             $iPos = $3741;
             $3742 = $iShift;
             $3743 = ($3742|0)>(0);
             if ($3743) {
              $3744 = $iShift;
              $3745 = (($3744) - 1)|0;
              $3746 = 1 << $3745;
              $3747 = $3746;
             } else {
              $3747 = 1;
             }
             $iTh = $3747;
             $3748 = $cfExt;
             $3749 = ($3748|0)==(0);
             if (!($3749)) {
              ___assert_fail((8864|0),(8456|0),1727,(8576|0));
              // unreachable;
             }
             $3750 = $1;
             $3751 = (($3750) + 34136|0);
             $3752 = (($3751) + 8|0);
             $3753 = HEAP32[$3752>>2]|0;
             $3754 = ($3753|0)==(0);
             if (!($3754)) {
              ___assert_fail((8864|0),(8456|0),1727,(8576|0));
              // unreachable;
             }
             $3755 = $1;
             $3756 = (($3755) + 4|0);
             $3757 = (($3756) + 64|0);
             $3758 = HEAP32[$3757>>2]|0;
             $3759 = ($3758>>>0)<(4);
             if ($3759) {
              $3760 = $iFirstRow;
              $iRow = $3760;
              while(1) {
               $3761 = $iRow;
               $3762 = $cHeight;
               $3763 = ($3761>>>0)<($3762>>>0);
               if (!($3763)) {
                break;
               }
               $3764 = $iRow;
               $3765 = $pOffsetY;
               $3766 = (($3765) + ($3764<<2)|0);
               $3767 = HEAP32[$3766>>2]|0;
               $3768 = $iPos;
               $3769 = (($3767) + ($3768))|0;
               $iY = $3769;
               $3770 = $iFirstColumn;
               $iColumn = $3770;
               while(1) {
                $3771 = $iColumn;
                $3772 = $cWidth;
                $3773 = ($3771>>>0)<($3772>>>0);
                if (!($3773)) {
                 break;
                }
                $3774 = $1;
                $3775 = (($3774) + 32952|0);
                $3776 = HEAP32[$3775>>2]|0;
                $3777 = $iColumn;
                $3778 = $pOffsetX;
                $3779 = (($3778) + ($3777<<2)|0);
                $3780 = HEAP32[$3779>>2]|0;
                $3781 = $3780 >>> 3;
                $3782 = (($3776) + ($3781)|0);
                $3783 = $iY;
                $3784 = (($3782) + ($3783)|0);
                $3785 = HEAP8[$3784>>0]|0;
                $cByte = $3785;
                $3786 = $iColumn;
                $3787 = $pOffsetX;
                $3788 = (($3787) + ($3786<<2)|0);
                $3789 = HEAP32[$3788>>2]|0;
                $3790 = $3789 & 7;
                $3791 = (7 - ($3790))|0;
                $3792 = $3791&255;
                $cShift = $3792;
                $3793 = $1;
                $3794 = (($3793) + 84|0);
                $3795 = (($3794) + 32844|0);
                $3796 = HEAP32[$3795>>2]|0;
                $3797 = $iColumn;
                $3798 = $3797 >>> 4;
                $3799 = $3798 << 8;
                $3800 = $iColumn;
                $3801 = $3800 & 15;
                $3802 = $iRow;
                $3803 = (14240 + ($3802<<4)|0);
                $3804 = (($3803) + ($3801)|0);
                $3805 = HEAP8[$3804>>0]|0;
                $3806 = $3805&255;
                $3807 = (($3799) + ($3806))|0;
                $3808 = $pY;
                $3809 = (($3808) + ($3807<<2)|0);
                $3810 = HEAP32[$3809>>2]|0;
                $3811 = $iTh;
                $3812 = ($3810|0)>=($3811|0);
                $3813 = $3812&1;
                $3814 = (($3796) + ($3813))|0;
                $3815 = $cByte;
                $3816 = $3815&255;
                $3817 = $cShift;
                $3818 = $3817&255;
                $3819 = $3816 >> $3818;
                $3820 = (($3814) + ($3819))|0;
                $3821 = $3820 & 1;
                $3822 = $cShift;
                $3823 = $3822&255;
                $3824 = $3821 << $3823;
                $3825 = $1;
                $3826 = (($3825) + 32952|0);
                $3827 = HEAP32[$3826>>2]|0;
                $3828 = $iColumn;
                $3829 = $pOffsetX;
                $3830 = (($3829) + ($3828<<2)|0);
                $3831 = HEAP32[$3830>>2]|0;
                $3832 = $3831 >>> 3;
                $3833 = (($3827) + ($3832)|0);
                $3834 = $iY;
                $3835 = (($3833) + ($3834)|0);
                $3836 = HEAP8[$3835>>0]|0;
                $3837 = $3836&255;
                $3838 = $3837 ^ $3824;
                $3839 = $3838&255;
                HEAP8[$3835>>0] = $3839;
                $3840 = $iColumn;
                $3841 = (($3840) + 1)|0;
                $iColumn = $3841;
               }
               $3842 = $iRow;
               $3843 = (($3842) + 1)|0;
               $iRow = $3843;
              }
             } else {
              $3844 = $iFirstRow;
              $iRow = $3844;
              while(1) {
               $3845 = $iRow;
               $3846 = $cHeight;
               $3847 = ($3845>>>0)<($3846>>>0);
               if (!($3847)) {
                break;
               }
               $3848 = $iRow;
               $3849 = $pOffsetY;
               $3850 = (($3849) + ($3848<<2)|0);
               $3851 = HEAP32[$3850>>2]|0;
               $3852 = $iPos;
               $3853 = (($3851) + ($3852))|0;
               $iY = $3853;
               $3854 = $iFirstColumn;
               $iColumn = $3854;
               while(1) {
                $3855 = $iColumn;
                $3856 = $cWidth;
                $3857 = ($3855>>>0)<($3856>>>0);
                if (!($3857)) {
                 break;
                }
                $3858 = $1;
                $3859 = (($3858) + 32952|0);
                $3860 = HEAP32[$3859>>2]|0;
                $3861 = $iColumn;
                $3862 = $pOffsetX;
                $3863 = (($3862) + ($3861<<2)|0);
                $3864 = HEAP32[$3863>>2]|0;
                $3865 = (($3860) + ($3864)|0);
                $3866 = $iY;
                $3867 = $3866 >>> 3;
                $3868 = (($3865) + ($3867)|0);
                $3869 = HEAP8[$3868>>0]|0;
                $cByte96 = $3869;
                $3870 = $iY;
                $3871 = $3870 & 7;
                $3872 = (7 - ($3871))|0;
                $3873 = $3872&255;
                $cShift97 = $3873;
                $3874 = $1;
                $3875 = (($3874) + 84|0);
                $3876 = (($3875) + 32844|0);
                $3877 = HEAP32[$3876>>2]|0;
                $3878 = $iColumn;
                $3879 = $3878 >>> 4;
                $3880 = $3879 << 8;
                $3881 = $iColumn;
                $3882 = $3881 & 15;
                $3883 = $iRow;
                $3884 = (14240 + ($3883<<4)|0);
                $3885 = (($3884) + ($3882)|0);
                $3886 = HEAP8[$3885>>0]|0;
                $3887 = $3886&255;
                $3888 = (($3880) + ($3887))|0;
                $3889 = $pY;
                $3890 = (($3889) + ($3888<<2)|0);
                $3891 = HEAP32[$3890>>2]|0;
                $3892 = $iTh;
                $3893 = ($3891|0)>=($3892|0);
                $3894 = $3893&1;
                $3895 = (($3877) + ($3894))|0;
                $3896 = $cByte96;
                $3897 = $3896&255;
                $3898 = $cShift97;
                $3899 = $3898&255;
                $3900 = $3897 >> $3899;
                $3901 = (($3895) + ($3900))|0;
                $3902 = $3901 & 1;
                $3903 = $cShift97;
                $3904 = $3903&255;
                $3905 = $3902 << $3904;
                $3906 = $1;
                $3907 = (($3906) + 32952|0);
                $3908 = HEAP32[$3907>>2]|0;
                $3909 = $iColumn;
                $3910 = $pOffsetX;
                $3911 = (($3910) + ($3909<<2)|0);
                $3912 = HEAP32[$3911>>2]|0;
                $3913 = (($3908) + ($3912)|0);
                $3914 = $iY;
                $3915 = $3914 >>> 3;
                $3916 = (($3913) + ($3915)|0);
                $3917 = HEAP8[$3916>>0]|0;
                $3918 = $3917&255;
                $3919 = $3918 ^ $3905;
                $3920 = $3919&255;
                HEAP8[$3916>>0] = $3920;
                $3921 = $iColumn;
                $3922 = (($3921) + 1)|0;
                $iColumn = $3922;
               }
               $3923 = $iRow;
               $3924 = (($3923) + 1)|0;
               $iRow = $3924;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $3925 = $1;
 $3926 = (($3925) + 84|0);
 $3927 = (($3926) + 36|0);
 $3928 = HEAP8[$3927>>0]|0;
 $3929 = $3928&255;
 $3930 = ($3929|0)>(0);
 do {
  if ($3930) {
   $3931 = $1;
   $3932 = (_outputMBRowAlpha($3931)|0);
   $3933 = ($3932|0)!=(0);
   if (!($3933)) {
    break;
   }
   $0 = -1;
   $4071 = $0;
   STACKTOP = sp;return ($4071|0);
  }
 } while(0);
 $3934 = $cHeight;
 $3935 = $iFirstRow;
 $3936 = (($3934) - ($3935))|0;
 $3937 = $1;
 $3938 = (($3937) + 32952|0);
 $3939 = (($3938) + 20|0);
 HEAP32[$3939>>2] = $3936;
 $3940 = $1;
 $3941 = (($3940) + 4|0);
 $3942 = (($3941) + 8|0);
 $3943 = HEAP32[$3942>>2]|0;
 $3944 = (7)==($3943|0);
 if ($3944) {
  $3945 = $1;
  $3946 = (($3945) + 84|0);
  $3947 = (($3946) + 16|0);
  $3948 = HEAP32[$3947>>2]|0;
  $3949 = (0)==($3948|0);
  if ($3949) {
   $3950 = $1;
   $3951 = (($3950) + 4|0);
   $pII = $3951;
   $3952 = $pII;
   $3953 = (($3952) + 12|0);
   $3954 = HEAP32[$3953>>2]|0;
   switch ($3954|0) {
   case 7: case 6: case 5:  {
    $4032 = $iFirstRow;
    $iRow = $4032;
    while(1) {
     $4033 = $iRow;
     $4034 = $cHeight;
     $4035 = ($4033>>>0)<($4034>>>0);
     if (!($4035)) {
      break;
     }
     $4036 = $iFirstColumn;
     $iColumn = $4036;
     $4037 = $iRow;
     $4038 = $pOffsetY;
     $4039 = (($4038) + ($4037<<2)|0);
     $4040 = HEAP32[$4039>>2]|0;
     $iY101 = $4040;
     while(1) {
      $4041 = $iColumn;
      $4042 = $cWidth;
      $4043 = ($4041>>>0)<($4042>>>0);
      if (!($4043)) {
       break;
      }
      $4044 = $1;
      $4045 = (($4044) + 32952|0);
      $4046 = HEAP32[$4045>>2]|0;
      $4047 = $iY101;
      $4048 = (($4046) + ($4047<<2)|0);
      $4049 = $iColumn;
      $4050 = $pOffsetX;
      $4051 = (($4050) + ($4049<<2)|0);
      $4052 = HEAP32[$4051>>2]|0;
      $4053 = (($4048) + ($4052<<2)|0);
      $pT102 = $4053;
      $4054 = $pT102;
      $4055 = HEAP32[$4054>>2]|0;
      $4056 = $pT102;
      $4057 = (($4056) + 4|0);
      HEAP32[$4057>>2] = $4055;
      $4058 = $pT102;
      $4059 = (($4058) + 8|0);
      HEAP32[$4059>>2] = $4055;
      $4060 = $pII;
      $4061 = (($4060) + 16|0);
      $4062 = HEAP32[$4061>>2]|0;
      $4063 = $4062 >>> 3;
      $4064 = (($4063>>>0) / 4)&-1;
      $4065 = $pT102;
      $4066 = (($4065) + ($4064<<2)|0);
      $pT102 = $4066;
      $4067 = $iColumn;
      $4068 = (($4067) + 1)|0;
      $iColumn = $4068;
     }
     $4069 = $iRow;
     $4070 = (($4069) + 1)|0;
     $iRow = $4070;
    }
    break;
   }
   case 1:  {
    $3955 = $iFirstRow;
    $iRow = $3955;
    while(1) {
     $3956 = $iRow;
     $3957 = $cHeight;
     $3958 = ($3956>>>0)<($3957>>>0);
     if (!($3958)) {
      break;
     }
     $3959 = $iFirstColumn;
     $iColumn = $3959;
     $3960 = $iRow;
     $3961 = $pOffsetY;
     $3962 = (($3961) + ($3960<<2)|0);
     $3963 = HEAP32[$3962>>2]|0;
     $iY98 = $3963;
     while(1) {
      $3964 = $iColumn;
      $3965 = $cWidth;
      $3966 = ($3964>>>0)<($3965>>>0);
      if (!($3966)) {
       break;
      }
      $3967 = $1;
      $3968 = (($3967) + 32952|0);
      $3969 = HEAP32[$3968>>2]|0;
      $3970 = $iY98;
      $3971 = (($3969) + ($3970)|0);
      $3972 = $iColumn;
      $3973 = $pOffsetX;
      $3974 = (($3973) + ($3972<<2)|0);
      $3975 = HEAP32[$3974>>2]|0;
      $3976 = (($3971) + ($3975)|0);
      $pT = $3976;
      $3977 = $pT;
      $3978 = HEAP8[$3977>>0]|0;
      $3979 = $pT;
      $3980 = (($3979) + 1|0);
      HEAP8[$3980>>0] = $3978;
      $3981 = $pT;
      $3982 = (($3981) + 2|0);
      HEAP8[$3982>>0] = $3978;
      $3983 = $pII;
      $3984 = (($3983) + 16|0);
      $3985 = HEAP32[$3984>>2]|0;
      $3986 = $3985 >>> 3;
      $3987 = $pT;
      $3988 = (($3987) + ($3986)|0);
      $pT = $3988;
      $3989 = $iColumn;
      $3990 = (($3989) + 1)|0;
      $iColumn = $3990;
     }
     $3991 = $iRow;
     $3992 = (($3991) + 1)|0;
     $iRow = $3992;
    }
    break;
   }
   case 10: case 9: case 8:  {
    label = 864;
    break;
   }
   case 4: case 3: case 2:  {
    $3993 = $iFirstRow;
    $iRow = $3993;
    while(1) {
     $3994 = $iRow;
     $3995 = $cHeight;
     $3996 = ($3994>>>0)<($3995>>>0);
     if (!($3996)) {
      break;
     }
     $3997 = $iFirstColumn;
     $iColumn = $3997;
     $3998 = $iRow;
     $3999 = $pOffsetY;
     $4000 = (($3999) + ($3998<<2)|0);
     $4001 = HEAP32[$4000>>2]|0;
     $iY99 = $4001;
     while(1) {
      $4002 = $iColumn;
      $4003 = $cWidth;
      $4004 = ($4002>>>0)<($4003>>>0);
      if (!($4004)) {
       break;
      }
      $4005 = $1;
      $4006 = (($4005) + 32952|0);
      $4007 = HEAP32[$4006>>2]|0;
      $4008 = $iY99;
      $4009 = (($4007) + ($4008<<1)|0);
      $4010 = $iColumn;
      $4011 = $pOffsetX;
      $4012 = (($4011) + ($4010<<2)|0);
      $4013 = HEAP32[$4012>>2]|0;
      $4014 = (($4009) + ($4013<<1)|0);
      $pT100 = $4014;
      $4015 = $pT100;
      $4016 = HEAP16[$4015>>1]|0;
      $4017 = $pT100;
      $4018 = (($4017) + 2|0);
      HEAP16[$4018>>1] = $4016;
      $4019 = $pT100;
      $4020 = (($4019) + 4|0);
      HEAP16[$4020>>1] = $4016;
      $4021 = $pII;
      $4022 = (($4021) + 16|0);
      $4023 = HEAP32[$4022>>2]|0;
      $4024 = $4023 >>> 3;
      $4025 = (($4024>>>0) / 2)&-1;
      $4026 = $pT100;
      $4027 = (($4026) + ($4025<<1)|0);
      $pT100 = $4027;
      $4028 = $iColumn;
      $4029 = (($4028) + 1)|0;
      $iColumn = $4029;
     }
     $4030 = $iRow;
     $4031 = (($4030) + 1)|0;
     $iRow = $4031;
    }
    break;
   }
   default: {
    label = 864;
   }
   }
   if ((label|0) == 864) {
   }
  }
 }
 $0 = 0;
 $4071 = $0;
 STACKTOP = sp;return ($4071|0);
}
function _inverseConvertRGBE($iFr,$iFg,$iFb,$pR,$pG,$pB,$pE) {
 $iFr = $iFr|0;
 $iFg = $iFg|0;
 $iFb = $iFb|0;
 $pR = $pR|0;
 $pG = $pG|0;
 $pB = $pB|0;
 $pE = $pE|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iShift = 0, $pB_E = 0, $pG_E = 0, $pR_E = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pR_E = sp + 28|0;
 $pG_E = sp + 29|0;
 $pB_E = sp + 30|0;
 $0 = $iFr;
 $1 = $iFg;
 $2 = $iFb;
 $3 = $pR;
 $4 = $pG;
 $5 = $pB;
 $6 = $pE;
 $7 = $0;
 $8 = $3;
 _inverseConvert($7,$8,$pR_E);
 $9 = $1;
 $10 = $4;
 _inverseConvert($9,$10,$pG_E);
 $11 = $2;
 $12 = $5;
 _inverseConvert($11,$12,$pB_E);
 $13 = HEAP8[$pR_E>>0]|0;
 $14 = $13&255;
 $15 = HEAP8[$pG_E>>0]|0;
 $16 = $15&255;
 $17 = ($14|0)>($16|0);
 if ($17) {
  $18 = HEAP8[$pR_E>>0]|0;
  $19 = $18&255;
  $25 = $19;
 } else {
  $20 = HEAP8[$pG_E>>0]|0;
  $21 = $20&255;
  $25 = $21;
 }
 $22 = HEAP8[$pB_E>>0]|0;
 $23 = $22&255;
 $24 = ($25|0)>($23|0);
 if ($24) {
  $26 = HEAP8[$pR_E>>0]|0;
  $27 = $26&255;
  $28 = HEAP8[$pG_E>>0]|0;
  $29 = $28&255;
  $30 = ($27|0)>($29|0);
  if ($30) {
   $31 = HEAP8[$pR_E>>0]|0;
   $32 = $31&255;
   $112 = $32;
  } else {
   $33 = HEAP8[$pG_E>>0]|0;
   $34 = $33&255;
   $112 = $34;
  }
  $38 = $112;
 } else {
  $35 = HEAP8[$pB_E>>0]|0;
  $36 = $35&255;
  $38 = $36;
 }
 $37 = $38&255;
 $39 = $6;
 HEAP8[$39>>0] = $37;
 $40 = $6;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = HEAP8[$pR_E>>0]|0;
 $44 = $43&255;
 $45 = ($42|0)>($44|0);
 if ($45) {
  $46 = $6;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = HEAP8[$pR_E>>0]|0;
  $50 = $49&255;
  $51 = (($48) - ($50))|0;
  $52 = $51&255;
  $iShift = $52;
  $53 = $3;
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $55<<1;
  $57 = (($56) + 1)|0;
  $58 = $iShift;
  $59 = $58&255;
  $60 = (($59) + 1)|0;
  $61 = $57 >> $60;
  $62 = $61&255;
  $63 = $3;
  HEAP8[$63>>0] = $62;
 }
 $64 = $6;
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = HEAP8[$pG_E>>0]|0;
 $68 = $67&255;
 $69 = ($66|0)>($68|0);
 if ($69) {
  $70 = $6;
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = HEAP8[$pG_E>>0]|0;
  $74 = $73&255;
  $75 = (($72) - ($74))|0;
  $76 = $75&255;
  $iShift = $76;
  $77 = $4;
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $79<<1;
  $81 = (($80) + 1)|0;
  $82 = $iShift;
  $83 = $82&255;
  $84 = (($83) + 1)|0;
  $85 = $81 >> $84;
  $86 = $85&255;
  $87 = $4;
  HEAP8[$87>>0] = $86;
 }
 $88 = $6;
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = HEAP8[$pB_E>>0]|0;
 $92 = $91&255;
 $93 = ($90|0)>($92|0);
 if (!($93)) {
  STACKTOP = sp;return;
 }
 $94 = $6;
 $95 = HEAP8[$94>>0]|0;
 $96 = $95&255;
 $97 = HEAP8[$pB_E>>0]|0;
 $98 = $97&255;
 $99 = (($96) - ($98))|0;
 $100 = $99&255;
 $iShift = $100;
 $101 = $5;
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $103<<1;
 $105 = (($104) + 1)|0;
 $106 = $iShift;
 $107 = $106&255;
 $108 = (($107) + 1)|0;
 $109 = $105 >> $108;
 $110 = $109&255;
 $111 = $5;
 HEAP8[$111>>0] = $110;
 STACKTOP = sp;return;
}
function _outputNChannelThumbnail($pSC,$cMul,$rShiftY,$iFirstRow,$iFirstColumn) {
 $pSC = $pSC|0;
 $cMul = $cMul|0;
 $rShiftY = $rShiftY|0;
 $iFirstRow = $iFirstRow|0;
 $iFirstColumn = $iFirstColumn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cChannel = 0, $cHeight = 0, $cWidth = 0, $iChannel = 0, $iColumn = 0, $iOffset = 0, $iRow = 0, $iY = 0, $nBits = 0, $nExpBias = 0, $nLen = 0, $p = 0, $p10 = 0, $p12 = 0, $p2 = 0, $p4 = 0, $p6 = 0, $p8 = 0, $pChannel = 0;
 var $pDst = 0, $pDst1 = 0, $pDst11 = 0, $pDst3 = 0, $pDst5 = 0, $pDst7 = 0, $pDst9 = 0, $pOffsetX = 0, $pOffsetY = 0, $tScale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pChannel = sp + 80|0;
 $0 = $pSC;
 $1 = $cMul;
 $2 = $rShiftY;
 $3 = $iFirstRow;
 $4 = $iFirstColumn;
 $5 = $0;
 $6 = (($5) + 34248|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $tScale = $9;
 $10 = $0;
 $11 = (($10) + 34248|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 $cWidth = $15;
 $16 = $0;
 $17 = (($16) + 34248|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 $22 = $0;
 $23 = (($22) + 34356|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) - 1)|0;
 $26 = $25<<4;
 $27 = (($21) - ($26))|0;
 $28 = ($27>>>0)<(16);
 if ($28) {
  $29 = $0;
  $30 = (($29) + 34248|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  $35 = $0;
  $36 = (($35) + 34356|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) - 1)|0;
  $39 = $38<<4;
  $40 = (($34) - ($39))|0;
  $41 = $40;
 } else {
  $41 = 16;
 }
 $cHeight = $41;
 $42 = $0;
 $43 = (($42) + 84|0);
 $44 = (($43) + 32|0);
 $45 = HEAP32[$44>>2]|0;
 $cChannel = $45;
 $46 = $0;
 $47 = (($46) + 84|0);
 $48 = (($47) + 32840|0);
 $49 = HEAP8[$48>>0]|0;
 $nLen = $49;
 $50 = $0;
 $51 = (($50) + 84|0);
 $52 = (($51) + 32841|0);
 $53 = HEAP8[$52>>0]|0;
 $nExpBias = $53;
 $nBits = 0;
 $54 = $0;
 $55 = (($54) + 34248|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + 40|0);
 $58 = HEAP32[$57>>2]|0;
 $pOffsetX = $58;
 $59 = $0;
 $60 = (($59) + 34248|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 44|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $0;
 $65 = (($64) + 34356|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) - 1)|0;
 $68 = $67<<4;
 $69 = $tScale;
 $70 = (($68>>>0) / ($69>>>0))&-1;
 $71 = (($63) + ($70<<2)|0);
 $pOffsetY = $71;
 while(1) {
  $72 = $nBits;
  $73 = 1 << $72;
  $74 = $tScale;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $76 = $nBits;
  $77 = (($76) + 1)|0;
  $nBits = $77;
 }
 $78 = $cChannel;
 $79 = ($78>>>0)<=(16);
 if (!($79)) {
  ___assert_fail((8440|0),(8456|0),1824,(8920|0));
  // unreachable;
 }
 $iChannel = 0;
 while(1) {
  $80 = $iChannel;
  $81 = $cChannel;
  $82 = ($80>>>0)<($81>>>0);
  if (!($82)) {
   break;
  }
  $83 = $iChannel;
  $84 = $0;
  $85 = (($84) + 34564|0);
  $86 = (($85) + ($83<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $iChannel;
  $89 = $88 & 15;
  $90 = (($pChannel) + ($89<<2)|0);
  HEAP32[$90>>2] = $87;
  $91 = $iChannel;
  $92 = (($91) + 1)|0;
  $iChannel = $92;
 }
 $93 = $0;
 $94 = (($93) + 34264|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0);
 if ($96) {
  $97 = $0;
  $98 = (($97) + 34884|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($pChannel) + 4|0);
  HEAP32[$100>>2] = $99;
  $101 = $0;
  $102 = (($101) + 34888|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($pChannel) + 8|0);
  HEAP32[$104>>2] = $103;
 }
 $105 = $0;
 $106 = (($105) + 4|0);
 $107 = (($106) + 12|0);
 $108 = HEAP32[$107>>2]|0;
 switch ($108|0) {
 case 1:  {
  $109 = $2;
  $110 = 128 << $109;
  $111 = $1;
  $112 = (($110|0) / ($111|0))&-1;
  $iOffset = $112;
  $113 = $3;
  $iRow = $113;
  while(1) {
   $114 = $iRow;
   $115 = $cHeight;
   $116 = ($114>>>0)<($115>>>0);
   if (!($116)) {
    break;
   }
   $117 = $4;
   $iColumn = $117;
   $118 = $iRow;
   $119 = $nBits;
   $120 = $118 >>> $119;
   $121 = $pOffsetY;
   $122 = (($121) + ($120<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $iY = $123;
   while(1) {
    $124 = $iColumn;
    $125 = $cWidth;
    $126 = ($124>>>0)<($125>>>0);
    if (!($126)) {
     break;
    }
    $127 = $0;
    $128 = (($127) + 32952|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $iY;
    $131 = (($129) + ($130)|0);
    $132 = $iColumn;
    $133 = $nBits;
    $134 = $132 >>> $133;
    $135 = $pOffsetX;
    $136 = (($135) + ($134<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($131) + ($137)|0);
    $pDst = $138;
    $iChannel = 0;
    while(1) {
     $139 = $iChannel;
     $140 = $cChannel;
     $141 = ($139>>>0)<($140>>>0);
     if (!($141)) {
      break;
     }
     $142 = $iColumn;
     $143 = $142 >>> 4;
     $144 = $143 << 8;
     $145 = $iColumn;
     $146 = $145 & 15;
     $147 = $iRow;
     $148 = (14240 + ($147<<4)|0);
     $149 = (($148) + ($146)|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = (($144) + ($151))|0;
     $153 = $iChannel;
     $154 = $153 & 15;
     $155 = (($pChannel) + ($154<<2)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (($156) + ($152<<2)|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = $iOffset;
     $160 = (($158) + ($159))|0;
     $161 = $1;
     $162 = Math_imul($160, $161)|0;
     $163 = $2;
     $164 = $162 >> $163;
     $p = $164;
     $165 = $p;
     $166 = ($165|0)<(0);
     if ($166) {
      $171 = 0;
     } else {
      $167 = $p;
      $168 = (255)<($167|0);
      if ($168) {
       $598 = 255;
      } else {
       $169 = $p;
       $598 = $169;
      }
      $171 = $598;
     }
     $170 = $171&255;
     $172 = $iChannel;
     $173 = $pDst;
     $174 = (($173) + ($172)|0);
     HEAP8[$174>>0] = $170;
     $175 = $iChannel;
     $176 = (($175) + 1)|0;
     $iChannel = $176;
    }
    $177 = $tScale;
    $178 = $iColumn;
    $179 = (($178) + ($177))|0;
    $iColumn = $179;
   }
   $180 = $tScale;
   $181 = $iRow;
   $182 = (($181) + ($180))|0;
   $iRow = $182;
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $260 = $3;
  $iRow = $260;
  while(1) {
   $261 = $iRow;
   $262 = $cHeight;
   $263 = ($261>>>0)<($262>>>0);
   if (!($263)) {
    break;
   }
   $264 = $4;
   $iColumn = $264;
   $265 = $iRow;
   $266 = $nBits;
   $267 = $265 >>> $266;
   $268 = $pOffsetY;
   $269 = (($268) + ($267<<2)|0);
   $270 = HEAP32[$269>>2]|0;
   $iY = $270;
   while(1) {
    $271 = $iColumn;
    $272 = $cWidth;
    $273 = ($271>>>0)<($272>>>0);
    if (!($273)) {
     break;
    }
    $274 = $0;
    $275 = (($274) + 32952|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = $iY;
    $278 = (($276) + ($277<<1)|0);
    $279 = $iColumn;
    $280 = $nBits;
    $281 = $279 >>> $280;
    $282 = $pOffsetX;
    $283 = (($282) + ($281<<2)|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = (($278) + ($284<<1)|0);
    $pDst3 = $285;
    $iChannel = 0;
    while(1) {
     $286 = $iChannel;
     $287 = $cChannel;
     $288 = ($286>>>0)<($287>>>0);
     if (!($288)) {
      break;
     }
     $289 = $iColumn;
     $290 = $289 >>> 4;
     $291 = $290 << 8;
     $292 = $iColumn;
     $293 = $292 & 15;
     $294 = $iRow;
     $295 = (14240 + ($294<<4)|0);
     $296 = (($295) + ($293)|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = (($291) + ($298))|0;
     $300 = $iChannel;
     $301 = $300 & 15;
     $302 = (($pChannel) + ($301<<2)|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = (($303) + ($299<<2)|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = $1;
     $307 = Math_imul($305, $306)|0;
     $308 = $2;
     $309 = $307 >> $308;
     $310 = $nLen;
     $311 = $310&255;
     $312 = $309 << $311;
     $p4 = $312;
     $313 = $p4;
     $314 = ($313|0)<(-32768);
     if ($314) {
      $319 = -32768;
     } else {
      $315 = $p4;
      $316 = (32767)<($315|0);
      if ($316) {
       $600 = 32767;
      } else {
       $317 = $p4;
       $600 = $317;
      }
      $319 = $600;
     }
     $318 = $319&65535;
     $320 = $iChannel;
     $321 = $pDst3;
     $322 = (($321) + ($320<<1)|0);
     HEAP16[$322>>1] = $318;
     $323 = $iChannel;
     $324 = (($323) + 1)|0;
     $iChannel = $324;
    }
    $325 = $tScale;
    $326 = $iColumn;
    $327 = (($326) + ($325))|0;
    $iColumn = $327;
   }
   $328 = $tScale;
   $329 = $iRow;
   $330 = (($329) + ($328))|0;
   $iRow = $330;
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $183 = $2;
  $184 = 32768 << $183;
  $185 = $1;
  $186 = (($184|0) / ($185|0))&-1;
  $iOffset = $186;
  $187 = $3;
  $iRow = $187;
  while(1) {
   $188 = $iRow;
   $189 = $cHeight;
   $190 = ($188>>>0)<($189>>>0);
   if (!($190)) {
    break;
   }
   $191 = $4;
   $iColumn = $191;
   $192 = $iRow;
   $193 = $nBits;
   $194 = $192 >>> $193;
   $195 = $pOffsetY;
   $196 = (($195) + ($194<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $iY = $197;
   while(1) {
    $198 = $iColumn;
    $199 = $cWidth;
    $200 = ($198>>>0)<($199>>>0);
    if (!($200)) {
     break;
    }
    $201 = $0;
    $202 = (($201) + 32952|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = $iY;
    $205 = (($203) + ($204<<1)|0);
    $206 = $iColumn;
    $207 = $nBits;
    $208 = $206 >>> $207;
    $209 = $pOffsetX;
    $210 = (($209) + ($208<<2)|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = (($205) + ($211<<1)|0);
    $pDst1 = $212;
    $iChannel = 0;
    while(1) {
     $213 = $iChannel;
     $214 = $cChannel;
     $215 = ($213>>>0)<($214>>>0);
     if (!($215)) {
      break;
     }
     $216 = $iColumn;
     $217 = $216 >>> 4;
     $218 = $217 << 8;
     $219 = $iColumn;
     $220 = $219 & 15;
     $221 = $iRow;
     $222 = (14240 + ($221<<4)|0);
     $223 = (($222) + ($220)|0);
     $224 = HEAP8[$223>>0]|0;
     $225 = $224&255;
     $226 = (($218) + ($225))|0;
     $227 = $iChannel;
     $228 = $227 & 15;
     $229 = (($pChannel) + ($228<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (($230) + ($226<<2)|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = $iOffset;
     $234 = (($232) + ($233))|0;
     $235 = $1;
     $236 = Math_imul($234, $235)|0;
     $237 = $2;
     $238 = $236 >> $237;
     $239 = $nLen;
     $240 = $239&255;
     $241 = $238 << $240;
     $p2 = $241;
     $242 = $p2;
     $243 = ($242|0)<(0);
     if ($243) {
      $248 = 0;
     } else {
      $244 = $p2;
      $245 = (65535)<($244|0);
      if ($245) {
       $599 = 65535;
      } else {
       $246 = $p2;
       $599 = $246;
      }
      $248 = $599;
     }
     $247 = $248&65535;
     $249 = $iChannel;
     $250 = $pDst1;
     $251 = (($250) + ($249<<1)|0);
     HEAP16[$251>>1] = $247;
     $252 = $iChannel;
     $253 = (($252) + 1)|0;
     $iChannel = $253;
    }
    $254 = $tScale;
    $255 = $iColumn;
    $256 = (($255) + ($254))|0;
    $iColumn = $256;
   }
   $257 = $tScale;
   $258 = $iRow;
   $259 = (($258) + ($257))|0;
   $iRow = $259;
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $331 = $3;
  $iRow = $331;
  while(1) {
   $332 = $iRow;
   $333 = $cHeight;
   $334 = ($332>>>0)<($333>>>0);
   if (!($334)) {
    break;
   }
   $335 = $4;
   $iColumn = $335;
   $336 = $iRow;
   $337 = $nBits;
   $338 = $336 >>> $337;
   $339 = $pOffsetY;
   $340 = (($339) + ($338<<2)|0);
   $341 = HEAP32[$340>>2]|0;
   $iY = $341;
   while(1) {
    $342 = $iColumn;
    $343 = $cWidth;
    $344 = ($342>>>0)<($343>>>0);
    if (!($344)) {
     break;
    }
    $345 = $0;
    $346 = (($345) + 32952|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = $iY;
    $349 = (($347) + ($348<<1)|0);
    $350 = $iColumn;
    $351 = $nBits;
    $352 = $350 >>> $351;
    $353 = $pOffsetX;
    $354 = (($353) + ($352<<2)|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = (($349) + ($355<<1)|0);
    $pDst5 = $356;
    $iChannel = 0;
    while(1) {
     $357 = $iChannel;
     $358 = $cChannel;
     $359 = ($357>>>0)<($358>>>0);
     if (!($359)) {
      break;
     }
     $360 = $iColumn;
     $361 = $360 >>> 4;
     $362 = $361 << 8;
     $363 = $iColumn;
     $364 = $363 & 15;
     $365 = $iRow;
     $366 = (14240 + ($365<<4)|0);
     $367 = (($366) + ($364)|0);
     $368 = HEAP8[$367>>0]|0;
     $369 = $368&255;
     $370 = (($362) + ($369))|0;
     $371 = $iChannel;
     $372 = $371 & 15;
     $373 = (($pChannel) + ($372<<2)|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = (($374) + ($370<<2)|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = $1;
     $378 = Math_imul($376, $377)|0;
     $379 = $2;
     $380 = $378 >> $379;
     $p6 = $380;
     $381 = $p6;
     $382 = (_backwardHalf($381)|0);
     $383 = $iChannel;
     $384 = $pDst5;
     $385 = (($384) + ($383<<1)|0);
     HEAP16[$385>>1] = $382;
     $386 = $iChannel;
     $387 = (($386) + 1)|0;
     $iChannel = $387;
    }
    $388 = $tScale;
    $389 = $iColumn;
    $390 = (($389) + ($388))|0;
    $iColumn = $390;
   }
   $391 = $tScale;
   $392 = $iRow;
   $393 = (($392) + ($391))|0;
   $iRow = $393;
  }
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $533 = $3;
  $iRow = $533;
  while(1) {
   $534 = $iRow;
   $535 = $cHeight;
   $536 = ($534>>>0)<($535>>>0);
   if (!($536)) {
    break;
   }
   $537 = $4;
   $iColumn = $537;
   $538 = $iRow;
   $539 = $nBits;
   $540 = $538 >>> $539;
   $541 = $pOffsetY;
   $542 = (($541) + ($540<<2)|0);
   $543 = HEAP32[$542>>2]|0;
   $iY = $543;
   while(1) {
    $544 = $iColumn;
    $545 = $cWidth;
    $546 = ($544>>>0)<($545>>>0);
    if (!($546)) {
     break;
    }
    $547 = $0;
    $548 = (($547) + 32952|0);
    $549 = HEAP32[$548>>2]|0;
    $550 = $iY;
    $551 = (($549) + ($550<<2)|0);
    $552 = $iColumn;
    $553 = $nBits;
    $554 = $552 >>> $553;
    $555 = $pOffsetX;
    $556 = (($555) + ($554<<2)|0);
    $557 = HEAP32[$556>>2]|0;
    $558 = (($551) + ($557<<2)|0);
    $pDst11 = $558;
    $iChannel = 0;
    while(1) {
     $559 = $iChannel;
     $560 = $cChannel;
     $561 = ($559>>>0)<($560>>>0);
     if (!($561)) {
      break;
     }
     $562 = $iColumn;
     $563 = $562 >>> 4;
     $564 = $563 << 8;
     $565 = $iColumn;
     $566 = $565 & 15;
     $567 = $iRow;
     $568 = (14240 + ($567<<4)|0);
     $569 = (($568) + ($566)|0);
     $570 = HEAP8[$569>>0]|0;
     $571 = $570&255;
     $572 = (($564) + ($571))|0;
     $573 = $iChannel;
     $574 = $573 & 15;
     $575 = (($pChannel) + ($574<<2)|0);
     $576 = HEAP32[$575>>2]|0;
     $577 = (($576) + ($572<<2)|0);
     $578 = HEAP32[$577>>2]|0;
     $579 = $1;
     $580 = Math_imul($578, $579)|0;
     $581 = $2;
     $582 = $580 >> $581;
     $p12 = $582;
     $583 = $p12;
     $584 = $nExpBias;
     $585 = $nLen;
     $586 = (+_pixel2float($583,$584,$585));
     $587 = $iChannel;
     $588 = $pDst11;
     $589 = (($588) + ($587<<2)|0);
     HEAPF32[$589>>2] = $586;
     $590 = $iChannel;
     $591 = (($590) + 1)|0;
     $iChannel = $591;
    }
    $592 = $tScale;
    $593 = $iColumn;
    $594 = (($593) + ($592))|0;
    $iColumn = $594;
   }
   $595 = $tScale;
   $596 = $iRow;
   $597 = (($596) + ($595))|0;
   $iRow = $597;
  }
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $468 = $3;
  $iRow = $468;
  while(1) {
   $469 = $iRow;
   $470 = $cHeight;
   $471 = ($469>>>0)<($470>>>0);
   if (!($471)) {
    break;
   }
   $472 = $4;
   $iColumn = $472;
   $473 = $iRow;
   $474 = $nBits;
   $475 = $473 >>> $474;
   $476 = $pOffsetY;
   $477 = (($476) + ($475<<2)|0);
   $478 = HEAP32[$477>>2]|0;
   $iY = $478;
   while(1) {
    $479 = $iColumn;
    $480 = $cWidth;
    $481 = ($479>>>0)<($480>>>0);
    if (!($481)) {
     break;
    }
    $482 = $0;
    $483 = (($482) + 32952|0);
    $484 = HEAP32[$483>>2]|0;
    $485 = $iY;
    $486 = (($484) + ($485<<2)|0);
    $487 = $iColumn;
    $488 = $nBits;
    $489 = $487 >>> $488;
    $490 = $pOffsetX;
    $491 = (($490) + ($489<<2)|0);
    $492 = HEAP32[$491>>2]|0;
    $493 = (($486) + ($492<<2)|0);
    $pDst9 = $493;
    $iChannel = 0;
    while(1) {
     $494 = $iChannel;
     $495 = $cChannel;
     $496 = ($494>>>0)<($495>>>0);
     if (!($496)) {
      break;
     }
     $497 = $iColumn;
     $498 = $497 >>> 4;
     $499 = $498 << 8;
     $500 = $iColumn;
     $501 = $500 & 15;
     $502 = $iRow;
     $503 = (14240 + ($502<<4)|0);
     $504 = (($503) + ($501)|0);
     $505 = HEAP8[$504>>0]|0;
     $506 = $505&255;
     $507 = (($499) + ($506))|0;
     $508 = $iChannel;
     $509 = $508 & 15;
     $510 = (($pChannel) + ($509<<2)|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = (($511) + ($507<<2)|0);
     $513 = HEAP32[$512>>2]|0;
     $514 = $1;
     $515 = Math_imul($513, $514)|0;
     $516 = $2;
     $517 = $515 >> $516;
     $518 = $nLen;
     $519 = $518&255;
     $520 = $517 << $519;
     $p10 = $520;
     $521 = $p10;
     $522 = $iChannel;
     $523 = $pDst9;
     $524 = (($523) + ($522<<2)|0);
     HEAP32[$524>>2] = $521;
     $525 = $iChannel;
     $526 = (($525) + 1)|0;
     $iChannel = $526;
    }
    $527 = $tScale;
    $528 = $iColumn;
    $529 = (($528) + ($527))|0;
    $iColumn = $529;
   }
   $530 = $tScale;
   $531 = $iRow;
   $532 = (($531) + ($530))|0;
   $iRow = $532;
  }
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $394 = $nLen;
  $395 = $394&255;
  $396 = -2147483648 >> $395;
  $397 = $2;
  $398 = $396 << $397;
  $399 = $1;
  $400 = (($398|0) / ($399|0))&-1;
  $iOffset = $400;
  $401 = $3;
  $iRow = $401;
  while(1) {
   $402 = $iRow;
   $403 = $cHeight;
   $404 = ($402>>>0)<($403>>>0);
   if (!($404)) {
    break;
   }
   $405 = $4;
   $iColumn = $405;
   $406 = $iRow;
   $407 = $nBits;
   $408 = $406 >>> $407;
   $409 = $pOffsetY;
   $410 = (($409) + ($408<<2)|0);
   $411 = HEAP32[$410>>2]|0;
   $iY = $411;
   while(1) {
    $412 = $iColumn;
    $413 = $cWidth;
    $414 = ($412>>>0)<($413>>>0);
    if (!($414)) {
     break;
    }
    $415 = $0;
    $416 = (($415) + 32952|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = $iY;
    $419 = (($417) + ($418<<2)|0);
    $420 = $iColumn;
    $421 = $nBits;
    $422 = $420 >>> $421;
    $423 = $pOffsetX;
    $424 = (($423) + ($422<<2)|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = (($419) + ($425<<2)|0);
    $pDst7 = $426;
    $iChannel = 0;
    while(1) {
     $427 = $iChannel;
     $428 = $cChannel;
     $429 = ($427>>>0)<($428>>>0);
     if (!($429)) {
      break;
     }
     $430 = $iColumn;
     $431 = $430 >>> 4;
     $432 = $431 << 8;
     $433 = $iColumn;
     $434 = $433 & 15;
     $435 = $iRow;
     $436 = (14240 + ($435<<4)|0);
     $437 = (($436) + ($434)|0);
     $438 = HEAP8[$437>>0]|0;
     $439 = $438&255;
     $440 = (($432) + ($439))|0;
     $441 = $iChannel;
     $442 = $441 & 15;
     $443 = (($pChannel) + ($442<<2)|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = (($444) + ($440<<2)|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = $iOffset;
     $448 = (($446) + ($447))|0;
     $449 = $1;
     $450 = Math_imul($448, $449)|0;
     $451 = $2;
     $452 = $450 >> $451;
     $453 = $nLen;
     $454 = $453&255;
     $455 = $452 << $454;
     $p8 = $455;
     $456 = $p8;
     $457 = $iChannel;
     $458 = $pDst7;
     $459 = (($458) + ($457<<2)|0);
     HEAP32[$459>>2] = $456;
     $460 = $iChannel;
     $461 = (($460) + 1)|0;
     $iChannel = $461;
    }
    $462 = $tScale;
    $463 = $iColumn;
    $464 = (($463) + ($462))|0;
    $iColumn = $464;
   }
   $465 = $tScale;
   $466 = $iRow;
   $467 = (($466) + ($465))|0;
   $iRow = $467;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((8496|0),(8456|0),1929,(8920|0));
  // unreachable;
 }
 }
}
function _decodeThumbnailAlpha($pSC,$nBits,$cMul,$rShiftY) {
 $pSC = $pSC|0;
 $nBits = $nBits|0;
 $cMul = $cMul|0;
 $rShiftY = $rShiftY|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a = 0, $a2 = 0, $a3 = 0, $a4 = 0, $a5 = 0, $a6 = 0, $bd = 0, $cHeight = 0, $cWidth = 0, $iAlphaPos = 0, $iColumn = 0, $iFirstColumn = 0, $iFirstRow = 0, $iRow = 0, $iY = 0, $nExpBias = 0, $nLen = 0, $offset = 0, $offset1 = 0;
 var $pOffsetX = 0, $pOffsetY = 0, $pSrc = 0, $tScale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $nBits;
 $3 = $cMul;
 $4 = $rShiftY;
 $5 = $1;
 $6 = (($5) + 35036|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $1;
  $10 = (($9) + 35032|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $2;
   $14 = 1 << $13;
   $tScale = $14;
   $15 = $1;
   $16 = (($15) + 34248|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 36|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 1)|0;
   $21 = $1;
   $22 = (($21) + 34356|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) - 1)|0;
   $25 = $24<<4;
   $26 = (($20) - ($25))|0;
   $27 = ($26>>>0)<(16);
   if ($27) {
    $28 = $1;
    $29 = (($28) + 34248|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + 1)|0;
    $34 = $1;
    $35 = (($34) + 34356|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) - 1)|0;
    $38 = $37<<4;
    $39 = (($33) - ($38))|0;
    $40 = $39;
   } else {
    $40 = 16;
   }
   $cHeight = $40;
   $41 = $1;
   $42 = (($41) + 34248|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 28|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 1)|0;
   $cWidth = $46;
   $47 = $1;
   $48 = (($47) + 34356|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) - 1)|0;
   $51 = $50<<4;
   $52 = $1;
   $53 = (($52) + 34248|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($51>>>0)>($56>>>0);
   if ($57) {
    $66 = 0;
   } else {
    $58 = $1;
    $59 = (($58) + 34248|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + 32|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = $62 & 15;
    $66 = $63;
   }
   $64 = $tScale;
   $65 = (($66) + ($64))|0;
   $67 = (($65) - 1)|0;
   $68 = $tScale;
   $69 = (($67>>>0) / ($68>>>0))&-1;
   $70 = $tScale;
   $71 = Math_imul($69, $70)|0;
   $iFirstRow = $71;
   $72 = $1;
   $73 = (($72) + 34248|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($74) + 24|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $tScale;
   $78 = (($76) + ($77))|0;
   $79 = (($78) - 1)|0;
   $80 = $tScale;
   $81 = (($79>>>0) / ($80>>>0))&-1;
   $82 = $tScale;
   $83 = Math_imul($81, $82)|0;
   $iFirstColumn = $83;
   $84 = $1;
   $85 = (($84) + 4|0);
   $86 = (($85) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $1;
   $89 = (($88) + 4|0);
   $90 = (($89) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($91|0)==(4);
   $93 = $92 ? 4 : 3;
   $94 = (($87) + ($93))|0;
   $iAlphaPos = $94;
   $95 = $1;
   $96 = (($95) + 4|0);
   $97 = (($96) + 12|0);
   $98 = HEAP32[$97>>2]|0;
   $bd = $98;
   $99 = $1;
   $100 = (($99) + 35032|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($101) + 34564|0);
   $103 = HEAP32[$102>>2]|0;
   $pSrc = $103;
   $104 = $1;
   $105 = (($104) + 35032|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + 84|0);
   $108 = (($107) + 32840|0);
   $109 = HEAP8[$108>>0]|0;
   $nLen = $109;
   $110 = $1;
   $111 = (($110) + 35032|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($112) + 84|0);
   $114 = (($113) + 32841|0);
   $115 = HEAP8[$114>>0]|0;
   $nExpBias = $115;
   $116 = $1;
   $117 = (($116) + 34248|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($118) + 40|0);
   $120 = HEAP32[$119>>2]|0;
   $pOffsetX = $120;
   $121 = $1;
   $122 = (($121) + 34248|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($123) + 44|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $1;
   $127 = (($126) + 34356|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($128) - 1)|0;
   $130 = $129<<4;
   $131 = $tScale;
   $132 = (($130>>>0) / ($131>>>0))&-1;
   $133 = (($125) + ($132<<2)|0);
   $pOffsetY = $133;
   $134 = $1;
   $135 = (($134) + 4|0);
   $136 = (($135) + 8|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (7)!=($137|0);
   if ($138) {
    $139 = $1;
    $140 = (($139) + 4|0);
    $141 = (($140) + 8|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (4)!=($142|0);
    if ($143) {
     $0 = -1;
     $517 = $0;
     STACKTOP = sp;return ($517|0);
    }
   }
   $144 = $bd;
   $145 = ($144|0)==(1);
   if ($145) {
    $146 = $4;
    $147 = 128 << $146;
    $148 = $3;
    $149 = (($147|0) / ($148|0))&-1;
    $offset = $149;
    $150 = $iFirstRow;
    $iRow = $150;
    while(1) {
     $151 = $iRow;
     $152 = $cHeight;
     $153 = ($151>>>0)<($152>>>0);
     if (!($153)) {
      break;
     }
     $154 = $iFirstColumn;
     $iColumn = $154;
     $155 = $iRow;
     $156 = $2;
     $157 = $155 >>> $156;
     $158 = $pOffsetY;
     $159 = (($158) + ($157<<2)|0);
     $160 = HEAP32[$159>>2]|0;
     $iY = $160;
     while(1) {
      $161 = $iColumn;
      $162 = $cWidth;
      $163 = ($161>>>0)<($162>>>0);
      if (!($163)) {
       break;
      }
      $164 = $iColumn;
      $165 = $164 >>> 4;
      $166 = $165 << 8;
      $167 = $iColumn;
      $168 = $167 & 15;
      $169 = $iRow;
      $170 = (14240 + ($169<<4)|0);
      $171 = (($170) + ($168)|0);
      $172 = HEAP8[$171>>0]|0;
      $173 = $172&255;
      $174 = (($166) + ($173))|0;
      $175 = $pSrc;
      $176 = (($175) + ($174<<2)|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = $offset;
      $179 = (($177) + ($178))|0;
      $180 = $3;
      $181 = Math_imul($179, $180)|0;
      $182 = $4;
      $183 = $181 >> $182;
      $a = $183;
      $184 = $a;
      $185 = ($184|0)<(0);
      if ($185) {
       $190 = 0;
      } else {
       $186 = $a;
       $187 = (255)<($186|0);
       if ($187) {
        $518 = 255;
       } else {
        $188 = $a;
        $518 = $188;
       }
       $190 = $518;
      }
      $189 = $190&255;
      $191 = $iAlphaPos;
      $192 = $1;
      $193 = (($192) + 32952|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = $iColumn;
      $196 = $2;
      $197 = $195 >>> $196;
      $198 = $pOffsetX;
      $199 = (($198) + ($197<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($194) + ($200)|0);
      $202 = $iY;
      $203 = (($201) + ($202)|0);
      $204 = (($203) + ($191)|0);
      HEAP8[$204>>0] = $189;
      $205 = $tScale;
      $206 = $iColumn;
      $207 = (($206) + ($205))|0;
      $iColumn = $207;
     }
     $208 = $tScale;
     $209 = $iRow;
     $210 = (($209) + ($208))|0;
     $iRow = $210;
    }
   } else {
    $211 = $bd;
    $212 = ($211|0)==(2);
    if ($212) {
     $213 = $4;
     $214 = 32768 << $213;
     $215 = $3;
     $216 = (($214|0) / ($215|0))&-1;
     $offset1 = $216;
     $217 = $iFirstRow;
     $iRow = $217;
     while(1) {
      $218 = $iRow;
      $219 = $cHeight;
      $220 = ($218>>>0)<($219>>>0);
      if (!($220)) {
       break;
      }
      $221 = $iFirstColumn;
      $iColumn = $221;
      $222 = $iRow;
      $223 = $2;
      $224 = $222 >>> $223;
      $225 = $pOffsetY;
      $226 = (($225) + ($224<<2)|0);
      $227 = HEAP32[$226>>2]|0;
      $iY = $227;
      while(1) {
       $228 = $iColumn;
       $229 = $cWidth;
       $230 = ($228>>>0)<($229>>>0);
       if (!($230)) {
        break;
       }
       $231 = $iColumn;
       $232 = $231 >>> 4;
       $233 = $232 << 8;
       $234 = $iColumn;
       $235 = $234 & 15;
       $236 = $iRow;
       $237 = (14240 + ($236<<4)|0);
       $238 = (($237) + ($235)|0);
       $239 = HEAP8[$238>>0]|0;
       $240 = $239&255;
       $241 = (($233) + ($240))|0;
       $242 = $pSrc;
       $243 = (($242) + ($241<<2)|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = $offset1;
       $246 = (($244) + ($245))|0;
       $247 = $3;
       $248 = Math_imul($246, $247)|0;
       $249 = $4;
       $250 = $248 >> $249;
       $251 = $nLen;
       $252 = $251&255;
       $253 = $250 << $252;
       $a2 = $253;
       $254 = $a2;
       $255 = ($254|0)<(0);
       if ($255) {
        $260 = 0;
       } else {
        $256 = $a2;
        $257 = (65535)<($256|0);
        if ($257) {
         $519 = 65535;
        } else {
         $258 = $a2;
         $519 = $258;
        }
        $260 = $519;
       }
       $259 = $260&65535;
       $261 = $iAlphaPos;
       $262 = $1;
       $263 = (($262) + 32952|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = $iColumn;
       $266 = $2;
       $267 = $265 >>> $266;
       $268 = $pOffsetX;
       $269 = (($268) + ($267<<2)|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = (($264) + ($270<<1)|0);
       $272 = $iY;
       $273 = (($271) + ($272<<1)|0);
       $274 = (($273) + ($261<<1)|0);
       HEAP16[$274>>1] = $259;
       $275 = $tScale;
       $276 = $iColumn;
       $277 = (($276) + ($275))|0;
       $iColumn = $277;
      }
      $278 = $tScale;
      $279 = $iRow;
      $280 = (($279) + ($278))|0;
      $iRow = $280;
     }
    } else {
     $281 = $bd;
     $282 = ($281|0)==(3);
     if ($282) {
      $283 = $iFirstRow;
      $iRow = $283;
      while(1) {
       $284 = $iRow;
       $285 = $cHeight;
       $286 = ($284>>>0)<($285>>>0);
       if (!($286)) {
        break;
       }
       $287 = $iFirstColumn;
       $iColumn = $287;
       $288 = $iRow;
       $289 = $2;
       $290 = $288 >>> $289;
       $291 = $pOffsetY;
       $292 = (($291) + ($290<<2)|0);
       $293 = HEAP32[$292>>2]|0;
       $iY = $293;
       while(1) {
        $294 = $iColumn;
        $295 = $cWidth;
        $296 = ($294>>>0)<($295>>>0);
        if (!($296)) {
         break;
        }
        $297 = $iColumn;
        $298 = $297 >>> 4;
        $299 = $298 << 8;
        $300 = $iColumn;
        $301 = $300 & 15;
        $302 = $iRow;
        $303 = (14240 + ($302<<4)|0);
        $304 = (($303) + ($301)|0);
        $305 = HEAP8[$304>>0]|0;
        $306 = $305&255;
        $307 = (($299) + ($306))|0;
        $308 = $pSrc;
        $309 = (($308) + ($307<<2)|0);
        $310 = HEAP32[$309>>2]|0;
        $311 = $3;
        $312 = Math_imul($310, $311)|0;
        $313 = $4;
        $314 = $312 >> $313;
        $315 = $nLen;
        $316 = $315&255;
        $317 = $314 << $316;
        $a3 = $317;
        $318 = $a3;
        $319 = ($318|0)<(-32768);
        if ($319) {
         $324 = -32768;
        } else {
         $320 = $a3;
         $321 = (32767)<($320|0);
         if ($321) {
          $520 = 32767;
         } else {
          $322 = $a3;
          $520 = $322;
         }
         $324 = $520;
        }
        $323 = $324&65535;
        $325 = $iAlphaPos;
        $326 = $1;
        $327 = (($326) + 32952|0);
        $328 = HEAP32[$327>>2]|0;
        $329 = $iColumn;
        $330 = $2;
        $331 = $329 >>> $330;
        $332 = $pOffsetX;
        $333 = (($332) + ($331<<2)|0);
        $334 = HEAP32[$333>>2]|0;
        $335 = (($328) + ($334<<1)|0);
        $336 = $iY;
        $337 = (($335) + ($336<<1)|0);
        $338 = (($337) + ($325<<1)|0);
        HEAP16[$338>>1] = $323;
        $339 = $tScale;
        $340 = $iColumn;
        $341 = (($340) + ($339))|0;
        $iColumn = $341;
       }
       $342 = $tScale;
       $343 = $iRow;
       $344 = (($343) + ($342))|0;
       $iRow = $344;
      }
     } else {
      $345 = $bd;
      $346 = ($345|0)==(4);
      if ($346) {
       $347 = $iFirstRow;
       $iRow = $347;
       while(1) {
        $348 = $iRow;
        $349 = $cHeight;
        $350 = ($348>>>0)<($349>>>0);
        if (!($350)) {
         break;
        }
        $351 = $iFirstColumn;
        $iColumn = $351;
        $352 = $iRow;
        $353 = $2;
        $354 = $352 >>> $353;
        $355 = $pOffsetY;
        $356 = (($355) + ($354<<2)|0);
        $357 = HEAP32[$356>>2]|0;
        $iY = $357;
        while(1) {
         $358 = $iColumn;
         $359 = $cWidth;
         $360 = ($358>>>0)<($359>>>0);
         if (!($360)) {
          break;
         }
         $361 = $iColumn;
         $362 = $361 >>> 4;
         $363 = $362 << 8;
         $364 = $iColumn;
         $365 = $364 & 15;
         $366 = $iRow;
         $367 = (14240 + ($366<<4)|0);
         $368 = (($367) + ($365)|0);
         $369 = HEAP8[$368>>0]|0;
         $370 = $369&255;
         $371 = (($363) + ($370))|0;
         $372 = $pSrc;
         $373 = (($372) + ($371<<2)|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $3;
         $376 = Math_imul($374, $375)|0;
         $377 = $4;
         $378 = $376 >> $377;
         $a4 = $378;
         $379 = $a4;
         $380 = (_backwardHalf($379)|0);
         $381 = $iAlphaPos;
         $382 = $1;
         $383 = (($382) + 32952|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = $iColumn;
         $386 = $2;
         $387 = $385 >>> $386;
         $388 = $pOffsetX;
         $389 = (($388) + ($387<<2)|0);
         $390 = HEAP32[$389>>2]|0;
         $391 = (($384) + ($390<<1)|0);
         $392 = $iY;
         $393 = (($391) + ($392<<1)|0);
         $394 = (($393) + ($381<<1)|0);
         HEAP16[$394>>1] = $380;
         $395 = $tScale;
         $396 = $iColumn;
         $397 = (($396) + ($395))|0;
         $iColumn = $397;
        }
        $398 = $tScale;
        $399 = $iRow;
        $400 = (($399) + ($398))|0;
        $iRow = $400;
       }
      } else {
       $401 = $bd;
       $402 = ($401|0)==(6);
       if ($402) {
        $403 = $iFirstRow;
        $iRow = $403;
        while(1) {
         $404 = $iRow;
         $405 = $cHeight;
         $406 = ($404>>>0)<($405>>>0);
         if (!($406)) {
          break;
         }
         $407 = $iFirstColumn;
         $iColumn = $407;
         $408 = $iRow;
         $409 = $2;
         $410 = $408 >>> $409;
         $411 = $pOffsetY;
         $412 = (($411) + ($410<<2)|0);
         $413 = HEAP32[$412>>2]|0;
         $iY = $413;
         while(1) {
          $414 = $iColumn;
          $415 = $cWidth;
          $416 = ($414>>>0)<($415>>>0);
          if (!($416)) {
           break;
          }
          $417 = $iColumn;
          $418 = $417 >>> 4;
          $419 = $418 << 8;
          $420 = $iColumn;
          $421 = $420 & 15;
          $422 = $iRow;
          $423 = (14240 + ($422<<4)|0);
          $424 = (($423) + ($421)|0);
          $425 = HEAP8[$424>>0]|0;
          $426 = $425&255;
          $427 = (($419) + ($426))|0;
          $428 = $pSrc;
          $429 = (($428) + ($427<<2)|0);
          $430 = HEAP32[$429>>2]|0;
          $431 = $3;
          $432 = Math_imul($430, $431)|0;
          $433 = $4;
          $434 = $432 >> $433;
          $435 = $nLen;
          $436 = $435&255;
          $437 = $434 << $436;
          $a5 = $437;
          $438 = $a5;
          $439 = $iAlphaPos;
          $440 = $1;
          $441 = (($440) + 32952|0);
          $442 = HEAP32[$441>>2]|0;
          $443 = $iColumn;
          $444 = $2;
          $445 = $443 >>> $444;
          $446 = $pOffsetX;
          $447 = (($446) + ($445<<2)|0);
          $448 = HEAP32[$447>>2]|0;
          $449 = (($442) + ($448<<2)|0);
          $450 = $iY;
          $451 = (($449) + ($450<<2)|0);
          $452 = (($451) + ($439<<2)|0);
          HEAP32[$452>>2] = $438;
          $453 = $tScale;
          $454 = $iColumn;
          $455 = (($454) + ($453))|0;
          $iColumn = $455;
         }
         $456 = $tScale;
         $457 = $iRow;
         $458 = (($457) + ($456))|0;
         $iRow = $458;
        }
       } else {
        $459 = $bd;
        $460 = ($459|0)==(7);
        if (!($460)) {
         $0 = -1;
         $517 = $0;
         STACKTOP = sp;return ($517|0);
        }
        $461 = $iFirstRow;
        $iRow = $461;
        while(1) {
         $462 = $iRow;
         $463 = $cHeight;
         $464 = ($462>>>0)<($463>>>0);
         if (!($464)) {
          break;
         }
         $465 = $iFirstColumn;
         $iColumn = $465;
         $466 = $iRow;
         $467 = $2;
         $468 = $466 >>> $467;
         $469 = $pOffsetY;
         $470 = (($469) + ($468<<2)|0);
         $471 = HEAP32[$470>>2]|0;
         $iY = $471;
         while(1) {
          $472 = $iColumn;
          $473 = $cWidth;
          $474 = ($472>>>0)<($473>>>0);
          if (!($474)) {
           break;
          }
          $475 = $iColumn;
          $476 = $475 >>> 4;
          $477 = $476 << 8;
          $478 = $iColumn;
          $479 = $478 & 15;
          $480 = $iRow;
          $481 = (14240 + ($480<<4)|0);
          $482 = (($481) + ($479)|0);
          $483 = HEAP8[$482>>0]|0;
          $484 = $483&255;
          $485 = (($477) + ($484))|0;
          $486 = $pSrc;
          $487 = (($486) + ($485<<2)|0);
          $488 = HEAP32[$487>>2]|0;
          $489 = $3;
          $490 = Math_imul($488, $489)|0;
          $491 = $4;
          $492 = $490 >> $491;
          $a6 = $492;
          $493 = $a6;
          $494 = $nExpBias;
          $495 = $nLen;
          $496 = (+_pixel2float($493,$494,$495));
          $497 = $iAlphaPos;
          $498 = $1;
          $499 = (($498) + 32952|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = $iColumn;
          $502 = $2;
          $503 = $501 >>> $502;
          $504 = $pOffsetX;
          $505 = (($504) + ($503<<2)|0);
          $506 = HEAP32[$505>>2]|0;
          $507 = (($500) + ($506<<2)|0);
          $508 = $iY;
          $509 = (($507) + ($508<<2)|0);
          $510 = (($509) + ($497<<2)|0);
          HEAPF32[$510>>2] = $496;
          $511 = $tScale;
          $512 = $iColumn;
          $513 = (($512) + ($511))|0;
          $iColumn = $513;
         }
         $514 = $tScale;
         $515 = $iRow;
         $516 = (($515) + ($514))|0;
         $iRow = $516;
        }
       }
      }
     }
    }
   }
  }
 }
 $0 = 0;
 $517 = $0;
 STACKTOP = sp;return ($517|0);
}
function _decodeThumbnail($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0.0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0.0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0.0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $b = 0, $b10 = 0, $b23 = 0, $b34 = 0, $b39 = 0, $b4 = 0, $b44 = 0, $b49 = 0, $b55 = 0, $b60 = 0, $b65 = 0, $bBW = 0, $bd = 0, $c = 0, $c16 = 0, $c27 = 0, $cByte = 0, $cHeight = 0;
 var $cMul = 0, $cShift = 0, $cWidth = 0, $cfExt = 0, $cfInt = 0, $g = 0, $g2 = 0, $g21 = 0, $g32 = 0, $g37 = 0, $g42 = 0, $g47 = 0, $g53 = 0, $g58 = 0, $g63 = 0, $g8 = 0, $iB = 0, $iBias1 = 0, $iBias112 = 0, $iBias2 = 0;
 var $iBias213 = 0, $iColumn = 0, $iFirstColumn = 0, $iFirstRow = 0, $iIdx1 = 0, $iIdx2 = 0, $iIdx3 = 0, $iPos = 0, $iPos1 = 0, $iPos14 = 0, $iPos20 = 0, $iPos25 = 0, $iPos31 = 0, $iPos36 = 0, $iPos41 = 0, $iPos46 = 0, $iPos5 = 0, $iPos50 = 0, $iPos52 = 0, $iPos57 = 0;
 var $iPos62 = 0, $iPos7 = 0, $iR = 0, $iRow = 0, $iY = 0, $iY66 = 0, $iY67 = 0, $iY69 = 0, $k = 0, $k18 = 0, $k29 = 0, $m = 0, $m15 = 0, $m26 = 0, $nBits = 0, $nExpBias = 0, $nLen = 0, $offset = 0, $ol = 0, $pDst = 0;
 var $pDst19 = 0, $pDst30 = 0, $pDst35 = 0, $pDst40 = 0, $pDst45 = 0, $pDst51 = 0, $pDst56 = 0, $pDst6 = 0, $pDst61 = 0, $pDstU = 0, $pDstV = 0, $pII = 0, $pOffsetX = 0, $pOffsetY = 0, $pSrcK = 0, $pSrcK11 = 0, $pSrcK24 = 0, $pSrcU = 0, $pSrcV = 0, $pSrcY = 0;
 var $pT = 0, $pT68 = 0, $pT70 = 0, $r = 0, $r22 = 0, $r3 = 0, $r33 = 0, $r38 = 0, $r43 = 0, $r48 = 0, $r54 = 0, $r59 = 0, $r64 = 0, $r9 = 0, $rShiftUV = 0, $rShiftY = 0, $tScale = 0, $y = 0, $y17 = 0, $y28 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 34248|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $tScale = $6;
 $7 = $1;
 $8 = (($7) + 34248|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  $13 = (($12) + 4|0);
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $28 = $15;
 } else {
  $16 = $1;
  $17 = (($16) + 34248|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 1)|0;
  $28 = $21;
 }
 $22 = $1;
 $23 = (($22) + 34356|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) - 1)|0;
 $26 = $25<<4;
 $27 = (($28) - ($26))|0;
 $29 = ($27>>>0)<(16);
 if ($29) {
  $30 = $1;
  $31 = (($30) + 34248|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $1;
   $36 = (($35) + 4|0);
   $37 = (($36) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $51 = $38;
  } else {
   $39 = $1;
   $40 = (($39) + 34248|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 1)|0;
   $51 = $44;
  }
  $45 = $1;
  $46 = (($45) + 34356|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) - 1)|0;
  $49 = $48<<4;
  $50 = (($51) - ($49))|0;
  $52 = $50;
 } else {
  $52 = 16;
 }
 $cHeight = $52;
 $53 = $1;
 $54 = (($53) + 34248|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)!=(0);
 if ($57) {
  $58 = $1;
  $59 = (($58) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $67 = $60;
 } else {
  $61 = $1;
  $62 = (($61) + 34248|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + 28|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 1)|0;
  $67 = $66;
 }
 $cWidth = $67;
 $68 = $1;
 $69 = (($68) + 34356|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) - 1)|0;
 $72 = $71<<4;
 $73 = $1;
 $74 = (($73) + 34248|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75) + 32|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($72>>>0)>($77>>>0);
 if ($78) {
  $87 = 0;
 } else {
  $79 = $1;
  $80 = (($79) + 34248|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 32|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $83 & 15;
  $87 = $84;
 }
 $85 = $tScale;
 $86 = (($87) + ($85))|0;
 $88 = (($86) - 1)|0;
 $89 = $tScale;
 $90 = (($88>>>0) / ($89>>>0))&-1;
 $91 = $tScale;
 $92 = Math_imul($90, $91)|0;
 $iFirstRow = $92;
 $93 = $1;
 $94 = (($93) + 34248|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + 24|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $tScale;
 $99 = (($97) + ($98))|0;
 $100 = (($99) - 1)|0;
 $101 = $tScale;
 $102 = (($100>>>0) / ($101>>>0))&-1;
 $103 = $tScale;
 $104 = Math_imul($102, $103)|0;
 $iFirstColumn = $104;
 $105 = $1;
 $106 = (($105) + 34136|0);
 $107 = (($106) + 8|0);
 $108 = HEAP32[$107>>2]|0;
 $cfInt = $108;
 $109 = $1;
 $110 = (($109) + 34136|0);
 $111 = (($110) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)==(0);
 if ($113) {
  $118 = 0;
 } else {
  $114 = $1;
  $115 = (($114) + 4|0);
  $116 = (($115) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $117;
 }
 $cfExt = $118;
 $119 = $1;
 $120 = (($119) + 4|0);
 $121 = (($120) + 12|0);
 $122 = HEAP32[$121>>2]|0;
 $bd = $122;
 $123 = $1;
 $124 = (($123) + 84|0);
 $125 = (($124) + 24|0);
 $126 = HEAP32[$125>>2]|0;
 $ol = $126;
 $127 = $1;
 $128 = (($127) + 4|0);
 $129 = (($128) + 24|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)!=(0);
 $132 = $131 ? 2 : 0;
 $iB = $132;
 $133 = $iB;
 $134 = (2 - ($133))|0;
 $iR = $134;
 $135 = $1;
 $136 = (($135) + 84|0);
 $137 = (($136) + 32840|0);
 $138 = HEAP8[$137>>0]|0;
 $nLen = $138;
 $139 = $1;
 $140 = (($139) + 84|0);
 $141 = (($140) + 32841|0);
 $142 = HEAP8[$141>>0]|0;
 $nExpBias = $142;
 $iIdx3 = 0;
 $nBits = 0;
 $143 = $1;
 $144 = (($143) + 34564|0);
 $145 = HEAP32[$144>>2]|0;
 $pSrcY = $145;
 $146 = $1;
 $147 = (($146) + 34564|0);
 $148 = (($147) + 4|0);
 $149 = HEAP32[$148>>2]|0;
 $pSrcU = $149;
 $150 = $1;
 $151 = (($150) + 34564|0);
 $152 = (($151) + 8|0);
 $153 = HEAP32[$152>>2]|0;
 $pSrcV = $153;
 $154 = $1;
 $155 = (($154) + 34248|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($156) + 40|0);
 $158 = HEAP32[$157>>2]|0;
 $pOffsetX = $158;
 $159 = $1;
 $160 = (($159) + 34248|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($161) + 44|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = $1;
 $165 = (($164) + 34356|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($166) - 1)|0;
 $168 = $167<<4;
 $169 = $tScale;
 $170 = (($168>>>0) / ($169>>>0))&-1;
 $171 = (($163) + ($170<<2)|0);
 $pOffsetY = $171;
 $172 = $tScale;
 $173 = ($172>>>0)>=(16);
 if ($173) {
  $174 = $ol;
  $175 = ($174|0)==(0);
  if ($175) {
   $2650 = 16;
  } else {
   $176 = $ol;
   $177 = ($176|0)==(1);
   $178 = $177 ? 23 : 34;
   $2650 = $178;
  }
  $184 = $2650;
 } else {
  $179 = $tScale;
  $180 = ($179>>>0)>=(4);
  if ($180) {
   $181 = $ol;
   $182 = ($181|0)==(0);
   $183 = $182 ? 64 : 93;
   $2651 = $183;
  } else {
   $2651 = 258;
  }
  $184 = $2651;
 }
 $cMul = $184;
 $185 = $1;
 $186 = (($185) + 34136|0);
 $187 = (($186) + 20|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ($188|0)!=(0);
 $190 = $189 ? 3 : 0;
 $191 = (8 + ($190))|0;
 $rShiftY = $191;
 $192 = $rShiftY;
 $193 = $1;
 $194 = (($193) + 34136|0);
 $195 = (($194) + 20|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ($196|0)!=(0);
 if ($197) {
  $198 = $tScale;
  $199 = ($198>>>0)>=(16);
  if ($199) {
   $200 = $cfInt;
   $201 = ($200|0)==(1);
   if ($201) {
    $205 = 1;
   } else {
    $202 = $cfInt;
    $203 = ($202|0)==(2);
    $205 = $203;
   }
   $204 = $205 ? 2 : 1;
   $207 = $204;
  } else {
   label = 33;
  }
 } else {
  label = 33;
 }
 if ((label|0) == 33) {
  $207 = 0;
 }
 $206 = (($192) - ($207))|0;
 $rShiftUV = $206;
 while(1) {
  $208 = $nBits;
  $209 = 1 << $208;
  $210 = $tScale;
  $211 = ($209>>>0)<($210>>>0);
  if (!($211)) {
   break;
  }
  $212 = $nBits;
  $213 = (($212) + 1)|0;
  $nBits = $213;
 }
 $214 = $tScale;
 $215 = $nBits;
 $216 = 1 << $215;
 $217 = ($214|0)==($216|0);
 if (!($217)) {
  ___assert_fail((8944|0),(8456|0),2041,(8976|0));
  // unreachable;
 }
 $218 = $1;
 $219 = $1;
 $220 = (($219) + 4|0);
 $221 = (($220) + 64|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = ($222>>>0)<(4);
 if ($223) {
  $224 = $1;
  $225 = (($224) + 4|0);
  $226 = (($225) + 36|0);
  $227 = HEAP32[$226>>2]|0;
  $241 = $227;
 } else {
  $228 = $1;
  $229 = (($228) + 4|0);
  $230 = (($229) + 44|0);
  $231 = HEAP32[$230>>2]|0;
  $241 = $231;
 }
 $232 = $cHeight;
 $233 = $iFirstRow;
 $234 = (($232) - ($233))|0;
 $235 = $1;
 $236 = (($235) + 34248|0);
 $237 = HEAP32[$236>>2]|0;
 $238 = (($237) + 12|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = (($234>>>0) / ($239>>>0))&-1;
 $242 = (_checkImageBuffer($218,$241,$240)|0);
 $243 = ($242|0)!=(0);
 if ($243) {
  $0 = -1;
  $2649 = $0;
  STACKTOP = sp;return ($2649|0);
 }
 $244 = $1;
 $245 = (($244) + 34356|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = (($246) - 1)|0;
 $248 = $247<<4;
 $249 = $tScale;
 $250 = (($248>>>0) % ($249>>>0))&-1;
 $251 = ($250|0)!=(0);
 if ($251) {
  $0 = 0;
  $2649 = $0;
  STACKTOP = sp;return ($2649|0);
 }
 $252 = $1;
 $253 = (($252) + 34356|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = $254<<4;
 $256 = $1;
 $257 = (($256) + 34248|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = (($258) + 32|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = ($255>>>0)<=($260>>>0);
 if (!($261)) {
  $262 = $1;
  $263 = (($262) + 34356|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = $264<<4;
  $266 = $1;
  $267 = (($266) + 34248|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (($268) + 36|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = (($270) + 16)|0;
  $272 = ($265>>>0)>($271>>>0);
  if (!($272)) {
   $273 = $cfInt;
   $274 = ($273|0)==(2);
   if ($274) {
    label = 51;
   } else {
    $275 = $cfInt;
    $276 = ($275|0)==(1);
    if ($276) {
     label = 51;
    }
   }
   if ((label|0) == 51) {
    $277 = $cfExt;
    $278 = ($277|0)!=(0);
    if ($278) {
     $279 = $1;
     $280 = (($279) + 34884|0);
     $281 = HEAP32[$280>>2]|0;
     $pDstU = $281;
     $282 = $1;
     $283 = (($282) + 34888|0);
     $284 = HEAP32[$283>>2]|0;
     $pDstV = $284;
     $iRow = 0;
     while(1) {
      $285 = $iRow;
      $286 = ($285>>>0)<(16);
      if (!($286)) {
       break;
      }
      $iColumn = 0;
      while(1) {
       $287 = $iColumn;
       $288 = $cWidth;
       $289 = ($287>>>0)<($288>>>0);
       if (!($289)) {
        break;
       }
       $290 = $cfInt;
       $291 = ($290|0)==(2);
       if ($291) {
        $292 = $iColumn;
        $293 = $292 >>> 4;
        $294 = $293 << 7;
        $295 = $iColumn;
        $296 = $295 >>> 1;
        $297 = $296 & 7;
        $298 = $iRow;
        $299 = (14240 + ($298<<4)|0);
        $300 = (($299) + ($297)|0);
        $301 = HEAP8[$300>>0]|0;
        $302 = $301&255;
        $303 = (($294) + ($302))|0;
        $317 = $303;
       } else {
        $304 = $iColumn;
        $305 = $304 >>> 4;
        $306 = $305 << 6;
        $307 = $iColumn;
        $308 = $307 >>> 1;
        $309 = $308 & 7;
        $310 = $iRow;
        $311 = $310 >>> 1;
        $312 = (14496 + ($311<<3)|0);
        $313 = (($312) + ($309)|0);
        $314 = HEAP8[$313>>0]|0;
        $315 = $314&255;
        $316 = (($306) + ($315))|0;
        $317 = $316;
       }
       $iIdx1 = $317;
       $318 = $iColumn;
       $319 = $318 >>> 4;
       $320 = $319 << 8;
       $321 = $iColumn;
       $322 = $321 & 15;
       $323 = $iRow;
       $324 = (14240 + ($323<<4)|0);
       $325 = (($324) + ($322)|0);
       $326 = HEAP8[$325>>0]|0;
       $327 = $326&255;
       $328 = (($320) + ($327))|0;
       $iIdx2 = $328;
       $329 = $iIdx1;
       $330 = $pSrcU;
       $331 = (($330) + ($329<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $iIdx2;
       $334 = $pDstU;
       $335 = (($334) + ($333<<2)|0);
       HEAP32[$335>>2] = $332;
       $336 = $iIdx1;
       $337 = $pSrcV;
       $338 = (($337) + ($336<<2)|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = $iIdx2;
       $341 = $pDstV;
       $342 = (($341) + ($340<<2)|0);
       HEAP32[$342>>2] = $339;
       $343 = $tScale;
       $344 = $iColumn;
       $345 = (($344) + ($343))|0;
       $iColumn = $345;
      }
      $346 = $tScale;
      $347 = $iRow;
      $348 = (($347) + ($346))|0;
      $iRow = $348;
     }
     $349 = $tScale;
     $350 = ($349|0)==(4);
     if ($350) {
      $351 = $cfInt;
      $352 = ($351|0)==(1);
      if ($352) {
       $iColumn = 0;
       while(1) {
        $353 = $iColumn;
        $354 = $cWidth;
        $355 = ($353>>>0)<($354>>>0);
        if (!($355)) {
         break;
        }
        $356 = $iColumn;
        $357 = $356 >>> 4;
        $358 = $357 << 8;
        $359 = $iColumn;
        $360 = $359 & 15;
        $361 = (14240 + ($360)|0);
        $362 = HEAP8[$361>>0]|0;
        $363 = $362&255;
        $364 = (($358) + ($363))|0;
        $iIdx1 = $364;
        $365 = $iColumn;
        $366 = $365 >>> 4;
        $367 = $366 << 8;
        $368 = $iColumn;
        $369 = $368 & 15;
        $370 = (((14240 + 64|0)) + ($369)|0);
        $371 = HEAP8[$370>>0]|0;
        $372 = $371&255;
        $373 = (($367) + ($372))|0;
        $iIdx2 = $373;
        $374 = $iColumn;
        $375 = $374 >>> 4;
        $376 = $375 << 8;
        $377 = $iColumn;
        $378 = $377 & 15;
        $379 = (((14240 + 128|0)) + ($378)|0);
        $380 = HEAP8[$379>>0]|0;
        $381 = $380&255;
        $382 = (($376) + ($381))|0;
        $iIdx3 = $382;
        $383 = $iIdx1;
        $384 = $pDstU;
        $385 = (($384) + ($383<<2)|0);
        $386 = HEAP32[$385>>2]|0;
        $387 = $iIdx3;
        $388 = $pDstU;
        $389 = (($388) + ($387<<2)|0);
        $390 = HEAP32[$389>>2]|0;
        $391 = (($386) + ($390))|0;
        $392 = (($391) + 1)|0;
        $393 = $392 >> 1;
        $394 = $iIdx2;
        $395 = $pDstU;
        $396 = (($395) + ($394<<2)|0);
        HEAP32[$396>>2] = $393;
        $397 = $iIdx1;
        $398 = $pDstV;
        $399 = (($398) + ($397<<2)|0);
        $400 = HEAP32[$399>>2]|0;
        $401 = $iIdx3;
        $402 = $pDstV;
        $403 = (($402) + ($401<<2)|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = (($400) + ($404))|0;
        $406 = (($405) + 1)|0;
        $407 = $406 >> 1;
        $408 = $iIdx2;
        $409 = $pDstV;
        $410 = (($409) + ($408<<2)|0);
        HEAP32[$410>>2] = $407;
        $411 = $iColumn;
        $412 = $411 >>> 4;
        $413 = $412 << 8;
        $414 = $iColumn;
        $415 = $414 & 15;
        $416 = (((14240 + 192|0)) + ($415)|0);
        $417 = HEAP8[$416>>0]|0;
        $418 = $417&255;
        $419 = (($413) + ($418))|0;
        $iIdx1 = $419;
        $420 = $iIdx3;
        $421 = $pDstU;
        $422 = (($421) + ($420<<2)|0);
        $423 = HEAP32[$422>>2]|0;
        $424 = $iIdx1;
        $425 = $pDstU;
        $426 = (($425) + ($424<<2)|0);
        HEAP32[$426>>2] = $423;
        $427 = $iIdx3;
        $428 = $pDstV;
        $429 = (($428) + ($427<<2)|0);
        $430 = HEAP32[$429>>2]|0;
        $431 = $iIdx1;
        $432 = $pDstV;
        $433 = (($432) + ($431<<2)|0);
        HEAP32[$433>>2] = $430;
        $434 = $iColumn;
        $435 = (($434) + 8)|0;
        $iColumn = $435;
       }
      }
      $iRow = 0;
      while(1) {
       $436 = $iRow;
       $437 = ($436>>>0)<(16);
       if (!($437)) {
        break;
       }
       $iColumn = 0;
       while(1) {
        $438 = $iColumn;
        $439 = $cWidth;
        $440 = (($439) - 8)|0;
        $441 = ($438>>>0)<($440>>>0);
        if (!($441)) {
         break;
        }
        $442 = $iColumn;
        $443 = $442 >>> 4;
        $444 = $443 << 8;
        $445 = $iColumn;
        $446 = $445 & 15;
        $447 = $iRow;
        $448 = (14240 + ($447<<4)|0);
        $449 = (($448) + ($446)|0);
        $450 = HEAP8[$449>>0]|0;
        $451 = $450&255;
        $452 = (($444) + ($451))|0;
        $iIdx1 = $452;
        $453 = $iColumn;
        $454 = $453 >>> 4;
        $455 = $454 << 8;
        $456 = $iColumn;
        $457 = (($456) + 4)|0;
        $458 = $457 & 15;
        $459 = $iRow;
        $460 = (14240 + ($459<<4)|0);
        $461 = (($460) + ($458)|0);
        $462 = HEAP8[$461>>0]|0;
        $463 = $462&255;
        $464 = (($455) + ($463))|0;
        $iIdx2 = $464;
        $465 = $iColumn;
        $466 = $465 >>> 4;
        $467 = $466 << 8;
        $468 = $iColumn;
        $469 = (($468) + 8)|0;
        $470 = $469 & 15;
        $471 = $iRow;
        $472 = (14240 + ($471<<4)|0);
        $473 = (($472) + ($470)|0);
        $474 = HEAP8[$473>>0]|0;
        $475 = $474&255;
        $476 = (($467) + ($475))|0;
        $iIdx3 = $476;
        $477 = $iIdx1;
        $478 = $pDstU;
        $479 = (($478) + ($477<<2)|0);
        $480 = HEAP32[$479>>2]|0;
        $481 = $iIdx3;
        $482 = $pDstU;
        $483 = (($482) + ($481<<2)|0);
        $484 = HEAP32[$483>>2]|0;
        $485 = (($480) + ($484))|0;
        $486 = (($485) + 1)|0;
        $487 = $486 >> 1;
        $488 = $iIdx2;
        $489 = $pDstU;
        $490 = (($489) + ($488<<2)|0);
        HEAP32[$490>>2] = $487;
        $491 = $iIdx1;
        $492 = $pDstV;
        $493 = (($492) + ($491<<2)|0);
        $494 = HEAP32[$493>>2]|0;
        $495 = $iIdx3;
        $496 = $pDstV;
        $497 = (($496) + ($495<<2)|0);
        $498 = HEAP32[$497>>2]|0;
        $499 = (($494) + ($498))|0;
        $500 = (($499) + 1)|0;
        $501 = $500 >> 1;
        $502 = $iIdx2;
        $503 = $pDstV;
        $504 = (($503) + ($502<<2)|0);
        HEAP32[$504>>2] = $501;
        $505 = $iColumn;
        $506 = (($505) + 8)|0;
        $iColumn = $506;
       }
       $507 = $iColumn;
       $508 = $507 >>> 4;
       $509 = $508 << 8;
       $510 = $iColumn;
       $511 = (($510) + 4)|0;
       $512 = $511 & 15;
       $513 = $iRow;
       $514 = (14240 + ($513<<4)|0);
       $515 = (($514) + ($512)|0);
       $516 = HEAP8[$515>>0]|0;
       $517 = $516&255;
       $518 = (($509) + ($517))|0;
       $iIdx2 = $518;
       $519 = $iIdx3;
       $520 = $pDstU;
       $521 = (($520) + ($519<<2)|0);
       $522 = HEAP32[$521>>2]|0;
       $523 = $iIdx2;
       $524 = $pDstU;
       $525 = (($524) + ($523<<2)|0);
       HEAP32[$525>>2] = $522;
       $526 = $iIdx3;
       $527 = $pDstV;
       $528 = (($527) + ($526<<2)|0);
       $529 = HEAP32[$528>>2]|0;
       $530 = $iIdx2;
       $531 = $pDstV;
       $532 = (($531) + ($530<<2)|0);
       HEAP32[$532>>2] = $529;
       $533 = $iRow;
       $534 = (($533) + 4)|0;
       $iRow = $534;
      }
     }
     $535 = $pDstU;
     $pSrcU = $535;
     $536 = $pDstV;
     $pSrcV = $536;
    }
   }
   $537 = $bd;
   $538 = ($537|0)==(1);
   if ($538) {
    $539 = $rShiftY;
    $540 = 128 << $539;
    $541 = $cMul;
    $542 = (($540|0) / ($541|0))&-1;
    $offset = $542;
    $543 = $cfExt;
    switch ($543|0) {
    case 7:  {
     $544 = $iFirstRow;
     $iRow = $544;
     while(1) {
      $545 = $iRow;
      $546 = $cHeight;
      $547 = ($545>>>0)<($546>>>0);
      if (!($547)) {
       break;
      }
      $548 = $iFirstColumn;
      $iColumn = $548;
      $549 = $iRow;
      $550 = $nBits;
      $551 = $549 >>> $550;
      $552 = $pOffsetY;
      $553 = (($552) + ($551<<2)|0);
      $554 = HEAP32[$553>>2]|0;
      $iY = $554;
      while(1) {
       $555 = $iColumn;
       $556 = $cWidth;
       $557 = ($555>>>0)<($556>>>0);
       if (!($557)) {
        break;
       }
       $558 = $iColumn;
       $559 = $558 >>> 4;
       $560 = $559 << 8;
       $561 = $iColumn;
       $562 = $561 & 15;
       $563 = $iRow;
       $564 = (14240 + ($563<<4)|0);
       $565 = (($564) + ($562)|0);
       $566 = HEAP8[$565>>0]|0;
       $567 = $566&255;
       $568 = (($560) + ($567))|0;
       $iPos = $568;
       $569 = $iPos;
       $570 = $pSrcY;
       $571 = (($570) + ($569<<2)|0);
       $572 = HEAP32[$571>>2]|0;
       $573 = $offset;
       $574 = (($572) + ($573))|0;
       $575 = $cMul;
       $576 = Math_imul($574, $575)|0;
       $577 = $rShiftY;
       $578 = $576 >> $577;
       $g = $578;
       $579 = $iPos;
       $580 = $pSrcU;
       $581 = (($580) + ($579<<2)|0);
       $582 = HEAP32[$581>>2]|0;
       $583 = $cMul;
       $584 = Math_imul($582, $583)|0;
       $585 = (0 - ($584))|0;
       $586 = $rShiftUV;
       $587 = $585 >> $586;
       $r = $587;
       $588 = $iPos;
       $589 = $pSrcV;
       $590 = (($589) + ($588<<2)|0);
       $591 = HEAP32[$590>>2]|0;
       $592 = $cMul;
       $593 = Math_imul($591, $592)|0;
       $594 = $rShiftUV;
       $595 = $593 >> $594;
       $b = $595;
       $596 = $r;
       $597 = (($596) + 0)|0;
       $598 = $597 >> 1;
       $599 = $g;
       $600 = (($599) - ($598))|0;
       $g = $600;
       $601 = $b;
       $602 = (($601) + 1)|0;
       $603 = $602 >> 1;
       $604 = $g;
       $605 = (($603) - ($604))|0;
       $606 = $r;
       $607 = (($606) - ($605))|0;
       $r = $607;
       $608 = $r;
       $609 = $b;
       $610 = (($609) + ($608))|0;
       $b = $610;
       $611 = $1;
       $612 = (($611) + 32952|0);
       $613 = HEAP32[$612>>2]|0;
       $614 = $iColumn;
       $615 = $nBits;
       $616 = $614 >>> $615;
       $617 = $pOffsetX;
       $618 = (($617) + ($616<<2)|0);
       $619 = HEAP32[$618>>2]|0;
       $620 = (($613) + ($619)|0);
       $621 = $iY;
       $622 = (($620) + ($621)|0);
       $pDst = $622;
       $623 = $b;
       $624 = ($623|0)<(0);
       if ($624) {
        $629 = 0;
       } else {
        $625 = $b;
        $626 = (255)<($625|0);
        if ($626) {
         $2652 = 255;
        } else {
         $627 = $b;
         $2652 = $627;
        }
        $629 = $2652;
       }
       $628 = $629&255;
       $630 = $iB;
       $631 = $pDst;
       $632 = (($631) + ($630)|0);
       HEAP8[$632>>0] = $628;
       $633 = $g;
       $634 = ($633|0)<(0);
       if ($634) {
        $639 = 0;
       } else {
        $635 = $g;
        $636 = (255)<($635|0);
        if ($636) {
         $2653 = 255;
        } else {
         $637 = $g;
         $2653 = $637;
        }
        $639 = $2653;
       }
       $638 = $639&255;
       $640 = $pDst;
       $641 = (($640) + 1|0);
       HEAP8[$641>>0] = $638;
       $642 = $r;
       $643 = ($642|0)<(0);
       if ($643) {
        $648 = 0;
       } else {
        $644 = $r;
        $645 = (255)<($644|0);
        if ($645) {
         $2654 = 255;
        } else {
         $646 = $r;
         $2654 = $646;
        }
        $648 = $2654;
       }
       $647 = $648&255;
       $649 = $iR;
       $650 = $pDst;
       $651 = (($650) + ($649)|0);
       HEAP8[$651>>0] = $647;
       $652 = $tScale;
       $653 = $iColumn;
       $654 = (($653) + ($652))|0;
       $iColumn = $654;
      }
      $655 = $tScale;
      $656 = $iRow;
      $657 = (($656) + ($655))|0;
      $iRow = $657;
     }
     break;
    }
    case 4:  {
     $756 = $1;
     $757 = (($756) + 34564|0);
     $758 = (($757) + 12|0);
     $759 = HEAP32[$758>>2]|0;
     $pSrcK = $759;
     $760 = $rShiftY;
     $761 = 128 << $760;
     $762 = $cMul;
     $763 = (($761|0) / ($762|0))&-1;
     $iBias1 = $763;
     $764 = $rShiftUV;
     $765 = 128 << $764;
     $766 = $cMul;
     $767 = (($765|0) / ($766|0))&-1;
     $768 = $767 >> 1;
     $iBias2 = $768;
     $769 = $iFirstRow;
     $iRow = $769;
     while(1) {
      $770 = $iRow;
      $771 = $cHeight;
      $772 = ($770>>>0)<($771>>>0);
      if (!($772)) {
       break;
      }
      $773 = $iFirstColumn;
      $iColumn = $773;
      $774 = $iRow;
      $775 = $nBits;
      $776 = $774 >>> $775;
      $777 = $pOffsetY;
      $778 = (($777) + ($776<<2)|0);
      $779 = HEAP32[$778>>2]|0;
      $iY = $779;
      while(1) {
       $780 = $iColumn;
       $781 = $cWidth;
       $782 = ($780>>>0)<($781>>>0);
       if (!($782)) {
        break;
       }
       $783 = $iColumn;
       $784 = $783 >>> 4;
       $785 = $784 << 8;
       $786 = $iColumn;
       $787 = $786 & 15;
       $788 = $iRow;
       $789 = (14240 + ($788<<4)|0);
       $790 = (($789) + ($787)|0);
       $791 = HEAP8[$790>>0]|0;
       $792 = $791&255;
       $793 = (($785) + ($792))|0;
       $iPos5 = $793;
       $794 = $iPos5;
       $795 = $pSrcY;
       $796 = (($795) + ($794<<2)|0);
       $797 = HEAP32[$796>>2]|0;
       $798 = (0 - ($797))|0;
       $799 = $iBias1;
       $800 = (($798) + ($799))|0;
       $801 = $cMul;
       $802 = Math_imul($800, $801)|0;
       $803 = $rShiftY;
       $804 = $802 >> $803;
       $m = $804;
       $805 = $iPos5;
       $806 = $pSrcU;
       $807 = (($806) + ($805<<2)|0);
       $808 = HEAP32[$807>>2]|0;
       $809 = $cMul;
       $810 = Math_imul($808, $809)|0;
       $811 = $rShiftUV;
       $812 = $810 >> $811;
       $c = $812;
       $813 = $iPos5;
       $814 = $pSrcV;
       $815 = (($814) + ($813<<2)|0);
       $816 = HEAP32[$815>>2]|0;
       $817 = $cMul;
       $818 = Math_imul($816, $817)|0;
       $819 = (0 - ($818))|0;
       $820 = $rShiftUV;
       $821 = $819 >> $820;
       $y = $821;
       $822 = $iPos5;
       $823 = $pSrcK;
       $824 = (($823) + ($822<<2)|0);
       $825 = HEAP32[$824>>2]|0;
       $826 = $iBias2;
       $827 = (($825) + ($826))|0;
       $828 = $cMul;
       $829 = Math_imul($827, $828)|0;
       $830 = $rShiftUV;
       $831 = $829 >> $830;
       $k = $831;
       $832 = $m;
       $833 = (($832) + 1)|0;
       $834 = $833 >> 1;
       $835 = $k;
       $836 = (($835) - ($834))|0;
       $k = $836;
       $837 = $c;
       $838 = $837 >> 1;
       $839 = $k;
       $840 = (($838) - ($839))|0;
       $841 = $m;
       $842 = (($841) - ($840))|0;
       $m = $842;
       $843 = $y;
       $844 = (($843) + 1)|0;
       $845 = $844 >> 1;
       $846 = $m;
       $847 = (($845) - ($846))|0;
       $848 = $c;
       $849 = (($848) - ($847))|0;
       $c = $849;
       $850 = $c;
       $851 = $y;
       $852 = (($851) + ($850))|0;
       $y = $852;
       $853 = $1;
       $854 = (($853) + 32952|0);
       $855 = HEAP32[$854>>2]|0;
       $856 = $iColumn;
       $857 = $nBits;
       $858 = $856 >>> $857;
       $859 = $pOffsetX;
       $860 = (($859) + ($858<<2)|0);
       $861 = HEAP32[$860>>2]|0;
       $862 = (($855) + ($861)|0);
       $863 = $iY;
       $864 = (($862) + ($863)|0);
       $pDst = $864;
       $865 = $c;
       $866 = ($865|0)<(0);
       if ($866) {
        $871 = 0;
       } else {
        $867 = $c;
        $868 = (255)<($867|0);
        if ($868) {
         $2655 = 255;
        } else {
         $869 = $c;
         $2655 = $869;
        }
        $871 = $2655;
       }
       $870 = $871&255;
       $872 = $pDst;
       HEAP8[$872>>0] = $870;
       $873 = $m;
       $874 = ($873|0)<(0);
       if ($874) {
        $879 = 0;
       } else {
        $875 = $m;
        $876 = (255)<($875|0);
        if ($876) {
         $2656 = 255;
        } else {
         $877 = $m;
         $2656 = $877;
        }
        $879 = $2656;
       }
       $878 = $879&255;
       $880 = $pDst;
       $881 = (($880) + 1|0);
       HEAP8[$881>>0] = $878;
       $882 = $y;
       $883 = ($882|0)<(0);
       if ($883) {
        $888 = 0;
       } else {
        $884 = $y;
        $885 = (255)<($884|0);
        if ($885) {
         $2657 = 255;
        } else {
         $886 = $y;
         $2657 = $886;
        }
        $888 = $2657;
       }
       $887 = $888&255;
       $889 = $pDst;
       $890 = (($889) + 2|0);
       HEAP8[$890>>0] = $887;
       $891 = $k;
       $892 = ($891|0)<(0);
       if ($892) {
        $897 = 0;
       } else {
        $893 = $k;
        $894 = (255)<($893|0);
        if ($894) {
         $2658 = 255;
        } else {
         $895 = $k;
         $2658 = $895;
        }
        $897 = $2658;
       }
       $896 = $897&255;
       $898 = $pDst;
       $899 = (($898) + 3|0);
       HEAP8[$899>>0] = $896;
       $900 = $tScale;
       $901 = $iColumn;
       $902 = (($901) + ($900))|0;
       $iColumn = $902;
      }
      $903 = $tScale;
      $904 = $iRow;
      $905 = (($904) + ($903))|0;
      $iRow = $905;
     }
     break;
    }
    case 8:  {
     $663 = $iFirstRow;
     $iRow = $663;
     while(1) {
      $664 = $iRow;
      $665 = $cHeight;
      $666 = ($664>>>0)<($665>>>0);
      if (!($666)) {
       break;
      }
      $667 = $iFirstColumn;
      $iColumn = $667;
      $668 = $iRow;
      $669 = $nBits;
      $670 = $668 >>> $669;
      $671 = $pOffsetY;
      $672 = (($671) + ($670<<2)|0);
      $673 = HEAP32[$672>>2]|0;
      $iY = $673;
      while(1) {
       $674 = $iColumn;
       $675 = $cWidth;
       $676 = ($674>>>0)<($675>>>0);
       if (!($676)) {
        break;
       }
       $677 = $iColumn;
       $678 = $677 >>> 4;
       $679 = $678 << 8;
       $680 = $iColumn;
       $681 = $680 & 15;
       $682 = $iRow;
       $683 = (14240 + ($682<<4)|0);
       $684 = (($683) + ($681)|0);
       $685 = HEAP8[$684>>0]|0;
       $686 = $685&255;
       $687 = (($679) + ($686))|0;
       $iPos1 = $687;
       $688 = $iPos1;
       $689 = $pSrcY;
       $690 = (($689) + ($688<<2)|0);
       $691 = HEAP32[$690>>2]|0;
       $692 = $cMul;
       $693 = Math_imul($691, $692)|0;
       $694 = $rShiftY;
       $695 = $693 >> $694;
       $g2 = $695;
       $696 = $iPos1;
       $697 = $pSrcU;
       $698 = (($697) + ($696<<2)|0);
       $699 = HEAP32[$698>>2]|0;
       $700 = $cMul;
       $701 = Math_imul($699, $700)|0;
       $702 = $rShiftUV;
       $703 = $701 >> $702;
       $704 = (0 - ($703))|0;
       $r3 = $704;
       $705 = $iPos1;
       $706 = $pSrcV;
       $707 = (($706) + ($705<<2)|0);
       $708 = HEAP32[$707>>2]|0;
       $709 = $cMul;
       $710 = Math_imul($708, $709)|0;
       $711 = $rShiftUV;
       $712 = $710 >> $711;
       $b4 = $712;
       $713 = $r3;
       $714 = (($713) + 0)|0;
       $715 = $714 >> 1;
       $716 = $g2;
       $717 = (($716) - ($715))|0;
       $g2 = $717;
       $718 = $b4;
       $719 = (($718) + 1)|0;
       $720 = $719 >> 1;
       $721 = $g2;
       $722 = (($720) - ($721))|0;
       $723 = $r3;
       $724 = (($723) - ($722))|0;
       $r3 = $724;
       $725 = $r3;
       $726 = $b4;
       $727 = (($726) + ($725))|0;
       $b4 = $727;
       $728 = $1;
       $729 = (($728) + 32952|0);
       $730 = HEAP32[$729>>2]|0;
       $731 = $iColumn;
       $732 = $nBits;
       $733 = $731 >>> $732;
       $734 = $pOffsetX;
       $735 = (($734) + ($733<<2)|0);
       $736 = HEAP32[$735>>2]|0;
       $737 = (($730) + ($736)|0);
       $738 = $iY;
       $739 = (($737) + ($738)|0);
       $pDst = $739;
       $740 = $r3;
       $741 = $g2;
       $742 = $b4;
       $743 = $pDst;
       $744 = $pDst;
       $745 = (($744) + 1|0);
       $746 = $pDst;
       $747 = (($746) + 2|0);
       $748 = $pDst;
       $749 = (($748) + 3|0);
       _inverseConvertRGBE($740,$741,$742,$743,$745,$747,$749);
       $750 = $tScale;
       $751 = $iColumn;
       $752 = (($751) + ($750))|0;
       $iColumn = $752;
      }
      $753 = $tScale;
      $754 = $iRow;
      $755 = (($754) + ($753))|0;
      $iRow = $755;
     }
     break;
    }
    case 6: case 3: case 0:  {
     $658 = $1;
     $659 = $cMul;
     $660 = $rShiftY;
     $661 = $iFirstRow;
     $662 = $iFirstColumn;
     _outputNChannelThumbnail($658,$659,$660,$661,$662);
     break;
    }
    default: {
     ___assert_fail((8496|0),(8456|0),2161,(8976|0));
     // unreachable;
    }
    }
   }
   $906 = $bd;
   $907 = ($906|0)==(2);
   if ($907) {
    $908 = $nLen;
    $909 = $908&255;
    $910 = 32768 >> $909;
    $911 = $rShiftY;
    $912 = $910 << $911;
    $913 = $cMul;
    $914 = (($912|0) / ($913|0))&-1;
    $offset = $914;
    $915 = $cfExt;
    switch ($915|0) {
    case 7:  {
     $916 = $iFirstRow;
     $iRow = $916;
     while(1) {
      $917 = $iRow;
      $918 = $cHeight;
      $919 = ($917>>>0)<($918>>>0);
      if (!($919)) {
       break;
      }
      $920 = $iFirstColumn;
      $iColumn = $920;
      $921 = $iRow;
      $922 = $nBits;
      $923 = $921 >>> $922;
      $924 = $pOffsetY;
      $925 = (($924) + ($923<<2)|0);
      $926 = HEAP32[$925>>2]|0;
      $iY = $926;
      while(1) {
       $927 = $iColumn;
       $928 = $cWidth;
       $929 = ($927>>>0)<($928>>>0);
       if (!($929)) {
        break;
       }
       $930 = $iColumn;
       $931 = $930 >>> 4;
       $932 = $931 << 8;
       $933 = $iColumn;
       $934 = $933 & 15;
       $935 = $iRow;
       $936 = (14240 + ($935<<4)|0);
       $937 = (($936) + ($934)|0);
       $938 = HEAP8[$937>>0]|0;
       $939 = $938&255;
       $940 = (($932) + ($939))|0;
       $iPos7 = $940;
       $941 = $iPos7;
       $942 = $pSrcY;
       $943 = (($942) + ($941<<2)|0);
       $944 = HEAP32[$943>>2]|0;
       $945 = $offset;
       $946 = (($944) + ($945))|0;
       $947 = $cMul;
       $948 = Math_imul($946, $947)|0;
       $949 = $rShiftY;
       $950 = $948 >> $949;
       $g8 = $950;
       $951 = $iPos7;
       $952 = $pSrcU;
       $953 = (($952) + ($951<<2)|0);
       $954 = HEAP32[$953>>2]|0;
       $955 = $cMul;
       $956 = Math_imul($954, $955)|0;
       $957 = (0 - ($956))|0;
       $958 = $rShiftUV;
       $959 = $957 >> $958;
       $r9 = $959;
       $960 = $iPos7;
       $961 = $pSrcV;
       $962 = (($961) + ($960<<2)|0);
       $963 = HEAP32[$962>>2]|0;
       $964 = $cMul;
       $965 = Math_imul($963, $964)|0;
       $966 = $rShiftUV;
       $967 = $965 >> $966;
       $b10 = $967;
       $968 = $r9;
       $969 = (($968) + 0)|0;
       $970 = $969 >> 1;
       $971 = $g8;
       $972 = (($971) - ($970))|0;
       $g8 = $972;
       $973 = $b10;
       $974 = (($973) + 1)|0;
       $975 = $974 >> 1;
       $976 = $g8;
       $977 = (($975) - ($976))|0;
       $978 = $r9;
       $979 = (($978) - ($977))|0;
       $r9 = $979;
       $980 = $r9;
       $981 = $b10;
       $982 = (($981) + ($980))|0;
       $b10 = $982;
       $983 = $1;
       $984 = (($983) + 32952|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = $iColumn;
       $987 = $nBits;
       $988 = $986 >>> $987;
       $989 = $pOffsetX;
       $990 = (($989) + ($988<<2)|0);
       $991 = HEAP32[$990>>2]|0;
       $992 = (($985) + ($991<<1)|0);
       $993 = $iY;
       $994 = (($992) + ($993<<1)|0);
       $pDst6 = $994;
       $995 = $nLen;
       $996 = $995&255;
       $997 = $r9;
       $998 = $997 << $996;
       $r9 = $998;
       $999 = $nLen;
       $1000 = $999&255;
       $1001 = $g8;
       $1002 = $1001 << $1000;
       $g8 = $1002;
       $1003 = $nLen;
       $1004 = $1003&255;
       $1005 = $b10;
       $1006 = $1005 << $1004;
       $b10 = $1006;
       $1007 = $r9;
       $1008 = ($1007|0)<(0);
       if ($1008) {
        $1013 = 0;
       } else {
        $1009 = $r9;
        $1010 = (65535)<($1009|0);
        if ($1010) {
         $2659 = 65535;
        } else {
         $1011 = $r9;
         $2659 = $1011;
        }
        $1013 = $2659;
       }
       $1012 = $1013&65535;
       $1014 = $pDst6;
       HEAP16[$1014>>1] = $1012;
       $1015 = $g8;
       $1016 = ($1015|0)<(0);
       if ($1016) {
        $1021 = 0;
       } else {
        $1017 = $g8;
        $1018 = (65535)<($1017|0);
        if ($1018) {
         $2660 = 65535;
        } else {
         $1019 = $g8;
         $2660 = $1019;
        }
        $1021 = $2660;
       }
       $1020 = $1021&65535;
       $1022 = $pDst6;
       $1023 = (($1022) + 2|0);
       HEAP16[$1023>>1] = $1020;
       $1024 = $b10;
       $1025 = ($1024|0)<(0);
       if ($1025) {
        $1030 = 0;
       } else {
        $1026 = $b10;
        $1027 = (65535)<($1026|0);
        if ($1027) {
         $2661 = 65535;
        } else {
         $1028 = $b10;
         $2661 = $1028;
        }
        $1030 = $2661;
       }
       $1029 = $1030&65535;
       $1031 = $pDst6;
       $1032 = (($1031) + 4|0);
       HEAP16[$1032>>1] = $1029;
       $1033 = $tScale;
       $1034 = $iColumn;
       $1035 = (($1034) + ($1033))|0;
       $iColumn = $1035;
      }
      $1036 = $tScale;
      $1037 = $iRow;
      $1038 = (($1037) + ($1036))|0;
      $iRow = $1038;
     }
     break;
    }
    case 6: case 3: case 0:  {
     $1039 = $1;
     $1040 = $cMul;
     $1041 = $rShiftY;
     $1042 = $iFirstRow;
     $1043 = $iFirstColumn;
     _outputNChannelThumbnail($1039,$1040,$1041,$1042,$1043);
     break;
    }
    case 4:  {
     $1044 = $1;
     $1045 = (($1044) + 34564|0);
     $1046 = (($1045) + 12|0);
     $1047 = HEAP32[$1046>>2]|0;
     $pSrcK11 = $1047;
     $1048 = $rShiftY;
     $1049 = 32768 << $1048;
     $1050 = $cMul;
     $1051 = (($1049|0) / ($1050|0))&-1;
     $iBias112 = $1051;
     $1052 = $rShiftUV;
     $1053 = 32768 << $1052;
     $1054 = $cMul;
     $1055 = (($1053|0) / ($1054|0))&-1;
     $1056 = $1055 >> 1;
     $iBias213 = $1056;
     $1057 = $iFirstRow;
     $iRow = $1057;
     while(1) {
      $1058 = $iRow;
      $1059 = $cHeight;
      $1060 = ($1058>>>0)<($1059>>>0);
      if (!($1060)) {
       break;
      }
      $1061 = $iFirstColumn;
      $iColumn = $1061;
      $1062 = $iRow;
      $1063 = $nBits;
      $1064 = $1062 >>> $1063;
      $1065 = $pOffsetY;
      $1066 = (($1065) + ($1064<<2)|0);
      $1067 = HEAP32[$1066>>2]|0;
      $iY = $1067;
      while(1) {
       $1068 = $iColumn;
       $1069 = $cWidth;
       $1070 = ($1068>>>0)<($1069>>>0);
       if (!($1070)) {
        break;
       }
       $1071 = $iColumn;
       $1072 = $1071 >>> 4;
       $1073 = $1072 << 8;
       $1074 = $iColumn;
       $1075 = $1074 & 15;
       $1076 = $iRow;
       $1077 = (14240 + ($1076<<4)|0);
       $1078 = (($1077) + ($1075)|0);
       $1079 = HEAP8[$1078>>0]|0;
       $1080 = $1079&255;
       $1081 = (($1073) + ($1080))|0;
       $iPos14 = $1081;
       $1082 = $iPos14;
       $1083 = $pSrcY;
       $1084 = (($1083) + ($1082<<2)|0);
       $1085 = HEAP32[$1084>>2]|0;
       $1086 = (0 - ($1085))|0;
       $1087 = $iBias112;
       $1088 = (($1086) + ($1087))|0;
       $1089 = $cMul;
       $1090 = Math_imul($1088, $1089)|0;
       $1091 = $rShiftY;
       $1092 = $1090 >> $1091;
       $m15 = $1092;
       $1093 = $iPos14;
       $1094 = $pSrcU;
       $1095 = (($1094) + ($1093<<2)|0);
       $1096 = HEAP32[$1095>>2]|0;
       $1097 = $cMul;
       $1098 = Math_imul($1096, $1097)|0;
       $1099 = $rShiftUV;
       $1100 = $1098 >> $1099;
       $c16 = $1100;
       $1101 = $iPos14;
       $1102 = $pSrcV;
       $1103 = (($1102) + ($1101<<2)|0);
       $1104 = HEAP32[$1103>>2]|0;
       $1105 = $cMul;
       $1106 = Math_imul($1104, $1105)|0;
       $1107 = (0 - ($1106))|0;
       $1108 = $rShiftUV;
       $1109 = $1107 >> $1108;
       $y17 = $1109;
       $1110 = $iPos14;
       $1111 = $pSrcK11;
       $1112 = (($1111) + ($1110<<2)|0);
       $1113 = HEAP32[$1112>>2]|0;
       $1114 = $iBias213;
       $1115 = (($1113) + ($1114))|0;
       $1116 = $cMul;
       $1117 = Math_imul($1115, $1116)|0;
       $1118 = $rShiftUV;
       $1119 = $1117 >> $1118;
       $k18 = $1119;
       $1120 = $m15;
       $1121 = (($1120) + 1)|0;
       $1122 = $1121 >> 1;
       $1123 = $k18;
       $1124 = (($1123) - ($1122))|0;
       $k18 = $1124;
       $1125 = $c16;
       $1126 = $1125 >> 1;
       $1127 = $k18;
       $1128 = (($1126) - ($1127))|0;
       $1129 = $m15;
       $1130 = (($1129) - ($1128))|0;
       $m15 = $1130;
       $1131 = $y17;
       $1132 = (($1131) + 1)|0;
       $1133 = $1132 >> 1;
       $1134 = $m15;
       $1135 = (($1133) - ($1134))|0;
       $1136 = $c16;
       $1137 = (($1136) - ($1135))|0;
       $c16 = $1137;
       $1138 = $c16;
       $1139 = $y17;
       $1140 = (($1139) + ($1138))|0;
       $y17 = $1140;
       $1141 = $1;
       $1142 = (($1141) + 32952|0);
       $1143 = HEAP32[$1142>>2]|0;
       $1144 = $iColumn;
       $1145 = $nBits;
       $1146 = $1144 >>> $1145;
       $1147 = $pOffsetX;
       $1148 = (($1147) + ($1146<<2)|0);
       $1149 = HEAP32[$1148>>2]|0;
       $1150 = (($1143) + ($1149<<1)|0);
       $1151 = $iY;
       $1152 = (($1150) + ($1151<<1)|0);
       $pDst6 = $1152;
       $1153 = $nLen;
       $1154 = $1153&255;
       $1155 = $c16;
       $1156 = $1155 << $1154;
       $c16 = $1156;
       $1157 = $nLen;
       $1158 = $1157&255;
       $1159 = $m15;
       $1160 = $1159 << $1158;
       $m15 = $1160;
       $1161 = $nLen;
       $1162 = $1161&255;
       $1163 = $y17;
       $1164 = $1163 << $1162;
       $y17 = $1164;
       $1165 = $nLen;
       $1166 = $1165&255;
       $1167 = $k18;
       $1168 = $1167 << $1166;
       $k18 = $1168;
       $1169 = $c16;
       $1170 = ($1169|0)<(0);
       if ($1170) {
        $1175 = 0;
       } else {
        $1171 = $c16;
        $1172 = (65535)<($1171|0);
        if ($1172) {
         $2662 = 65535;
        } else {
         $1173 = $c16;
         $2662 = $1173;
        }
        $1175 = $2662;
       }
       $1174 = $1175&65535;
       $1176 = $pDst6;
       HEAP16[$1176>>1] = $1174;
       $1177 = $m15;
       $1178 = ($1177|0)<(0);
       if ($1178) {
        $1183 = 0;
       } else {
        $1179 = $m15;
        $1180 = (65535)<($1179|0);
        if ($1180) {
         $2663 = 65535;
        } else {
         $1181 = $m15;
         $2663 = $1181;
        }
        $1183 = $2663;
       }
       $1182 = $1183&65535;
       $1184 = $pDst6;
       $1185 = (($1184) + 2|0);
       HEAP16[$1185>>1] = $1182;
       $1186 = $y17;
       $1187 = ($1186|0)<(0);
       if ($1187) {
        $1192 = 0;
       } else {
        $1188 = $y17;
        $1189 = (65535)<($1188|0);
        if ($1189) {
         $2664 = 65535;
        } else {
         $1190 = $y17;
         $2664 = $1190;
        }
        $1192 = $2664;
       }
       $1191 = $1192&65535;
       $1193 = $pDst6;
       $1194 = (($1193) + 4|0);
       HEAP16[$1194>>1] = $1191;
       $1195 = $k18;
       $1196 = ($1195|0)<(0);
       if ($1196) {
        $1201 = 0;
       } else {
        $1197 = $k18;
        $1198 = (65535)<($1197|0);
        if ($1198) {
         $2665 = 65535;
        } else {
         $1199 = $k18;
         $2665 = $1199;
        }
        $1201 = $2665;
       }
       $1200 = $1201&65535;
       $1202 = $pDst6;
       $1203 = (($1202) + 6|0);
       HEAP16[$1203>>1] = $1200;
       $1204 = $tScale;
       $1205 = $iColumn;
       $1206 = (($1205) + ($1204))|0;
       $iColumn = $1206;
      }
      $1207 = $tScale;
      $1208 = $iRow;
      $1209 = (($1208) + ($1207))|0;
      $iRow = $1209;
     }
     break;
    }
    default: {
     ___assert_fail((8496|0),(8456|0),2217,(8976|0));
     // unreachable;
    }
    }
   }
   $1210 = $bd;
   $1211 = ($1210|0)==(3);
   if ($1211) {
    $1212 = $cfExt;
    switch ($1212|0) {
    case 7:  {
     $1213 = $iFirstRow;
     $iRow = $1213;
     while(1) {
      $1214 = $iRow;
      $1215 = $cHeight;
      $1216 = ($1214>>>0)<($1215>>>0);
      if (!($1216)) {
       break;
      }
      $1217 = $iFirstColumn;
      $iColumn = $1217;
      $1218 = $iRow;
      $1219 = $nBits;
      $1220 = $1218 >>> $1219;
      $1221 = $pOffsetY;
      $1222 = (($1221) + ($1220<<2)|0);
      $1223 = HEAP32[$1222>>2]|0;
      $iY = $1223;
      while(1) {
       $1224 = $iColumn;
       $1225 = $cWidth;
       $1226 = ($1224>>>0)<($1225>>>0);
       if (!($1226)) {
        break;
       }
       $1227 = $iColumn;
       $1228 = $1227 >>> 4;
       $1229 = $1228 << 8;
       $1230 = $iColumn;
       $1231 = $1230 & 15;
       $1232 = $iRow;
       $1233 = (14240 + ($1232<<4)|0);
       $1234 = (($1233) + ($1231)|0);
       $1235 = HEAP8[$1234>>0]|0;
       $1236 = $1235&255;
       $1237 = (($1229) + ($1236))|0;
       $iPos20 = $1237;
       $1238 = $iPos20;
       $1239 = $pSrcY;
       $1240 = (($1239) + ($1238<<2)|0);
       $1241 = HEAP32[$1240>>2]|0;
       $1242 = $cMul;
       $1243 = Math_imul($1241, $1242)|0;
       $1244 = $rShiftY;
       $1245 = $1243 >> $1244;
       $g21 = $1245;
       $1246 = $iPos20;
       $1247 = $pSrcU;
       $1248 = (($1247) + ($1246<<2)|0);
       $1249 = HEAP32[$1248>>2]|0;
       $1250 = $cMul;
       $1251 = Math_imul($1249, $1250)|0;
       $1252 = (0 - ($1251))|0;
       $1253 = $rShiftUV;
       $1254 = $1252 >> $1253;
       $r22 = $1254;
       $1255 = $iPos20;
       $1256 = $pSrcV;
       $1257 = (($1256) + ($1255<<2)|0);
       $1258 = HEAP32[$1257>>2]|0;
       $1259 = $cMul;
       $1260 = Math_imul($1258, $1259)|0;
       $1261 = $rShiftUV;
       $1262 = $1260 >> $1261;
       $b23 = $1262;
       $1263 = $r22;
       $1264 = (($1263) + 0)|0;
       $1265 = $1264 >> 1;
       $1266 = $g21;
       $1267 = (($1266) - ($1265))|0;
       $g21 = $1267;
       $1268 = $b23;
       $1269 = (($1268) + 1)|0;
       $1270 = $1269 >> 1;
       $1271 = $g21;
       $1272 = (($1270) - ($1271))|0;
       $1273 = $r22;
       $1274 = (($1273) - ($1272))|0;
       $r22 = $1274;
       $1275 = $r22;
       $1276 = $b23;
       $1277 = (($1276) + ($1275))|0;
       $b23 = $1277;
       $1278 = $1;
       $1279 = (($1278) + 32952|0);
       $1280 = HEAP32[$1279>>2]|0;
       $1281 = $iColumn;
       $1282 = $nBits;
       $1283 = $1281 >>> $1282;
       $1284 = $pOffsetX;
       $1285 = (($1284) + ($1283<<2)|0);
       $1286 = HEAP32[$1285>>2]|0;
       $1287 = (($1280) + ($1286<<1)|0);
       $1288 = $iY;
       $1289 = (($1287) + ($1288<<1)|0);
       $pDst19 = $1289;
       $1290 = $nLen;
       $1291 = $1290&255;
       $1292 = $r22;
       $1293 = $1292 << $1291;
       $r22 = $1293;
       $1294 = $nLen;
       $1295 = $1294&255;
       $1296 = $g21;
       $1297 = $1296 << $1295;
       $g21 = $1297;
       $1298 = $nLen;
       $1299 = $1298&255;
       $1300 = $b23;
       $1301 = $1300 << $1299;
       $b23 = $1301;
       $1302 = $r22;
       $1303 = ($1302|0)<(-32768);
       if ($1303) {
        $1308 = -32768;
       } else {
        $1304 = $r22;
        $1305 = (32767)<($1304|0);
        if ($1305) {
         $2666 = 32767;
        } else {
         $1306 = $r22;
         $2666 = $1306;
        }
        $1308 = $2666;
       }
       $1307 = $1308&65535;
       $1309 = $pDst19;
       HEAP16[$1309>>1] = $1307;
       $1310 = $g21;
       $1311 = ($1310|0)<(-32768);
       if ($1311) {
        $1316 = -32768;
       } else {
        $1312 = $g21;
        $1313 = (32767)<($1312|0);
        if ($1313) {
         $2667 = 32767;
        } else {
         $1314 = $g21;
         $2667 = $1314;
        }
        $1316 = $2667;
       }
       $1315 = $1316&65535;
       $1317 = $pDst19;
       $1318 = (($1317) + 2|0);
       HEAP16[$1318>>1] = $1315;
       $1319 = $b23;
       $1320 = ($1319|0)<(-32768);
       if ($1320) {
        $1325 = -32768;
       } else {
        $1321 = $b23;
        $1322 = (32767)<($1321|0);
        if ($1322) {
         $2668 = 32767;
        } else {
         $1323 = $b23;
         $2668 = $1323;
        }
        $1325 = $2668;
       }
       $1324 = $1325&65535;
       $1326 = $pDst19;
       $1327 = (($1326) + 4|0);
       HEAP16[$1327>>1] = $1324;
       $1328 = $tScale;
       $1329 = $iColumn;
       $1330 = (($1329) + ($1328))|0;
       $iColumn = $1330;
      }
      $1331 = $tScale;
      $1332 = $iRow;
      $1333 = (($1332) + ($1331))|0;
      $iRow = $1333;
     }
     break;
    }
    case 6: case 3: case 0:  {
     $1334 = $1;
     $1335 = $cMul;
     $1336 = $rShiftY;
     $1337 = $iFirstRow;
     $1338 = $iFirstColumn;
     _outputNChannelThumbnail($1334,$1335,$1336,$1337,$1338);
     break;
    }
    case 4:  {
     $1339 = $1;
     $1340 = (($1339) + 34564|0);
     $1341 = (($1340) + 12|0);
     $1342 = HEAP32[$1341>>2]|0;
     $pSrcK24 = $1342;
     $1343 = $iFirstRow;
     $iRow = $1343;
     while(1) {
      $1344 = $iRow;
      $1345 = $cHeight;
      $1346 = ($1344>>>0)<($1345>>>0);
      if (!($1346)) {
       break;
      }
      $1347 = $iFirstColumn;
      $iColumn = $1347;
      $1348 = $iRow;
      $1349 = $nBits;
      $1350 = $1348 >>> $1349;
      $1351 = $pOffsetY;
      $1352 = (($1351) + ($1350<<2)|0);
      $1353 = HEAP32[$1352>>2]|0;
      $iY = $1353;
      while(1) {
       $1354 = $iColumn;
       $1355 = $cWidth;
       $1356 = ($1354>>>0)<($1355>>>0);
       if (!($1356)) {
        break;
       }
       $1357 = $iColumn;
       $1358 = $1357 >>> 4;
       $1359 = $1358 << 8;
       $1360 = $iColumn;
       $1361 = $1360 & 15;
       $1362 = $iRow;
       $1363 = (14240 + ($1362<<4)|0);
       $1364 = (($1363) + ($1361)|0);
       $1365 = HEAP8[$1364>>0]|0;
       $1366 = $1365&255;
       $1367 = (($1359) + ($1366))|0;
       $iPos25 = $1367;
       $1368 = $iPos25;
       $1369 = $pSrcY;
       $1370 = (($1369) + ($1368<<2)|0);
       $1371 = HEAP32[$1370>>2]|0;
       $1372 = $cMul;
       $1373 = Math_imul($1371, $1372)|0;
       $1374 = (0 - ($1373))|0;
       $1375 = $rShiftY;
       $1376 = $1374 >> $1375;
       $m26 = $1376;
       $1377 = $iPos25;
       $1378 = $pSrcU;
       $1379 = (($1378) + ($1377<<2)|0);
       $1380 = HEAP32[$1379>>2]|0;
       $1381 = $cMul;
       $1382 = Math_imul($1380, $1381)|0;
       $1383 = $rShiftUV;
       $1384 = $1382 >> $1383;
       $c27 = $1384;
       $1385 = $iPos25;
       $1386 = $pSrcV;
       $1387 = (($1386) + ($1385<<2)|0);
       $1388 = HEAP32[$1387>>2]|0;
       $1389 = $cMul;
       $1390 = Math_imul($1388, $1389)|0;
       $1391 = (0 - ($1390))|0;
       $1392 = $rShiftUV;
       $1393 = $1391 >> $1392;
       $y28 = $1393;
       $1394 = $iPos25;
       $1395 = $pSrcK24;
       $1396 = (($1395) + ($1394<<2)|0);
       $1397 = HEAP32[$1396>>2]|0;
       $1398 = $cMul;
       $1399 = Math_imul($1397, $1398)|0;
       $1400 = $rShiftUV;
       $1401 = $1399 >> $1400;
       $k29 = $1401;
       $1402 = $m26;
       $1403 = (($1402) + 1)|0;
       $1404 = $1403 >> 1;
       $1405 = $k29;
       $1406 = (($1405) - ($1404))|0;
       $k29 = $1406;
       $1407 = $c27;
       $1408 = $1407 >> 1;
       $1409 = $k29;
       $1410 = (($1408) - ($1409))|0;
       $1411 = $m26;
       $1412 = (($1411) - ($1410))|0;
       $m26 = $1412;
       $1413 = $y28;
       $1414 = (($1413) + 1)|0;
       $1415 = $1414 >> 1;
       $1416 = $m26;
       $1417 = (($1415) - ($1416))|0;
       $1418 = $c27;
       $1419 = (($1418) - ($1417))|0;
       $c27 = $1419;
       $1420 = $c27;
       $1421 = $y28;
       $1422 = (($1421) + ($1420))|0;
       $y28 = $1422;
       $1423 = $1;
       $1424 = (($1423) + 32952|0);
       $1425 = HEAP32[$1424>>2]|0;
       $1426 = $iColumn;
       $1427 = $nBits;
       $1428 = $1426 >>> $1427;
       $1429 = $pOffsetX;
       $1430 = (($1429) + ($1428<<2)|0);
       $1431 = HEAP32[$1430>>2]|0;
       $1432 = (($1425) + ($1431<<1)|0);
       $1433 = $iY;
       $1434 = (($1432) + ($1433<<1)|0);
       $pDst19 = $1434;
       $1435 = $nLen;
       $1436 = $1435&255;
       $1437 = $c27;
       $1438 = $1437 << $1436;
       $c27 = $1438;
       $1439 = $nLen;
       $1440 = $1439&255;
       $1441 = $m26;
       $1442 = $1441 << $1440;
       $m26 = $1442;
       $1443 = $nLen;
       $1444 = $1443&255;
       $1445 = $y28;
       $1446 = $1445 << $1444;
       $y28 = $1446;
       $1447 = $nLen;
       $1448 = $1447&255;
       $1449 = $k29;
       $1450 = $1449 << $1448;
       $k29 = $1450;
       $1451 = $c27;
       $1452 = ($1451|0)<(-32768);
       if ($1452) {
        $1457 = -32768;
       } else {
        $1453 = $c27;
        $1454 = (32767)<($1453|0);
        if ($1454) {
         $2669 = 32767;
        } else {
         $1455 = $c27;
         $2669 = $1455;
        }
        $1457 = $2669;
       }
       $1456 = $1457&65535;
       $1458 = $pDst19;
       HEAP16[$1458>>1] = $1456;
       $1459 = $m26;
       $1460 = ($1459|0)<(-32768);
       if ($1460) {
        $1465 = -32768;
       } else {
        $1461 = $m26;
        $1462 = (32767)<($1461|0);
        if ($1462) {
         $2670 = 32767;
        } else {
         $1463 = $m26;
         $2670 = $1463;
        }
        $1465 = $2670;
       }
       $1464 = $1465&65535;
       $1466 = $pDst19;
       $1467 = (($1466) + 2|0);
       HEAP16[$1467>>1] = $1464;
       $1468 = $y28;
       $1469 = ($1468|0)<(-32768);
       if ($1469) {
        $1474 = -32768;
       } else {
        $1470 = $y28;
        $1471 = (32767)<($1470|0);
        if ($1471) {
         $2671 = 32767;
        } else {
         $1472 = $y28;
         $2671 = $1472;
        }
        $1474 = $2671;
       }
       $1473 = $1474&65535;
       $1475 = $pDst19;
       $1476 = (($1475) + 4|0);
       HEAP16[$1476>>1] = $1473;
       $1477 = $k29;
       $1478 = ($1477|0)<(-32768);
       if ($1478) {
        $1483 = -32768;
       } else {
        $1479 = $k29;
        $1480 = (32767)<($1479|0);
        if ($1480) {
         $2672 = 32767;
        } else {
         $1481 = $k29;
         $2672 = $1481;
        }
        $1483 = $2672;
       }
       $1482 = $1483&65535;
       $1484 = $pDst19;
       $1485 = (($1484) + 6|0);
       HEAP16[$1485>>1] = $1482;
       $1486 = $tScale;
       $1487 = $iColumn;
       $1488 = (($1487) + ($1486))|0;
       $iColumn = $1488;
      }
      $1489 = $tScale;
      $1490 = $iRow;
      $1491 = (($1490) + ($1489))|0;
      $iRow = $1491;
     }
     break;
    }
    default: {
     ___assert_fail((8496|0),(8456|0),2271,(8976|0));
     // unreachable;
    }
    }
   } else {
    $1492 = $bd;
    $1493 = ($1492|0)==(4);
    if ($1493) {
     $1494 = $cfExt;
     if ((($1494|0) == 6) | (($1494|0) == 3) | (($1494|0) == 0)) {
      $1589 = $1;
      $1590 = $cMul;
      $1591 = $rShiftY;
      $1592 = $iFirstRow;
      $1593 = $iFirstColumn;
      _outputNChannelThumbnail($1589,$1590,$1591,$1592,$1593);
     } else if ((($1494|0) == 7)) {
      $1495 = $iFirstRow;
      $iRow = $1495;
      while(1) {
       $1496 = $iRow;
       $1497 = $cHeight;
       $1498 = ($1496>>>0)<($1497>>>0);
       if (!($1498)) {
        break;
       }
       $1499 = $iFirstColumn;
       $iColumn = $1499;
       $1500 = $iRow;
       $1501 = $nBits;
       $1502 = $1500 >>> $1501;
       $1503 = $pOffsetY;
       $1504 = (($1503) + ($1502<<2)|0);
       $1505 = HEAP32[$1504>>2]|0;
       $iY = $1505;
       while(1) {
        $1506 = $iColumn;
        $1507 = $cWidth;
        $1508 = ($1506>>>0)<($1507>>>0);
        if (!($1508)) {
         break;
        }
        $1509 = $iColumn;
        $1510 = $1509 >>> 4;
        $1511 = $1510 << 8;
        $1512 = $iColumn;
        $1513 = $1512 & 15;
        $1514 = $iRow;
        $1515 = (14240 + ($1514<<4)|0);
        $1516 = (($1515) + ($1513)|0);
        $1517 = HEAP8[$1516>>0]|0;
        $1518 = $1517&255;
        $1519 = (($1511) + ($1518))|0;
        $iPos31 = $1519;
        $1520 = $iPos31;
        $1521 = $pSrcY;
        $1522 = (($1521) + ($1520<<2)|0);
        $1523 = HEAP32[$1522>>2]|0;
        $1524 = $cMul;
        $1525 = Math_imul($1523, $1524)|0;
        $1526 = $rShiftY;
        $1527 = $1525 >> $1526;
        $g32 = $1527;
        $1528 = $iPos31;
        $1529 = $pSrcU;
        $1530 = (($1529) + ($1528<<2)|0);
        $1531 = HEAP32[$1530>>2]|0;
        $1532 = $cMul;
        $1533 = Math_imul($1531, $1532)|0;
        $1534 = (0 - ($1533))|0;
        $1535 = $rShiftUV;
        $1536 = $1534 >> $1535;
        $r33 = $1536;
        $1537 = $iPos31;
        $1538 = $pSrcV;
        $1539 = (($1538) + ($1537<<2)|0);
        $1540 = HEAP32[$1539>>2]|0;
        $1541 = $cMul;
        $1542 = Math_imul($1540, $1541)|0;
        $1543 = $rShiftUV;
        $1544 = $1542 >> $1543;
        $b34 = $1544;
        $1545 = $r33;
        $1546 = (($1545) + 0)|0;
        $1547 = $1546 >> 1;
        $1548 = $g32;
        $1549 = (($1548) - ($1547))|0;
        $g32 = $1549;
        $1550 = $b34;
        $1551 = (($1550) + 1)|0;
        $1552 = $1551 >> 1;
        $1553 = $g32;
        $1554 = (($1552) - ($1553))|0;
        $1555 = $r33;
        $1556 = (($1555) - ($1554))|0;
        $r33 = $1556;
        $1557 = $r33;
        $1558 = $b34;
        $1559 = (($1558) + ($1557))|0;
        $b34 = $1559;
        $1560 = $1;
        $1561 = (($1560) + 32952|0);
        $1562 = HEAP32[$1561>>2]|0;
        $1563 = $iColumn;
        $1564 = $nBits;
        $1565 = $1563 >>> $1564;
        $1566 = $pOffsetX;
        $1567 = (($1566) + ($1565<<2)|0);
        $1568 = HEAP32[$1567>>2]|0;
        $1569 = (($1562) + ($1568<<1)|0);
        $1570 = $iY;
        $1571 = (($1569) + ($1570<<1)|0);
        $pDst30 = $1571;
        $1572 = $r33;
        $1573 = (_backwardHalf($1572)|0);
        $1574 = $pDst30;
        HEAP16[$1574>>1] = $1573;
        $1575 = $g32;
        $1576 = (_backwardHalf($1575)|0);
        $1577 = $pDst30;
        $1578 = (($1577) + 2|0);
        HEAP16[$1578>>1] = $1576;
        $1579 = $b34;
        $1580 = (_backwardHalf($1579)|0);
        $1581 = $pDst30;
        $1582 = (($1581) + 4|0);
        HEAP16[$1582>>1] = $1580;
        $1583 = $tScale;
        $1584 = $iColumn;
        $1585 = (($1584) + ($1583))|0;
        $iColumn = $1585;
       }
       $1586 = $tScale;
       $1587 = $iRow;
       $1588 = (($1587) + ($1586))|0;
       $iRow = $1588;
      }
     } else {
      ___assert_fail((8496|0),(8456|0),2302,(8976|0));
      // unreachable;
     }
    } else {
     $1594 = $bd;
     $1595 = ($1594|0)==(5);
     if ($1595) {
      $1596 = $nLen;
      $1597 = $1596&255;
      $1598 = -2147483648 >> $1597;
      $1599 = $rShiftY;
      $1600 = $1598 << $1599;
      $1601 = $cMul;
      $1602 = (($1600|0) / ($1601|0))&-1;
      $offset = $1602;
      $1603 = $cfExt;
      if ((($1603|0) == 6) | (($1603|0) == 3) | (($1603|0) == 0)) {
       $1706 = $1;
       $1707 = $cMul;
       $1708 = $rShiftY;
       $1709 = $iFirstRow;
       $1710 = $iFirstColumn;
       _outputNChannelThumbnail($1706,$1707,$1708,$1709,$1710);
      } else if ((($1603|0) == 7)) {
       $1604 = $iFirstRow;
       $iRow = $1604;
       while(1) {
        $1605 = $iRow;
        $1606 = $cHeight;
        $1607 = ($1605>>>0)<($1606>>>0);
        if (!($1607)) {
         break;
        }
        $1608 = $iFirstColumn;
        $iColumn = $1608;
        $1609 = $iRow;
        $1610 = $nBits;
        $1611 = $1609 >>> $1610;
        $1612 = $pOffsetY;
        $1613 = (($1612) + ($1611<<2)|0);
        $1614 = HEAP32[$1613>>2]|0;
        $iY = $1614;
        while(1) {
         $1615 = $iColumn;
         $1616 = $cWidth;
         $1617 = ($1615>>>0)<($1616>>>0);
         if (!($1617)) {
          break;
         }
         $1618 = $iColumn;
         $1619 = $1618 >>> 4;
         $1620 = $1619 << 8;
         $1621 = $iColumn;
         $1622 = $1621 & 15;
         $1623 = $iRow;
         $1624 = (14240 + ($1623<<4)|0);
         $1625 = (($1624) + ($1622)|0);
         $1626 = HEAP8[$1625>>0]|0;
         $1627 = $1626&255;
         $1628 = (($1620) + ($1627))|0;
         $iPos36 = $1628;
         $1629 = $iPos36;
         $1630 = $pSrcY;
         $1631 = (($1630) + ($1629<<2)|0);
         $1632 = HEAP32[$1631>>2]|0;
         $1633 = $offset;
         $1634 = (($1632) + ($1633))|0;
         $1635 = $cMul;
         $1636 = Math_imul($1634, $1635)|0;
         $1637 = $rShiftY;
         $1638 = $1636 >> $1637;
         $g37 = $1638;
         $1639 = $iPos36;
         $1640 = $pSrcU;
         $1641 = (($1640) + ($1639<<2)|0);
         $1642 = HEAP32[$1641>>2]|0;
         $1643 = $cMul;
         $1644 = Math_imul($1642, $1643)|0;
         $1645 = (0 - ($1644))|0;
         $1646 = $rShiftUV;
         $1647 = $1645 >> $1646;
         $r38 = $1647;
         $1648 = $iPos36;
         $1649 = $pSrcV;
         $1650 = (($1649) + ($1648<<2)|0);
         $1651 = HEAP32[$1650>>2]|0;
         $1652 = $cMul;
         $1653 = Math_imul($1651, $1652)|0;
         $1654 = $rShiftUV;
         $1655 = $1653 >> $1654;
         $b39 = $1655;
         $1656 = $r38;
         $1657 = (($1656) + 0)|0;
         $1658 = $1657 >> 1;
         $1659 = $g37;
         $1660 = (($1659) - ($1658))|0;
         $g37 = $1660;
         $1661 = $b39;
         $1662 = (($1661) + 1)|0;
         $1663 = $1662 >> 1;
         $1664 = $g37;
         $1665 = (($1663) - ($1664))|0;
         $1666 = $r38;
         $1667 = (($1666) - ($1665))|0;
         $r38 = $1667;
         $1668 = $r38;
         $1669 = $b39;
         $1670 = (($1669) + ($1668))|0;
         $b39 = $1670;
         $1671 = $1;
         $1672 = (($1671) + 32952|0);
         $1673 = HEAP32[$1672>>2]|0;
         $1674 = $iColumn;
         $1675 = $nBits;
         $1676 = $1674 >>> $1675;
         $1677 = $pOffsetX;
         $1678 = (($1677) + ($1676<<2)|0);
         $1679 = HEAP32[$1678>>2]|0;
         $1680 = (($1673) + ($1679<<2)|0);
         $1681 = $iY;
         $1682 = (($1680) + ($1681<<2)|0);
         $pDst35 = $1682;
         $1683 = $r38;
         $1684 = $nLen;
         $1685 = $1684&255;
         $1686 = $1683 << $1685;
         $1687 = $pDst35;
         HEAP32[$1687>>2] = $1686;
         $1688 = $g37;
         $1689 = $nLen;
         $1690 = $1689&255;
         $1691 = $1688 << $1690;
         $1692 = $pDst35;
         $1693 = (($1692) + 4|0);
         HEAP32[$1693>>2] = $1691;
         $1694 = $b39;
         $1695 = $nLen;
         $1696 = $1695&255;
         $1697 = $1694 << $1696;
         $1698 = $pDst35;
         $1699 = (($1698) + 8|0);
         HEAP32[$1699>>2] = $1697;
         $1700 = $tScale;
         $1701 = $iColumn;
         $1702 = (($1701) + ($1700))|0;
         $iColumn = $1702;
        }
        $1703 = $tScale;
        $1704 = $iRow;
        $1705 = (($1704) + ($1703))|0;
        $iRow = $1705;
       }
      } else {
       ___assert_fail((8496|0),(8456|0),2336,(8976|0));
       // unreachable;
      }
     } else {
      $1711 = $bd;
      $1712 = ($1711|0)==(6);
      if ($1712) {
       $1713 = $cfExt;
       if ((($1713|0) == 6) | (($1713|0) == 3) | (($1713|0) == 0)) {
        $1814 = $1;
        $1815 = $cMul;
        $1816 = $rShiftY;
        $1817 = $iFirstRow;
        $1818 = $iFirstColumn;
        _outputNChannelThumbnail($1814,$1815,$1816,$1817,$1818);
       } else if ((($1713|0) == 7)) {
        $1714 = $iFirstRow;
        $iRow = $1714;
        while(1) {
         $1715 = $iRow;
         $1716 = $cHeight;
         $1717 = ($1715>>>0)<($1716>>>0);
         if (!($1717)) {
          break;
         }
         $1718 = $iFirstColumn;
         $iColumn = $1718;
         $1719 = $iRow;
         $1720 = $nBits;
         $1721 = $1719 >>> $1720;
         $1722 = $pOffsetY;
         $1723 = (($1722) + ($1721<<2)|0);
         $1724 = HEAP32[$1723>>2]|0;
         $iY = $1724;
         while(1) {
          $1725 = $iColumn;
          $1726 = $cWidth;
          $1727 = ($1725>>>0)<($1726>>>0);
          if (!($1727)) {
           break;
          }
          $1728 = $iColumn;
          $1729 = $1728 >>> 4;
          $1730 = $1729 << 8;
          $1731 = $iColumn;
          $1732 = $1731 & 15;
          $1733 = $iRow;
          $1734 = (14240 + ($1733<<4)|0);
          $1735 = (($1734) + ($1732)|0);
          $1736 = HEAP8[$1735>>0]|0;
          $1737 = $1736&255;
          $1738 = (($1730) + ($1737))|0;
          $iPos41 = $1738;
          $1739 = $iPos41;
          $1740 = $pSrcY;
          $1741 = (($1740) + ($1739<<2)|0);
          $1742 = HEAP32[$1741>>2]|0;
          $1743 = $cMul;
          $1744 = Math_imul($1742, $1743)|0;
          $1745 = $rShiftY;
          $1746 = $1744 >> $1745;
          $g42 = $1746;
          $1747 = $iPos41;
          $1748 = $pSrcU;
          $1749 = (($1748) + ($1747<<2)|0);
          $1750 = HEAP32[$1749>>2]|0;
          $1751 = $cMul;
          $1752 = Math_imul($1750, $1751)|0;
          $1753 = (0 - ($1752))|0;
          $1754 = $rShiftUV;
          $1755 = $1753 >> $1754;
          $r43 = $1755;
          $1756 = $iPos41;
          $1757 = $pSrcV;
          $1758 = (($1757) + ($1756<<2)|0);
          $1759 = HEAP32[$1758>>2]|0;
          $1760 = $cMul;
          $1761 = Math_imul($1759, $1760)|0;
          $1762 = $rShiftUV;
          $1763 = $1761 >> $1762;
          $b44 = $1763;
          $1764 = $r43;
          $1765 = (($1764) + 0)|0;
          $1766 = $1765 >> 1;
          $1767 = $g42;
          $1768 = (($1767) - ($1766))|0;
          $g42 = $1768;
          $1769 = $b44;
          $1770 = (($1769) + 1)|0;
          $1771 = $1770 >> 1;
          $1772 = $g42;
          $1773 = (($1771) - ($1772))|0;
          $1774 = $r43;
          $1775 = (($1774) - ($1773))|0;
          $r43 = $1775;
          $1776 = $r43;
          $1777 = $b44;
          $1778 = (($1777) + ($1776))|0;
          $b44 = $1778;
          $1779 = $1;
          $1780 = (($1779) + 32952|0);
          $1781 = HEAP32[$1780>>2]|0;
          $1782 = $iColumn;
          $1783 = $nBits;
          $1784 = $1782 >>> $1783;
          $1785 = $pOffsetX;
          $1786 = (($1785) + ($1784<<2)|0);
          $1787 = HEAP32[$1786>>2]|0;
          $1788 = (($1781) + ($1787<<2)|0);
          $1789 = $iY;
          $1790 = (($1788) + ($1789<<2)|0);
          $pDst40 = $1790;
          $1791 = $r43;
          $1792 = $nLen;
          $1793 = $1792&255;
          $1794 = $1791 << $1793;
          $1795 = $pDst40;
          HEAP32[$1795>>2] = $1794;
          $1796 = $g42;
          $1797 = $nLen;
          $1798 = $1797&255;
          $1799 = $1796 << $1798;
          $1800 = $pDst40;
          $1801 = (($1800) + 4|0);
          HEAP32[$1801>>2] = $1799;
          $1802 = $b44;
          $1803 = $nLen;
          $1804 = $1803&255;
          $1805 = $1802 << $1804;
          $1806 = $pDst40;
          $1807 = (($1806) + 8|0);
          HEAP32[$1807>>2] = $1805;
          $1808 = $tScale;
          $1809 = $iColumn;
          $1810 = (($1809) + ($1808))|0;
          $iColumn = $1810;
         }
         $1811 = $tScale;
         $1812 = $iRow;
         $1813 = (($1812) + ($1811))|0;
         $iRow = $1813;
        }
       } else {
        ___assert_fail((8496|0),(8456|0),2367,(8976|0));
        // unreachable;
       }
      } else {
       $1819 = $bd;
       $1820 = ($1819|0)==(7);
       if ($1820) {
        $1821 = $cfExt;
        if ((($1821|0) == 7)) {
         $1822 = $iFirstRow;
         $iRow = $1822;
         while(1) {
          $1823 = $iRow;
          $1824 = $cHeight;
          $1825 = ($1823>>>0)<($1824>>>0);
          if (!($1825)) {
           break;
          }
          $1826 = $iFirstColumn;
          $iColumn = $1826;
          $1827 = $iRow;
          $1828 = $nBits;
          $1829 = $1827 >>> $1828;
          $1830 = $pOffsetY;
          $1831 = (($1830) + ($1829<<2)|0);
          $1832 = HEAP32[$1831>>2]|0;
          $iY = $1832;
          while(1) {
           $1833 = $iColumn;
           $1834 = $cWidth;
           $1835 = ($1833>>>0)<($1834>>>0);
           if (!($1835)) {
            break;
           }
           $1836 = $iColumn;
           $1837 = $1836 >>> 4;
           $1838 = $1837 << 8;
           $1839 = $iColumn;
           $1840 = $1839 & 15;
           $1841 = $iRow;
           $1842 = (14240 + ($1841<<4)|0);
           $1843 = (($1842) + ($1840)|0);
           $1844 = HEAP8[$1843>>0]|0;
           $1845 = $1844&255;
           $1846 = (($1838) + ($1845))|0;
           $iPos46 = $1846;
           $1847 = $iPos46;
           $1848 = $pSrcY;
           $1849 = (($1848) + ($1847<<2)|0);
           $1850 = HEAP32[$1849>>2]|0;
           $1851 = $cMul;
           $1852 = Math_imul($1850, $1851)|0;
           $1853 = $rShiftY;
           $1854 = $1852 >> $1853;
           $g47 = $1854;
           $1855 = $iPos46;
           $1856 = $pSrcU;
           $1857 = (($1856) + ($1855<<2)|0);
           $1858 = HEAP32[$1857>>2]|0;
           $1859 = $cMul;
           $1860 = Math_imul($1858, $1859)|0;
           $1861 = (0 - ($1860))|0;
           $1862 = $rShiftUV;
           $1863 = $1861 >> $1862;
           $r48 = $1863;
           $1864 = $iPos46;
           $1865 = $pSrcV;
           $1866 = (($1865) + ($1864<<2)|0);
           $1867 = HEAP32[$1866>>2]|0;
           $1868 = $cMul;
           $1869 = Math_imul($1867, $1868)|0;
           $1870 = $rShiftUV;
           $1871 = $1869 >> $1870;
           $b49 = $1871;
           $1872 = $r48;
           $1873 = (($1872) + 0)|0;
           $1874 = $1873 >> 1;
           $1875 = $g47;
           $1876 = (($1875) - ($1874))|0;
           $g47 = $1876;
           $1877 = $b49;
           $1878 = (($1877) + 1)|0;
           $1879 = $1878 >> 1;
           $1880 = $g47;
           $1881 = (($1879) - ($1880))|0;
           $1882 = $r48;
           $1883 = (($1882) - ($1881))|0;
           $r48 = $1883;
           $1884 = $r48;
           $1885 = $b49;
           $1886 = (($1885) + ($1884))|0;
           $b49 = $1886;
           $1887 = $1;
           $1888 = (($1887) + 32952|0);
           $1889 = HEAP32[$1888>>2]|0;
           $1890 = $iColumn;
           $1891 = $nBits;
           $1892 = $1890 >>> $1891;
           $1893 = $pOffsetX;
           $1894 = (($1893) + ($1892<<2)|0);
           $1895 = HEAP32[$1894>>2]|0;
           $1896 = (($1889) + ($1895<<2)|0);
           $1897 = $iY;
           $1898 = (($1896) + ($1897<<2)|0);
           $pDst45 = $1898;
           $1899 = $r48;
           $1900 = $nExpBias;
           $1901 = $nLen;
           $1902 = (+_pixel2float($1899,$1900,$1901));
           $1903 = $pDst45;
           HEAPF32[$1903>>2] = $1902;
           $1904 = $g47;
           $1905 = $nExpBias;
           $1906 = $nLen;
           $1907 = (+_pixel2float($1904,$1905,$1906));
           $1908 = $pDst45;
           $1909 = (($1908) + 4|0);
           HEAPF32[$1909>>2] = $1907;
           $1910 = $b49;
           $1911 = $nExpBias;
           $1912 = $nLen;
           $1913 = (+_pixel2float($1910,$1911,$1912));
           $1914 = $pDst45;
           $1915 = (($1914) + 8|0);
           HEAPF32[$1915>>2] = $1913;
           $1916 = $tScale;
           $1917 = $iColumn;
           $1918 = (($1917) + ($1916))|0;
           $iColumn = $1918;
          }
          $1919 = $tScale;
          $1920 = $iRow;
          $1921 = (($1920) + ($1919))|0;
          $iRow = $1921;
         }
        } else if ((($1821|0) == 6) | (($1821|0) == 3) | (($1821|0) == 0)) {
         $1922 = $1;
         $1923 = $cMul;
         $1924 = $rShiftY;
         $1925 = $iFirstRow;
         $1926 = $iFirstColumn;
         _outputNChannelThumbnail($1922,$1923,$1924,$1925,$1926);
        } else {
         ___assert_fail((8496|0),(8456|0),2399,(8976|0));
         // unreachable;
        }
       } else {
        $1927 = $bd;
        $1928 = ($1927|0)==(0);
        if ($1928) {
         $1929 = $1;
         $1930 = (($1929) + 4|0);
         $1931 = (($1930) + 20|0);
         $1932 = HEAP32[$1931>>2]|0;
         $iPos50 = $1932;
         $1933 = $cfExt;
         $1934 = ($1933|0)==(0);
         if (!($1934)) {
          ___assert_fail((8864|0),(8456|0),2407,(8976|0));
          // unreachable;
         }
         $1935 = $1;
         $1936 = (($1935) + 34136|0);
         $1937 = (($1936) + 8|0);
         $1938 = HEAP32[$1937>>2]|0;
         $1939 = ($1938|0)==(0);
         if (!($1939)) {
          ___assert_fail((8864|0),(8456|0),2407,(8976|0));
          // unreachable;
         }
         $1940 = $1;
         $1941 = (($1940) + 4|0);
         $1942 = (($1941) + 64|0);
         $1943 = HEAP32[$1942>>2]|0;
         $1944 = ($1943>>>0)<(4);
         if ($1944) {
          $1945 = $iFirstRow;
          $iRow = $1945;
          while(1) {
           $1946 = $iRow;
           $1947 = $cHeight;
           $1948 = ($1946>>>0)<($1947>>>0);
           if (!($1948)) {
            break;
           }
           $1949 = $iFirstColumn;
           $iColumn = $1949;
           $1950 = $iRow;
           $1951 = $nBits;
           $1952 = $1950 >>> $1951;
           $1953 = $pOffsetY;
           $1954 = (($1953) + ($1952<<2)|0);
           $1955 = HEAP32[$1954>>2]|0;
           $1956 = $iPos50;
           $1957 = (($1955) + ($1956))|0;
           $iY = $1957;
           while(1) {
            $1958 = $iColumn;
            $1959 = $cWidth;
            $1960 = ($1958>>>0)<($1959>>>0);
            if (!($1960)) {
             break;
            }
            $1961 = $1;
            $1962 = (($1961) + 84|0);
            $1963 = (($1962) + 32844|0);
            $1964 = HEAP32[$1963>>2]|0;
            $1965 = $iColumn;
            $1966 = $1965 >>> 4;
            $1967 = $1966 << 8;
            $1968 = $iColumn;
            $1969 = $1968 & 15;
            $1970 = $iRow;
            $1971 = (14240 + ($1970<<4)|0);
            $1972 = (($1971) + ($1969)|0);
            $1973 = HEAP8[$1972>>0]|0;
            $1974 = $1973&255;
            $1975 = (($1967) + ($1974))|0;
            $1976 = $pSrcY;
            $1977 = (($1976) + ($1975<<2)|0);
            $1978 = HEAP32[$1977>>2]|0;
            $1979 = ($1978|0)>(0);
            $1980 = $1979&1;
            $1981 = $1964 ^ $1980;
            $bBW = $1981;
            $1982 = $1;
            $1983 = (($1982) + 32952|0);
            $1984 = HEAP32[$1983>>2]|0;
            $1985 = $iColumn;
            $1986 = $nBits;
            $1987 = $1985 >>> $1986;
            $1988 = $pOffsetX;
            $1989 = (($1988) + ($1987<<2)|0);
            $1990 = HEAP32[$1989>>2]|0;
            $1991 = $1990 >>> 3;
            $1992 = (($1984) + ($1991)|0);
            $1993 = $iY;
            $1994 = (($1992) + ($1993)|0);
            $1995 = HEAP8[$1994>>0]|0;
            $cByte = $1995;
            $1996 = $iColumn;
            $1997 = $nBits;
            $1998 = $1996 >>> $1997;
            $1999 = $pOffsetX;
            $2000 = (($1999) + ($1998<<2)|0);
            $2001 = HEAP32[$2000>>2]|0;
            $2002 = $2001 & 7;
            $2003 = (7 - ($2002))|0;
            $2004 = $2003&255;
            $cShift = $2004;
            $2005 = $bBW;
            $2006 = $cByte;
            $2007 = $2006&255;
            $2008 = $cShift;
            $2009 = $2008&255;
            $2010 = $2007 >> $2009;
            $2011 = (($2005) + ($2010))|0;
            $2012 = $2011 & 1;
            $2013 = $cShift;
            $2014 = $2013&255;
            $2015 = $2012 << $2014;
            $2016 = $1;
            $2017 = (($2016) + 32952|0);
            $2018 = HEAP32[$2017>>2]|0;
            $2019 = $iColumn;
            $2020 = $nBits;
            $2021 = $2019 >>> $2020;
            $2022 = $pOffsetX;
            $2023 = (($2022) + ($2021<<2)|0);
            $2024 = HEAP32[$2023>>2]|0;
            $2025 = $2024 >>> 3;
            $2026 = (($2018) + ($2025)|0);
            $2027 = $iY;
            $2028 = (($2026) + ($2027)|0);
            $2029 = HEAP8[$2028>>0]|0;
            $2030 = $2029&255;
            $2031 = $2030 ^ $2015;
            $2032 = $2031&255;
            HEAP8[$2028>>0] = $2032;
            $2033 = $tScale;
            $2034 = $iColumn;
            $2035 = (($2034) + ($2033))|0;
            $iColumn = $2035;
           }
           $2036 = $tScale;
           $2037 = $iRow;
           $2038 = (($2037) + ($2036))|0;
           $iRow = $2038;
          }
         } else {
          $2039 = $iFirstRow;
          $iRow = $2039;
          while(1) {
           $2040 = $iRow;
           $2041 = $cHeight;
           $2042 = ($2040>>>0)<($2041>>>0);
           if (!($2042)) {
            break;
           }
           $2043 = $iFirstColumn;
           $iColumn = $2043;
           $2044 = $iRow;
           $2045 = $nBits;
           $2046 = $2044 >>> $2045;
           $2047 = $pOffsetY;
           $2048 = (($2047) + ($2046<<2)|0);
           $2049 = HEAP32[$2048>>2]|0;
           $2050 = $iPos50;
           $2051 = (($2049) + ($2050))|0;
           $iY = $2051;
           while(1) {
            $2052 = $iColumn;
            $2053 = $cWidth;
            $2054 = ($2052>>>0)<($2053>>>0);
            if (!($2054)) {
             break;
            }
            $2055 = $1;
            $2056 = (($2055) + 84|0);
            $2057 = (($2056) + 32844|0);
            $2058 = HEAP32[$2057>>2]|0;
            $2059 = $iColumn;
            $2060 = $2059 >>> 4;
            $2061 = $2060 << 8;
            $2062 = $iColumn;
            $2063 = $2062 & 15;
            $2064 = $iRow;
            $2065 = (14240 + ($2064<<4)|0);
            $2066 = (($2065) + ($2063)|0);
            $2067 = HEAP8[$2066>>0]|0;
            $2068 = $2067&255;
            $2069 = (($2061) + ($2068))|0;
            $2070 = $pSrcY;
            $2071 = (($2070) + ($2069<<2)|0);
            $2072 = HEAP32[$2071>>2]|0;
            $2073 = ($2072|0)>(0);
            $2074 = $2073&1;
            $2075 = $2058 ^ $2074;
            $bBW = $2075;
            $2076 = $1;
            $2077 = (($2076) + 32952|0);
            $2078 = HEAP32[$2077>>2]|0;
            $2079 = $iColumn;
            $2080 = $nBits;
            $2081 = $2079 >>> $2080;
            $2082 = $pOffsetX;
            $2083 = (($2082) + ($2081<<2)|0);
            $2084 = HEAP32[$2083>>2]|0;
            $2085 = (($2078) + ($2084)|0);
            $2086 = $iY;
            $2087 = $2086 >>> 3;
            $2088 = (($2085) + ($2087)|0);
            $2089 = HEAP8[$2088>>0]|0;
            $cByte = $2089;
            $2090 = $iY;
            $2091 = $2090 & 7;
            $2092 = (7 - ($2091))|0;
            $2093 = $2092&255;
            $cShift = $2093;
            $2094 = $bBW;
            $2095 = $cByte;
            $2096 = $2095&255;
            $2097 = $cShift;
            $2098 = $2097&255;
            $2099 = $2096 >> $2098;
            $2100 = (($2094) + ($2099))|0;
            $2101 = $2100 & 1;
            $2102 = $cShift;
            $2103 = $2102&255;
            $2104 = $2101 << $2103;
            $2105 = $1;
            $2106 = (($2105) + 32952|0);
            $2107 = HEAP32[$2106>>2]|0;
            $2108 = $iColumn;
            $2109 = $nBits;
            $2110 = $2108 >>> $2109;
            $2111 = $pOffsetX;
            $2112 = (($2111) + ($2110<<2)|0);
            $2113 = HEAP32[$2112>>2]|0;
            $2114 = (($2107) + ($2113)|0);
            $2115 = $iY;
            $2116 = $2115 >>> 3;
            $2117 = (($2114) + ($2116)|0);
            $2118 = HEAP8[$2117>>0]|0;
            $2119 = $2118&255;
            $2120 = $2119 ^ $2104;
            $2121 = $2120&255;
            HEAP8[$2117>>0] = $2121;
            $2122 = $tScale;
            $2123 = $iColumn;
            $2124 = (($2123) + ($2122))|0;
            $iColumn = $2124;
           }
           $2125 = $tScale;
           $2126 = $iRow;
           $2127 = (($2126) + ($2125))|0;
           $iRow = $2127;
          }
         }
        } else {
         $2128 = $bd;
         $2129 = ($2128|0)==(8);
         if ($2129) {
          $2130 = $rShiftY;
          $2131 = 16 << $2130;
          $2132 = $cMul;
          $2133 = (($2131|0) / ($2132|0))&-1;
          $offset = $2133;
          $2134 = $iFirstRow;
          $iRow = $2134;
          while(1) {
           $2135 = $iRow;
           $2136 = $cHeight;
           $2137 = ($2135>>>0)<($2136>>>0);
           if (!($2137)) {
            break;
           }
           $2138 = $iFirstColumn;
           $iColumn = $2138;
           $2139 = $iRow;
           $2140 = $nBits;
           $2141 = $2139 >>> $2140;
           $2142 = $pOffsetY;
           $2143 = (($2142) + ($2141<<2)|0);
           $2144 = HEAP32[$2143>>2]|0;
           $iY = $2144;
           while(1) {
            $2145 = $iColumn;
            $2146 = $cWidth;
            $2147 = ($2145>>>0)<($2146>>>0);
            if (!($2147)) {
             break;
            }
            $2148 = $iColumn;
            $2149 = $2148 >>> 4;
            $2150 = $2149 << 8;
            $2151 = $iColumn;
            $2152 = $2151 & 15;
            $2153 = $iRow;
            $2154 = (14240 + ($2153<<4)|0);
            $2155 = (($2154) + ($2152)|0);
            $2156 = HEAP8[$2155>>0]|0;
            $2157 = $2156&255;
            $2158 = (($2150) + ($2157))|0;
            $iPos52 = $2158;
            $2159 = $iPos52;
            $2160 = $pSrcY;
            $2161 = (($2160) + ($2159<<2)|0);
            $2162 = HEAP32[$2161>>2]|0;
            $2163 = $offset;
            $2164 = (($2162) + ($2163))|0;
            $2165 = $cMul;
            $2166 = Math_imul($2164, $2165)|0;
            $2167 = $rShiftY;
            $2168 = $2166 >> $2167;
            $g53 = $2168;
            $2169 = $iPos52;
            $2170 = $pSrcU;
            $2171 = (($2170) + ($2169<<2)|0);
            $2172 = HEAP32[$2171>>2]|0;
            $2173 = $cMul;
            $2174 = Math_imul($2172, $2173)|0;
            $2175 = (0 - ($2174))|0;
            $2176 = $rShiftUV;
            $2177 = $2175 >> $2176;
            $r54 = $2177;
            $2178 = $iPos52;
            $2179 = $pSrcV;
            $2180 = (($2179) + ($2178<<2)|0);
            $2181 = HEAP32[$2180>>2]|0;
            $2182 = $cMul;
            $2183 = Math_imul($2181, $2182)|0;
            $2184 = $rShiftUV;
            $2185 = $2183 >> $2184;
            $b55 = $2185;
            $2186 = $r54;
            $2187 = (($2186) + 0)|0;
            $2188 = $2187 >> 1;
            $2189 = $g53;
            $2190 = (($2189) - ($2188))|0;
            $g53 = $2190;
            $2191 = $b55;
            $2192 = (($2191) + 1)|0;
            $2193 = $2192 >> 1;
            $2194 = $g53;
            $2195 = (($2193) - ($2194))|0;
            $2196 = $r54;
            $2197 = (($2196) - ($2195))|0;
            $r54 = $2197;
            $2198 = $r54;
            $2199 = $b55;
            $2200 = (($2199) + ($2198))|0;
            $b55 = $2200;
            $2201 = $1;
            $2202 = (($2201) + 32952|0);
            $2203 = HEAP32[$2202>>2]|0;
            $2204 = $iColumn;
            $2205 = $nBits;
            $2206 = $2204 >>> $2205;
            $2207 = $pOffsetX;
            $2208 = (($2207) + ($2206<<2)|0);
            $2209 = HEAP32[$2208>>2]|0;
            $2210 = (($2203) + ($2209<<1)|0);
            $2211 = $iY;
            $2212 = (($2210) + ($2211<<1)|0);
            $pDst51 = $2212;
            $2213 = $r54;
            $2214 = ($2213|0)<(0);
            if ($2214) {
             $2219 = 0;
            } else {
             $2215 = $r54;
             $2216 = (31)<($2215|0);
             if ($2216) {
              $2673 = 31;
             } else {
              $2217 = $r54;
              $2673 = $2217;
             }
             $2219 = $2673;
            }
            $2218 = $2219&65535;
            $2220 = $2218&65535;
            $2221 = $g53;
            $2222 = ($2221|0)<(0);
            if ($2222) {
             $2227 = 0;
            } else {
             $2223 = $g53;
             $2224 = (31)<($2223|0);
             if ($2224) {
              $2674 = 31;
             } else {
              $2225 = $g53;
              $2674 = $2225;
             }
             $2227 = $2674;
            }
            $2226 = $2227&65535;
            $2228 = $2226&65535;
            $2229 = $2228 << 5;
            $2230 = (($2220) + ($2229))|0;
            $2231 = $b55;
            $2232 = ($2231|0)<(0);
            if ($2232) {
             $2237 = 0;
            } else {
             $2233 = $b55;
             $2234 = (31)<($2233|0);
             if ($2234) {
              $2675 = 31;
             } else {
              $2235 = $b55;
              $2675 = $2235;
             }
             $2237 = $2675;
            }
            $2236 = $2237&65535;
            $2238 = $2236&65535;
            $2239 = $2238 << 10;
            $2240 = (($2230) + ($2239))|0;
            $2241 = $2240&65535;
            $2242 = $pDst51;
            HEAP16[$2242>>1] = $2241;
            $2243 = $tScale;
            $2244 = $iColumn;
            $2245 = (($2244) + ($2243))|0;
            $iColumn = $2245;
           }
           $2246 = $tScale;
           $2247 = $iRow;
           $2248 = (($2247) + ($2246))|0;
           $iRow = $2248;
          }
         } else {
          $2249 = $bd;
          $2250 = ($2249|0)==(10);
          if ($2250) {
           $2251 = $rShiftY;
           $2252 = 32 << $2251;
           $2253 = $cMul;
           $2254 = (($2252|0) / ($2253|0))&-1;
           $offset = $2254;
           $2255 = $iFirstRow;
           $iRow = $2255;
           while(1) {
            $2256 = $iRow;
            $2257 = $cHeight;
            $2258 = ($2256>>>0)<($2257>>>0);
            if (!($2258)) {
             break;
            }
            $2259 = $iFirstColumn;
            $iColumn = $2259;
            $2260 = $iRow;
            $2261 = $nBits;
            $2262 = $2260 >>> $2261;
            $2263 = $pOffsetY;
            $2264 = (($2263) + ($2262<<2)|0);
            $2265 = HEAP32[$2264>>2]|0;
            $iY = $2265;
            while(1) {
             $2266 = $iColumn;
             $2267 = $cWidth;
             $2268 = ($2266>>>0)<($2267>>>0);
             if (!($2268)) {
              break;
             }
             $2269 = $iColumn;
             $2270 = $2269 >>> 4;
             $2271 = $2270 << 8;
             $2272 = $iColumn;
             $2273 = $2272 & 15;
             $2274 = $iRow;
             $2275 = (14240 + ($2274<<4)|0);
             $2276 = (($2275) + ($2273)|0);
             $2277 = HEAP8[$2276>>0]|0;
             $2278 = $2277&255;
             $2279 = (($2271) + ($2278))|0;
             $iPos57 = $2279;
             $2280 = $iPos57;
             $2281 = $pSrcY;
             $2282 = (($2281) + ($2280<<2)|0);
             $2283 = HEAP32[$2282>>2]|0;
             $2284 = $offset;
             $2285 = (($2283) + ($2284))|0;
             $2286 = $cMul;
             $2287 = Math_imul($2285, $2286)|0;
             $2288 = $rShiftY;
             $2289 = $2287 >> $2288;
             $g58 = $2289;
             $2290 = $iPos57;
             $2291 = $pSrcU;
             $2292 = (($2291) + ($2290<<2)|0);
             $2293 = HEAP32[$2292>>2]|0;
             $2294 = $cMul;
             $2295 = Math_imul($2293, $2294)|0;
             $2296 = (0 - ($2295))|0;
             $2297 = $rShiftUV;
             $2298 = $2296 >> $2297;
             $r59 = $2298;
             $2299 = $iPos57;
             $2300 = $pSrcV;
             $2301 = (($2300) + ($2299<<2)|0);
             $2302 = HEAP32[$2301>>2]|0;
             $2303 = $cMul;
             $2304 = Math_imul($2302, $2303)|0;
             $2305 = $rShiftUV;
             $2306 = $2304 >> $2305;
             $b60 = $2306;
             $2307 = $r59;
             $2308 = (($2307) + 0)|0;
             $2309 = $2308 >> 1;
             $2310 = $g58;
             $2311 = (($2310) - ($2309))|0;
             $g58 = $2311;
             $2312 = $b60;
             $2313 = (($2312) + 1)|0;
             $2314 = $2313 >> 1;
             $2315 = $g58;
             $2316 = (($2314) - ($2315))|0;
             $2317 = $r59;
             $2318 = (($2317) - ($2316))|0;
             $r59 = $2318;
             $2319 = $r59;
             $2320 = $b60;
             $2321 = (($2320) + ($2319))|0;
             $b60 = $2321;
             $2322 = $r59;
             $2323 = (($2322|0) / 2)&-1;
             $r59 = $2323;
             $2324 = $b60;
             $2325 = (($2324|0) / 2)&-1;
             $b60 = $2325;
             $2326 = $1;
             $2327 = (($2326) + 32952|0);
             $2328 = HEAP32[$2327>>2]|0;
             $2329 = $iColumn;
             $2330 = $nBits;
             $2331 = $2329 >>> $2330;
             $2332 = $pOffsetX;
             $2333 = (($2332) + ($2331<<2)|0);
             $2334 = HEAP32[$2333>>2]|0;
             $2335 = (($2328) + ($2334<<1)|0);
             $2336 = $iY;
             $2337 = (($2335) + ($2336<<1)|0);
             $pDst56 = $2337;
             $2338 = $r59;
             $2339 = ($2338|0)<(0);
             if ($2339) {
              $2344 = 0;
             } else {
              $2340 = $r59;
              $2341 = (31)<($2340|0);
              if ($2341) {
               $2676 = 31;
              } else {
               $2342 = $r59;
               $2676 = $2342;
              }
              $2344 = $2676;
             }
             $2343 = $2344&65535;
             $2345 = $2343&65535;
             $2346 = $g58;
             $2347 = ($2346|0)<(0);
             if ($2347) {
              $2352 = 0;
             } else {
              $2348 = $g58;
              $2349 = (63)<($2348|0);
              if ($2349) {
               $2677 = 63;
              } else {
               $2350 = $g58;
               $2677 = $2350;
              }
              $2352 = $2677;
             }
             $2351 = $2352&65535;
             $2353 = $2351&65535;
             $2354 = $2353 << 5;
             $2355 = (($2345) + ($2354))|0;
             $2356 = $b60;
             $2357 = ($2356|0)<(0);
             if ($2357) {
              $2362 = 0;
             } else {
              $2358 = $b60;
              $2359 = (31)<($2358|0);
              if ($2359) {
               $2678 = 31;
              } else {
               $2360 = $b60;
               $2678 = $2360;
              }
              $2362 = $2678;
             }
             $2361 = $2362&65535;
             $2363 = $2361&65535;
             $2364 = $2363 << 11;
             $2365 = (($2355) + ($2364))|0;
             $2366 = $2365&65535;
             $2367 = $pDst56;
             HEAP16[$2367>>1] = $2366;
             $2368 = $tScale;
             $2369 = $iColumn;
             $2370 = (($2369) + ($2368))|0;
             $iColumn = $2370;
            }
            $2371 = $tScale;
            $2372 = $iRow;
            $2373 = (($2372) + ($2371))|0;
            $iRow = $2373;
           }
          } else {
           $2374 = $bd;
           $2375 = ($2374|0)==(9);
           if ($2375) {
            $2376 = $rShiftY;
            $2377 = 512 << $2376;
            $2378 = $cMul;
            $2379 = (($2377|0) / ($2378|0))&-1;
            $offset = $2379;
            $2380 = $iFirstRow;
            $iRow = $2380;
            while(1) {
             $2381 = $iRow;
             $2382 = $cHeight;
             $2383 = ($2381>>>0)<($2382>>>0);
             if (!($2383)) {
              break;
             }
             $2384 = $iFirstColumn;
             $iColumn = $2384;
             $2385 = $iRow;
             $2386 = $nBits;
             $2387 = $2385 >>> $2386;
             $2388 = $pOffsetY;
             $2389 = (($2388) + ($2387<<2)|0);
             $2390 = HEAP32[$2389>>2]|0;
             $iY = $2390;
             while(1) {
              $2391 = $iColumn;
              $2392 = $cWidth;
              $2393 = ($2391>>>0)<($2392>>>0);
              if (!($2393)) {
               break;
              }
              $2394 = $iColumn;
              $2395 = $2394 >>> 4;
              $2396 = $2395 << 8;
              $2397 = $iColumn;
              $2398 = $2397 & 15;
              $2399 = $iRow;
              $2400 = (14240 + ($2399<<4)|0);
              $2401 = (($2400) + ($2398)|0);
              $2402 = HEAP8[$2401>>0]|0;
              $2403 = $2402&255;
              $2404 = (($2396) + ($2403))|0;
              $iPos62 = $2404;
              $2405 = $iPos62;
              $2406 = $pSrcY;
              $2407 = (($2406) + ($2405<<2)|0);
              $2408 = HEAP32[$2407>>2]|0;
              $2409 = $offset;
              $2410 = (($2408) + ($2409))|0;
              $2411 = $cMul;
              $2412 = Math_imul($2410, $2411)|0;
              $2413 = $rShiftY;
              $2414 = $2412 >> $2413;
              $g63 = $2414;
              $2415 = $iPos62;
              $2416 = $pSrcU;
              $2417 = (($2416) + ($2415<<2)|0);
              $2418 = HEAP32[$2417>>2]|0;
              $2419 = $cMul;
              $2420 = Math_imul($2418, $2419)|0;
              $2421 = (0 - ($2420))|0;
              $2422 = $rShiftUV;
              $2423 = $2421 >> $2422;
              $r64 = $2423;
              $2424 = $iPos62;
              $2425 = $pSrcV;
              $2426 = (($2425) + ($2424<<2)|0);
              $2427 = HEAP32[$2426>>2]|0;
              $2428 = $cMul;
              $2429 = Math_imul($2427, $2428)|0;
              $2430 = $rShiftUV;
              $2431 = $2429 >> $2430;
              $b65 = $2431;
              $2432 = $r64;
              $2433 = (($2432) + 0)|0;
              $2434 = $2433 >> 1;
              $2435 = $g63;
              $2436 = (($2435) - ($2434))|0;
              $g63 = $2436;
              $2437 = $b65;
              $2438 = (($2437) + 1)|0;
              $2439 = $2438 >> 1;
              $2440 = $g63;
              $2441 = (($2439) - ($2440))|0;
              $2442 = $r64;
              $2443 = (($2442) - ($2441))|0;
              $r64 = $2443;
              $2444 = $r64;
              $2445 = $b65;
              $2446 = (($2445) + ($2444))|0;
              $b65 = $2446;
              $2447 = $1;
              $2448 = (($2447) + 32952|0);
              $2449 = HEAP32[$2448>>2]|0;
              $2450 = $iColumn;
              $2451 = $nBits;
              $2452 = $2450 >>> $2451;
              $2453 = $pOffsetX;
              $2454 = (($2453) + ($2452<<2)|0);
              $2455 = HEAP32[$2454>>2]|0;
              $2456 = (($2449) + ($2455<<2)|0);
              $2457 = $iY;
              $2458 = (($2456) + ($2457<<2)|0);
              $pDst61 = $2458;
              $2459 = $r64;
              $2460 = ($2459|0)<(0);
              if ($2460) {
               $2472 = 0;
              } else {
               $2461 = $r64;
               $2462 = (1023)<($2461|0);
               if ($2462) {
                $2679 = 1023;
               } else {
                $2463 = $r64;
                $2679 = $2463;
               }
               $2472 = $2679;
              }
              $2464 = $g63;
              $2465 = ($2464|0)<(0);
              if ($2465) {
               $2470 = 0;
              } else {
               $2466 = $g63;
               $2467 = (1023)<($2466|0);
               if ($2467) {
                $2680 = 1023;
               } else {
                $2468 = $g63;
                $2680 = $2468;
               }
               $2470 = $2680;
              }
              $2469 = $2470 << 10;
              $2471 = (($2472) + ($2469))|0;
              $2473 = $b65;
              $2474 = ($2473|0)<(0);
              if ($2474) {
               $2479 = 0;
              } else {
               $2475 = $b65;
               $2476 = (1023)<($2475|0);
               if ($2476) {
                $2681 = 1023;
               } else {
                $2477 = $b65;
                $2681 = $2477;
               }
               $2479 = $2681;
              }
              $2478 = $2479 << 20;
              $2480 = (($2471) + ($2478))|0;
              $2481 = $pDst61;
              HEAP32[$2481>>2] = $2480;
              $2482 = $tScale;
              $2483 = $iColumn;
              $2484 = (($2483) + ($2482))|0;
              $iColumn = $2484;
             }
             $2485 = $tScale;
             $2486 = $iRow;
             $2487 = (($2486) + ($2485))|0;
             $iRow = $2487;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $2488 = $1;
   $2489 = (($2488) + 84|0);
   $2490 = (($2489) + 36|0);
   $2491 = HEAP8[$2490>>0]|0;
   $2492 = $2491&255;
   $2493 = ($2492|0)>(0);
   do {
    if ($2493) {
     $2494 = $1;
     $2495 = $nBits;
     $2496 = $cMul;
     $2497 = $rShiftY;
     $2498 = (_decodeThumbnailAlpha($2494,$2495,$2496,$2497)|0);
     $2499 = ($2498|0)!=(0);
     if (!($2499)) {
      break;
     }
     $0 = -1;
     $2649 = $0;
     STACKTOP = sp;return ($2649|0);
    }
   } while(0);
   $2500 = $cHeight;
   $2501 = $iFirstRow;
   $2502 = (($2500) - ($2501))|0;
   $2503 = $tScale;
   $2504 = (($2502) + ($2503))|0;
   $2505 = (($2504) - 1)|0;
   $2506 = $tScale;
   $2507 = (($2505>>>0) / ($2506>>>0))&-1;
   $2508 = $1;
   $2509 = (($2508) + 32952|0);
   $2510 = (($2509) + 20|0);
   HEAP32[$2510>>2] = $2507;
   $2511 = $1;
   $2512 = (($2511) + 4|0);
   $2513 = (($2512) + 8|0);
   $2514 = HEAP32[$2513>>2]|0;
   $2515 = (7)==($2514|0);
   do {
    if ($2515) {
     $2516 = $1;
     $2517 = (($2516) + 84|0);
     $2518 = (($2517) + 16|0);
     $2519 = HEAP32[$2518>>2]|0;
     $2520 = (0)==($2519|0);
     if (!($2520)) {
      break;
     }
     $2521 = $1;
     $2522 = (($2521) + 4|0);
     $pII = $2522;
     $2523 = $pII;
     $2524 = (($2523) + 12|0);
     $2525 = HEAP32[$2524>>2]|0;
     switch ($2525|0) {
     case 1:  {
      $2526 = $iFirstRow;
      $iRow = $2526;
      while(1) {
       $2527 = $iRow;
       $2528 = $cHeight;
       $2529 = ($2527>>>0)<($2528>>>0);
       if (!($2529)) {
        break;
       }
       $2530 = $iFirstColumn;
       $iColumn = $2530;
       $2531 = $iRow;
       $2532 = $nBits;
       $2533 = $2531 >>> $2532;
       $2534 = $pOffsetY;
       $2535 = (($2534) + ($2533<<2)|0);
       $2536 = HEAP32[$2535>>2]|0;
       $iY66 = $2536;
       while(1) {
        $2537 = $iColumn;
        $2538 = $cWidth;
        $2539 = ($2537>>>0)<($2538>>>0);
        if (!($2539)) {
         break;
        }
        $2540 = $1;
        $2541 = (($2540) + 32952|0);
        $2542 = HEAP32[$2541>>2]|0;
        $2543 = $iColumn;
        $2544 = $nBits;
        $2545 = $2543 >>> $2544;
        $2546 = $pOffsetX;
        $2547 = (($2546) + ($2545<<2)|0);
        $2548 = HEAP32[$2547>>2]|0;
        $2549 = (($2542) + ($2548)|0);
        $2550 = $iY66;
        $2551 = (($2549) + ($2550)|0);
        $pT = $2551;
        $2552 = $iR;
        $2553 = $pT;
        $2554 = (($2553) + ($2552)|0);
        $2555 = HEAP8[$2554>>0]|0;
        $2556 = $pT;
        $2557 = (($2556) + 1|0);
        HEAP8[$2557>>0] = $2555;
        $2558 = $iB;
        $2559 = $pT;
        $2560 = (($2559) + ($2558)|0);
        HEAP8[$2560>>0] = $2555;
        $2561 = $tScale;
        $2562 = $iColumn;
        $2563 = (($2562) + ($2561))|0;
        $iColumn = $2563;
       }
       $2564 = $tScale;
       $2565 = $iRow;
       $2566 = (($2565) + ($2564))|0;
       $iRow = $2566;
      }
      break;
     }
     case 4: case 3: case 2:  {
      $2567 = $iFirstRow;
      $iRow = $2567;
      while(1) {
       $2568 = $iRow;
       $2569 = $cHeight;
       $2570 = ($2568>>>0)<($2569>>>0);
       if (!($2570)) {
        break;
       }
       $2571 = $iFirstColumn;
       $iColumn = $2571;
       $2572 = $iRow;
       $2573 = $nBits;
       $2574 = $2572 >>> $2573;
       $2575 = $pOffsetY;
       $2576 = (($2575) + ($2574<<2)|0);
       $2577 = HEAP32[$2576>>2]|0;
       $iY67 = $2577;
       while(1) {
        $2578 = $iColumn;
        $2579 = $cWidth;
        $2580 = ($2578>>>0)<($2579>>>0);
        if (!($2580)) {
         break;
        }
        $2581 = $1;
        $2582 = (($2581) + 32952|0);
        $2583 = HEAP32[$2582>>2]|0;
        $2584 = $iColumn;
        $2585 = $nBits;
        $2586 = $2584 >>> $2585;
        $2587 = $pOffsetX;
        $2588 = (($2587) + ($2586<<2)|0);
        $2589 = HEAP32[$2588>>2]|0;
        $2590 = (($2583) + ($2589)|0);
        $2591 = $iY67;
        $2592 = (($2590) + ($2591)|0);
        $pT68 = $2592;
        $2593 = $iR;
        $2594 = $pT68;
        $2595 = (($2594) + ($2593<<1)|0);
        $2596 = HEAP16[$2595>>1]|0;
        $2597 = $pT68;
        $2598 = (($2597) + 2|0);
        HEAP16[$2598>>1] = $2596;
        $2599 = $iB;
        $2600 = $pT68;
        $2601 = (($2600) + ($2599<<1)|0);
        HEAP16[$2601>>1] = $2596;
        $2602 = $tScale;
        $2603 = $iColumn;
        $2604 = (($2603) + ($2602))|0;
        $iColumn = $2604;
       }
       $2605 = $tScale;
       $2606 = $iRow;
       $2607 = (($2606) + ($2605))|0;
       $iRow = $2607;
      }
      break;
     }
     case 7: case 6: case 5:  {
      $2608 = $iFirstRow;
      $iRow = $2608;
      while(1) {
       $2609 = $iRow;
       $2610 = $cHeight;
       $2611 = ($2609>>>0)<($2610>>>0);
       if (!($2611)) {
        break;
       }
       $2612 = $iFirstColumn;
       $iColumn = $2612;
       $2613 = $iRow;
       $2614 = $nBits;
       $2615 = $2613 >>> $2614;
       $2616 = $pOffsetY;
       $2617 = (($2616) + ($2615<<2)|0);
       $2618 = HEAP32[$2617>>2]|0;
       $iY69 = $2618;
       while(1) {
        $2619 = $iColumn;
        $2620 = $cWidth;
        $2621 = ($2619>>>0)<($2620>>>0);
        if (!($2621)) {
         break;
        }
        $2622 = $1;
        $2623 = (($2622) + 32952|0);
        $2624 = HEAP32[$2623>>2]|0;
        $2625 = $iColumn;
        $2626 = $nBits;
        $2627 = $2625 >>> $2626;
        $2628 = $pOffsetX;
        $2629 = (($2628) + ($2627<<2)|0);
        $2630 = HEAP32[$2629>>2]|0;
        $2631 = (($2624) + ($2630)|0);
        $2632 = $iY69;
        $2633 = (($2631) + ($2632)|0);
        $pT70 = $2633;
        $2634 = $iR;
        $2635 = $pT70;
        $2636 = (($2635) + ($2634<<2)|0);
        $2637 = HEAP32[$2636>>2]|0;
        $2638 = $pT70;
        $2639 = (($2638) + 4|0);
        HEAP32[$2639>>2] = $2637;
        $2640 = $iB;
        $2641 = $pT70;
        $2642 = (($2641) + ($2640<<2)|0);
        HEAP32[$2642>>2] = $2637;
        $2643 = $tScale;
        $2644 = $iColumn;
        $2645 = (($2644) + ($2643))|0;
        $iColumn = $2645;
       }
       $2646 = $tScale;
       $2647 = $iRow;
       $2648 = (($2647) + ($2646))|0;
       $iRow = $2648;
      }
      break;
     }
     case 10: case 9: case 8:  {
      label = 491;
      break;
     }
     default: {
      label = 491;
     }
     }
     if ((label|0) == 491) {
     }
    }
   } while(0);
   $0 = 0;
   $2649 = $0;
   STACKTOP = sp;return ($2649|0);
  }
 }
 $0 = 0;
 $2649 = $0;
 STACKTOP = sp;return ($2649|0);
}
function _readIndexTable($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $i = 0, $i1 = 0, $iEntry = 0, $index1 = 0, $index13 = 0, $index2 = 0, $index24 = 0, $j = 0, $j2 = 0, $k = 0, $limit1 = 0, $n = 0, $numSubBands = 0;
 var $numTileCols = 0, $numTileRows = 0, $numTiles = 0, $pIO = 0, $pTable = 0, $progressive = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 34272|0);
 $4 = HEAP32[$3>>2]|0;
 $pIO = $4;
 $5 = $1;
 $6 = $pIO;
 $7 = (_readIS($5,$6)|0);
 $err = $7;
 $8 = $err;
 $9 = (0)!=($8|0);
 if ($9) {
  $0 = -1;
  $205 = $0;
  STACKTOP = sp;return ($205|0);
 }
 $10 = $1;
 $11 = (($10) + 34328|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12>>>0)>(0);
 do {
  if ($13) {
   $14 = $1;
   $15 = (($14) + 34288|0);
   $16 = HEAP32[$15>>2]|0;
   $pTable = $16;
   $17 = $1;
   $18 = (($17) + 34260|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 84|0);
   $22 = (($21) + 16452|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $25 = Math_imul($19, $24)|0;
   $iEntry = $25;
   $26 = $pIO;
   $27 = (_getBit32($26,16)|0);
   $28 = ($27|0)!=(1);
   if ($28) {
    $0 = -1;
    $205 = $0;
    STACKTOP = sp;return ($205|0);
   }
   $i = 0;
   while(1) {
    $29 = $i;
    $30 = $iEntry;
    $31 = ($29>>>0)<($30>>>0);
    if (!($31)) {
     label = 12;
     break;
    }
    $32 = $1;
    $33 = $pIO;
    $34 = (_readIS($32,$33)|0);
    $err = $34;
    $35 = $err;
    $36 = (0)!=($35|0);
    if ($36) {
     break;
    }
    $37 = $pIO;
    $38 = (_GetVLWordEsc($37,0)|0);
    $39 = $i;
    $40 = $pTable;
    $41 = (($40) + ($39<<2)|0);
    HEAP32[$41>>2] = $38;
    $42 = $i;
    $43 = (($42) + 1)|0;
    $i = $43;
   }
   if ((label|0) == 12) {
    break;
   }
   $0 = -1;
   $205 = $0;
   STACKTOP = sp;return ($205|0);
  }
 } while(0);
 $44 = $pIO;
 $45 = (_GetVLWordEsc($44,0)|0);
 $46 = $1;
 $47 = (($46) + 34332|0);
 HEAP32[$47>>2] = $45;
 $48 = $pIO;
 (_flushToByte($48)|0);
 $49 = $1;
 $50 = (($49) + 34272|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (_getPosRead($51)|0);
 $53 = $1;
 $54 = (($53) + 34332|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($52))|0;
 HEAP32[$54>>2] = $56;
 $57 = $1;
 $58 = (($57) + 84|0);
 $59 = (($58) + 28|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (0)==($60|0);
 if ($61) {
  $62 = $1;
  $63 = (($62) + 84|0);
  $64 = (($63) + 32852|0);
  HEAP32[$64>>2] = 0;
 } else {
  $65 = $1;
  $66 = (($65) + 84|0);
  $67 = (($66) + 64|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (0)==($68|0);
  if ($69) {
   $70 = $1;
   $71 = (($70) + 84|0);
   $72 = (($71) + 16452|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (0)==($73|0);
   if ($74) {
    $75 = $1;
    $76 = (($75) + 84|0);
    $77 = (($76) + 32852|0);
    HEAP32[$77>>2] = 1;
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
  if ((label|0) == 18) {
   $78 = $1;
   $79 = (($78) + 34256|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (1)==($80|0);
   if ($81) {
    $82 = $1;
    $83 = (($82) + 84|0);
    $84 = (($83) + 32852|0);
    HEAP32[$84>>2] = 1;
   } else {
    $85 = $1;
    $86 = (($85) + 84|0);
    $87 = (($86) + 16452|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + 1)|0;
    $numTileRows = $89;
    $90 = $1;
    $91 = (($90) + 84|0);
    $92 = (($91) + 64|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + 1)|0;
    $numTileCols = $94;
    $95 = $numTileRows;
    $96 = $numTileCols;
    $97 = Math_imul($95, $96)|0;
    $numTiles = $97;
    $98 = $1;
    $99 = (($98) + 34256|0);
    $100 = HEAP32[$99>>2]|0;
    $numSubBands = $100;
    $progressive = 1;
    $k = 0;
    $i1 = 0;
    while(1) {
     $101 = $i1;
     $102 = $numTileRows;
     $103 = (($102) - 1)|0;
     $104 = ($101>>>0)<($103>>>0);
     if (!($104)) {
      break;
     }
     $j = 0;
     while(1) {
      $105 = $j;
      $106 = $numTileCols;
      $107 = ($105>>>0)<($106>>>0);
      if (!($107)) {
       break;
      }
      $108 = $k;
      $109 = $1;
      $110 = (($109) + 34256|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = Math_imul($108, $111)|0;
      $index1 = $112;
      $113 = $k;
      $114 = (($113) + 1)|0;
      $115 = $1;
      $116 = (($115) + 34256|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = Math_imul($114, $117)|0;
      $index2 = $118;
      $119 = $numSubBands;
      $120 = (($119) - 1)|0;
      $n = $120;
      while(1) {
       $121 = $n;
       $122 = ($121>>>0)>=(0);
       if (!($122)) {
        break;
       }
       $123 = $index1;
       $124 = $n;
       $125 = (($123) + ($124))|0;
       $126 = $1;
       $127 = (($126) + 34288|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = (($128) + ($125<<2)|0);
       $130 = HEAP32[$129>>2]|0;
       $limit1 = $130;
       $131 = $limit1;
       $132 = (0)!=($131|0);
       if ($132) {
        label = 27;
        break;
       }
       $133 = $n;
       $134 = (($133) + -1)|0;
       $n = $134;
      }
      if ((label|0) == 27) {
       label = 0;
      }
      $135 = $limit1;
      $136 = $index2;
      $137 = $1;
      $138 = (($137) + 34288|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = (($139) + ($136<<2)|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($135>>>0)<($141>>>0);
      if ($142) {
       label = 31;
       break;
      }
      $143 = $j;
      $144 = (($143) + 1)|0;
      $j = $144;
      $145 = $k;
      $146 = (($145) + 1)|0;
      $k = $146;
     }
     if ((label|0) == 31) {
      label = 0;
      $progressive = 0;
     }
     $147 = $progressive;
     $148 = ($147|0)!=(0);
     if (!($148)) {
      label = 35;
      break;
     }
     $149 = $i1;
     $150 = (($149) + 1)|0;
     $i1 = $150;
    }
    if ((label|0) == 35) {
    }
    $151 = $progressive;
    $152 = ($151|0)!=(0);
    if ($152) {
     $i1 = 0;
     while(1) {
      $153 = $i1;
      $154 = $numTiles;
      $155 = (($154) - 1)|0;
      $156 = ($153>>>0)<($155>>>0);
      if (!($156)) {
       break;
      }
      $157 = $i1;
      $158 = $1;
      $159 = (($158) + 34256|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = Math_imul($157, $160)|0;
      $162 = $numSubBands;
      $163 = (($161) + ($162))|0;
      $164 = (($163) - 1)|0;
      $index13 = $164;
      $165 = $i1;
      $166 = (($165) + 1)|0;
      $167 = $1;
      $168 = (($167) + 34256|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = Math_imul($166, $169)|0;
      $index24 = $170;
      $171 = $numSubBands;
      $172 = (($171) - 1)|0;
      $j2 = $172;
      while(1) {
       $173 = $j2;
       $174 = ($173|0)>(0);
       if (!($174)) {
        break;
       }
       $175 = $index13;
       $176 = $1;
       $177 = (($176) + 34288|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = (($178) + ($175<<2)|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = (0)!=($180|0);
       if ($181) {
        label = 44;
        break;
       }
       $182 = $index13;
       $183 = (($182) + -1)|0;
       $index13 = $183;
       $184 = $j2;
       $185 = (($184) + -1)|0;
       $j2 = $185;
      }
      if ((label|0) == 44) {
       label = 0;
      }
      $186 = $index13;
      $187 = $1;
      $188 = (($187) + 34288|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = (($189) + ($186<<2)|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = $index24;
      $193 = $1;
      $194 = (($193) + 34288|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195) + ($192<<2)|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = ($191>>>0)<($197>>>0);
      if ($198) {
       label = 48;
       break;
      }
      $199 = $i1;
      $200 = (($199) + 1)|0;
      $i1 = $200;
     }
     if ((label|0) == 48) {
      $progressive = 0;
     }
    }
    $201 = $progressive;
    $202 = $1;
    $203 = (($202) + 84|0);
    $204 = (($203) + 32852|0);
    HEAP32[$204>>2] = $201;
   }
  }
 }
 $0 = 0;
 $205 = $0;
 STACKTOP = sp;return ($205|0);
}
function _GetVLWordEsc($pIO,$iEscape) {
 $pIO = $pIO|0;
 $iEscape = $iEscape|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $iEscape;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  HEAP32[$4>>2] = 0;
 }
 $5 = $0;
 $6 = (_getBit32($5,8)|0);
 $s = $6;
 $7 = $s;
 $8 = ($7|0)==(253);
 if (!($8)) {
  $9 = $s;
  $10 = ($9|0)==(254);
  if (!($10)) {
   $11 = $s;
   $12 = ($11|0)==(255);
   if (!($12)) {
    $17 = $s;
    $18 = ($17>>>0)<(251);
    if ($18) {
     $19 = $s;
     $20 = $19 << 8;
     $21 = $0;
     $22 = (_getBit32($21,8)|0);
     $23 = $20 | $22;
     $s = $23;
    } else {
     $24 = $s;
     $25 = (($24) - 251)|0;
     $s = $25;
     $26 = $s;
     $27 = ($26|0)!=(0);
     if ($27) {
      $28 = $0;
      $29 = (_getBit32($28,16)|0);
      $30 = $29 << 16;
      $s = $30;
      $31 = $s;
      $32 = $0;
      $33 = (_getBit32($32,16)|0);
      $34 = $31 | $33;
      $35 = $34 << 16;
      $s = $35;
      $36 = $s;
      $37 = $36 << 16;
      $s = $37;
     }
     $38 = $0;
     $39 = (_getBit32($38,16)|0);
     $40 = $39 << 16;
     $41 = $s;
     $42 = $41 | $40;
     $s = $42;
     $43 = $0;
     $44 = (_getBit32($43,16)|0);
     $45 = $s;
     $46 = $45 | $44;
     $s = $46;
    }
    $47 = $s;
    STACKTOP = sp;return ($47|0);
   }
  }
 }
 $13 = $1;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $s;
  $16 = $1;
  HEAP32[$16>>2] = $15;
 }
 $s = 0;
 $47 = $s;
 STACKTOP = sp;return ($47|0);
}
function _StrIODecInit($pSC,$failSafe) {
 $pSC = $pSC|0;
 $failSafe = $failSafe|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $errCode = 0, $i = 0, $j = 0, $p = 0, $p1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer35 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer35 = sp + 56|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer14 = sp + 16|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer8 = sp;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 88|0;
 $vararg_buffer = sp + 80|0;
 $0 = $pSC;
 $1 = $failSafe;
 $2 = $0;
 $3 = $1;
 $4 = (_allocateBitIOInfo($2,$3)|0);
 $errCode = $4;
 $5 = $errCode;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
  } else {
   $7 = $0;
   $8 = (_AllocateIndexTable($7)|0);
   $errCode = $8;
   $9 = $errCode;
   $10 = ($9|0)!=(0);
   if ($10) {
    break;
   }
   $11 = $0;
   $12 = (($11) + 34272|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $0;
   $15 = (($14) + 84|0);
   $16 = (($15) + 52|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $0;
   $19 = (_attachISRead($13,$17,$18)|0);
   $err = $19;
   $20 = $err;
   $21 = (0)!=($20|0);
   if ($21) {
    $errCode = -1;
    break;
   }
   $22 = $0;
   $23 = (_readIndexTable($22)|0);
   $errCode = $23;
   $24 = $errCode;
   $25 = (0)!=($24|0);
   if ($25) {
    break;
   }
   $26 = $0;
   $27 = (($26) + 84|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(0);
   if ($29) {
    $30 = $0;
    $31 = (($30) + 84|0);
    $32 = (($31) + 16452|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$vararg_buffer>>2] = $34;
    (_printf((8992|0),($vararg_buffer|0))|0);
    $i = 0;
    while(1) {
     $35 = $i;
     $36 = $0;
     $37 = (($36) + 84|0);
     $38 = (($37) + 16452|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($35>>>0)<=($39>>>0);
     if (!($40)) {
      break;
     }
     $41 = $i;
     $42 = $i;
     $43 = $0;
     $44 = (($43) + 84|0);
     $45 = (($44) + 16456|0);
     $46 = (($45) + ($42<<2)|0);
     $47 = HEAP32[$46>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $41;
     $vararg_ptr4 = (($vararg_buffer1) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $47;
     (_printf((9016|0),($vararg_buffer1|0))|0);
     $48 = $i;
     $49 = (($48) + 1)|0;
     $i = $49;
    }
    $50 = $0;
    $51 = (($50) + 84|0);
    $52 = (($51) + 64|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + 1)|0;
    HEAP32[$vararg_buffer5>>2] = $54;
    (_printf((9056|0),($vararg_buffer5|0))|0);
    $i = 0;
    while(1) {
     $55 = $i;
     $56 = $0;
     $57 = (($56) + 84|0);
     $58 = (($57) + 64|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($55>>>0)<=($59>>>0);
     if (!($60)) {
      break;
     }
     $61 = $i;
     $62 = $i;
     $63 = $0;
     $64 = (($63) + 84|0);
     $65 = (($64) + 68|0);
     $66 = (($65) + ($62<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $61;
     $vararg_ptr11 = (($vararg_buffer8) + 4|0);
     HEAP32[$vararg_ptr11>>2] = $67;
     (_printf((9016|0),($vararg_buffer8|0))|0);
     $68 = $i;
     $69 = (($68) + 1)|0;
     $i = $69;
    }
    $70 = $0;
    $71 = (($70) + 84|0);
    $72 = (($71) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0);
    if ($74) {
     (_printf((9080|0),($vararg_buffer12|0))|0);
    } else {
     (_printf((9112|0),($vararg_buffer14|0))|0);
    }
    $75 = $0;
    $76 = (($75) + 34136|0);
    $77 = (($76) + 24|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)!=(0);
    if ($79) {
     $80 = $0;
     $81 = (($80) + 84|0);
     $82 = (($81) + 28|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==(0);
     if ($84) {
      $j = 0;
      while(1) {
       $85 = $j;
       $86 = $0;
       $87 = (($86) + 84|0);
       $88 = (($87) + 16452|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($85>>>0)<=($89>>>0);
       if (!($90)) {
        break;
       }
       $i = 0;
       while(1) {
        $91 = $i;
        $92 = $0;
        $93 = (($92) + 84|0);
        $94 = (($93) + 64|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = ($91>>>0)<=($95>>>0);
        if (!($96)) {
         break;
        }
        $97 = $j;
        $98 = $0;
        $99 = (($98) + 84|0);
        $100 = (($99) + 64|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = (($101) + 1)|0;
        $103 = Math_imul($97, $102)|0;
        $104 = $i;
        $105 = (($103) + ($104))|0;
        $106 = $0;
        $107 = (($106) + 34288|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = (($108) + ($105<<2)|0);
        $p = $109;
        $110 = $i;
        $111 = $j;
        $112 = (($110) + ($111))|0;
        $113 = $0;
        $114 = (($113) + 84|0);
        $115 = (($114) + 16452|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = $0;
        $118 = (($117) + 84|0);
        $119 = (($118) + 64|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = (($116) + ($120))|0;
        $122 = ($112|0)!=($121|0);
        if ($122) {
         $123 = $j;
         $124 = $i;
         $125 = $p;
         $126 = (($125) + 4|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = $p;
         $129 = HEAP32[$128>>2]|0;
         $130 = (($127) - ($129))|0;
         HEAP32[$vararg_buffer18>>2] = $123;
         $vararg_ptr21 = (($vararg_buffer18) + 4|0);
         HEAP32[$vararg_ptr21>>2] = $124;
         $vararg_ptr22 = (($vararg_buffer18) + 8|0);
         HEAP32[$vararg_ptr22>>2] = $130;
         (_printf((9184|0),($vararg_buffer18|0))|0);
        } else {
         $131 = $j;
         $132 = $i;
         HEAP32[$vararg_buffer23>>2] = $131;
         $vararg_ptr26 = (($vararg_buffer23) + 4|0);
         HEAP32[$vararg_ptr26>>2] = $132;
         (_printf((9224|0),($vararg_buffer23|0))|0);
        }
        $133 = $i;
        $134 = (($133) + 1)|0;
        $i = $134;
       }
       $135 = $j;
       $136 = (($135) + 1)|0;
       $j = $136;
      }
     } else {
      $j = 0;
      while(1) {
       $137 = $j;
       $138 = $0;
       $139 = (($138) + 84|0);
       $140 = (($139) + 16452|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($137>>>0)<=($141>>>0);
       if (!($142)) {
        break;
       }
       $i = 0;
       while(1) {
        $143 = $i;
        $144 = $0;
        $145 = (($144) + 84|0);
        $146 = (($145) + 64|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = ($143>>>0)<=($147>>>0);
        if (!($148)) {
         break;
        }
        $149 = $j;
        $150 = $0;
        $151 = (($150) + 84|0);
        $152 = (($151) + 64|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = (($153) + 1)|0;
        $155 = Math_imul($149, $154)|0;
        $156 = $i;
        $157 = (($155) + ($156))|0;
        $158 = $157<<2;
        $159 = $0;
        $160 = (($159) + 34288|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = (($161) + ($158<<2)|0);
        $p1 = $162;
        $163 = $i;
        $164 = $j;
        $165 = (($163) + ($164))|0;
        $166 = $0;
        $167 = (($166) + 84|0);
        $168 = (($167) + 16452|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = $0;
        $171 = (($170) + 84|0);
        $172 = (($171) + 64|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = (($169) + ($173))|0;
        $175 = ($165|0)!=($174|0);
        if ($175) {
         $176 = $j;
         $177 = $i;
         $178 = $p1;
         $179 = (($178) + 4|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = $p1;
         $182 = HEAP32[$181>>2]|0;
         $183 = (($180) - ($182))|0;
         $184 = $p1;
         $185 = (($184) + 8|0);
         $186 = HEAP32[$185>>2]|0;
         $187 = $p1;
         $188 = (($187) + 4|0);
         $189 = HEAP32[$188>>2]|0;
         $190 = (($186) - ($189))|0;
         $191 = $p1;
         $192 = (($191) + 12|0);
         $193 = HEAP32[$192>>2]|0;
         $194 = $p1;
         $195 = (($194) + 8|0);
         $196 = HEAP32[$195>>2]|0;
         $197 = (($193) - ($196))|0;
         $198 = $p1;
         $199 = (($198) + 16|0);
         $200 = HEAP32[$199>>2]|0;
         $201 = $p1;
         $202 = (($201) + 12|0);
         $203 = HEAP32[$202>>2]|0;
         $204 = (($200) - ($203))|0;
         HEAP32[$vararg_buffer27>>2] = $176;
         $vararg_ptr30 = (($vararg_buffer27) + 4|0);
         HEAP32[$vararg_ptr30>>2] = $177;
         $vararg_ptr31 = (($vararg_buffer27) + 8|0);
         HEAP32[$vararg_ptr31>>2] = $183;
         $vararg_ptr32 = (($vararg_buffer27) + 12|0);
         HEAP32[$vararg_ptr32>>2] = $190;
         $vararg_ptr33 = (($vararg_buffer27) + 16|0);
         HEAP32[$vararg_ptr33>>2] = $197;
         $vararg_ptr34 = (($vararg_buffer27) + 20|0);
         HEAP32[$vararg_ptr34>>2] = $204;
         (_printf((9272|0),($vararg_buffer27|0))|0);
        } else {
         $205 = $j;
         $206 = $i;
         $207 = $p1;
         $208 = (($207) + 4|0);
         $209 = HEAP32[$208>>2]|0;
         $210 = $p1;
         $211 = HEAP32[$210>>2]|0;
         $212 = (($209) - ($211))|0;
         $213 = $p1;
         $214 = (($213) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $216 = $p1;
         $217 = (($216) + 4|0);
         $218 = HEAP32[$217>>2]|0;
         $219 = (($215) - ($218))|0;
         $220 = $p1;
         $221 = (($220) + 12|0);
         $222 = HEAP32[$221>>2]|0;
         $223 = $p1;
         $224 = (($223) + 8|0);
         $225 = HEAP32[$224>>2]|0;
         $226 = (($222) - ($225))|0;
         HEAP32[$vararg_buffer35>>2] = $205;
         $vararg_ptr38 = (($vararg_buffer35) + 4|0);
         HEAP32[$vararg_ptr38>>2] = $206;
         $vararg_ptr39 = (($vararg_buffer35) + 8|0);
         HEAP32[$vararg_ptr39>>2] = $212;
         $vararg_ptr40 = (($vararg_buffer35) + 12|0);
         HEAP32[$vararg_ptr40>>2] = $219;
         $vararg_ptr41 = (($vararg_buffer35) + 16|0);
         HEAP32[$vararg_ptr41>>2] = $226;
         (_printf((9344|0),($vararg_buffer35|0))|0);
        }
        $227 = $i;
        $228 = (($227) + 1)|0;
        $i = $228;
       }
       $229 = $j;
       $230 = (($229) + 1)|0;
       $j = $230;
      }
     }
    } else {
     (_printf((9144|0),($vararg_buffer16|0))|0);
    }
   }
  }
 } while(0);
 $231 = $errCode;
 $232 = (0)!=($231|0);
 if (!($232)) {
  $248 = $errCode;
  STACKTOP = sp;return ($248|0);
 }
 $233 = $0;
 $234 = (($233) + 34288|0);
 $235 = HEAP32[$234>>2]|0;
 _free($235);
 $236 = $0;
 $237 = (($236) + 34288|0);
 HEAP32[$237>>2] = 0;
 $238 = $0;
 $239 = (($238) + 34320|0);
 $240 = HEAP32[$239>>2]|0;
 _free($240);
 $241 = $0;
 $242 = (($241) + 34320|0);
 HEAP32[$242>>2] = 0;
 $243 = $0;
 $244 = (($243) + 34324|0);
 $245 = HEAP32[$244>>2]|0;
 _free($245);
 $246 = $0;
 $247 = (($246) + 34324|0);
 HEAP32[$247>>2] = 0;
 $248 = $errCode;
 STACKTOP = sp;return ($248|0);
}
function _StrIODecTerm($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 34272|0);
 $4 = HEAP32[$3>>2]|0;
 _detachISRead($1,$4);
 $5 = $0;
 _freeBitIOInfo($5);
 $6 = $0;
 $7 = (($6) + 34288|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 STACKTOP = sp;return 0;
}
function _freeBitIOInfo($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34320|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $0;
 $5 = (($4) + 34324|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 STACKTOP = sp;return;
}
function _initLookupTables($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bReverse = 0, $cStrideX = 0, $cStrideY = 0, $dh = 0, $dw = 0, $h = 0, $i = 0, $iFirst = 0, $or = 0;
 var $pII = 0, $roiBottom = 0, $roiLeft = 0, $roiRight = 0, $roiTop = 0, $scale = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 4|0);
 $pII = $3;
 $iFirst = 0;
 $4 = $1;
 $5 = (($4) + 34248|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $scale = $8;
 $9 = $1;
 $10 = (($9) + 34248|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $roiLeft = $13;
 $14 = $1;
 $15 = (($14) + 34248|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $roiTop = $18;
 $19 = $1;
 $20 = (($19) + 34248|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $roiRight = $23;
 $24 = $1;
 $25 = (($24) + 34248|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $roiBottom = $28;
 $29 = $roiLeft;
 $30 = $scale;
 $31 = (($29) + ($30))|0;
 $32 = (($31) - 1)|0;
 $33 = $scale;
 $34 = (($32>>>0) / ($33>>>0))&-1;
 $dw = $34;
 $35 = $roiTop;
 $36 = $scale;
 $37 = (($35) + ($36))|0;
 $38 = (($37) - 1)|0;
 $39 = $scale;
 $40 = (($38>>>0) / ($39>>>0))&-1;
 $dh = $40;
 $41 = $pII;
 $42 = (($41) + 64|0);
 $43 = HEAP32[$42>>2]|0;
 $or = $43;
 $44 = $scale;
 $45 = ($44>>>0)>(1);
 if ($45) {
  $46 = $pII;
  $47 = (($46) + 56|0);
  $48 = HEAP32[$47>>2]|0;
  $w = $48;
  $49 = $pII;
  $50 = (($49) + 60|0);
  $51 = HEAP32[$50>>2]|0;
  $h = $51;
 } else {
  $52 = $pII;
  $53 = HEAP32[$52>>2]|0;
  $w = $53;
  $54 = $pII;
  $55 = (($54) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $h = $56;
 }
 $57 = $dw;
 $58 = $w;
 $59 = (($58) + ($57))|0;
 $w = $59;
 $60 = $dh;
 $61 = $h;
 $62 = (($61) + ($60))|0;
 $h = $62;
 $63 = $pII;
 $64 = (($63) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 switch ($65|0) {
 case 4: case 10: case 8: case 3: case 2:  {
  $66 = $1;
  $67 = (($66) + 32952|0);
  $68 = (($67) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69>>>0) / 2)&-1;
  $cStrideY = $70;
  break;
 }
 case 9: case 7: case 6: case 5:  {
  $71 = $1;
  $72 = (($71) + 32952|0);
  $73 = (($72) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74>>>0) / 4)&-1;
  $cStrideY = $75;
  break;
 }
 default: {
  $76 = $1;
  $77 = (($76) + 32952|0);
  $78 = (($77) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $cStrideY = $79;
 }
 }
 $80 = $pII;
 $81 = (($80) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 if ((($82|0) == 2)) {
  $cStrideX = 4;
  $87 = $w;
  $88 = $87 >>> 1;
  $w = $88;
 } else if ((($82|0) == 1)) {
  $cStrideX = 6;
  $83 = $w;
  $84 = $83 >>> 1;
  $w = $84;
  $85 = $h;
  $86 = $85 >>> 1;
  $h = $86;
 } else {
  $89 = $pII;
  $90 = (($89) + 16|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $91 >>> 3;
  $93 = $pII;
  $94 = (($93) + 12|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (9424 + ($95)|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = (($92>>>0) / ($98>>>0))&-1;
  $cStrideX = $99;
 }
 $100 = $pII;
 $101 = (($100) + 12|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)==(0);
 if ($103) {
  label = 16;
 } else {
  $104 = $pII;
  $105 = (($104) + 12|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)==(8);
  if ($107) {
   label = 16;
  } else {
   $108 = $pII;
   $109 = (($108) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)==(9);
   if ($111) {
    label = 16;
   } else {
    $112 = $pII;
    $113 = (($112) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)==(10);
    if ($115) {
     label = 16;
    }
   }
  }
 }
 if ((label|0) == 16) {
  $cStrideX = 1;
 }
 $116 = $pII;
 $117 = (($116) + 64|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118>>>0)>(3);
 if ($119) {
  $120 = $cStrideX;
  $i = $120;
  $121 = $cStrideY;
  $cStrideX = $121;
  $122 = $i;
  $cStrideY = $122;
 }
 $123 = $w;
 $124 = $123<<2;
 $125 = (_malloc($124)|0);
 $126 = $1;
 $127 = (($126) + 34248|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + 40|0);
 HEAP32[$129>>2] = $125;
 $130 = $1;
 $131 = (($130) + 34248|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + 40|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)==(0|0);
 if (!($135)) {
  $136 = $w;
  $137 = $136<<2;
  $138 = $w;
  $139 = ($137>>>0)<($138>>>0);
  if (!($139)) {
   $140 = $or;
   $141 = (2)==($140|0);
   if ($141) {
    $149 = 1;
   } else {
    $142 = $or;
    $143 = (3)==($142|0);
    if ($143) {
     $149 = 1;
    } else {
     $144 = $or;
     $145 = (5)==($144|0);
     if ($145) {
      $149 = 1;
     } else {
      $146 = $or;
      $147 = (7)==($146|0);
      $149 = $147;
     }
    }
   }
   $148 = $149&1;
   $bReverse = $148;
   $150 = $1;
   $151 = (($150) + 34248|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)!=(0);
   if ($154) {
    $156 = 0;
   } else {
    $155 = $dw;
    $156 = $155;
   }
   $iFirst = $156;
   $i = 0;
   while(1) {
    $157 = $i;
    $158 = $iFirst;
    $159 = (($157) + ($158))|0;
    $160 = $w;
    $161 = ($159>>>0)<($160>>>0);
    if (!($161)) {
     break;
    }
    $162 = $pII;
    $163 = (($162) + 20|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $bReverse;
    $166 = ($165|0)!=(0);
    if ($166) {
     $167 = $1;
     $168 = (($167) + 34248|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = HEAP32[$169>>2]|0;
     $171 = ($170|0)!=(0);
     if ($171) {
      $172 = $w;
      $192 = $172;
     } else {
      $173 = $roiRight;
      $174 = $roiLeft;
      $175 = (($173) - ($174))|0;
      $176 = $scale;
      $177 = (($175) + ($176))|0;
      $178 = $scale;
      $179 = (($177>>>0) / ($178>>>0))&-1;
      $180 = $pII;
      $181 = (($180) + 8|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = ($182|0)==(1);
      if ($183) {
       $189 = 1;
      } else {
       $184 = $pII;
       $185 = (($184) + 8|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($186|0)==(2);
       $189 = $187;
      }
      $188 = $189 ? 2 : 1;
      $190 = (($179>>>0) / ($188>>>0))&-1;
      $192 = $190;
     }
     $191 = (($192) - 1)|0;
     $193 = $i;
     $194 = (($191) - ($193))|0;
     $198 = $194;
    } else {
     $195 = $i;
     $198 = $195;
    }
    $196 = $cStrideX;
    $197 = Math_imul($198, $196)|0;
    $199 = (($164) + ($197))|0;
    $200 = $i;
    $201 = $iFirst;
    $202 = (($200) + ($201))|0;
    $203 = $1;
    $204 = (($203) + 34248|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (($205) + 40|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = (($207) + ($202<<2)|0);
    HEAP32[$208>>2] = $199;
    $209 = $i;
    $210 = (($209) + 1)|0;
    $i = $210;
   }
   $211 = $h;
   $212 = $211<<2;
   $213 = (_malloc($212)|0);
   $214 = $1;
   $215 = (($214) + 34248|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + 44|0);
   HEAP32[$217>>2] = $213;
   $218 = $1;
   $219 = (($218) + 34248|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = (($220) + 44|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = ($222|0)==(0|0);
   if (!($223)) {
    $224 = $h;
    $225 = $224<<2;
    $226 = $h;
    $227 = ($225>>>0)<($226>>>0);
    if (!($227)) {
     $228 = $or;
     $229 = (1)==($228|0);
     if ($229) {
      $237 = 1;
     } else {
      $230 = $or;
      $231 = (3)==($230|0);
      if ($231) {
       $237 = 1;
      } else {
       $232 = $or;
       $233 = (4)==($232|0);
       if ($233) {
        $237 = 1;
       } else {
        $234 = $or;
        $235 = (5)==($234|0);
        $237 = $235;
       }
      }
     }
     $236 = $237&1;
     $bReverse = $236;
     $238 = $1;
     $239 = (($238) + 34248|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = HEAP32[$240>>2]|0;
     $242 = ($241|0)!=(0);
     if ($242) {
      $244 = 0;
     } else {
      $243 = $dh;
      $244 = $243;
     }
     $iFirst = $244;
     $i = 0;
     while(1) {
      $245 = $i;
      $246 = $iFirst;
      $247 = (($245) + ($246))|0;
      $248 = $h;
      $249 = ($247>>>0)<($248>>>0);
      if (!($249)) {
       break;
      }
      $250 = $bReverse;
      $251 = ($250|0)!=(0);
      if ($251) {
       $252 = $1;
       $253 = (($252) + 34248|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = HEAP32[$254>>2]|0;
       $256 = ($255|0)!=(0);
       if ($256) {
        $257 = $h;
        $272 = $257;
       } else {
        $258 = $roiBottom;
        $259 = $roiTop;
        $260 = (($258) - ($259))|0;
        $261 = $scale;
        $262 = (($260) + ($261))|0;
        $263 = $scale;
        $264 = (($262>>>0) / ($263>>>0))&-1;
        $265 = $pII;
        $266 = (($265) + 8|0);
        $267 = HEAP32[$266>>2]|0;
        $268 = ($267|0)==(1);
        $269 = $268 ? 2 : 1;
        $270 = (($264>>>0) / ($269>>>0))&-1;
        $272 = $270;
       }
       $271 = (($272) - 1)|0;
       $273 = $i;
       $274 = (($271) - ($273))|0;
       $278 = $274;
      } else {
       $275 = $i;
       $278 = $275;
      }
      $276 = $cStrideY;
      $277 = Math_imul($278, $276)|0;
      $279 = $i;
      $280 = $iFirst;
      $281 = (($279) + ($280))|0;
      $282 = $1;
      $283 = (($282) + 34248|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = (($284) + 44|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = (($286) + ($281<<2)|0);
      HEAP32[$287>>2] = $277;
      $288 = $i;
      $289 = (($288) + 1)|0;
      $i = $289;
     }
     $0 = 0;
     $290 = $0;
     STACKTOP = sp;return ($290|0);
    }
   }
   $0 = -1;
   $290 = $0;
   STACKTOP = sp;return ($290|0);
  }
 }
 $0 = -1;
 $290 = $0;
 STACKTOP = sp;return ($290|0);
}
function _setROI($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pSCP = 0, $pWMII = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 4|0);
 $pWMII = $2;
 $3 = $0;
 $4 = (($3) + 84|0);
 $pSCP = $4;
 $5 = $0;
 $6 = (($5) + 34136|0);
 $7 = (($6) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (($9) + 34136|0);
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($8) + ($12))|0;
 $14 = $pWMII;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) - ($13))|0;
 HEAP32[$14>>2] = $16;
 $17 = $0;
 $18 = (($17) + 34136|0);
 $19 = (($18) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = (($21) + 34136|0);
 $23 = (($22) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($20) + ($24))|0;
 $26 = $pWMII;
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) - ($25))|0;
 HEAP32[$27>>2] = $29;
 $30 = $pSCP;
 $31 = (($30) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(1);
 $34 = $33&1;
 $35 = $0;
 $36 = (($35) + 34248|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 8|0);
 HEAP32[$38>>2] = $34;
 $39 = $pSCP;
 $40 = (($39) + 44|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0);
 if ($42) {
  $48 = 1;
 } else {
  $43 = $pSCP;
  $44 = (($43) + 44|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(1);
  $48 = $46;
 }
 $47 = $48&1;
 $49 = $0;
 $50 = (($49) + 34248|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 16|0);
 HEAP32[$52>>2] = $47;
 $53 = $pSCP;
 $54 = (($53) + 44|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(3);
 $57 = $56&1;
 $58 = $0;
 $59 = (($58) + 34248|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 20|0);
 HEAP32[$61>>2] = $57;
 $62 = $0;
 $63 = (($62) + 34248|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 12|0);
 HEAP32[$65>>2] = 1;
 while(1) {
  $66 = $0;
  $67 = (($66) + 34248|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $pWMII;
  $72 = (($71) + 56|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = Math_imul($70, $73)|0;
  $75 = $pWMII;
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74>>>0)<($76>>>0);
  if (!($77)) {
   break;
  }
  $78 = $0;
  $79 = (($78) + 34248|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 << 1;
  HEAP32[$81>>2] = $83;
 }
 $84 = $0;
 $85 = (($84) + 84|0);
 $86 = (($85) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(1);
 if ($88) {
  $89 = $0;
  $90 = (($89) + 34248|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + 12|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93>>>0)>=(4);
  if ($94) {
   $95 = $0;
   $96 = (($95) + 34248|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + 16|0);
   HEAP32[$98>>2] = 0;
  }
  $99 = $0;
  $100 = (($99) + 34248|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + 12|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103>>>0)>=(16);
  if ($104) {
   $105 = $0;
   $106 = (($105) + 34248|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($107) + 20|0);
   HEAP32[$108>>2] = 0;
  }
 }
 $109 = $0;
 $110 = (($109) + 34136|0);
 $111 = (($110) + 44|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $0;
 $114 = (($113) + 34136|0);
 $115 = (($114) + 52|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($112) + ($116))|0;
 $118 = $pWMII;
 $119 = HEAP32[$118>>2]|0;
 $120 = (($119) + ($117))|0;
 HEAP32[$118>>2] = $120;
 $121 = $0;
 $122 = (($121) + 34136|0);
 $123 = (($122) + 40|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = $0;
 $126 = (($125) + 34136|0);
 $127 = (($126) + 48|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($124) + ($128))|0;
 $130 = $pWMII;
 $131 = (($130) + 4|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + ($129))|0;
 HEAP32[$131>>2] = $133;
 $134 = $pWMII;
 $135 = (($134) + 32|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $0;
 $138 = (($137) + 34248|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($139) + 12|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = Math_imul($136, $141)|0;
 $143 = $0;
 $144 = (($143) + 34136|0);
 $145 = (($144) + 44|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (($142) + ($146))|0;
 $148 = $0;
 $149 = (($148) + 34248|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = (($150) + 24|0);
 HEAP32[$151>>2] = $147;
 $152 = $0;
 $153 = (($152) + 34248|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + 24|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $pWMII;
 $158 = (($157) + 36|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $0;
 $161 = (($160) + 34248|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($162) + 12|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = Math_imul($159, $164)|0;
 $166 = (($156) + ($165))|0;
 $167 = (($166) - 1)|0;
 $168 = $0;
 $169 = (($168) + 34248|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = (($170) + 28|0);
 HEAP32[$171>>2] = $167;
 $172 = $pWMII;
 $173 = (($172) + 40|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = $0;
 $176 = (($175) + 34248|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = (($177) + 12|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = Math_imul($174, $179)|0;
 $181 = $0;
 $182 = (($181) + 34136|0);
 $183 = (($182) + 40|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = (($180) + ($184))|0;
 $186 = $0;
 $187 = (($186) + 34248|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = (($188) + 32|0);
 HEAP32[$189>>2] = $185;
 $190 = $0;
 $191 = (($190) + 34248|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = (($192) + 32|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $pWMII;
 $196 = (($195) + 44|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = $0;
 $199 = (($198) + 34248|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = (($200) + 12|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = Math_imul($197, $202)|0;
 $204 = (($194) + ($203))|0;
 $205 = (($204) - 1)|0;
 $206 = $0;
 $207 = (($206) + 34248|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = (($208) + 36|0);
 HEAP32[$209>>2] = $205;
 $210 = $0;
 $211 = (($210) + 34248|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = (($212) + 28|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = $pWMII;
 $216 = HEAP32[$215>>2]|0;
 $217 = ($214>>>0)>=($216>>>0);
 if ($217) {
  $218 = $pWMII;
  $219 = HEAP32[$218>>2]|0;
  $220 = (($219) - 1)|0;
  $221 = $0;
  $222 = (($221) + 34248|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($223) + 28|0);
  HEAP32[$224>>2] = $220;
 }
 $225 = $0;
 $226 = (($225) + 34248|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = (($227) + 36|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = $pWMII;
 $231 = (($230) + 4|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = ($229>>>0)>=($232>>>0);
 if ($233) {
  $234 = $pWMII;
  $235 = (($234) + 4|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($236) - 1)|0;
  $238 = $0;
  $239 = (($238) + 34248|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + 36|0);
  HEAP32[$241>>2] = $237;
 }
 $242 = $0;
 $243 = (($242) + 34248|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = (($244) + 24|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = $0;
 $248 = (($247) + 34248|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = (($249) + 32|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = (($246) + ($251))|0;
 $253 = ($252|0)==(0);
 if ($253) {
  $254 = $0;
  $255 = (($254) + 34248|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = (($256) + 28|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = (($258) + 15)|0;
  $260 = (($259>>>0) / 16)&-1;
  $261 = $pWMII;
  $262 = HEAP32[$261>>2]|0;
  $263 = (($262) + 14)|0;
  $264 = (($263>>>0) / 16)&-1;
  $265 = ($260>>>0)>=($264>>>0);
  if ($265) {
   $266 = $0;
   $267 = (($266) + 34248|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = (($268) + 36|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = (($270) + 15)|0;
   $272 = (($271>>>0) / 16)&-1;
   $273 = $pWMII;
   $274 = (($273) + 4|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = (($275) + 14)|0;
   $277 = (($276>>>0) / 16)&-1;
   $278 = ($272>>>0)>=($277>>>0);
   $280 = $278;
  } else {
   $280 = 0;
  }
 } else {
  $280 = 0;
 }
 $279 = $280&1;
 $281 = $0;
 $282 = (($281) + 34248|0);
 $283 = HEAP32[$282>>2]|0;
 HEAP32[$283>>2] = $279;
 $284 = $0;
 $285 = (($284) + 34248|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = (($286) + 24|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = ($288|0)==(0);
 if ($289) {
  $290 = $0;
  $291 = (($290) + 34248|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = (($292) + 28|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (($294) + 15)|0;
  $296 = (($295>>>0) / 16)&-1;
  $297 = $pWMII;
  $298 = HEAP32[$297>>2]|0;
  $299 = (($298) + 14)|0;
  $300 = (($299>>>0) / 16)&-1;
  $301 = ($296>>>0)>=($300>>>0);
  $303 = $301;
 } else {
  $303 = 0;
 }
 $302 = $303&1;
 $304 = $0;
 $305 = (($304) + 34248|0);
 $306 = HEAP32[$305>>2]|0;
 $307 = (($306) + 4|0);
 HEAP32[$307>>2] = $302;
 $308 = $0;
 $309 = (($308) + 34136|0);
 $310 = (($309) + 44|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = $0;
 $313 = (($312) + 34136|0);
 $314 = (($313) + 52|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = (($311) + ($315))|0;
 $317 = $pWMII;
 $318 = HEAP32[$317>>2]|0;
 $319 = (($318) - ($316))|0;
 HEAP32[$317>>2] = $319;
 $320 = $0;
 $321 = (($320) + 34136|0);
 $322 = (($321) + 40|0);
 $323 = HEAP32[$322>>2]|0;
 $324 = $0;
 $325 = (($324) + 34136|0);
 $326 = (($325) + 48|0);
 $327 = HEAP32[$326>>2]|0;
 $328 = (($323) + ($327))|0;
 $329 = $pWMII;
 $330 = (($329) + 4|0);
 $331 = HEAP32[$330>>2]|0;
 $332 = (($331) - ($328))|0;
 HEAP32[$330>>2] = $332;
 $333 = $0;
 $334 = (($333) + 84|0);
 $335 = (($334) + 28|0);
 $336 = HEAP32[$335>>2]|0;
 $337 = ($336|0)==(1);
 if (!($337)) {
  $346 = $0;
  $347 = (($346) + 34292|0);
  HEAP32[$347>>2] = 0;
  $348 = $0;
  $349 = (($348) + 34296|0);
  HEAP32[$349>>2] = 0;
  STACKTOP = sp;return;
 }
 $338 = $pWMII;
 $339 = (($338) + 48|0);
 $340 = HEAP32[$339>>2]|0;
 $341 = ($340|0)==(1);
 if (!($341)) {
  $346 = $0;
  $347 = (($346) + 34292|0);
  HEAP32[$347>>2] = 0;
  $348 = $0;
  $349 = (($348) + 34296|0);
  HEAP32[$349>>2] = 0;
  STACKTOP = sp;return;
 }
 $342 = $0;
 $343 = (($342) + 34248|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = (($344) + 8|0);
 HEAP32[$345>>2] = 1;
 $346 = $0;
 $347 = (($346) + 34292|0);
 HEAP32[$347>>2] = 0;
 $348 = $0;
 $349 = (($348) + 34296|0);
 HEAP32[$349>>2] = 0;
 STACKTOP = sp;return;
}
function _StrDecInit($pSC,$failSafe) {
 $pSC = $pSC|0;
 $failSafe = $failSafe|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cfExt = 0, $cfInt = 0, $i = 0, $numCodingContexts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $failSafe;
 $3 = $1;
 $4 = (($3) + 34136|0);
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $cfInt = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $cfExt = $10;
 $11 = $cfExt;
 $12 = ($11|0)!=(0);
 do {
  if ($12) {
   $13 = $cfInt;
   $14 = ($13|0)==(1);
   if ($14) {
    $15 = $cfExt;
    $16 = ($15|0)!=(1);
    if (!($16)) {
     label = 4;
    }
   } else {
    label = 4;
   }
   if ((label|0) == 4) {
    $17 = $cfInt;
    $18 = ($17|0)==(2);
    if (!($18)) {
     $28 = 0;
     break;
    }
    $19 = $cfExt;
    $20 = ($19|0)!=(2);
    if (!($20)) {
     $28 = 0;
     break;
    }
   }
   $21 = $1;
   $22 = (($21) + 84|0);
   $23 = (($22) + 32856|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   $26 = $25 ^ 1;
   $28 = $26;
  } else {
   $28 = 0;
  }
 } while(0);
 $27 = $28&1;
 $29 = $1;
 $30 = (($29) + 34264|0);
 HEAP32[$30>>2] = $27;
 $31 = $1;
 $32 = (($31) + 34264|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 do {
  if ($34) {
   $35 = $cfExt;
   $36 = ($35|0)==(2);
   $37 = $36 ? 128 : 256;
   $38 = $1;
   $39 = (($38) + 34364|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = Math_imul($37, $40)|0;
   $42 = $41<<2;
   $43 = (_malloc($42)|0);
   $44 = $1;
   $45 = (($44) + 34884|0);
   HEAP32[$45>>2] = $43;
   $46 = $cfExt;
   $47 = ($46|0)==(2);
   $48 = $47 ? 128 : 256;
   $49 = $1;
   $50 = (($49) + 34364|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = Math_imul($48, $51)|0;
   $53 = $52<<2;
   $54 = (_malloc($53)|0);
   $55 = $1;
   $56 = (($55) + 34888|0);
   HEAP32[$56>>2] = $54;
   $57 = $1;
   $58 = (($57) + 34884|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0|0);
   if (!($60)) {
    $61 = $1;
    $62 = (($61) + 34888|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = $cfExt;
     $66 = ($65|0)==(2);
     $67 = $66 ? 128 : 256;
     $68 = $1;
     $69 = (($68) + 34364|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = Math_imul($67, $70)|0;
     $72 = $71<<2;
     $73 = $1;
     $74 = (($73) + 34364|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($72>>>0)<($75>>>0);
     if (!($76)) {
      break;
     }
    }
   }
   $0 = -1;
   $341 = $0;
   STACKTOP = sp;return ($341|0);
  }
 } while(0);
 $77 = $1;
 $78 = (_allocatePredInfo($77)|0);
 $79 = ($78|0)!=(0);
 if ($79) {
  $0 = -1;
  $341 = $0;
  STACKTOP = sp;return ($341|0);
 }
 $80 = $1;
 $81 = (_allocateTileInfo($80)|0);
 $82 = ($81|0)!=(0);
 if ($82) {
  $0 = -1;
  $341 = $0;
  STACKTOP = sp;return ($341|0);
 }
 $83 = $1;
 $84 = (($83) + 34136|0);
 $85 = (($84) + 60|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 & 1;
 $88 = ($87|0)==(0);
 if ($88) {
  $89 = $1;
  $90 = (($89) + 34316|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $1;
  $93 = (($92) + 34136|0);
  $94 = (($93) + 36|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (_allocateQuantizer($91,$95,1)|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $0 = -1;
   $341 = $0;
   STACKTOP = sp;return ($341|0);
  }
  $98 = $1;
  _setUniformQuantizer($98,0);
  $i = 0;
  while(1) {
   $99 = $i;
   $100 = $1;
   $101 = (($100) + 34136|0);
   $102 = (($101) + 36|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($99>>>0)<($103>>>0);
   if (!($104)) {
    break;
   }
   $105 = $i;
   $106 = $1;
   $107 = (($106) + 34136|0);
   $108 = (($107) + 64|0);
   $109 = (($108) + ($105)|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = $i;
   $112 = $1;
   $113 = (($112) + 34316|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + ($111<<2)|0);
   $116 = HEAP32[$115>>2]|0;
   HEAP8[$116>>0] = $110;
   $117 = $i;
   $118 = (($117) + 1)|0;
   $i = $118;
  }
  $119 = $1;
  $120 = (($119) + 34316|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $1;
  $123 = (($122) + 34136|0);
  $124 = (($123) + 60|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 >>> 3;
  $127 = $126 & 3;
  $128 = $127&255;
  $129 = $1;
  $130 = (($129) + 34136|0);
  $131 = (($130) + 36|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $1;
  $134 = (($133) + 34136|0);
  $135 = (($134) + 20|0);
  $136 = HEAP32[$135>>2]|0;
  _formatQuantizer($121,$128,$132,0,1,$136);
 }
 $137 = $1;
 $138 = (($137) + 84|0);
 $139 = (($138) + 44|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(3);
 if ($141) {
  $142 = $1;
  $143 = (($142) + 34136|0);
  $144 = (($143) + 60|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 & 2;
  $147 = ($146|0)==(0);
  if ($147) {
   $148 = $1;
   $149 = (($148) + 34316|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + 64|0);
   $152 = $1;
   $153 = (($152) + 34136|0);
   $154 = (($153) + 36|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (_allocateQuantizer($151,$155,1)|0);
   $157 = ($156|0)!=(0);
   if ($157) {
    $0 = -1;
    $341 = $0;
    STACKTOP = sp;return ($341|0);
   }
   $158 = $1;
   _setUniformQuantizer($158,1);
   $159 = $1;
   $160 = (($159) + 34136|0);
   $161 = (($160) + 60|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $162 & 512;
   $164 = ($163|0)==(0);
   if ($164) {
    $165 = $1;
    _useDCQuantizer($165,0);
   } else {
    $i = 0;
    while(1) {
     $166 = $i;
     $167 = $1;
     $168 = (($167) + 34136|0);
     $169 = (($168) + 36|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($166>>>0)<($170>>>0);
     if (!($171)) {
      break;
     }
     $172 = $i;
     $173 = $1;
     $174 = (($173) + 34136|0);
     $175 = (($174) + 80|0);
     $176 = (($175) + ($172)|0);
     $177 = HEAP8[$176>>0]|0;
     $178 = $i;
     $179 = $1;
     $180 = (($179) + 34316|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (($181) + 64|0);
     $183 = (($182) + ($178<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     HEAP8[$184>>0] = $177;
     $185 = $i;
     $186 = (($185) + 1)|0;
     $i = $186;
    }
    $187 = $1;
    $188 = (($187) + 34316|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($189) + 64|0);
    $191 = $1;
    $192 = (($191) + 34136|0);
    $193 = (($192) + 60|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = $194 >>> 5;
    $196 = $195 & 3;
    $197 = $196&255;
    $198 = $1;
    $199 = (($198) + 34136|0);
    $200 = (($199) + 36|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = $1;
    $203 = (($202) + 34136|0);
    $204 = (($203) + 20|0);
    $205 = HEAP32[$204>>2]|0;
    _formatQuantizer($190,$197,$201,0,1,$205);
   }
  }
  $206 = $1;
  $207 = (($206) + 84|0);
  $208 = (($207) + 44|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($209|0)!=(2);
  if ($210) {
   $211 = $1;
   $212 = (($211) + 34136|0);
   $213 = (($212) + 60|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $214 & 4;
   $216 = ($215|0)==(0);
   if ($216) {
    $217 = $1;
    $218 = (($217) + 34316|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + 128|0);
    $221 = $1;
    $222 = (($221) + 34136|0);
    $223 = (($222) + 36|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = (_allocateQuantizer($220,$224,1)|0);
    $226 = ($225|0)!=(0);
    if ($226) {
     $0 = -1;
     $341 = $0;
     STACKTOP = sp;return ($341|0);
    }
    $227 = $1;
    _setUniformQuantizer($227,2);
    $228 = $1;
    $229 = (($228) + 34136|0);
    $230 = (($229) + 60|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = $231 & 1024;
    $233 = ($232|0)==(0);
    if ($233) {
     $234 = $1;
     _useLPQuantizer($234,1,0);
    } else {
     $i = 0;
     while(1) {
      $235 = $i;
      $236 = $1;
      $237 = (($236) + 34136|0);
      $238 = (($237) + 36|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = ($235>>>0)<($239>>>0);
      if (!($240)) {
       break;
      }
      $241 = $i;
      $242 = $1;
      $243 = (($242) + 34136|0);
      $244 = (($243) + 96|0);
      $245 = (($244) + ($241)|0);
      $246 = HEAP8[$245>>0]|0;
      $247 = $i;
      $248 = $1;
      $249 = (($248) + 34316|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = (($250) + 128|0);
      $252 = (($251) + ($247<<2)|0);
      $253 = HEAP32[$252>>2]|0;
      HEAP8[$253>>0] = $246;
      $254 = $i;
      $255 = (($254) + 1)|0;
      $i = $255;
     }
     $256 = $1;
     $257 = (($256) + 34316|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = (($258) + 128|0);
     $260 = $1;
     $261 = (($260) + 34136|0);
     $262 = (($261) + 60|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = $263 >>> 7;
     $265 = $264 & 3;
     $266 = $265&255;
     $267 = $1;
     $268 = (($267) + 34136|0);
     $269 = (($268) + 36|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = $1;
     $272 = (($271) + 34136|0);
     $273 = (($272) + 20|0);
     $274 = HEAP32[$273>>2]|0;
     _formatQuantizer($259,$266,$270,0,0,$274);
    }
   }
  }
 }
 $275 = $1;
 $276 = (($275) + 84|0);
 $277 = (($276) + 64|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = ($278>>>0)>=(4096);
 if ($279) {
  $0 = -1;
  $341 = $0;
  STACKTOP = sp;return ($341|0);
 }
 $280 = $1;
 $281 = (($280) + 84|0);
 $282 = (($281) + 64|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = (($283) + 1)|0;
 $numCodingContexts = $284;
 $285 = $1;
 $286 = $numCodingContexts;
 $287 = (_AllocateCodingContextsDec($285,$286)|0);
 $288 = $1;
 $289 = (($288) + 34336|0);
 HEAP32[$289>>2] = $287;
 $290 = $1;
 $291 = (($290) + 34336|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = (0|0)==($292|0);
 if ($293) {
  $0 = -1;
  $341 = $0;
  STACKTOP = sp;return ($341|0);
 }
 $294 = $numCodingContexts;
 $295 = $1;
 $296 = (($295) + 34344|0);
 HEAP32[$296>>2] = $294;
 $297 = $2;
 $298 = ($297|0)!=(0);
 do {
  if ($298) {
   $299 = $1;
   $300 = $numCodingContexts;
   $301 = (_AllocateCodingContextsDec($299,$300)|0);
   $302 = $1;
   $303 = (($302) + 34340|0);
   HEAP32[$303>>2] = $301;
   $304 = $1;
   $305 = (($304) + 34340|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (0|0)==($306|0);
   if (!($307)) {
    break;
   }
   $0 = -1;
   $341 = $0;
   STACKTOP = sp;return ($341|0);
  }
 } while(0);
 $308 = $1;
 $309 = (($308) + 35036|0);
 $310 = HEAP32[$309>>2]|0;
 $311 = ($310|0)!=(0);
 if ($311) {
  $312 = $1;
  $313 = (($312) + 35032|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = (($314) + 34272|0);
  $316 = HEAP32[$315>>2]|0;
  $317 = $1;
  $318 = (($317) + 34272|0);
  HEAP32[$318>>2] = $316;
  $319 = $1;
  $320 = (($319) + 35032|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = (($321) + 34320|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = $1;
  $325 = (($324) + 34320|0);
  HEAP32[$325>>2] = $323;
  $326 = $1;
  $327 = (($326) + 35032|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = (($328) + 34328|0);
  $330 = HEAP32[$329>>2]|0;
  $331 = $1;
  $332 = (($331) + 34328|0);
  HEAP32[$332>>2] = $330;
  $333 = $1;
  $334 = (($333) + 35032|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = (($335) + 34252|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = $1;
  $339 = (($338) + 34252|0);
  HEAP32[$339>>2] = $337;
 }
 $340 = $1;
 (_setBitIOPointers($340)|0);
 $0 = 0;
 $341 = $0;
 STACKTOP = sp;return ($341|0);
}
function _StrDecTerm($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, $jend = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 35032|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4&1;
 $jend = $5;
 $j = 0;
 while(1) {
  $6 = $j;
  $7 = $jend;
  $8 = ($6>>>0)<=($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = (($9) + 34264|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $0;
   $14 = (($13) + 34884|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0|0);
   if ($16) {
    $17 = $0;
    $18 = (($17) + 34884|0);
    $19 = HEAP32[$18>>2]|0;
    _free($19);
   }
   $20 = $0;
   $21 = (($20) + 34888|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = $0;
    $25 = (($24) + 34888|0);
    $26 = HEAP32[$25>>2]|0;
    _free($26);
   }
  }
  $27 = $0;
  _freePredInfo($27);
  $28 = $0;
  _freeTileInfo($28);
  $29 = $0;
  $30 = (($29) + 34336|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  $33 = (($32) + 34344|0);
  $34 = HEAP32[$33>>2]|0;
  _FreeCodingContextsDec($31,$34);
  $35 = $0;
  $36 = (($35) + 34336|0);
  HEAP32[$36>>2] = 0;
  $37 = $0;
  $38 = (($37) + 34344|0);
  HEAP32[$38>>2] = 0;
  $39 = $0;
  $40 = (($39) + 35032|0);
  $41 = HEAP32[$40>>2]|0;
  $0 = $41;
  $42 = $j;
  $43 = (($42) + 1)|0;
  $j = $43;
 }
 STACKTOP = sp;return 0;
}
function _ReadImagePlaneHeader($pII,$pSCP,$pSC,$pSB) {
 $pII = $pII|0;
 $pSCP = $pSCP|0;
 $pSC = $pSC|0;
 $pSB = $pSB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $val = 0, $val1 = 0, $val3 = 0, $val32 = 0, $val322 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val32 = sp + 16|0;
 $val = sp + 30|0;
 $val1 = sp + 28|0;
 $val322 = sp;
 $val3 = sp + 29|0;
 $0 = $pII;
 $1 = $pSCP;
 $2 = $pSC;
 $3 = $pSB;
 $err = 0;
 $4 = $3;
 $5 = (_getBit32_SB($4,3,$val32)|0);
 $err = $5;
 $6 = ($5|0)<(0);
 L1: do {
  if ($6) {
   $7 = $err;
   $err = $7;
  } else {
   $8 = $err;
   $err = $8;
   $9 = HEAP32[$val32>>2]|0;
   $10 = $2;
   $11 = (($10) + 8|0);
   HEAP32[$11>>2] = $9;
   $12 = $2;
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14>>>0)<(0);
   if ($15) {
    $21 = 1;
   } else {
    $16 = $2;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18>>>0)>(6);
    $21 = $19;
   }
   $20 = $21 ? -106 : 0;
   $err = $20;
   $22 = ($20|0)<(0);
   if ($22) {
    $23 = $err;
    $err = $23;
    break;
   }
   $24 = $err;
   $err = $24;
   $25 = $2;
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = (($28) + 16|0);
   HEAP32[$29>>2] = $27;
   $30 = $3;
   $31 = (_getBit32_SB($30,1,$val32)|0);
   $err = $31;
   $32 = ($31|0)<(0);
   if ($32) {
    $33 = $err;
    $err = $33;
    break;
   }
   $34 = $err;
   $err = $34;
   $35 = HEAP32[$val32>>2]|0;
   $36 = $2;
   $37 = (($36) + 20|0);
   HEAP32[$37>>2] = $35;
   $38 = $3;
   $39 = (_getBit32_SB($38,4,$val32)|0);
   $err = $39;
   $40 = ($39|0)<(0);
   if ($40) {
    $41 = $err;
    $err = $41;
    break;
   }
   $42 = $err;
   $err = $42;
   $43 = HEAP32[$val32>>2]|0;
   $44 = $1;
   $45 = (($44) + 40|0);
   HEAP32[$45>>2] = $43;
   $46 = $2;
   $47 = (($46) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   switch ($48|0) {
   case 0:  {
    $49 = $2;
    $50 = (($49) + 36|0);
    HEAP32[$50>>2] = 1;
    break;
   }
   case 1:  {
    $51 = $2;
    $52 = (($51) + 36|0);
    HEAP32[$52>>2] = 3;
    $53 = $3;
    (_getBit32_SB($53,1,$val32)|0);
    $54 = $3;
    $55 = (_getBit32_SB($54,3,$val32)|0);
    $err = $55;
    $56 = ($55|0)<(0);
    if ($56) {
     $57 = $err;
     $err = $57;
     break L1;
    }
    $58 = $err;
    $err = $58;
    $59 = HEAP32[$val32>>2]|0;
    $60 = $59&255;
    $61 = $0;
    $62 = (($61) + 28|0);
    HEAP8[$62>>0] = $60;
    $63 = $3;
    (_getBit32_SB($63,1,$val32)|0);
    $64 = $3;
    $65 = (_getBit32_SB($64,3,$val32)|0);
    $err = $65;
    $66 = ($65|0)<(0);
    if ($66) {
     $67 = $err;
     $err = $67;
     break L1;
    }
    $68 = $err;
    $err = $68;
    $69 = HEAP32[$val32>>2]|0;
    $70 = $69&255;
    $71 = $0;
    $72 = (($71) + 29|0);
    HEAP8[$72>>0] = $70;
    break;
   }
   case 2:  {
    $73 = $2;
    $74 = (($73) + 36|0);
    HEAP32[$74>>2] = 3;
    $75 = $3;
    $76 = (_getBit32_SB($75,1,$val32)|0);
    $err = $76;
    $77 = ($76|0)<(0);
    if ($77) {
     $78 = $err;
     $err = $78;
     break L1;
    }
    $79 = $err;
    $err = $79;
    $80 = $3;
    $81 = (_getBit32_SB($80,3,$val32)|0);
    $err = $81;
    $82 = ($81|0)<(0);
    if ($82) {
     $83 = $err;
     $err = $83;
     break L1;
    }
    $84 = $err;
    $err = $84;
    $85 = HEAP32[$val32>>2]|0;
    $86 = $85&255;
    $87 = $0;
    $88 = (($87) + 28|0);
    HEAP8[$88>>0] = $86;
    $89 = $3;
    $90 = (_getBit32_SB($89,4,$val32)|0);
    $err = $90;
    $91 = ($90|0)<(0);
    if ($91) {
     $92 = $err;
     $err = $92;
     break L1;
    }
    $93 = $err;
    $err = $93;
    break;
   }
   case 3:  {
    $94 = $2;
    $95 = (($94) + 36|0);
    HEAP32[$95>>2] = 3;
    $96 = $3;
    $97 = (_getBit32_SB($96,4,$val32)|0);
    $err = $97;
    $98 = ($97|0)<(0);
    if ($98) {
     $99 = $err;
     $err = $99;
     break L1;
    }
    $100 = $err;
    $err = $100;
    $101 = $3;
    $102 = (_getBit32_SB($101,4,$val32)|0);
    $err = $102;
    $103 = ($102|0)<(0);
    if ($103) {
     $104 = $err;
     $err = $104;
     break L1;
    }
    $105 = $err;
    $err = $105;
    break;
   }
   case 4:  {
    $120 = $2;
    $121 = (($120) + 36|0);
    HEAP32[$121>>2] = 4;
    break;
   }
   case 6:  {
    $106 = $3;
    $107 = (_getBit32_SB($106,4,$val32)|0);
    $err = $107;
    $108 = ($107|0)<(0);
    if ($108) {
     $109 = $err;
     $err = $109;
     break L1;
    }
    $110 = $err;
    $err = $110;
    $111 = HEAP32[$val32>>2]|0;
    $112 = (($111) + 1)|0;
    $113 = $2;
    $114 = (($113) + 36|0);
    HEAP32[$114>>2] = $112;
    $115 = $3;
    $116 = (_getBit32_SB($115,4,$val32)|0);
    $err = $116;
    $117 = ($116|0)<(0);
    if ($117) {
     $118 = $err;
     $err = $118;
     break L1;
    }
    $119 = $err;
    $err = $119;
    break;
   }
   default: {
   }
   }
   $122 = $0;
   $123 = (($122) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   switch ($124|0) {
   case 7:  {
    $134 = $3;
    $135 = (_getBit32_SB($134,8,$val32)|0);
    $err = $135;
    $136 = ($135|0)<(0);
    if ($136) {
     $137 = $err;
     $err = $137;
     break L1;
    }
    $138 = $err;
    $err = $138;
    $139 = HEAP32[$val32>>2]|0;
    $140 = $139&255;
    $141 = $1;
    $142 = (($141) + 32840|0);
    HEAP8[$142>>0] = $140;
    $143 = $3;
    $144 = (_getBit32_SB($143,8,$val32)|0);
    $err = $144;
    $145 = ($144|0)<(0);
    if ($145) {
     $146 = $err;
     $err = $146;
     break L1;
    }
    $147 = $err;
    $err = $147;
    $148 = HEAP32[$val32>>2]|0;
    $149 = $148&255;
    $150 = $1;
    $151 = (($150) + 32841|0);
    HEAP8[$151>>0] = $149;
    break;
   }
   case 6: case 5: case 3: case 2:  {
    $125 = $3;
    $126 = (_getBit32_SB($125,8,$val32)|0);
    $err = $126;
    $127 = ($126|0)<(0);
    if ($127) {
     $128 = $err;
     $err = $128;
     break L1;
    }
    $129 = $err;
    $err = $129;
    $130 = HEAP32[$val32>>2]|0;
    $131 = $130&255;
    $132 = $1;
    $133 = (($132) + 32840|0);
    HEAP8[$133>>0] = $131;
    break;
   }
   default: {
   }
   }
   $152 = $2;
   $153 = (($152) + 60|0);
   HEAP32[$153>>2] = 0;
   $154 = $3;
   $155 = (_getBit32_SB($154,1,$val32)|0);
   $err = $155;
   $156 = ($155|0)<(0);
   if ($156) {
    $157 = $err;
    $err = $157;
    break;
   }
   $158 = $err;
   $err = $158;
   $159 = HEAP32[$val32>>2]|0;
   $160 = (1)==($159|0);
   if ($160) {
    $161 = $2;
    $162 = (($161) + 64|0);
    $163 = $3;
    $164 = $2;
    $165 = (($164) + 36|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = (_readQuantizerSB($162,$163,$166,$val)|0);
    $err = $167;
    $168 = ($167|0)<(0);
    if ($168) {
     $169 = $err;
     $err = $169;
     break;
    }
    $170 = $err;
    $err = $170;
    $171 = HEAP8[$val>>0]|0;
    $172 = $171&255;
    $173 = $172 << 3;
    $174 = $2;
    $175 = (($174) + 60|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (($176) + ($173))|0;
    HEAP32[$175>>2] = $177;
   } else {
    $178 = $2;
    $179 = (($178) + 60|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (($180) + 1)|0;
    HEAP32[$179>>2] = $181;
   }
   $182 = $1;
   $183 = (($182) + 40|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($184|0)!=(3);
   if ($185) {
    $186 = $3;
    $187 = (_getBit32_SB($186,1,$val32)|0);
    $err = $187;
    $188 = ($187|0)<(0);
    if ($188) {
     $189 = $err;
     $err = $189;
     break;
    }
    $190 = $err;
    $err = $190;
    $191 = HEAP32[$val32>>2]|0;
    $192 = (0)==($191|0);
    if ($192) {
     $193 = $2;
     $194 = (($193) + 60|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (($195) + 512)|0;
     HEAP32[$194>>2] = $196;
     $197 = $3;
     $198 = (_getBit32_SB($197,1,$val32)|0);
     $err = $198;
     $199 = ($198|0)<(0);
     if ($199) {
      $200 = $err;
      $err = $200;
      break;
     }
     $201 = $err;
     $err = $201;
     $202 = HEAP32[$val32>>2]|0;
     $203 = (1)==($202|0);
     if ($203) {
      $204 = $2;
      $205 = (($204) + 80|0);
      $206 = $3;
      $207 = $2;
      $208 = (($207) + 36|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = (_readQuantizerSB($205,$206,$209,$val1)|0);
      $err = $210;
      $211 = ($210|0)<(0);
      if ($211) {
       $212 = $err;
       $err = $212;
       break;
      }
      $213 = $err;
      $err = $213;
      $214 = HEAP8[$val1>>0]|0;
      $215 = $214&255;
      $216 = $215 << 5;
      $217 = $2;
      $218 = (($217) + 60|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = (($219) + ($216))|0;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $2;
      $222 = (($221) + 60|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = (($223) + 2)|0;
      HEAP32[$222>>2] = $224;
     }
    } else {
     $225 = $2;
     $226 = (($225) + 60|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = $227 & 1;
     $229 = $228 << 1;
     $230 = $2;
     $231 = (($230) + 60|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = $232 & 24;
     $234 = $233 << 2;
     $235 = (($229) + ($234))|0;
     $236 = $2;
     $237 = (($236) + 60|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = (($238) + ($235))|0;
     HEAP32[$237>>2] = $239;
    }
    $240 = $1;
    $241 = (($240) + 40|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = ($242|0)!=(2);
    if ($243) {
     $244 = $3;
     $245 = (_getBit32_SB($244,1,$val322)|0);
     $err = $245;
     $246 = ($245|0)<(0);
     if ($246) {
      $247 = $err;
      $err = $247;
      break;
     }
     $248 = $err;
     $err = $248;
     $249 = HEAP32[$val322>>2]|0;
     $250 = (0)==($249|0);
     if ($250) {
      $251 = $2;
      $252 = (($251) + 60|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = (($253) + 1024)|0;
      HEAP32[$252>>2] = $254;
      $255 = $3;
      $256 = (_getBit32_SB($255,1,$val322)|0);
      $err = $256;
      $257 = ($256|0)<(0);
      if ($257) {
       $258 = $err;
       $err = $258;
       break;
      }
      $259 = $err;
      $err = $259;
      $260 = HEAP32[$val322>>2]|0;
      $261 = (1)==($260|0);
      if ($261) {
       $262 = $2;
       $263 = (($262) + 96|0);
       $264 = $3;
       $265 = $2;
       $266 = (($265) + 36|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (_readQuantizerSB($263,$264,$267,$val3)|0);
       $err = $268;
       $269 = ($268|0)<(0);
       if ($269) {
        $270 = $err;
        $err = $270;
        break;
       }
       $271 = $err;
       $err = $271;
       $272 = HEAP8[$val3>>0]|0;
       $273 = $272&255;
       $274 = $273 << 7;
       $275 = $2;
       $276 = (($275) + 60|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = (($277) + ($274))|0;
       HEAP32[$276>>2] = $278;
      } else {
       $279 = $2;
       $280 = (($279) + 60|0);
       $281 = HEAP32[$280>>2]|0;
       $282 = (($281) + 4)|0;
       HEAP32[$280>>2] = $282;
      }
     } else {
      $283 = $2;
      $284 = (($283) + 60|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = $285 & 2;
      $287 = $286 << 1;
      $288 = $2;
      $289 = (($288) + 60|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = $290 & 96;
      $292 = $291 << 2;
      $293 = (($287) + ($292))|0;
      $294 = $2;
      $295 = (($294) + 60|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (($296) + ($293))|0;
      HEAP32[$295>>2] = $297;
     }
    }
   }
   $298 = $1;
   $299 = (($298) + 40|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = ($300|0)==(3);
   if ($301) {
    $302 = $2;
    $303 = (($302) + 60|0);
    $304 = HEAP32[$303>>2]|0;
    $305 = $304 | 512;
    HEAP32[$303>>2] = $305;
   } else {
    $306 = $1;
    $307 = (($306) + 40|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = ($308|0)==(2);
    if ($309) {
     $310 = $2;
     $311 = (($310) + 60|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = $312 | 1024;
     HEAP32[$311>>2] = $313;
    }
   }
   $314 = $2;
   $315 = (($314) + 60|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $316 & 1536;
   $318 = ($317|0)==(0);
   $319 = $318 ? -104 : 0;
   $err = $319;
   $320 = ($319|0)<(0);
   if ($320) {
    $321 = $err;
    $err = $321;
    break;
   }
   $322 = $err;
   $err = $322;
   $323 = $3;
   _flushToByte_SB($323);
  }
 } while(0);
 $324 = $err;
 $325 = (0)==($324|0);
 $326 = $325 ? 0 : -1;
 STACKTOP = sp;return ($326|0);
}
function _readQuantizerSB($pQPIndex,$pIO,$cChannel,$pcChMode) {
 $pQPIndex = $pQPIndex|0;
 $pIO = $pIO|0;
 $cChannel = $cChannel|0;
 $pcChMode = $pcChMode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $err = 0, $i = 0, $val = 0, $val32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val = sp + 4|0;
 $val32 = sp + 12|0;
 $1 = $pQPIndex;
 $2 = $pIO;
 $3 = $cChannel;
 $4 = $pcChMode;
 $err = 0;
 $5 = $4;
 HEAP8[$5>>0] = 0;
 $6 = $3;
 $7 = ($6>>>0)>=(16);
 if ($7) {
  $0 = -104;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $8 = $3;
 $9 = ($8>>>0)>(1);
 do {
  if ($9) {
   $10 = $2;
   $11 = (_getBit32_SB($10,2,$val)|0);
   $err = $11;
   $12 = ($11|0)<(0);
   if ($12) {
    $13 = $err;
    $err = $13;
    break;
   }
   $14 = $err;
   $err = $14;
   $15 = HEAP32[$val>>2]|0;
   $16 = $15&255;
   $17 = $4;
   HEAP8[$17>>0] = $16;
   label = 8;
  } else {
   label = 8;
  }
 } while(0);
 L11: do {
  if ((label|0) == 8) {
   $18 = $2;
   $19 = (_getBit32_SB($18,8,$val)|0);
   $err = $19;
   $20 = ($19|0)<(0);
   if ($20) {
    $21 = $err;
    $err = $21;
    break;
   }
   $22 = $err;
   $err = $22;
   $23 = HEAP32[$val>>2]|0;
   $24 = $23&255;
   $25 = $1;
   HEAP8[$25>>0] = $24;
   $26 = $4;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = (1)==($28|0);
   if ($29) {
    $30 = $2;
    $31 = (_getBit32_SB($30,8,$val)|0);
    $err = $31;
    $32 = ($31|0)<(0);
    if ($32) {
     $33 = $err;
     $err = $33;
     break;
    }
    $34 = $err;
    $err = $34;
    $35 = HEAP32[$val>>2]|0;
    $36 = $35&255;
    $37 = $1;
    $38 = (($37) + 1|0);
    HEAP8[$38>>0] = $36;
   } else {
    $39 = $4;
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = ($41|0)>(0);
    do {
     if ($42) {
      $i = 1;
      while(1) {
       $43 = $i;
       $44 = $3;
       $45 = ($43>>>0)<($44>>>0);
       if (!($45)) {
        label = 24;
        break;
       }
       $46 = $2;
       $47 = (_getBit32_SB($46,8,$val32)|0);
       $err = $47;
       $48 = ($47|0)<(0);
       if ($48) {
        label = 20;
        break;
       }
       $50 = $err;
       $err = $50;
       $51 = HEAP32[$val32>>2]|0;
       $52 = $51&255;
       $53 = $i;
       $54 = $1;
       $55 = (($54) + ($53)|0);
       HEAP8[$55>>0] = $52;
       $56 = $i;
       $57 = (($56) + 1)|0;
       $i = $57;
      }
      if ((label|0) == 20) {
       $49 = $err;
       $err = $49;
       break L11;
      }
      else if ((label|0) == 24) {
       break;
      }
     }
    } while(0);
   }
  }
 } while(0);
 $58 = $err;
 $0 = $58;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _ReadWMIHeader($pII,$pSCP,$pSC) {
 $pII = $pII|0;
 $pSCP = $pSCP|0;
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $SB = 0, $bAbbreviatedHeader = 0, $bInscribed = 0, $bTileStretch = 0, $bTilingPresent = 0, $cbStream = 0, $err = 0, $i = 0, $pSB = 0, $pWS = 0, $szMS = 0, $val32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 52|0;
 $SB = sp + 8|0;
 $val32 = sp;
 $szMS = sp + 72|0;
 $1 = $pII;
 $2 = $pSCP;
 $3 = $pSC;
 $err = 0;
 $4 = $2;
 $5 = (($4) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $pWS = $6;
 ;HEAP32[$SB+0>>2]=0|0;HEAP32[$SB+4>>2]=0|0;HEAP32[$SB+8>>2]=0|0;HEAP32[$SB+12>>2]=0|0;
 $pSB = $SB;
 ;HEAP8[$szMS+0>>0]=0|0;HEAP8[$szMS+1>>0]=0|0;HEAP8[$szMS+2>>0]=0|0;HEAP8[$szMS+3>>0]=0|0;HEAP8[$szMS+4>>0]=0|0;HEAP8[$szMS+5>>0]=0|0;HEAP8[$szMS+6>>0]=0|0;HEAP8[$szMS+7>>0]=0|0;
 $cbStream = 0;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((9440|0),(8456|0),3277,(9456|0));
  // unreachable;
 }
 $9 = $pWS;
 $10 = (($9) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $pWS;
 $13 = (FUNCTION_TABLE_iiii[$11 & 255]($12,$szMS,8)|0);
 $err = $13;
 $14 = ($13|0)<(0);
 L4: do {
  if ($14) {
   $15 = $err;
   $err = $15;
  } else {
   $16 = $err;
   $err = $16;
   $17 = (_strstr($szMS,9472)|0);
   $18 = ($szMS|0)!=($17|0);
   $19 = $18 ? -106 : 0;
   $err = $19;
   $20 = ($19|0)<(0);
   if ($20) {
    $21 = $err;
    $err = $21;
    break;
   }
   $22 = $err;
   $err = $22;
   $23 = $pSB;
   $24 = $pWS;
   $25 = (_attach_SB($23,$24)|0);
   $err = $25;
   $26 = ($25|0)<(0);
   if ($26) {
    $27 = $err;
    $err = $27;
    break;
   }
   $28 = $err;
   $err = $28;
   $29 = $pSB;
   $30 = (_getBit32_SB($29,4,$i)|0);
   $err = $30;
   $31 = ($30|0)<(0);
   if ($31) {
    $32 = $err;
    $err = $32;
    break;
   }
   $33 = $err;
   $err = $33;
   $34 = HEAP32[$i>>2]|0;
   $35 = ($34|0)!=(1);
   $36 = $35 ? -107 : 0;
   $err = $36;
   $37 = ($36|0)<(0);
   if ($37) {
    $38 = $err;
    $err = $38;
    break;
   }
   $39 = $err;
   $err = $39;
   $40 = HEAP32[$i>>2]|0;
   $41 = $3;
   HEAP32[$41>>2] = $40;
   $42 = $pSB;
   $43 = (_getBit32_SB($42,4,$i)|0);
   $err = $43;
   $44 = ($43|0)<(0);
   if ($44) {
    $45 = $err;
    $err = $45;
    break;
   }
   $46 = $err;
   $err = $46;
   $47 = HEAP32[$i>>2]|0;
   $48 = ($47|0)!=(0);
   if ($48) {
    $49 = HEAP32[$i>>2]|0;
    $50 = ($49|0)!=(1);
    if ($50) {
     $51 = HEAP32[$i>>2]|0;
     $52 = ($51|0)!=(9);
     $54 = $52;
    } else {
     $54 = 0;
    }
   } else {
    $54 = 0;
   }
   $53 = $54 ? -114 : 0;
   $err = $53;
   $55 = ($53|0)<(0);
   if ($55) {
    $56 = $err;
    $err = $56;
    break;
   }
   $57 = $err;
   $err = $57;
   $58 = HEAP32[$i>>2]|0;
   $59 = $3;
   $60 = (($59) + 4|0);
   HEAP32[$60>>2] = $58;
   $61 = $3;
   $62 = (($61) + 32|0);
   HEAP32[$62>>2] = 0;
   $63 = $3;
   $64 = (($63) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)==(9);
   if ($66) {
    $67 = $3;
    $68 = (($67) + 32|0);
    HEAP32[$68>>2] = 1;
   }
   $69 = $3;
   $70 = (($69) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $2;
   $73 = (($72) + 32848|0);
   HEAP32[$73>>2] = $71;
   $74 = $pSB;
   $75 = (_getBit32_SB($74,1,$val32)|0);
   $err = $75;
   $76 = ($75|0)<(0);
   if ($76) {
    $77 = $err;
    $err = $77;
    break;
   }
   $78 = $err;
   $err = $78;
   $79 = HEAP32[$val32>>2]|0;
   $bTilingPresent = $79;
   $80 = $pSB;
   $81 = (_getBit32_SB($80,1,$val32)|0);
   $err = $81;
   $82 = ($81|0)<(0);
   if ($82) {
    $83 = $err;
    $err = $83;
    break;
   }
   $84 = $err;
   $err = $84;
   $85 = HEAP32[$val32>>2]|0;
   $86 = $2;
   $87 = (($86) + 28|0);
   HEAP32[$87>>2] = $85;
   $88 = $pSB;
   $89 = (_getBit32_SB($88,3,$val32)|0);
   $err = $89;
   $90 = ($89|0)<(0);
   if ($90) {
    $91 = $err;
    $err = $91;
    break;
   }
   $92 = $err;
   $err = $92;
   $93 = HEAP32[$val32>>2]|0;
   $94 = $1;
   $95 = (($94) + 64|0);
   HEAP32[$95>>2] = $93;
   $96 = $pSB;
   $97 = (_getBit32_SB($96,1,$val32)|0);
   $err = $97;
   $98 = ($97|0)<(0);
   if ($98) {
    $99 = $err;
    $err = $99;
    break;
   }
   $100 = $err;
   $err = $100;
   $101 = HEAP32[$val32>>2]|0;
   $102 = $3;
   $103 = (($102) + 24|0);
   HEAP32[$103>>2] = $101;
   $104 = $pSB;
   $105 = (_getBit32_SB($104,2,$i)|0);
   $err = $105;
   $106 = ($105|0)<(0);
   if ($106) {
    $107 = $err;
    $err = $107;
    break;
   }
   $108 = $err;
   $err = $108;
   $109 = HEAP32[$i>>2]|0;
   $110 = ($109|0)==(3);
   $111 = $110 ? -104 : 0;
   $err = $111;
   $112 = ($111|0)<(0);
   if ($112) {
    $113 = $err;
    $err = $113;
    break;
   }
   $114 = $err;
   $err = $114;
   $115 = HEAP32[$i>>2]|0;
   $116 = $2;
   $117 = (($116) + 24|0);
   HEAP32[$117>>2] = $115;
   $118 = $pSB;
   $119 = (_getBit32_SB($118,1,$val32)|0);
   $err = $119;
   $120 = ($119|0)<(0);
   if ($120) {
    $121 = $err;
    $err = $121;
    break;
   }
   $122 = $err;
   $err = $122;
   $123 = HEAP32[$val32>>2]|0;
   $bAbbreviatedHeader = $123;
   $124 = $pSB;
   $125 = (_getBit32_SB($124,1,$val32)|0);
   $err = $125;
   $126 = ($125|0)<(0);
   if ($126) {
    $127 = $err;
    $err = $127;
    break;
   }
   $128 = $err;
   $err = $128;
   $129 = HEAP32[$val32>>2]|0;
   $130 = $2;
   $131 = (($130) + 20|0);
   HEAP32[$131>>2] = $129;
   $132 = $2;
   $133 = (($132) + 20|0);
   HEAP32[$133>>2] = 1;
   $134 = $pSB;
   $135 = (_getBit32_SB($134,1,$val32)|0);
   $err = $135;
   $136 = ($135|0)<(0);
   if ($136) {
    $137 = $err;
    $err = $137;
    break;
   }
   $138 = $err;
   $err = $138;
   $139 = HEAP32[$val32>>2]|0;
   $bInscribed = $139;
   $140 = $pSB;
   $141 = (_getBit32_SB($140,1,$val32)|0);
   $err = $141;
   $142 = ($141|0)<(0);
   if ($142) {
    $143 = $err;
    $err = $143;
    break;
   }
   $144 = $err;
   $err = $144;
   $145 = HEAP32[$val32>>2]|0;
   $146 = $3;
   $147 = (($146) + 28|0);
   HEAP32[$147>>2] = $145;
   $148 = $pSB;
   $149 = (_getBit32_SB($148,1,$val32)|0);
   $err = $149;
   $150 = ($149|0)<(0);
   if ($150) {
    $151 = $err;
    $err = $151;
    break;
   }
   $152 = $err;
   $err = $152;
   $153 = HEAP32[$val32>>2]|0;
   $bTileStretch = $153;
   $154 = $pSB;
   $155 = (_getBit32_SB($154,1,$val32)|0);
   $err = $155;
   $156 = ($155|0)<(0);
   if ($156) {
    $157 = $err;
    $err = $157;
    break;
   }
   $158 = $err;
   $err = $158;
   $159 = HEAP32[$val32>>2]|0;
   $160 = $3;
   $161 = (($160) + 12|0);
   HEAP32[$161>>2] = $159;
   $162 = $pSB;
   $163 = (_getBit32_SB($162,1,$val32)|0);
   $err = $163;
   $164 = ($163|0)<(0);
   if ($164) {
    $165 = $err;
    $err = $165;
    break;
   }
   $166 = $err;
   $err = $166;
   $167 = $pSB;
   $168 = (_getBit32_SB($167,1,$val32)|0);
   $err = $168;
   $169 = ($168|0)<(0);
   if ($169) {
    $170 = $err;
    $err = $170;
    break;
   }
   $171 = $err;
   $err = $171;
   $172 = HEAP32[$val32>>2]|0;
   $173 = $3;
   $174 = (($173) + 16|0);
   HEAP32[$174>>2] = $172;
   $175 = $pSB;
   $176 = (_getBit32_SB($175,4,$val32)|0);
   $err = $176;
   $177 = ($176|0)<(0);
   if ($177) {
    $178 = $err;
    $err = $178;
    break;
   }
   $179 = $err;
   $err = $179;
   $180 = HEAP32[$val32>>2]|0;
   $181 = $1;
   $182 = (($181) + 8|0);
   HEAP32[$182>>2] = $180;
   $183 = $pSB;
   $184 = (_getBit32_SB($183,4,$val32)|0);
   $err = $184;
   $185 = ($184|0)<(0);
   if ($185) {
    $186 = $err;
    $err = $186;
    break;
   }
   $187 = $err;
   $err = $187;
   $188 = HEAP32[$val32>>2]|0;
   $189 = $1;
   $190 = (($189) + 12|0);
   HEAP32[$190>>2] = $188;
   $191 = $1;
   $192 = (($191) + 12|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (15)==($193|0);
   if ($194) {
    $195 = $1;
    $196 = (($195) + 12|0);
    HEAP32[$196>>2] = 0;
    $197 = $2;
    $198 = (($197) + 32844|0);
    HEAP32[$198>>2] = 1;
   }
   $199 = $pSB;
   $200 = $bAbbreviatedHeader;
   $201 = ($200|0)!=(0);
   $202 = $201 ? 16 : 32;
   $203 = (_getBit32_SB($199,$202,$val32)|0);
   $err = $203;
   $204 = ($203|0)<(0);
   if ($204) {
    $205 = $err;
    $err = $205;
    break;
   }
   $206 = $err;
   $err = $206;
   $207 = HEAP32[$val32>>2]|0;
   $208 = (($207) + 1)|0;
   $209 = $1;
   HEAP32[$209>>2] = $208;
   $210 = $pSB;
   $211 = $bAbbreviatedHeader;
   $212 = ($211|0)!=(0);
   $213 = $212 ? 16 : 32;
   $214 = (_getBit32_SB($210,$213,$val32)|0);
   $err = $214;
   $215 = ($214|0)<(0);
   if ($215) {
    $216 = $err;
    $err = $216;
    break;
   }
   $217 = $err;
   $err = $217;
   $218 = HEAP32[$val32>>2]|0;
   $219 = (($218) + 1)|0;
   $220 = $1;
   $221 = (($220) + 4|0);
   HEAP32[$221>>2] = $219;
   $222 = $3;
   $223 = (($222) + 52|0);
   HEAP32[$223>>2] = 0;
   $224 = $3;
   $225 = (($224) + 48|0);
   HEAP32[$225>>2] = 0;
   $226 = $3;
   $227 = (($226) + 44|0);
   HEAP32[$227>>2] = 0;
   $228 = $3;
   $229 = (($228) + 40|0);
   HEAP32[$229>>2] = 0;
   $230 = $bInscribed;
   $231 = ($230|0)==(0);
   do {
    if ($231) {
     $232 = $1;
     $233 = HEAP32[$232>>2]|0;
     $234 = $233 & 15;
     $235 = ($234|0)!=(0);
     if (!($235)) {
      break;
     }
     $236 = $1;
     $237 = HEAP32[$236>>2]|0;
     $238 = $237 & 15;
     $239 = (16 - ($238))|0;
     $240 = $3;
     $241 = (($240) + 52|0);
     HEAP32[$241>>2] = $239;
    }
   } while(0);
   $242 = $bInscribed;
   $243 = ($242|0)==(0);
   do {
    if ($243) {
     $244 = $1;
     $245 = (($244) + 4|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = $246 & 15;
     $248 = ($247|0)!=(0);
     if (!($248)) {
      break;
     }
     $249 = $1;
     $250 = (($249) + 4|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = $251 & 15;
     $253 = (16 - ($252))|0;
     $254 = $3;
     $255 = (($254) + 48|0);
     HEAP32[$255>>2] = $253;
    }
   } while(0);
   $256 = $2;
   $257 = (($256) + 16452|0);
   HEAP32[$257>>2] = 0;
   $258 = $2;
   $259 = (($258) + 64|0);
   HEAP32[$259>>2] = 0;
   $260 = $bTilingPresent;
   $261 = ($260|0)!=(0);
   if ($261) {
    $262 = $pSB;
    $263 = (_getBit32_SB($262,12,$val32)|0);
    $err = $263;
    $264 = ($263|0)<(0);
    if ($264) {
     $265 = $err;
     $err = $265;
     break;
    }
    $266 = $err;
    $err = $266;
    $267 = HEAP32[$val32>>2]|0;
    $268 = $2;
    $269 = (($268) + 64|0);
    HEAP32[$269>>2] = $267;
    $270 = $pSB;
    $271 = (_getBit32_SB($270,12,$val32)|0);
    $err = $271;
    $272 = ($271|0)<(0);
    if ($272) {
     $273 = $err;
     $err = $273;
     break;
    }
    $274 = $err;
    $err = $274;
    $275 = HEAP32[$val32>>2]|0;
    $276 = $2;
    $277 = (($276) + 16452|0);
    HEAP32[$277>>2] = $275;
   }
   $278 = $3;
   $279 = (($278) + 24|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = ($280|0)==(0);
   if ($281) {
    $282 = $2;
    $283 = (($282) + 28|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = ($284|0)==(1);
    if ($285) {
     $563 = 1;
    } else {
     $286 = $2;
     $287 = (($286) + 64|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $2;
     $290 = (($289) + 16452|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = (($288) + ($291))|0;
     $293 = ($292>>>0)>(0);
     $563 = $293;
    }
    $295 = $563;
   } else {
    $295 = 0;
   }
   $294 = $295 ? -106 : 0;
   $err = $294;
   $296 = ($294|0)<(0);
   if ($296) {
    $297 = $err;
    $err = $297;
    break;
   }
   $298 = $err;
   $err = $298;
   $299 = $2;
   $300 = (($299) + 16456|0);
   HEAP32[$300>>2] = 0;
   $301 = $2;
   $302 = (($301) + 68|0);
   HEAP32[$302>>2] = 0;
   HEAP32[$i>>2] = 0;
   while(1) {
    $303 = HEAP32[$i>>2]|0;
    $304 = $2;
    $305 = (($304) + 64|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = ($303>>>0)<($306>>>0);
    if (!($307)) {
     break;
    }
    $308 = $pSB;
    $309 = $bAbbreviatedHeader;
    $310 = ($309|0)!=(0);
    $311 = $310 ? 8 : 16;
    $312 = (_getBit32_SB($308,$311,$val32)|0);
    $err = $312;
    $313 = ($312|0)<(0);
    if ($313) {
     label = 109;
     break;
    }
    $315 = $err;
    $err = $315;
    $316 = HEAP32[$val32>>2]|0;
    $317 = HEAP32[$i>>2]|0;
    $318 = $2;
    $319 = (($318) + 68|0);
    $320 = (($319) + ($317<<2)|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (($316) + ($321))|0;
    $323 = HEAP32[$i>>2]|0;
    $324 = (($323) + 1)|0;
    $325 = $2;
    $326 = (($325) + 68|0);
    $327 = (($326) + ($324<<2)|0);
    HEAP32[$327>>2] = $322;
    $328 = HEAP32[$i>>2]|0;
    $329 = (($328) + 1)|0;
    HEAP32[$i>>2] = $329;
   }
   if ((label|0) == 109) {
    $314 = $err;
    $err = $314;
    break;
   }
   HEAP32[$i>>2] = 0;
   while(1) {
    $330 = HEAP32[$i>>2]|0;
    $331 = $2;
    $332 = (($331) + 16452|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = ($330>>>0)<($333>>>0);
    if (!($334)) {
     break;
    }
    $335 = $pSB;
    $336 = $bAbbreviatedHeader;
    $337 = ($336|0)!=(0);
    $338 = $337 ? 8 : 16;
    $339 = (_getBit32_SB($335,$338,$val32)|0);
    $err = $339;
    $340 = ($339|0)<(0);
    if ($340) {
     label = 116;
     break;
    }
    $342 = $err;
    $err = $342;
    $343 = HEAP32[$val32>>2]|0;
    $344 = HEAP32[$i>>2]|0;
    $345 = $2;
    $346 = (($345) + 16456|0);
    $347 = (($346) + ($344<<2)|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = (($343) + ($348))|0;
    $350 = HEAP32[$i>>2]|0;
    $351 = (($350) + 1)|0;
    $352 = $2;
    $353 = (($352) + 16456|0);
    $354 = (($353) + ($351<<2)|0);
    HEAP32[$354>>2] = $349;
    $355 = HEAP32[$i>>2]|0;
    $356 = (($355) + 1)|0;
    HEAP32[$i>>2] = $356;
   }
   if ((label|0) == 116) {
    $341 = $err;
    $err = $341;
    break;
   }
   $357 = $bTileStretch;
   $358 = ($357|0)!=(0);
   do {
    if ($358) {
     HEAP32[$i>>2] = 0;
     while(1) {
      $359 = HEAP32[$i>>2]|0;
      $360 = $2;
      $361 = (($360) + 64|0);
      $362 = HEAP32[$361>>2]|0;
      $363 = (($362) + 1)|0;
      $364 = $2;
      $365 = (($364) + 16452|0);
      $366 = HEAP32[$365>>2]|0;
      $367 = (($366) + 1)|0;
      $368 = Math_imul($363, $367)|0;
      $369 = ($359>>>0)<($368>>>0);
      if (!($369)) {
       label = 128;
       break;
      }
      $370 = $pSB;
      $371 = (_getBit32_SB($370,8,$val32)|0);
      $err = $371;
      $372 = ($371|0)<(0);
      if ($372) {
       label = 124;
       break;
      }
      $374 = $err;
      $err = $374;
      $375 = HEAP32[$i>>2]|0;
      $376 = (($375) + 1)|0;
      HEAP32[$i>>2] = $376;
     }
     if ((label|0) == 124) {
      $373 = $err;
      $err = $373;
      break L4;
     }
     else if ((label|0) == 128) {
      break;
     }
    }
   } while(0);
   $377 = $bInscribed;
   $378 = ($377|0)!=(0);
   if ($378) {
    $379 = $pSB;
    $380 = (_getBit32_SB($379,6,$val32)|0);
    $err = $380;
    $381 = ($380|0)<(0);
    if ($381) {
     $382 = $err;
     $err = $382;
     break;
    }
    $383 = $err;
    $err = $383;
    $384 = HEAP32[$val32>>2]|0;
    $385 = $384&255;
    $386 = $385&255;
    $387 = $3;
    $388 = (($387) + 40|0);
    HEAP32[$388>>2] = $386;
    $389 = $pSB;
    $390 = (_getBit32_SB($389,6,$val32)|0);
    $err = $390;
    $391 = ($390|0)<(0);
    if ($391) {
     $392 = $err;
     $err = $392;
     break;
    }
    $393 = $err;
    $err = $393;
    $394 = HEAP32[$val32>>2]|0;
    $395 = $394&255;
    $396 = $395&255;
    $397 = $3;
    $398 = (($397) + 44|0);
    HEAP32[$398>>2] = $396;
    $399 = $pSB;
    $400 = (_getBit32_SB($399,6,$val32)|0);
    $err = $400;
    $401 = ($400|0)<(0);
    if ($401) {
     $402 = $err;
     $err = $402;
     break;
    }
    $403 = $err;
    $err = $403;
    $404 = HEAP32[$val32>>2]|0;
    $405 = $404&255;
    $406 = $405&255;
    $407 = $3;
    $408 = (($407) + 48|0);
    HEAP32[$408>>2] = $406;
    $409 = $pSB;
    $410 = (_getBit32_SB($409,6,$val32)|0);
    $err = $410;
    $411 = ($410|0)<(0);
    if ($411) {
     $412 = $err;
     $err = $412;
     break;
    }
    $413 = $err;
    $err = $413;
    $414 = HEAP32[$val32>>2]|0;
    $415 = $414&255;
    $416 = $415&255;
    $417 = $3;
    $418 = (($417) + 52|0);
    HEAP32[$418>>2] = $416;
   }
   $419 = $1;
   $420 = HEAP32[$419>>2]|0;
   $421 = $3;
   $422 = (($421) + 44|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = (($420) + ($423))|0;
   $425 = $3;
   $426 = (($425) + 52|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = (($424) + ($427))|0;
   $429 = $428 & 15;
   $430 = $1;
   $431 = (($430) + 4|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = $3;
   $434 = (($433) + 40|0);
   $435 = HEAP32[$434>>2]|0;
   $436 = (($432) + ($435))|0;
   $437 = $3;
   $438 = (($437) + 48|0);
   $439 = HEAP32[$438>>2]|0;
   $440 = (($436) + ($439))|0;
   $441 = $440 & 15;
   $442 = (($429) + ($441))|0;
   $443 = ($442|0)!=(0);
   if ($443) {
    $444 = $1;
    $445 = HEAP32[$444>>2]|0;
    $446 = $445 & 15;
    $447 = $1;
    $448 = (($447) + 4|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = $449 & 15;
    $451 = (($446) + ($450))|0;
    $452 = $3;
    $453 = (($452) + 44|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = (($451) + ($454))|0;
    $456 = $3;
    $457 = (($456) + 40|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = (($455) + ($458))|0;
    $460 = ($459|0)!=(0);
    $461 = $460 ? -104 : 0;
    $err = $461;
    $462 = ($461|0)<(0);
    if ($462) {
     $463 = $err;
     $err = $463;
     break;
    }
    $464 = $err;
    $err = $464;
    $465 = $1;
    $466 = HEAP32[$465>>2]|0;
    $467 = $3;
    $468 = (($467) + 52|0);
    $469 = HEAP32[$468>>2]|0;
    $470 = ($466>>>0)<=($469>>>0);
    if ($470) {
     $479 = 1;
    } else {
     $471 = $1;
     $472 = (($471) + 4|0);
     $473 = HEAP32[$472>>2]|0;
     $474 = $3;
     $475 = (($474) + 48|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = ($473>>>0)<=($476>>>0);
     $479 = $477;
    }
    $478 = $479 ? -104 : 0;
    $err = $478;
    $480 = ($478|0)<(0);
    if ($480) {
     $481 = $err;
     $err = $481;
     break;
    }
    $482 = $err;
    $err = $482;
    $483 = $3;
    $484 = (($483) + 52|0);
    $485 = HEAP32[$484>>2]|0;
    $486 = $1;
    $487 = HEAP32[$486>>2]|0;
    $488 = (($487) - ($485))|0;
    HEAP32[$486>>2] = $488;
    $489 = $3;
    $490 = (($489) + 48|0);
    $491 = HEAP32[$490>>2]|0;
    $492 = $1;
    $493 = (($492) + 4|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = (($494) - ($491))|0;
    HEAP32[$493>>2] = $495;
   }
   $496 = $pSB;
   _flushToByte_SB($496);
   $497 = $1;
   $498 = $2;
   $499 = $3;
   $500 = $pSB;
   $501 = (_ReadImagePlaneHeader($497,$498,$499,$500)|0);
   $502 = ($501|0)!=(0);
   $503 = $502 ? -106 : 0;
   $err = $503;
   $504 = ($503|0)<(0);
   if ($504) {
    $505 = $err;
    $err = $505;
    break;
   }
   $506 = $err;
   $err = $506;
   $507 = $pSB;
   (_detach_SB($507)|0);
   $508 = $cbStream;
   $509 = $pSB;
   $510 = (_getByteRead_SB($509)|0);
   $511 = (($508) - ($510))|0;
   $512 = $2;
   $513 = (($512) + 56|0);
   HEAP32[$513>>2] = $511;
   $514 = $3;
   $515 = (($514) + 16|0);
   $516 = HEAP32[$515>>2]|0;
   $517 = ($516|0)!=(0);
   if ($517) {
    $518 = $2;
    $519 = (($518) + 36|0);
    $520 = HEAP8[$519>>0]|0;
    $521 = $520&255;
    $523 = $521;
   } else {
    $523 = 0;
   }
   $522 = $523&255;
   $524 = $2;
   $525 = (($524) + 36|0);
   HEAP8[$525>>0] = $522;
   $526 = $3;
   $527 = (($526) + 36|0);
   $528 = HEAP32[$527>>2]|0;
   $529 = $2;
   $530 = (($529) + 32|0);
   HEAP32[$530>>2] = $528;
   $531 = $1;
   $532 = (($531) + 12|0);
   $533 = HEAP32[$532>>2]|0;
   $534 = ($533|0)==(8);
   do {
    if ($534) {
     label = 162;
    } else {
     $535 = $1;
     $536 = (($535) + 12|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = ($537|0)==(9);
     if ($538) {
      label = 162;
      break;
     }
     $539 = $1;
     $540 = (($539) + 12|0);
     $541 = HEAP32[$540>>2]|0;
     $542 = ($541|0)==(10);
     if ($542) {
      label = 162;
     }
    }
   } while(0);
   do {
    if ((label|0) == 162) {
     $543 = $2;
     $544 = (($543) + 16|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = ($545|0)!=(3);
     if (!($546)) {
      break;
     }
     $547 = $2;
     $548 = (($547) + 16|0);
     $549 = HEAP32[$548>>2]|0;
     $550 = ($549|0)!=(2);
     if (!($550)) {
      break;
     }
     $551 = $2;
     $552 = (($551) + 16|0);
     $553 = HEAP32[$552>>2]|0;
     $554 = ($553|0)!=(1);
     if (!($554)) {
      break;
     }
     $555 = $2;
     $556 = (($555) + 16|0);
     $557 = HEAP32[$556>>2]|0;
     $558 = ($557|0)!=(0);
     if (!($558)) {
      break;
     }
     $0 = -1;
     $562 = $0;
     STACKTOP = sp;return ($562|0);
    }
   } while(0);
  }
 } while(0);
 $559 = $err;
 $560 = (0)==($559|0);
 $561 = $560 ? 0 : -1;
 $0 = $561;
 $562 = $0;
 STACKTOP = sp;return ($562|0);
}
function _ImageStrDecGetInfo($pII,$pSCP) {
 $pII = $pII|0;
 $pSCP = $pSCP|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aDummy = 0, $cMarker = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cMarker = sp + 12|0;
 $aDummy = sp + 16|0;
 $1 = $pII;
 $2 = $pSCP;
 $err = 0;
 $3 = $2;
 $4 = (($3) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iii[$7 & 255]($10,$cMarker)|0);
 $err = $11;
 $12 = ($11|0)<(0);
 do {
  if ($12) {
   $13 = $err;
   $err = $13;
  } else {
   $14 = $err;
   $err = $14;
   $15 = $1;
   $16 = $2;
   $17 = (_ReadWMIHeader($15,$16,$aDummy)|0);
   $err = $17;
   $18 = ($17|0)<(0);
   if ($18) {
    $19 = $err;
    $err = $19;
    break;
   }
   $20 = $err;
   $err = $20;
   $21 = $2;
   $22 = (($21) + 52|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 44|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $2;
   $27 = (($26) + 52|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$cMarker>>2]|0;
   $30 = (FUNCTION_TABLE_iii[$25 & 255]($28,$29)|0);
   $err = $30;
   $31 = ($30|0)<(0);
   if ($31) {
    $32 = $err;
    $err = $32;
    break;
   }
   $33 = $err;
   $err = $33;
   $0 = 0;
   $34 = $0;
   STACKTOP = sp;return ($34|0);
  }
 } while(0);
 $0 = -1;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _CalcThumbnailSize($pII) {
 $pII = $pII|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $MAX_THUMB_SCALE = 0, $cScale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pII;
 $MAX_THUMB_SCALE = 16;
 $1 = $0;
 $2 = (($1) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>(16);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 52|0);
  HEAP32[$6>>2] = 16;
 } else {
  $7 = $0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)<(1);
  if ($10) {
   $11 = $0;
   $12 = (($11) + 52|0);
   HEAP32[$12>>2] = 1;
  } else {
   $cScale = 1;
   while(1) {
    $13 = $cScale;
    $14 = ($13>>>0)<(16);
    if (!($14)) {
     break;
    }
    $15 = $cScale;
    $16 = $0;
    $17 = (($16) + 52|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($15>>>0)>=($18>>>0);
    if ($19) {
     label = 8;
     break;
    }
    $23 = $cScale;
    $24 = $23<<1;
    $cScale = $24;
   }
   if ((label|0) == 8) {
    $20 = $cScale;
    $21 = $0;
    $22 = (($21) + 52|0);
    HEAP32[$22>>2] = $20;
   }
  }
 }
 $25 = $0;
 $26 = (($25) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $cScale = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = $cScale;
 $31 = (($29) + ($30))|0;
 $32 = (($31) - 1)|0;
 $33 = $cScale;
 $34 = (($32>>>0) / ($33>>>0))&-1;
 $35 = $0;
 $36 = (($35) + 56|0);
 HEAP32[$36>>2] = $34;
 $37 = $0;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $cScale;
 $41 = (($39) + ($40))|0;
 $42 = (($41) - 1)|0;
 $43 = $cScale;
 $44 = (($42>>>0) / ($43>>>0))&-1;
 $45 = $0;
 $46 = (($45) + 60|0);
 HEAP32[$46>>2] = $44;
 STACKTOP = sp;return;
}
function _WMPhotoValidate($pII,$pSCP) {
 $pII = $pII|0;
 $pSCP = $pSCP|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cII = 0, $cSCP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32960|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cII = sp + 8|0;
 $cSCP = sp + 88|0;
 $1 = $pII;
 $2 = $pSCP;
 $3 = $2;
 _memcpy(($cSCP|0),($3|0),32868)|0;
 $4 = $2;
 $5 = (_ImageStrDecGetInfo($cII,$4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $0 = -1;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 $7 = (($cII) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 12|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$cII>>2]|0;
 $12 = $1;
 HEAP32[$12>>2] = $11;
 $13 = (($cII) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = (($15) + 4|0);
 HEAP32[$16>>2] = $14;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = $1;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if (!($23)) {
   $24 = HEAP32[$cSCP>>2]|0;
   $25 = $2;
   HEAP32[$25>>2] = $24;
   $26 = (($cSCP) + 56|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $2;
   $29 = (($28) + 56|0);
   HEAP32[$29>>2] = $27;
   $30 = (($cSCP) + 52|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $2;
   $33 = (($32) + 52|0);
   HEAP32[$33>>2] = $31;
   $34 = $2;
   $35 = (($34) + 36|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = ($37|0)>(1);
   if ($38) {
    $39 = (($cSCP) + 36|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $2;
    $42 = (($41) + 36|0);
    HEAP8[$42>>0] = $40;
   }
   $43 = $2;
   $44 = (($43) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(6);
   if ($46) {
    $47 = $1;
    $48 = (($47) + 8|0);
    HEAP32[$48>>2] = 6;
   }
   $49 = $2;
   $50 = (($49) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(4);
   if ($52) {
    $53 = $1;
    $54 = (($53) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)!=(0);
    if ($56) {
     $57 = $1;
     $58 = (($57) + 8|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)!=(7);
     if ($60) {
      $61 = $1;
      $62 = (($61) + 8|0);
      HEAP32[$62>>2] = 4;
     }
    }
   }
   $63 = $2;
   $64 = (($63) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)==(2);
   if ($66) {
    $67 = $1;
    $68 = (($67) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(1);
    if ($70) {
     $71 = $1;
     $72 = (($71) + 8|0);
     HEAP32[$72>>2] = 2;
    }
   }
   $73 = $2;
   $74 = (($73) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)==(3);
   do {
    if ($76) {
     $77 = $1;
     $78 = (($77) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==(2);
     if (!($80)) {
      $81 = $1;
      $82 = (($81) + 8|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)==(1);
      if (!($84)) {
       break;
      }
     }
     $85 = $1;
     $86 = (($85) + 8|0);
     HEAP32[$86>>2] = 3;
    }
   } while(0);
   $87 = (($cII) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(7);
   if ($89) {
    $90 = $1;
    $91 = (($90) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)!=(0);
    if ($93) {
     $94 = $1;
     $95 = (($94) + 8|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ($96|0)!=(6);
     if ($97) {
      $98 = (($cII) + 8|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $1;
      $101 = (($100) + 8|0);
      HEAP32[$101>>2] = $99;
     }
    }
   }
   $102 = (($cII) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==(8);
   if ($104) {
    $105 = $1;
    $106 = (($105) + 8|0);
    HEAP32[$106>>2] = 8;
   }
   $107 = $1;
   _CalcThumbnailSize($107);
   $108 = $1;
   $109 = (($108) + 44|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)==(0);
   if ($111) {
    label = 29;
   } else {
    $112 = $1;
    $113 = (($112) + 36|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)==(0);
    if ($115) {
     label = 29;
    }
   }
   if ((label|0) == 29) {
    $116 = $1;
    $117 = (($116) + 40|0);
    HEAP32[$117>>2] = 0;
    $118 = $1;
    $119 = (($118) + 32|0);
    HEAP32[$119>>2] = 0;
    $120 = $1;
    $121 = (($120) + 56|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $1;
    $124 = (($123) + 36|0);
    HEAP32[$124>>2] = $122;
    $125 = $1;
    $126 = (($125) + 60|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $1;
    $129 = (($128) + 44|0);
    HEAP32[$129>>2] = $127;
   }
   $130 = $1;
   $131 = (($130) + 32|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $1;
   $134 = (($133) + 56|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($132>>>0)>=($135>>>0);
   if ($136) {
    $137 = $1;
    $138 = (($137) + 32|0);
    HEAP32[$138>>2] = 0;
   }
   $139 = $1;
   $140 = (($139) + 40|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $1;
   $143 = (($142) + 60|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($141>>>0)>=($144>>>0);
   if ($145) {
    $146 = $1;
    $147 = (($146) + 40|0);
    HEAP32[$147>>2] = 0;
   }
   $148 = $1;
   $149 = (($148) + 32|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $1;
   $152 = (($151) + 36|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($150) + ($153))|0;
   $155 = $1;
   $156 = (($155) + 56|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($154>>>0)>($157>>>0);
   if ($158) {
    $159 = $1;
    $160 = (($159) + 56|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $1;
    $163 = (($162) + 32|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (($161) - ($164))|0;
    $166 = $1;
    $167 = (($166) + 36|0);
    HEAP32[$167>>2] = $165;
   }
   $168 = $1;
   $169 = (($168) + 40|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $1;
   $172 = (($171) + 44|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($170) + ($173))|0;
   $175 = $1;
   $176 = (($175) + 60|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ($174>>>0)>($177>>>0);
   if ($178) {
    $179 = $1;
    $180 = (($179) + 60|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $1;
    $183 = (($182) + 40|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (($181) - ($184))|0;
    $186 = $1;
    $187 = (($186) + 44|0);
    HEAP32[$187>>2] = $185;
   }
   $0 = 0;
   $188 = $0;
   STACKTOP = sp;return ($188|0);
  }
 }
 $0 = -1;
 $188 = $0;
 STACKTOP = sp;return ($188|0);
}
function _ImageStrDecInit($pII,$pSCP,$pctxSC,$cbStride,$failSafe) {
 $pII = $pII|0;
 $pSCP = $pSCP|0;
 $pctxSC = $pctxSC|0;
 $cbStride = $cbStride|0;
 $failSafe = $failSafe|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $SB = 0, $SC = 0, $bLessThan64Bit = 0, $bLossyTranscoding = 0, $bUseHardTileBoundaries = 0, $cMacBlock = 0, $cb = 0, $cbChannel = 0, $cbMacBlockChroma = 0, $cbMacBlockStride = 0;
 var $cblkChroma = 0, $err = 0, $i = 0, $pNextSC = 0, $pSC = 0, $pb = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 35280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $SC = sp + 16|0;
 $SB = sp + 35216|0;
 $1 = $pII;
 $2 = $pSCP;
 $3 = $pctxSC;
 $4 = $cbStride;
 $5 = $failSafe;
 $err = 0;
 $cbChannel = 0;
 $cblkChroma = 0;
 $cbMacBlockStride = 0;
 $cbMacBlockChroma = 0;
 $cMacBlock = 0;
 _memset(($SC|0),0,35176)|0;
 $pSC = 0;
 $pNextSC = 0;
 $pb = 0;
 $cb = 0;
 $bLossyTranscoding = 0;
 $bUseHardTileBoundaries = 0;
 $bLessThan64Bit = 1;
 $6 = $3;
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = $2;
 $9 = (_WMPhotoValidate($7,$8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = -1;
  $409 = $0;
  STACKTOP = sp;return ($409|0);
 }
 $11 = $2;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(4);
 if ($14) {
  $0 = -1;
  $409 = $0;
  STACKTOP = sp;return ($409|0);
 }
 $15 = $2;
 $16 = (($15) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($SC) + 84|0);
 $19 = (($18) + 52|0);
 HEAP32[$19>>2] = $17;
 $20 = (($SC) + 4|0);
 $21 = (($SC) + 84|0);
 $22 = (($SC) + 34136|0);
 $23 = (_ReadWMIHeader($20,$21,$22)|0);
 $24 = ($23|0)!=(0);
 if ($24) {
  $0 = -1;
  $409 = $0;
  STACKTOP = sp;return ($409|0);
 }
 $25 = (($SC) + 84|0);
 $26 = (($25) + 32848|0);
 $27 = HEAP32[$26>>2]|0;
 $bUseHardTileBoundaries = $27;
 $28 = (($SC) + 4|0);
 $29 = (($28) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(4);
 if ($31) {
  $32 = $1;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(7);
  if ($35) {
   $bLossyTranscoding = 1;
  }
 }
 $36 = $2;
 $37 = (($36) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(4);
 if ($39) {
  $40 = $1;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(4);
  if ($43) {
   $0 = -1;
   $409 = $0;
   STACKTOP = sp;return ($409|0);
  }
 }
 $44 = (($SC) + 84|0);
 $45 = $2;
 _memcpy(($44|0),($45|0),32868)|0;
 $46 = (($SC) + 4|0);
 $47 = $1;
 dest=$46+0|0; src=$47+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $48 = (($SC) + 34136|0);
 $49 = (($48) + 44|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($SC) + 34136|0);
 $52 = (($51) + 52|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($50) + ($53))|0;
 $55 = (($SC) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($54))|0;
 HEAP32[$55>>2] = $57;
 $58 = (($SC) + 34136|0);
 $59 = (($58) + 40|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($SC) + 34136|0);
 $62 = (($61) + 48|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($60) + ($63))|0;
 $65 = (($SC) + 4|0);
 $66 = (($65) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + ($64))|0;
 HEAP32[$66>>2] = $68;
 $69 = (($SC) + 84|0);
 $70 = (($69) + 20|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (9480 + ($71<<2)|0);
 $73 = HEAP32[$72>>2]|0;
 $cbChannel = $73;
 $74 = (($SC) + 34136|0);
 $75 = (($74) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (9488 + ($76<<2)|0);
 $78 = HEAP32[$77>>2]|0;
 $cblkChroma = $78;
 $79 = $cbChannel;
 $80 = $79<<4;
 $81 = $80<<4;
 $cbMacBlockStride = $81;
 $82 = $cbChannel;
 $83 = $82<<4;
 $84 = $cblkChroma;
 $85 = Math_imul($83, $84)|0;
 $cbMacBlockChroma = $85;
 $86 = (($SC) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($87) + 15)|0;
 $89 = (($88>>>0) / 16)&-1;
 $cMacBlock = $89;
 $cb = 35351;
 $90 = $cb;
 $91 = (($90) + 24615)|0;
 $cb = $91;
 $92 = $5;
 $93 = ($92|0)!=(0);
 if ($93) {
  $94 = $cb;
  $95 = (($94) + 24615)|0;
  $cb = $95;
 }
 $96 = $cbMacBlockStride;
 $97 = $cbMacBlockChroma;
 $98 = (($SC) + 34136|0);
 $99 = (($98) + 36|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) - 1)|0;
 $102 = Math_imul($97, $101)|0;
 $103 = (($96) + ($102))|0;
 $104 = $5;
 $105 = ($104|0)!=(0);
 $106 = $105 ? 3 : 2;
 $107 = Math_imul($103, $106)|0;
 $i = $107;
 $108 = $bLessThan64Bit;
 $109 = ($108|0)!=(0);
 if ($109) {
  $110 = $i;
  $111 = $cMacBlock;
  $112 = $111 >>> 16;
  $113 = Math_imul($110, $112)|0;
  $114 = $113 & -16384;
  $115 = ($114|0)!=(0);
  if ($115) {
   $0 = -1;
   $409 = $0;
   STACKTOP = sp;return ($409|0);
  }
 }
 $116 = $i;
 $117 = $cMacBlock;
 $118 = Math_imul($116, $117)|0;
 $119 = $cb;
 $120 = (($119) + ($118))|0;
 $cb = $120;
 $121 = $cb;
 $122 = (_malloc($121)|0);
 $pb = $122;
 $123 = $pb;
 $124 = ($123|0)==(0|0);
 if ($124) {
  $0 = -101;
  $409 = $0;
  STACKTOP = sp;return ($409|0);
 }
 $125 = $pb;
 $126 = $cb;
 _memset(($125|0),0,($126|0))|0;
 $127 = $pb;
 $pSC = $127;
 $128 = $pb;
 $129 = (($128) + 35176|0);
 $pb = $129;
 $130 = $pSC;
 $131 = ($130|0)==(0|0);
 if ($131) {
  $0 = -1;
  $409 = $0;
  STACKTOP = sp;return ($409|0);
 }
 $132 = $pb;
 $133 = $pSC;
 $134 = (($133) + 34248|0);
 HEAP32[$134>>2] = $132;
 $135 = $pb;
 $136 = (($135) + 48|0);
 $pb = $136;
 $137 = $cbChannel;
 $138 = $pSC;
 $139 = (($138) + 34372|0);
 HEAP32[$139>>2] = $137;
 $140 = $bUseHardTileBoundaries;
 $141 = $pSC;
 $142 = (($141) + 34284|0);
 HEAP32[$142>>2] = $140;
 $143 = $pSC;
 $144 = (($SC) + 34136|0);
 _InitializeStrDec($143,$144,$SC);
 $145 = $pb;
 $146 = $145;
 $147 = (($146) + 127)|0;
 $148 = $147 & -128;
 $149 = $148;
 $pb = $149;
 $i = 0;
 while(1) {
  $150 = $i;
  $151 = $pSC;
  $152 = (($151) + 34136|0);
  $153 = (($152) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($150>>>0)<($154>>>0);
  if (!($155)) {
   break;
  }
  $156 = $pb;
  $157 = $i;
  $158 = $pSC;
  $159 = (($158) + 34564|0);
  $160 = (($159) + ($157<<2)|0);
  HEAP32[$160>>2] = $156;
  $161 = $cbMacBlockStride;
  $162 = $pSC;
  $163 = (($162) + 34364|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = Math_imul($161, $164)|0;
  $166 = $pb;
  $167 = (($166) + ($165)|0);
  $pb = $167;
  $168 = $pb;
  $169 = $i;
  $170 = $pSC;
  $171 = (($170) + 34628|0);
  $172 = (($171) + ($169<<2)|0);
  HEAP32[$172>>2] = $168;
  $173 = $cbMacBlockStride;
  $174 = $pSC;
  $175 = (($174) + 34364|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = Math_imul($173, $176)|0;
  $178 = $pb;
  $179 = (($178) + ($177)|0);
  $pb = $179;
  $180 = $5;
  $181 = ($180|0)!=(0);
  if ($181) {
   $182 = $pb;
   $183 = $i;
   $184 = $pSC;
   $185 = (($184) + 34820|0);
   $186 = (($185) + ($183<<2)|0);
   HEAP32[$186>>2] = $182;
   $187 = $cbMacBlockStride;
   $188 = $pSC;
   $189 = (($188) + 34364|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = Math_imul($187, $190)|0;
   $192 = $pb;
   $193 = (($192) + ($191)|0);
   $pb = $193;
  }
  $194 = $cbMacBlockChroma;
  $cbMacBlockStride = $194;
  $195 = $i;
  $196 = (($195) + 1)|0;
  $i = $196;
 }
 $197 = $pb;
 $198 = $197;
 $199 = (($198) + 16383)|0;
 $200 = $199 & -16384;
 $201 = $200;
 $202 = (($201) + 8192|0);
 $pb = $202;
 $203 = $pb;
 $204 = $pSC;
 $205 = (($204) + 34272|0);
 HEAP32[$205>>2] = $203;
 $206 = $pb;
 $207 = (($206) + 40|0);
 $pb = $207;
 $208 = $5;
 $209 = ($208|0)!=(0);
 if ($209) {
  $210 = $pb;
  $211 = $210;
  $212 = (($211) + 16383)|0;
  $213 = $212 & -16384;
  $214 = $213;
  $215 = (($214) + 8192|0);
  $pb = $215;
  $216 = $pb;
  $217 = $pSC;
  $218 = (($217) + 34276|0);
  HEAP32[$218>>2] = $216;
  $219 = $pb;
  $220 = (($219) + 40|0);
  $pb = $220;
 }
 $221 = $pSC;
 $222 = (($221) + 34136|0);
 $223 = (($222) + 16|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = ($224|0)!=(0);
 do {
  if ($225) {
   ;HEAP32[$SB+0>>2]=0|0;HEAP32[$SB+4>>2]=0|0;HEAP32[$SB+8>>2]=0|0;HEAP32[$SB+12>>2]=0|0;
   $226 = $cbChannel;
   $227 = $226<<4;
   $228 = $227<<4;
   $cbMacBlockStride = $228;
   $229 = $cbMacBlockStride;
   $230 = $cMacBlock;
   $231 = Math_imul($229, $230)|0;
   $232 = $5;
   $233 = ($232|0)!=(0);
   $234 = $233 ? 3 : 2;
   $235 = Math_imul($231, $234)|0;
   $236 = (35303 + ($235))|0;
   $cb = $236;
   $237 = $cb;
   $238 = (_malloc($237)|0);
   $pb = $238;
   $239 = $pb;
   $240 = ($239|0)==(0|0);
   if ($240) {
    $0 = -101;
    $409 = $0;
    STACKTOP = sp;return ($409|0);
   }
   $241 = $pb;
   $242 = $cb;
   _memset(($241|0),0,($242|0))|0;
   $243 = $pb;
   $pNextSC = $243;
   $244 = $pb;
   $245 = (($244) + 35176|0);
   $pb = $245;
   $246 = $2;
   $247 = (($246) + 52|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = (_attach_SB($SB,$248)|0);
   $err = $249;
   $250 = ($249|0)<(0);
   if ($250) {
    $251 = $err;
    $err = $251;
    break;
   }
   $252 = $err;
   $err = $252;
   $253 = $pNextSC;
   $254 = (($SC) + 34136|0);
   _InitializeStrDec($253,$254,$SC);
   $255 = $pNextSC;
   $256 = (($255) + 4|0);
   $257 = $pNextSC;
   $258 = (($257) + 84|0);
   $259 = $pNextSC;
   $260 = (($259) + 34136|0);
   (_ReadImagePlaneHeader($256,$258,$260,$SB)|0);
   (_detach_SB($SB)|0);
   $261 = $pSC;
   $262 = (($261) + 34248|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = $pNextSC;
   $265 = (($264) + 34248|0);
   HEAP32[$265>>2] = $263;
   $266 = $cbChannel;
   $267 = $pNextSC;
   $268 = (($267) + 34372|0);
   HEAP32[$268>>2] = $266;
   $269 = $pNextSC;
   $270 = (($269) + 34136|0);
   $271 = (($270) + 8|0);
   HEAP32[$271>>2] = 0;
   $272 = $pNextSC;
   $273 = (($272) + 34136|0);
   $274 = (($273) + 36|0);
   HEAP32[$274>>2] = 1;
   $275 = $pNextSC;
   $276 = (($275) + 34136|0);
   $277 = (($276) + 16|0);
   HEAP32[$277>>2] = 1;
   $278 = $pb;
   $279 = $278;
   $280 = (($279) + 127)|0;
   $281 = $280 & -128;
   $282 = $281;
   $pb = $282;
   $283 = $pb;
   $284 = $pNextSC;
   $285 = (($284) + 34564|0);
   HEAP32[$285>>2] = $283;
   $286 = $cbMacBlockStride;
   $287 = $pNextSC;
   $288 = (($287) + 34364|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = Math_imul($286, $289)|0;
   $291 = $pb;
   $292 = (($291) + ($290)|0);
   $pb = $292;
   $293 = $pb;
   $294 = $pNextSC;
   $295 = (($294) + 34628|0);
   HEAP32[$295>>2] = $293;
   $296 = $5;
   $297 = ($296|0)!=(0);
   if ($297) {
    $298 = $cbMacBlockStride;
    $299 = $pNextSC;
    $300 = (($299) + 34364|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = Math_imul($298, $301)|0;
    $303 = $pb;
    $304 = (($303) + ($302)|0);
    $pb = $304;
    $305 = $pb;
    $306 = $pNextSC;
    $307 = (($306) + 34820|0);
    HEAP32[$307>>2] = $305;
   }
   $308 = $pSC;
   $309 = (($308) + 34272|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = $pNextSC;
   $312 = (($311) + 34272|0);
   HEAP32[$312>>2] = $310;
   $313 = $pSC;
   $314 = $pNextSC;
   $315 = (($314) + 35032|0);
   HEAP32[$315>>2] = $313;
   $316 = $pNextSC;
   $317 = (($316) + 35036|0);
   HEAP32[$317>>2] = 1;
   label = 40;
  } else {
   $318 = $pSC;
   $319 = (($318) + 84|0);
   $320 = (($319) + 36|0);
   HEAP8[$320>>0] = 0;
   label = 40;
  }
 } while(0);
 do {
  if ((label|0) == 40) {
   $321 = $pSC;
   $322 = $5;
   $323 = (_StrIODecInit($321,$322)|0);
   $324 = ($323|0)!=(0);
   $325 = $324 ? -101 : 0;
   $err = $325;
   $326 = ($325|0)<(0);
   if ($326) {
    $327 = $err;
    $err = $327;
    break;
   }
   $328 = $err;
   $err = $328;
   $329 = $pSC;
   $330 = $5;
   $331 = (_StrDecInit($329,$330)|0);
   $332 = ($331|0)!=(0);
   $333 = $332 ? -101 : 0;
   $err = $333;
   $334 = ($333|0)<(0);
   if ($334) {
    $335 = $err;
    $err = $335;
    break;
   }
   $336 = $err;
   $err = $336;
   $337 = $pNextSC;
   $338 = ($337|0)!=(0|0);
   if ($338) {
    $339 = $pNextSC;
    $340 = $5;
    $341 = (_StrDecInit($339,$340)|0);
    $342 = ($341|0)!=(0);
    $343 = $342 ? -101 : 0;
    $err = $343;
    $344 = ($343|0)<(0);
    if ($344) {
     $345 = $err;
     $err = $345;
     break;
    }
    $346 = $err;
    $err = $346;
   }
   $347 = $pNextSC;
   $348 = $pSC;
   $349 = (($348) + 35032|0);
   HEAP32[$349>>2] = $347;
   $350 = $1;
   $351 = $pSC;
   $352 = (($351) + 4|0);
   dest=$350+0|0; src=$352+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $353 = $2;
   $354 = $pSC;
   $355 = (($354) + 84|0);
   _memcpy(($353|0),($355|0),32868)|0;
   $356 = $pSC;
   $357 = $3;
   HEAP32[$357>>2] = $356;
   $358 = $pSC;
   $359 = (($358) + 4|0);
   $360 = (($359) + 68|0);
   $361 = HEAP8[$360>>0]|0;
   $362 = ($361<<24>>24)!=(0);
   if ($362) {
    $363 = $pSC;
    $364 = (($363) + 35040|0);
    $365 = $pSC;
    $366 = (($365) + 34364|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = $pSC;
    $369 = (($368) + 34136|0);
    $370 = (($369) + 36|0);
    $371 = HEAP32[$370>>2]|0;
    (_initPostProc($364,$367,$371)|0);
    $372 = $pSC;
    $373 = (($372) + 34136|0);
    $374 = (($373) + 16|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ($375|0)!=(0);
    if ($376) {
     $377 = $pNextSC;
     $378 = (($377) + 35040|0);
     $379 = $pNextSC;
     $380 = (($379) + 34364|0);
     $381 = HEAP32[$380>>2]|0;
     $382 = $pNextSC;
     $383 = (($382) + 34136|0);
     $384 = (($383) + 36|0);
     $385 = HEAP32[$384>>2]|0;
     (_initPostProc($378,$381,$385)|0);
    }
   }
   $386 = $4;
   $387 = $pSC;
   $388 = (($387) + 32952|0);
   $389 = (($388) + 8|0);
   HEAP32[$389>>2] = $386;
   $390 = $pSC;
   _setROI($390);
   $391 = $pNextSC;
   $392 = ($391|0)!=(0|0);
   if ($392) {
    $393 = $pNextSC;
    $394 = (($393) + 32952|0);
    $395 = $pSC;
    $396 = (($395) + 32952|0);
    ;HEAP32[$394+0>>2]=HEAP32[$396+0>>2]|0;HEAP32[$394+4>>2]=HEAP32[$396+4>>2]|0;HEAP32[$394+8>>2]=HEAP32[$396+8>>2]|0;HEAP32[$394+12>>2]=HEAP32[$396+12>>2]|0;HEAP32[$394+16>>2]=HEAP32[$396+16>>2]|0;HEAP32[$394+20>>2]=HEAP32[$396+20>>2]|0;
    $397 = $pNextSC;
    _setROI($397);
   }
   $398 = $pSC;
   $399 = (_initLookupTables($398)|0);
   $400 = ($399|0)!=(0);
   if ($400) {
    $0 = -1;
    $409 = $0;
    STACKTOP = sp;return ($409|0);
   }
   $401 = $pNextSC;
   $402 = ($401|0)!=(0|0);
   do {
    if ($402) {
     $403 = $pNextSC;
     $404 = (_initLookupTables($403)|0);
     $405 = ($404|0)!=(0);
     if (!($405)) {
      break;
     }
     $0 = -1;
     $409 = $0;
     STACKTOP = sp;return ($409|0);
    }
   } while(0);
  }
 } while(0);
 $406 = $err;
 $407 = (0)==($406|0);
 $408 = $407 ? 0 : -1;
 $0 = $408;
 $409 = $0;
 STACKTOP = sp;return ($409|0);
}
function _InitializeStrDec($pSC,$pParams,$pSCIn) {
 $pSC = $pSC|0;
 $pParams = $pParams|0;
 $pSCIn = $pSCIn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pParams;
 $2 = $pSCIn;
 $3 = $0;
 $4 = (($3) + 34136|0);
 $5 = $1;
 dest=$4+0|0; src=$5+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = $0;
 HEAP32[$6>>2] = 35176;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = $2;
 $10 = (($9) + 4|0);
 dest=$8+0|0; src=$10+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $11 = $0;
 $12 = (($11) + 84|0);
 $13 = $2;
 $14 = (($13) + 84|0);
 _memcpy(($12|0),($14|0),32868)|0;
 $15 = $0;
 $16 = (($15) + 34356|0);
 HEAP32[$16>>2] = 0;
 $17 = $0;
 $18 = (($17) + 34360|0);
 HEAP32[$18>>2] = 0;
 $19 = $0;
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 15)|0;
 $23 = (($22>>>0) / 16)&-1;
 $24 = $0;
 $25 = (($24) + 34364|0);
 HEAP32[$25>>2] = $23;
 $26 = $0;
 $27 = (($26) + 4|0);
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 15)|0;
 $31 = (($30>>>0) / 16)&-1;
 $32 = $0;
 $33 = (($32) + 34368|0);
 HEAP32[$33>>2] = $31;
 $34 = $0;
 $35 = (($34) + 34448|0);
 HEAP32[$35>>2] = 95;
 $36 = $1;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 $40 = $39 ? 96 : 97;
 $41 = $0;
 $42 = (($41) + 34452|0);
 HEAP32[$42>>2] = $40;
 $43 = $0;
 $44 = (($43) + 34452|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $0;
 $47 = (($46) + 34456|0);
 HEAP32[$47>>2] = $45;
 $48 = $0;
 $49 = (($48) + 34464|0);
 HEAP32[$49>>2] = 98;
 $50 = $0;
 $51 = (($50) + 34468|0);
 HEAP32[$51>>2] = 98;
 $52 = $0;
 $53 = (($52) + 34472|0);
 HEAP32[$53>>2] = 98;
 $54 = $0;
 $55 = (($54) + 34476|0);
 HEAP32[$55>>2] = 98;
 $56 = $0;
 $57 = (($56) + 34480|0);
 HEAP32[$57>>2] = 98;
 $58 = $0;
 $59 = (($58) + 34484|0);
 HEAP32[$59>>2] = 98;
 $60 = $0;
 $61 = (($60) + 34488|0);
 HEAP32[$61>>2] = 98;
 $62 = $0;
 $63 = (($62) + 34492|0);
 HEAP32[$63>>2] = 98;
 $64 = $0;
 $65 = (($64) + 34496|0);
 HEAP32[$65>>2] = 98;
 $66 = $0;
 $67 = (($66) + 35032|0);
 HEAP32[$67>>2] = 0;
 $68 = $0;
 $69 = (($68) + 35036|0);
 HEAP32[$69>>2] = 0;
 STACKTOP = sp;return;
}
function _SaveDecoderState($ctxSC) {
 $ctxSC = $ctxSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cbChannel = 0, $cbMacBlockChroma = 0;
 var $cbMacBlockStride = 0, $cblkChroma = 0, $i = 0, $pNextSC = 0, $pSC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctxSC;
 $1 = $0;
 $pSC = $1;
 $2 = $pSC;
 $3 = (($2) + 34276|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (0|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $pSC;
 $7 = (($6) + 34276|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -8192|0);
 $10 = $pSC;
 $11 = (($10) + 34272|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -8192|0);
 _memcpy(($9|0),($13|0),8232)|0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = $pSC;
  $16 = (($15) + 34328|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = $pSC;
  $21 = (($20) + 34324|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -8192|0);
  $26 = $i;
  $27 = $pSC;
  $28 = (($27) + 34320|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + -8192|0);
  _memcpy(($25|0),($32|0),8232)|0;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $pSC;
 _BackupCodingContextsDec($35);
 $36 = $pSC;
 $37 = (($36) + 34376|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $pSC;
 $40 = (($39) + 34384|0);
 HEAP32[$40>>2] = $38;
 $41 = $pSC;
 $42 = (($41) + 34380|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $pSC;
 $45 = (($44) + 34388|0);
 HEAP32[$45>>2] = $43;
 $46 = $pSC;
 $47 = (($46) + 84|0);
 $48 = (($47) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (9528 + ($49<<2)|0);
 $51 = HEAP32[$50>>2]|0;
 $cbChannel = $51;
 $52 = $pSC;
 $53 = (($52) + 34136|0);
 $54 = (($53) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (9488 + ($55<<2)|0);
 $57 = HEAP32[$56>>2]|0;
 $cblkChroma = $57;
 $58 = $cbChannel;
 $59 = $58<<4;
 $60 = $59<<4;
 $cbMacBlockStride = $60;
 $61 = $cbChannel;
 $62 = $61<<4;
 $63 = $cblkChroma;
 $64 = Math_imul($62, $63)|0;
 $cbMacBlockChroma = $64;
 $65 = $pSC;
 $66 = (($65) + 35032|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $69 = $pSC;
  $70 = (($69) + 35032|0);
  $71 = HEAP32[$70>>2]|0;
  $pNextSC = $71;
  $72 = $pNextSC;
  _BackupCodingContextsDec($72);
  $73 = $pNextSC;
  $74 = (($73) + 34820|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $pNextSC;
  $77 = (($76) + 34564|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $cbMacBlockStride;
  $80 = $pSC;
  $81 = (($80) + 34364|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = Math_imul($79, $82)|0;
  _memcpy(($75|0),($78|0),($83|0))|0;
  $84 = $pNextSC;
  $85 = (($84) + 34376|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $pNextSC;
  $88 = (($87) + 34384|0);
  HEAP32[$88>>2] = $86;
  $89 = $pNextSC;
  $90 = (($89) + 34380|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $pNextSC;
  $93 = (($92) + 34388|0);
  HEAP32[$93>>2] = $91;
 }
 $i = 0;
 while(1) {
  $94 = $i;
  $95 = $pSC;
  $96 = (($95) + 34136|0);
  $97 = (($96) + 36|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($94>>>0)<($98>>>0);
  if (!($99)) {
   break;
  }
  $100 = $i;
  $101 = $pSC;
  $102 = (($101) + 34820|0);
  $103 = (($102) + ($100<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $i;
  $106 = $pSC;
  $107 = (($106) + 34564|0);
  $108 = (($107) + ($105<<2)|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $cbMacBlockStride;
  $111 = $pSC;
  $112 = (($111) + 34364|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = Math_imul($110, $113)|0;
  _memcpy(($104|0),($109|0),($114|0))|0;
  $115 = $cbMacBlockChroma;
  $cbMacBlockStride = $115;
  $116 = $i;
  $117 = (($116) + 1)|0;
  $i = $117;
 }
 STACKTOP = sp;return;
}
function _SetRestoreAfterFailure($ctxSC) {
 $ctxSC = $ctxSC|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $pSC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctxSC;
 $1 = $0;
 $pSC = $1;
 $2 = $pSC;
 $3 = (($2) + 35172|0);
 HEAP32[$3>>2] = 1;
 STACKTOP = sp;return;
}
function _NeedRestoreAfterFailure($ctxSC) {
 $ctxSC = $ctxSC|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $pSC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctxSC;
 $1 = $0;
 $pSC = $1;
 $2 = $pSC;
 $3 = (($2) + 35172|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _RestoreDecoderState($ctxSC) {
 $ctxSC = $ctxSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cbChannel = 0, $cbMacBlockChroma = 0, $cbMacBlockStride = 0, $cblkChroma = 0, $i = 0, $pIO = 0, $pIOBackup = 0, $pNextSC = 0;
 var $pSC = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctxSC;
 $1 = $0;
 $pSC = $1;
 $2 = $pSC;
 $3 = (($2) + 34276|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (0|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $pSC;
 $7 = (($6) + 35172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $pSC;
  $11 = (($10) + 34272|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $pSC;
  $14 = (($13) + 34276|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_BitIOBufsEqual($12,$15)|0);
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $pSC;
   $19 = (($18) + 34272|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $pSC;
   $22 = (($21) + 34276|0);
   $23 = HEAP32[$22>>2]|0;
   dest=$20+0|0; src=$23+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  } else {
   $24 = $pSC;
   $25 = (($24) + 34272|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + -8192|0);
   $28 = $pSC;
   $29 = (($28) + 34276|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + -8192|0);
   _memcpy(($27|0),($31|0),8232)|0;
  }
  $i = 0;
  while(1) {
   $32 = $i;
   $33 = $pSC;
   $34 = (($33) + 34328|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($32>>>0)<($35>>>0);
   if (!($36)) {
    break;
   }
   $37 = $i;
   $38 = $pSC;
   $39 = (($38) + 34320|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($37<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $pIO = $42;
   $43 = $i;
   $44 = $pSC;
   $45 = (($44) + 34324|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($43<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $pIOBackup = $48;
   $49 = $pIO;
   $50 = $pIOBackup;
   $51 = (_BitIOBufsEqual($49,$50)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    $53 = $pIO;
    $54 = $pIOBackup;
    dest=$53+0|0; src=$54+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   } else {
    $55 = $pIO;
    $56 = (($55) + -8192|0);
    $57 = $pIOBackup;
    $58 = (($57) + -8192|0);
    _memcpy(($56|0),($58|0),8232)|0;
   }
   $59 = $i;
   $60 = (($59) + 1)|0;
   $i = $60;
  }
  $61 = $pSC;
  _RestoreCodingContextsDec($61);
  $62 = $pSC;
  $63 = (($62) + 84|0);
  $64 = (($63) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (9536 + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $cbChannel = $67;
  $68 = $pSC;
  $69 = (($68) + 34136|0);
  $70 = (($69) + 8|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (9488 + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $cblkChroma = $73;
  $74 = $cbChannel;
  $75 = $74<<4;
  $76 = $75<<4;
  $cbMacBlockStride = $76;
  $77 = $cbChannel;
  $78 = $77<<4;
  $79 = $cblkChroma;
  $80 = Math_imul($78, $79)|0;
  $cbMacBlockChroma = $80;
  $81 = $pSC;
  $82 = (($81) + 35168|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83>>>0)>(0);
  if (!($84)) {
   ___assert_fail((9544|0),(8456|0),3951,(9568|0));
   // unreachable;
  }
  $85 = $pSC;
  $86 = (($85) + 35032|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)!=(0|0);
  if ($88) {
   $89 = $pSC;
   $90 = (($89) + 35032|0);
   $91 = HEAP32[$90>>2]|0;
   $pNextSC = $91;
   $92 = $pNextSC;
   _RestoreCodingContextsDec($92);
   $93 = $pNextSC;
   $94 = (($93) + 34564|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $pNextSC;
   $97 = (($96) + 34820|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $cbMacBlockStride;
   $100 = $pSC;
   $101 = (($100) + 35168|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (($102) - 1)|0;
   $104 = Math_imul($99, $103)|0;
   _memcpy(($95|0),($98|0),($104|0))|0;
   $105 = $pNextSC;
   $106 = (($105) + 34384|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $pNextSC;
   $109 = (($108) + 34376|0);
   HEAP32[$109>>2] = $107;
   $110 = $pNextSC;
   $111 = (($110) + 34388|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $pNextSC;
   $114 = (($113) + 34380|0);
   HEAP32[$114>>2] = $112;
  }
  $i = 0;
  while(1) {
   $115 = $i;
   $116 = $pSC;
   $117 = (($116) + 34136|0);
   $118 = (($117) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($115>>>0)<($119>>>0);
   if (!($120)) {
    break;
   }
   $121 = $i;
   $122 = $pSC;
   $123 = (($122) + 34564|0);
   $124 = (($123) + ($121<<2)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $i;
   $127 = $pSC;
   $128 = (($127) + 34820|0);
   $129 = (($128) + ($126<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $cbMacBlockStride;
   $132 = $pSC;
   $133 = (($132) + 35168|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) - 1)|0;
   $136 = Math_imul($131, $135)|0;
   _memcpy(($125|0),($130|0),($136|0))|0;
   $137 = $cbMacBlockChroma;
   $cbMacBlockStride = $137;
   $138 = $i;
   $139 = (($138) + 1)|0;
   $i = $139;
  }
  $140 = $pSC;
  $141 = (($140) + 34384|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $pSC;
  $144 = (($143) + 34376|0);
  HEAP32[$144>>2] = $142;
  $145 = $pSC;
  $146 = (($145) + 34388|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $pSC;
  $149 = (($148) + 34380|0);
  HEAP32[$149>>2] = $147;
  $150 = $pSC;
  $151 = (($150) + 35172|0);
  HEAP32[$151>>2] = 0;
 }
 STACKTOP = sp;return;
}
function _BitIOBufsEqual($pIO1,$pIO2) {
 $pIO1 = $pIO1|0;
 $pIO2 = $pIO2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO1;
 $1 = $pIO2;
 $2 = $0;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $21 = 0;
 } else {
  $6 = $0;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = (($9) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)==($11|0);
  if ($12) {
   $13 = $0;
   $14 = (($13) + 28|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $1;
   $17 = (($16) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($15|0)==($18|0);
   $21 = $19;
  } else {
   $21 = 0;
  }
 }
 $20 = $21&1;
 STACKTOP = sp;return ($20|0);
}
function _ImageStrDecDecode($ctxSC,$pBI,$pcDecodedLines) {
 $ctxSC = $ctxSC|0;
 $pBI = $pBI|0;
 $pcDecodedLines = $pcDecodedLines|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ProcessCenter = 0, $ProcessLeft = 0, $ProcessRight = 0;
 var $Transform = 0, $TransformLeftRigh = 0, $cMBRow = 0, $iChromaElements = 0, $k = 0, $pNextSC = 0, $pSC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctxSC;
 $2 = $pBI;
 $3 = $pcDecodedLines;
 $4 = $1;
 $pSC = $4;
 $5 = $pSC;
 $6 = (($5) + 35032|0);
 $7 = HEAP32[$6>>2]|0;
 $pNextSC = $7;
 $Transform = 0;
 $8 = $pSC;
 $9 = (($8) + 34136|0);
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 $13 = $12 ? 96 : 97;
 $TransformLeftRigh = $13;
 $14 = $pSC;
 $15 = (($14) + 34136|0);
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(1);
 if ($18) {
  $25 = 64;
 } else {
  $19 = $pSC;
  $20 = (($19) + 34136|0);
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(2);
  $24 = $23 ? 128 : 256;
  $25 = $24;
 }
 $iChromaElements = $25;
 $26 = $pSC;
 $27 = HEAP32[$26>>2]|0;
 $28 = (35176)!=($27|0);
 if ($28) {
  $0 = -1;
  $276 = $0;
  STACKTOP = sp;return ($276|0);
 }
 $29 = $pSC;
 $30 = (($29) + 32952|0);
 $31 = (($30) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $2;
 $34 = (($33) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($32|0)!=($35|0);
 if ($36) {
  $0 = -1;
  $276 = $0;
  STACKTOP = sp;return ($276|0);
 }
 $37 = $pSC;
 $38 = (($37) + 32952|0);
 $39 = $2;
 ;HEAP32[$38+0>>2]=HEAP32[$39+0>>2]|0;HEAP32[$38+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$39+12>>2]|0;HEAP32[$38+16>>2]=HEAP32[$39+16>>2]|0;HEAP32[$38+20>>2]=HEAP32[$39+20>>2]|0;
 $40 = $pSC;
 $41 = (($40) + 34248|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $pSC;
  $46 = (($45) + 34368|0);
  $47 = HEAP32[$46>>2]|0;
  $55 = $47;
 } else {
  $48 = $pSC;
  $49 = (($48) + 34248|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 36|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 16)|0;
  $54 = $53 >>> 4;
  $55 = $54;
 }
 $cMBRow = $55;
 $56 = $pSC;
 $57 = (($56) + 32952|0);
 $58 = (($57) + 20|0);
 HEAP32[$58>>2] = 0;
 $59 = $pSC;
 $60 = (($59) + 32952|0);
 $61 = (($60) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $pSC;
 $64 = (($63) + 34356|0);
 HEAP32[$64>>2] = $62;
 L17: while(1) {
  $65 = $pSC;
  $66 = (($65) + 34356|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $pSC;
  $69 = (($68) + 32952|0);
  $70 = (($69) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($67>>>0)<=($71>>>0);
  if (!($72)) {
   label = 48;
   break;
  }
  $73 = $pSC;
  $74 = (($73) + 34356|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (0)==($75|0);
  if ($76) {
   $77 = $pSC;
   $78 = (($77) + 34464|0);
   $79 = HEAP32[$78>>2]|0;
   $ProcessLeft = $79;
   $80 = $pSC;
   $81 = (($80) + 34468|0);
   $82 = HEAP32[$81>>2]|0;
   $ProcessCenter = $82;
   $83 = $pSC;
   $84 = (($83) + 34472|0);
   $85 = HEAP32[$84>>2]|0;
   $ProcessRight = $85;
   $86 = $pSC;
   $87 = (($86) + 34136|0);
   $88 = (($87) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89|0)==(0);
   $91 = $90 ? 96 : 97;
   $Transform = $91;
  } else {
   $92 = $cMBRow;
   $93 = $pSC;
   $94 = (($93) + 34356|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($92|0)==($95|0);
   if ($96) {
    $97 = $pSC;
    $98 = (($97) + 34488|0);
    $99 = HEAP32[$98>>2]|0;
    $ProcessLeft = $99;
    $100 = $pSC;
    $101 = (($100) + 34492|0);
    $102 = HEAP32[$101>>2]|0;
    $ProcessCenter = $102;
    $103 = $pSC;
    $104 = (($103) + 34496|0);
    $105 = HEAP32[$104>>2]|0;
    $ProcessRight = $105;
    $106 = $pSC;
    $107 = (($106) + 34136|0);
    $108 = (($107) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==(0);
    $111 = $110 ? 96 : 97;
    $Transform = $111;
   } else {
    $112 = $pSC;
    $113 = (($112) + 34476|0);
    $114 = HEAP32[$113>>2]|0;
    $ProcessLeft = $114;
    $115 = $pSC;
    $116 = (($115) + 34480|0);
    $117 = HEAP32[$116>>2]|0;
    $ProcessCenter = $117;
    $118 = $pSC;
    $119 = (($118) + 34484|0);
    $120 = HEAP32[$119>>2]|0;
    $ProcessRight = $120;
    $121 = $pSC;
    $122 = (($121) + 34456|0);
    $123 = HEAP32[$122>>2]|0;
    $Transform = $123;
   }
  }
  $124 = $pSC;
  $125 = (($124) + 34360|0);
  HEAP32[$125>>2] = 0;
  $126 = $pSC;
  _initMRPtr($126);
  $127 = $pSC;
  $128 = (($127) + 34756|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $pSC;
  $131 = (($130) + 34364|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132<<10;
  _memset(($129|0),0,($133|0))|0;
  $k = 1;
  while(1) {
   $134 = $k;
   $135 = $pSC;
   $136 = (($135) + 34136|0);
   $137 = (($136) + 36|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ($134>>>0)<($138>>>0);
   if (!($139)) {
    break;
   }
   $140 = $k;
   $141 = $pSC;
   $142 = (($141) + 34756|0);
   $143 = (($142) + ($140<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $iChromaElements;
   $146 = $145<<2;
   $147 = $pSC;
   $148 = (($147) + 34364|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = Math_imul($146, $149)|0;
   _memset(($144|0),0,($150|0))|0;
   $151 = $k;
   $152 = (($151) + 1)|0;
   $k = $152;
  }
  $153 = $pSC;
  $154 = (($153) + 35032|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)!=(0|0);
  if ($156) {
   $157 = $pSC;
   $158 = (($157) + 35032|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($159) + 34756|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $pSC;
   $163 = (($162) + 35032|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (($164) + 34364|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $166<<10;
   _memset(($161|0),0,($167|0))|0;
  }
  $168 = $pSC;
  $169 = (($168) + 35168|0);
  HEAP32[$169>>2] = 1;
  $170 = $TransformLeftRigh;
  $171 = $pSC;
  $172 = (($171) + 34452|0);
  HEAP32[$172>>2] = $170;
  $173 = $ProcessLeft;
  $174 = $pSC;
  $175 = (FUNCTION_TABLE_ii[$173 & 255]($174)|0);
  $176 = ($175|0)!=(0);
  if ($176) {
   label = 26;
   break;
  }
  $177 = $pSC;
  $178 = (($177) + 35168|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = (($179) + 1)|0;
  HEAP32[$178>>2] = $180;
  $181 = $pSC;
  _advanceMRPtr($181);
  $182 = $Transform;
  $183 = $pSC;
  $184 = (($183) + 34452|0);
  HEAP32[$184>>2] = $182;
  $185 = $pSC;
  $186 = (($185) + 34360|0);
  HEAP32[$186>>2] = 1;
  while(1) {
   $187 = $pSC;
   $188 = (($187) + 34360|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $pSC;
   $191 = (($190) + 34364|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ($189>>>0)<($192>>>0);
   if (!($193)) {
    break;
   }
   $194 = $ProcessCenter;
   $195 = $pSC;
   $196 = (FUNCTION_TABLE_ii[$194 & 255]($195)|0);
   $197 = ($196|0)!=(0);
   if ($197) {
    label = 30;
    break L17;
   }
   $198 = $pSC;
   $199 = (($198) + 35168|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + 1)|0;
   HEAP32[$199>>2] = $201;
   $202 = $pSC;
   _advanceMRPtr($202);
   $203 = $pSC;
   $204 = (($203) + 34360|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = (($205) + 1)|0;
   HEAP32[$204>>2] = $206;
  }
  $207 = $TransformLeftRigh;
  $208 = $pSC;
  $209 = (($208) + 34452|0);
  HEAP32[$209>>2] = $207;
  $210 = $ProcessRight;
  $211 = $pSC;
  $212 = (FUNCTION_TABLE_ii[$210 & 255]($211)|0);
  $213 = ($212|0)!=(0);
  if ($213) {
   label = 34;
   break;
  }
  $214 = $pSC;
  $215 = (($214) + 35168|0);
  HEAP32[$215>>2] = 0;
  $216 = $pSC;
  $217 = (($216) + 34356|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = ($218|0)!=(0);
  if ($219) {
   $220 = $pSC;
   $221 = (($220) + 34248|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($222) + 12|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ($224>>>0)<(2);
   do {
    if ($225) {
     $226 = $pSC;
     $227 = (($226) + 34248|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = HEAP32[$228>>2]|0;
     $230 = ($229|0)!=(0);
     if (!($230)) {
      $231 = $pSC;
      $232 = (($231) + 34356|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = $233<<4;
      $235 = $pSC;
      $236 = (($235) + 34248|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = (($237) + 32|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = ($234>>>0)>($239>>>0);
      if (!($240)) {
       break;
      }
      $241 = $pSC;
      $242 = (($241) + 34356|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = $243<<4;
      $245 = $pSC;
      $246 = (($245) + 34248|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = (($247) + 36|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = (($249) + 16)|0;
      $251 = ($244>>>0)<=($250>>>0);
      if (!($251)) {
       break;
      }
     }
     $252 = $pSC;
     $253 = (($252) + 34448|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = $pSC;
     $256 = (FUNCTION_TABLE_ii[$254 & 255]($255)|0);
     $257 = ($256|0)!=(0);
     if ($257) {
      label = 41;
      break L17;
     }
    }
   } while(0);
   $258 = $pSC;
   $259 = (($258) + 34248|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($260) + 12|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = ($262>>>0)>=(2);
   if ($263) {
    $264 = $pSC;
    (_decodeThumbnail($264)|0);
   }
  }
  $265 = $pSC;
  _advanceOneMBRow($265);
  $266 = $pSC;
  _swapMRPtr($266);
  $267 = $pSC;
  $268 = (($267) + 32952|0);
  $269 = (($268) + 20|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $3;
  HEAP32[$271>>2] = $270;
  $272 = $pSC;
  $273 = (($272) + 34356|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = (($274) + 1)|0;
  HEAP32[$273>>2] = $275;
 }
 if ((label|0) == 26) {
  $0 = -1;
  $276 = $0;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 30) {
  $0 = -1;
  $276 = $0;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 34) {
  $0 = -1;
  $276 = $0;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 41) {
  $0 = -1;
  $276 = $0;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 48) {
  $0 = 0;
  $276 = $0;
  STACKTOP = sp;return ($276|0);
 }
 return 0|0;
}
function _ImageStrDecTerm($ctxSC) {
 $ctxSC = $ctxSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pSC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctxSC;
 $2 = $1;
 $pSC = $2;
 $3 = $pSC;
 $4 = (0|0)==($3|0);
 if ($4) {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $5 = $pSC;
 $6 = HEAP32[$5>>2]|0;
 $7 = (35176)!=($6|0);
 if ($7) {
  $0 = -1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $8 = $pSC;
 (_StrDecTerm($8)|0);
 $9 = $pSC;
 (_StrIODecTerm($9)|0);
 $10 = $pSC;
 $11 = (($10) + 34248|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $pSC;
  $17 = (($16) + 34248|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
 }
 $21 = $pSC;
 $22 = (($21) + 34248|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $pSC;
  $28 = (($27) + 34248|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  _free($31);
 }
 $32 = $pSC;
 _free($32);
 $0 = 0;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _inverseConvert($iF,$pRGB,$pE) {
 $iF = $iF|0;
 $pRGB = $pRGB|0;
 $pE = $pE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $iF;
 $1 = $pRGB;
 $2 = $pE;
 $3 = $0;
 $4 = ($3|0)<=(0);
 if ($4) {
  $5 = $2;
  HEAP8[$5>>0] = 0;
  $6 = $1;
  HEAP8[$6>>0] = 0;
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $7 >> 7;
 $9 = ($8|0)>(1);
 if ($9) {
  $10 = $0;
  $11 = $10 >> 7;
  $12 = $11&255;
  $13 = $2;
  HEAP8[$13>>0] = $12;
  $14 = $0;
  $15 = $14 & 127;
  $16 = $15 | 128;
  $17 = $16&255;
  $18 = $1;
  HEAP8[$18>>0] = $17;
 } else {
  $19 = $2;
  HEAP8[$19>>0] = 1;
  $20 = $0;
  $21 = $20&255;
  $22 = $1;
  HEAP8[$22>>0] = $21;
 }
 STACKTOP = sp;return;
}
function _strIDCT4x4Stage1($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = $0;
 $5 = (($4) + 8|0);
 $6 = $0;
 $7 = (($6) + 12|0);
 _strDCT2x2up($1,$3,$5,$7);
 $8 = $0;
 $9 = (($8) + 20|0);
 $10 = $0;
 $11 = (($10) + 16|0);
 $12 = $0;
 $13 = (($12) + 28|0);
 $14 = $0;
 $15 = (($14) + 24|0);
 _invOdd($9,$11,$13,$15);
 $16 = $0;
 $17 = (($16) + 40|0);
 $18 = $0;
 $19 = (($18) + 32|0);
 $20 = $0;
 $21 = (($20) + 44|0);
 $22 = $0;
 $23 = (($22) + 36|0);
 _invOdd($17,$19,$21,$23);
 $24 = $0;
 $25 = (($24) + 60|0);
 $26 = $0;
 $27 = (($26) + 56|0);
 $28 = $0;
 $29 = (($28) + 52|0);
 $30 = $0;
 $31 = (($30) + 48|0);
 _invOddOdd($25,$27,$29,$31);
 $32 = $0;
 _FOURBUTTERFLY_HARDCODED1($32);
 STACKTOP = sp;return;
}
function _invOdd($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $d;
 $13 = $b;
 $14 = (($13) + ($12))|0;
 $b = $14;
 $15 = $c;
 $16 = $a;
 $17 = (($16) - ($15))|0;
 $a = $17;
 $18 = $b;
 $19 = $18 >> 1;
 $20 = $d;
 $21 = (($20) - ($19))|0;
 $d = $21;
 $22 = $a;
 $23 = (($22) + 1)|0;
 $24 = $23 >> 1;
 $25 = $c;
 $26 = (($25) + ($24))|0;
 $c = $26;
 $27 = $b;
 $28 = ($27*3)|0;
 $29 = (($28) + 4)|0;
 $30 = $29 >> 3;
 $31 = $a;
 $32 = (($31) - ($30))|0;
 $a = $32;
 $33 = $a;
 $34 = ($33*3)|0;
 $35 = (($34) + 4)|0;
 $36 = $35 >> 3;
 $37 = $b;
 $38 = (($37) + ($36))|0;
 $b = $38;
 $39 = $d;
 $40 = ($39*3)|0;
 $41 = (($40) + 4)|0;
 $42 = $41 >> 3;
 $43 = $c;
 $44 = (($43) - ($42))|0;
 $c = $44;
 $45 = $c;
 $46 = ($45*3)|0;
 $47 = (($46) + 4)|0;
 $48 = $47 >> 3;
 $49 = $d;
 $50 = (($49) + ($48))|0;
 $d = $50;
 $51 = $b;
 $52 = (($51) + 1)|0;
 $53 = $52 >> 1;
 $54 = $c;
 $55 = (($54) - ($53))|0;
 $c = $55;
 $56 = $a;
 $57 = (($56) + 1)|0;
 $58 = $57 >> 1;
 $59 = $d;
 $60 = (($58) - ($59))|0;
 $d = $60;
 $61 = $c;
 $62 = $b;
 $63 = (($62) + ($61))|0;
 $b = $63;
 $64 = $d;
 $65 = $a;
 $66 = (($65) - ($64))|0;
 $a = $66;
 $67 = $a;
 $68 = $0;
 HEAP32[$68>>2] = $67;
 $69 = $b;
 $70 = $1;
 HEAP32[$70>>2] = $69;
 $71 = $c;
 $72 = $2;
 HEAP32[$72>>2] = $71;
 $73 = $d;
 $74 = $3;
 HEAP32[$74>>2] = $73;
 STACKTOP = sp;return;
}
function _invOddOdd($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, $t1 = 0, $t2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $a;
 $13 = $d;
 $14 = (($13) + ($12))|0;
 $d = $14;
 $15 = $b;
 $16 = $c;
 $17 = (($16) - ($15))|0;
 $c = $17;
 $18 = $d;
 $19 = $18 >> 1;
 $t1 = $19;
 $20 = $a;
 $21 = (($20) - ($19))|0;
 $a = $21;
 $22 = $c;
 $23 = $22 >> 1;
 $t2 = $23;
 $24 = $b;
 $25 = (($24) + ($23))|0;
 $b = $25;
 $26 = $b;
 $27 = ($26*3)|0;
 $28 = (($27) + 3)|0;
 $29 = $28 >> 3;
 $30 = $a;
 $31 = (($30) - ($29))|0;
 $a = $31;
 $32 = $a;
 $33 = ($32*3)|0;
 $34 = (($33) + 3)|0;
 $35 = $34 >> 2;
 $36 = $b;
 $37 = (($36) + ($35))|0;
 $b = $37;
 $38 = $b;
 $39 = ($38*3)|0;
 $40 = (($39) + 4)|0;
 $41 = $40 >> 3;
 $42 = $a;
 $43 = (($42) - ($41))|0;
 $a = $43;
 $44 = $t2;
 $45 = $b;
 $46 = (($45) - ($44))|0;
 $b = $46;
 $47 = $t1;
 $48 = $a;
 $49 = (($48) + ($47))|0;
 $a = $49;
 $50 = $b;
 $51 = $c;
 $52 = (($51) + ($50))|0;
 $c = $52;
 $53 = $a;
 $54 = $d;
 $55 = (($54) - ($53))|0;
 $d = $55;
 $56 = $a;
 $57 = $0;
 HEAP32[$57>>2] = $56;
 $58 = $b;
 $59 = (0 - ($58))|0;
 $60 = $1;
 HEAP32[$60>>2] = $59;
 $61 = $c;
 $62 = (0 - ($61))|0;
 $63 = $2;
 HEAP32[$63>>2] = $62;
 $64 = $d;
 $65 = $3;
 HEAP32[$65>>2] = $64;
 STACKTOP = sp;return;
}
function _strIDCT4x4Stage2($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (($1) + 128|0);
 $3 = $0;
 $4 = (($3) + 192|0);
 $5 = $0;
 $6 = (($5) + 384|0);
 $7 = $0;
 $8 = (($7) + 448|0);
 _invOdd($2,$4,$6,$8);
 $9 = $0;
 $10 = (($9) + 512|0);
 $11 = $0;
 $12 = (($11) + 768|0);
 $13 = $0;
 $14 = (($13) + 576|0);
 $15 = $0;
 $16 = (($15) + 832|0);
 _invOdd($10,$12,$14,$16);
 $17 = $0;
 $18 = (($17) + 640|0);
 $19 = $0;
 $20 = (($19) + 896|0);
 $21 = $0;
 $22 = (($21) + 704|0);
 $23 = $0;
 $24 = (($23) + 960|0);
 _invOddOdd($18,$20,$22,$24);
 $25 = $0;
 $26 = $0;
 $27 = (($26) + 256|0);
 $28 = $0;
 $29 = (($28) + 64|0);
 $30 = $0;
 $31 = (($30) + 320|0);
 _strDCT2x2up($25,$27,$29,$31);
 $32 = $0;
 $33 = $0;
 $34 = (($33) + 768|0);
 $35 = $0;
 $36 = (($35) + 192|0);
 $37 = $0;
 $38 = (($37) + 960|0);
 _strDCT2x2dn($32,$34,$36,$38);
 $39 = $0;
 $40 = (($39) + 256|0);
 $41 = $0;
 $42 = (($41) + 512|0);
 $43 = $0;
 $44 = (($43) + 448|0);
 $45 = $0;
 $46 = (($45) + 704|0);
 _strDCT2x2dn($40,$42,$44,$46);
 $47 = $0;
 $48 = (($47) + 64|0);
 $49 = $0;
 $50 = (($49) + 832|0);
 $51 = $0;
 $52 = (($51) + 128|0);
 $53 = $0;
 $54 = (($53) + 896|0);
 _strDCT2x2dn($48,$50,$52,$54);
 $55 = $0;
 $56 = (($55) + 320|0);
 $57 = $0;
 $58 = (($57) + 576|0);
 $59 = $0;
 $60 = (($59) + 384|0);
 $61 = $0;
 $62 = (($61) + 640|0);
 _strDCT2x2dn($56,$58,$60,$62);
 STACKTOP = sp;return;
}
function _strNormalizeDec($p,$bChroma) {
 $p = $p|0;
 $bChroma = $bChroma|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $bChroma;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(256);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $i;
  $11 = $0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($9))|0;
  HEAP32[$12>>2] = $14;
  $15 = $i;
  $16 = (($15) + 16)|0;
  $i = $16;
 }
 STACKTOP = sp;return;
}
function _strDCT2x2dnDec($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $C = 0, $a = 0, $b = 0, $c = 0, $d = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $C = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $d;
 $13 = $a;
 $14 = (($13) + ($12))|0;
 $a = $14;
 $15 = $C;
 $16 = $b;
 $17 = (($16) - ($15))|0;
 $b = $17;
 $18 = $a;
 $19 = $b;
 $20 = (($18) - ($19))|0;
 $21 = $20 >> 1;
 $t = $21;
 $22 = $t;
 $23 = $d;
 $24 = (($22) - ($23))|0;
 $c = $24;
 $25 = $t;
 $26 = $C;
 $27 = (($25) - ($26))|0;
 $d = $27;
 $28 = $d;
 $29 = $a;
 $30 = (($29) - ($28))|0;
 $a = $30;
 $31 = $c;
 $32 = $b;
 $33 = (($32) + ($31))|0;
 $b = $33;
 $34 = $a;
 $35 = $34<<1;
 $36 = $0;
 HEAP32[$36>>2] = $35;
 $37 = $b;
 $38 = $37<<1;
 $39 = $1;
 HEAP32[$39>>2] = $38;
 $40 = $c;
 $41 = $40<<1;
 $42 = $2;
 HEAP32[$42>>2] = $41;
 $43 = $d;
 $44 = $43<<1;
 $45 = $3;
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return;
}
function _strPost2($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4)|0;
 $5 = $4 >> 3;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 HEAP32[$6>>2] = $8;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 2)|0;
 $12 = $11 >> 2;
 $13 = $0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($12))|0;
 HEAP32[$13>>2] = $15;
 $16 = $0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 4)|0;
 $19 = $18 >> 3;
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19))|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function _strPost2_alternate($pa,$pb) {
 $pa = $pa|0;
 $pb = $pb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $a = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $b = $5;
 $6 = $a;
 $7 = (($6) + 2)|0;
 $8 = $7 >> 2;
 $9 = $b;
 $10 = (($9) + ($8))|0;
 $b = $10;
 $11 = $b;
 $12 = (($11) + 1)|0;
 $13 = $12 >> 1;
 $14 = $a;
 $15 = (($14) + ($13))|0;
 $a = $15;
 $16 = $b;
 $17 = $16 >> 5;
 $18 = $a;
 $19 = (($18) + ($17))|0;
 $a = $19;
 $20 = $b;
 $21 = $20 >> 9;
 $22 = $a;
 $23 = (($22) + ($21))|0;
 $a = $23;
 $24 = $b;
 $25 = $24 >> 13;
 $26 = $a;
 $27 = (($26) + ($25))|0;
 $a = $27;
 $28 = $a;
 $29 = (($28) + 2)|0;
 $30 = $29 >> 2;
 $31 = $b;
 $32 = (($31) + ($30))|0;
 $b = $32;
 $33 = $a;
 $34 = $0;
 HEAP32[$34>>2] = $33;
 $35 = $b;
 $36 = $1;
 HEAP32[$36>>2] = $35;
 STACKTOP = sp;return;
}
function _strPost2x2($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $d;
 $13 = $a;
 $14 = (($13) + ($12))|0;
 $a = $14;
 $15 = $c;
 $16 = $b;
 $17 = (($16) + ($15))|0;
 $b = $17;
 $18 = $a;
 $19 = (($18) + 1)|0;
 $20 = $19 >> 1;
 $21 = $d;
 $22 = (($21) - ($20))|0;
 $d = $22;
 $23 = $b;
 $24 = (($23) + 1)|0;
 $25 = $24 >> 1;
 $26 = $c;
 $27 = (($26) - ($25))|0;
 $c = $27;
 $28 = $a;
 $29 = (($28) + 2)|0;
 $30 = $29 >> 2;
 $31 = $b;
 $32 = (($31) + ($30))|0;
 $b = $32;
 $33 = $b;
 $34 = (($33) + 1)|0;
 $35 = $34 >> 1;
 $36 = $a;
 $37 = (($36) + ($35))|0;
 $a = $37;
 $38 = $a;
 $39 = (($38) + 2)|0;
 $40 = $39 >> 2;
 $41 = $b;
 $42 = (($41) + ($40))|0;
 $b = $42;
 $43 = $a;
 $44 = (($43) + 1)|0;
 $45 = $44 >> 1;
 $46 = $d;
 $47 = (($46) + ($45))|0;
 $d = $47;
 $48 = $b;
 $49 = (($48) + 1)|0;
 $50 = $49 >> 1;
 $51 = $c;
 $52 = (($51) + ($50))|0;
 $c = $52;
 $53 = $d;
 $54 = $a;
 $55 = (($54) - ($53))|0;
 $a = $55;
 $56 = $c;
 $57 = $b;
 $58 = (($57) - ($56))|0;
 $b = $58;
 $59 = $a;
 $60 = $0;
 HEAP32[$60>>2] = $59;
 $61 = $b;
 $62 = $1;
 HEAP32[$62>>2] = $61;
 $63 = $c;
 $64 = $2;
 HEAP32[$64>>2] = $63;
 $65 = $d;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 STACKTOP = sp;return;
}
function _strPost2x2_alternate($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $a = 0;
 var $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $d;
 $13 = $a;
 $14 = (($13) + ($12))|0;
 $a = $14;
 $15 = $c;
 $16 = $b;
 $17 = (($16) + ($15))|0;
 $b = $17;
 $18 = $a;
 $19 = (($18) + 1)|0;
 $20 = $19 >> 1;
 $21 = $d;
 $22 = (($21) - ($20))|0;
 $d = $22;
 $23 = $b;
 $24 = (($23) + 1)|0;
 $25 = $24 >> 1;
 $26 = $c;
 $27 = (($26) - ($25))|0;
 $c = $27;
 $28 = $a;
 $29 = (($28) + 2)|0;
 $30 = $29 >> 2;
 $31 = $b;
 $32 = (($31) + ($30))|0;
 $b = $32;
 $33 = $b;
 $34 = (($33) + 1)|0;
 $35 = $34 >> 1;
 $36 = $a;
 $37 = (($36) + ($35))|0;
 $a = $37;
 $38 = $b;
 $39 = $38 >> 5;
 $40 = $a;
 $41 = (($40) + ($39))|0;
 $a = $41;
 $42 = $b;
 $43 = $42 >> 9;
 $44 = $a;
 $45 = (($44) + ($43))|0;
 $a = $45;
 $46 = $b;
 $47 = $46 >> 13;
 $48 = $a;
 $49 = (($48) + ($47))|0;
 $a = $49;
 $50 = $a;
 $51 = (($50) + 2)|0;
 $52 = $51 >> 2;
 $53 = $b;
 $54 = (($53) + ($52))|0;
 $b = $54;
 $55 = $a;
 $56 = (($55) + 1)|0;
 $57 = $56 >> 1;
 $58 = $d;
 $59 = (($58) + ($57))|0;
 $d = $59;
 $60 = $b;
 $61 = (($60) + 1)|0;
 $62 = $61 >> 1;
 $63 = $c;
 $64 = (($63) + ($62))|0;
 $c = $64;
 $65 = $d;
 $66 = $a;
 $67 = (($66) - ($65))|0;
 $a = $67;
 $68 = $c;
 $69 = $b;
 $70 = (($69) - ($68))|0;
 $b = $70;
 $71 = $a;
 $72 = $0;
 HEAP32[$72>>2] = $71;
 $73 = $b;
 $74 = $1;
 HEAP32[$74>>2] = $73;
 $75 = $c;
 $76 = $2;
 HEAP32[$76>>2] = $75;
 $77 = $d;
 $78 = $3;
 HEAP32[$78>>2] = $77;
 STACKTOP = sp;return;
}
function _strPost4($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $a = 0, $b = 0, $c = 0, $d = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $d;
 $13 = $a;
 $14 = (($13) + ($12))|0;
 $a = $14;
 $15 = $c;
 $16 = $b;
 $17 = (($16) + ($15))|0;
 $b = $17;
 $18 = $a;
 $19 = (($18) + 1)|0;
 $20 = $19 >> 1;
 $21 = $d;
 $22 = (($21) - ($20))|0;
 $d = $22;
 $23 = $b;
 $24 = (($23) + 1)|0;
 $25 = $24 >> 1;
 $26 = $c;
 $27 = (($26) - ($25))|0;
 $c = $27;
 $28 = $d;
 $29 = (($28) + 1)|0;
 $30 = $29 >> 1;
 $31 = $c;
 $32 = (($31) - ($30))|0;
 $c = $32;
 $33 = $c;
 $34 = (($33) + 1)|0;
 $35 = $34 >> 1;
 $36 = $d;
 $37 = (($36) + ($35))|0;
 $d = $37;
 $38 = $a;
 $39 = (($38) + 1)|0;
 $40 = $39 >> 1;
 $41 = $d;
 $42 = (($41) + ($40))|0;
 $d = $42;
 $43 = $b;
 $44 = (($43) + 1)|0;
 $45 = $44 >> 1;
 $46 = $c;
 $47 = (($46) + ($45))|0;
 $c = $47;
 $48 = $d;
 $49 = $d;
 $50 = ($49*3)|0;
 $51 = (($50) + 16)|0;
 $52 = $51 >> 5;
 $53 = (($48) - ($52))|0;
 $54 = $a;
 $55 = (($54) - ($53))|0;
 $a = $55;
 $56 = $c;
 $57 = $c;
 $58 = ($57*3)|0;
 $59 = (($58) + 16)|0;
 $60 = $59 >> 5;
 $61 = (($56) - ($60))|0;
 $62 = $b;
 $63 = (($62) - ($61))|0;
 $b = $63;
 $64 = $a;
 $65 = ($64*3)|0;
 $66 = (($65) + 8)|0;
 $67 = $66 >> 4;
 $68 = $d;
 $69 = (($68) + ($67))|0;
 $d = $69;
 $70 = $b;
 $71 = ($70*3)|0;
 $72 = (($71) + 8)|0;
 $73 = $72 >> 4;
 $74 = $c;
 $75 = (($74) + ($73))|0;
 $c = $75;
 $76 = $d;
 $77 = ($76*3)|0;
 $78 = (($77) + 16)|0;
 $79 = $78 >> 5;
 $80 = $a;
 $81 = (($80) + ($79))|0;
 $a = $81;
 $82 = $c;
 $83 = ($82*3)|0;
 $84 = (($83) + 16)|0;
 $85 = $84 >> 5;
 $86 = $b;
 $87 = (($86) + ($85))|0;
 $b = $87;
 $88 = $a;
 $89 = $0;
 HEAP32[$89>>2] = $88;
 $90 = $b;
 $91 = $1;
 HEAP32[$91>>2] = $90;
 $92 = $c;
 $93 = $2;
 HEAP32[$93>>2] = $92;
 $94 = $d;
 $95 = $3;
 HEAP32[$95>>2] = $94;
 STACKTOP = sp;return;
}
function _strPost4_alternate($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 12|0;
 $b = sp + 16|0;
 $c = sp + 20|0;
 $d = sp + 24|0;
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$a>>2] = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$b>>2] = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$c>>2] = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$d>>2] = $11;
 $12 = HEAP32[$d>>2]|0;
 $13 = HEAP32[$a>>2]|0;
 $14 = (($13) + ($12))|0;
 HEAP32[$a>>2] = $14;
 $15 = HEAP32[$c>>2]|0;
 $16 = HEAP32[$b>>2]|0;
 $17 = (($16) + ($15))|0;
 HEAP32[$b>>2] = $17;
 $18 = HEAP32[$a>>2]|0;
 $19 = (($18) + 1)|0;
 $20 = $19 >> 1;
 $21 = HEAP32[$d>>2]|0;
 $22 = (($21) - ($20))|0;
 HEAP32[$d>>2] = $22;
 $23 = HEAP32[$b>>2]|0;
 $24 = (($23) + 1)|0;
 $25 = $24 >> 1;
 $26 = HEAP32[$c>>2]|0;
 $27 = (($26) - ($25))|0;
 HEAP32[$c>>2] = $27;
 _strHSTdec1_edge($a,$d);
 _strHSTdec1_edge($b,$c);
 $28 = HEAP32[$d>>2]|0;
 $29 = (($28) + 1)|0;
 $30 = $29 >> 1;
 $31 = HEAP32[$c>>2]|0;
 $32 = (($31) - ($30))|0;
 HEAP32[$c>>2] = $32;
 $33 = HEAP32[$c>>2]|0;
 $34 = (($33) + 1)|0;
 $35 = $34 >> 1;
 $36 = HEAP32[$d>>2]|0;
 $37 = (($36) + ($35))|0;
 HEAP32[$d>>2] = $37;
 $38 = HEAP32[$a>>2]|0;
 $39 = (($38) + 1)|0;
 $40 = $39 >> 1;
 $41 = HEAP32[$d>>2]|0;
 $42 = (($41) + ($40))|0;
 HEAP32[$d>>2] = $42;
 $43 = HEAP32[$b>>2]|0;
 $44 = (($43) + 1)|0;
 $45 = $44 >> 1;
 $46 = HEAP32[$c>>2]|0;
 $47 = (($46) + ($45))|0;
 HEAP32[$c>>2] = $47;
 $48 = HEAP32[$d>>2]|0;
 $49 = HEAP32[$a>>2]|0;
 $50 = (($49) - ($48))|0;
 HEAP32[$a>>2] = $50;
 $51 = HEAP32[$c>>2]|0;
 $52 = HEAP32[$b>>2]|0;
 $53 = (($52) - ($51))|0;
 HEAP32[$b>>2] = $53;
 $54 = HEAP32[$a>>2]|0;
 $55 = $0;
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$b>>2]|0;
 $57 = $1;
 HEAP32[$57>>2] = $56;
 $58 = HEAP32[$c>>2]|0;
 $59 = $2;
 HEAP32[$59>>2] = $58;
 $60 = HEAP32[$d>>2]|0;
 $61 = $3;
 HEAP32[$61>>2] = $60;
 STACKTOP = sp;return;
}
function _strHSTdec1_edge($pa,$pd) {
 $pa = $pa|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pd;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $a = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $d = $5;
 $6 = $d;
 $7 = $a;
 $8 = (($7) + ($6))|0;
 $a = $8;
 $9 = $a;
 $10 = $9 >> 1;
 $11 = $d;
 $12 = (($10) - ($11))|0;
 $d = $12;
 $13 = $d;
 $14 = ($13*3)|0;
 $15 = (($14) + 0)|0;
 $16 = $15 >> 3;
 $17 = $a;
 $18 = (($17) + ($16))|0;
 $a = $18;
 $19 = $a;
 $20 = ($19*3)|0;
 $21 = (($20) + 0)|0;
 $22 = $21 >> 4;
 $23 = $d;
 $24 = (($23) + ($22))|0;
 $d = $24;
 $25 = $a;
 $26 = $25 >> 7;
 $27 = $d;
 $28 = (($27) + ($26))|0;
 $d = $28;
 $29 = $a;
 $30 = $29 >> 10;
 $31 = $d;
 $32 = (($31) - ($30))|0;
 $d = $32;
 $33 = $d;
 $34 = ($33*3)|0;
 $35 = (($34) + 4)|0;
 $36 = $35 >> 3;
 $37 = $a;
 $38 = (($37) + ($36))|0;
 $a = $38;
 $39 = $a;
 $40 = $39 >> 1;
 $41 = $d;
 $42 = (($41) - ($40))|0;
 $d = $42;
 $43 = $d;
 $44 = $a;
 $45 = (($44) + ($43))|0;
 $a = $45;
 $46 = $a;
 $47 = $0;
 HEAP32[$47>>2] = $46;
 $48 = $d;
 $49 = (0 - ($48))|0;
 $50 = $1;
 HEAP32[$50>>2] = $49;
 STACKTOP = sp;return;
}
function _DCCompensate($a,$b,$c,$d,$iDC) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $d = $d|0;
 $iDC = $iDC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $c;
 $3 = $d;
 $4 = $iDC;
 $5 = $4;
 $6 = $5 >> 1;
 $4 = $6;
 $7 = $4;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($7))|0;
 HEAP32[$8>>2] = $10;
 $11 = $4;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) - ($11))|0;
 HEAP32[$12>>2] = $14;
 $15 = $4;
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($15))|0;
 HEAP32[$16>>2] = $18;
 $19 = $4;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19))|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function _ClipDCL($iDCL,$iAltDCL) {
 $iDCL = $iDCL|0;
 $iAltDCL = $iAltDCL|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $iClipDCL = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $iDCL;
 $1 = $iAltDCL;
 $iClipDCL = 0;
 $2 = $0;
 $3 = ($2|0)>(0);
 if ($3) {
  $4 = $1;
  $5 = ($4|0)>(0);
  if ($5) {
   $6 = $0;
   $7 = $1;
   $8 = ($6|0)<($7|0);
   if ($8) {
    $9 = $0;
    $11 = $9;
   } else {
    $10 = $1;
    $11 = $10;
   }
   $iClipDCL = $11;
  } else {
   $iClipDCL = 0;
  }
  $22 = $iClipDCL;
  STACKTOP = sp;return ($22|0);
 }
 $12 = $0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $1;
  $15 = ($14|0)<(0);
  if ($15) {
   $16 = $0;
   $17 = $1;
   $18 = ($16|0)>($17|0);
   if ($18) {
    $19 = $0;
    $21 = $19;
   } else {
    $20 = $1;
    $21 = $20;
   }
   $iClipDCL = $21;
  } else {
   $iClipDCL = 0;
  }
 }
 $22 = $iClipDCL;
 STACKTOP = sp;return ($22|0);
}
function _strPost4x4Stage1Split($p0,$p1,$iOffset,$iHPQP,$bHPAbsent) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 $iOffset = $iOffset|0;
 $iHPQP = $iHPQP|0;
 $bHPAbsent = $bHPAbsent|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iDCL0 = 0, $iDCL1 = 0, $iDCL2 = 0, $iDCL3 = 0;
 var $iDCLAlt0 = 0, $iDCLAlt1 = 0, $iDCLAlt2 = 0, $iDCLAlt3 = 0, $iTmp0 = 0, $iTmp1 = 0, $iTmp2 = 0, $iTmp3 = 0, $p2 = 0, $p3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p0;
 $1 = $p1;
 $2 = $iOffset;
 $3 = $iHPQP;
 $4 = $bHPAbsent;
 $5 = $0;
 $6 = (($5) + 288|0);
 $7 = $2;
 $8 = (0 - ($7))|0;
 $9 = (($6) + ($8<<2)|0);
 $p2 = $9;
 $10 = $1;
 $11 = (($10) + 256|0);
 $12 = $2;
 $13 = (0 - ($12))|0;
 $14 = (($11) + ($13<<2)|0);
 $p3 = $14;
 $15 = $0;
 $16 = (($15) + 48|0);
 $0 = $16;
 $17 = $1;
 $18 = (($17) + 16|0);
 $1 = $18;
 $19 = $0;
 $20 = $p2;
 $21 = $1;
 $22 = $p3;
 _strDCT2x2dn($19,$20,$21,$22);
 $23 = $0;
 $24 = (($23) + 4|0);
 $25 = $p2;
 $26 = (($25) + 4|0);
 $27 = $1;
 $28 = (($27) + 4|0);
 $29 = $p3;
 $30 = (($29) + 4|0);
 _strDCT2x2dn($24,$26,$28,$30);
 $31 = $0;
 $32 = (($31) + 8|0);
 $33 = $p2;
 $34 = (($33) + 8|0);
 $35 = $1;
 $36 = (($35) + 8|0);
 $37 = $p3;
 $38 = (($37) + 8|0);
 _strDCT2x2dn($32,$34,$36,$38);
 $39 = $0;
 $40 = (($39) + 12|0);
 $41 = $p2;
 $42 = (($41) + 12|0);
 $43 = $1;
 $44 = (($43) + 12|0);
 $45 = $p3;
 $46 = (($45) + 12|0);
 _strDCT2x2dn($40,$42,$44,$46);
 $47 = $p3;
 $48 = $p3;
 $49 = (($48) + 4|0);
 $50 = $p3;
 $51 = (($50) + 8|0);
 $52 = $p3;
 $53 = (($52) + 12|0);
 _invOddOddPost($47,$49,$51,$53);
 $54 = $1;
 $55 = (($54) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + 1)|0;
 $58 = $57 >> 1;
 $59 = $1;
 $60 = (($59) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) - ($58))|0;
 HEAP32[$60>>2] = $62;
 $63 = $1;
 $64 = (($63) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + 1)|0;
 $67 = $66 >> 1;
 $68 = $1;
 $69 = (($68) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + ($67))|0;
 HEAP32[$69>>2] = $71;
 $72 = $1;
 $73 = (($72) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + 1)|0;
 $76 = $75 >> 1;
 $77 = $1;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) - ($76))|0;
 HEAP32[$77>>2] = $79;
 $80 = $1;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($81) + 1)|0;
 $83 = $82 >> 1;
 $84 = $1;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($83))|0;
 HEAP32[$85>>2] = $87;
 $88 = $p2;
 $89 = (($88) + 12|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + 1)|0;
 $92 = $91 >> 1;
 $93 = $p2;
 $94 = (($93) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) - ($92))|0;
 HEAP32[$94>>2] = $96;
 $97 = $p2;
 $98 = (($97) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + 1)|0;
 $101 = $100 >> 1;
 $102 = $p2;
 $103 = (($102) + 12|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + ($101))|0;
 HEAP32[$103>>2] = $105;
 $106 = $p2;
 $107 = (($106) + 8|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + 1)|0;
 $110 = $109 >> 1;
 $111 = $p2;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($112) - ($110))|0;
 HEAP32[$111>>2] = $113;
 $114 = $p2;
 $115 = HEAP32[$114>>2]|0;
 $116 = (($115) + 1)|0;
 $117 = $116 >> 1;
 $118 = $p2;
 $119 = (($118) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + ($117))|0;
 HEAP32[$119>>2] = $121;
 $122 = $0;
 $123 = $p3;
 _strHSTdec1($122,$123);
 $124 = $0;
 $125 = (($124) + 4|0);
 $126 = $p3;
 $127 = (($126) + 4|0);
 _strHSTdec1($125,$127);
 $128 = $0;
 $129 = (($128) + 8|0);
 $130 = $p3;
 $131 = (($130) + 8|0);
 _strHSTdec1($129,$131);
 $132 = $0;
 $133 = (($132) + 12|0);
 $134 = $p3;
 $135 = (($134) + 12|0);
 _strHSTdec1($133,$135);
 $136 = $0;
 $137 = $p2;
 $138 = $1;
 $139 = $p3;
 _strHSTdec($136,$137,$138,$139);
 $140 = $0;
 $141 = (($140) + 4|0);
 $142 = $p2;
 $143 = (($142) + 4|0);
 $144 = $1;
 $145 = (($144) + 4|0);
 $146 = $p3;
 $147 = (($146) + 4|0);
 _strHSTdec($141,$143,$145,$147);
 $148 = $0;
 $149 = (($148) + 8|0);
 $150 = $p2;
 $151 = (($150) + 8|0);
 $152 = $1;
 $153 = (($152) + 8|0);
 $154 = $p3;
 $155 = (($154) + 8|0);
 _strHSTdec($149,$151,$153,$155);
 $156 = $0;
 $157 = (($156) + 12|0);
 $158 = $p2;
 $159 = (($158) + 12|0);
 $160 = $1;
 $161 = (($160) + 12|0);
 $162 = $p3;
 $163 = (($162) + 12|0);
 _strHSTdec($157,$159,$161,$163);
 $164 = $0;
 $165 = HEAP32[$164>>2]|0;
 $166 = $1;
 $167 = HEAP32[$166>>2]|0;
 $168 = (($165) + ($167))|0;
 $169 = $p2;
 $170 = HEAP32[$169>>2]|0;
 $171 = (($168) + ($170))|0;
 $172 = $p3;
 $173 = HEAP32[$172>>2]|0;
 $174 = (($171) + ($173))|0;
 $175 = $174 >> 1;
 $iTmp0 = $175;
 $176 = $0;
 $177 = (($176) + 4|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $1;
 $180 = (($179) + 4|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = (($178) + ($181))|0;
 $183 = $p2;
 $184 = (($183) + 4|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = (($182) + ($185))|0;
 $187 = $p3;
 $188 = (($187) + 4|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = (($186) + ($189))|0;
 $191 = $190 >> 1;
 $iTmp1 = $191;
 $192 = $0;
 $193 = (($192) + 8|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $1;
 $196 = (($195) + 8|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = (($194) + ($197))|0;
 $199 = $p2;
 $200 = (($199) + 8|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = (($198) + ($201))|0;
 $203 = $p3;
 $204 = (($203) + 8|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = (($202) + ($205))|0;
 $207 = $206 >> 1;
 $iTmp2 = $207;
 $208 = $0;
 $209 = (($208) + 12|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = $1;
 $212 = (($211) + 12|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = (($210) + ($213))|0;
 $215 = $p2;
 $216 = (($215) + 12|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = (($214) + ($217))|0;
 $219 = $p3;
 $220 = (($219) + 12|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($218) + ($221))|0;
 $223 = $222 >> 1;
 $iTmp3 = $223;
 $224 = $iTmp0;
 $225 = ($224*595)|0;
 $226 = (($225) + 65536)|0;
 $227 = $226 >> 17;
 $iDCL0 = $227;
 $228 = $iTmp1;
 $229 = ($228*595)|0;
 $230 = (($229) + 65536)|0;
 $231 = $230 >> 17;
 $iDCL1 = $231;
 $232 = $iTmp2;
 $233 = ($232*595)|0;
 $234 = (($233) + 65536)|0;
 $235 = $234 >> 17;
 $iDCL2 = $235;
 $236 = $iTmp3;
 $237 = ($236*595)|0;
 $238 = (($237) + 65536)|0;
 $239 = $238 >> 17;
 $iDCL3 = $239;
 $240 = $iDCL0;
 $241 = (Math_abs(($240|0))|0);
 $242 = $3;
 $243 = ($241|0)<($242|0);
 if ($243) {
  $244 = $3;
  $245 = ($244|0)>(20);
  if ($245) {
   label = 4;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $246 = $4;
  $247 = ($246|0)!=(0);
  if ($247) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $248 = $0;
  $249 = HEAP32[$248>>2]|0;
  $250 = $1;
  $251 = HEAP32[$250>>2]|0;
  $252 = (($249) - ($251))|0;
  $253 = $p2;
  $254 = HEAP32[$253>>2]|0;
  $255 = (($252) - ($254))|0;
  $256 = $p3;
  $257 = HEAP32[$256>>2]|0;
  $258 = (($255) + ($257))|0;
  $259 = $258 >> 1;
  $iDCLAlt0 = $259;
  $260 = $iDCL0;
  $261 = $iDCLAlt0;
  $262 = (_ClipDCL($260,$261)|0);
  $iDCL0 = $262;
  $263 = $0;
  $264 = $p2;
  $265 = $1;
  $266 = $p3;
  $267 = $iDCL0;
  _DCCompensate($263,$264,$265,$266,$267);
 }
 $268 = $iDCL1;
 $269 = (Math_abs(($268|0))|0);
 $270 = $3;
 $271 = ($269|0)<($270|0);
 if ($271) {
  $272 = $3;
  $273 = ($272|0)>(20);
  if ($273) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $274 = $4;
  $275 = ($274|0)!=(0);
  if ($275) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $276 = $0;
  $277 = (($276) + 4|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = $1;
  $280 = (($279) + 4|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = (($278) - ($281))|0;
  $283 = $p2;
  $284 = (($283) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = (($282) - ($285))|0;
  $287 = $p3;
  $288 = (($287) + 4|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = (($286) + ($289))|0;
  $291 = $290 >> 1;
  $iDCLAlt1 = $291;
  $292 = $iDCL1;
  $293 = $iDCLAlt1;
  $294 = (_ClipDCL($292,$293)|0);
  $iDCL1 = $294;
  $295 = $0;
  $296 = (($295) + 4|0);
  $297 = $p2;
  $298 = (($297) + 4|0);
  $299 = $1;
  $300 = (($299) + 4|0);
  $301 = $p3;
  $302 = (($301) + 4|0);
  $303 = $iDCL1;
  _DCCompensate($296,$298,$300,$302,$303);
 }
 $304 = $iDCL2;
 $305 = (Math_abs(($304|0))|0);
 $306 = $3;
 $307 = ($305|0)<($306|0);
 if ($307) {
  $308 = $3;
  $309 = ($308|0)>(20);
  if ($309) {
   label = 12;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $310 = $4;
  $311 = ($310|0)!=(0);
  if ($311) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $312 = $0;
  $313 = (($312) + 8|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = $1;
  $316 = (($315) + 8|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = (($314) - ($317))|0;
  $319 = $p2;
  $320 = (($319) + 8|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = (($318) - ($321))|0;
  $323 = $p3;
  $324 = (($323) + 8|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = (($322) + ($325))|0;
  $327 = $326 >> 1;
  $iDCLAlt2 = $327;
  $328 = $iDCL2;
  $329 = $iDCLAlt2;
  $330 = (_ClipDCL($328,$329)|0);
  $iDCL2 = $330;
  $331 = $0;
  $332 = (($331) + 8|0);
  $333 = $p2;
  $334 = (($333) + 8|0);
  $335 = $1;
  $336 = (($335) + 8|0);
  $337 = $p3;
  $338 = (($337) + 8|0);
  $339 = $iDCL2;
  _DCCompensate($332,$334,$336,$338,$339);
 }
 $340 = $iDCL3;
 $341 = (Math_abs(($340|0))|0);
 $342 = $3;
 $343 = ($341|0)<($342|0);
 if ($343) {
  $344 = $3;
  $345 = ($344|0)>(20);
  if (!($345)) {
   label = 15;
  }
 } else {
  label = 15;
 }
 if ((label|0) == 15) {
  $346 = $4;
  $347 = ($346|0)!=(0);
  if (!($347)) {
   STACKTOP = sp;return;
  }
 }
 $348 = $0;
 $349 = (($348) + 12|0);
 $350 = HEAP32[$349>>2]|0;
 $351 = $1;
 $352 = (($351) + 12|0);
 $353 = HEAP32[$352>>2]|0;
 $354 = (($350) - ($353))|0;
 $355 = $p2;
 $356 = (($355) + 12|0);
 $357 = HEAP32[$356>>2]|0;
 $358 = (($354) - ($357))|0;
 $359 = $p3;
 $360 = (($359) + 12|0);
 $361 = HEAP32[$360>>2]|0;
 $362 = (($358) + ($361))|0;
 $363 = $362 >> 1;
 $iDCLAlt3 = $363;
 $364 = $iDCL3;
 $365 = $iDCLAlt3;
 $366 = (_ClipDCL($364,$365)|0);
 $iDCL3 = $366;
 $367 = $0;
 $368 = (($367) + 12|0);
 $369 = $p2;
 $370 = (($369) + 12|0);
 $371 = $1;
 $372 = (($371) + 12|0);
 $373 = $p3;
 $374 = (($373) + 12|0);
 $375 = $iDCL3;
 _DCCompensate($368,$370,$372,$374,$375);
 STACKTOP = sp;return;
}
function _invOddOddPost($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, $t1 = 0, $t2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $a;
 $13 = $d;
 $14 = (($13) + ($12))|0;
 $d = $14;
 $15 = $b;
 $16 = $c;
 $17 = (($16) - ($15))|0;
 $c = $17;
 $18 = $d;
 $19 = $18 >> 1;
 $t1 = $19;
 $20 = $a;
 $21 = (($20) - ($19))|0;
 $a = $21;
 $22 = $c;
 $23 = $22 >> 1;
 $t2 = $23;
 $24 = $b;
 $25 = (($24) + ($23))|0;
 $b = $25;
 $26 = $b;
 $27 = ($26*3)|0;
 $28 = (($27) + 6)|0;
 $29 = $28 >> 3;
 $30 = $a;
 $31 = (($30) - ($29))|0;
 $a = $31;
 $32 = $a;
 $33 = ($32*3)|0;
 $34 = (($33) + 2)|0;
 $35 = $34 >> 2;
 $36 = $b;
 $37 = (($36) + ($35))|0;
 $b = $37;
 $38 = $b;
 $39 = ($38*3)|0;
 $40 = (($39) + 4)|0;
 $41 = $40 >> 3;
 $42 = $a;
 $43 = (($42) - ($41))|0;
 $a = $43;
 $44 = $t2;
 $45 = $b;
 $46 = (($45) - ($44))|0;
 $b = $46;
 $47 = $t1;
 $48 = $a;
 $49 = (($48) + ($47))|0;
 $a = $49;
 $50 = $b;
 $51 = $c;
 $52 = (($51) + ($50))|0;
 $c = $52;
 $53 = $a;
 $54 = $d;
 $55 = (($54) - ($53))|0;
 $d = $55;
 $56 = $a;
 $57 = $0;
 HEAP32[$57>>2] = $56;
 $58 = $b;
 $59 = $1;
 HEAP32[$59>>2] = $58;
 $60 = $c;
 $61 = $2;
 HEAP32[$61>>2] = $60;
 $62 = $d;
 $63 = $3;
 HEAP32[$63>>2] = $62;
 STACKTOP = sp;return;
}
function _strHSTdec1($pa,$pd) {
 $pa = $pa|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pd;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $a = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $d = $5;
 $6 = $d;
 $7 = $a;
 $8 = (($7) + ($6))|0;
 $a = $8;
 $9 = $a;
 $10 = $9 >> 1;
 $11 = $d;
 $12 = (($10) - ($11))|0;
 $d = $12;
 $13 = $d;
 $14 = ($13*3)|0;
 $15 = (($14) + 0)|0;
 $16 = $15 >> 3;
 $17 = $a;
 $18 = (($17) + ($16))|0;
 $a = $18;
 $19 = $a;
 $20 = ($19*3)|0;
 $21 = (($20) + 0)|0;
 $22 = $21 >> 4;
 $23 = $d;
 $24 = (($23) + ($22))|0;
 $d = $24;
 $25 = $a;
 $26 = $0;
 HEAP32[$26>>2] = $25;
 $27 = $d;
 $28 = $1;
 HEAP32[$28>>2] = $27;
 STACKTOP = sp;return;
}
function _strHSTdec($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $c = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $c;
 $13 = $b;
 $14 = (($13) - ($12))|0;
 $b = $14;
 $15 = $d;
 $16 = ($15*3)|0;
 $17 = (($16) + 4)|0;
 $18 = $17 >> 3;
 $19 = $a;
 $20 = (($19) + ($18))|0;
 $a = $20;
 $21 = $b;
 $22 = $21 >> 1;
 $23 = $d;
 $24 = (($23) - ($22))|0;
 $d = $24;
 $25 = $a;
 $26 = $b;
 $27 = (($25) - ($26))|0;
 $28 = $27 >> 1;
 $29 = $c;
 $30 = (($28) - ($29))|0;
 $c = $30;
 $31 = $d;
 $32 = $2;
 HEAP32[$32>>2] = $31;
 $33 = $c;
 $34 = $3;
 HEAP32[$34>>2] = $33;
 $35 = $a;
 $36 = $c;
 $37 = (($35) - ($36))|0;
 $38 = $0;
 HEAP32[$38>>2] = $37;
 $39 = $b;
 $40 = $d;
 $41 = (($39) + ($40))|0;
 $42 = $1;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function _strPost4x4Stage1($p,$iOffset,$iHPQP,$bHPAbsent) {
 $p = $p|0;
 $iOffset = $iOffset|0;
 $iHPQP = $iHPQP|0;
 $bHPAbsent = $bHPAbsent|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $iOffset;
 $2 = $iHPQP;
 $3 = $bHPAbsent;
 $4 = $0;
 $5 = $0;
 $6 = (($5) + 64|0);
 $7 = $1;
 $8 = $2;
 $9 = $3;
 _strPost4x4Stage1Split($4,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function _strPost4x4Stage1Split_alternate($p0,$p1,$iOffset) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 $iOffset = $iOffset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $p2 = 0, $p3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p0;
 $1 = $p1;
 $2 = $iOffset;
 $3 = $0;
 $4 = (($3) + 288|0);
 $5 = $2;
 $6 = (0 - ($5))|0;
 $7 = (($4) + ($6<<2)|0);
 $p2 = $7;
 $8 = $1;
 $9 = (($8) + 256|0);
 $10 = $2;
 $11 = (0 - ($10))|0;
 $12 = (($9) + ($11<<2)|0);
 $p3 = $12;
 $13 = $0;
 $14 = (($13) + 48|0);
 $0 = $14;
 $15 = $1;
 $16 = (($15) + 16|0);
 $1 = $16;
 $17 = $0;
 $18 = $p2;
 $19 = $1;
 $20 = $p3;
 _strDCT2x2dn($17,$18,$19,$20);
 $21 = $0;
 $22 = (($21) + 4|0);
 $23 = $p2;
 $24 = (($23) + 4|0);
 $25 = $1;
 $26 = (($25) + 4|0);
 $27 = $p3;
 $28 = (($27) + 4|0);
 _strDCT2x2dn($22,$24,$26,$28);
 $29 = $0;
 $30 = (($29) + 8|0);
 $31 = $p2;
 $32 = (($31) + 8|0);
 $33 = $1;
 $34 = (($33) + 8|0);
 $35 = $p3;
 $36 = (($35) + 8|0);
 _strDCT2x2dn($30,$32,$34,$36);
 $37 = $0;
 $38 = (($37) + 12|0);
 $39 = $p2;
 $40 = (($39) + 12|0);
 $41 = $1;
 $42 = (($41) + 12|0);
 $43 = $p3;
 $44 = (($43) + 12|0);
 _strDCT2x2dn($38,$40,$42,$44);
 $45 = $p3;
 $46 = $p3;
 $47 = (($46) + 4|0);
 $48 = $p3;
 $49 = (($48) + 8|0);
 $50 = $p3;
 $51 = (($50) + 12|0);
 _invOddOddPost($45,$47,$49,$51);
 $52 = $1;
 $53 = (($52) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 1)|0;
 $56 = $55 >> 1;
 $57 = $1;
 $58 = (($57) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) - ($56))|0;
 HEAP32[$58>>2] = $60;
 $61 = $1;
 $62 = (($61) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + 1)|0;
 $65 = $64 >> 1;
 $66 = $1;
 $67 = (($66) + 12|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + ($65))|0;
 HEAP32[$67>>2] = $69;
 $70 = $1;
 $71 = (($70) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + 1)|0;
 $74 = $73 >> 1;
 $75 = $1;
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) - ($74))|0;
 HEAP32[$75>>2] = $77;
 $78 = $1;
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + 1)|0;
 $81 = $80 >> 1;
 $82 = $1;
 $83 = (($82) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($81))|0;
 HEAP32[$83>>2] = $85;
 $86 = $p2;
 $87 = (($86) + 12|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 1)|0;
 $90 = $89 >> 1;
 $91 = $p2;
 $92 = (($91) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) - ($90))|0;
 HEAP32[$92>>2] = $94;
 $95 = $p2;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($97) + 1)|0;
 $99 = $98 >> 1;
 $100 = $p2;
 $101 = (($100) + 12|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + ($99))|0;
 HEAP32[$101>>2] = $103;
 $104 = $p2;
 $105 = (($104) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + 1)|0;
 $108 = $107 >> 1;
 $109 = $p2;
 $110 = HEAP32[$109>>2]|0;
 $111 = (($110) - ($108))|0;
 HEAP32[$109>>2] = $111;
 $112 = $p2;
 $113 = HEAP32[$112>>2]|0;
 $114 = (($113) + 1)|0;
 $115 = $114 >> 1;
 $116 = $p2;
 $117 = (($116) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($118) + ($115))|0;
 HEAP32[$117>>2] = $119;
 $120 = $0;
 $121 = $p3;
 _strHSTdec1_alternate($120,$121);
 $122 = $0;
 $123 = (($122) + 4|0);
 $124 = $p3;
 $125 = (($124) + 4|0);
 _strHSTdec1_alternate($123,$125);
 $126 = $0;
 $127 = (($126) + 8|0);
 $128 = $p3;
 $129 = (($128) + 8|0);
 _strHSTdec1_alternate($127,$129);
 $130 = $0;
 $131 = (($130) + 12|0);
 $132 = $p3;
 $133 = (($132) + 12|0);
 _strHSTdec1_alternate($131,$133);
 $134 = $0;
 $135 = $p2;
 $136 = $1;
 $137 = $p3;
 _strHSTdec($134,$135,$136,$137);
 $138 = $0;
 $139 = (($138) + 4|0);
 $140 = $p2;
 $141 = (($140) + 4|0);
 $142 = $1;
 $143 = (($142) + 4|0);
 $144 = $p3;
 $145 = (($144) + 4|0);
 _strHSTdec($139,$141,$143,$145);
 $146 = $0;
 $147 = (($146) + 8|0);
 $148 = $p2;
 $149 = (($148) + 8|0);
 $150 = $1;
 $151 = (($150) + 8|0);
 $152 = $p3;
 $153 = (($152) + 8|0);
 _strHSTdec($147,$149,$151,$153);
 $154 = $0;
 $155 = (($154) + 12|0);
 $156 = $p2;
 $157 = (($156) + 12|0);
 $158 = $1;
 $159 = (($158) + 12|0);
 $160 = $p3;
 $161 = (($160) + 12|0);
 _strHSTdec($155,$157,$159,$161);
 STACKTOP = sp;return;
}
function _strHSTdec1_alternate($pa,$pd) {
 $pa = $pa|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $d = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pd;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $a = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $d = $5;
 $6 = $d;
 $7 = $a;
 $8 = (($7) + ($6))|0;
 $a = $8;
 $9 = $a;
 $10 = $9 >> 1;
 $11 = $d;
 $12 = (($10) - ($11))|0;
 $d = $12;
 $13 = $d;
 $14 = ($13*3)|0;
 $15 = (($14) + 0)|0;
 $16 = $15 >> 3;
 $17 = $a;
 $18 = (($17) + ($16))|0;
 $a = $18;
 $19 = $a;
 $20 = ($19*3)|0;
 $21 = (($20) + 0)|0;
 $22 = $21 >> 4;
 $23 = $d;
 $24 = (($23) + ($22))|0;
 $d = $24;
 $25 = $a;
 $26 = $25 >> 7;
 $27 = $d;
 $28 = (($27) + ($26))|0;
 $d = $28;
 $29 = $a;
 $30 = $29 >> 10;
 $31 = $d;
 $32 = (($31) - ($30))|0;
 $d = $32;
 $33 = $a;
 $34 = $0;
 HEAP32[$34>>2] = $33;
 $35 = $d;
 $36 = $1;
 HEAP32[$36>>2] = $35;
 STACKTOP = sp;return;
}
function _strPost4x4Stage1_alternate($p,$iOffset) {
 $p = $p|0;
 $iOffset = $iOffset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $iOffset;
 $2 = $0;
 $3 = $0;
 $4 = (($3) + 64|0);
 $5 = $1;
 _strPost4x4Stage1Split_alternate($2,$4,$5);
 STACKTOP = sp;return;
}
function _strPost4x4Stage2Split($p0,$p1) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p0;
 $1 = $p1;
 $2 = $0;
 $3 = (($2) + -384|0);
 $4 = $0;
 $5 = (($4) + 384|0);
 $6 = $1;
 $7 = (($6) + -448|0);
 $8 = $1;
 $9 = (($8) + 320|0);
 _strDCT2x2dn($3,$5,$7,$9);
 $10 = $0;
 $11 = (($10) + -128|0);
 $12 = $0;
 $13 = (($12) + 128|0);
 $14 = $1;
 $15 = (($14) + -192|0);
 $16 = $1;
 $17 = (($16) + 64|0);
 _strDCT2x2dn($11,$13,$15,$17);
 $18 = $0;
 $19 = (($18) + -320|0);
 $20 = $0;
 $21 = (($20) + 448|0);
 $22 = $1;
 $23 = (($22) + -512|0);
 $24 = $1;
 $25 = (($24) + 256|0);
 _strDCT2x2dn($19,$21,$23,$25);
 $26 = $0;
 $27 = (($26) + -64|0);
 $28 = $0;
 $29 = (($28) + 192|0);
 $30 = $1;
 $31 = (($30) + -256|0);
 $32 = $1;
 _strDCT2x2dn($27,$29,$31,$32);
 $33 = $1;
 $34 = $1;
 $35 = (($34) + 256|0);
 $36 = $1;
 $37 = (($36) + 64|0);
 $38 = $1;
 $39 = (($38) + 320|0);
 _invOddOddPost($33,$35,$37,$39);
 $40 = $0;
 $41 = (($40) + 128|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 $44 = $43 >> 1;
 $45 = $0;
 $46 = (($45) + 192|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) - ($44))|0;
 HEAP32[$46>>2] = $48;
 $49 = $0;
 $50 = (($49) + 192|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 1)|0;
 $53 = $52 >> 1;
 $54 = $0;
 $55 = (($54) + 128|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($53))|0;
 HEAP32[$55>>2] = $57;
 $58 = $0;
 $59 = (($58) + 384|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 1)|0;
 $62 = $61 >> 1;
 $63 = $0;
 $64 = (($63) + 448|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) - ($62))|0;
 HEAP32[$64>>2] = $66;
 $67 = $0;
 $68 = (($67) + 448|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 1)|0;
 $71 = $70 >> 1;
 $72 = $0;
 $73 = (($72) + 384|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($71))|0;
 HEAP32[$73>>2] = $75;
 $76 = $1;
 $77 = (($76) + -512|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + 1)|0;
 $80 = $79 >> 1;
 $81 = $1;
 $82 = (($81) + -256|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) - ($80))|0;
 HEAP32[$82>>2] = $84;
 $85 = $1;
 $86 = (($85) + -256|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($87) + 1)|0;
 $89 = $88 >> 1;
 $90 = $1;
 $91 = (($90) + -512|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + ($89))|0;
 HEAP32[$91>>2] = $93;
 $94 = $1;
 $95 = (($94) + -448|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + 1)|0;
 $98 = $97 >> 1;
 $99 = $1;
 $100 = (($99) + -192|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) - ($98))|0;
 HEAP32[$100>>2] = $102;
 $103 = $1;
 $104 = (($103) + -192|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) + 1)|0;
 $107 = $106 >> 1;
 $108 = $1;
 $109 = (($108) + -448|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (($110) + ($107))|0;
 HEAP32[$109>>2] = $111;
 $112 = $0;
 $113 = (($112) + -384|0);
 $114 = $1;
 $115 = (($114) + 320|0);
 _strHSTdec1($113,$115);
 $116 = $0;
 $117 = (($116) + -128|0);
 $118 = $1;
 $119 = (($118) + 64|0);
 _strHSTdec1($117,$119);
 $120 = $0;
 $121 = (($120) + -320|0);
 $122 = $1;
 $123 = (($122) + 256|0);
 _strHSTdec1($121,$123);
 $124 = $0;
 $125 = (($124) + -64|0);
 $126 = $1;
 _strHSTdec1($125,$126);
 $127 = $0;
 $128 = (($127) + -384|0);
 $129 = $1;
 $130 = (($129) + -448|0);
 $131 = $0;
 $132 = (($131) + 384|0);
 $133 = $1;
 $134 = (($133) + 320|0);
 _strHSTdec($128,$130,$132,$134);
 $135 = $0;
 $136 = (($135) + -128|0);
 $137 = $1;
 $138 = (($137) + -192|0);
 $139 = $0;
 $140 = (($139) + 128|0);
 $141 = $1;
 $142 = (($141) + 64|0);
 _strHSTdec($136,$138,$140,$142);
 $143 = $0;
 $144 = (($143) + -320|0);
 $145 = $1;
 $146 = (($145) + -512|0);
 $147 = $0;
 $148 = (($147) + 448|0);
 $149 = $1;
 $150 = (($149) + 256|0);
 _strHSTdec($144,$146,$148,$150);
 $151 = $0;
 $152 = (($151) + -64|0);
 $153 = $1;
 $154 = (($153) + -256|0);
 $155 = $0;
 $156 = (($155) + 192|0);
 $157 = $1;
 _strHSTdec($152,$154,$156,$157);
 STACKTOP = sp;return;
}
function _strPost4x4Stage2Split_alternate($p0,$p1) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p0;
 $1 = $p1;
 $2 = $0;
 $3 = (($2) + -384|0);
 $4 = $0;
 $5 = (($4) + 384|0);
 $6 = $1;
 $7 = (($6) + -448|0);
 $8 = $1;
 $9 = (($8) + 320|0);
 _strDCT2x2dn($3,$5,$7,$9);
 $10 = $0;
 $11 = (($10) + -128|0);
 $12 = $0;
 $13 = (($12) + 128|0);
 $14 = $1;
 $15 = (($14) + -192|0);
 $16 = $1;
 $17 = (($16) + 64|0);
 _strDCT2x2dn($11,$13,$15,$17);
 $18 = $0;
 $19 = (($18) + -320|0);
 $20 = $0;
 $21 = (($20) + 448|0);
 $22 = $1;
 $23 = (($22) + -512|0);
 $24 = $1;
 $25 = (($24) + 256|0);
 _strDCT2x2dn($19,$21,$23,$25);
 $26 = $0;
 $27 = (($26) + -64|0);
 $28 = $0;
 $29 = (($28) + 192|0);
 $30 = $1;
 $31 = (($30) + -256|0);
 $32 = $1;
 _strDCT2x2dn($27,$29,$31,$32);
 $33 = $1;
 $34 = $1;
 $35 = (($34) + 256|0);
 $36 = $1;
 $37 = (($36) + 64|0);
 $38 = $1;
 $39 = (($38) + 320|0);
 _invOddOddPost($33,$35,$37,$39);
 $40 = $0;
 $41 = (($40) + 128|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 $44 = $43 >> 1;
 $45 = $0;
 $46 = (($45) + 192|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) - ($44))|0;
 HEAP32[$46>>2] = $48;
 $49 = $0;
 $50 = (($49) + 192|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 1)|0;
 $53 = $52 >> 1;
 $54 = $0;
 $55 = (($54) + 128|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($53))|0;
 HEAP32[$55>>2] = $57;
 $58 = $0;
 $59 = (($58) + 384|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 1)|0;
 $62 = $61 >> 1;
 $63 = $0;
 $64 = (($63) + 448|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) - ($62))|0;
 HEAP32[$64>>2] = $66;
 $67 = $0;
 $68 = (($67) + 448|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 1)|0;
 $71 = $70 >> 1;
 $72 = $0;
 $73 = (($72) + 384|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($71))|0;
 HEAP32[$73>>2] = $75;
 $76 = $1;
 $77 = (($76) + -512|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + 1)|0;
 $80 = $79 >> 1;
 $81 = $1;
 $82 = (($81) + -256|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) - ($80))|0;
 HEAP32[$82>>2] = $84;
 $85 = $1;
 $86 = (($85) + -256|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($87) + 1)|0;
 $89 = $88 >> 1;
 $90 = $1;
 $91 = (($90) + -512|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + ($89))|0;
 HEAP32[$91>>2] = $93;
 $94 = $1;
 $95 = (($94) + -448|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + 1)|0;
 $98 = $97 >> 1;
 $99 = $1;
 $100 = (($99) + -192|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) - ($98))|0;
 HEAP32[$100>>2] = $102;
 $103 = $1;
 $104 = (($103) + -192|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) + 1)|0;
 $107 = $106 >> 1;
 $108 = $1;
 $109 = (($108) + -448|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (($110) + ($107))|0;
 HEAP32[$109>>2] = $111;
 $112 = $0;
 $113 = (($112) + -384|0);
 $114 = $1;
 $115 = (($114) + 320|0);
 _strHSTdec1_alternate($113,$115);
 $116 = $0;
 $117 = (($116) + -128|0);
 $118 = $1;
 $119 = (($118) + 64|0);
 _strHSTdec1_alternate($117,$119);
 $120 = $0;
 $121 = (($120) + -320|0);
 $122 = $1;
 $123 = (($122) + 256|0);
 _strHSTdec1_alternate($121,$123);
 $124 = $0;
 $125 = (($124) + -64|0);
 $126 = $1;
 _strHSTdec1_alternate($125,$126);
 $127 = $0;
 $128 = (($127) + -384|0);
 $129 = $1;
 $130 = (($129) + -448|0);
 $131 = $0;
 $132 = (($131) + 384|0);
 $133 = $1;
 $134 = (($133) + 320|0);
 _strHSTdec($128,$130,$132,$134);
 $135 = $0;
 $136 = (($135) + -128|0);
 $137 = $1;
 $138 = (($137) + -192|0);
 $139 = $0;
 $140 = (($139) + 128|0);
 $141 = $1;
 $142 = (($141) + 64|0);
 _strHSTdec($136,$138,$140,$142);
 $143 = $0;
 $144 = (($143) + -320|0);
 $145 = $1;
 $146 = (($145) + -512|0);
 $147 = $0;
 $148 = (($147) + 448|0);
 $149 = $1;
 $150 = (($149) + 256|0);
 _strHSTdec($144,$146,$148,$150);
 $151 = $0;
 $152 = (($151) + -64|0);
 $153 = $1;
 $154 = (($153) + -256|0);
 $155 = $0;
 $156 = (($155) + 192|0);
 $157 = $1;
 _strHSTdec($152,$154,$156,$157);
 STACKTOP = sp;return;
}
function _invTransformMacroblock($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bHPAbsent = 0, $bottom = 0, $bottomORright = 0, $cfColorFormat = 0, $dcqp = 0, $i = 0, $iChannels = 0, $iHPQP = 0, $iHPQP3 = 0, $iHPQP6 = 0, $iStrength = 0, $j = 0, $left = 0, $leftORright = 0, $mbWidth = 0;
 var $mbX = 0, $olOverlap = 0, $p = 0, $p0 = 0, $p01 = 0, $p04 = 0, $p1 = 0, $p12 = 0, $p15 = 0, $qp = 0, $right = 0, $tScale = 0, $top = 0, $topORbottom = 0, $topORleft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $qp = sp + 8|0;
 $dcqp = sp + 72|0;
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 84|0);
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $olOverlap = $4;
 $5 = $0;
 $6 = (($5) + 34136|0);
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $cfColorFormat = $8;
 $9 = $0;
 $10 = (($9) + 34360|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 $13 = $12&1;
 $left = $13;
 $14 = $0;
 $15 = (($14) + 34360|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (($17) + 34364|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)==($19|0);
 $21 = $20&1;
 $right = $21;
 $22 = $0;
 $23 = (($22) + 34356|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 $26 = $25&1;
 $top = $26;
 $27 = $0;
 $28 = (($27) + 34356|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = (($30) + 34368|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($29|0)==($32|0);
 $34 = $33&1;
 $bottom = $34;
 $35 = $top;
 $36 = ($35|0)!=(0);
 if ($36) {
  $40 = 1;
 } else {
  $37 = $bottom;
  $38 = ($37|0)!=(0);
  $40 = $38;
 }
 $39 = $40&1;
 $topORbottom = $39;
 $41 = $left;
 $42 = ($41|0)!=(0);
 if ($42) {
  $46 = 1;
 } else {
  $43 = $right;
  $44 = ($43|0)!=(0);
  $46 = $44;
 }
 $45 = $46&1;
 $leftORright = $45;
 $47 = $top;
 $48 = ($47|0)!=(0);
 if ($48) {
  $52 = 1;
 } else {
  $49 = $left;
  $50 = ($49|0)!=(0);
  $52 = $50;
 }
 $51 = $52&1;
 $topORleft = $51;
 $53 = $bottom;
 $54 = ($53|0)!=(0);
 if ($54) {
  $58 = 1;
 } else {
  $55 = $right;
  $56 = ($55|0)!=(0);
  $58 = $56;
 }
 $57 = $58&1;
 $bottomORright = $57;
 $59 = $0;
 $60 = (($59) + 34364|0);
 $61 = HEAP32[$60>>2]|0;
 $mbWidth = $61;
 $62 = $0;
 $63 = (($62) + 34360|0);
 $64 = HEAP32[$63>>2]|0;
 $mbX = $64;
 $p = 0;
 $65 = $cfColorFormat;
 $66 = ($65|0)==(1);
 if ($66) {
  label = 11;
 } else {
  $67 = $cfColorFormat;
  $68 = ($67|0)==(2);
  if ($68) {
   label = 11;
  } else {
   $69 = $0;
   $70 = (($69) + 34136|0);
   $71 = (($70) + 36|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72;
  }
 }
 if ((label|0) == 11) {
  $73 = 1;
 }
 $iChannels = $73;
 $74 = $0;
 $75 = (($74) + 34248|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $tScale = $78;
 $j = 0;
 $79 = $0;
 $80 = (($79) + 4|0);
 $81 = (($80) + 68|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = 1 << $83;
 $iStrength = $84;
 $85 = $0;
 $86 = (($85) + 84|0);
 $87 = (($86) + 44|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)==(2);
 if ($89) {
  $96 = 1;
 } else {
  $90 = $0;
  $91 = (($90) + 84|0);
  $92 = (($91) + 44|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)==(3);
  $96 = $94;
 }
 $95 = $96&1;
 $bHPAbsent = $95;
 $97 = $0;
 $98 = (($97) + 4|0);
 $99 = (($98) + 68|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&255;
 $102 = ($101|0)>(0);
 if ($102) {
  $i = 0;
  while(1) {
   $103 = $i;
   $104 = $iChannels;
   $105 = ($103>>>0)<($104>>>0);
   if (!($105)) {
    break;
   }
   $106 = $0;
   $107 = (($106) + 32976|0);
   $108 = (($107) + 1156|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = $i;
   $112 = $0;
   $113 = (($112) + 34296|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $0;
   $116 = (($115) + 34316|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + (($114*240)|0)|0);
   $119 = (($118) + 64|0);
   $120 = (($119) + ($111<<2)|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + (($110*20)|0)|0);
   $123 = (($122) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $iStrength;
   $126 = Math_imul($124, $125)|0;
   $127 = $olOverlap;
   $128 = ($127|0)==(0);
   $129 = $128 ? 2 : 1;
   $130 = Math_imul($126, $129)|0;
   $131 = $i;
   $132 = (($qp) + ($131<<2)|0);
   HEAP32[$132>>2] = $130;
   $133 = $i;
   $134 = $0;
   $135 = (($134) + 34296|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $0;
   $138 = (($137) + 34316|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + (($136*240)|0)|0);
   $141 = (($140) + ($133<<2)|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $iStrength;
   $146 = Math_imul($144, $145)|0;
   $147 = $i;
   $148 = (($dcqp) + ($147<<2)|0);
   HEAP32[$148>>2] = $146;
   $149 = $i;
   $150 = (($149) + 1)|0;
   $i = $150;
  }
  $151 = $left;
  $152 = ($151|0)!=(0);
  if ($152) {
   $153 = $0;
   $154 = (($153) + 35040|0);
   $155 = $0;
   $156 = (($155) + 34136|0);
   $157 = (($156) + 36|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $mbWidth;
   $160 = $top;
   $161 = $bottom;
   _slideOneMBRow($154,$158,$159,$160,$161);
  }
 }
 $i = 0;
 while(1) {
  $162 = $i;
  $163 = $iChannels;
  $164 = ($162>>>0)<($163>>>0);
  if ($164) {
   $165 = $tScale;
   $166 = ($165>>>0)<(16);
   $1282 = $166;
  } else {
   $1282 = 0;
  }
  if (!($1282)) {
   break;
  }
  $167 = $i;
  $168 = $0;
  $169 = (($168) + 34692|0);
  $170 = (($169) + ($167<<2)|0);
  $171 = HEAP32[$170>>2]|0;
  $p0 = $171;
  $172 = $i;
  $173 = $0;
  $174 = (($173) + 34756|0);
  $175 = (($174) + ($172<<2)|0);
  $176 = HEAP32[$175>>2]|0;
  $p1 = $176;
  $iHPQP = 255;
  $177 = $bHPAbsent;
  $178 = ($177|0)!=(0);
  if (!($178)) {
   $179 = $0;
   $180 = (($179) + 32976|0);
   $181 = (($180) + 1157|0);
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = $i;
   $185 = $0;
   $186 = (($185) + 34296|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $0;
   $189 = (($188) + 34316|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($190) + (($187*240)|0)|0);
   $192 = (($191) + 128|0);
   $193 = (($192) + ($184<<2)|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (($194) + (($183*20)|0)|0);
   $196 = (($195) + 4|0);
   $197 = HEAP32[$196>>2]|0;
   $iHPQP = $197;
  }
  $198 = $bottomORright;
  $199 = ($198|0)!=(0);
  if (!($199)) {
   $200 = $0;
   $201 = (($200) + 4|0);
   $202 = (($201) + 68|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203&255;
   $205 = ($204|0)>(0);
   if ($205) {
    $206 = $0;
    $207 = (($206) + 35040|0);
    $208 = $p1;
    $209 = $mbX;
    $210 = $i;
    _updatePostProcInfo($207,$208,$209,$210);
   }
   $211 = $p1;
   _strIDCT4x4Stage2($211);
   $212 = $0;
   $213 = (($212) + 34136|0);
   $214 = (($213) + 20|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = ($215|0)!=(0);
   if ($216) {
    $217 = $p1;
    $218 = $i;
    $219 = ($218|0)!=(0);
    $220 = $219&1;
    _strNormalizeDec($217,$220);
   }
  }
  $221 = $olOverlap;
  $222 = (2)==($221|0);
  if ($222) {
   $223 = $leftORright;
   $224 = ($223|0)!=(0);
   if ($224) {
    $225 = $topORbottom;
    $226 = ($225|0)!=(0);
    if (!($226)) {
     $227 = $left;
     $228 = ($227|0)!=(0);
     $229 = $228 ? 0 : -128;
     $j = $229;
     $230 = $p0;
     $231 = $j;
     $232 = (($230) + ($231<<2)|0);
     $233 = (($232) + 128|0);
     $234 = $p0;
     $235 = $j;
     $236 = (($234) + ($235<<2)|0);
     $237 = (($236) + 192|0);
     $238 = $p1;
     $239 = $j;
     $240 = (($238) + ($239<<2)|0);
     $241 = $p1;
     $242 = $j;
     $243 = (($241) + ($242<<2)|0);
     $244 = (($243) + 64|0);
     _strPost4($233,$237,$240,$244);
     $245 = $p0;
     $246 = $j;
     $247 = (($245) + ($246<<2)|0);
     $248 = (($247) + 384|0);
     $249 = $p0;
     $250 = $j;
     $251 = (($249) + ($250<<2)|0);
     $252 = (($251) + 448|0);
     $253 = $p1;
     $254 = $j;
     $255 = (($253) + ($254<<2)|0);
     $256 = (($255) + 256|0);
     $257 = $p1;
     $258 = $j;
     $259 = (($257) + ($258<<2)|0);
     $260 = (($259) + 320|0);
     _strPost4($248,$252,$256,$260);
    }
   }
   $261 = $leftORright;
   $262 = ($261|0)!=(0);
   if (!($262)) {
    $263 = $topORbottom;
    $264 = ($263|0)!=(0);
    if ($264) {
     $265 = $top;
     $266 = ($265|0)!=(0);
     if ($266) {
      $267 = $p1;
      $270 = $267;
     } else {
      $268 = $p0;
      $269 = (($268) + 128|0);
      $270 = $269;
     }
     $p = $270;
     $271 = $p;
     $272 = (($271) + -512|0);
     $273 = $p;
     $274 = (($273) + -256|0);
     $275 = $p;
     $276 = $p;
     $277 = (($276) + 256|0);
     _strPost4($272,$274,$275,$277);
     $278 = $p;
     $279 = (($278) + -448|0);
     $280 = $p;
     $281 = (($280) + -192|0);
     $282 = $p;
     $283 = (($282) + 64|0);
     $284 = $p;
     $285 = (($284) + 320|0);
     _strPost4($279,$281,$283,$285);
     $p = 0;
    } else {
     $286 = $p0;
     $287 = $p1;
     _strPost4x4Stage2Split($286,$287);
    }
   }
  }
  $288 = $0;
  $289 = (($288) + 4|0);
  $290 = (($289) + 68|0);
  $291 = HEAP8[$290>>0]|0;
  $292 = $291&255;
  $293 = ($292|0)>(0);
  if ($293) {
   $294 = $0;
   $295 = (($294) + 35040|0);
   $296 = $p0;
   $297 = $p1;
   $298 = $mbX;
   $299 = $i;
   $300 = $i;
   $301 = (($dcqp) + ($300<<2)|0);
   $302 = HEAP32[$301>>2]|0;
   _postProcMB($295,$296,$297,$298,$299,$302);
  }
  $303 = $tScale;
  $304 = ($303>>>0)>=(4);
  if ($304) {
  } else {
   $305 = $top;
   $306 = ($305|0)!=(0);
   if (!($306)) {
    $307 = $left;
    $308 = ($307|0)!=(0);
    $309 = $308 ? 32 : -96;
    $j = $309;
    while(1) {
     $310 = $j;
     $311 = $right;
     $312 = ($311|0)!=(0);
     $313 = $312 ? 32 : 160;
     $314 = ($310|0)<($313|0);
     if (!($314)) {
      break;
     }
     $315 = $p0;
     $316 = $j;
     $317 = (($315) + ($316<<2)|0);
     _strIDCT4x4Stage1($317);
     $318 = $p0;
     $319 = $j;
     $320 = (($318) + ($319<<2)|0);
     $321 = (($320) + 64|0);
     _strIDCT4x4Stage1($321);
     $322 = $j;
     $323 = (($322) + 64)|0;
     $j = $323;
    }
   }
   $324 = $bottom;
   $325 = ($324|0)!=(0);
   if (!($325)) {
    $326 = $left;
    $327 = ($326|0)!=(0);
    $328 = $327 ? 0 : -128;
    $j = $328;
    while(1) {
     $329 = $j;
     $330 = $right;
     $331 = ($330|0)!=(0);
     $332 = $331 ? 0 : 128;
     $333 = ($329|0)<($332|0);
     if (!($333)) {
      break;
     }
     $334 = $p1;
     $335 = $j;
     $336 = (($334) + ($335<<2)|0);
     _strIDCT4x4Stage1($336);
     $337 = $p1;
     $338 = $j;
     $339 = (($337) + ($338<<2)|0);
     $340 = (($339) + 64|0);
     _strIDCT4x4Stage1($340);
     $341 = $j;
     $342 = (($341) + 64)|0;
     $j = $342;
    }
   }
   $343 = $olOverlap;
   $344 = (0)!=($343|0);
   if ($344) {
    $345 = $leftORright;
    $346 = ($345|0)!=(0);
    if ($346) {
     $347 = $left;
     $348 = ($347|0)!=(0);
     $349 = $348 ? 10 : -50;
     $j = $349;
     $350 = $top;
     $351 = ($350|0)!=(0);
     if (!($351)) {
      $352 = $p0;
      $353 = (($352) + 64|0);
      $354 = $j;
      $355 = (($353) + ($354<<2)|0);
      $p = $355;
      $356 = $p;
      $357 = $p;
      $358 = (($357) + -8|0);
      $359 = $p;
      $360 = (($359) + 24|0);
      $361 = $p;
      $362 = (($361) + 32|0);
      _strPost4($356,$358,$360,$362);
      $363 = $p;
      $364 = (($363) + 4|0);
      $365 = $p;
      $366 = (($365) + -4|0);
      $367 = $p;
      $368 = (($367) + 28|0);
      $369 = $p;
      $370 = (($369) + 36|0);
      _strPost4($364,$366,$368,$370);
      $371 = $p;
      $372 = (($371) + 64|0);
      $373 = $p;
      $374 = (($373) + 56|0);
      $375 = $p;
      $376 = (($375) + 88|0);
      $377 = $p;
      $378 = (($377) + 96|0);
      _strPost4($372,$374,$376,$378);
      $379 = $p;
      $380 = (($379) + 68|0);
      $381 = $p;
      $382 = (($381) + 60|0);
      $383 = $p;
      $384 = (($383) + 92|0);
      $385 = $p;
      $386 = (($385) + 100|0);
      _strPost4($380,$382,$384,$386);
      $p = 0;
     }
     $387 = $bottom;
     $388 = ($387|0)!=(0);
     if (!($388)) {
      $389 = $p1;
      $390 = $j;
      $391 = (($389) + ($390<<2)|0);
      $p = $391;
      $392 = $p;
      $393 = $p;
      $394 = (($393) + -8|0);
      $395 = $p;
      $396 = (($395) + 24|0);
      $397 = $p;
      $398 = (($397) + 32|0);
      _strPost4($392,$394,$396,$398);
      $399 = $p;
      $400 = (($399) + 4|0);
      $401 = $p;
      $402 = (($401) + -4|0);
      $403 = $p;
      $404 = (($403) + 28|0);
      $405 = $p;
      $406 = (($405) + 36|0);
      _strPost4($400,$402,$404,$406);
      $p = 0;
     }
     $407 = $topORbottom;
     $408 = ($407|0)!=(0);
     if (!($408)) {
      $409 = $p0;
      $410 = (($409) + 192|0);
      $411 = $j;
      $412 = (($410) + ($411<<2)|0);
      $413 = $p0;
      $414 = (($413) + 192|0);
      $415 = $j;
      $416 = (($414) + ($415<<2)|0);
      $417 = (($416) + -8|0);
      $418 = $p1;
      $419 = (($418) + -40|0);
      $420 = $j;
      $421 = (($419) + ($420<<2)|0);
      $422 = $p1;
      $423 = (($422) + -32|0);
      $424 = $j;
      $425 = (($423) + ($424<<2)|0);
      _strPost4($412,$417,$421,$425);
      $426 = $p0;
      $427 = (($426) + 192|0);
      $428 = $j;
      $429 = (($427) + ($428<<2)|0);
      $430 = (($429) + 4|0);
      $431 = $p0;
      $432 = (($431) + 192|0);
      $433 = $j;
      $434 = (($432) + ($433<<2)|0);
      $435 = (($434) + -4|0);
      $436 = $p1;
      $437 = (($436) + -36|0);
      $438 = $j;
      $439 = (($437) + ($438<<2)|0);
      $440 = $p1;
      $441 = (($440) + -28|0);
      $442 = $j;
      $443 = (($441) + ($442<<2)|0);
      _strPost4($430,$435,$439,$443);
     }
    }
    $444 = $top;
    $445 = ($444|0)!=(0);
    if ($445) {
     $446 = $left;
     $447 = ($446|0)!=(0);
     $448 = $447 ? 0 : -192;
     $j = $448;
     while(1) {
      $449 = $j;
      $450 = $right;
      $451 = ($450|0)!=(0);
      $452 = $451 ? -64 : 64;
      $453 = ($449|0)<($452|0);
      if (!($453)) {
       break;
      }
      $454 = $p1;
      $455 = $j;
      $456 = (($454) + ($455<<2)|0);
      $p = $456;
      $457 = $p;
      $458 = (($457) + 20|0);
      $459 = $p;
      $460 = (($459) + 16|0);
      $461 = $p;
      $462 = (($461) + 256|0);
      $463 = $p;
      $464 = (($463) + 260|0);
      _strPost4($458,$460,$462,$464);
      $465 = $p;
      $466 = (($465) + 28|0);
      $467 = $p;
      $468 = (($467) + 24|0);
      $469 = $p;
      $470 = (($469) + 264|0);
      $471 = $p;
      $472 = (($471) + 268|0);
      _strPost4($466,$468,$470,$472);
      $p = 0;
      $473 = $p1;
      $474 = $j;
      $475 = (($473) + ($474<<2)|0);
      $476 = $iHPQP;
      $477 = $bHPAbsent;
      _strPost4x4Stage1($475,0,$476,$477);
      $478 = $j;
      $479 = (($478) + 64)|0;
      $j = $479;
     }
    } else {
     $480 = $bottom;
     $481 = ($480|0)!=(0);
     if ($481) {
      $482 = $left;
      $483 = ($482|0)!=(0);
      $484 = $483 ? 0 : -192;
      $j = $484;
      while(1) {
       $485 = $j;
       $486 = $right;
       $487 = ($486|0)!=(0);
       $488 = $487 ? -64 : 64;
       $489 = ($485|0)<($488|0);
       if (!($489)) {
        break;
       }
       $490 = $p0;
       $491 = (($490) + 64|0);
       $492 = $j;
       $493 = (($491) + ($492<<2)|0);
       $494 = $iHPQP;
       $495 = $bHPAbsent;
       _strPost4x4Stage1($493,0,$494,$495);
       $496 = $p0;
       $497 = (($496) + 128|0);
       $498 = $j;
       $499 = (($497) + ($498<<2)|0);
       $500 = $iHPQP;
       $501 = $bHPAbsent;
       _strPost4x4Stage1($499,0,$500,$501);
       $502 = $p0;
       $503 = (($502) + 192|0);
       $504 = $j;
       $505 = (($503) + ($504<<2)|0);
       $p = $505;
       $506 = $p;
       $507 = (($506) + 60|0);
       $508 = $p;
       $509 = (($508) + 56|0);
       $510 = $p;
       $511 = (($510) + 296|0);
       $512 = $p;
       $513 = (($512) + 300|0);
       _strPost4($507,$509,$511,$513);
       $514 = $p;
       $515 = (($514) + 52|0);
       $516 = $p;
       $517 = (($516) + 48|0);
       $518 = $p;
       $519 = (($518) + 288|0);
       $520 = $p;
       $521 = (($520) + 292|0);
       _strPost4($515,$517,$519,$521);
       $p = 0;
       $522 = $j;
       $523 = (($522) + 64)|0;
       $j = $523;
      }
     } else {
      $524 = $left;
      $525 = ($524|0)!=(0);
      $526 = $525 ? 0 : -192;
      $j = $526;
      while(1) {
       $527 = $j;
       $528 = $right;
       $529 = ($528|0)!=(0);
       $530 = $529 ? -64 : 64;
       $531 = ($527|0)<($530|0);
       if (!($531)) {
        break;
       }
       $532 = $p0;
       $533 = (($532) + 64|0);
       $534 = $j;
       $535 = (($533) + ($534<<2)|0);
       $536 = $iHPQP;
       $537 = $bHPAbsent;
       _strPost4x4Stage1($535,0,$536,$537);
       $538 = $p0;
       $539 = (($538) + 128|0);
       $540 = $j;
       $541 = (($539) + ($540<<2)|0);
       $542 = $iHPQP;
       $543 = $bHPAbsent;
       _strPost4x4Stage1($541,0,$542,$543);
       $544 = $p0;
       $545 = (($544) + 192|0);
       $546 = $j;
       $547 = (($545) + ($546<<2)|0);
       $548 = $p1;
       $549 = $j;
       $550 = (($548) + ($549<<2)|0);
       $551 = $iHPQP;
       $552 = $bHPAbsent;
       _strPost4x4Stage1Split($547,$550,0,$551,$552);
       $553 = $p1;
       $554 = $j;
       $555 = (($553) + ($554<<2)|0);
       $556 = $iHPQP;
       $557 = $bHPAbsent;
       _strPost4x4Stage1($555,0,$556,$557);
       $558 = $j;
       $559 = (($558) + 64)|0;
       $j = $559;
      }
     }
    }
   }
   $560 = $0;
   $561 = (($560) + 4|0);
   $562 = (($561) + 68|0);
   $563 = HEAP8[$562>>0]|0;
   $564 = $563&255;
   $565 = ($564|0)>(0);
   do {
    if ($565) {
     $566 = $topORleft;
     $567 = ($566|0)!=(0);
     if ($567) {
      break;
     }
     $568 = $0;
     $569 = (($568) + 35040|0);
     $570 = $p0;
     $571 = $p1;
     $572 = $mbX;
     $573 = $i;
     $574 = $i;
     $575 = (($qp) + ($574<<2)|0);
     $576 = HEAP32[$575>>2]|0;
     _postProcBlock($569,$570,$571,$572,$573,$576);
    }
   } while(0);
  }
  $577 = $i;
  $578 = (($577) + 1)|0;
  $i = $578;
 }
 $i = 0;
 while(1) {
  $579 = $i;
  $580 = $cfColorFormat;
  $581 = (1)==($580|0);
  $582 = $581 ? 2 : 0;
  $583 = ($579>>>0)<($582>>>0);
  if ($583) {
   $584 = $tScale;
   $585 = ($584>>>0)<(16);
   $1283 = $585;
  } else {
   $1283 = 0;
  }
  if (!($1283)) {
   break;
  }
  $586 = $i;
  $587 = (1 + ($586))|0;
  $588 = $0;
  $589 = (($588) + 34692|0);
  $590 = (($589) + ($587<<2)|0);
  $591 = HEAP32[$590>>2]|0;
  $p01 = $591;
  $592 = $i;
  $593 = (1 + ($592))|0;
  $594 = $0;
  $595 = (($594) + 34756|0);
  $596 = (($595) + ($593<<2)|0);
  $597 = HEAP32[$596>>2]|0;
  $p12 = $597;
  $iHPQP3 = 255;
  $598 = $bHPAbsent;
  $599 = ($598|0)!=(0);
  if (!($599)) {
   $600 = $0;
   $601 = (($600) + 32976|0);
   $602 = (($601) + 1157|0);
   $603 = HEAP8[$602>>0]|0;
   $604 = $603&255;
   $605 = $i;
   $606 = $0;
   $607 = (($606) + 34296|0);
   $608 = HEAP32[$607>>2]|0;
   $609 = $0;
   $610 = (($609) + 34316|0);
   $611 = HEAP32[$610>>2]|0;
   $612 = (($611) + (($608*240)|0)|0);
   $613 = (($612) + 128|0);
   $614 = (($613) + ($605<<2)|0);
   $615 = HEAP32[$614>>2]|0;
   $616 = (($615) + (($604*20)|0)|0);
   $617 = (($616) + 4|0);
   $618 = HEAP32[$617>>2]|0;
   $iHPQP3 = $618;
  }
  $619 = $bottomORright;
  $620 = ($619|0)!=(0);
  if (!($620)) {
   $621 = $0;
   $622 = (($621) + 34136|0);
   $623 = (($622) + 20|0);
   $624 = HEAP32[$623>>2]|0;
   $625 = ($624|0)!=(0);
   if ($625) {
    $633 = $p12;
    $634 = $p12;
    $635 = (($634) + 128|0);
    $636 = $p12;
    $637 = (($636) + 64|0);
    $638 = $p12;
    $639 = (($638) + 192|0);
    _strDCT2x2dnDec($633,$635,$637,$639);
   } else {
    $626 = $p12;
    $627 = $p12;
    $628 = (($627) + 128|0);
    $629 = $p12;
    $630 = (($629) + 64|0);
    $631 = $p12;
    $632 = (($631) + 192|0);
    _strDCT2x2dn($626,$628,$630,$632);
   }
  }
  $640 = $olOverlap;
  $641 = (2)==($640|0);
  if ($641) {
   $642 = $leftORright;
   $643 = ($642|0)!=(0);
   if ($643) {
    $644 = $topORbottom;
    $645 = ($644|0)!=(0);
    if (!($645)) {
     $646 = $left;
     $647 = ($646|0)!=(0);
     $648 = $647 ? 0 : -32;
     $j = $648;
     $649 = $p01;
     $650 = $j;
     $651 = (($649) + ($650<<2)|0);
     $652 = (($651) + 64|0);
     $653 = $p12;
     $654 = $j;
     $655 = (($653) + ($654<<2)|0);
     _strPost2($652,$655);
    }
   }
   $656 = $leftORright;
   $657 = ($656|0)!=(0);
   if (!($657)) {
    $658 = $topORbottom;
    $659 = ($658|0)!=(0);
    if ($659) {
     $660 = $top;
     $661 = ($660|0)!=(0);
     if ($661) {
      $662 = $p12;
      $665 = $662;
     } else {
      $663 = $p01;
      $664 = (($663) + 64|0);
      $665 = $664;
     }
     $p = $665;
     $666 = $p;
     $667 = (($666) + -128|0);
     $668 = $p;
     _strPost2($667,$668);
     $p = 0;
    } else {
     $669 = $p01;
     $670 = (($669) + -64|0);
     $671 = $p01;
     $672 = (($671) + 64|0);
     $673 = $p12;
     $674 = (($673) + -128|0);
     $675 = $p12;
     _strPost2x2($670,$672,$674,$675);
    }
   }
  }
  $676 = $tScale;
  $677 = ($676>>>0)>=(4);
  if ($677) {
  } else {
   $678 = $top;
   $679 = ($678|0)!=(0);
   if (!($679)) {
    $680 = $left;
    $681 = ($680|0)!=(0);
    $682 = $681 ? 16 : -16;
    $j = $682;
    while(1) {
     $683 = $j;
     $684 = $right;
     $685 = ($684|0)!=(0);
     $686 = $685 ? 16 : 48;
     $687 = ($683|0)<($686|0);
     if (!($687)) {
      break;
     }
     $688 = $p01;
     $689 = $j;
     $690 = (($688) + ($689<<2)|0);
     _strIDCT4x4Stage1($690);
     $691 = $j;
     $692 = (($691) + 32)|0;
     $j = $692;
    }
   }
   $693 = $bottom;
   $694 = ($693|0)!=(0);
   if (!($694)) {
    $695 = $left;
    $696 = ($695|0)!=(0);
    $697 = $696 ? 0 : -32;
    $j = $697;
    while(1) {
     $698 = $j;
     $699 = $right;
     $700 = ($699|0)!=(0);
     $701 = $700 ? 0 : 32;
     $702 = ($698|0)<($701|0);
     if (!($702)) {
      break;
     }
     $703 = $p12;
     $704 = $j;
     $705 = (($703) + ($704<<2)|0);
     _strIDCT4x4Stage1($705);
     $706 = $j;
     $707 = (($706) + 32)|0;
     $j = $707;
    }
   }
   $708 = $olOverlap;
   $709 = (0)!=($708|0);
   if ($709) {
    $710 = $left;
    $711 = ($710|0)!=(0);
    do {
     if ($711) {
      label = 155;
     } else {
      $712 = $top;
      $713 = ($712|0)!=(0);
      if ($713) {
       label = 155;
       break;
      }
      $714 = $bottom;
      $715 = ($714|0)!=(0);
      if ($715) {
       $j = -48;
       while(1) {
        $716 = $j;
        $717 = $right;
        $718 = ($717|0)!=(0);
        $719 = $718 ? -16 : 16;
        $720 = ($716|0)<($719|0);
        if (!($720)) {
         break;
        }
        $721 = $p01;
        $722 = $j;
        $723 = (($721) + ($722<<2)|0);
        $p = $723;
        $724 = $p;
        $725 = (($724) + 60|0);
        $726 = $p;
        $727 = (($726) + 56|0);
        $728 = $p;
        $729 = (($728) + 168|0);
        $730 = $p;
        $731 = (($730) + 172|0);
        _strPost4($725,$727,$729,$731);
        $732 = $p;
        $733 = (($732) + 52|0);
        $734 = $p;
        $735 = (($734) + 48|0);
        $736 = $p;
        $737 = (($736) + 160|0);
        $738 = $p;
        $739 = (($738) + 164|0);
        _strPost4($733,$735,$737,$739);
        $p = 0;
        $740 = $j;
        $741 = (($740) + 32)|0;
        $j = $741;
       }
      } else {
       $j = -48;
       while(1) {
        $742 = $j;
        $743 = $right;
        $744 = ($743|0)!=(0);
        $745 = $744 ? -16 : 16;
        $746 = ($742|0)<($745|0);
        if (!($746)) {
         break;
        }
        $747 = $p01;
        $748 = $j;
        $749 = (($747) + ($748<<2)|0);
        $750 = $p12;
        $751 = (($750) + -64|0);
        $752 = $j;
        $753 = (($751) + ($752<<2)|0);
        $754 = $iHPQP3;
        $755 = $bHPAbsent;
        _strPost4x4Stage1Split($749,$753,32,$754,$755);
        $756 = $j;
        $757 = (($756) + 32)|0;
        $j = $757;
       }
      }
      $758 = $right;
      $759 = ($758|0)!=(0);
      if ($759) {
       $760 = $bottom;
       $761 = ($760|0)!=(0);
       if (!($761)) {
        $762 = $p01;
        $763 = (($762) + -8|0);
        $764 = $p01;
        $765 = (($764) + -16|0);
        $766 = $p12;
        $767 = (($766) + -112|0);
        $768 = $p12;
        $769 = (($768) + -104|0);
        _strPost4($763,$765,$767,$769);
        $770 = $p01;
        $771 = (($770) + -4|0);
        $772 = $p01;
        $773 = (($772) + -12|0);
        $774 = $p12;
        $775 = (($774) + -108|0);
        $776 = $p12;
        $777 = (($776) + -100|0);
        _strPost4($771,$773,$775,$777);
       }
       $778 = $p01;
       $779 = (($778) + -72|0);
       $780 = $p01;
       $781 = (($780) + -80|0);
       $782 = $p01;
       $783 = (($782) + -48|0);
       $784 = $p01;
       $785 = (($784) + -40|0);
       _strPost4($779,$781,$783,$785);
       $786 = $p01;
       $787 = (($786) + -68|0);
       $788 = $p01;
       $789 = (($788) + -76|0);
       $790 = $p01;
       $791 = (($790) + -44|0);
       $792 = $p01;
       $793 = (($792) + -36|0);
       _strPost4($787,$789,$791,$793);
      } else {
       $794 = $p01;
       $795 = (($794) + -128|0);
       $796 = $iHPQP3;
       $797 = $bHPAbsent;
       _strPost4x4Stage1($795,32,$796,$797);
      }
      $798 = $p01;
      $799 = (($798) + -256|0);
      $800 = $iHPQP3;
      $801 = $bHPAbsent;
      _strPost4x4Stage1($799,32,$800,$801);
     }
    } while(0);
    if ((label|0) == 155) {
     label = 0;
     $802 = $top;
     $803 = ($802|0)!=(0);
     if ($803) {
      $804 = $left;
      $805 = ($804|0)!=(0);
      $806 = $805 ? 0 : -64;
      $j = $806;
      while(1) {
       $807 = $j;
       $808 = $right;
       $809 = ($808|0)!=(0);
       $810 = $809 ? -32 : 0;
       $811 = ($807|0)<($810|0);
       if (!($811)) {
        break;
       }
       $812 = $p12;
       $813 = $j;
       $814 = (($812) + ($813<<2)|0);
       $815 = (($814) + 16|0);
       $p = $815;
       $816 = $p;
       $817 = (($816) + 4|0);
       $818 = $p;
       $819 = $p;
       $820 = (($819) + 112|0);
       $821 = $p;
       $822 = (($821) + 116|0);
       _strPost4($817,$818,$820,$822);
       $823 = $p;
       $824 = (($823) + 12|0);
       $825 = $p;
       $826 = (($825) + 8|0);
       $827 = $p;
       $828 = (($827) + 120|0);
       $829 = $p;
       $830 = (($829) + 124|0);
       _strPost4($824,$826,$828,$830);
       $p = 0;
       $831 = $j;
       $832 = (($831) + 32)|0;
       $j = $832;
      }
     } else {
      $833 = $left;
      $834 = ($833|0)!=(0);
      if ($834) {
       $835 = $bottom;
       $836 = ($835|0)!=(0);
       if (!($836)) {
        $837 = $p01;
        $838 = (($837) + 104|0);
        $839 = $p01;
        $840 = (($839) + 96|0);
        $841 = $p12;
        $842 = $p12;
        $843 = (($842) + 8|0);
        _strPost4($838,$840,$841,$843);
        $844 = $p01;
        $845 = (($844) + 108|0);
        $846 = $p01;
        $847 = (($846) + 100|0);
        $848 = $p12;
        $849 = (($848) + 4|0);
        $850 = $p12;
        $851 = (($850) + 12|0);
        _strPost4($845,$847,$849,$851);
       }
       $852 = $p01;
       $853 = (($852) + 40|0);
       $854 = $p01;
       $855 = (($854) + 32|0);
       $856 = $p01;
       $857 = (($856) + 64|0);
       $858 = $p01;
       $859 = (($858) + 72|0);
       _strPost4($853,$855,$857,$859);
       $860 = $p01;
       $861 = (($860) + 44|0);
       $862 = $p01;
       $863 = (($862) + 36|0);
       $864 = $p01;
       $865 = (($864) + 68|0);
       $866 = $p01;
       $867 = (($866) + 76|0);
       _strPost4($861,$863,$865,$867);
      }
     }
    }
   }
  }
  $868 = $i;
  $869 = (($868) + 1)|0;
  $i = $869;
 }
 $i = 0;
 while(1) {
  $870 = $i;
  $871 = $cfColorFormat;
  $872 = (2)==($871|0);
  $873 = $872 ? 2 : 0;
  $874 = ($870>>>0)<($873>>>0);
  if ($874) {
   $875 = $tScale;
   $876 = ($875>>>0)<(16);
   $1284 = $876;
  } else {
   $1284 = 0;
  }
  if (!($1284)) {
   break;
  }
  $877 = $i;
  $878 = (1 + ($877))|0;
  $879 = $0;
  $880 = (($879) + 34692|0);
  $881 = (($880) + ($878<<2)|0);
  $882 = HEAP32[$881>>2]|0;
  $p04 = $882;
  $883 = $i;
  $884 = (1 + ($883))|0;
  $885 = $0;
  $886 = (($885) + 34756|0);
  $887 = (($886) + ($884<<2)|0);
  $888 = HEAP32[$887>>2]|0;
  $p15 = $888;
  $iHPQP6 = 255;
  $889 = $bHPAbsent;
  $890 = ($889|0)!=(0);
  if (!($890)) {
   $891 = $0;
   $892 = (($891) + 32976|0);
   $893 = (($892) + 1157|0);
   $894 = HEAP8[$893>>0]|0;
   $895 = $894&255;
   $896 = $i;
   $897 = $0;
   $898 = (($897) + 34296|0);
   $899 = HEAP32[$898>>2]|0;
   $900 = $0;
   $901 = (($900) + 34316|0);
   $902 = HEAP32[$901>>2]|0;
   $903 = (($902) + (($899*240)|0)|0);
   $904 = (($903) + 128|0);
   $905 = (($904) + ($896<<2)|0);
   $906 = HEAP32[$905>>2]|0;
   $907 = (($906) + (($895*20)|0)|0);
   $908 = (($907) + 4|0);
   $909 = HEAP32[$908>>2]|0;
   $iHPQP6 = $909;
  }
  $910 = $bottomORright;
  $911 = ($910|0)!=(0);
  if (!($911)) {
   $912 = $0;
   $913 = (($912) + 34248|0);
   $914 = HEAP32[$913>>2]|0;
   $915 = (($914) + 12|0);
   $916 = HEAP32[$915>>2]|0;
   $917 = ($916>>>0)<(16);
   if ($917) {
    $918 = $p15;
    $919 = (($918) + 128|0);
    $920 = HEAP32[$919>>2]|0;
    $921 = (($920) + 1)|0;
    $922 = $921 >> 1;
    $923 = $p15;
    $924 = HEAP32[$923>>2]|0;
    $925 = (($924) - ($922))|0;
    HEAP32[$923>>2] = $925;
    $926 = $p15;
    $927 = HEAP32[$926>>2]|0;
    $928 = $p15;
    $929 = (($928) + 128|0);
    $930 = HEAP32[$929>>2]|0;
    $931 = (($930) + ($927))|0;
    HEAP32[$929>>2] = $931;
    $932 = $0;
    $933 = (($932) + 34136|0);
    $934 = (($933) + 20|0);
    $935 = HEAP32[$934>>2]|0;
    $936 = ($935|0)!=(0);
    if ($936) {
     $952 = $p15;
     $953 = $p15;
     $954 = (($953) + 256|0);
     $955 = $p15;
     $956 = (($955) + 64|0);
     $957 = $p15;
     $958 = (($957) + 320|0);
     _strDCT2x2dnDec($952,$954,$956,$958);
     $959 = $p15;
     $960 = (($959) + 128|0);
     $961 = $p15;
     $962 = (($961) + 384|0);
     $963 = $p15;
     $964 = (($963) + 192|0);
     $965 = $p15;
     $966 = (($965) + 448|0);
     _strDCT2x2dnDec($960,$962,$964,$966);
    } else {
     $937 = $p15;
     $938 = $p15;
     $939 = (($938) + 256|0);
     $940 = $p15;
     $941 = (($940) + 64|0);
     $942 = $p15;
     $943 = (($942) + 320|0);
     _strDCT2x2dn($937,$939,$941,$943);
     $944 = $p15;
     $945 = (($944) + 128|0);
     $946 = $p15;
     $947 = (($946) + 384|0);
     $948 = $p15;
     $949 = (($948) + 192|0);
     $950 = $p15;
     $951 = (($950) + 448|0);
     _strDCT2x2dn($945,$947,$949,$951);
    }
   }
  }
  $967 = $olOverlap;
  $968 = (2)==($967|0);
  if ($968) {
   $969 = $bottom;
   $970 = ($969|0)!=(0);
   if ($970) {
    $1015 = $leftORright;
    $1016 = ($1015|0)!=(0);
    if (!($1016)) {
     $1017 = $p04;
     $1018 = (($1017) + -64|0);
     $1019 = $p04;
     $1020 = (($1019) + 192|0);
     _strPost2($1018,$1020);
    }
   } else {
    $971 = $leftORright;
    $972 = ($971|0)!=(0);
    if ($972) {
     $973 = $top;
     $974 = ($973|0)!=(0);
     if (!($974)) {
      $975 = $left;
      $976 = ($975|0)!=(0);
      $977 = $976 ? 0 : -64;
      $j = $977;
      $978 = $p04;
      $979 = (($978) + 192|0);
      $980 = $j;
      $981 = (($979) + ($980<<2)|0);
      $982 = $p15;
      $983 = $j;
      $984 = (($982) + ($983<<2)|0);
      _strPost2($981,$984);
     }
     $985 = $left;
     $986 = ($985|0)!=(0);
     $987 = $986 ? 16 : -48;
     $j = $987;
     $988 = $p15;
     $989 = $j;
     $990 = (($988) + ($989<<2)|0);
     $991 = $p15;
     $992 = $j;
     $993 = (($991) + ($992<<2)|0);
     $994 = (($993) + 64|0);
     _strPost2($990,$994);
    } else {
     $995 = $top;
     $996 = ($995|0)!=(0);
     if ($996) {
      $997 = $p15;
      $998 = (($997) + -256|0);
      $999 = $p15;
      _strPost2($998,$999);
     } else {
      $1000 = $p04;
      $1001 = (($1000) + -64|0);
      $1002 = $p04;
      $1003 = (($1002) + 192|0);
      $1004 = $p15;
      $1005 = (($1004) + -256|0);
      $1006 = $p15;
      _strPost2x2($1001,$1003,$1005,$1006);
     }
     $1007 = $p15;
     $1008 = (($1007) + -192|0);
     $1009 = $p15;
     $1010 = (($1009) + 64|0);
     $1011 = $p15;
     $1012 = (($1011) + -128|0);
     $1013 = $p15;
     $1014 = (($1013) + 128|0);
     _strPost2x2($1008,$1010,$1012,$1014);
    }
   }
  }
  $1021 = $tScale;
  $1022 = ($1021>>>0)>=(4);
  if ($1022) {
  } else {
   $1023 = $top;
   $1024 = ($1023|0)!=(0);
   if (!($1024)) {
    $1025 = $left;
    $1026 = ($1025|0)!=(0);
    $1027 = $1026 ? 48 : -16;
    $j = $1027;
    while(1) {
     $1028 = $j;
     $1029 = $right;
     $1030 = ($1029|0)!=(0);
     $1031 = $1030 ? 48 : 112;
     $1032 = ($1028|0)<($1031|0);
     if (!($1032)) {
      break;
     }
     $1033 = $p04;
     $1034 = $j;
     $1035 = (($1033) + ($1034<<2)|0);
     _strIDCT4x4Stage1($1035);
     $1036 = $j;
     $1037 = (($1036) + 64)|0;
     $j = $1037;
    }
   }
   $1038 = $bottom;
   $1039 = ($1038|0)!=(0);
   if (!($1039)) {
    $1040 = $left;
    $1041 = ($1040|0)!=(0);
    $1042 = $1041 ? 0 : -64;
    $j = $1042;
    while(1) {
     $1043 = $j;
     $1044 = $right;
     $1045 = ($1044|0)!=(0);
     $1046 = $1045 ? 0 : 64;
     $1047 = ($1043|0)<($1046|0);
     if (!($1047)) {
      break;
     }
     $1048 = $p15;
     $1049 = $j;
     $1050 = (($1048) + ($1049<<2)|0);
     _strIDCT4x4Stage1($1050);
     $1051 = $p15;
     $1052 = $j;
     $1053 = (($1051) + ($1052<<2)|0);
     $1054 = (($1053) + 64|0);
     _strIDCT4x4Stage1($1054);
     $1055 = $p15;
     $1056 = $j;
     $1057 = (($1055) + ($1056<<2)|0);
     $1058 = (($1057) + 128|0);
     _strIDCT4x4Stage1($1058);
     $1059 = $j;
     $1060 = (($1059) + 64)|0;
     $j = $1060;
    }
   }
   $1061 = $olOverlap;
   $1062 = (0)!=($1061|0);
   if ($1062) {
    $1063 = $top;
    $1064 = ($1063|0)!=(0);
    if (!($1064)) {
     $1065 = $leftORright;
     $1066 = ($1065|0)!=(0);
     if ($1066) {
      $1067 = $left;
      $1068 = ($1067|0)!=(0);
      $1069 = $1068 ? 42 : -18;
      $j = $1069;
      $1070 = $p04;
      $1071 = $j;
      $1072 = (($1070) + ($1071<<2)|0);
      $p = $1072;
      $1073 = $p;
      $1074 = $p;
      $1075 = (($1074) + -8|0);
      $1076 = $p;
      $1077 = (($1076) + 24|0);
      $1078 = $p;
      $1079 = (($1078) + 32|0);
      _strPost4($1073,$1075,$1077,$1079);
      $1080 = $p;
      $1081 = (($1080) + 4|0);
      $1082 = $p;
      $1083 = (($1082) + -4|0);
      $1084 = $p;
      $1085 = (($1084) + 28|0);
      $1086 = $p;
      $1087 = (($1086) + 36|0);
      _strPost4($1081,$1083,$1085,$1087);
      $p = 0;
     }
     $1088 = $left;
     $1089 = ($1088|0)!=(0);
     $1090 = $1089 ? 0 : -128;
     $j = $1090;
     while(1) {
      $1091 = $j;
      $1092 = $right;
      $1093 = ($1092|0)!=(0);
      $1094 = $1093 ? -64 : 0;
      $1095 = ($1091|0)<($1094|0);
      if (!($1095)) {
       break;
      }
      $1096 = $p04;
      $1097 = $j;
      $1098 = (($1096) + ($1097<<2)|0);
      $1099 = (($1098) + 128|0);
      $1100 = $iHPQP6;
      $1101 = $bHPAbsent;
      _strPost4x4Stage1($1099,0,$1100,$1101);
      $1102 = $j;
      $1103 = (($1102) + 64)|0;
      $j = $1103;
     }
    }
    $1104 = $bottom;
    $1105 = ($1104|0)!=(0);
    if (!($1105)) {
     $1106 = $leftORright;
     $1107 = ($1106|0)!=(0);
     if ($1107) {
      $1108 = $left;
      $1109 = ($1108|0)!=(0);
      $1110 = $1109 ? 10 : -50;
      $j = $1110;
      $1111 = $p15;
      $1112 = $j;
      $1113 = (($1111) + ($1112<<2)|0);
      $p = $1113;
      $1114 = $p;
      $1115 = $p;
      $1116 = (($1115) + -8|0);
      $1117 = $p;
      $1118 = (($1117) + 24|0);
      $1119 = $p;
      $1120 = (($1119) + 32|0);
      _strPost4($1114,$1116,$1118,$1120);
      $1121 = $p;
      $1122 = (($1121) + 4|0);
      $1123 = $p;
      $1124 = (($1123) + -4|0);
      $1125 = $p;
      $1126 = (($1125) + 28|0);
      $1127 = $p;
      $1128 = (($1127) + 36|0);
      _strPost4($1122,$1124,$1126,$1128);
      $1129 = $p;
      $1130 = (($1129) + 64|0);
      $p = $1130;
      $1131 = $p;
      $1132 = $p;
      $1133 = (($1132) + -8|0);
      $1134 = $p;
      $1135 = (($1134) + 24|0);
      $1136 = $p;
      $1137 = (($1136) + 32|0);
      _strPost4($1131,$1133,$1135,$1137);
      $1138 = $p;
      $1139 = (($1138) + 4|0);
      $1140 = $p;
      $1141 = (($1140) + -4|0);
      $1142 = $p;
      $1143 = (($1142) + 28|0);
      $1144 = $p;
      $1145 = (($1144) + 36|0);
      _strPost4($1139,$1141,$1143,$1145);
      $p = 0;
     }
     $1146 = $left;
     $1147 = ($1146|0)!=(0);
     $1148 = $1147 ? 0 : -128;
     $j = $1148;
     while(1) {
      $1149 = $j;
      $1150 = $right;
      $1151 = ($1150|0)!=(0);
      $1152 = $1151 ? -64 : 0;
      $1153 = ($1149|0)<($1152|0);
      if (!($1153)) {
       break;
      }
      $1154 = $p15;
      $1155 = $j;
      $1156 = (($1154) + ($1155<<2)|0);
      $1157 = $iHPQP6;
      $1158 = $bHPAbsent;
      _strPost4x4Stage1($1156,0,$1157,$1158);
      $1159 = $p15;
      $1160 = $j;
      $1161 = (($1159) + ($1160<<2)|0);
      $1162 = (($1161) + 64|0);
      $1163 = $iHPQP6;
      $1164 = $bHPAbsent;
      _strPost4x4Stage1($1162,0,$1163,$1164);
      $1165 = $j;
      $1166 = (($1165) + 64)|0;
      $j = $1166;
     }
    }
    $1167 = $topORbottom;
    $1168 = ($1167|0)!=(0);
    if ($1168) {
     $1169 = $top;
     $1170 = ($1169|0)!=(0);
     if ($1170) {
      $1171 = $p15;
      $1172 = (($1171) + 20|0);
      $1176 = $1172;
     } else {
      $1173 = $p04;
      $1174 = (($1173) + 192|0);
      $1175 = (($1174) + 52|0);
      $1176 = $1175;
     }
     $p = $1176;
     $1177 = $left;
     $1178 = ($1177|0)!=(0);
     $1179 = $1178 ? 0 : -128;
     $j = $1179;
     while(1) {
      $1180 = $j;
      $1181 = $right;
      $1182 = ($1181|0)!=(0);
      $1183 = $1182 ? -64 : 0;
      $1184 = ($1180|0)<($1183|0);
      if (!($1184)) {
       break;
      }
      $1185 = $p;
      $1186 = $j;
      $1187 = (($1185) + ($1186<<2)|0);
      $1188 = $p;
      $1189 = $j;
      $1190 = (($1188) + ($1189<<2)|0);
      $1191 = (($1190) + -4|0);
      $1192 = $p;
      $1193 = $j;
      $1194 = (($1192) + ($1193<<2)|0);
      $1195 = (($1194) + 236|0);
      $1196 = $p;
      $1197 = $j;
      $1198 = (($1196) + ($1197<<2)|0);
      $1199 = (($1198) + 240|0);
      _strPost4($1187,$1191,$1195,$1199);
      $1200 = $p;
      $1201 = $j;
      $1202 = (($1200) + ($1201<<2)|0);
      $1203 = (($1202) + 8|0);
      $1204 = $p;
      $1205 = $j;
      $1206 = (($1204) + ($1205<<2)|0);
      $1207 = (($1206) + 4|0);
      $1208 = $p;
      $1209 = $j;
      $1210 = (($1208) + ($1209<<2)|0);
      $1211 = (($1210) + 244|0);
      $1212 = $p;
      $1213 = $j;
      $1214 = (($1212) + ($1213<<2)|0);
      $1215 = (($1214) + 248|0);
      _strPost4($1203,$1207,$1211,$1215);
      $1216 = $j;
      $1217 = (($1216) + 64)|0;
      $j = $1217;
     }
     $p = 0;
    } else {
     $1218 = $leftORright;
     $1219 = ($1218|0)!=(0);
     if ($1219) {
      $1220 = $left;
      $1221 = ($1220|0)!=(0);
      $1222 = $1221 ? 0 : -60;
      $j = $1222;
      $1223 = $p04;
      $1224 = $j;
      $1225 = (($1223) + ($1224<<2)|0);
      $1226 = (($1225) + 192|0);
      $1227 = (($1226) + 40|0);
      $1228 = $p04;
      $1229 = $j;
      $1230 = (($1228) + ($1229<<2)|0);
      $1231 = (($1230) + 192|0);
      $1232 = (($1231) + 40|0);
      $1233 = (($1232) + -8|0);
      $1234 = $p15;
      $1235 = $j;
      $1236 = (($1234) + ($1235<<2)|0);
      $1237 = $p15;
      $1238 = $j;
      $1239 = (($1237) + ($1238<<2)|0);
      $1240 = (($1239) + 8|0);
      _strPost4($1227,$1233,$1236,$1240);
      $1241 = $p04;
      $1242 = $j;
      $1243 = (($1241) + ($1242<<2)|0);
      $1244 = (($1243) + 192|0);
      $1245 = (($1244) + 40|0);
      $1246 = (($1245) + 4|0);
      $1247 = $p04;
      $1248 = $j;
      $1249 = (($1247) + ($1248<<2)|0);
      $1250 = (($1249) + 192|0);
      $1251 = (($1250) + 40|0);
      $1252 = (($1251) + -4|0);
      $1253 = $p15;
      $1254 = $j;
      $1255 = (($1253) + ($1254<<2)|0);
      $1256 = (($1255) + 4|0);
      $1257 = $p15;
      $1258 = $j;
      $1259 = (($1257) + ($1258<<2)|0);
      $1260 = (($1259) + 12|0);
      _strPost4($1246,$1252,$1256,$1260);
     }
     $1261 = $left;
     $1262 = ($1261|0)!=(0);
     $1263 = $1262 ? 0 : -128;
     $j = $1263;
     while(1) {
      $1264 = $j;
      $1265 = $right;
      $1266 = ($1265|0)!=(0);
      $1267 = $1266 ? -64 : 0;
      $1268 = ($1264|0)<($1267|0);
      if (!($1268)) {
       break;
      }
      $1269 = $p04;
      $1270 = $j;
      $1271 = (($1269) + ($1270<<2)|0);
      $1272 = (($1271) + 192|0);
      $1273 = $p15;
      $1274 = $j;
      $1275 = (($1273) + ($1274<<2)|0);
      $1276 = $iHPQP6;
      $1277 = $bHPAbsent;
      _strPost4x4Stage1Split($1272,$1275,0,$1276,$1277);
      $1278 = $j;
      $1279 = (($1278) + 64)|0;
      $j = $1279;
     }
    }
   }
  }
  $1280 = $i;
  $1281 = (($1280) + 1)|0;
  $i = $1281;
 }
 STACKTOP = sp;return 0;
}
function _invTransformMacroblock_alteredOperators_hard($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0;
 var $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0;
 var $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0;
 var $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0;
 var $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0;
 var $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0;
 var $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bottom = 0, $bottomORright = 0, $cfColorFormat = 0, $dcqp = 0, $i = 0, $iChannels = 0, $iStrength = 0, $j = 0, $left = 0, $leftAdjacentColumn = 0, $leftORright = 0, $mbWidth = 0, $olOverlap = 0;
 var $p = 0, $p0 = 0, $p01 = 0, $p03 = 0, $p1 = 0, $p12 = 0, $p14 = 0, $qp = 0, $right = 0, $rightAdjacentColumn = 0, $tScale = 0, $top = 0, $topORbottom = 0, $topORleft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $qp = sp + 16|0;
 $dcqp = sp + 80|0;
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 84|0);
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $olOverlap = $4;
 $5 = $0;
 $6 = (($5) + 34136|0);
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $cfColorFormat = $8;
 $9 = $0;
 $10 = (($9) + 34360|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 $13 = $12&1;
 $left = $13;
 $14 = $0;
 $15 = (($14) + 34360|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (($17) + 34364|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)==($19|0);
 $21 = $20&1;
 $right = $21;
 $22 = $0;
 $23 = (($22) + 34356|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 $26 = $25&1;
 $top = $26;
 $27 = $0;
 $28 = (($27) + 34356|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = (($30) + 34368|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($29|0)==($32|0);
 $34 = $33&1;
 $bottom = $34;
 $35 = $top;
 $36 = ($35|0)!=(0);
 if ($36) {
  $40 = 1;
 } else {
  $37 = $bottom;
  $38 = ($37|0)!=(0);
  $40 = $38;
 }
 $39 = $40&1;
 $topORbottom = $39;
 $41 = $left;
 $42 = ($41|0)!=(0);
 if ($42) {
  $46 = 1;
 } else {
  $43 = $right;
  $44 = ($43|0)!=(0);
  $46 = $44;
 }
 $45 = $46&1;
 $leftORright = $45;
 $47 = $top;
 $48 = ($47|0)!=(0);
 if ($48) {
  $52 = 1;
 } else {
  $49 = $left;
  $50 = ($49|0)!=(0);
  $52 = $50;
 }
 $51 = $52&1;
 $topORleft = $51;
 $53 = $bottom;
 $54 = ($53|0)!=(0);
 if ($54) {
  $58 = 1;
 } else {
  $55 = $right;
  $56 = ($55|0)!=(0);
  $58 = $56;
 }
 $57 = $58&1;
 $bottomORright = $57;
 $59 = $0;
 $60 = (($59) + 34360|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(1);
 $63 = $62&1;
 $leftAdjacentColumn = $63;
 $64 = $0;
 $65 = (($64) + 34360|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $0;
 $68 = (($67) + 34364|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) - 1)|0;
 $71 = ($66|0)==($70|0);
 $72 = $71&1;
 $rightAdjacentColumn = $72;
 $73 = $0;
 $74 = (($73) + 34364|0);
 $75 = HEAP32[$74>>2]|0;
 $mbWidth = $75;
 $p = 0;
 $76 = $cfColorFormat;
 $77 = ($76|0)==(1);
 if ($77) {
  label = 11;
 } else {
  $78 = $cfColorFormat;
  $79 = ($78|0)==(2);
  if ($79) {
   label = 11;
  } else {
   $80 = $0;
   $81 = (($80) + 34136|0);
   $82 = (($81) + 36|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83;
  }
 }
 if ((label|0) == 11) {
  $84 = 1;
 }
 $iChannels = $84;
 $85 = $0;
 $86 = (($85) + 34248|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($87) + 12|0);
 $89 = HEAP32[$88>>2]|0;
 $tScale = $89;
 $j = 0;
 $90 = $0;
 $91 = (($90) + 4|0);
 $92 = (($91) + 68|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = 1 << $94;
 $iStrength = $95;
 $96 = $0;
 $97 = (($96) + 84|0);
 $98 = (($97) + 32848|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)!=(0);
 if ($100) {
  $101 = $0;
  $102 = (($101) + 34360|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(0);
  if ($104) {
   $105 = $0;
   $106 = (($105) + 34400|0);
   HEAP32[$106>>2] = 0;
   $107 = $0;
   $108 = (($107) + 34396|0);
   HEAP32[$108>>2] = 0;
  }
  $109 = $0;
  $110 = (($109) + 34412|0);
  HEAP32[$110>>2] = 0;
  $111 = $0;
  $112 = (($111) + 34408|0);
  HEAP32[$112>>2] = 0;
  $113 = $0;
  $114 = (($113) + 34396|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115>>>0)>(0);
  if ($116) {
   $117 = $0;
   $118 = (($117) + 34396|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $0;
   $121 = (($120) + 84|0);
   $122 = (($121) + 16452|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ($119>>>0)<=($123>>>0);
   if ($124) {
    $125 = $0;
    $126 = (($125) + 34360|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (($127) - 1)|0;
    $129 = $0;
    $130 = (($129) + 34396|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = $0;
    $133 = (($132) + 84|0);
    $134 = (($133) + 16456|0);
    $135 = (($134) + ($131<<2)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($128|0)==($136|0);
    if ($137) {
     $138 = $0;
     $139 = (($138) + 34412|0);
     HEAP32[$139>>2] = 1;
    }
   }
  }
  $140 = $0;
  $141 = (($140) + 34396|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $0;
  $144 = (($143) + 84|0);
  $145 = (($144) + 16452|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($142>>>0)<($146>>>0);
  if ($147) {
   $148 = $0;
   $149 = (($148) + 34360|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $0;
   $152 = (($151) + 34396|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($153) + 1)|0;
   $155 = $0;
   $156 = (($155) + 84|0);
   $157 = (($156) + 16456|0);
   $158 = (($157) + ($154<<2)|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($150|0)==($159|0);
   if ($160) {
    $161 = $0;
    $162 = (($161) + 34400|0);
    HEAP32[$162>>2] = 1;
    $163 = $0;
    $164 = (($163) + 34396|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($165) + 1)|0;
    HEAP32[$164>>2] = $166;
   } else {
    label = 23;
   }
  } else {
   label = 23;
  }
  if ((label|0) == 23) {
   $167 = $0;
   $168 = (($167) + 34400|0);
   HEAP32[$168>>2] = 0;
  }
  $169 = $0;
  $170 = (($169) + 34396|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = $0;
  $173 = (($172) + 84|0);
  $174 = (($173) + 16452|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ($171>>>0)<($175>>>0);
  if ($176) {
   $177 = $0;
   $178 = (($177) + 34360|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($179) + 1)|0;
   $181 = $0;
   $182 = (($181) + 34396|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = (($183) + 1)|0;
   $185 = $0;
   $186 = (($185) + 84|0);
   $187 = (($186) + 16456|0);
   $188 = (($187) + ($184<<2)|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($180|0)==($189|0);
   if ($190) {
    $191 = $0;
    $192 = (($191) + 34408|0);
    HEAP32[$192>>2] = 1;
   }
  }
  $193 = $0;
  $194 = (($193) + 34356|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ($195|0)==(0);
  if ($196) {
   $197 = $0;
   $198 = (($197) + 34404|0);
   HEAP32[$198>>2] = 0;
   $199 = $0;
   $200 = (($199) + 34392|0);
   HEAP32[$200>>2] = 0;
  } else {
   $201 = $0;
   $202 = (($201) + 34380|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = $0;
   $205 = (($204) + 34356|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ($203|0)!=($206|0);
   if ($207) {
    $208 = $0;
    $209 = (($208) + 34392|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = $0;
    $212 = (($211) + 84|0);
    $213 = (($212) + 64|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = ($210>>>0)<($214>>>0);
    if ($215) {
     $216 = $0;
     $217 = (($216) + 34356|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = $0;
     $220 = (($219) + 34392|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + 1)|0;
     $223 = $0;
     $224 = (($223) + 84|0);
     $225 = (($224) + 68|0);
     $226 = (($225) + ($222<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = ($218|0)==($227|0);
     if ($228) {
      $229 = $0;
      $230 = (($229) + 34404|0);
      HEAP32[$230>>2] = 1;
      $231 = $0;
      $232 = (($231) + 34392|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = (($233) + 1)|0;
      HEAP32[$232>>2] = $234;
     } else {
      label = 33;
     }
    } else {
     label = 33;
    }
   } else {
    label = 33;
   }
   if ((label|0) == 33) {
    $235 = $0;
    $236 = (($235) + 34380|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = $0;
    $239 = (($238) + 34356|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ($237|0)!=($240|0);
    if ($241) {
     $242 = $0;
     $243 = (($242) + 34404|0);
     HEAP32[$243>>2] = 0;
    }
   }
  }
 } else {
  $244 = $0;
  $245 = (($244) + 34400|0);
  HEAP32[$245>>2] = 0;
  $246 = $0;
  $247 = (($246) + 34404|0);
  HEAP32[$247>>2] = 0;
  $248 = $0;
  $249 = (($248) + 34408|0);
  HEAP32[$249>>2] = 0;
  $250 = $0;
  $251 = (($250) + 34412|0);
  HEAP32[$251>>2] = 0;
 }
 $252 = $0;
 $253 = (($252) + 34360|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = $0;
 $256 = (($255) + 34376|0);
 HEAP32[$256>>2] = $254;
 $257 = $0;
 $258 = (($257) + 34356|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = $0;
 $261 = (($260) + 34380|0);
 HEAP32[$261>>2] = $259;
 $262 = $0;
 $263 = (($262) + 4|0);
 $264 = (($263) + 68|0);
 $265 = HEAP8[$264>>0]|0;
 $266 = $265&255;
 $267 = ($266|0)>(0);
 if ($267) {
  $i = 0;
  while(1) {
   $268 = $i;
   $269 = $iChannels;
   $270 = ($268>>>0)<($269>>>0);
   if (!($270)) {
    break;
   }
   $271 = $0;
   $272 = (($271) + 32976|0);
   $273 = (($272) + 1156|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = $274&255;
   $276 = $i;
   $277 = $0;
   $278 = (($277) + 34296|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $0;
   $281 = (($280) + 34316|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + (($279*240)|0)|0);
   $284 = (($283) + 64|0);
   $285 = (($284) + ($276<<2)|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) + (($275*20)|0)|0);
   $288 = (($287) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $iStrength;
   $291 = Math_imul($289, $290)|0;
   $292 = $olOverlap;
   $293 = ($292|0)==(0);
   $294 = $293 ? 2 : 1;
   $295 = Math_imul($291, $294)|0;
   $296 = $i;
   $297 = (($qp) + ($296<<2)|0);
   HEAP32[$297>>2] = $295;
   $298 = $i;
   $299 = $0;
   $300 = (($299) + 34296|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = $0;
   $303 = (($302) + 34316|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = (($304) + (($301*240)|0)|0);
   $306 = (($305) + ($298<<2)|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = (($307) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = $iStrength;
   $311 = Math_imul($309, $310)|0;
   $312 = $i;
   $313 = (($dcqp) + ($312<<2)|0);
   HEAP32[$313>>2] = $311;
   $314 = $i;
   $315 = (($314) + 1)|0;
   $i = $315;
  }
  $316 = $left;
  $317 = ($316|0)!=(0);
  if ($317) {
   $318 = $0;
   $319 = (($318) + 35040|0);
   $320 = $0;
   $321 = (($320) + 34136|0);
   $322 = (($321) + 36|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $mbWidth;
   $325 = $top;
   $326 = $bottom;
   _slideOneMBRow($319,$323,$324,$325,$326);
  }
 }
 $i = 0;
 while(1) {
  $327 = $i;
  $328 = $iChannels;
  $329 = ($327>>>0)<($328>>>0);
  if ($329) {
   $330 = $tScale;
   $331 = ($330>>>0)<(16);
   $2864 = $331;
  } else {
   $2864 = 0;
  }
  if (!($2864)) {
   break;
  }
  $332 = $i;
  $333 = $0;
  $334 = (($333) + 34692|0);
  $335 = (($334) + ($332<<2)|0);
  $336 = HEAP32[$335>>2]|0;
  $p0 = $336;
  $337 = $i;
  $338 = $0;
  $339 = (($338) + 34756|0);
  $340 = (($339) + ($337<<2)|0);
  $341 = HEAP32[$340>>2]|0;
  $p1 = $341;
  $342 = $bottomORright;
  $343 = ($342|0)!=(0);
  if (!($343)) {
   $344 = $0;
   $345 = (($344) + 4|0);
   $346 = (($345) + 68|0);
   $347 = HEAP8[$346>>0]|0;
   $348 = $347&255;
   $349 = ($348|0)>(0);
   if ($349) {
    $350 = $0;
    $351 = (($350) + 35040|0);
    $352 = $p1;
    $353 = $0;
    $354 = (($353) + 34376|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = $i;
    _updatePostProcInfo($351,$352,$355,$356);
   }
   $357 = $p1;
   _strIDCT4x4Stage2($357);
   $358 = $0;
   $359 = (($358) + 34136|0);
   $360 = (($359) + 20|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = ($361|0)!=(0);
   if ($362) {
    $363 = $p1;
    $364 = $i;
    $365 = ($364|0)!=(0);
    $366 = $365&1;
    _strNormalizeDec($363,$366);
   }
  }
  $367 = $olOverlap;
  $368 = (2)==($367|0);
  if ($368) {
   $369 = $top;
   $370 = ($369|0)!=(0);
   if ($370) {
    label = 60;
   } else {
    $371 = $0;
    $372 = (($371) + 34404|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = ($373|0)!=(0);
    if ($374) {
     label = 60;
    }
   }
   do {
    if ((label|0) == 60) {
     label = 0;
     $375 = $left;
     $376 = ($375|0)!=(0);
     if (!($376)) {
      $377 = $0;
      $378 = (($377) + 34400|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = ($379|0)!=(0);
      if (!($380)) {
       break;
      }
     }
     $381 = $p1;
     $382 = $p1;
     $383 = (($382) + 256|0);
     $384 = $p1;
     $385 = (($384) + 64|0);
     $386 = $p1;
     $387 = (($386) + 256|0);
     $388 = (($387) + 64|0);
     _strPost4_alternate($381,$383,$385,$388);
    }
   } while(0);
   $389 = $top;
   $390 = ($389|0)!=(0);
   if ($390) {
    label = 65;
   } else {
    $391 = $0;
    $392 = (($391) + 34404|0);
    $393 = HEAP32[$392>>2]|0;
    $394 = ($393|0)!=(0);
    if ($394) {
     label = 65;
    }
   }
   do {
    if ((label|0) == 65) {
     label = 0;
     $395 = $right;
     $396 = ($395|0)!=(0);
     if (!($396)) {
      $397 = $0;
      $398 = (($397) + 34400|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = ($399|0)!=(0);
      if (!($400)) {
       break;
      }
     }
     $401 = $p1;
     $402 = (($401) + -512|0);
     $403 = $p1;
     $404 = (($403) + -256|0);
     $405 = $p1;
     $406 = (($405) + -512|0);
     $407 = (($406) + 64|0);
     $408 = $p1;
     $409 = (($408) + -256|0);
     $410 = (($409) + 64|0);
     _strPost4_alternate($402,$404,$407,$410);
    }
   } while(0);
   $411 = $bottom;
   $412 = ($411|0)!=(0);
   if ($412) {
    label = 70;
   } else {
    $413 = $0;
    $414 = (($413) + 34404|0);
    $415 = HEAP32[$414>>2]|0;
    $416 = ($415|0)!=(0);
    if ($416) {
     label = 70;
    }
   }
   do {
    if ((label|0) == 70) {
     label = 0;
     $417 = $left;
     $418 = ($417|0)!=(0);
     if (!($418)) {
      $419 = $0;
      $420 = (($419) + 34400|0);
      $421 = HEAP32[$420>>2]|0;
      $422 = ($421|0)!=(0);
      if (!($422)) {
       break;
      }
     }
     $423 = $p0;
     $424 = (($423) + 128|0);
     $425 = $p0;
     $426 = (($425) + 384|0);
     $427 = $p0;
     $428 = (($427) + 128|0);
     $429 = (($428) + 64|0);
     $430 = $p0;
     $431 = (($430) + 384|0);
     $432 = (($431) + 64|0);
     _strPost4_alternate($424,$426,$429,$432);
    }
   } while(0);
   $433 = $bottom;
   $434 = ($433|0)!=(0);
   if ($434) {
    label = 75;
   } else {
    $435 = $0;
    $436 = (($435) + 34404|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = ($437|0)!=(0);
    if ($438) {
     label = 75;
    }
   }
   do {
    if ((label|0) == 75) {
     label = 0;
     $439 = $right;
     $440 = ($439|0)!=(0);
     if (!($440)) {
      $441 = $0;
      $442 = (($441) + 34400|0);
      $443 = HEAP32[$442>>2]|0;
      $444 = ($443|0)!=(0);
      if (!($444)) {
       break;
      }
     }
     $445 = $p0;
     $446 = (($445) + -384|0);
     $447 = $p0;
     $448 = (($447) + -128|0);
     $449 = $p0;
     $450 = (($449) + -384|0);
     $451 = (($450) + 64|0);
     $452 = $p0;
     $453 = (($452) + -128|0);
     $454 = (($453) + 64|0);
     _strPost4_alternate($446,$448,$451,$454);
    }
   } while(0);
   $455 = $leftORright;
   $456 = ($455|0)!=(0);
   if ($456) {
    label = 80;
   } else {
    $457 = $0;
    $458 = (($457) + 34400|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = ($459|0)!=(0);
    if ($460) {
     label = 80;
    }
   }
   do {
    if ((label|0) == 80) {
     label = 0;
     $461 = $topORbottom;
     $462 = ($461|0)!=(0);
     if (!($462)) {
      $463 = $0;
      $464 = (($463) + 34404|0);
      $465 = HEAP32[$464>>2]|0;
      $466 = ($465|0)!=(0);
      if ($466) {
       break;
      }
      $467 = $left;
      $468 = ($467|0)!=(0);
      if ($468) {
       label = 84;
      } else {
       $469 = $0;
       $470 = (($469) + 34400|0);
       $471 = HEAP32[$470>>2]|0;
       $472 = ($471|0)!=(0);
       if ($472) {
        label = 84;
       }
      }
      if ((label|0) == 84) {
       label = 0;
       $j = 0;
       $473 = $p0;
       $474 = $j;
       $475 = (($473) + ($474<<2)|0);
       $476 = (($475) + 128|0);
       $477 = $p0;
       $478 = $j;
       $479 = (($477) + ($478<<2)|0);
       $480 = (($479) + 192|0);
       $481 = $p1;
       $482 = $j;
       $483 = (($481) + ($482<<2)|0);
       $484 = $p1;
       $485 = $j;
       $486 = (($484) + ($485<<2)|0);
       $487 = (($486) + 64|0);
       _strPost4_alternate($476,$480,$483,$487);
       $488 = $p0;
       $489 = $j;
       $490 = (($488) + ($489<<2)|0);
       $491 = (($490) + 384|0);
       $492 = $p0;
       $493 = $j;
       $494 = (($492) + ($493<<2)|0);
       $495 = (($494) + 448|0);
       $496 = $p1;
       $497 = $j;
       $498 = (($496) + ($497<<2)|0);
       $499 = (($498) + 256|0);
       $500 = $p1;
       $501 = $j;
       $502 = (($500) + ($501<<2)|0);
       $503 = (($502) + 320|0);
       _strPost4_alternate($491,$495,$499,$503);
      }
      $504 = $right;
      $505 = ($504|0)!=(0);
      if ($505) {
       label = 87;
      } else {
       $506 = $0;
       $507 = (($506) + 34400|0);
       $508 = HEAP32[$507>>2]|0;
       $509 = ($508|0)!=(0);
       if ($509) {
        label = 87;
       }
      }
      if ((label|0) == 87) {
       label = 0;
       $j = -128;
       $510 = $p0;
       $511 = $j;
       $512 = (($510) + ($511<<2)|0);
       $513 = (($512) + 128|0);
       $514 = $p0;
       $515 = $j;
       $516 = (($514) + ($515<<2)|0);
       $517 = (($516) + 192|0);
       $518 = $p1;
       $519 = $j;
       $520 = (($518) + ($519<<2)|0);
       $521 = $p1;
       $522 = $j;
       $523 = (($521) + ($522<<2)|0);
       $524 = (($523) + 64|0);
       _strPost4_alternate($513,$517,$520,$524);
       $525 = $p0;
       $526 = $j;
       $527 = (($525) + ($526<<2)|0);
       $528 = (($527) + 384|0);
       $529 = $p0;
       $530 = $j;
       $531 = (($529) + ($530<<2)|0);
       $532 = (($531) + 448|0);
       $533 = $p1;
       $534 = $j;
       $535 = (($533) + ($534<<2)|0);
       $536 = (($535) + 256|0);
       $537 = $p1;
       $538 = $j;
       $539 = (($537) + ($538<<2)|0);
       $540 = (($539) + 320|0);
       _strPost4_alternate($528,$532,$536,$540);
      }
     }
    }
   } while(0);
   $541 = $leftORright;
   $542 = ($541|0)!=(0);
   if (!($542)) {
    $543 = $topORbottom;
    $544 = ($543|0)!=(0);
    if ($544) {
     label = 92;
    } else {
     $545 = $0;
     $546 = (($545) + 34404|0);
     $547 = HEAP32[$546>>2]|0;
     $548 = ($547|0)!=(0);
     if ($548) {
      label = 92;
     }
    }
    do {
     if ((label|0) == 92) {
      label = 0;
      $549 = $0;
      $550 = (($549) + 34400|0);
      $551 = HEAP32[$550>>2]|0;
      $552 = ($551|0)!=(0);
      if ($552) {
       break;
      }
      $553 = $top;
      $554 = ($553|0)!=(0);
      if ($554) {
       label = 95;
      } else {
       $555 = $0;
       $556 = (($555) + 34404|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($557|0)!=(0);
       if ($558) {
        label = 95;
       }
      }
      if ((label|0) == 95) {
       label = 0;
       $559 = $p1;
       $p = $559;
       $560 = $p;
       $561 = (($560) + -512|0);
       $562 = $p;
       $563 = (($562) + -256|0);
       $564 = $p;
       $565 = $p;
       $566 = (($565) + 256|0);
       _strPost4_alternate($561,$563,$564,$566);
       $567 = $p;
       $568 = (($567) + -448|0);
       $569 = $p;
       $570 = (($569) + -192|0);
       $571 = $p;
       $572 = (($571) + 64|0);
       $573 = $p;
       $574 = (($573) + 320|0);
       _strPost4_alternate($568,$570,$572,$574);
       $p = 0;
      }
      $575 = $bottom;
      $576 = ($575|0)!=(0);
      if ($576) {
       label = 98;
      } else {
       $577 = $0;
       $578 = (($577) + 34404|0);
       $579 = HEAP32[$578>>2]|0;
       $580 = ($579|0)!=(0);
       if ($580) {
        label = 98;
       }
      }
      if ((label|0) == 98) {
       label = 0;
       $581 = $p0;
       $582 = (($581) + 128|0);
       $p = $582;
       $583 = $p;
       $584 = (($583) + -512|0);
       $585 = $p;
       $586 = (($585) + -256|0);
       $587 = $p;
       $588 = $p;
       $589 = (($588) + 256|0);
       _strPost4_alternate($584,$586,$587,$589);
       $590 = $p;
       $591 = (($590) + -448|0);
       $592 = $p;
       $593 = (($592) + -192|0);
       $594 = $p;
       $595 = (($594) + 64|0);
       $596 = $p;
       $597 = (($596) + 320|0);
       _strPost4_alternate($591,$593,$595,$597);
       $p = 0;
      }
     }
    } while(0);
    $598 = $topORbottom;
    $599 = ($598|0)!=(0);
    do {
     if (!($599)) {
      $600 = $0;
      $601 = (($600) + 34404|0);
      $602 = HEAP32[$601>>2]|0;
      $603 = ($602|0)!=(0);
      if ($603) {
       break;
      }
      $604 = $0;
      $605 = (($604) + 34400|0);
      $606 = HEAP32[$605>>2]|0;
      $607 = ($606|0)!=(0);
      if ($607) {
       break;
      }
      $608 = $p0;
      $609 = $p1;
      _strPost4x4Stage2Split_alternate($608,$609);
     }
    } while(0);
   }
  }
  $610 = $0;
  $611 = (($610) + 4|0);
  $612 = (($611) + 68|0);
  $613 = HEAP8[$612>>0]|0;
  $614 = $613&255;
  $615 = ($614|0)>(0);
  if ($615) {
   $616 = $0;
   $617 = (($616) + 35040|0);
   $618 = $p0;
   $619 = $p1;
   $620 = $0;
   $621 = (($620) + 34376|0);
   $622 = HEAP32[$621>>2]|0;
   $623 = $i;
   $624 = $i;
   $625 = (($dcqp) + ($624<<2)|0);
   $626 = HEAP32[$625>>2]|0;
   _postProcMB($617,$618,$619,$622,$623,$626);
  }
  $627 = $tScale;
  $628 = ($627>>>0)>=(4);
  if ($628) {
  } else {
   $629 = $top;
   $630 = ($629|0)!=(0);
   if (!($630)) {
    $631 = $left;
    $632 = ($631|0)!=(0);
    $633 = $632 ? 32 : -96;
    $j = $633;
    while(1) {
     $634 = $j;
     $635 = $right;
     $636 = ($635|0)!=(0);
     $637 = $636 ? 32 : 160;
     $638 = ($634|0)<($637|0);
     if (!($638)) {
      break;
     }
     $639 = $p0;
     $640 = $j;
     $641 = (($639) + ($640<<2)|0);
     _strIDCT4x4Stage1($641);
     $642 = $p0;
     $643 = $j;
     $644 = (($642) + ($643<<2)|0);
     $645 = (($644) + 64|0);
     _strIDCT4x4Stage1($645);
     $646 = $j;
     $647 = (($646) + 64)|0;
     $j = $647;
    }
   }
   $648 = $bottom;
   $649 = ($648|0)!=(0);
   if (!($649)) {
    $650 = $left;
    $651 = ($650|0)!=(0);
    $652 = $651 ? 0 : -128;
    $j = $652;
    while(1) {
     $653 = $j;
     $654 = $right;
     $655 = ($654|0)!=(0);
     $656 = $655 ? 0 : 128;
     $657 = ($653|0)<($656|0);
     if (!($657)) {
      break;
     }
     $658 = $p1;
     $659 = $j;
     $660 = (($658) + ($659<<2)|0);
     _strIDCT4x4Stage1($660);
     $661 = $p1;
     $662 = $j;
     $663 = (($661) + ($662<<2)|0);
     $664 = (($663) + 64|0);
     _strIDCT4x4Stage1($664);
     $665 = $j;
     $666 = (($665) + 64)|0;
     $j = $666;
    }
   }
   $667 = $olOverlap;
   $668 = (0)!=($667|0);
   if ($668) {
    $669 = $leftORright;
    $670 = ($669|0)!=(0);
    if ($670) {
     label = 125;
    } else {
     $671 = $0;
     $672 = (($671) + 34400|0);
     $673 = HEAP32[$672>>2]|0;
     $674 = ($673|0)!=(0);
     if ($674) {
      label = 125;
     }
    }
    if ((label|0) == 125) {
     label = 0;
     $675 = $top;
     $676 = ($675|0)!=(0);
     if ($676) {
      label = 127;
     } else {
      $677 = $0;
      $678 = (($677) + 34404|0);
      $679 = HEAP32[$678>>2]|0;
      $680 = ($679|0)!=(0);
      if ($680) {
       label = 127;
      }
     }
     do {
      if ((label|0) == 127) {
       label = 0;
       $681 = $left;
       $682 = ($681|0)!=(0);
       if (!($682)) {
        $683 = $0;
        $684 = (($683) + 34400|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = ($685|0)!=(0);
        if (!($686)) {
         break;
        }
       }
       $687 = $p1;
       $688 = $p1;
       $689 = (($688) + 4|0);
       $690 = $p1;
       $691 = (($690) + 8|0);
       $692 = $p1;
       $693 = (($692) + 12|0);
       _strPost4_alternate($687,$689,$691,$693);
      }
     } while(0);
     $694 = $top;
     $695 = ($694|0)!=(0);
     if ($695) {
      label = 132;
     } else {
      $696 = $0;
      $697 = (($696) + 34404|0);
      $698 = HEAP32[$697>>2]|0;
      $699 = ($698|0)!=(0);
      if ($699) {
       label = 132;
      }
     }
     do {
      if ((label|0) == 132) {
       label = 0;
       $700 = $right;
       $701 = ($700|0)!=(0);
       if (!($701)) {
        $702 = $0;
        $703 = (($702) + 34400|0);
        $704 = HEAP32[$703>>2]|0;
        $705 = ($704|0)!=(0);
        if (!($705)) {
         break;
        }
       }
       $706 = $p1;
       $707 = (($706) + -236|0);
       $708 = $p1;
       $709 = (($708) + -240|0);
       $710 = $p1;
       $711 = (($710) + -228|0);
       $712 = $p1;
       $713 = (($712) + -232|0);
       _strPost4_alternate($707,$709,$711,$713);
      }
     } while(0);
     $714 = $bottom;
     $715 = ($714|0)!=(0);
     if ($715) {
      label = 137;
     } else {
      $716 = $0;
      $717 = (($716) + 34404|0);
      $718 = HEAP32[$717>>2]|0;
      $719 = ($718|0)!=(0);
      if ($719) {
       label = 137;
      }
     }
     do {
      if ((label|0) == 137) {
       label = 0;
       $720 = $left;
       $721 = ($720|0)!=(0);
       if (!($721)) {
        $722 = $0;
        $723 = (($722) + 34400|0);
        $724 = HEAP32[$723>>2]|0;
        $725 = ($724|0)!=(0);
        if (!($725)) {
         break;
        }
       }
       $726 = $p0;
       $727 = (($726) + 192|0);
       $728 = (($727) + 40|0);
       $729 = $p0;
       $730 = (($729) + 192|0);
       $731 = (($730) + 44|0);
       $732 = $p0;
       $733 = (($732) + 192|0);
       $734 = (($733) + 32|0);
       $735 = $p0;
       $736 = (($735) + 192|0);
       $737 = (($736) + 36|0);
       _strPost4_alternate($728,$731,$734,$737);
      }
     } while(0);
     $738 = $bottom;
     $739 = ($738|0)!=(0);
     if ($739) {
      label = 142;
     } else {
      $740 = $0;
      $741 = (($740) + 34404|0);
      $742 = HEAP32[$741>>2]|0;
      $743 = ($742|0)!=(0);
      if ($743) {
       label = 142;
      }
     }
     do {
      if ((label|0) == 142) {
       label = 0;
       $744 = $right;
       $745 = ($744|0)!=(0);
       if (!($745)) {
        $746 = $0;
        $747 = (($746) + 34400|0);
        $748 = HEAP32[$747>>2]|0;
        $749 = ($748|0)!=(0);
        if (!($749)) {
         break;
        }
       }
       $750 = $p0;
       $751 = (($750) + -4|0);
       $752 = $p0;
       $753 = (($752) + -8|0);
       $754 = $p0;
       $755 = (($754) + -12|0);
       $756 = $p0;
       $757 = (($756) + -16|0);
       _strPost4_alternate($751,$753,$755,$757);
      }
     } while(0);
     $758 = $left;
     $759 = ($758|0)!=(0);
     if ($759) {
      label = 147;
     } else {
      $760 = $0;
      $761 = (($760) + 34400|0);
      $762 = HEAP32[$761>>2]|0;
      $763 = ($762|0)!=(0);
      if ($763) {
       label = 147;
      }
     }
     if ((label|0) == 147) {
      label = 0;
      $j = 10;
      $764 = $top;
      $765 = ($764|0)!=(0);
      if (!($765)) {
       $766 = $p0;
       $767 = (($766) + 64|0);
       $768 = $j;
       $769 = (($767) + ($768<<2)|0);
       $p = $769;
       $770 = $p;
       $771 = $p;
       $772 = (($771) + -8|0);
       $773 = $p;
       $774 = (($773) + 24|0);
       $775 = $p;
       $776 = (($775) + 32|0);
       _strPost4_alternate($770,$772,$774,$776);
       $777 = $p;
       $778 = (($777) + 4|0);
       $779 = $p;
       $780 = (($779) + -4|0);
       $781 = $p;
       $782 = (($781) + 28|0);
       $783 = $p;
       $784 = (($783) + 36|0);
       _strPost4_alternate($778,$780,$782,$784);
       $785 = $p;
       $786 = (($785) + 64|0);
       $787 = $p;
       $788 = (($787) + 56|0);
       $789 = $p;
       $790 = (($789) + 88|0);
       $791 = $p;
       $792 = (($791) + 96|0);
       _strPost4_alternate($786,$788,$790,$792);
       $793 = $p;
       $794 = (($793) + 68|0);
       $795 = $p;
       $796 = (($795) + 60|0);
       $797 = $p;
       $798 = (($797) + 92|0);
       $799 = $p;
       $800 = (($799) + 100|0);
       _strPost4_alternate($794,$796,$798,$800);
       $p = 0;
      }
      $801 = $bottom;
      $802 = ($801|0)!=(0);
      if (!($802)) {
       $803 = $p1;
       $804 = $j;
       $805 = (($803) + ($804<<2)|0);
       $p = $805;
       $806 = $p;
       $807 = $p;
       $808 = (($807) + -8|0);
       $809 = $p;
       $810 = (($809) + 24|0);
       $811 = $p;
       $812 = (($811) + 32|0);
       _strPost4_alternate($806,$808,$810,$812);
       $813 = $p;
       $814 = (($813) + 4|0);
       $815 = $p;
       $816 = (($815) + -4|0);
       $817 = $p;
       $818 = (($817) + 28|0);
       $819 = $p;
       $820 = (($819) + 36|0);
       _strPost4_alternate($814,$816,$818,$820);
       $p = 0;
      }
      $821 = $topORbottom;
      $822 = ($821|0)!=(0);
      do {
       if (!($822)) {
        $823 = $0;
        $824 = (($823) + 34404|0);
        $825 = HEAP32[$824>>2]|0;
        $826 = ($825|0)!=(0);
        if ($826) {
         break;
        }
        $827 = $p0;
        $828 = (($827) + 192|0);
        $829 = $j;
        $830 = (($828) + ($829<<2)|0);
        $831 = $p0;
        $832 = (($831) + 192|0);
        $833 = $j;
        $834 = (($832) + ($833<<2)|0);
        $835 = (($834) + -8|0);
        $836 = $p1;
        $837 = (($836) + -40|0);
        $838 = $j;
        $839 = (($837) + ($838<<2)|0);
        $840 = $p1;
        $841 = (($840) + -32|0);
        $842 = $j;
        $843 = (($841) + ($842<<2)|0);
        _strPost4_alternate($830,$835,$839,$843);
        $844 = $p0;
        $845 = (($844) + 192|0);
        $846 = $j;
        $847 = (($845) + ($846<<2)|0);
        $848 = (($847) + 4|0);
        $849 = $p0;
        $850 = (($849) + 192|0);
        $851 = $j;
        $852 = (($850) + ($851<<2)|0);
        $853 = (($852) + -4|0);
        $854 = $p1;
        $855 = (($854) + -36|0);
        $856 = $j;
        $857 = (($855) + ($856<<2)|0);
        $858 = $p1;
        $859 = (($858) + -28|0);
        $860 = $j;
        $861 = (($859) + ($860<<2)|0);
        _strPost4_alternate($848,$853,$857,$861);
       }
      } while(0);
     }
     $862 = $right;
     $863 = ($862|0)!=(0);
     if ($863) {
      label = 157;
     } else {
      $864 = $0;
      $865 = (($864) + 34400|0);
      $866 = HEAP32[$865>>2]|0;
      $867 = ($866|0)!=(0);
      if ($867) {
       label = 157;
      }
     }
     if ((label|0) == 157) {
      label = 0;
      $j = -50;
      $868 = $top;
      $869 = ($868|0)!=(0);
      if (!($869)) {
       $870 = $p0;
       $871 = (($870) + 64|0);
       $872 = $j;
       $873 = (($871) + ($872<<2)|0);
       $p = $873;
       $874 = $p;
       $875 = $p;
       $876 = (($875) + -8|0);
       $877 = $p;
       $878 = (($877) + 24|0);
       $879 = $p;
       $880 = (($879) + 32|0);
       _strPost4_alternate($874,$876,$878,$880);
       $881 = $p;
       $882 = (($881) + 4|0);
       $883 = $p;
       $884 = (($883) + -4|0);
       $885 = $p;
       $886 = (($885) + 28|0);
       $887 = $p;
       $888 = (($887) + 36|0);
       _strPost4_alternate($882,$884,$886,$888);
       $889 = $p;
       $890 = (($889) + 64|0);
       $891 = $p;
       $892 = (($891) + 56|0);
       $893 = $p;
       $894 = (($893) + 88|0);
       $895 = $p;
       $896 = (($895) + 96|0);
       _strPost4_alternate($890,$892,$894,$896);
       $897 = $p;
       $898 = (($897) + 68|0);
       $899 = $p;
       $900 = (($899) + 60|0);
       $901 = $p;
       $902 = (($901) + 92|0);
       $903 = $p;
       $904 = (($903) + 100|0);
       _strPost4_alternate($898,$900,$902,$904);
       $p = 0;
      }
      $905 = $bottom;
      $906 = ($905|0)!=(0);
      if (!($906)) {
       $907 = $p1;
       $908 = $j;
       $909 = (($907) + ($908<<2)|0);
       $p = $909;
       $910 = $p;
       $911 = $p;
       $912 = (($911) + -8|0);
       $913 = $p;
       $914 = (($913) + 24|0);
       $915 = $p;
       $916 = (($915) + 32|0);
       _strPost4_alternate($910,$912,$914,$916);
       $917 = $p;
       $918 = (($917) + 4|0);
       $919 = $p;
       $920 = (($919) + -4|0);
       $921 = $p;
       $922 = (($921) + 28|0);
       $923 = $p;
       $924 = (($923) + 36|0);
       _strPost4_alternate($918,$920,$922,$924);
       $p = 0;
      }
      $925 = $topORbottom;
      $926 = ($925|0)!=(0);
      do {
       if (!($926)) {
        $927 = $0;
        $928 = (($927) + 34404|0);
        $929 = HEAP32[$928>>2]|0;
        $930 = ($929|0)!=(0);
        if ($930) {
         break;
        }
        $931 = $p0;
        $932 = (($931) + 192|0);
        $933 = $j;
        $934 = (($932) + ($933<<2)|0);
        $935 = $p0;
        $936 = (($935) + 192|0);
        $937 = $j;
        $938 = (($936) + ($937<<2)|0);
        $939 = (($938) + -8|0);
        $940 = $p1;
        $941 = (($940) + -40|0);
        $942 = $j;
        $943 = (($941) + ($942<<2)|0);
        $944 = $p1;
        $945 = (($944) + -32|0);
        $946 = $j;
        $947 = (($945) + ($946<<2)|0);
        _strPost4_alternate($934,$939,$943,$947);
        $948 = $p0;
        $949 = (($948) + 192|0);
        $950 = $j;
        $951 = (($949) + ($950<<2)|0);
        $952 = (($951) + 4|0);
        $953 = $p0;
        $954 = (($953) + 192|0);
        $955 = $j;
        $956 = (($954) + ($955<<2)|0);
        $957 = (($956) + -4|0);
        $958 = $p1;
        $959 = (($958) + -36|0);
        $960 = $j;
        $961 = (($959) + ($960<<2)|0);
        $962 = $p1;
        $963 = (($962) + -28|0);
        $964 = $j;
        $965 = (($963) + ($964<<2)|0);
        _strPost4_alternate($952,$957,$961,$965);
       }
      } while(0);
     }
    }
    $966 = $top;
    $967 = ($966|0)!=(0);
    if ($967) {
     label = 168;
    } else {
     $968 = $0;
     $969 = (($968) + 34404|0);
     $970 = HEAP32[$969>>2]|0;
     $971 = ($970|0)!=(0);
     if ($971) {
      label = 168;
     }
    }
    if ((label|0) == 168) {
     label = 0;
     $972 = $left;
     $973 = ($972|0)!=(0);
     $974 = $973 ? 0 : -192;
     $j = $974;
     while(1) {
      $975 = $j;
      $976 = $right;
      $977 = ($976|0)!=(0);
      $978 = $977 ? -64 : 64;
      $979 = ($975|0)<($978|0);
      if (!($979)) {
       break;
      }
      $980 = $0;
      $981 = (($980) + 34400|0);
      $982 = HEAP32[$981>>2]|0;
      $983 = ($982|0)!=(0);
      if ($983) {
       $984 = $j;
       $985 = ($984|0)!=(-64);
       if ($985) {
        label = 172;
       }
      } else {
       label = 172;
      }
      if ((label|0) == 172) {
       label = 0;
       $986 = $p1;
       $987 = $j;
       $988 = (($986) + ($987<<2)|0);
       $p = $988;
       $989 = $p;
       $990 = (($989) + 20|0);
       $991 = $p;
       $992 = (($991) + 16|0);
       $993 = $p;
       $994 = (($993) + 256|0);
       $995 = $p;
       $996 = (($995) + 260|0);
       _strPost4_alternate($990,$992,$994,$996);
       $997 = $p;
       $998 = (($997) + 28|0);
       $999 = $p;
       $1000 = (($999) + 24|0);
       $1001 = $p;
       $1002 = (($1001) + 264|0);
       $1003 = $p;
       $1004 = (($1003) + 268|0);
       _strPost4_alternate($998,$1000,$1002,$1004);
       $p = 0;
       $1005 = $p1;
       $1006 = $j;
       $1007 = (($1005) + ($1006<<2)|0);
       _strPost4x4Stage1_alternate($1007,0);
      }
      $1008 = $j;
      $1009 = (($1008) + 64)|0;
      $j = $1009;
     }
    }
    $1010 = $bottom;
    $1011 = ($1010|0)!=(0);
    if ($1011) {
     label = 178;
    } else {
     $1012 = $0;
     $1013 = (($1012) + 34404|0);
     $1014 = HEAP32[$1013>>2]|0;
     $1015 = ($1014|0)!=(0);
     if ($1015) {
      label = 178;
     }
    }
    if ((label|0) == 178) {
     label = 0;
     $1016 = $left;
     $1017 = ($1016|0)!=(0);
     $1018 = $1017 ? 0 : -192;
     $j = $1018;
     while(1) {
      $1019 = $j;
      $1020 = $right;
      $1021 = ($1020|0)!=(0);
      $1022 = $1021 ? -64 : 64;
      $1023 = ($1019|0)<($1022|0);
      if (!($1023)) {
       break;
      }
      $1024 = $0;
      $1025 = (($1024) + 34400|0);
      $1026 = HEAP32[$1025>>2]|0;
      $1027 = ($1026|0)!=(0);
      if ($1027) {
       $1028 = $j;
       $1029 = ($1028|0)!=(-64);
       if ($1029) {
        label = 182;
       }
      } else {
       label = 182;
      }
      if ((label|0) == 182) {
       label = 0;
       $1030 = $p0;
       $1031 = (($1030) + 64|0);
       $1032 = $j;
       $1033 = (($1031) + ($1032<<2)|0);
       _strPost4x4Stage1_alternate($1033,0);
       $1034 = $p0;
       $1035 = (($1034) + 128|0);
       $1036 = $j;
       $1037 = (($1035) + ($1036<<2)|0);
       _strPost4x4Stage1_alternate($1037,0);
       $1038 = $p0;
       $1039 = (($1038) + 192|0);
       $1040 = $j;
       $1041 = (($1039) + ($1040<<2)|0);
       $p = $1041;
       $1042 = $p;
       $1043 = (($1042) + 60|0);
       $1044 = $p;
       $1045 = (($1044) + 56|0);
       $1046 = $p;
       $1047 = (($1046) + 296|0);
       $1048 = $p;
       $1049 = (($1048) + 300|0);
       _strPost4_alternate($1043,$1045,$1047,$1049);
       $1050 = $p;
       $1051 = (($1050) + 52|0);
       $1052 = $p;
       $1053 = (($1052) + 48|0);
       $1054 = $p;
       $1055 = (($1054) + 288|0);
       $1056 = $p;
       $1057 = (($1056) + 292|0);
       _strPost4_alternate($1051,$1053,$1055,$1057);
       $p = 0;
      }
      $1058 = $j;
      $1059 = (($1058) + 64)|0;
      $j = $1059;
     }
    }
    $1060 = $top;
    $1061 = ($1060|0)!=(0);
    do {
     if (!($1061)) {
      $1062 = $bottom;
      $1063 = ($1062|0)!=(0);
      if ($1063) {
       break;
      }
      $1064 = $0;
      $1065 = (($1064) + 34404|0);
      $1066 = HEAP32[$1065>>2]|0;
      $1067 = ($1066|0)!=(0);
      if ($1067) {
       break;
      }
      $1068 = $left;
      $1069 = ($1068|0)!=(0);
      $1070 = $1069 ? 0 : -192;
      $j = $1070;
      while(1) {
       $1071 = $j;
       $1072 = $right;
       $1073 = ($1072|0)!=(0);
       $1074 = $1073 ? -64 : 64;
       $1075 = ($1071|0)<($1074|0);
       if (!($1075)) {
        break;
       }
       $1076 = $0;
       $1077 = (($1076) + 34400|0);
       $1078 = HEAP32[$1077>>2]|0;
       $1079 = ($1078|0)!=(0);
       if ($1079) {
        $1080 = $j;
        $1081 = ($1080|0)!=(-64);
        if ($1081) {
         label = 193;
        }
       } else {
        label = 193;
       }
       if ((label|0) == 193) {
        label = 0;
        $1082 = $p0;
        $1083 = (($1082) + 64|0);
        $1084 = $j;
        $1085 = (($1083) + ($1084<<2)|0);
        _strPost4x4Stage1_alternate($1085,0);
        $1086 = $p0;
        $1087 = (($1086) + 128|0);
        $1088 = $j;
        $1089 = (($1087) + ($1088<<2)|0);
        _strPost4x4Stage1_alternate($1089,0);
        $1090 = $p0;
        $1091 = (($1090) + 192|0);
        $1092 = $j;
        $1093 = (($1091) + ($1092<<2)|0);
        $1094 = $p1;
        $1095 = $j;
        $1096 = (($1094) + ($1095<<2)|0);
        _strPost4x4Stage1Split_alternate($1093,$1096,0);
        $1097 = $p1;
        $1098 = $j;
        $1099 = (($1097) + ($1098<<2)|0);
        _strPost4x4Stage1_alternate($1099,0);
       }
       $1100 = $j;
       $1101 = (($1100) + 64)|0;
       $j = $1101;
      }
     }
    } while(0);
   }
   $1102 = $0;
   $1103 = (($1102) + 4|0);
   $1104 = (($1103) + 68|0);
   $1105 = HEAP8[$1104>>0]|0;
   $1106 = $1105&255;
   $1107 = ($1106|0)>(0);
   do {
    if ($1107) {
     $1108 = $topORleft;
     $1109 = ($1108|0)!=(0);
     if ($1109) {
      break;
     }
     $1110 = $0;
     $1111 = (($1110) + 35040|0);
     $1112 = $p0;
     $1113 = $p1;
     $1114 = $0;
     $1115 = (($1114) + 34376|0);
     $1116 = HEAP32[$1115>>2]|0;
     $1117 = $i;
     $1118 = $i;
     $1119 = (($qp) + ($1118<<2)|0);
     $1120 = HEAP32[$1119>>2]|0;
     _postProcBlock($1111,$1112,$1113,$1116,$1117,$1120);
    }
   } while(0);
  }
  $1121 = $i;
  $1122 = (($1121) + 1)|0;
  $i = $1122;
 }
 $i = 0;
 while(1) {
  $1123 = $i;
  $1124 = $cfColorFormat;
  $1125 = (1)==($1124|0);
  $1126 = $1125 ? 2 : 0;
  $1127 = ($1123>>>0)<($1126>>>0);
  if ($1127) {
   $1128 = $tScale;
   $1129 = ($1128>>>0)<(16);
   $2865 = $1129;
  } else {
   $2865 = 0;
  }
  if (!($2865)) {
   break;
  }
  $1130 = $i;
  $1131 = (1 + ($1130))|0;
  $1132 = $0;
  $1133 = (($1132) + 34692|0);
  $1134 = (($1133) + ($1131<<2)|0);
  $1135 = HEAP32[$1134>>2]|0;
  $p01 = $1135;
  $1136 = $i;
  $1137 = (1 + ($1136))|0;
  $1138 = $0;
  $1139 = (($1138) + 34756|0);
  $1140 = (($1139) + ($1137<<2)|0);
  $1141 = HEAP32[$1140>>2]|0;
  $p12 = $1141;
  $1142 = $bottomORright;
  $1143 = ($1142|0)!=(0);
  if (!($1143)) {
   $1144 = $0;
   $1145 = (($1144) + 34136|0);
   $1146 = (($1145) + 20|0);
   $1147 = HEAP32[$1146>>2]|0;
   $1148 = ($1147|0)!=(0);
   if ($1148) {
    $1156 = $p12;
    $1157 = $p12;
    $1158 = (($1157) + 128|0);
    $1159 = $p12;
    $1160 = (($1159) + 64|0);
    $1161 = $p12;
    $1162 = (($1161) + 192|0);
    _strDCT2x2dnDec($1156,$1158,$1160,$1162);
   } else {
    $1149 = $p12;
    $1150 = $p12;
    $1151 = (($1150) + 128|0);
    $1152 = $p12;
    $1153 = (($1152) + 64|0);
    $1154 = $p12;
    $1155 = (($1154) + 192|0);
    _strDCT2x2dn($1149,$1151,$1153,$1155);
   }
  }
  $1163 = $olOverlap;
  $1164 = (2)==($1163|0);
  if ($1164) {
   $1165 = $leftAdjacentColumn;
   $1166 = ($1165|0)!=(0);
   if ($1166) {
    label = 215;
   } else {
    $1167 = $0;
    $1168 = (($1167) + 34412|0);
    $1169 = HEAP32[$1168>>2]|0;
    $1170 = ($1169|0)!=(0);
    if ($1170) {
     label = 215;
    }
   }
   do {
    if ((label|0) == 215) {
     label = 0;
     $1171 = $top;
     $1172 = ($1171|0)!=(0);
     if (!($1172)) {
      $1173 = $0;
      $1174 = (($1173) + 34404|0);
      $1175 = HEAP32[$1174>>2]|0;
      $1176 = ($1175|0)!=(0);
      if (!($1176)) {
       break;
      }
     }
     $1177 = $p12;
     $1178 = (($1177) + -256|0);
     $1179 = (($1178) + 128|0);
     $1180 = HEAP32[$1179>>2]|0;
     $1181 = $p12;
     $1182 = (($1181) + -256|0);
     $1183 = HEAP32[$1182>>2]|0;
     $1184 = (($1183) - ($1180))|0;
     HEAP32[$1182>>2] = $1184;
    }
   } while(0);
   $1185 = $rightAdjacentColumn;
   $1186 = ($1185|0)!=(0);
   if ($1186) {
    label = 220;
   } else {
    $1187 = $0;
    $1188 = (($1187) + 34408|0);
    $1189 = HEAP32[$1188>>2]|0;
    $1190 = ($1189|0)!=(0);
    if ($1190) {
     label = 220;
    }
   }
   do {
    if ((label|0) == 220) {
     label = 0;
     $1191 = $top;
     $1192 = ($1191|0)!=(0);
     if (!($1192)) {
      $1193 = $0;
      $1194 = (($1193) + 34404|0);
      $1195 = HEAP32[$1194>>2]|0;
      $1196 = ($1195|0)!=(0);
      if (!($1196)) {
       break;
      }
     }
     $1197 = $p12;
     $1198 = HEAP32[$1197>>2]|0;
     $1199 = $i;
     $1200 = $0;
     $1201 = (($1200) + 34416|0);
     $1202 = (($1201) + ($1199<<3)|0);
     HEAP32[$1202>>2] = $1198;
    }
   } while(0);
   $1203 = $right;
   $1204 = ($1203|0)!=(0);
   if ($1204) {
    label = 225;
   } else {
    $1205 = $0;
    $1206 = (($1205) + 34400|0);
    $1207 = HEAP32[$1206>>2]|0;
    $1208 = ($1207|0)!=(0);
    if ($1208) {
     label = 225;
    }
   }
   do {
    if ((label|0) == 225) {
     label = 0;
     $1209 = $top;
     $1210 = ($1209|0)!=(0);
     if (!($1210)) {
      $1211 = $0;
      $1212 = (($1211) + 34404|0);
      $1213 = HEAP32[$1212>>2]|0;
      $1214 = ($1213|0)!=(0);
      if (!($1214)) {
       break;
      }
     }
     $1215 = $i;
     $1216 = $0;
     $1217 = (($1216) + 34416|0);
     $1218 = (($1217) + ($1215<<3)|0);
     $1219 = HEAP32[$1218>>2]|0;
     $1220 = $p12;
     $1221 = (($1220) + -256|0);
     $1222 = (($1221) + 128|0);
     $1223 = HEAP32[$1222>>2]|0;
     $1224 = (($1223) - ($1219))|0;
     HEAP32[$1222>>2] = $1224;
    }
   } while(0);
   $1225 = $leftAdjacentColumn;
   $1226 = ($1225|0)!=(0);
   if ($1226) {
    label = 230;
   } else {
    $1227 = $0;
    $1228 = (($1227) + 34412|0);
    $1229 = HEAP32[$1228>>2]|0;
    $1230 = ($1229|0)!=(0);
    if ($1230) {
     label = 230;
    }
   }
   do {
    if ((label|0) == 230) {
     label = 0;
     $1231 = $bottom;
     $1232 = ($1231|0)!=(0);
     if (!($1232)) {
      $1233 = $0;
      $1234 = (($1233) + 34404|0);
      $1235 = HEAP32[$1234>>2]|0;
      $1236 = ($1235|0)!=(0);
      if (!($1236)) {
       break;
      }
     }
     $1237 = $p01;
     $1238 = (($1237) + -256|0);
     $1239 = (($1238) + 192|0);
     $1240 = HEAP32[$1239>>2]|0;
     $1241 = $p01;
     $1242 = (($1241) + -256|0);
     $1243 = (($1242) + 64|0);
     $1244 = HEAP32[$1243>>2]|0;
     $1245 = (($1244) - ($1240))|0;
     HEAP32[$1243>>2] = $1245;
    }
   } while(0);
   $1246 = $rightAdjacentColumn;
   $1247 = ($1246|0)!=(0);
   if ($1247) {
    label = 235;
   } else {
    $1248 = $0;
    $1249 = (($1248) + 34408|0);
    $1250 = HEAP32[$1249>>2]|0;
    $1251 = ($1250|0)!=(0);
    if ($1251) {
     label = 235;
    }
   }
   do {
    if ((label|0) == 235) {
     label = 0;
     $1252 = $bottom;
     $1253 = ($1252|0)!=(0);
     if (!($1253)) {
      $1254 = $0;
      $1255 = (($1254) + 34404|0);
      $1256 = HEAP32[$1255>>2]|0;
      $1257 = ($1256|0)!=(0);
      if (!($1257)) {
       break;
      }
     }
     $1258 = $p01;
     $1259 = (($1258) + 64|0);
     $1260 = HEAP32[$1259>>2]|0;
     $1261 = $i;
     $1262 = $0;
     $1263 = (($1262) + 34416|0);
     $1264 = (($1263) + ($1261<<3)|0);
     $1265 = (($1264) + 4|0);
     HEAP32[$1265>>2] = $1260;
    }
   } while(0);
   $1266 = $right;
   $1267 = ($1266|0)!=(0);
   if ($1267) {
    label = 240;
   } else {
    $1268 = $0;
    $1269 = (($1268) + 34400|0);
    $1270 = HEAP32[$1269>>2]|0;
    $1271 = ($1270|0)!=(0);
    if ($1271) {
     label = 240;
    }
   }
   do {
    if ((label|0) == 240) {
     label = 0;
     $1272 = $bottom;
     $1273 = ($1272|0)!=(0);
     if (!($1273)) {
      $1274 = $0;
      $1275 = (($1274) + 34404|0);
      $1276 = HEAP32[$1275>>2]|0;
      $1277 = ($1276|0)!=(0);
      if (!($1277)) {
       break;
      }
     }
     $1278 = $i;
     $1279 = $0;
     $1280 = (($1279) + 34416|0);
     $1281 = (($1280) + ($1278<<3)|0);
     $1282 = (($1281) + 4|0);
     $1283 = HEAP32[$1282>>2]|0;
     $1284 = $p01;
     $1285 = (($1284) + -256|0);
     $1286 = (($1285) + 192|0);
     $1287 = HEAP32[$1286>>2]|0;
     $1288 = (($1287) - ($1283))|0;
     HEAP32[$1286>>2] = $1288;
    }
   } while(0);
   $1289 = $leftORright;
   $1290 = ($1289|0)!=(0);
   if ($1290) {
    label = 245;
   } else {
    $1291 = $0;
    $1292 = (($1291) + 34400|0);
    $1293 = HEAP32[$1292>>2]|0;
    $1294 = ($1293|0)!=(0);
    if ($1294) {
     label = 245;
    }
   }
   do {
    if ((label|0) == 245) {
     label = 0;
     $1295 = $topORbottom;
     $1296 = ($1295|0)!=(0);
     if ($1296) {
      break;
     }
     $1297 = $0;
     $1298 = (($1297) + 34404|0);
     $1299 = HEAP32[$1298>>2]|0;
     $1300 = ($1299|0)!=(0);
     if ($1300) {
      break;
     }
     $1301 = $left;
     $1302 = ($1301|0)!=(0);
     if ($1302) {
      label = 249;
     } else {
      $1303 = $0;
      $1304 = (($1303) + 34400|0);
      $1305 = HEAP32[$1304>>2]|0;
      $1306 = ($1305|0)!=(0);
      if ($1306) {
       label = 249;
      }
     }
     if ((label|0) == 249) {
      label = 0;
      $1307 = $p01;
      $1308 = (($1307) + 64|0);
      $1309 = $p12;
      _strPost2_alternate($1308,$1309);
     }
     $1310 = $right;
     $1311 = ($1310|0)!=(0);
     if ($1311) {
      label = 252;
     } else {
      $1312 = $0;
      $1313 = (($1312) + 34400|0);
      $1314 = HEAP32[$1313>>2]|0;
      $1315 = ($1314|0)!=(0);
      if ($1315) {
       label = 252;
      }
     }
     if ((label|0) == 252) {
      label = 0;
      $1316 = $p01;
      $1317 = (($1316) + -128|0);
      $1318 = (($1317) + 64|0);
      $1319 = $p12;
      $1320 = (($1319) + -128|0);
      _strPost2_alternate($1318,$1320);
     }
    }
   } while(0);
   $1321 = $leftORright;
   $1322 = ($1321|0)!=(0);
   if (!($1322)) {
    $1323 = $topORbottom;
    $1324 = ($1323|0)!=(0);
    if ($1324) {
     label = 257;
    } else {
     $1325 = $0;
     $1326 = (($1325) + 34404|0);
     $1327 = HEAP32[$1326>>2]|0;
     $1328 = ($1327|0)!=(0);
     if ($1328) {
      label = 257;
     } else {
      label = 265;
     }
    }
    do {
     if ((label|0) == 257) {
      label = 0;
      $1329 = $0;
      $1330 = (($1329) + 34400|0);
      $1331 = HEAP32[$1330>>2]|0;
      $1332 = ($1331|0)!=(0);
      if ($1332) {
       label = 265;
       break;
      }
      $1333 = $top;
      $1334 = ($1333|0)!=(0);
      if ($1334) {
       label = 260;
      } else {
       $1335 = $0;
       $1336 = (($1335) + 34404|0);
       $1337 = HEAP32[$1336>>2]|0;
       $1338 = ($1337|0)!=(0);
       if ($1338) {
        label = 260;
       }
      }
      if ((label|0) == 260) {
       label = 0;
       $1339 = $p12;
       $1340 = (($1339) + -128|0);
       $1341 = $p12;
       _strPost2_alternate($1340,$1341);
      }
      $1342 = $bottom;
      $1343 = ($1342|0)!=(0);
      if ($1343) {
       label = 263;
      } else {
       $1344 = $0;
       $1345 = (($1344) + 34404|0);
       $1346 = HEAP32[$1345>>2]|0;
       $1347 = ($1346|0)!=(0);
       if ($1347) {
        label = 263;
       }
      }
      if ((label|0) == 263) {
       label = 0;
       $1348 = $p01;
       $1349 = (($1348) + 64|0);
       $1350 = (($1349) + -128|0);
       $1351 = $p01;
       $1352 = (($1351) + 64|0);
       _strPost2_alternate($1350,$1352);
      }
     }
    } while(0);
    if ((label|0) == 265) {
     label = 0;
     $1353 = $topORbottom;
     $1354 = ($1353|0)!=(0);
     do {
      if (!($1354)) {
       $1355 = $0;
       $1356 = (($1355) + 34404|0);
       $1357 = HEAP32[$1356>>2]|0;
       $1358 = ($1357|0)!=(0);
       if ($1358) {
        break;
       }
       $1359 = $0;
       $1360 = (($1359) + 34400|0);
       $1361 = HEAP32[$1360>>2]|0;
       $1362 = ($1361|0)!=(0);
       if ($1362) {
        break;
       }
       $1363 = $p01;
       $1364 = (($1363) + -64|0);
       $1365 = $p01;
       $1366 = (($1365) + 64|0);
       $1367 = $p12;
       $1368 = (($1367) + -128|0);
       $1369 = $p12;
       _strPost2x2_alternate($1364,$1366,$1368,$1369);
      }
     } while(0);
    }
   }
   $1370 = $leftAdjacentColumn;
   $1371 = ($1370|0)!=(0);
   if ($1371) {
    label = 273;
   } else {
    $1372 = $0;
    $1373 = (($1372) + 34412|0);
    $1374 = HEAP32[$1373>>2]|0;
    $1375 = ($1374|0)!=(0);
    if ($1375) {
     label = 273;
    }
   }
   do {
    if ((label|0) == 273) {
     label = 0;
     $1376 = $top;
     $1377 = ($1376|0)!=(0);
     if (!($1377)) {
      $1378 = $0;
      $1379 = (($1378) + 34404|0);
      $1380 = HEAP32[$1379>>2]|0;
      $1381 = ($1380|0)!=(0);
      if (!($1381)) {
       break;
      }
     }
     $1382 = $p12;
     $1383 = (($1382) + -256|0);
     $1384 = (($1383) + 128|0);
     $1385 = HEAP32[$1384>>2]|0;
     $1386 = $p12;
     $1387 = (($1386) + -256|0);
     $1388 = HEAP32[$1387>>2]|0;
     $1389 = (($1388) + ($1385))|0;
     HEAP32[$1387>>2] = $1389;
    }
   } while(0);
   $1390 = $rightAdjacentColumn;
   $1391 = ($1390|0)!=(0);
   if ($1391) {
    label = 278;
   } else {
    $1392 = $0;
    $1393 = (($1392) + 34408|0);
    $1394 = HEAP32[$1393>>2]|0;
    $1395 = ($1394|0)!=(0);
    if ($1395) {
     label = 278;
    }
   }
   do {
    if ((label|0) == 278) {
     label = 0;
     $1396 = $top;
     $1397 = ($1396|0)!=(0);
     if (!($1397)) {
      $1398 = $0;
      $1399 = (($1398) + 34404|0);
      $1400 = HEAP32[$1399>>2]|0;
      $1401 = ($1400|0)!=(0);
      if (!($1401)) {
       break;
      }
     }
     $1402 = $p12;
     $1403 = HEAP32[$1402>>2]|0;
     $1404 = $i;
     $1405 = $0;
     $1406 = (($1405) + 34432|0);
     $1407 = (($1406) + ($1404<<3)|0);
     HEAP32[$1407>>2] = $1403;
    }
   } while(0);
   $1408 = $right;
   $1409 = ($1408|0)!=(0);
   if ($1409) {
    label = 283;
   } else {
    $1410 = $0;
    $1411 = (($1410) + 34400|0);
    $1412 = HEAP32[$1411>>2]|0;
    $1413 = ($1412|0)!=(0);
    if ($1413) {
     label = 283;
    }
   }
   do {
    if ((label|0) == 283) {
     label = 0;
     $1414 = $top;
     $1415 = ($1414|0)!=(0);
     if (!($1415)) {
      $1416 = $0;
      $1417 = (($1416) + 34404|0);
      $1418 = HEAP32[$1417>>2]|0;
      $1419 = ($1418|0)!=(0);
      if (!($1419)) {
       break;
      }
     }
     $1420 = $i;
     $1421 = $0;
     $1422 = (($1421) + 34432|0);
     $1423 = (($1422) + ($1420<<3)|0);
     $1424 = HEAP32[$1423>>2]|0;
     $1425 = $p12;
     $1426 = (($1425) + -256|0);
     $1427 = (($1426) + 128|0);
     $1428 = HEAP32[$1427>>2]|0;
     $1429 = (($1428) + ($1424))|0;
     HEAP32[$1427>>2] = $1429;
    }
   } while(0);
   $1430 = $leftAdjacentColumn;
   $1431 = ($1430|0)!=(0);
   if ($1431) {
    label = 288;
   } else {
    $1432 = $0;
    $1433 = (($1432) + 34412|0);
    $1434 = HEAP32[$1433>>2]|0;
    $1435 = ($1434|0)!=(0);
    if ($1435) {
     label = 288;
    }
   }
   do {
    if ((label|0) == 288) {
     label = 0;
     $1436 = $bottom;
     $1437 = ($1436|0)!=(0);
     if (!($1437)) {
      $1438 = $0;
      $1439 = (($1438) + 34404|0);
      $1440 = HEAP32[$1439>>2]|0;
      $1441 = ($1440|0)!=(0);
      if (!($1441)) {
       break;
      }
     }
     $1442 = $p01;
     $1443 = (($1442) + -256|0);
     $1444 = (($1443) + 192|0);
     $1445 = HEAP32[$1444>>2]|0;
     $1446 = $p01;
     $1447 = (($1446) + -256|0);
     $1448 = (($1447) + 64|0);
     $1449 = HEAP32[$1448>>2]|0;
     $1450 = (($1449) + ($1445))|0;
     HEAP32[$1448>>2] = $1450;
    }
   } while(0);
   $1451 = $rightAdjacentColumn;
   $1452 = ($1451|0)!=(0);
   if ($1452) {
    label = 293;
   } else {
    $1453 = $0;
    $1454 = (($1453) + 34408|0);
    $1455 = HEAP32[$1454>>2]|0;
    $1456 = ($1455|0)!=(0);
    if ($1456) {
     label = 293;
    }
   }
   do {
    if ((label|0) == 293) {
     label = 0;
     $1457 = $bottom;
     $1458 = ($1457|0)!=(0);
     if (!($1458)) {
      $1459 = $0;
      $1460 = (($1459) + 34404|0);
      $1461 = HEAP32[$1460>>2]|0;
      $1462 = ($1461|0)!=(0);
      if (!($1462)) {
       break;
      }
     }
     $1463 = $p01;
     $1464 = (($1463) + 64|0);
     $1465 = HEAP32[$1464>>2]|0;
     $1466 = $i;
     $1467 = $0;
     $1468 = (($1467) + 34432|0);
     $1469 = (($1468) + ($1466<<3)|0);
     $1470 = (($1469) + 4|0);
     HEAP32[$1470>>2] = $1465;
    }
   } while(0);
   $1471 = $right;
   $1472 = ($1471|0)!=(0);
   if ($1472) {
    label = 298;
   } else {
    $1473 = $0;
    $1474 = (($1473) + 34400|0);
    $1475 = HEAP32[$1474>>2]|0;
    $1476 = ($1475|0)!=(0);
    if ($1476) {
     label = 298;
    }
   }
   do {
    if ((label|0) == 298) {
     label = 0;
     $1477 = $bottom;
     $1478 = ($1477|0)!=(0);
     if (!($1478)) {
      $1479 = $0;
      $1480 = (($1479) + 34404|0);
      $1481 = HEAP32[$1480>>2]|0;
      $1482 = ($1481|0)!=(0);
      if (!($1482)) {
       break;
      }
     }
     $1483 = $i;
     $1484 = $0;
     $1485 = (($1484) + 34432|0);
     $1486 = (($1485) + ($1483<<3)|0);
     $1487 = (($1486) + 4|0);
     $1488 = HEAP32[$1487>>2]|0;
     $1489 = $p01;
     $1490 = (($1489) + -256|0);
     $1491 = (($1490) + 192|0);
     $1492 = HEAP32[$1491>>2]|0;
     $1493 = (($1492) + ($1488))|0;
     HEAP32[$1491>>2] = $1493;
    }
   } while(0);
  }
  $1494 = $tScale;
  $1495 = ($1494>>>0)>=(4);
  if ($1495) {
  } else {
   $1496 = $top;
   $1497 = ($1496|0)!=(0);
   if (!($1497)) {
    $1498 = $left;
    $1499 = ($1498|0)!=(0);
    if ($1499) {
     $1508 = 48;
    } else {
     $1500 = $leftAdjacentColumn;
     $1501 = ($1500|0)!=(0);
     if ($1501) {
      $1507 = 1;
     } else {
      $1502 = $0;
      $1503 = (($1502) + 34412|0);
      $1504 = HEAP32[$1503>>2]|0;
      $1505 = ($1504|0)!=(0);
      $1507 = $1505;
     }
     $1506 = $1507 ? -48 : -16;
     $1508 = $1506;
    }
    $j = $1508;
    while(1) {
     $1509 = $j;
     $1510 = $right;
     $1511 = ($1510|0)!=(0);
     if ($1511) {
      $1517 = 1;
     } else {
      $1512 = $0;
      $1513 = (($1512) + 34400|0);
      $1514 = HEAP32[$1513>>2]|0;
      $1515 = ($1514|0)!=(0);
      $1517 = $1515;
     }
     $1516 = $1517 ? 16 : 48;
     $1518 = ($1509|0)<($1516|0);
     if (!($1518)) {
      break;
     }
     $1519 = $p01;
     $1520 = $j;
     $1521 = (($1519) + ($1520<<2)|0);
     _strIDCT4x4Stage1($1521);
     $1522 = $j;
     $1523 = (($1522) + 32)|0;
     $j = $1523;
    }
   }
   $1524 = $bottom;
   $1525 = ($1524|0)!=(0);
   if (!($1525)) {
    $1526 = $left;
    $1527 = ($1526|0)!=(0);
    if ($1527) {
     $1536 = 32;
    } else {
     $1528 = $leftAdjacentColumn;
     $1529 = ($1528|0)!=(0);
     if ($1529) {
      $1535 = 1;
     } else {
      $1530 = $0;
      $1531 = (($1530) + 34412|0);
      $1532 = HEAP32[$1531>>2]|0;
      $1533 = ($1532|0)!=(0);
      $1535 = $1533;
     }
     $1534 = $1535 ? -64 : -32;
     $1536 = $1534;
    }
    $j = $1536;
    while(1) {
     $1537 = $j;
     $1538 = $right;
     $1539 = ($1538|0)!=(0);
     if ($1539) {
      $1545 = 1;
     } else {
      $1540 = $0;
      $1541 = (($1540) + 34400|0);
      $1542 = HEAP32[$1541>>2]|0;
      $1543 = ($1542|0)!=(0);
      $1545 = $1543;
     }
     $1544 = $1545 ? 0 : 32;
     $1546 = ($1537|0)<($1544|0);
     if (!($1546)) {
      break;
     }
     $1547 = $p12;
     $1548 = $j;
     $1549 = (($1547) + ($1548<<2)|0);
     _strIDCT4x4Stage1($1549);
     $1550 = $j;
     $1551 = (($1550) + 32)|0;
     $j = $1551;
    }
   }
   $1552 = $olOverlap;
   $1553 = (0)!=($1552|0);
   if ($1553) {
    $1554 = $top;
    $1555 = ($1554|0)!=(0);
    if ($1555) {
     label = 333;
    } else {
     $1556 = $0;
     $1557 = (($1556) + 34404|0);
     $1558 = HEAP32[$1557>>2]|0;
     $1559 = ($1558|0)!=(0);
     if ($1559) {
      label = 333;
     }
    }
    do {
     if ((label|0) == 333) {
      label = 0;
      $1560 = $leftAdjacentColumn;
      $1561 = ($1560|0)!=(0);
      if (!($1561)) {
       $1562 = $0;
       $1563 = (($1562) + 34412|0);
       $1564 = HEAP32[$1563>>2]|0;
       $1565 = ($1564|0)!=(0);
       if (!($1565)) {
        break;
       }
      }
      $1566 = $p12;
      $1567 = (($1566) + -256|0);
      $1568 = $p12;
      $1569 = (($1568) + -256|0);
      $1570 = (($1569) + 4|0);
      $1571 = $p12;
      $1572 = (($1571) + -256|0);
      $1573 = (($1572) + 8|0);
      $1574 = $p12;
      $1575 = (($1574) + -256|0);
      $1576 = (($1575) + 12|0);
      _strPost4_alternate($1567,$1570,$1573,$1576);
     }
    } while(0);
    $1577 = $top;
    $1578 = ($1577|0)!=(0);
    if ($1578) {
     label = 338;
    } else {
     $1579 = $0;
     $1580 = (($1579) + 34404|0);
     $1581 = HEAP32[$1580>>2]|0;
     $1582 = ($1581|0)!=(0);
     if ($1582) {
      label = 338;
     }
    }
    do {
     if ((label|0) == 338) {
      label = 0;
      $1583 = $right;
      $1584 = ($1583|0)!=(0);
      if (!($1584)) {
       $1585 = $0;
       $1586 = (($1585) + 34400|0);
       $1587 = HEAP32[$1586>>2]|0;
       $1588 = ($1587|0)!=(0);
       if (!($1588)) {
        break;
       }
      }
      $1589 = $p12;
      $1590 = (($1589) + -108|0);
      $1591 = $p12;
      $1592 = (($1591) + -112|0);
      $1593 = $p12;
      $1594 = (($1593) + -100|0);
      $1595 = $p12;
      $1596 = (($1595) + -104|0);
      _strPost4_alternate($1590,$1592,$1594,$1596);
     }
    } while(0);
    $1597 = $bottom;
    $1598 = ($1597|0)!=(0);
    if ($1598) {
     label = 343;
    } else {
     $1599 = $0;
     $1600 = (($1599) + 34404|0);
     $1601 = HEAP32[$1600>>2]|0;
     $1602 = ($1601|0)!=(0);
     if ($1602) {
      label = 343;
     }
    }
    do {
     if ((label|0) == 343) {
      label = 0;
      $1603 = $leftAdjacentColumn;
      $1604 = ($1603|0)!=(0);
      if (!($1604)) {
       $1605 = $0;
       $1606 = (($1605) + 34412|0);
       $1607 = HEAP32[$1606>>2]|0;
       $1608 = ($1607|0)!=(0);
       if (!($1608)) {
        break;
       }
      }
      $1609 = $p01;
      $1610 = (($1609) + -256|0);
      $1611 = (($1610) + 64|0);
      $1612 = (($1611) + 40|0);
      $1613 = $p01;
      $1614 = (($1613) + -256|0);
      $1615 = (($1614) + 64|0);
      $1616 = (($1615) + 44|0);
      $1617 = $p01;
      $1618 = (($1617) + -256|0);
      $1619 = (($1618) + 64|0);
      $1620 = (($1619) + 32|0);
      $1621 = $p01;
      $1622 = (($1621) + -256|0);
      $1623 = (($1622) + 64|0);
      $1624 = (($1623) + 36|0);
      _strPost4_alternate($1612,$1616,$1620,$1624);
     }
    } while(0);
    $1625 = $bottom;
    $1626 = ($1625|0)!=(0);
    if ($1626) {
     label = 348;
    } else {
     $1627 = $0;
     $1628 = (($1627) + 34404|0);
     $1629 = HEAP32[$1628>>2]|0;
     $1630 = ($1629|0)!=(0);
     if ($1630) {
      label = 348;
     }
    }
    do {
     if ((label|0) == 348) {
      label = 0;
      $1631 = $right;
      $1632 = ($1631|0)!=(0);
      if (!($1632)) {
       $1633 = $0;
       $1634 = (($1633) + 34400|0);
       $1635 = HEAP32[$1634>>2]|0;
       $1636 = ($1635|0)!=(0);
       if (!($1636)) {
        break;
       }
      }
      $1637 = $p01;
      $1638 = (($1637) + -4|0);
      $1639 = $p01;
      $1640 = (($1639) + -8|0);
      $1641 = $p01;
      $1642 = (($1641) + -12|0);
      $1643 = $p01;
      $1644 = (($1643) + -16|0);
      _strPost4_alternate($1638,$1640,$1642,$1644);
     }
    } while(0);
    $1645 = $left;
    $1646 = ($1645|0)!=(0);
    do {
     if (!($1646)) {
      $1647 = $top;
      $1648 = ($1647|0)!=(0);
      if ($1648) {
       break;
      }
      $1649 = $leftAdjacentColumn;
      $1650 = ($1649|0)!=(0);
      if ($1650) {
       label = 355;
      } else {
       $1651 = $0;
       $1652 = (($1651) + 34412|0);
       $1653 = HEAP32[$1652>>2]|0;
       $1654 = ($1653|0)!=(0);
       if ($1654) {
        label = 355;
       }
      }
      if ((label|0) == 355) {
       label = 0;
       $1655 = $bottom;
       $1656 = ($1655|0)!=(0);
       do {
        if (!($1656)) {
         $1657 = $0;
         $1658 = (($1657) + 34404|0);
         $1659 = HEAP32[$1658>>2]|0;
         $1660 = ($1659|0)!=(0);
         if ($1660) {
          break;
         }
         $1661 = $p01;
         $1662 = (($1661) + -256|0);
         $1663 = (($1662) + 104|0);
         $1664 = $p01;
         $1665 = (($1664) + -256|0);
         $1666 = (($1665) + 96|0);
         $1667 = $p12;
         $1668 = (($1667) + -256|0);
         $1669 = $p12;
         $1670 = (($1669) + -256|0);
         $1671 = (($1670) + 8|0);
         _strPost4_alternate($1663,$1666,$1668,$1671);
         $1672 = $p01;
         $1673 = (($1672) + -256|0);
         $1674 = (($1673) + 108|0);
         $1675 = $p01;
         $1676 = (($1675) + -256|0);
         $1677 = (($1676) + 100|0);
         $1678 = $p12;
         $1679 = (($1678) + -256|0);
         $1680 = (($1679) + 4|0);
         $1681 = $p12;
         $1682 = (($1681) + -256|0);
         $1683 = (($1682) + 12|0);
         _strPost4_alternate($1674,$1677,$1680,$1683);
        }
       } while(0);
       $1684 = $p01;
       $1685 = (($1684) + -256|0);
       $1686 = (($1685) + 40|0);
       $1687 = $p01;
       $1688 = (($1687) + -256|0);
       $1689 = (($1688) + 32|0);
       $1690 = $p01;
       $1691 = (($1690) + -256|0);
       $1692 = (($1691) + 64|0);
       $1693 = $p01;
       $1694 = (($1693) + -256|0);
       $1695 = (($1694) + 72|0);
       _strPost4_alternate($1686,$1689,$1692,$1695);
       $1696 = $p01;
       $1697 = (($1696) + -256|0);
       $1698 = (($1697) + 44|0);
       $1699 = $p01;
       $1700 = (($1699) + -256|0);
       $1701 = (($1700) + 36|0);
       $1702 = $p01;
       $1703 = (($1702) + -256|0);
       $1704 = (($1703) + 68|0);
       $1705 = $p01;
       $1706 = (($1705) + -256|0);
       $1707 = (($1706) + 76|0);
       _strPost4_alternate($1698,$1701,$1704,$1707);
      }
      $1708 = $bottom;
      $1709 = ($1708|0)!=(0);
      do {
       if ($1709) {
        label = 361;
       } else {
        $1710 = $0;
        $1711 = (($1710) + 34404|0);
        $1712 = HEAP32[$1711>>2]|0;
        $1713 = ($1712|0)!=(0);
        if ($1713) {
         label = 361;
         break;
        }
        $1756 = $p01;
        $1757 = (($1756) + -192|0);
        $1758 = $p12;
        $1759 = (($1758) + -64|0);
        $1760 = (($1759) + -192|0);
        _strPost4x4Stage1Split_alternate($1757,$1760,32);
        $1761 = $right;
        $1762 = ($1761|0)!=(0);
        do {
         if (!($1762)) {
          $1763 = $0;
          $1764 = (($1763) + 34400|0);
          $1765 = HEAP32[$1764>>2]|0;
          $1766 = ($1765|0)!=(0);
          if ($1766) {
           break;
          }
          $1767 = $p01;
          $1768 = (($1767) + -64|0);
          $1769 = $p12;
          $1770 = (($1769) + -64|0);
          $1771 = (($1770) + -64|0);
          _strPost4x4Stage1Split_alternate($1768,$1771,32);
         }
        } while(0);
       }
      } while(0);
      if ((label|0) == 361) {
       label = 0;
       $1714 = $p01;
       $1715 = (($1714) + -192|0);
       $p = $1715;
       $1716 = $p;
       $1717 = (($1716) + 60|0);
       $1718 = $p;
       $1719 = (($1718) + 56|0);
       $1720 = $p;
       $1721 = (($1720) + 168|0);
       $1722 = $p;
       $1723 = (($1722) + 172|0);
       _strPost4_alternate($1717,$1719,$1721,$1723);
       $1724 = $p;
       $1725 = (($1724) + 52|0);
       $1726 = $p;
       $1727 = (($1726) + 48|0);
       $1728 = $p;
       $1729 = (($1728) + 160|0);
       $1730 = $p;
       $1731 = (($1730) + 164|0);
       _strPost4_alternate($1725,$1727,$1729,$1731);
       $p = 0;
       $1732 = $right;
       $1733 = ($1732|0)!=(0);
       do {
        if (!($1733)) {
         $1734 = $0;
         $1735 = (($1734) + 34400|0);
         $1736 = HEAP32[$1735>>2]|0;
         $1737 = ($1736|0)!=(0);
         if ($1737) {
          break;
         }
         $1738 = $p01;
         $1739 = (($1738) + -64|0);
         $p = $1739;
         $1740 = $p;
         $1741 = (($1740) + 60|0);
         $1742 = $p;
         $1743 = (($1742) + 56|0);
         $1744 = $p;
         $1745 = (($1744) + 168|0);
         $1746 = $p;
         $1747 = (($1746) + 172|0);
         _strPost4_alternate($1741,$1743,$1745,$1747);
         $1748 = $p;
         $1749 = (($1748) + 52|0);
         $1750 = $p;
         $1751 = (($1750) + 48|0);
         $1752 = $p;
         $1753 = (($1752) + 160|0);
         $1754 = $p;
         $1755 = (($1754) + 164|0);
         _strPost4_alternate($1749,$1751,$1753,$1755);
         $p = 0;
        }
       } while(0);
      }
      $1772 = $right;
      $1773 = ($1772|0)!=(0);
      do {
       if ($1773) {
        label = 371;
       } else {
        $1774 = $0;
        $1775 = (($1774) + 34400|0);
        $1776 = HEAP32[$1775>>2]|0;
        $1777 = ($1776|0)!=(0);
        if ($1777) {
         label = 371;
         break;
        }
        $1816 = $p01;
        $1817 = (($1816) + -128|0);
        _strPost4x4Stage1_alternate($1817,32);
       }
      } while(0);
      if ((label|0) == 371) {
       label = 0;
       $1778 = $bottom;
       $1779 = ($1778|0)!=(0);
       do {
        if (!($1779)) {
         $1780 = $0;
         $1781 = (($1780) + 34404|0);
         $1782 = HEAP32[$1781>>2]|0;
         $1783 = ($1782|0)!=(0);
         if ($1783) {
          break;
         }
         $1784 = $p01;
         $1785 = (($1784) + -8|0);
         $1786 = $p01;
         $1787 = (($1786) + -16|0);
         $1788 = $p12;
         $1789 = (($1788) + -112|0);
         $1790 = $p12;
         $1791 = (($1790) + -104|0);
         _strPost4_alternate($1785,$1787,$1789,$1791);
         $1792 = $p01;
         $1793 = (($1792) + -4|0);
         $1794 = $p01;
         $1795 = (($1794) + -12|0);
         $1796 = $p12;
         $1797 = (($1796) + -108|0);
         $1798 = $p12;
         $1799 = (($1798) + -100|0);
         _strPost4_alternate($1793,$1795,$1797,$1799);
        }
       } while(0);
       $1800 = $p01;
       $1801 = (($1800) + -72|0);
       $1802 = $p01;
       $1803 = (($1802) + -80|0);
       $1804 = $p01;
       $1805 = (($1804) + -48|0);
       $1806 = $p01;
       $1807 = (($1806) + -40|0);
       _strPost4_alternate($1801,$1803,$1805,$1807);
       $1808 = $p01;
       $1809 = (($1808) + -68|0);
       $1810 = $p01;
       $1811 = (($1810) + -76|0);
       $1812 = $p01;
       $1813 = (($1812) + -44|0);
       $1814 = $p01;
       $1815 = (($1814) + -36|0);
       _strPost4_alternate($1809,$1811,$1813,$1815);
      }
      $1818 = $p01;
      $1819 = (($1818) + -256|0);
      _strPost4x4Stage1_alternate($1819,32);
     }
    } while(0);
    $1820 = $top;
    $1821 = ($1820|0)!=(0);
    if ($1821) {
     label = 379;
    } else {
     $1822 = $0;
     $1823 = (($1822) + 34404|0);
     $1824 = HEAP32[$1823>>2]|0;
     $1825 = ($1824|0)!=(0);
     if ($1825) {
      label = 379;
     }
    }
    if ((label|0) == 379) {
     label = 0;
     $1826 = $left;
     $1827 = ($1826|0)!=(0);
     if (!($1827)) {
      $1828 = $p12;
      $1829 = (($1828) + -256|0);
      $1830 = (($1829) + 16|0);
      $p = $1830;
      $1831 = $p;
      $1832 = (($1831) + 4|0);
      $1833 = $p;
      $1834 = $p;
      $1835 = (($1834) + 112|0);
      $1836 = $p;
      $1837 = (($1836) + 116|0);
      _strPost4_alternate($1832,$1833,$1835,$1837);
      $1838 = $p;
      $1839 = (($1838) + 12|0);
      $1840 = $p;
      $1841 = (($1840) + 8|0);
      $1842 = $p;
      $1843 = (($1842) + 120|0);
      $1844 = $p;
      $1845 = (($1844) + 124|0);
      _strPost4_alternate($1839,$1841,$1843,$1845);
      $p = 0;
     }
     $1846 = $left;
     $1847 = ($1846|0)!=(0);
     do {
      if (!($1847)) {
       $1848 = $right;
       $1849 = ($1848|0)!=(0);
       if ($1849) {
        break;
       }
       $1850 = $0;
       $1851 = (($1850) + 34400|0);
       $1852 = HEAP32[$1851>>2]|0;
       $1853 = ($1852|0)!=(0);
       if ($1853) {
        break;
       }
       $1854 = $p12;
       $1855 = (($1854) + -128|0);
       $1856 = (($1855) + 16|0);
       $p = $1856;
       $1857 = $p;
       $1858 = (($1857) + 4|0);
       $1859 = $p;
       $1860 = $p;
       $1861 = (($1860) + 112|0);
       $1862 = $p;
       $1863 = (($1862) + 116|0);
       _strPost4_alternate($1858,$1859,$1861,$1863);
       $1864 = $p;
       $1865 = (($1864) + 12|0);
       $1866 = $p;
       $1867 = (($1866) + 8|0);
       $1868 = $p;
       $1869 = (($1868) + 120|0);
       $1870 = $p;
       $1871 = (($1870) + 124|0);
       _strPost4_alternate($1865,$1867,$1869,$1871);
       $p = 0;
      }
     } while(0);
    }
   }
  }
  $1872 = $i;
  $1873 = (($1872) + 1)|0;
  $i = $1873;
 }
 $i = 0;
 while(1) {
  $1874 = $i;
  $1875 = $cfColorFormat;
  $1876 = (2)==($1875|0);
  $1877 = $1876 ? 2 : 0;
  $1878 = ($1874>>>0)<($1877>>>0);
  if ($1878) {
   $1879 = $tScale;
   $1880 = ($1879>>>0)<(16);
   $2866 = $1880;
  } else {
   $2866 = 0;
  }
  if (!($2866)) {
   break;
  }
  $1881 = $i;
  $1882 = (1 + ($1881))|0;
  $1883 = $0;
  $1884 = (($1883) + 34692|0);
  $1885 = (($1884) + ($1882<<2)|0);
  $1886 = HEAP32[$1885>>2]|0;
  $p03 = $1886;
  $1887 = $i;
  $1888 = (1 + ($1887))|0;
  $1889 = $0;
  $1890 = (($1889) + 34756|0);
  $1891 = (($1890) + ($1888<<2)|0);
  $1892 = HEAP32[$1891>>2]|0;
  $p14 = $1892;
  $1893 = $bottomORright;
  $1894 = ($1893|0)!=(0);
  if (!($1894)) {
   $1895 = $0;
   $1896 = (($1895) + 34248|0);
   $1897 = HEAP32[$1896>>2]|0;
   $1898 = (($1897) + 12|0);
   $1899 = HEAP32[$1898>>2]|0;
   $1900 = ($1899>>>0)<(16);
   if ($1900) {
    $1901 = $p14;
    $1902 = (($1901) + 128|0);
    $1903 = HEAP32[$1902>>2]|0;
    $1904 = (($1903) + 1)|0;
    $1905 = $1904 >> 1;
    $1906 = $p14;
    $1907 = HEAP32[$1906>>2]|0;
    $1908 = (($1907) - ($1905))|0;
    HEAP32[$1906>>2] = $1908;
    $1909 = $p14;
    $1910 = HEAP32[$1909>>2]|0;
    $1911 = $p14;
    $1912 = (($1911) + 128|0);
    $1913 = HEAP32[$1912>>2]|0;
    $1914 = (($1913) + ($1910))|0;
    HEAP32[$1912>>2] = $1914;
    $1915 = $0;
    $1916 = (($1915) + 34136|0);
    $1917 = (($1916) + 20|0);
    $1918 = HEAP32[$1917>>2]|0;
    $1919 = ($1918|0)!=(0);
    if ($1919) {
     $1935 = $p14;
     $1936 = $p14;
     $1937 = (($1936) + 256|0);
     $1938 = $p14;
     $1939 = (($1938) + 64|0);
     $1940 = $p14;
     $1941 = (($1940) + 320|0);
     _strDCT2x2dnDec($1935,$1937,$1939,$1941);
     $1942 = $p14;
     $1943 = (($1942) + 128|0);
     $1944 = $p14;
     $1945 = (($1944) + 384|0);
     $1946 = $p14;
     $1947 = (($1946) + 192|0);
     $1948 = $p14;
     $1949 = (($1948) + 448|0);
     _strDCT2x2dnDec($1943,$1945,$1947,$1949);
    } else {
     $1920 = $p14;
     $1921 = $p14;
     $1922 = (($1921) + 256|0);
     $1923 = $p14;
     $1924 = (($1923) + 64|0);
     $1925 = $p14;
     $1926 = (($1925) + 320|0);
     _strDCT2x2dn($1920,$1922,$1924,$1926);
     $1927 = $p14;
     $1928 = (($1927) + 128|0);
     $1929 = $p14;
     $1930 = (($1929) + 384|0);
     $1931 = $p14;
     $1932 = (($1931) + 192|0);
     $1933 = $p14;
     $1934 = (($1933) + 448|0);
     _strDCT2x2dn($1928,$1930,$1932,$1934);
    }
   }
  }
  $1950 = $olOverlap;
  $1951 = (2)==($1950|0);
  if ($1951) {
   $1952 = $leftAdjacentColumn;
   $1953 = ($1952|0)!=(0);
   if ($1953) {
    label = 402;
   } else {
    $1954 = $0;
    $1955 = (($1954) + 34412|0);
    $1956 = HEAP32[$1955>>2]|0;
    $1957 = ($1956|0)!=(0);
    if ($1957) {
     label = 402;
    }
   }
   do {
    if ((label|0) == 402) {
     label = 0;
     $1958 = $top;
     $1959 = ($1958|0)!=(0);
     if (!($1959)) {
      $1960 = $0;
      $1961 = (($1960) + 34404|0);
      $1962 = HEAP32[$1961>>2]|0;
      $1963 = ($1962|0)!=(0);
      if (!($1963)) {
       break;
      }
     }
     $1964 = $p14;
     $1965 = (($1964) + -512|0);
     $1966 = (($1965) + 256|0);
     $1967 = HEAP32[$1966>>2]|0;
     $1968 = $p14;
     $1969 = (($1968) + -512|0);
     $1970 = HEAP32[$1969>>2]|0;
     $1971 = (($1970) - ($1967))|0;
     HEAP32[$1969>>2] = $1971;
    }
   } while(0);
   $1972 = $rightAdjacentColumn;
   $1973 = ($1972|0)!=(0);
   if ($1973) {
    label = 407;
   } else {
    $1974 = $0;
    $1975 = (($1974) + 34408|0);
    $1976 = HEAP32[$1975>>2]|0;
    $1977 = ($1976|0)!=(0);
    if ($1977) {
     label = 407;
    }
   }
   do {
    if ((label|0) == 407) {
     label = 0;
     $1978 = $top;
     $1979 = ($1978|0)!=(0);
     if (!($1979)) {
      $1980 = $0;
      $1981 = (($1980) + 34404|0);
      $1982 = HEAP32[$1981>>2]|0;
      $1983 = ($1982|0)!=(0);
      if (!($1983)) {
       break;
      }
     }
     $1984 = $p14;
     $1985 = HEAP32[$1984>>2]|0;
     $1986 = $i;
     $1987 = $0;
     $1988 = (($1987) + 34416|0);
     $1989 = (($1988) + ($1986<<3)|0);
     HEAP32[$1989>>2] = $1985;
    }
   } while(0);
   $1990 = $right;
   $1991 = ($1990|0)!=(0);
   if ($1991) {
    label = 412;
   } else {
    $1992 = $0;
    $1993 = (($1992) + 34400|0);
    $1994 = HEAP32[$1993>>2]|0;
    $1995 = ($1994|0)!=(0);
    if ($1995) {
     label = 412;
    }
   }
   do {
    if ((label|0) == 412) {
     label = 0;
     $1996 = $top;
     $1997 = ($1996|0)!=(0);
     if (!($1997)) {
      $1998 = $0;
      $1999 = (($1998) + 34404|0);
      $2000 = HEAP32[$1999>>2]|0;
      $2001 = ($2000|0)!=(0);
      if (!($2001)) {
       break;
      }
     }
     $2002 = $i;
     $2003 = $0;
     $2004 = (($2003) + 34416|0);
     $2005 = (($2004) + ($2002<<3)|0);
     $2006 = HEAP32[$2005>>2]|0;
     $2007 = $p14;
     $2008 = (($2007) + -512|0);
     $2009 = (($2008) + 256|0);
     $2010 = HEAP32[$2009>>2]|0;
     $2011 = (($2010) - ($2006))|0;
     HEAP32[$2009>>2] = $2011;
    }
   } while(0);
   $2012 = $leftAdjacentColumn;
   $2013 = ($2012|0)!=(0);
   if ($2013) {
    label = 417;
   } else {
    $2014 = $0;
    $2015 = (($2014) + 34412|0);
    $2016 = HEAP32[$2015>>2]|0;
    $2017 = ($2016|0)!=(0);
    if ($2017) {
     label = 417;
    }
   }
   do {
    if ((label|0) == 417) {
     label = 0;
     $2018 = $bottom;
     $2019 = ($2018|0)!=(0);
     if (!($2019)) {
      $2020 = $0;
      $2021 = (($2020) + 34404|0);
      $2022 = HEAP32[$2021>>2]|0;
      $2023 = ($2022|0)!=(0);
      if (!($2023)) {
       break;
      }
     }
     $2024 = $p03;
     $2025 = (($2024) + -512|0);
     $2026 = (($2025) + 448|0);
     $2027 = HEAP32[$2026>>2]|0;
     $2028 = $p03;
     $2029 = (($2028) + -512|0);
     $2030 = (($2029) + 192|0);
     $2031 = HEAP32[$2030>>2]|0;
     $2032 = (($2031) - ($2027))|0;
     HEAP32[$2030>>2] = $2032;
    }
   } while(0);
   $2033 = $rightAdjacentColumn;
   $2034 = ($2033|0)!=(0);
   if ($2034) {
    label = 422;
   } else {
    $2035 = $0;
    $2036 = (($2035) + 34408|0);
    $2037 = HEAP32[$2036>>2]|0;
    $2038 = ($2037|0)!=(0);
    if ($2038) {
     label = 422;
    }
   }
   do {
    if ((label|0) == 422) {
     label = 0;
     $2039 = $bottom;
     $2040 = ($2039|0)!=(0);
     if (!($2040)) {
      $2041 = $0;
      $2042 = (($2041) + 34404|0);
      $2043 = HEAP32[$2042>>2]|0;
      $2044 = ($2043|0)!=(0);
      if (!($2044)) {
       break;
      }
     }
     $2045 = $p03;
     $2046 = (($2045) + 192|0);
     $2047 = HEAP32[$2046>>2]|0;
     $2048 = $i;
     $2049 = $0;
     $2050 = (($2049) + 34416|0);
     $2051 = (($2050) + ($2048<<3)|0);
     $2052 = (($2051) + 4|0);
     HEAP32[$2052>>2] = $2047;
    }
   } while(0);
   $2053 = $right;
   $2054 = ($2053|0)!=(0);
   if ($2054) {
    label = 427;
   } else {
    $2055 = $0;
    $2056 = (($2055) + 34400|0);
    $2057 = HEAP32[$2056>>2]|0;
    $2058 = ($2057|0)!=(0);
    if ($2058) {
     label = 427;
    }
   }
   do {
    if ((label|0) == 427) {
     label = 0;
     $2059 = $bottom;
     $2060 = ($2059|0)!=(0);
     if (!($2060)) {
      $2061 = $0;
      $2062 = (($2061) + 34404|0);
      $2063 = HEAP32[$2062>>2]|0;
      $2064 = ($2063|0)!=(0);
      if (!($2064)) {
       break;
      }
     }
     $2065 = $i;
     $2066 = $0;
     $2067 = (($2066) + 34416|0);
     $2068 = (($2067) + ($2065<<3)|0);
     $2069 = (($2068) + 4|0);
     $2070 = HEAP32[$2069>>2]|0;
     $2071 = $p03;
     $2072 = (($2071) + -512|0);
     $2073 = (($2072) + 448|0);
     $2074 = HEAP32[$2073>>2]|0;
     $2075 = (($2074) - ($2070))|0;
     HEAP32[$2073>>2] = $2075;
    }
   } while(0);
   $2076 = $bottom;
   $2077 = ($2076|0)!=(0);
   if (!($2077)) {
    $2078 = $leftORright;
    $2079 = ($2078|0)!=(0);
    if ($2079) {
     label = 433;
    } else {
     $2080 = $0;
     $2081 = (($2080) + 34400|0);
     $2082 = HEAP32[$2081>>2]|0;
     $2083 = ($2082|0)!=(0);
     if ($2083) {
      label = 433;
     }
    }
    if ((label|0) == 433) {
     label = 0;
     $2084 = $top;
     $2085 = ($2084|0)!=(0);
     do {
      if (!($2085)) {
       $2086 = $0;
       $2087 = (($2086) + 34404|0);
       $2088 = HEAP32[$2087>>2]|0;
       $2089 = ($2088|0)!=(0);
       if ($2089) {
        break;
       }
       $2090 = $left;
       $2091 = ($2090|0)!=(0);
       if ($2091) {
        label = 437;
       } else {
        $2092 = $0;
        $2093 = (($2092) + 34400|0);
        $2094 = HEAP32[$2093>>2]|0;
        $2095 = ($2094|0)!=(0);
        if ($2095) {
         label = 437;
        }
       }
       if ((label|0) == 437) {
        label = 0;
        $2096 = $p03;
        $2097 = (($2096) + 192|0);
        $2098 = $p14;
        _strPost2_alternate($2097,$2098);
       }
       $2099 = $right;
       $2100 = ($2099|0)!=(0);
       if ($2100) {
        label = 440;
       } else {
        $2101 = $0;
        $2102 = (($2101) + 34400|0);
        $2103 = HEAP32[$2102>>2]|0;
        $2104 = ($2103|0)!=(0);
        if ($2104) {
         label = 440;
        }
       }
       if ((label|0) == 440) {
        label = 0;
        $2105 = $p03;
        $2106 = (($2105) + 192|0);
        $2107 = (($2106) + -256|0);
        $2108 = $p14;
        $2109 = (($2108) + -256|0);
        _strPost2_alternate($2107,$2109);
       }
      }
     } while(0);
     $2110 = $left;
     $2111 = ($2110|0)!=(0);
     if ($2111) {
      label = 444;
     } else {
      $2112 = $0;
      $2113 = (($2112) + 34400|0);
      $2114 = HEAP32[$2113>>2]|0;
      $2115 = ($2114|0)!=(0);
      if ($2115) {
       label = 444;
      }
     }
     if ((label|0) == 444) {
      label = 0;
      $2116 = $p14;
      $2117 = (($2116) + 64|0);
      $2118 = $p14;
      $2119 = (($2118) + 64|0);
      $2120 = (($2119) + 64|0);
      _strPost2_alternate($2117,$2120);
     }
     $2121 = $right;
     $2122 = ($2121|0)!=(0);
     if ($2122) {
      label = 447;
     } else {
      $2123 = $0;
      $2124 = (($2123) + 34400|0);
      $2125 = HEAP32[$2124>>2]|0;
      $2126 = ($2125|0)!=(0);
      if ($2126) {
       label = 447;
      }
     }
     if ((label|0) == 447) {
      label = 0;
      $2127 = $p14;
      $2128 = (($2127) + -192|0);
      $2129 = $p14;
      $2130 = (($2129) + -192|0);
      $2131 = (($2130) + 64|0);
      _strPost2_alternate($2128,$2131);
     }
    }
    $2132 = $leftORright;
    $2133 = ($2132|0)!=(0);
    do {
     if (!($2133)) {
      $2134 = $0;
      $2135 = (($2134) + 34400|0);
      $2136 = HEAP32[$2135>>2]|0;
      $2137 = ($2136|0)!=(0);
      if ($2137) {
       break;
      }
      $2138 = $top;
      $2139 = ($2138|0)!=(0);
      do {
       if ($2139) {
        label = 453;
       } else {
        $2140 = $0;
        $2141 = (($2140) + 34404|0);
        $2142 = HEAP32[$2141>>2]|0;
        $2143 = ($2142|0)!=(0);
        if ($2143) {
         label = 453;
         break;
        }
        $2147 = $p03;
        $2148 = (($2147) + -64|0);
        $2149 = $p03;
        $2150 = (($2149) + 192|0);
        $2151 = $p14;
        $2152 = (($2151) + -256|0);
        $2153 = $p14;
        _strPost2x2_alternate($2148,$2150,$2152,$2153);
       }
      } while(0);
      if ((label|0) == 453) {
       label = 0;
       $2144 = $p14;
       $2145 = (($2144) + -256|0);
       $2146 = $p14;
       _strPost2_alternate($2145,$2146);
      }
      $2154 = $p14;
      $2155 = (($2154) + -192|0);
      $2156 = $p14;
      $2157 = (($2156) + 64|0);
      $2158 = $p14;
      $2159 = (($2158) + -128|0);
      $2160 = $p14;
      $2161 = (($2160) + 128|0);
      _strPost2x2_alternate($2155,$2157,$2159,$2161);
     }
    } while(0);
   }
   $2162 = $bottom;
   $2163 = ($2162|0)!=(0);
   if ($2163) {
    label = 459;
   } else {
    $2164 = $0;
    $2165 = (($2164) + 34404|0);
    $2166 = HEAP32[$2165>>2]|0;
    $2167 = ($2166|0)!=(0);
    if ($2167) {
     label = 459;
    }
   }
   do {
    if ((label|0) == 459) {
     label = 0;
     $2168 = $leftORright;
     $2169 = ($2168|0)!=(0);
     if ($2169) {
      break;
     }
     $2170 = $0;
     $2171 = (($2170) + 34400|0);
     $2172 = HEAP32[$2171>>2]|0;
     $2173 = ($2172|0)!=(0);
     if ($2173) {
      break;
     }
     $2174 = $p03;
     $2175 = (($2174) + -64|0);
     $2176 = $p03;
     $2177 = (($2176) + 192|0);
     _strPost2_alternate($2175,$2177);
    }
   } while(0);
   $2178 = $leftAdjacentColumn;
   $2179 = ($2178|0)!=(0);
   if ($2179) {
    label = 464;
   } else {
    $2180 = $0;
    $2181 = (($2180) + 34412|0);
    $2182 = HEAP32[$2181>>2]|0;
    $2183 = ($2182|0)!=(0);
    if ($2183) {
     label = 464;
    }
   }
   do {
    if ((label|0) == 464) {
     label = 0;
     $2184 = $top;
     $2185 = ($2184|0)!=(0);
     if (!($2185)) {
      $2186 = $0;
      $2187 = (($2186) + 34404|0);
      $2188 = HEAP32[$2187>>2]|0;
      $2189 = ($2188|0)!=(0);
      if (!($2189)) {
       break;
      }
     }
     $2190 = $p14;
     $2191 = (($2190) + -512|0);
     $2192 = (($2191) + 256|0);
     $2193 = HEAP32[$2192>>2]|0;
     $2194 = $p14;
     $2195 = (($2194) + -512|0);
     $2196 = HEAP32[$2195>>2]|0;
     $2197 = (($2196) + ($2193))|0;
     HEAP32[$2195>>2] = $2197;
    }
   } while(0);
   $2198 = $rightAdjacentColumn;
   $2199 = ($2198|0)!=(0);
   if ($2199) {
    label = 469;
   } else {
    $2200 = $0;
    $2201 = (($2200) + 34408|0);
    $2202 = HEAP32[$2201>>2]|0;
    $2203 = ($2202|0)!=(0);
    if ($2203) {
     label = 469;
    }
   }
   do {
    if ((label|0) == 469) {
     label = 0;
     $2204 = $top;
     $2205 = ($2204|0)!=(0);
     if (!($2205)) {
      $2206 = $0;
      $2207 = (($2206) + 34404|0);
      $2208 = HEAP32[$2207>>2]|0;
      $2209 = ($2208|0)!=(0);
      if (!($2209)) {
       break;
      }
     }
     $2210 = $p14;
     $2211 = HEAP32[$2210>>2]|0;
     $2212 = $i;
     $2213 = $0;
     $2214 = (($2213) + 34432|0);
     $2215 = (($2214) + ($2212<<3)|0);
     HEAP32[$2215>>2] = $2211;
    }
   } while(0);
   $2216 = $right;
   $2217 = ($2216|0)!=(0);
   if ($2217) {
    label = 474;
   } else {
    $2218 = $0;
    $2219 = (($2218) + 34400|0);
    $2220 = HEAP32[$2219>>2]|0;
    $2221 = ($2220|0)!=(0);
    if ($2221) {
     label = 474;
    }
   }
   do {
    if ((label|0) == 474) {
     label = 0;
     $2222 = $top;
     $2223 = ($2222|0)!=(0);
     if (!($2223)) {
      $2224 = $0;
      $2225 = (($2224) + 34404|0);
      $2226 = HEAP32[$2225>>2]|0;
      $2227 = ($2226|0)!=(0);
      if (!($2227)) {
       break;
      }
     }
     $2228 = $i;
     $2229 = $0;
     $2230 = (($2229) + 34432|0);
     $2231 = (($2230) + ($2228<<3)|0);
     $2232 = HEAP32[$2231>>2]|0;
     $2233 = $p14;
     $2234 = (($2233) + -512|0);
     $2235 = (($2234) + 256|0);
     $2236 = HEAP32[$2235>>2]|0;
     $2237 = (($2236) + ($2232))|0;
     HEAP32[$2235>>2] = $2237;
    }
   } while(0);
   $2238 = $leftAdjacentColumn;
   $2239 = ($2238|0)!=(0);
   if ($2239) {
    label = 479;
   } else {
    $2240 = $0;
    $2241 = (($2240) + 34412|0);
    $2242 = HEAP32[$2241>>2]|0;
    $2243 = ($2242|0)!=(0);
    if ($2243) {
     label = 479;
    }
   }
   do {
    if ((label|0) == 479) {
     label = 0;
     $2244 = $bottom;
     $2245 = ($2244|0)!=(0);
     if (!($2245)) {
      $2246 = $0;
      $2247 = (($2246) + 34404|0);
      $2248 = HEAP32[$2247>>2]|0;
      $2249 = ($2248|0)!=(0);
      if (!($2249)) {
       break;
      }
     }
     $2250 = $p03;
     $2251 = (($2250) + -512|0);
     $2252 = (($2251) + 448|0);
     $2253 = HEAP32[$2252>>2]|0;
     $2254 = $p03;
     $2255 = (($2254) + -512|0);
     $2256 = (($2255) + 192|0);
     $2257 = HEAP32[$2256>>2]|0;
     $2258 = (($2257) + ($2253))|0;
     HEAP32[$2256>>2] = $2258;
    }
   } while(0);
   $2259 = $rightAdjacentColumn;
   $2260 = ($2259|0)!=(0);
   if ($2260) {
    label = 484;
   } else {
    $2261 = $0;
    $2262 = (($2261) + 34408|0);
    $2263 = HEAP32[$2262>>2]|0;
    $2264 = ($2263|0)!=(0);
    if ($2264) {
     label = 484;
    }
   }
   do {
    if ((label|0) == 484) {
     label = 0;
     $2265 = $bottom;
     $2266 = ($2265|0)!=(0);
     if (!($2266)) {
      $2267 = $0;
      $2268 = (($2267) + 34404|0);
      $2269 = HEAP32[$2268>>2]|0;
      $2270 = ($2269|0)!=(0);
      if (!($2270)) {
       break;
      }
     }
     $2271 = $p03;
     $2272 = (($2271) + 192|0);
     $2273 = HEAP32[$2272>>2]|0;
     $2274 = $i;
     $2275 = $0;
     $2276 = (($2275) + 34432|0);
     $2277 = (($2276) + ($2274<<3)|0);
     $2278 = (($2277) + 4|0);
     HEAP32[$2278>>2] = $2273;
    }
   } while(0);
   $2279 = $right;
   $2280 = ($2279|0)!=(0);
   if ($2280) {
    label = 489;
   } else {
    $2281 = $0;
    $2282 = (($2281) + 34400|0);
    $2283 = HEAP32[$2282>>2]|0;
    $2284 = ($2283|0)!=(0);
    if ($2284) {
     label = 489;
    }
   }
   do {
    if ((label|0) == 489) {
     label = 0;
     $2285 = $bottom;
     $2286 = ($2285|0)!=(0);
     if (!($2286)) {
      $2287 = $0;
      $2288 = (($2287) + 34404|0);
      $2289 = HEAP32[$2288>>2]|0;
      $2290 = ($2289|0)!=(0);
      if (!($2290)) {
       break;
      }
     }
     $2291 = $i;
     $2292 = $0;
     $2293 = (($2292) + 34432|0);
     $2294 = (($2293) + ($2291<<3)|0);
     $2295 = (($2294) + 4|0);
     $2296 = HEAP32[$2295>>2]|0;
     $2297 = $p03;
     $2298 = (($2297) + -512|0);
     $2299 = (($2298) + 448|0);
     $2300 = HEAP32[$2299>>2]|0;
     $2301 = (($2300) + ($2296))|0;
     HEAP32[$2299>>2] = $2301;
    }
   } while(0);
  }
  $2302 = $tScale;
  $2303 = ($2302>>>0)>=(4);
  if ($2303) {
  } else {
   $2304 = $top;
   $2305 = ($2304|0)!=(0);
   if (!($2305)) {
    $2306 = $left;
    $2307 = ($2306|0)!=(0);
    if ($2307) {
     $2316 = 112;
    } else {
     $2308 = $leftAdjacentColumn;
     $2309 = ($2308|0)!=(0);
     if ($2309) {
      $2315 = 1;
     } else {
      $2310 = $0;
      $2311 = (($2310) + 34412|0);
      $2312 = HEAP32[$2311>>2]|0;
      $2313 = ($2312|0)!=(0);
      $2315 = $2313;
     }
     $2314 = $2315 ? -80 : -16;
     $2316 = $2314;
    }
    $j = $2316;
    while(1) {
     $2317 = $j;
     $2318 = $right;
     $2319 = ($2318|0)!=(0);
     if ($2319) {
      $2325 = 1;
     } else {
      $2320 = $0;
      $2321 = (($2320) + 34400|0);
      $2322 = HEAP32[$2321>>2]|0;
      $2323 = ($2322|0)!=(0);
      $2325 = $2323;
     }
     $2324 = $2325 ? 48 : 112;
     $2326 = ($2317|0)<($2324|0);
     if (!($2326)) {
      break;
     }
     $2327 = $p03;
     $2328 = $j;
     $2329 = (($2327) + ($2328<<2)|0);
     _strIDCT4x4Stage1($2329);
     $2330 = $j;
     $2331 = (($2330) + 64)|0;
     $j = $2331;
    }
   }
   $2332 = $bottom;
   $2333 = ($2332|0)!=(0);
   if (!($2333)) {
    $2334 = $left;
    $2335 = ($2334|0)!=(0);
    if ($2335) {
     $2344 = 64;
    } else {
     $2336 = $leftAdjacentColumn;
     $2337 = ($2336|0)!=(0);
     if ($2337) {
      $2343 = 1;
     } else {
      $2338 = $0;
      $2339 = (($2338) + 34412|0);
      $2340 = HEAP32[$2339>>2]|0;
      $2341 = ($2340|0)!=(0);
      $2343 = $2341;
     }
     $2342 = $2343 ? -128 : -64;
     $2344 = $2342;
    }
    $j = $2344;
    while(1) {
     $2345 = $j;
     $2346 = $right;
     $2347 = ($2346|0)!=(0);
     if ($2347) {
      $2353 = 1;
     } else {
      $2348 = $0;
      $2349 = (($2348) + 34400|0);
      $2350 = HEAP32[$2349>>2]|0;
      $2351 = ($2350|0)!=(0);
      $2353 = $2351;
     }
     $2352 = $2353 ? 0 : 64;
     $2354 = ($2345|0)<($2352|0);
     if (!($2354)) {
      break;
     }
     $2355 = $p14;
     $2356 = $j;
     $2357 = (($2355) + ($2356<<2)|0);
     _strIDCT4x4Stage1($2357);
     $2358 = $p14;
     $2359 = $j;
     $2360 = (($2358) + ($2359<<2)|0);
     $2361 = (($2360) + 64|0);
     _strIDCT4x4Stage1($2361);
     $2362 = $p14;
     $2363 = $j;
     $2364 = (($2362) + ($2363<<2)|0);
     $2365 = (($2364) + 128|0);
     _strIDCT4x4Stage1($2365);
     $2366 = $j;
     $2367 = (($2366) + 64)|0;
     $j = $2367;
    }
   }
   $2368 = $olOverlap;
   $2369 = (0)!=($2368|0);
   if ($2369) {
    $2370 = $top;
    $2371 = ($2370|0)!=(0);
    if ($2371) {
     label = 524;
    } else {
     $2372 = $0;
     $2373 = (($2372) + 34404|0);
     $2374 = HEAP32[$2373>>2]|0;
     $2375 = ($2374|0)!=(0);
     if ($2375) {
      label = 524;
     }
    }
    do {
     if ((label|0) == 524) {
      label = 0;
      $2376 = $leftAdjacentColumn;
      $2377 = ($2376|0)!=(0);
      if (!($2377)) {
       $2378 = $0;
       $2379 = (($2378) + 34412|0);
       $2380 = HEAP32[$2379>>2]|0;
       $2381 = ($2380|0)!=(0);
       if (!($2381)) {
        break;
       }
      }
      $2382 = $p14;
      $2383 = (($2382) + -512|0);
      $2384 = $p14;
      $2385 = (($2384) + -512|0);
      $2386 = (($2385) + 4|0);
      $2387 = $p14;
      $2388 = (($2387) + -512|0);
      $2389 = (($2388) + 8|0);
      $2390 = $p14;
      $2391 = (($2390) + -512|0);
      $2392 = (($2391) + 12|0);
      _strPost4_alternate($2383,$2386,$2389,$2392);
     }
    } while(0);
    $2393 = $top;
    $2394 = ($2393|0)!=(0);
    if ($2394) {
     label = 529;
    } else {
     $2395 = $0;
     $2396 = (($2395) + 34404|0);
     $2397 = HEAP32[$2396>>2]|0;
     $2398 = ($2397|0)!=(0);
     if ($2398) {
      label = 529;
     }
    }
    do {
     if ((label|0) == 529) {
      label = 0;
      $2399 = $right;
      $2400 = ($2399|0)!=(0);
      if (!($2400)) {
       $2401 = $0;
       $2402 = (($2401) + 34400|0);
       $2403 = HEAP32[$2402>>2]|0;
       $2404 = ($2403|0)!=(0);
       if (!($2404)) {
        break;
       }
      }
      $2405 = $p14;
      $2406 = (($2405) + -236|0);
      $2407 = $p14;
      $2408 = (($2407) + -240|0);
      $2409 = $p14;
      $2410 = (($2409) + -228|0);
      $2411 = $p14;
      $2412 = (($2411) + -232|0);
      _strPost4_alternate($2406,$2408,$2410,$2412);
     }
    } while(0);
    $2413 = $bottom;
    $2414 = ($2413|0)!=(0);
    if ($2414) {
     label = 534;
    } else {
     $2415 = $0;
     $2416 = (($2415) + 34404|0);
     $2417 = HEAP32[$2416>>2]|0;
     $2418 = ($2417|0)!=(0);
     if ($2418) {
      label = 534;
     }
    }
    do {
     if ((label|0) == 534) {
      label = 0;
      $2419 = $leftAdjacentColumn;
      $2420 = ($2419|0)!=(0);
      if (!($2420)) {
       $2421 = $0;
       $2422 = (($2421) + 34412|0);
       $2423 = HEAP32[$2422>>2]|0;
       $2424 = ($2423|0)!=(0);
       if (!($2424)) {
        break;
       }
      }
      $2425 = $p03;
      $2426 = (($2425) + -512|0);
      $2427 = (($2426) + 192|0);
      $2428 = (($2427) + 40|0);
      $2429 = $p03;
      $2430 = (($2429) + -512|0);
      $2431 = (($2430) + 192|0);
      $2432 = (($2431) + 44|0);
      $2433 = $p03;
      $2434 = (($2433) + -512|0);
      $2435 = (($2434) + 192|0);
      $2436 = (($2435) + 32|0);
      $2437 = $p03;
      $2438 = (($2437) + -512|0);
      $2439 = (($2438) + 192|0);
      $2440 = (($2439) + 36|0);
      _strPost4_alternate($2428,$2432,$2436,$2440);
     }
    } while(0);
    $2441 = $bottom;
    $2442 = ($2441|0)!=(0);
    if ($2442) {
     label = 539;
    } else {
     $2443 = $0;
     $2444 = (($2443) + 34404|0);
     $2445 = HEAP32[$2444>>2]|0;
     $2446 = ($2445|0)!=(0);
     if ($2446) {
      label = 539;
     }
    }
    do {
     if ((label|0) == 539) {
      label = 0;
      $2447 = $right;
      $2448 = ($2447|0)!=(0);
      if (!($2448)) {
       $2449 = $0;
       $2450 = (($2449) + 34400|0);
       $2451 = HEAP32[$2450>>2]|0;
       $2452 = ($2451|0)!=(0);
       if (!($2452)) {
        break;
       }
      }
      $2453 = $p03;
      $2454 = (($2453) + -4|0);
      $2455 = $p03;
      $2456 = (($2455) + -8|0);
      $2457 = $p03;
      $2458 = (($2457) + -12|0);
      $2459 = $p03;
      $2460 = (($2459) + -16|0);
      _strPost4_alternate($2454,$2456,$2458,$2460);
     }
    } while(0);
    $2461 = $top;
    $2462 = ($2461|0)!=(0);
    if (!($2462)) {
     $2463 = $leftAdjacentColumn;
     $2464 = ($2463|0)!=(0);
     if ($2464) {
      label = 545;
     } else {
      $2465 = $0;
      $2466 = (($2465) + 34412|0);
      $2467 = HEAP32[$2466>>2]|0;
      $2468 = ($2467|0)!=(0);
      if ($2468) {
       label = 545;
      }
     }
     if ((label|0) == 545) {
      label = 0;
      $2469 = $p03;
      $2470 = (($2469) + 128|0);
      $2471 = (($2470) + 40|0);
      $2472 = (($2471) + -512|0);
      $p = $2472;
      $2473 = $p;
      $2474 = $p;
      $2475 = (($2474) + -8|0);
      $2476 = $p;
      $2477 = (($2476) + 24|0);
      $2478 = $p;
      $2479 = (($2478) + 32|0);
      _strPost4_alternate($2473,$2475,$2477,$2479);
      $2480 = $p;
      $2481 = (($2480) + 4|0);
      $2482 = $p;
      $2483 = (($2482) + -4|0);
      $2484 = $p;
      $2485 = (($2484) + 28|0);
      $2486 = $p;
      $2487 = (($2486) + 36|0);
      _strPost4_alternate($2481,$2483,$2485,$2487);
      $p = 0;
     }
     $2488 = $right;
     $2489 = ($2488|0)!=(0);
     if ($2489) {
      label = 548;
     } else {
      $2490 = $0;
      $2491 = (($2490) + 34400|0);
      $2492 = HEAP32[$2491>>2]|0;
      $2493 = ($2492|0)!=(0);
      if ($2493) {
       label = 548;
      }
     }
     if ((label|0) == 548) {
      label = 0;
      $2494 = $p03;
      $2495 = (($2494) + -128|0);
      $2496 = (($2495) + 56|0);
      $p = $2496;
      $2497 = $p;
      $2498 = $p;
      $2499 = (($2498) + -8|0);
      $2500 = $p;
      $2501 = (($2500) + 24|0);
      $2502 = $p;
      $2503 = (($2502) + 32|0);
      _strPost4_alternate($2497,$2499,$2501,$2503);
      $2504 = $p;
      $2505 = (($2504) + 4|0);
      $2506 = $p;
      $2507 = (($2506) + -4|0);
      $2508 = $p;
      $2509 = (($2508) + 28|0);
      $2510 = $p;
      $2511 = (($2510) + 36|0);
      _strPost4_alternate($2505,$2507,$2509,$2511);
      $p = 0;
     }
     $2512 = $left;
     $2513 = ($2512|0)!=(0);
     $2514 = $2513 ? 0 : -128;
     $j = $2514;
     while(1) {
      $2515 = $j;
      $2516 = $right;
      $2517 = ($2516|0)!=(0);
      if ($2517) {
       $2523 = 1;
      } else {
       $2518 = $0;
       $2519 = (($2518) + 34400|0);
       $2520 = HEAP32[$2519>>2]|0;
       $2521 = ($2520|0)!=(0);
       $2523 = $2521;
      }
      $2522 = $2523 ? -64 : 0;
      $2524 = ($2515|0)<($2522|0);
      if (!($2524)) {
       break;
      }
      $2525 = $p03;
      $2526 = $j;
      $2527 = (($2525) + ($2526<<2)|0);
      $2528 = (($2527) + 128|0);
      _strPost4x4Stage1_alternate($2528,0);
      $2529 = $j;
      $2530 = (($2529) + 64)|0;
      $j = $2530;
     }
    }
    $2531 = $bottom;
    $2532 = ($2531|0)!=(0);
    if (!($2532)) {
     $2533 = $leftAdjacentColumn;
     $2534 = ($2533|0)!=(0);
     if ($2534) {
      label = 559;
     } else {
      $2535 = $0;
      $2536 = (($2535) + 34412|0);
      $2537 = HEAP32[$2536>>2]|0;
      $2538 = ($2537|0)!=(0);
      if ($2538) {
       label = 559;
      }
     }
     if ((label|0) == 559) {
      label = 0;
      $2539 = $p14;
      $2540 = (($2539) + 40|0);
      $2541 = (($2540) + -512|0);
      $p = $2541;
      $2542 = $p;
      $2543 = $p;
      $2544 = (($2543) + -8|0);
      $2545 = $p;
      $2546 = (($2545) + 24|0);
      $2547 = $p;
      $2548 = (($2547) + 32|0);
      _strPost4_alternate($2542,$2544,$2546,$2548);
      $2549 = $p;
      $2550 = (($2549) + 4|0);
      $2551 = $p;
      $2552 = (($2551) + -4|0);
      $2553 = $p;
      $2554 = (($2553) + 28|0);
      $2555 = $p;
      $2556 = (($2555) + 36|0);
      _strPost4_alternate($2550,$2552,$2554,$2556);
      $2557 = $p;
      $2558 = (($2557) + 64|0);
      $p = $2558;
      $2559 = $p;
      $2560 = $p;
      $2561 = (($2560) + -8|0);
      $2562 = $p;
      $2563 = (($2562) + 24|0);
      $2564 = $p;
      $2565 = (($2564) + 32|0);
      _strPost4_alternate($2559,$2561,$2563,$2565);
      $2566 = $p;
      $2567 = (($2566) + 4|0);
      $2568 = $p;
      $2569 = (($2568) + -4|0);
      $2570 = $p;
      $2571 = (($2570) + 28|0);
      $2572 = $p;
      $2573 = (($2572) + 36|0);
      _strPost4_alternate($2567,$2569,$2571,$2573);
      $p = 0;
     }
     $2574 = $right;
     $2575 = ($2574|0)!=(0);
     if ($2575) {
      label = 562;
     } else {
      $2576 = $0;
      $2577 = (($2576) + 34400|0);
      $2578 = HEAP32[$2577>>2]|0;
      $2579 = ($2578|0)!=(0);
      if ($2579) {
       label = 562;
      }
     }
     if ((label|0) == 562) {
      label = 0;
      $2580 = $p14;
      $2581 = (($2580) + -256|0);
      $2582 = (($2581) + 56|0);
      $p = $2582;
      $2583 = $p;
      $2584 = $p;
      $2585 = (($2584) + -8|0);
      $2586 = $p;
      $2587 = (($2586) + 24|0);
      $2588 = $p;
      $2589 = (($2588) + 32|0);
      _strPost4_alternate($2583,$2585,$2587,$2589);
      $2590 = $p;
      $2591 = (($2590) + 4|0);
      $2592 = $p;
      $2593 = (($2592) + -4|0);
      $2594 = $p;
      $2595 = (($2594) + 28|0);
      $2596 = $p;
      $2597 = (($2596) + 36|0);
      _strPost4_alternate($2591,$2593,$2595,$2597);
      $2598 = $p;
      $2599 = (($2598) + 64|0);
      $p = $2599;
      $2600 = $p;
      $2601 = $p;
      $2602 = (($2601) + -8|0);
      $2603 = $p;
      $2604 = (($2603) + 24|0);
      $2605 = $p;
      $2606 = (($2605) + 32|0);
      _strPost4_alternate($2600,$2602,$2604,$2606);
      $2607 = $p;
      $2608 = (($2607) + 4|0);
      $2609 = $p;
      $2610 = (($2609) + -4|0);
      $2611 = $p;
      $2612 = (($2611) + 28|0);
      $2613 = $p;
      $2614 = (($2613) + 36|0);
      _strPost4_alternate($2608,$2610,$2612,$2614);
      $p = 0;
     }
     $2615 = $left;
     $2616 = ($2615|0)!=(0);
     $2617 = $2616 ? 0 : -128;
     $j = $2617;
     while(1) {
      $2618 = $j;
      $2619 = $right;
      $2620 = ($2619|0)!=(0);
      if ($2620) {
       $2626 = 1;
      } else {
       $2621 = $0;
       $2622 = (($2621) + 34400|0);
       $2623 = HEAP32[$2622>>2]|0;
       $2624 = ($2623|0)!=(0);
       $2626 = $2624;
      }
      $2625 = $2626 ? -64 : 0;
      $2627 = ($2618|0)<($2625|0);
      if (!($2627)) {
       break;
      }
      $2628 = $p14;
      $2629 = $j;
      $2630 = (($2628) + ($2629<<2)|0);
      _strPost4x4Stage1_alternate($2630,0);
      $2631 = $p14;
      $2632 = $j;
      $2633 = (($2631) + ($2632<<2)|0);
      $2634 = (($2633) + 64|0);
      _strPost4x4Stage1_alternate($2634,0);
      $2635 = $j;
      $2636 = (($2635) + 64)|0;
      $j = $2636;
     }
    }
    $2637 = $topORbottom;
    $2638 = ($2637|0)!=(0);
    do {
     if ($2638) {
      label = 572;
     } else {
      $2639 = $0;
      $2640 = (($2639) + 34404|0);
      $2641 = HEAP32[$2640>>2]|0;
      $2642 = ($2641|0)!=(0);
      if ($2642) {
       label = 572;
       break;
      }
      $2752 = $leftAdjacentColumn;
      $2753 = ($2752|0)!=(0);
      if ($2753) {
       label = 593;
      } else {
       $2754 = $0;
       $2755 = (($2754) + 34412|0);
       $2756 = HEAP32[$2755>>2]|0;
       $2757 = ($2756|0)!=(0);
       if ($2757) {
        label = 593;
       }
      }
      if ((label|0) == 593) {
       label = 0;
       $j = -128;
       $2758 = $p03;
       $2759 = $j;
       $2760 = (($2758) + ($2759<<2)|0);
       $2761 = (($2760) + 192|0);
       $2762 = (($2761) + 40|0);
       $2763 = $p03;
       $2764 = $j;
       $2765 = (($2763) + ($2764<<2)|0);
       $2766 = (($2765) + 192|0);
       $2767 = (($2766) + 40|0);
       $2768 = (($2767) + -8|0);
       $2769 = $p14;
       $2770 = $j;
       $2771 = (($2769) + ($2770<<2)|0);
       $2772 = $p14;
       $2773 = $j;
       $2774 = (($2772) + ($2773<<2)|0);
       $2775 = (($2774) + 8|0);
       _strPost4_alternate($2762,$2768,$2771,$2775);
       $2776 = $p03;
       $2777 = $j;
       $2778 = (($2776) + ($2777<<2)|0);
       $2779 = (($2778) + 192|0);
       $2780 = (($2779) + 40|0);
       $2781 = (($2780) + 4|0);
       $2782 = $p03;
       $2783 = $j;
       $2784 = (($2782) + ($2783<<2)|0);
       $2785 = (($2784) + 192|0);
       $2786 = (($2785) + 40|0);
       $2787 = (($2786) + -4|0);
       $2788 = $p14;
       $2789 = $j;
       $2790 = (($2788) + ($2789<<2)|0);
       $2791 = (($2790) + 4|0);
       $2792 = $p14;
       $2793 = $j;
       $2794 = (($2792) + ($2793<<2)|0);
       $2795 = (($2794) + 12|0);
       _strPost4_alternate($2781,$2787,$2791,$2795);
      }
      $2796 = $right;
      $2797 = ($2796|0)!=(0);
      if ($2797) {
       label = 596;
      } else {
       $2798 = $0;
       $2799 = (($2798) + 34400|0);
       $2800 = HEAP32[$2799>>2]|0;
       $2801 = ($2800|0)!=(0);
       if ($2801) {
        label = 596;
       }
      }
      if ((label|0) == 596) {
       label = 0;
       $j = -60;
       $2802 = $p03;
       $2803 = $j;
       $2804 = (($2802) + ($2803<<2)|0);
       $2805 = (($2804) + 192|0);
       $2806 = (($2805) + 40|0);
       $2807 = $p03;
       $2808 = $j;
       $2809 = (($2807) + ($2808<<2)|0);
       $2810 = (($2809) + 192|0);
       $2811 = (($2810) + 40|0);
       $2812 = (($2811) + -8|0);
       $2813 = $p14;
       $2814 = $j;
       $2815 = (($2813) + ($2814<<2)|0);
       $2816 = $p14;
       $2817 = $j;
       $2818 = (($2816) + ($2817<<2)|0);
       $2819 = (($2818) + 8|0);
       _strPost4_alternate($2806,$2812,$2815,$2819);
       $2820 = $p03;
       $2821 = $j;
       $2822 = (($2820) + ($2821<<2)|0);
       $2823 = (($2822) + 192|0);
       $2824 = (($2823) + 40|0);
       $2825 = (($2824) + 4|0);
       $2826 = $p03;
       $2827 = $j;
       $2828 = (($2826) + ($2827<<2)|0);
       $2829 = (($2828) + 192|0);
       $2830 = (($2829) + 40|0);
       $2831 = (($2830) + -4|0);
       $2832 = $p14;
       $2833 = $j;
       $2834 = (($2832) + ($2833<<2)|0);
       $2835 = (($2834) + 4|0);
       $2836 = $p14;
       $2837 = $j;
       $2838 = (($2836) + ($2837<<2)|0);
       $2839 = (($2838) + 12|0);
       _strPost4_alternate($2825,$2831,$2835,$2839);
      }
      $2840 = $left;
      $2841 = ($2840|0)!=(0);
      $2842 = $2841 ? 0 : -128;
      $j = $2842;
      while(1) {
       $2843 = $j;
       $2844 = $right;
       $2845 = ($2844|0)!=(0);
       if ($2845) {
        $2851 = 1;
       } else {
        $2846 = $0;
        $2847 = (($2846) + 34400|0);
        $2848 = HEAP32[$2847>>2]|0;
        $2849 = ($2848|0)!=(0);
        $2851 = $2849;
       }
       $2850 = $2851 ? -64 : 0;
       $2852 = ($2843|0)<($2850|0);
       if (!($2852)) {
        break;
       }
       $2853 = $p03;
       $2854 = $j;
       $2855 = (($2853) + ($2854<<2)|0);
       $2856 = (($2855) + 192|0);
       $2857 = $p14;
       $2858 = $j;
       $2859 = (($2857) + ($2858<<2)|0);
       _strPost4x4Stage1Split_alternate($2856,$2859,0);
       $2860 = $j;
       $2861 = (($2860) + 64)|0;
       $j = $2861;
      }
     }
    } while(0);
    if ((label|0) == 572) {
     label = 0;
     $2643 = $top;
     $2644 = ($2643|0)!=(0);
     if ($2644) {
      label = 574;
     } else {
      $2645 = $0;
      $2646 = (($2645) + 34404|0);
      $2647 = HEAP32[$2646>>2]|0;
      $2648 = ($2647|0)!=(0);
      if ($2648) {
       label = 574;
      }
     }
     if ((label|0) == 574) {
      label = 0;
      $2649 = $p14;
      $2650 = (($2649) + 20|0);
      $p = $2650;
      $2651 = $left;
      $2652 = ($2651|0)!=(0);
      $2653 = $2652 ? 0 : -128;
      $j = $2653;
      while(1) {
       $2654 = $j;
       $2655 = $right;
       $2656 = ($2655|0)!=(0);
       if ($2656) {
        $2662 = 1;
       } else {
        $2657 = $0;
        $2658 = (($2657) + 34400|0);
        $2659 = HEAP32[$2658>>2]|0;
        $2660 = ($2659|0)!=(0);
        $2662 = $2660;
       }
       $2661 = $2662 ? -64 : 0;
       $2663 = ($2654|0)<($2661|0);
       if (!($2663)) {
        break;
       }
       $2664 = $p;
       $2665 = $j;
       $2666 = (($2664) + ($2665<<2)|0);
       $2667 = $p;
       $2668 = $j;
       $2669 = (($2667) + ($2668<<2)|0);
       $2670 = (($2669) + -4|0);
       $2671 = $p;
       $2672 = $j;
       $2673 = (($2671) + ($2672<<2)|0);
       $2674 = (($2673) + 236|0);
       $2675 = $p;
       $2676 = $j;
       $2677 = (($2675) + ($2676<<2)|0);
       $2678 = (($2677) + 240|0);
       _strPost4_alternate($2666,$2670,$2674,$2678);
       $2679 = $p;
       $2680 = $j;
       $2681 = (($2679) + ($2680<<2)|0);
       $2682 = (($2681) + 8|0);
       $2683 = $p;
       $2684 = $j;
       $2685 = (($2683) + ($2684<<2)|0);
       $2686 = (($2685) + 4|0);
       $2687 = $p;
       $2688 = $j;
       $2689 = (($2687) + ($2688<<2)|0);
       $2690 = (($2689) + 244|0);
       $2691 = $p;
       $2692 = $j;
       $2693 = (($2691) + ($2692<<2)|0);
       $2694 = (($2693) + 248|0);
       _strPost4_alternate($2682,$2686,$2690,$2694);
       $2695 = $j;
       $2696 = (($2695) + 64)|0;
       $j = $2696;
      }
      $p = 0;
     }
     $2697 = $bottom;
     $2698 = ($2697|0)!=(0);
     if ($2698) {
      label = 583;
     } else {
      $2699 = $0;
      $2700 = (($2699) + 34404|0);
      $2701 = HEAP32[$2700>>2]|0;
      $2702 = ($2701|0)!=(0);
      if ($2702) {
       label = 583;
      }
     }
     if ((label|0) == 583) {
      label = 0;
      $2703 = $p03;
      $2704 = (($2703) + 192|0);
      $2705 = (($2704) + 52|0);
      $p = $2705;
      $2706 = $left;
      $2707 = ($2706|0)!=(0);
      $2708 = $2707 ? 0 : -128;
      $j = $2708;
      while(1) {
       $2709 = $j;
       $2710 = $right;
       $2711 = ($2710|0)!=(0);
       if ($2711) {
        $2717 = 1;
       } else {
        $2712 = $0;
        $2713 = (($2712) + 34400|0);
        $2714 = HEAP32[$2713>>2]|0;
        $2715 = ($2714|0)!=(0);
        $2717 = $2715;
       }
       $2716 = $2717 ? -64 : 0;
       $2718 = ($2709|0)<($2716|0);
       if (!($2718)) {
        break;
       }
       $2719 = $p;
       $2720 = $j;
       $2721 = (($2719) + ($2720<<2)|0);
       $2722 = $p;
       $2723 = $j;
       $2724 = (($2722) + ($2723<<2)|0);
       $2725 = (($2724) + -4|0);
       $2726 = $p;
       $2727 = $j;
       $2728 = (($2726) + ($2727<<2)|0);
       $2729 = (($2728) + 236|0);
       $2730 = $p;
       $2731 = $j;
       $2732 = (($2730) + ($2731<<2)|0);
       $2733 = (($2732) + 240|0);
       _strPost4_alternate($2721,$2725,$2729,$2733);
       $2734 = $p;
       $2735 = $j;
       $2736 = (($2734) + ($2735<<2)|0);
       $2737 = (($2736) + 8|0);
       $2738 = $p;
       $2739 = $j;
       $2740 = (($2738) + ($2739<<2)|0);
       $2741 = (($2740) + 4|0);
       $2742 = $p;
       $2743 = $j;
       $2744 = (($2742) + ($2743<<2)|0);
       $2745 = (($2744) + 244|0);
       $2746 = $p;
       $2747 = $j;
       $2748 = (($2746) + ($2747<<2)|0);
       $2749 = (($2748) + 248|0);
       _strPost4_alternate($2737,$2741,$2745,$2749);
       $2750 = $j;
       $2751 = (($2750) + 64)|0;
       $j = $2751;
      }
      $p = 0;
     }
    }
   }
  }
  $2862 = $i;
  $2863 = (($2862) + 1)|0;
  $i = $2863;
 }
 STACKTOP = sp;return 0;
}
function _dequantizeBlock4x4($pRec,$pOrg,$pIndex,$iQPLP) {
 $pRec = $pRec|0;
 $pOrg = $pOrg|0;
 $pIndex = $pIndex|0;
 $iQPLP = $iQPLP|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pRec;
 $1 = $pOrg;
 $2 = $pIndex;
 $3 = $iQPLP;
 $i = 1;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(16);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  $11 = Math_imul($9, $10)|0;
  $12 = $i;
  $13 = $2;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = (($16) + ($15<<2)|0);
  HEAP32[$17>>2] = $11;
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 STACKTOP = sp;return;
}
function _dequantizeBlock2x2($pRec,$pOrg,$iQPLP) {
 $pRec = $pRec|0;
 $pOrg = $pOrg|0;
 $iQPLP = $iQPLP|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pRec;
 $1 = $pOrg;
 $2 = $iQPLP;
 $3 = $1;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = Math_imul($5, $6)|0;
 $8 = $0;
 $9 = (($8) + 128|0);
 HEAP32[$9>>2] = $7;
 $10 = $1;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = Math_imul($12, $13)|0;
 $15 = $0;
 $16 = (($15) + 64|0);
 HEAP32[$16>>2] = $14;
 $17 = $1;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 $21 = Math_imul($19, $20)|0;
 $22 = $0;
 $23 = (($22) + 192|0);
 HEAP32[$23>>2] = $21;
 STACKTOP = sp;return;
}
function _dequantizeBlock4x2($pRec,$pOrg,$iQPLP) {
 $pRec = $pRec|0;
 $pOrg = $pOrg|0;
 $iQPLP = $iQPLP|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pRec;
 $1 = $pOrg;
 $2 = $iQPLP;
 $3 = $1;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = Math_imul($5, $6)|0;
 $8 = $0;
 $9 = (($8) + 256|0);
 HEAP32[$9>>2] = $7;
 $10 = $1;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = Math_imul($12, $13)|0;
 $15 = $0;
 $16 = (($15) + 64|0);
 HEAP32[$16>>2] = $14;
 $17 = $1;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 $21 = Math_imul($19, $20)|0;
 $22 = $0;
 $23 = (($22) + 320|0);
 HEAP32[$23>>2] = $21;
 $24 = $1;
 $25 = (($24) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 $28 = Math_imul($26, $27)|0;
 $29 = $0;
 $30 = (($29) + 128|0);
 HEAP32[$30>>2] = $28;
 $31 = $1;
 $32 = (($31) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = Math_imul($33, $34)|0;
 $36 = $0;
 $37 = (($36) + 384|0);
 HEAP32[$37>>2] = $35;
 $38 = $1;
 $39 = (($38) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $2;
 $42 = Math_imul($40, $41)|0;
 $43 = $0;
 $44 = (($43) + 192|0);
 HEAP32[$44>>2] = $42;
 $45 = $1;
 $46 = (($45) + 28|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $2;
 $49 = Math_imul($47, $48)|0;
 $50 = $0;
 $51 = (($50) + 448|0);
 HEAP32[$51>>2] = $49;
 STACKTOP = sp;return;
}
function _dequantizeMacroblock($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cf = 0, $i = 0, $iChannels = 0, $pMBInfo = 0, $pTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34136|0);
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $cf = $4;
 $5 = $0;
 $6 = (($5) + 32976|0);
 $pMBInfo = $6;
 $7 = $0;
 $8 = (($7) + 34316|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 34296|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) + (($12*240)|0)|0);
 $pTile = $13;
 $14 = $0;
 $15 = (($14) + 34136|0);
 $16 = (($15) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 $iChannels = $17;
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $iChannels;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $i;
  $22 = $pMBInfo;
  $23 = (($22) + ($21<<6)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $i;
  $26 = $pTile;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = Math_imul($24, $30)|0;
  $32 = $i;
  $33 = $0;
  $34 = (($33) + 34756|0);
  $35 = (($34) + ($32<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$36>>2] = $31;
  $37 = $0;
  $38 = (($37) + 84|0);
  $39 = (($38) + 44|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(3);
  if ($41) {
   $42 = $i;
   $43 = ($42|0)==(0);
   do {
    if ($43) {
     label = 7;
    } else {
     $44 = $cf;
     $45 = ($44|0)!=(2);
     if ($45) {
      $46 = $cf;
      $47 = ($46|0)!=(1);
      if ($47) {
       label = 7;
       break;
      }
     }
     $68 = $cf;
     $69 = ($68|0)==(2);
     if ($69) {
      $70 = $i;
      $71 = $0;
      $72 = (($71) + 34756|0);
      $73 = (($72) + ($70<<2)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = $i;
      $76 = $pMBInfo;
      $77 = (($76) + ($75<<6)|0);
      $78 = $pMBInfo;
      $79 = (($78) + 1156|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = $80&255;
      $82 = $i;
      $83 = $pTile;
      $84 = (($83) + 64|0);
      $85 = (($84) + ($82<<2)|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (($86) + (($81*20)|0)|0);
      $88 = (($87) + 4|0);
      $89 = HEAP32[$88>>2]|0;
      _dequantizeBlock4x2($74,$77,$89);
     } else {
      $90 = $i;
      $91 = $0;
      $92 = (($91) + 34756|0);
      $93 = (($92) + ($90<<2)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = $i;
      $96 = $pMBInfo;
      $97 = (($96) + ($95<<6)|0);
      $98 = $pMBInfo;
      $99 = (($98) + 1156|0);
      $100 = HEAP8[$99>>0]|0;
      $101 = $100&255;
      $102 = $i;
      $103 = $pTile;
      $104 = (($103) + 64|0);
      $105 = (($104) + ($102<<2)|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (($106) + (($101*20)|0)|0);
      $108 = (($107) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      _dequantizeBlock2x2($94,$97,$109);
     }
    }
   } while(0);
   if ((label|0) == 7) {
    label = 0;
    $48 = $i;
    $49 = $0;
    $50 = (($49) + 34756|0);
    $51 = (($50) + ($48<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $i;
    $54 = $pMBInfo;
    $55 = (($54) + ($53<<6)|0);
    $56 = $pMBInfo;
    $57 = (($56) + 1156|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = $i;
    $61 = $pTile;
    $62 = (($61) + 64|0);
    $63 = (($62) + ($60<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + (($59*20)|0)|0);
    $66 = (($65) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    _dequantizeBlock4x4($52,$55,((14048 + 128|0)),$67);
   }
  }
  $110 = $i;
  $111 = (($110) + 1)|0;
  $i = $111;
 }
 STACKTOP = sp;return 0;
}
function _predDCACDec($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cf = 0, $iADPredMode = 0, $iChannels = 0, $iDCACPredMode = 0, $iDCPredMode = 0, $ii = 0, $mbX = 0, $pMBInfo = 0, $pOrg = 0, $pRef = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34136|0);
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $cf = $4;
 $5 = $cf;
 $6 = ($5|0)==(1);
 if ($6) {
  label = 3;
 } else {
  $7 = $cf;
  $8 = ($7|0)==(2);
  if ($8) {
   label = 3;
  } else {
   $9 = $0;
   $10 = (($9) + 34136|0);
   $11 = (($10) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12;
  }
 }
 if ((label|0) == 3) {
  $13 = 1;
 }
 $iChannels = $13;
 $14 = $0;
 $15 = (($14) + 32976|0);
 $pMBInfo = $15;
 $16 = $0;
 $17 = (($16) + 34360|0);
 $18 = HEAP32[$17>>2]|0;
 $mbX = $18;
 $19 = $0;
 $20 = $mbX;
 $21 = (_getDCACPredMode($19,$20)|0);
 $iDCACPredMode = $21;
 $22 = $iDCACPredMode;
 $23 = $22 & 3;
 $iDCPredMode = $23;
 $24 = $iDCACPredMode;
 $25 = $24 & 12;
 $iADPredMode = $25;
 $ii = 0;
 while(1) {
  $26 = $ii;
  $27 = $iChannels;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $ii;
  $30 = $pMBInfo;
  $31 = (($30) + ($29<<6)|0);
  $pOrg = $31;
  $32 = $iDCPredMode;
  $33 = ($32|0)==(1);
  if ($33) {
   $34 = $mbX;
   $35 = $ii;
   $36 = $0;
   $37 = (($36) + 34956|0);
   $38 = (($37) + ($35<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + (($34*40)|0)|0);
   $41 = (($40) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $pOrg;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($42))|0;
   HEAP32[$43>>2] = $45;
  } else {
   $46 = $iDCPredMode;
   $47 = ($46|0)==(0);
   if ($47) {
    $48 = $ii;
    $49 = $0;
    $50 = (($49) + 34892|0);
    $51 = (($50) + ($48<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $mbX;
    $54 = (($52) + (($53*40)|0)|0);
    $55 = (($54) + -40|0);
    $56 = (($55) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $pOrg;
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + ($57))|0;
    HEAP32[$58>>2] = $60;
   } else {
    $61 = $iDCPredMode;
    $62 = ($61|0)==(2);
    if ($62) {
     $63 = $ii;
     $64 = $0;
     $65 = (($64) + 34892|0);
     $66 = (($65) + ($63<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $mbX;
     $69 = (($67) + (($68*40)|0)|0);
     $70 = (($69) + -40|0);
     $71 = (($70) + 8|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $ii;
     $74 = $0;
     $75 = (($74) + 34956|0);
     $76 = (($75) + ($73<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $mbX;
     $79 = (($77) + (($78*40)|0)|0);
     $80 = (($79) + 8|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($72) + ($81))|0;
     $83 = $82 >> 1;
     $84 = $pOrg;
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + ($83))|0;
     HEAP32[$84>>2] = $86;
    }
   }
  }
  $87 = $iADPredMode;
  $88 = ($87|0)==(4);
  if ($88) {
   $89 = $ii;
   $90 = $0;
   $91 = (($90) + 34956|0);
   $92 = (($91) + ($89<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $mbX;
   $95 = (($93) + (($94*40)|0)|0);
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $pRef = $97;
   $98 = $pRef;
   $99 = (($98) + 12|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $pOrg;
   $102 = (($101) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + ($100))|0;
   HEAP32[$102>>2] = $104;
   $105 = $pRef;
   $106 = (($105) + 16|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $pOrg;
   $109 = (($108) + 32|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + ($107))|0;
   HEAP32[$109>>2] = $111;
   $112 = $pRef;
   $113 = (($112) + 20|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $pOrg;
   $116 = (($115) + 48|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + ($114))|0;
   HEAP32[$116>>2] = $118;
  } else {
   $119 = $iADPredMode;
   $120 = ($119|0)==(0);
   if ($120) {
    $121 = $ii;
    $122 = $0;
    $123 = (($122) + 34892|0);
    $124 = (($123) + ($121<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $mbX;
    $127 = (($125) + (($126*40)|0)|0);
    $128 = (($127) + -40|0);
    $129 = (($128) + 36|0);
    $130 = HEAP32[$129>>2]|0;
    $pRef = $130;
    $131 = $pRef;
    $132 = HEAP32[$131>>2]|0;
    $133 = $pOrg;
    $134 = (($133) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132))|0;
    HEAP32[$134>>2] = $136;
    $137 = $pRef;
    $138 = (($137) + 4|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $pOrg;
    $141 = (($140) + 8|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + ($139))|0;
    HEAP32[$141>>2] = $143;
    $144 = $pRef;
    $145 = (($144) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = $pOrg;
    $148 = (($147) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (($149) + ($146))|0;
    HEAP32[$148>>2] = $150;
   }
  }
  $151 = $ii;
  $152 = (($151) + 1)|0;
  $ii = $152;
 }
 $153 = $cf;
 $154 = ($153|0)==(1);
 if ($154) {
  $ii = 1;
  while(1) {
   $155 = $ii;
   $156 = ($155|0)<(3);
   if (!($156)) {
    break;
   }
   $157 = $ii;
   $158 = $pMBInfo;
   $159 = (($158) + ($157<<6)|0);
   $pOrg = $159;
   $160 = $iDCPredMode;
   $161 = ($160|0)==(1);
   if ($161) {
    $162 = $ii;
    $163 = $0;
    $164 = (($163) + 34956|0);
    $165 = (($164) + ($162<<2)|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $mbX;
    $168 = (($166) + (($167*40)|0)|0);
    $169 = (($168) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $pOrg;
    $172 = HEAP32[$171>>2]|0;
    $173 = (($172) + ($170))|0;
    HEAP32[$171>>2] = $173;
   } else {
    $174 = $iDCPredMode;
    $175 = ($174|0)==(0);
    if ($175) {
     $176 = $ii;
     $177 = $0;
     $178 = (($177) + 34892|0);
     $179 = (($178) + ($176<<2)|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $mbX;
     $182 = (($180) + (($181*40)|0)|0);
     $183 = (($182) + -40|0);
     $184 = (($183) + 8|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = $pOrg;
     $187 = HEAP32[$186>>2]|0;
     $188 = (($187) + ($185))|0;
     HEAP32[$186>>2] = $188;
    } else {
     $189 = $iDCPredMode;
     $190 = ($189|0)==(2);
     if ($190) {
      $191 = $ii;
      $192 = $0;
      $193 = (($192) + 34892|0);
      $194 = (($193) + ($191<<2)|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = $mbX;
      $197 = (($195) + (($196*40)|0)|0);
      $198 = (($197) + -40|0);
      $199 = (($198) + 8|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = $ii;
      $202 = $0;
      $203 = (($202) + 34956|0);
      $204 = (($203) + ($201<<2)|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = $mbX;
      $207 = (($205) + (($206*40)|0)|0);
      $208 = (($207) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = (($200) + ($209))|0;
      $211 = (($210) + 1)|0;
      $212 = $211 >> 1;
      $213 = $pOrg;
      $214 = HEAP32[$213>>2]|0;
      $215 = (($214) + ($212))|0;
      HEAP32[$213>>2] = $215;
     }
    }
   }
   $216 = $iADPredMode;
   $217 = ($216|0)==(4);
   if ($217) {
    $218 = $ii;
    $219 = $0;
    $220 = (($219) + 34956|0);
    $221 = (($220) + ($218<<2)|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $mbX;
    $224 = (($222) + (($223*40)|0)|0);
    $225 = (($224) + 36|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + 4|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = $pOrg;
    $230 = (($229) + 8|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = (($231) + ($228))|0;
    HEAP32[$230>>2] = $232;
   } else {
    $233 = $iADPredMode;
    $234 = ($233|0)==(0);
    if ($234) {
     $235 = $ii;
     $236 = $0;
     $237 = (($236) + 34892|0);
     $238 = (($237) + ($235<<2)|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $mbX;
     $241 = (($239) + (($240*40)|0)|0);
     $242 = (($241) + -40|0);
     $243 = (($242) + 36|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = HEAP32[$244>>2]|0;
     $246 = $pOrg;
     $247 = (($246) + 4|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = (($248) + ($245))|0;
     HEAP32[$247>>2] = $249;
    }
   }
   $250 = $ii;
   $251 = (($250) + 1)|0;
   $ii = $251;
  }
  $414 = $pMBInfo;
  $415 = $cf;
  $416 = (_getACPredMode($414,$415)|0);
  $417 = (2 - ($416))|0;
  $418 = $pMBInfo;
  $419 = (($418) + 1024|0);
  HEAP32[$419>>2] = $417;
  STACKTOP = sp;return;
 }
 $252 = $cf;
 $253 = ($252|0)==(2);
 if ($253) {
  $ii = 1;
  while(1) {
   $254 = $ii;
   $255 = ($254|0)<(3);
   if (!($255)) {
    break;
   }
   $256 = $ii;
   $257 = $pMBInfo;
   $258 = (($257) + ($256<<6)|0);
   $pOrg = $258;
   $259 = $iDCPredMode;
   $260 = ($259|0)==(1);
   if ($260) {
    $261 = $ii;
    $262 = $0;
    $263 = (($262) + 34956|0);
    $264 = (($263) + ($261<<2)|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $mbX;
    $267 = (($265) + (($266*40)|0)|0);
    $268 = (($267) + 8|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = $pOrg;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($271) + ($269))|0;
    HEAP32[$270>>2] = $272;
   } else {
    $273 = $iDCPredMode;
    $274 = ($273|0)==(0);
    if ($274) {
     $275 = $ii;
     $276 = $0;
     $277 = (($276) + 34892|0);
     $278 = (($277) + ($275<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = $mbX;
     $281 = (($279) + (($280*40)|0)|0);
     $282 = (($281) + -40|0);
     $283 = (($282) + 8|0);
     $284 = HEAP32[$283>>2]|0;
     $285 = $pOrg;
     $286 = HEAP32[$285>>2]|0;
     $287 = (($286) + ($284))|0;
     HEAP32[$285>>2] = $287;
    } else {
     $288 = $iDCPredMode;
     $289 = ($288|0)==(2);
     if ($289) {
      $290 = $ii;
      $291 = $0;
      $292 = (($291) + 34892|0);
      $293 = (($292) + ($290<<2)|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = $mbX;
      $296 = (($294) + (($295*40)|0)|0);
      $297 = (($296) + -40|0);
      $298 = (($297) + 8|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = $ii;
      $301 = $0;
      $302 = (($301) + 34956|0);
      $303 = (($302) + ($300<<2)|0);
      $304 = HEAP32[$303>>2]|0;
      $305 = $mbX;
      $306 = (($304) + (($305*40)|0)|0);
      $307 = (($306) + 8|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = (($299) + ($308))|0;
      $310 = (($309) + 1)|0;
      $311 = $310 >> 1;
      $312 = $pOrg;
      $313 = HEAP32[$312>>2]|0;
      $314 = (($313) + ($311))|0;
      HEAP32[$312>>2] = $314;
     }
    }
   }
   $315 = $iADPredMode;
   $316 = ($315|0)==(4);
   if ($316) {
    $317 = $ii;
    $318 = $0;
    $319 = (($318) + 34956|0);
    $320 = (($319) + ($317<<2)|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = $mbX;
    $323 = (($321) + (($322*40)|0)|0);
    $324 = (($323) + 36|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = (($325) + 16|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $pOrg;
    $329 = (($328) + 16|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = (($330) + ($327))|0;
    HEAP32[$329>>2] = $331;
    $332 = $ii;
    $333 = $0;
    $334 = (($333) + 34956|0);
    $335 = (($334) + ($332<<2)|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $mbX;
    $338 = (($336) + (($337*40)|0)|0);
    $339 = (($338) + 36|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = (($340) + 12|0);
    $342 = HEAP32[$341>>2]|0;
    $343 = $pOrg;
    $344 = (($343) + 8|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = (($345) + ($342))|0;
    HEAP32[$344>>2] = $346;
    $347 = $pOrg;
    $348 = (($347) + 8|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = $pOrg;
    $351 = (($350) + 24|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = (($352) + ($349))|0;
    HEAP32[$351>>2] = $353;
   } else {
    $354 = $iADPredMode;
    $355 = ($354|0)==(0);
    if ($355) {
     $356 = $ii;
     $357 = $0;
     $358 = (($357) + 34892|0);
     $359 = (($358) + ($356<<2)|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = $mbX;
     $362 = (($360) + (($361*40)|0)|0);
     $363 = (($362) + -40|0);
     $364 = (($363) + 36|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (($365) + 16|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = $pOrg;
     $369 = (($368) + 16|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = (($370) + ($367))|0;
     HEAP32[$369>>2] = $371;
     $372 = $ii;
     $373 = $0;
     $374 = (($373) + 34892|0);
     $375 = (($374) + ($372<<2)|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = $mbX;
     $378 = (($376) + (($377*40)|0)|0);
     $379 = (($378) + -40|0);
     $380 = (($379) + 36|0);
     $381 = HEAP32[$380>>2]|0;
     $382 = HEAP32[$381>>2]|0;
     $383 = $pOrg;
     $384 = (($383) + 4|0);
     $385 = HEAP32[$384>>2]|0;
     $386 = (($385) + ($382))|0;
     HEAP32[$384>>2] = $386;
     $387 = $ii;
     $388 = $0;
     $389 = (($388) + 34892|0);
     $390 = (($389) + ($387<<2)|0);
     $391 = HEAP32[$390>>2]|0;
     $392 = $mbX;
     $393 = (($391) + (($392*40)|0)|0);
     $394 = (($393) + -40|0);
     $395 = (($394) + 36|0);
     $396 = HEAP32[$395>>2]|0;
     $397 = (($396) + 8|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = $pOrg;
     $400 = (($399) + 20|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = (($401) + ($398))|0;
     HEAP32[$400>>2] = $402;
    } else {
     $403 = $iDCPredMode;
     $404 = ($403|0)==(1);
     if ($404) {
      $405 = $pOrg;
      $406 = (($405) + 8|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = $pOrg;
      $409 = (($408) + 24|0);
      $410 = HEAP32[$409>>2]|0;
      $411 = (($410) + ($407))|0;
      HEAP32[$409>>2] = $411;
     }
    }
   }
   $412 = $ii;
   $413 = (($412) + 1)|0;
   $ii = $413;
  }
 }
 $414 = $pMBInfo;
 $415 = $cf;
 $416 = (_getACPredMode($414,$415)|0);
 $417 = (2 - ($416))|0;
 $418 = $pMBInfo;
 $419 = (($418) + 1024|0);
 HEAP32[$419>>2] = $417;
 STACKTOP = sp;return;
}
function _predACDec($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cf = 0, $i = 0, $iACPredMode = 0, $iChannels = 0, $j = 0, $pMBInfo = 0, $pOrg = 0, $pRef = 0, $pSrc = 0, $pSrc1 = 0, $pSrc2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34136|0);
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $cf = $4;
 $5 = $cf;
 $6 = ($5|0)==(1);
 if ($6) {
  label = 3;
 } else {
  $7 = $cf;
  $8 = ($7|0)==(2);
  if ($8) {
   label = 3;
  } else {
   $9 = $0;
   $10 = (($9) + 34136|0);
   $11 = (($10) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12;
  }
 }
 if ((label|0) == 3) {
  $13 = 1;
 }
 $iChannels = $13;
 $14 = $0;
 $15 = (($14) + 32976|0);
 $pMBInfo = $15;
 $16 = $pMBInfo;
 $17 = (($16) + 1024|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (2 - ($18))|0;
 $iACPredMode = $19;
 $i = 0;
 while(1) {
  $20 = $i;
  $21 = $iChannels;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $i;
  $24 = $0;
  $25 = (($24) + 34756|0);
  $26 = (($25) + ($23<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $pSrc = $27;
  $28 = $iACPredMode;
  if ((($28|0) == 0)) {
   $j = 64;
   while(1) {
    $63 = $j;
    $64 = ($63|0)<(256);
    if (!($64)) {
     break;
    }
    $65 = $pSrc;
    $66 = $j;
    $67 = (($65) + ($66<<2)|0);
    $pOrg = $67;
    $68 = $pOrg;
    $69 = (($68) + -256|0);
    $pRef = $69;
    $70 = $pRef;
    $71 = (($70) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $pOrg;
    $74 = (($73) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + ($72))|0;
    HEAP32[$74>>2] = $76;
    $77 = $pRef;
    $78 = (($77) + 20|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $pOrg;
    $81 = (($80) + 20|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82) + ($79))|0;
    HEAP32[$81>>2] = $83;
    $84 = $pRef;
    $85 = (($84) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $pOrg;
    $88 = (($87) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + ($86))|0;
    HEAP32[$88>>2] = $90;
    $91 = $j;
    $92 = (($91) + 16)|0;
    $j = $92;
   }
  } else if ((($28|0) == 1)) {
   $j = 0;
   while(1) {
    $29 = $j;
    $30 = ($29>>>0)<(12);
    if (!($30)) {
     break;
    }
    $31 = $pSrc;
    $32 = $j;
    $33 = (9592 + ($32)|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = $35<<4;
    $37 = (($31) + ($36<<2)|0);
    $pOrg = $37;
    $38 = $pOrg;
    $39 = (($38) + -64|0);
    $pRef = $39;
    $40 = $pRef;
    $41 = (($40) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $pOrg;
    $44 = (($43) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + ($42))|0;
    HEAP32[$44>>2] = $46;
    $47 = $pRef;
    $48 = (($47) + 40|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $pOrg;
    $51 = (($50) + 40|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + ($49))|0;
    HEAP32[$51>>2] = $53;
    $54 = $pRef;
    $55 = (($54) + 36|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $pOrg;
    $58 = (($57) + 36|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + ($56))|0;
    HEAP32[$58>>2] = $60;
    $61 = $j;
    $62 = (($61) + 1)|0;
    $j = $62;
   }
  } else {
  }
  $93 = $i;
  $94 = (($93) + 1)|0;
  $i = $94;
 }
 $95 = $cf;
 $96 = ($95|0)==(1);
 if ($96) {
  $i = 16;
  while(1) {
   $97 = $i;
   $98 = ($97|0)<=(20);
   if (!($98)) {
    break;
   }
   $99 = $i;
   $100 = $99 >> 2;
   $101 = (($100) - 3)|0;
   $102 = $0;
   $103 = (($102) + 34756|0);
   $104 = (($103) + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $pSrc1 = $105;
   $106 = $iACPredMode;
   if ((($106|0) == 0)) {
    $j = 2;
    while(1) {
     $138 = $j;
     $139 = ($138|0)<=(3);
     if (!($139)) {
      break;
     }
     $140 = $pSrc1;
     $141 = $j;
     $142 = $141<<4;
     $143 = (($140) + ($142<<2)|0);
     $pOrg = $143;
     $144 = $pOrg;
     $145 = (($144) + -128|0);
     $pRef = $145;
     $146 = $pRef;
     $147 = (($146) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $pOrg;
     $150 = (($149) + 4|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + ($148))|0;
     HEAP32[$150>>2] = $152;
     $153 = $pRef;
     $154 = (($153) + 20|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = $pOrg;
     $157 = (($156) + 20|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($158) + ($155))|0;
     HEAP32[$157>>2] = $159;
     $160 = $pRef;
     $161 = (($160) + 24|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $pOrg;
     $164 = (($163) + 24|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($165) + ($162))|0;
     HEAP32[$164>>2] = $166;
     $167 = $j;
     $168 = (($167) + 1)|0;
     $j = $168;
    }
   } else if ((($106|0) == 1)) {
    $j = 1;
    while(1) {
     $107 = $j;
     $108 = ($107|0)<=(3);
     if (!($108)) {
      break;
     }
     $109 = $pSrc1;
     $110 = $j;
     $111 = $110<<4;
     $112 = (($109) + ($111<<2)|0);
     $pOrg = $112;
     $113 = $pOrg;
     $114 = (($113) + -64|0);
     $pRef = $114;
     $115 = $pRef;
     $116 = (($115) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $pOrg;
     $119 = (($118) + 8|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + ($117))|0;
     HEAP32[$119>>2] = $121;
     $122 = $pRef;
     $123 = (($122) + 40|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = $pOrg;
     $126 = (($125) + 40|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($127) + ($124))|0;
     HEAP32[$126>>2] = $128;
     $129 = $pRef;
     $130 = (($129) + 36|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $pOrg;
     $133 = (($132) + 36|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($134) + ($131))|0;
     HEAP32[$133>>2] = $135;
     $136 = $j;
     $137 = (($136) + 2)|0;
     $j = $137;
    }
   } else {
   }
   $169 = $i;
   $170 = (($169) + 4)|0;
   $i = $170;
  }
  STACKTOP = sp;return;
 }
 $171 = $cf;
 $172 = ($171|0)==(2);
 if ($172) {
  $i = 16;
  while(1) {
   $173 = $i;
   $174 = ($173|0)<(32);
   if (!($174)) {
    break;
   }
   $175 = $i;
   $176 = $175 >> 3;
   $177 = (($176) - 1)|0;
   $178 = $0;
   $179 = (($178) + 34756|0);
   $180 = (($179) + ($177<<2)|0);
   $181 = HEAP32[$180>>2]|0;
   $pSrc2 = $181;
   $182 = $iACPredMode;
   if ((($182|0) == 1)) {
    $j = 2;
    while(1) {
     $183 = $j;
     $184 = ($183|0)<(8);
     if (!($184)) {
      break;
     }
     $185 = $pSrc2;
     $186 = $j;
     $187 = (14016 + ($186<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($185) + ($188<<2)|0);
     $pOrg = $189;
     $190 = $pOrg;
     $191 = (($190) + -64|0);
     $pRef = $191;
     $192 = $pRef;
     $193 = (($192) + 40|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = $pOrg;
     $196 = (($195) + 40|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = (($197) + ($194))|0;
     HEAP32[$196>>2] = $198;
     $199 = $pRef;
     $200 = (($199) + 8|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $pOrg;
     $203 = (($202) + 8|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (($204) + ($201))|0;
     HEAP32[$203>>2] = $205;
     $206 = $pRef;
     $207 = (($206) + 36|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $pOrg;
     $210 = (($209) + 36|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = (($211) + ($208))|0;
     HEAP32[$210>>2] = $212;
     $213 = $j;
     $214 = (($213) + 1)|0;
     $j = $214;
    }
   } else if ((($182|0) == 0)) {
    $j = 1;
    while(1) {
     $215 = $j;
     $216 = ($215|0)<(8);
     if (!($216)) {
      break;
     }
     $217 = $pSrc2;
     $218 = $j;
     $219 = (14016 + ($218<<2)|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = (($217) + ($220<<2)|0);
     $pOrg = $221;
     $222 = $pOrg;
     $223 = (($222) + -256|0);
     $pRef = $223;
     $224 = $pRef;
     $225 = (($224) + 4|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = $pOrg;
     $228 = (($227) + 4|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = (($229) + ($226))|0;
     HEAP32[$228>>2] = $230;
     $231 = $pRef;
     $232 = (($231) + 20|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $pOrg;
     $235 = (($234) + 20|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = (($236) + ($233))|0;
     HEAP32[$235>>2] = $237;
     $238 = $pRef;
     $239 = (($238) + 24|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = $pOrg;
     $242 = (($241) + 24|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = (($243) + ($240))|0;
     HEAP32[$242>>2] = $244;
     $245 = $j;
     $246 = (($245) + 2)|0;
     $j = $246;
    }
   } else {
   }
   $247 = $i;
   $248 = (($247) + 8)|0;
   $i = $248;
  }
 }
 STACKTOP = sp;return;
}
function _predCBPDec($pSC,$pContext) {
 $pSC = $pSC|0;
 $pContext = $pContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cf = 0, $i = 0, $iChannels = 0, $mbX = 0;
 var $mbY = 0, $pMBInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pContext;
 $2 = $0;
 $3 = (($2) + 34136|0);
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $cf = $5;
 $6 = $cf;
 $7 = ($6|0)==(1);
 if ($7) {
  label = 3;
 } else {
  $8 = $cf;
  $9 = ($8|0)==(2);
  if ($9) {
   label = 3;
  } else {
   $10 = $0;
   $11 = (($10) + 34136|0);
   $12 = (($11) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13;
  }
 }
 if ((label|0) == 3) {
  $14 = 1;
 }
 $iChannels = $14;
 $15 = $0;
 $16 = (($15) + 34360|0);
 $17 = HEAP32[$16>>2]|0;
 $mbX = $17;
 $18 = $0;
 $19 = (($18) + 34356|0);
 $20 = HEAP32[$19>>2]|0;
 $mbY = $20;
 $21 = $0;
 $22 = (($21) + 32976|0);
 $pMBInfo = $22;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $iChannels;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $0;
  $27 = $i;
  $28 = $pMBInfo;
  $29 = (($28) + 1092|0);
  $30 = (($29) + ($27<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $mbX;
  $33 = $mbY;
  $34 = $i;
  $35 = $1;
  $36 = (($35) + 560|0);
  $37 = (_predCBPCDec($26,$31,$32,$33,$34,$36)|0);
  $38 = $i;
  $39 = $pMBInfo;
  $40 = (($39) + 1028|0);
  $41 = (($40) + ($38<<2)|0);
  HEAP32[$41>>2] = $37;
  $42 = $i;
  $43 = $0;
  $44 = (($43) + 34892|0);
  $45 = (($44) + ($42<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $mbX;
  $48 = (($46) + (($47*40)|0)|0);
  $49 = (($48) + 4|0);
  HEAP32[$49>>2] = $37;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $52 = $cf;
 $53 = ($52|0)==(2);
 if ($53) {
  $54 = $0;
  $55 = $pMBInfo;
  $56 = (($55) + 1092|0);
  $57 = (($56) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $mbX;
  $60 = $mbY;
  $61 = $1;
  $62 = (($61) + 560|0);
  $63 = (_predCBPC422Dec($54,$58,$59,$60,1,$62)|0);
  $64 = $pMBInfo;
  $65 = (($64) + 1028|0);
  $66 = (($65) + 4|0);
  HEAP32[$66>>2] = $63;
  $67 = $0;
  $68 = (($67) + 34892|0);
  $69 = (($68) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $mbX;
  $72 = (($70) + (($71*40)|0)|0);
  $73 = (($72) + 4|0);
  HEAP32[$73>>2] = $63;
  $74 = $0;
  $75 = $pMBInfo;
  $76 = (($75) + 1092|0);
  $77 = (($76) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $mbX;
  $80 = $mbY;
  $81 = $1;
  $82 = (($81) + 560|0);
  $83 = (_predCBPC422Dec($74,$78,$79,$80,2,$82)|0);
  $84 = $pMBInfo;
  $85 = (($84) + 1028|0);
  $86 = (($85) + 8|0);
  HEAP32[$86>>2] = $83;
  $87 = $0;
  $88 = (($87) + 34892|0);
  $89 = (($88) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $mbX;
  $92 = (($90) + (($91*40)|0)|0);
  $93 = (($92) + 4|0);
  HEAP32[$93>>2] = $83;
  STACKTOP = sp;return;
 }
 $94 = $cf;
 $95 = ($94|0)==(1);
 if ($95) {
  $96 = $0;
  $97 = $pMBInfo;
  $98 = (($97) + 1092|0);
  $99 = (($98) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $mbX;
  $102 = $mbY;
  $103 = $1;
  $104 = (($103) + 560|0);
  $105 = (_predCBPC420Dec($96,$100,$101,$102,1,$104)|0);
  $106 = $pMBInfo;
  $107 = (($106) + 1028|0);
  $108 = (($107) + 4|0);
  HEAP32[$108>>2] = $105;
  $109 = $0;
  $110 = (($109) + 34892|0);
  $111 = (($110) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $mbX;
  $114 = (($112) + (($113*40)|0)|0);
  $115 = (($114) + 4|0);
  HEAP32[$115>>2] = $105;
  $116 = $0;
  $117 = $pMBInfo;
  $118 = (($117) + 1092|0);
  $119 = (($118) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $mbX;
  $122 = $mbY;
  $123 = $1;
  $124 = (($123) + 560|0);
  $125 = (_predCBPC420Dec($116,$120,$121,$122,2,$124)|0);
  $126 = $pMBInfo;
  $127 = (($126) + 1028|0);
  $128 = (($127) + 8|0);
  HEAP32[$128>>2] = $125;
  $129 = $0;
  $130 = (($129) + 34892|0);
  $131 = (($130) + 8|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $mbX;
  $134 = (($132) + (($133*40)|0)|0);
  $135 = (($134) + 4|0);
  HEAP32[$135>>2] = $125;
 }
 STACKTOP = sp;return;
}
function _predCBPCDec($pSC,$iCBP,$mbX,$mbY,$c,$pModel) {
 $pSC = $pSC|0;
 $iCBP = $iCBP|0;
 $mbX = $mbX|0;
 $mbY = $mbY|0;
 $c = $c|0;
 $pModel = $pModel|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $iLeftCBP = 0, $iNDiff = 0, $iNOrig = 0, $iTopCBP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $iCBP;
 $2 = $mbX;
 $3 = $mbY;
 $4 = $c;
 $5 = $pModel;
 $iNDiff = 3;
 $6 = $4;
 $7 = ($6|0)!=(0);
 $8 = $7 ? 1 : 0;
 $c1 = $8;
 $9 = $3;
 $3 = $9;
 $10 = $c1;
 $11 = $5;
 $12 = (($11) + 16|0);
 $13 = (($12) + ($10<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $0;
  $17 = (($16) + 34300|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $0;
   $21 = (($20) + 34304|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = $1;
    $25 = $24 ^ 1;
    $1 = $25;
   } else {
    $26 = $4;
    $27 = $0;
    $28 = (($27) + 34956|0);
    $29 = (($28) + ($26<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $2;
    $32 = (($30) + (($31*40)|0)|0);
    $33 = (($32) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $iTopCBP = $34;
    $35 = $iTopCBP;
    $36 = $35 >> 10;
    $37 = $36 & 1;
    $38 = $1;
    $39 = $38 ^ $37;
    $1 = $39;
   }
  } else {
   $40 = $4;
   $41 = $0;
   $42 = (($41) + 34892|0);
   $43 = (($42) + ($40<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $2;
   $46 = (($44) + (($45*40)|0)|0);
   $47 = (($46) + -40|0);
   $48 = (($47) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $iLeftCBP = $49;
   $50 = $iLeftCBP;
   $51 = $50 >> 5;
   $52 = $51 & 1;
   $53 = $1;
   $54 = $53 ^ $52;
   $1 = $54;
  }
  $55 = $1;
  $56 = $55 << 1;
  $57 = 2 & $56;
  $58 = $1;
  $59 = $58 ^ $57;
  $1 = $59;
  $60 = $1;
  $61 = $60 << 3;
  $62 = 16 & $61;
  $63 = $1;
  $64 = $63 ^ $62;
  $1 = $64;
  $65 = $1;
  $66 = $65 << 1;
  $67 = 32 & $66;
  $68 = $1;
  $69 = $68 ^ $67;
  $1 = $69;
  $70 = $1;
  $71 = $70 & 51;
  $72 = $71 << 2;
  $73 = $1;
  $74 = $73 ^ $72;
  $1 = $74;
  $75 = $1;
  $76 = $75 & 204;
  $77 = $76 << 6;
  $78 = $1;
  $79 = $78 ^ $77;
  $1 = $79;
  $80 = $1;
  $81 = $80 & 13056;
  $82 = $81 << 2;
  $83 = $1;
  $84 = $83 ^ $82;
  $1 = $84;
 } else {
  $85 = $c1;
  $86 = $5;
  $87 = (($86) + 16|0);
  $88 = (($87) + ($85<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)==(2);
  if ($90) {
   $91 = $1;
   $92 = $91 ^ 65535;
   $1 = $92;
  }
 }
 $93 = $1;
 $94 = (_NumOnes89($93)|0);
 $iNOrig = $94;
 $95 = $iNOrig;
 $96 = (($95) - 3)|0;
 $97 = $c1;
 $98 = $5;
 $99 = (($98) + ($97<<2)|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + ($96))|0;
 HEAP32[$99>>2] = $101;
 $102 = $c1;
 $103 = $5;
 $104 = (($103) + ($102<<2)|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) + 16)|0;
 $107 = ($106>>>0)>=(32);
 if ($107) {
  $108 = $c1;
  $109 = $5;
  $110 = (($109) + ($108<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)<(0);
  if ($112) {
   $113 = $c1;
   $114 = $5;
   $115 = (($114) + ($113<<2)|0);
   HEAP32[$115>>2] = -16;
  } else {
   $116 = $c1;
   $117 = $5;
   $118 = (($117) + ($116<<2)|0);
   HEAP32[$118>>2] = 15;
  }
 }
 $119 = $iNOrig;
 $120 = (16 - ($119))|0;
 $121 = (($120) - 3)|0;
 $122 = $c1;
 $123 = $5;
 $124 = (($123) + 8|0);
 $125 = (($124) + ($122<<2)|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (($126) + ($121))|0;
 HEAP32[$125>>2] = $127;
 $128 = $c1;
 $129 = $5;
 $130 = (($129) + 8|0);
 $131 = (($130) + ($128<<2)|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + 16)|0;
 $134 = ($133>>>0)>=(32);
 if ($134) {
  $135 = $c1;
  $136 = $5;
  $137 = (($136) + 8|0);
  $138 = (($137) + ($135<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($139|0)<(0);
  if ($140) {
   $141 = $c1;
   $142 = $5;
   $143 = (($142) + 8|0);
   $144 = (($143) + ($141<<2)|0);
   HEAP32[$144>>2] = -16;
  } else {
   $145 = $c1;
   $146 = $5;
   $147 = (($146) + 8|0);
   $148 = (($147) + ($145<<2)|0);
   HEAP32[$148>>2] = 15;
  }
 }
 $149 = $c1;
 $150 = $5;
 $151 = (($150) + ($149<<2)|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($152|0)<(0);
 if ($153) {
  $154 = $c1;
  $155 = $5;
  $156 = (($155) + ($154<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $c1;
  $159 = $5;
  $160 = (($159) + 8|0);
  $161 = (($160) + ($158<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ($157|0)<($162|0);
  if ($163) {
   $164 = $c1;
   $165 = $5;
   $166 = (($165) + 16|0);
   $167 = (($166) + ($164<<2)|0);
   HEAP32[$167>>2] = 1;
  } else {
   $168 = $c1;
   $169 = $5;
   $170 = (($169) + 16|0);
   $171 = (($170) + ($168<<2)|0);
   HEAP32[$171>>2] = 2;
  }
  $186 = $1;
  STACKTOP = sp;return ($186|0);
 } else {
  $172 = $c1;
  $173 = $5;
  $174 = (($173) + 8|0);
  $175 = (($174) + ($172<<2)|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($176|0)<(0);
  if ($177) {
   $178 = $c1;
   $179 = $5;
   $180 = (($179) + 16|0);
   $181 = (($180) + ($178<<2)|0);
   HEAP32[$181>>2] = 2;
  } else {
   $182 = $c1;
   $183 = $5;
   $184 = (($183) + 16|0);
   $185 = (($184) + ($182<<2)|0);
   HEAP32[$185>>2] = 0;
  }
  $186 = $1;
  STACKTOP = sp;return ($186|0);
 }
 return 0|0;
}
function _predCBPC422Dec($pSC,$iCBP,$mbX,$mbY,$c,$pModel) {
 $pSC = $pSC|0;
 $iCBP = $iCBP|0;
 $mbX = $mbX|0;
 $mbY = $mbY|0;
 $c = $c|0;
 $pModel = $pModel|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iLeftCBP = 0, $iNDiff = 0, $iNOrig = 0, $iTopCBP = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $iCBP;
 $2 = $mbX;
 $3 = $mbY;
 $4 = $c;
 $5 = $pModel;
 $iNDiff = 3;
 $6 = $3;
 $3 = $6;
 $7 = $5;
 $8 = (($7) + 16|0);
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $0;
  $13 = (($12) + 34300|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $0;
   $17 = (($16) + 34304|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $1;
    $21 = $20 ^ 1;
    $1 = $21;
   } else {
    $22 = $4;
    $23 = $0;
    $24 = (($23) + 34956|0);
    $25 = (($24) + ($22<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $2;
    $28 = (($26) + (($27*40)|0)|0);
    $29 = (($28) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $iTopCBP = $30;
    $31 = $iTopCBP;
    $32 = $31 >> 6;
    $33 = $32 & 1;
    $34 = $1;
    $35 = $34 ^ $33;
    $1 = $35;
   }
  } else {
   $36 = $4;
   $37 = $0;
   $38 = (($37) + 34892|0);
   $39 = (($38) + ($36<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $2;
   $42 = (($40) + (($41*40)|0)|0);
   $43 = (($42) + -40|0);
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $iLeftCBP = $45;
   $46 = $iLeftCBP;
   $47 = $46 >> 1;
   $48 = $47 & 1;
   $49 = $1;
   $50 = $49 ^ $48;
   $1 = $50;
  }
  $51 = $1;
  $52 = $51 & 1;
  $53 = $52 << 1;
  $54 = $1;
  $55 = $54 ^ $53;
  $1 = $55;
  $56 = $1;
  $57 = $56 & 3;
  $58 = $57 << 2;
  $59 = $1;
  $60 = $59 ^ $58;
  $1 = $60;
  $61 = $1;
  $62 = $61 & 12;
  $63 = $62 << 2;
  $64 = $1;
  $65 = $64 ^ $63;
  $1 = $65;
  $66 = $1;
  $67 = $66 & 48;
  $68 = $67 << 2;
  $69 = $1;
  $70 = $69 ^ $68;
  $1 = $70;
 } else {
  $71 = $5;
  $72 = (($71) + 16|0);
  $73 = (($72) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)==(2);
  if ($75) {
   $76 = $1;
   $77 = $76 ^ 255;
   $1 = $77;
  }
 }
 $78 = $1;
 $79 = (_NumOnes89($78)|0);
 $80 = $79<<1;
 $iNOrig = $80;
 $81 = $iNOrig;
 $82 = (($81) - 3)|0;
 $83 = $5;
 $84 = (($83) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + ($82))|0;
 HEAP32[$84>>2] = $86;
 $87 = $5;
 $88 = (($87) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + 16)|0;
 $91 = ($90>>>0)>=(32);
 if ($91) {
  $92 = $5;
  $93 = (($92) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)<(0);
  if ($95) {
   $96 = $5;
   $97 = (($96) + 4|0);
   HEAP32[$97>>2] = -16;
  } else {
   $98 = $5;
   $99 = (($98) + 4|0);
   HEAP32[$99>>2] = 15;
  }
 }
 $100 = $iNOrig;
 $101 = (16 - ($100))|0;
 $102 = (($101) - 3)|0;
 $103 = $5;
 $104 = (($103) + 8|0);
 $105 = (($104) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + ($102))|0;
 HEAP32[$105>>2] = $107;
 $108 = $5;
 $109 = (($108) + 8|0);
 $110 = (($109) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (($111) + 16)|0;
 $113 = ($112>>>0)>=(32);
 if ($113) {
  $114 = $5;
  $115 = (($114) + 8|0);
  $116 = (($115) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($117|0)<(0);
  if ($118) {
   $119 = $5;
   $120 = (($119) + 8|0);
   $121 = (($120) + 4|0);
   HEAP32[$121>>2] = -16;
  } else {
   $122 = $5;
   $123 = (($122) + 8|0);
   $124 = (($123) + 4|0);
   HEAP32[$124>>2] = 15;
  }
 }
 $125 = $5;
 $126 = (($125) + 4|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)<(0);
 if ($128) {
  $129 = $5;
  $130 = (($129) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $5;
  $133 = (($132) + 8|0);
  $134 = (($133) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($131|0)<($135|0);
  if ($136) {
   $137 = $5;
   $138 = (($137) + 16|0);
   $139 = (($138) + 4|0);
   HEAP32[$139>>2] = 1;
  } else {
   $140 = $5;
   $141 = (($140) + 16|0);
   $142 = (($141) + 4|0);
   HEAP32[$142>>2] = 2;
  }
  $154 = $1;
  STACKTOP = sp;return ($154|0);
 } else {
  $143 = $5;
  $144 = (($143) + 8|0);
  $145 = (($144) + 4|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($146|0)<(0);
  if ($147) {
   $148 = $5;
   $149 = (($148) + 16|0);
   $150 = (($149) + 4|0);
   HEAP32[$150>>2] = 2;
  } else {
   $151 = $5;
   $152 = (($151) + 16|0);
   $153 = (($152) + 4|0);
   HEAP32[$153>>2] = 0;
  }
  $154 = $1;
  STACKTOP = sp;return ($154|0);
 }
 return 0|0;
}
function _predCBPC420Dec($pSC,$iCBP,$mbX,$mbY,$c,$pModel) {
 $pSC = $pSC|0;
 $iCBP = $iCBP|0;
 $mbX = $mbX|0;
 $mbY = $mbY|0;
 $c = $c|0;
 $pModel = $pModel|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iLeftCBP = 0, $iNDiff = 0, $iNOrig = 0, $iTopCBP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $iCBP;
 $2 = $mbX;
 $3 = $mbY;
 $4 = $c;
 $5 = $pModel;
 $iNDiff = 3;
 $6 = $3;
 $3 = $6;
 $7 = $5;
 $8 = (($7) + 16|0);
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $0;
  $13 = (($12) + 34300|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $0;
   $17 = (($16) + 34304|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $1;
    $21 = $20 ^ 1;
    $1 = $21;
   } else {
    $22 = $4;
    $23 = $0;
    $24 = (($23) + 34956|0);
    $25 = (($24) + ($22<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $2;
    $28 = (($26) + (($27*40)|0)|0);
    $29 = (($28) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $iTopCBP = $30;
    $31 = $iTopCBP;
    $32 = $31 >> 2;
    $33 = $32 & 1;
    $34 = $1;
    $35 = $34 ^ $33;
    $1 = $35;
   }
  } else {
   $36 = $4;
   $37 = $0;
   $38 = (($37) + 34892|0);
   $39 = (($38) + ($36<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $2;
   $42 = (($40) + (($41*40)|0)|0);
   $43 = (($42) + -40|0);
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $iLeftCBP = $45;
   $46 = $iLeftCBP;
   $47 = $46 >> 1;
   $48 = $47 & 1;
   $49 = $1;
   $50 = $49 ^ $48;
   $1 = $50;
  }
  $51 = $1;
  $52 = $51 << 1;
  $53 = 2 & $52;
  $54 = $1;
  $55 = $54 ^ $53;
  $1 = $55;
  $56 = $1;
  $57 = $56 & 3;
  $58 = $57 << 2;
  $59 = $1;
  $60 = $59 ^ $58;
  $1 = $60;
 } else {
  $61 = $5;
  $62 = (($61) + 16|0);
  $63 = (($62) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(2);
  if ($65) {
   $66 = $1;
   $67 = $66 ^ 15;
   $1 = $67;
  }
 }
 $68 = $1;
 $69 = (_NumOnes89($68)|0);
 $70 = $69<<2;
 $iNOrig = $70;
 $71 = $iNOrig;
 $72 = (($71) - 3)|0;
 $73 = $5;
 $74 = (($73) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75) + ($72))|0;
 HEAP32[$74>>2] = $76;
 $77 = $5;
 $78 = (($77) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + 16)|0;
 $81 = ($80>>>0)>=(32);
 if ($81) {
  $82 = $5;
  $83 = (($82) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)<(0);
  if ($85) {
   $86 = $5;
   $87 = (($86) + 4|0);
   HEAP32[$87>>2] = -16;
  } else {
   $88 = $5;
   $89 = (($88) + 4|0);
   HEAP32[$89>>2] = 15;
  }
 }
 $90 = $iNOrig;
 $91 = (16 - ($90))|0;
 $92 = (($91) - 3)|0;
 $93 = $5;
 $94 = (($93) + 8|0);
 $95 = (($94) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + ($92))|0;
 HEAP32[$95>>2] = $97;
 $98 = $5;
 $99 = (($98) + 8|0);
 $100 = (($99) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + 16)|0;
 $103 = ($102>>>0)>=(32);
 if ($103) {
  $104 = $5;
  $105 = (($104) + 8|0);
  $106 = (($105) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)<(0);
  if ($108) {
   $109 = $5;
   $110 = (($109) + 8|0);
   $111 = (($110) + 4|0);
   HEAP32[$111>>2] = -16;
  } else {
   $112 = $5;
   $113 = (($112) + 8|0);
   $114 = (($113) + 4|0);
   HEAP32[$114>>2] = 15;
  }
 }
 $115 = $5;
 $116 = (($115) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)<(0);
 if ($118) {
  $119 = $5;
  $120 = (($119) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $5;
  $123 = (($122) + 8|0);
  $124 = (($123) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($121|0)<($125|0);
  if ($126) {
   $127 = $5;
   $128 = (($127) + 16|0);
   $129 = (($128) + 4|0);
   HEAP32[$129>>2] = 1;
  } else {
   $130 = $5;
   $131 = (($130) + 16|0);
   $132 = (($131) + 4|0);
   HEAP32[$132>>2] = 2;
  }
  $144 = $1;
  STACKTOP = sp;return ($144|0);
 } else {
  $133 = $5;
  $134 = (($133) + 8|0);
  $135 = (($134) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($136|0)<(0);
  if ($137) {
   $138 = $5;
   $139 = (($138) + 16|0);
   $140 = (($139) + 4|0);
   HEAP32[$140>>2] = 2;
  } else {
   $141 = $5;
   $142 = (($141) + 16|0);
   $143 = (($142) + 4|0);
   HEAP32[$143>>2] = 0;
  }
  $144 = $1;
  STACKTOP = sp;return ($144|0);
 }
 return 0|0;
}
function _NumOnes89($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $retval = 0;
 $1 = $0;
 $2 = $1 & 65535;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $5 & 15;
  $7 = (9608 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $retval;
  $10 = (($9) + ($8))|0;
  $retval = $10;
  $11 = $0;
  $12 = $11 >> 4;
  $0 = $12;
 }
 $13 = $retval;
 STACKTOP = sp;return ($13|0);
}
function _transcodeQuantizer($pIO,$cIndex,$cChMode,$cChannel) {
 $pIO = $pIO|0;
 $cIndex = $cIndex|0;
 $cChMode = $cChMode|0;
 $cChannel = $cChannel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cIndex;
 $2 = $cChMode;
 $3 = $cChannel;
 $4 = $2;
 $5 = $4&255;
 $6 = ($5|0)>(2);
 if ($6) {
  $2 = 2;
 }
 $7 = $3;
 $8 = ($7>>>0)>(1);
 if ($8) {
  $9 = $0;
  $10 = $2;
  $11 = $10&255;
  _putBit16($9,$11,2);
 } else {
  $2 = 0;
 }
 $12 = $0;
 $13 = $1;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 _putBit16($12,$15,8);
 $16 = $2;
 $17 = $16&255;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = $0;
  $20 = $1;
  $21 = (($20) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  _putBit16($19,$23,8);
  STACKTOP = sp;return;
 }
 $24 = $2;
 $25 = $24&255;
 $26 = ($25|0)>(0);
 if ($26) {
  $i = 1;
  while(1) {
   $27 = $i;
   $28 = $3;
   $29 = ($27>>>0)<($28>>>0);
   if (!($29)) {
    break;
   }
   $30 = $0;
   $31 = $i;
   $32 = $1;
   $33 = (($32) + ($31)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   _putBit16($30,$35,8);
   $36 = $i;
   $37 = (($36) + 1)|0;
   $i = $37;
  }
 }
 STACKTOP = sp;return;
}
function _transcodeQuantizers($pIO,$cIndex,$cChMode,$cNum,$cChannel,$bCopy) {
 $pIO = $pIO|0;
 $cIndex = $cIndex|0;
 $cChMode = $cChMode|0;
 $cNum = $cNum|0;
 $cChannel = $cChannel|0;
 $bCopy = $bCopy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cIndex;
 $2 = $cChMode;
 $3 = $cNum;
 $4 = $cChannel;
 $5 = $bCopy;
 $6 = $0;
 $7 = $5;
 $8 = ($7|0)==(1);
 $9 = $8 ? 1 : 0;
 _putBit16($6,$9,1);
 $10 = $5;
 $11 = ($10|0)==(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = $3;
 $14 = (($13) - 1)|0;
 _putBit16($12,$14,4);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $3;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $0;
  $19 = $i;
  $20 = $1;
  $21 = (($20) + ($19<<4)|0);
  $22 = $i;
  $23 = $2;
  $24 = (($23) + ($22)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $4;
  _transcodeQuantizer($18,$21,$25,$26);
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 STACKTOP = sp;return;
}
function _transcodeQuantizersAlpha($pIO,$cIndex,$cNum,$iChannel,$bCopy) {
 $pIO = $pIO|0;
 $cIndex = $cIndex|0;
 $cNum = $cNum|0;
 $iChannel = $iChannel|0;
 $bCopy = $bCopy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cIndex;
 $2 = $cNum;
 $3 = $iChannel;
 $4 = $bCopy;
 $5 = $0;
 $6 = $4;
 $7 = ($6|0)==(1);
 $8 = $7 ? 1 : 0;
 _putBit16($5,$8,1);
 $9 = $4;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = $2;
 $13 = (($12) - 1)|0;
 _putBit16($11,$13,4);
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = $2;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $0;
  $18 = $3;
  $19 = $i;
  $20 = $1;
  $21 = (($20) + ($19<<4)|0);
  $22 = (($21) + ($18)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  _putBit16($17,$24,8);
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 STACKTOP = sp;return;
}
function _transcodeTileHeader($pSC,$pTileQPInfo) {
 $pSC = $pSC|0;
 $pTileQPInfo = $pTileQPInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $iAlphaPos = 0, $pContext = 0, $pID = 0, $pSCAlpha = 0, $pTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pTileQPInfo;
 $2 = $0;
 $3 = (($2) + 34300|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = (($6) + 34304|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = (($10) + 35036|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $0;
 $15 = (($14) + 34296|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (($17) + 34336|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + (($16*592)|0)|0);
 $pContext = $20;
 $21 = $0;
 $22 = (($21) + 34316|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 $25 = (($24) + 34296|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + (($26*240)|0)|0);
 $pTile = $27;
 $28 = $0;
 $29 = (($28) + 34292|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $0;
 $32 = (($31) + 84|0);
 $33 = (($32) + 64|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 1)|0;
 $36 = Math_imul($30, $35)|0;
 $37 = $0;
 $38 = (($37) + 34296|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($36) + ($39))|0;
 $41 = $40 & 31;
 $42 = $41&255;
 $pID = $42;
 $43 = $0;
 $44 = (($43) + 34136|0);
 $45 = (($44) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $0;
  $49 = (($48) + 35032|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50;
 } else {
  $51 = 0;
 }
 $pSCAlpha = $51;
 $52 = $0;
 $53 = (($52) + 34136|0);
 $54 = (($53) + 36|0);
 $55 = HEAP32[$54>>2]|0;
 $iAlphaPos = $55;
 $56 = $pContext;
 $57 = HEAP32[$56>>2]|0;
 $58 = $0;
 $59 = (($58) + 84|0);
 $60 = (($59) + 28|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0);
 $63 = $62 ? 0 : 1;
 $64 = $63&255;
 $65 = $pID;
 _writePacketHeader($57,$64,$65);
 $66 = $0;
 $67 = (($66) + 34136|0);
 $68 = (($67) + 28|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0);
 if ($70) {
  $71 = $0;
  $72 = (($71) + 84|0);
  $73 = (($72) + 28|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)==(0);
  if ($75) {
   $76 = $pContext;
   $77 = HEAP32[$76>>2]|0;
   $78 = $pContext;
   $79 = (($78) + 584|0);
   $80 = HEAP32[$79>>2]|0;
   _putBit16($77,$80,4);
  }
 }
 $81 = $0;
 $82 = (($81) + 34136|0);
 $83 = (($82) + 60|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 & 1;
 $86 = ($85|0)!=(0);
 if ($86) {
  $87 = $pContext;
  $88 = HEAP32[$87>>2]|0;
  $89 = $1;
  $90 = (($89) + 1|0);
  $91 = $1;
  $92 = HEAP8[$91>>0]|0;
  $93 = $0;
  $94 = (($93) + 84|0);
  $95 = (($94) + 32|0);
  $96 = HEAP32[$95>>2]|0;
  _transcodeQuantizer($88,$90,$92,$96);
 }
 $97 = $pSCAlpha;
 $98 = ($97|0)!=(0|0);
 if ($98) {
  $99 = $pSCAlpha;
  $100 = (($99) + 34136|0);
  $101 = (($100) + 60|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $102 & 1;
  $104 = ($103|0)!=(0);
  if ($104) {
   $105 = $pContext;
   $106 = HEAP32[$105>>2]|0;
   $107 = $iAlphaPos;
   $108 = $1;
   $109 = (($108) + 1|0);
   $110 = (($109) + ($107)|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   _putBit16($106,$112,8);
  }
 }
 $113 = $0;
 $114 = (($113) + 84|0);
 $115 = (($114) + 28|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(0);
 if ($117) {
  $118 = $0;
  $119 = (($118) + 84|0);
  $120 = (($119) + 44|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)!=(3);
  if ($122) {
   $123 = $0;
   $124 = (($123) + 34136|0);
   $125 = (($124) + 60|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $126 & 2;
   $128 = ($127|0)!=(0);
   if ($128) {
    $129 = $pContext;
    $130 = HEAP32[$129>>2]|0;
    $131 = $1;
    $132 = (($131) + 49|0);
    $133 = $1;
    $134 = (($133) + 33|0);
    $135 = $1;
    $136 = (($135) + 24|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = $0;
    $140 = (($139) + 84|0);
    $141 = (($140) + 32|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $1;
    $144 = (($143) + 20|0);
    $145 = HEAP32[$144>>2]|0;
    _transcodeQuantizers($130,$132,$134,$138,$142,$145);
   }
   $146 = $pSCAlpha;
   $147 = ($146|0)!=(0|0);
   if ($147) {
    $148 = $pSCAlpha;
    $149 = (($148) + 34136|0);
    $150 = (($149) + 60|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $151 & 2;
    $153 = ($152|0)!=(0);
    if ($153) {
     $154 = $pContext;
     $155 = HEAP32[$154>>2]|0;
     $156 = $1;
     $157 = (($156) + 49|0);
     $158 = $1;
     $159 = (($158) + 32|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $160&255;
     $162 = $iAlphaPos;
     $163 = $1;
     $164 = (($163) + 28|0);
     $165 = HEAP32[$164>>2]|0;
     _transcodeQuantizersAlpha($155,$157,$161,$162,$165);
    }
   }
   $166 = $0;
   $167 = (($166) + 84|0);
   $168 = (($167) + 44|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ($169|0)!=(2);
   if ($170) {
    $171 = $0;
    $172 = (($171) + 34136|0);
    $173 = (($172) + 60|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $174 & 4;
    $176 = ($175|0)!=(0);
    if ($176) {
     $177 = $pContext;
     $178 = HEAP32[$177>>2]|0;
     $179 = $1;
     $180 = (($179) + 337|0);
     $181 = $1;
     $182 = (($181) + 321|0);
     $183 = $1;
     $184 = (($183) + 312|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = $0;
     $188 = (($187) + 84|0);
     $189 = (($188) + 32|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = $1;
     $192 = (($191) + 308|0);
     $193 = HEAP32[$192>>2]|0;
     _transcodeQuantizers($178,$180,$182,$186,$190,$193);
    }
    $194 = $pSCAlpha;
    $195 = ($194|0)!=(0|0);
    if ($195) {
     $196 = $pSCAlpha;
     $197 = (($196) + 34136|0);
     $198 = (($197) + 60|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $199 & 4;
     $201 = ($200|0)!=(0);
     if ($201) {
      $202 = $pContext;
      $203 = HEAP32[$202>>2]|0;
      $204 = $1;
      $205 = (($204) + 337|0);
      $206 = $1;
      $207 = (($206) + 320|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = $208&255;
      $210 = $iAlphaPos;
      $211 = $1;
      $212 = (($211) + 316|0);
      $213 = HEAP32[$212>>2]|0;
      _transcodeQuantizersAlpha($203,$205,$209,$210,$213);
     }
    }
   }
  }
 } else {
  $214 = $0;
  $215 = (($214) + 84|0);
  $216 = (($215) + 44|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = ($217|0)!=(3);
  if ($218) {
   $219 = $pContext;
   $220 = (($219) + 4|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $pID;
   _writePacketHeader($221,2,$222);
   $223 = $0;
   $224 = (($223) + 34136|0);
   $225 = (($224) + 60|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $226 & 2;
   $228 = ($227|0)!=(0);
   if ($228) {
    $229 = $pContext;
    $230 = (($229) + 4|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = $1;
    $233 = (($232) + 49|0);
    $234 = $1;
    $235 = (($234) + 33|0);
    $236 = $1;
    $237 = (($236) + 24|0);
    $238 = HEAP8[$237>>0]|0;
    $239 = $238&255;
    $240 = $0;
    $241 = (($240) + 84|0);
    $242 = (($241) + 32|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $1;
    $245 = (($244) + 20|0);
    $246 = HEAP32[$245>>2]|0;
    _transcodeQuantizers($231,$233,$235,$239,$243,$246);
   }
   $247 = $pSCAlpha;
   $248 = ($247|0)!=(0|0);
   if ($248) {
    $249 = $pSCAlpha;
    $250 = (($249) + 34136|0);
    $251 = (($250) + 60|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $252 & 2;
    $254 = ($253|0)!=(0);
    if ($254) {
     $255 = $pContext;
     $256 = (($255) + 4|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $1;
     $259 = (($258) + 49|0);
     $260 = $1;
     $261 = (($260) + 32|0);
     $262 = HEAP8[$261>>0]|0;
     $263 = $262&255;
     $264 = $iAlphaPos;
     $265 = $1;
     $266 = (($265) + 28|0);
     $267 = HEAP32[$266>>2]|0;
     _transcodeQuantizersAlpha($257,$259,$263,$264,$267);
    }
   }
   $268 = $0;
   $269 = (($268) + 84|0);
   $270 = (($269) + 44|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = ($271|0)!=(2);
   if ($272) {
    $273 = $pContext;
    $274 = (($273) + 8|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = $pID;
    _writePacketHeader($275,3,$276);
    $277 = $0;
    $278 = (($277) + 34136|0);
    $279 = (($278) + 60|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $280 & 4;
    $282 = ($281|0)!=(0);
    if ($282) {
     $283 = $pContext;
     $284 = (($283) + 8|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = $1;
     $287 = (($286) + 337|0);
     $288 = $1;
     $289 = (($288) + 321|0);
     $290 = $1;
     $291 = (($290) + 312|0);
     $292 = HEAP8[$291>>0]|0;
     $293 = $292&255;
     $294 = $0;
     $295 = (($294) + 84|0);
     $296 = (($295) + 32|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = $1;
     $299 = (($298) + 308|0);
     $300 = HEAP32[$299>>2]|0;
     _transcodeQuantizers($285,$287,$289,$293,$297,$300);
    }
    $301 = $pSCAlpha;
    $302 = ($301|0)!=(0|0);
    if ($302) {
     $303 = $pSCAlpha;
     $304 = (($303) + 34136|0);
     $305 = (($304) + 60|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = $306 & 4;
     $308 = ($307|0)!=(0);
     if ($308) {
      $309 = $pContext;
      $310 = (($309) + 8|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = $1;
      $313 = (($312) + 337|0);
      $314 = $1;
      $315 = (($314) + 320|0);
      $316 = HEAP8[$315>>0]|0;
      $317 = $316&255;
      $318 = $iAlphaPos;
      $319 = $1;
      $320 = (($319) + 316|0);
      $321 = HEAP32[$320>>2]|0;
      _transcodeQuantizersAlpha($311,$313,$317,$318,$321);
     }
    }
    $322 = $0;
    $323 = (($322) + 84|0);
    $324 = (($323) + 44|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ($325|0)!=(1);
    if ($326) {
     $327 = $pContext;
     $328 = (($327) + 12|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = $pID;
     _writePacketHeader($329,4,$330);
     $331 = $0;
     $332 = (($331) + 34136|0);
     $333 = (($332) + 28|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = ($334|0)!=(0);
     if ($335) {
      $336 = $pContext;
      $337 = (($336) + 12|0);
      $338 = HEAP32[$337>>2]|0;
      $339 = $pContext;
      $340 = (($339) + 584|0);
      $341 = HEAP32[$340>>2]|0;
      _putBit16($338,$341,4);
     }
    }
   }
  }
 }
 $342 = $1;
 $343 = (($342) + 20|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = ($344|0)!=(0);
 if ($345) {
  $352 = 0;
 } else {
  $346 = $1;
  $347 = (($346) + 24|0);
  $348 = HEAP8[$347>>0]|0;
  $349 = (_dquantBits($348)|0);
  $350 = $349&255;
  $352 = $350;
 }
 $351 = $352&255;
 $353 = $pTile;
 $354 = (($353) + 194|0);
 HEAP8[$354>>0] = $351;
 $355 = $1;
 $356 = (($355) + 308|0);
 $357 = HEAP32[$356>>2]|0;
 $358 = ($357|0)!=(0);
 if ($358) {
  $365 = 0;
 } else {
  $359 = $1;
  $360 = (($359) + 312|0);
  $361 = HEAP8[$360>>0]|0;
  $362 = (_dquantBits($361)|0);
  $363 = $362&255;
  $365 = $363;
 }
 $364 = $365&255;
 $366 = $pTile;
 $367 = (($366) + 195|0);
 HEAP8[$367>>0] = $364;
 $368 = $pSCAlpha;
 $369 = ($368|0)!=(0|0);
 if ($369) {
  $370 = $pSCAlpha;
  $371 = (($370) + 34316|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = $0;
  $374 = (($373) + 34296|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = (($372) + (($375*240)|0)|0);
  $pTile = $376;
  $377 = $1;
  $378 = (($377) + 28|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = ($379|0)!=(0);
  if ($380) {
   $387 = 0;
  } else {
   $381 = $1;
   $382 = (($381) + 32|0);
   $383 = HEAP8[$382>>0]|0;
   $384 = (_dquantBits($383)|0);
   $385 = $384&255;
   $387 = $385;
  }
  $386 = $387&255;
  $388 = $pTile;
  $389 = (($388) + 194|0);
  HEAP8[$389>>0] = $386;
  $390 = $1;
  $391 = (($390) + 316|0);
  $392 = HEAP32[$391>>2]|0;
  $393 = ($392|0)!=(0);
  if ($393) {
   $400 = 0;
  } else {
   $394 = $1;
   $395 = (($394) + 320|0);
   $396 = HEAP8[$395>>0]|0;
   $397 = (_dquantBits($396)|0);
   $398 = $397&255;
   $400 = $398;
  }
  $399 = $400&255;
  $401 = $pTile;
  $402 = (($401) + 195|0);
  HEAP8[$402>>0] = $399;
 }
 STACKTOP = sp;return;
}
function _transformDCBlock($pOrg,$pDst,$oOrientation) {
 $pOrg = $pOrg|0;
 $pDst = $pDst|0;
 $oOrientation = $oOrientation|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pOrg;
 $1 = $pDst;
 $2 = $oOrientation;
 $3 = $2;
 $4 = (9672 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $i = 0;
  while(1) {
   $7 = $i;
   $8 = ($7>>>0)<(16);
   if (!($8)) {
    break;
   }
   $9 = $i;
   $10 = (($9) + 1)|0;
   $11 = $0;
   $12 = (($11) + ($10<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (0 - ($13))|0;
   $15 = $i;
   $16 = (($15) + 1)|0;
   $17 = $0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $14;
   $19 = $i;
   $20 = (($19) + 3)|0;
   $21 = $0;
   $22 = (($21) + ($20<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (0 - ($23))|0;
   $25 = $i;
   $26 = (($25) + 3)|0;
   $27 = $0;
   $28 = (($27) + ($26<<2)|0);
   HEAP32[$28>>2] = $24;
   $29 = $i;
   $30 = (($29) + 4)|0;
   $i = $30;
  }
 }
 $31 = $2;
 $32 = (9704 + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 if ($34) {
  $i = 0;
  while(1) {
   $35 = $i;
   $36 = ($35>>>0)<(4);
   if (!($36)) {
    break;
   }
   $37 = $i;
   $38 = (($37) + 4)|0;
   $39 = $0;
   $40 = (($39) + ($38<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (0 - ($41))|0;
   $43 = $i;
   $44 = (($43) + 4)|0;
   $45 = $0;
   $46 = (($45) + ($44<<2)|0);
   HEAP32[$46>>2] = $42;
   $47 = $i;
   $48 = (($47) + 12)|0;
   $49 = $0;
   $50 = (($49) + ($48<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (0 - ($51))|0;
   $53 = $i;
   $54 = (($53) + 12)|0;
   $55 = $0;
   $56 = (($55) + ($54<<2)|0);
   HEAP32[$56>>2] = $52;
   $57 = $i;
   $58 = (($57) + 1)|0;
   $i = $58;
  }
 }
 $59 = $2;
 $60 = ($59>>>0)<(4);
 if ($60) {
  $61 = $1;
  $62 = $0;
  dest=$61+0|0; src=$62+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $63 = $i;
  $64 = ($63>>>0)<(16);
  if (!($64)) {
   break;
  }
  $65 = $i;
  $66 = $65 >>> 2;
  $67 = $i;
  $68 = $67 & 3;
  $69 = $68 << 2;
  $70 = (($66) + ($69))|0;
  $71 = $0;
  $72 = (($71) + ($70<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $i;
  $75 = $1;
  $76 = (($75) + ($74<<2)|0);
  HEAP32[$76>>2] = $73;
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 STACKTOP = sp;return;
}
function _transformDCBlock422($pOrg,$pDst,$oOrientation) {
 $pOrg = $pOrg|0;
 $pDst = $pDst|0;
 $oOrientation = $oOrientation|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pOrg;
 $1 = $pDst;
 $2 = $oOrientation;
 $3 = $2;
 $4 = ($3>>>0)<(4);
 if (!($4)) {
  ___assert_fail((9736|0),(9760|0),224,(9792|0));
  // unreachable;
 }
 $5 = $2;
 $6 = (9672 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (0 - ($11))|0;
  $13 = $0;
  $14 = (($13) + 4|0);
  HEAP32[$14>>2] = $12;
  $15 = $0;
  $16 = (($15) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (0 - ($17))|0;
  $19 = $0;
  $20 = (($19) + 12|0);
  HEAP32[$20>>2] = $18;
  $21 = $0;
  $22 = (($21) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (0 - ($23))|0;
  $25 = $0;
  $26 = (($25) + 16|0);
  HEAP32[$26>>2] = $24;
  $27 = $0;
  $28 = (($27) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (0 - ($29))|0;
  $31 = $0;
  $32 = (($31) + 20|0);
  HEAP32[$32>>2] = $30;
  $33 = $0;
  $34 = (($33) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (0 - ($35))|0;
  $37 = $0;
  $38 = (($37) + 28|0);
  HEAP32[$38>>2] = $36;
 }
 $39 = $2;
 $40 = (9704 + ($39<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $0;
  $44 = (($43) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (0 - ($45))|0;
  $47 = $0;
  $48 = (($47) + 8|0);
  HEAP32[$48>>2] = $46;
  $49 = $0;
  $50 = (($49) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (0 - ($51))|0;
  $53 = $0;
  $54 = (($53) + 12|0);
  HEAP32[$54>>2] = $52;
  $55 = $0;
  $56 = (($55) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (0 - ($57))|0;
  $59 = $0;
  $60 = (($59) + 24|0);
  HEAP32[$60>>2] = $58;
  $61 = $0;
  $62 = (($61) + 28|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (0 - ($63))|0;
  $65 = $0;
  $66 = (($65) + 28|0);
  HEAP32[$66>>2] = $64;
 }
 $67 = $2;
 $68 = (9672 + ($67<<2)|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0);
 if ($70) {
  $71 = $0;
  $72 = HEAP32[$71>>2]|0;
  $73 = $1;
  HEAP32[$73>>2] = $72;
  $74 = $0;
  $75 = (($74) + 20|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $1;
  $78 = (($77) + 4|0);
  HEAP32[$78>>2] = $76;
  $79 = $0;
  $80 = (($79) + 24|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $1;
  $83 = (($82) + 8|0);
  HEAP32[$83>>2] = $81;
  $84 = $0;
  $85 = (($84) + 28|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $1;
  $88 = (($87) + 12|0);
  HEAP32[$88>>2] = $86;
  $89 = $0;
  $90 = (($89) + 16|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $1;
  $93 = (($92) + 16|0);
  HEAP32[$93>>2] = $91;
  $94 = $0;
  $95 = (($94) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $1;
  $98 = (($97) + 20|0);
  HEAP32[$98>>2] = $96;
  $99 = $0;
  $100 = (($99) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $1;
  $103 = (($102) + 24|0);
  HEAP32[$103>>2] = $101;
  $104 = $0;
  $105 = (($104) + 12|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $1;
  $108 = (($107) + 28|0);
  HEAP32[$108>>2] = $106;
  STACKTOP = sp;return;
 } else {
  $109 = $1;
  $110 = $0;
  ;HEAP32[$109+0>>2]=HEAP32[$110+0>>2]|0;HEAP32[$109+4>>2]=HEAP32[$110+4>>2]|0;HEAP32[$109+8>>2]=HEAP32[$110+8>>2]|0;HEAP32[$109+12>>2]=HEAP32[$110+12>>2]|0;HEAP32[$109+16>>2]=HEAP32[$110+16>>2]|0;HEAP32[$109+20>>2]=HEAP32[$110+20>>2]|0;HEAP32[$109+24>>2]=HEAP32[$110+24>>2]|0;HEAP32[$109+28>>2]=HEAP32[$110+28>>2]|0;
  STACKTOP = sp;return;
 }
}
function _transformDCBlock420($pOrg,$pDst,$oOrientation) {
 $pOrg = $pOrg|0;
 $pDst = $pDst|0;
 $oOrientation = $oOrientation|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pOrg;
 $1 = $pDst;
 $2 = $oOrientation;
 $3 = $2;
 $4 = (9672 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (0 - ($9))|0;
  $11 = $0;
  $12 = (($11) + 4|0);
  HEAP32[$12>>2] = $10;
  $13 = $0;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (0 - ($15))|0;
  $17 = $0;
  $18 = (($17) + 12|0);
  HEAP32[$18>>2] = $16;
 }
 $19 = $2;
 $20 = (9704 + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $0;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (0 - ($25))|0;
  $27 = $0;
  $28 = (($27) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = $0;
  $30 = (($29) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (0 - ($31))|0;
  $33 = $0;
  $34 = (($33) + 12|0);
  HEAP32[$34>>2] = $32;
 }
 $35 = $0;
 $36 = HEAP32[$35>>2]|0;
 $37 = $1;
 HEAP32[$37>>2] = $36;
 $38 = $0;
 $39 = (($38) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $1;
 $42 = (($41) + 12|0);
 HEAP32[$42>>2] = $40;
 $43 = $2;
 $44 = ($43>>>0)<(4);
 if ($44) {
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $1;
  $49 = (($48) + 4|0);
  HEAP32[$49>>2] = $47;
  $50 = $0;
  $51 = (($50) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $1;
  $54 = (($53) + 8|0);
  HEAP32[$54>>2] = $52;
  STACKTOP = sp;return;
 } else {
  $55 = $0;
  $56 = (($55) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $1;
  $59 = (($58) + 4|0);
  HEAP32[$59>>2] = $57;
  $60 = $0;
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $1;
  $64 = (($63) + 8|0);
  HEAP32[$64>>2] = $62;
  STACKTOP = sp;return;
 }
}
function _transformACBlocks($pOrg,$pDst,$oOrientation) {
 $pOrg = $pOrg|0;
 $pDst = $pDst|0;
 $oOrientation = $oOrientation|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $ii = 0, $j = 0, $jj = 0, $k = 0, $pD = 0, $pO = 0, $pT = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pOrg;
 $1 = $pDst;
 $2 = $oOrientation;
 $pT = 14048;
 $j = 0;
 $3 = $0;
 $pO = $3;
 while(1) {
  $4 = $j;
  $5 = ($4>>>0)<(16);
  if (!($5)) {
   break;
  }
  $6 = $2;
  $7 = (9672 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $i = 0;
   while(1) {
    $10 = $i;
    $11 = ($10>>>0)<(16);
    if (!($11)) {
     break;
    }
    $12 = $i;
    $13 = (($12) + 1)|0;
    $14 = $pT;
    $15 = (($14) + ($13<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $pO;
    $18 = (($17) + ($16<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (0 - ($19))|0;
    $21 = $i;
    $22 = (($21) + 1)|0;
    $23 = $pT;
    $24 = (($23) + ($22<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $pO;
    $27 = (($26) + ($25<<2)|0);
    HEAP32[$27>>2] = $20;
    $28 = $i;
    $29 = (($28) + 3)|0;
    $30 = $pT;
    $31 = (($30) + ($29<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $pO;
    $34 = (($33) + ($32<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (0 - ($35))|0;
    $37 = $i;
    $38 = (($37) + 3)|0;
    $39 = $pT;
    $40 = (($39) + ($38<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $pO;
    $43 = (($42) + ($41<<2)|0);
    HEAP32[$43>>2] = $36;
    $44 = $i;
    $45 = (($44) + 4)|0;
    $i = $45;
   }
  }
  $46 = $2;
  $47 = (9704 + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0);
  if ($49) {
   $i = 0;
   while(1) {
    $50 = $i;
    $51 = ($50>>>0)<(4);
    if (!($51)) {
     break;
    }
    $52 = $i;
    $53 = (($52) + 4)|0;
    $54 = $pT;
    $55 = (($54) + ($53<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $pO;
    $58 = (($57) + ($56<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (0 - ($59))|0;
    $61 = $i;
    $62 = (($61) + 4)|0;
    $63 = $pT;
    $64 = (($63) + ($62<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $pO;
    $67 = (($66) + ($65<<2)|0);
    HEAP32[$67>>2] = $60;
    $68 = $i;
    $69 = (($68) + 12)|0;
    $70 = $pT;
    $71 = (($70) + ($69<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $pO;
    $74 = (($73) + ($72<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (0 - ($75))|0;
    $77 = $i;
    $78 = (($77) + 12)|0;
    $79 = $pT;
    $80 = (($79) + ($78<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $pO;
    $83 = (($82) + ($81<<2)|0);
    HEAP32[$83>>2] = $76;
    $84 = $i;
    $85 = (($84) + 1)|0;
    $i = $85;
   }
  }
  $86 = $j;
  $87 = (($86) + 1)|0;
  $j = $87;
  $88 = $pO;
  $89 = (($88) + 64|0);
  $pO = $89;
 }
 $j = 0;
 while(1) {
  $90 = $j;
  $91 = ($90>>>0)<(4);
  if (!($91)) {
   break;
  }
  $i = 0;
  while(1) {
   $92 = $i;
   $93 = ($92>>>0)<(4);
   if (!($93)) {
    break;
   }
   $94 = $2;
   $95 = (9672 + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $i;
    $99 = (3 - ($98))|0;
    $101 = $99;
   } else {
    $100 = $i;
    $101 = $100;
   }
   $ii = $101;
   $102 = $2;
   $103 = (9704 + ($102<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104|0)!=(0);
   if ($105) {
    $106 = $j;
    $107 = (3 - ($106))|0;
    $109 = $107;
   } else {
    $108 = $j;
    $109 = $108;
   }
   $jj = $109;
   $110 = $2;
   $111 = ($110>>>0)<(4);
   if ($111) {
    $112 = $1;
    $113 = $jj;
    $114 = $113<<2;
    $115 = $ii;
    $116 = (($114) + ($115))|0;
    $117 = $116<<4;
    $118 = (($112) + ($117<<2)|0);
    $119 = $0;
    $120 = $j;
    $121 = $120<<2;
    $122 = $i;
    $123 = (($121) + ($122))|0;
    $124 = $123<<4;
    $125 = (($119) + ($124<<2)|0);
    dest=$118+0|0; src=$125+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   } else {
    $126 = $0;
    $127 = $j;
    $128 = $127<<2;
    $129 = $i;
    $130 = (($128) + ($129))|0;
    $131 = $130<<4;
    $132 = (($126) + ($131<<2)|0);
    $pO = $132;
    $133 = $1;
    $134 = $ii;
    $135 = $134<<2;
    $136 = $jj;
    $137 = (($135) + ($136))|0;
    $138 = $137<<4;
    $139 = (($133) + ($138<<2)|0);
    $pD = $139;
    $k = 1;
    while(1) {
     $140 = $k;
     $141 = ($140>>>0)<(16);
     if (!($141)) {
      break;
     }
     $142 = $k;
     $143 = $142 >>> 2;
     $144 = $k;
     $145 = $144 & 3;
     $146 = $145 << 2;
     $147 = (($143) + ($146))|0;
     $148 = $pT;
     $149 = (($148) + ($147<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $pO;
     $152 = (($151) + ($150<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $k;
     $155 = $pT;
     $156 = (($155) + ($154<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $pD;
     $159 = (($158) + ($157<<2)|0);
     HEAP32[$159>>2] = $153;
     $160 = $k;
     $161 = (($160) + 1)|0;
     $k = $161;
    }
   }
   $162 = $i;
   $163 = (($162) + 1)|0;
   $i = $163;
  }
  $164 = $j;
  $165 = (($164) + 1)|0;
  $j = $165;
 }
 STACKTOP = sp;return;
}
function _transformACBlocks422($pOrg,$pDst,$oOrientation) {
 $pOrg = $pOrg|0;
 $pDst = $pDst|0;
 $oOrientation = $oOrientation|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $ii = 0, $j = 0, $jj = 0, $pO = 0, $pT = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pOrg;
 $1 = $pDst;
 $2 = $oOrientation;
 $pT = 14048;
 $3 = $2;
 $4 = ($3>>>0)<(4);
 if (!($4)) {
  ___assert_fail((9736|0),(9760|0),291,(9816|0));
  // unreachable;
 }
 $j = 0;
 $5 = $0;
 $pO = $5;
 while(1) {
  $6 = $j;
  $7 = ($6>>>0)<(8);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = (9672 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0);
  if ($11) {
   $i = 0;
   while(1) {
    $12 = $i;
    $13 = ($12>>>0)<(16);
    if (!($13)) {
     break;
    }
    $14 = $i;
    $15 = (($14) + 1)|0;
    $16 = $pT;
    $17 = (($16) + ($15<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $pO;
    $20 = (($19) + ($18<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (0 - ($21))|0;
    $23 = $i;
    $24 = (($23) + 1)|0;
    $25 = $pT;
    $26 = (($25) + ($24<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $pO;
    $29 = (($28) + ($27<<2)|0);
    HEAP32[$29>>2] = $22;
    $30 = $i;
    $31 = (($30) + 3)|0;
    $32 = $pT;
    $33 = (($32) + ($31<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $pO;
    $36 = (($35) + ($34<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (0 - ($37))|0;
    $39 = $i;
    $40 = (($39) + 3)|0;
    $41 = $pT;
    $42 = (($41) + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $pO;
    $45 = (($44) + ($43<<2)|0);
    HEAP32[$45>>2] = $38;
    $46 = $i;
    $47 = (($46) + 4)|0;
    $i = $47;
   }
  }
  $48 = $2;
  $49 = (9704 + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0);
  if ($51) {
   $i = 0;
   while(1) {
    $52 = $i;
    $53 = ($52>>>0)<(4);
    if (!($53)) {
     break;
    }
    $54 = $i;
    $55 = (($54) + 4)|0;
    $56 = $pT;
    $57 = (($56) + ($55<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $pO;
    $60 = (($59) + ($58<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (0 - ($61))|0;
    $63 = $i;
    $64 = (($63) + 4)|0;
    $65 = $pT;
    $66 = (($65) + ($64<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $pO;
    $69 = (($68) + ($67<<2)|0);
    HEAP32[$69>>2] = $62;
    $70 = $i;
    $71 = (($70) + 12)|0;
    $72 = $pT;
    $73 = (($72) + ($71<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $pO;
    $76 = (($75) + ($74<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (0 - ($77))|0;
    $79 = $i;
    $80 = (($79) + 12)|0;
    $81 = $pT;
    $82 = (($81) + ($80<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $pO;
    $85 = (($84) + ($83<<2)|0);
    HEAP32[$85>>2] = $78;
    $86 = $i;
    $87 = (($86) + 1)|0;
    $i = $87;
   }
  }
  $88 = $j;
  $89 = (($88) + 1)|0;
  $j = $89;
  $90 = $pO;
  $91 = (($90) + 64|0);
  $pO = $91;
 }
 $j = 0;
 while(1) {
  $92 = $j;
  $93 = ($92>>>0)<(2);
  if (!($93)) {
   break;
  }
  $i = 0;
  while(1) {
   $94 = $i;
   $95 = ($94>>>0)<(4);
   if (!($95)) {
    break;
   }
   $96 = $2;
   $97 = (9672 + ($96<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)!=(0);
   if ($99) {
    $100 = $i;
    $101 = (3 - ($100))|0;
    $103 = $101;
   } else {
    $102 = $i;
    $103 = $102;
   }
   $ii = $103;
   $104 = $2;
   $105 = (9704 + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)!=(0);
   if ($107) {
    $108 = $j;
    $109 = (1 - ($108))|0;
    $111 = $109;
   } else {
    $110 = $j;
    $111 = $110;
   }
   $jj = $111;
   $112 = $1;
   $113 = $jj;
   $114 = $113<<2;
   $115 = $ii;
   $116 = (($114) + ($115))|0;
   $117 = $116<<4;
   $118 = (($112) + ($117<<2)|0);
   $119 = $0;
   $120 = $j;
   $121 = $120<<2;
   $122 = $i;
   $123 = (($121) + ($122))|0;
   $124 = $123<<4;
   $125 = (($119) + ($124<<2)|0);
   dest=$118+0|0; src=$125+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $126 = $i;
   $127 = (($126) + 1)|0;
   $i = $127;
  }
  $128 = $j;
  $129 = (($128) + 1)|0;
  $j = $129;
 }
 STACKTOP = sp;return;
}
function _transformACBlocks420($pOrg,$pDst,$oOrientation) {
 $pOrg = $pOrg|0;
 $pDst = $pDst|0;
 $oOrientation = $oOrientation|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $ii = 0, $j = 0, $jj = 0, $k = 0, $pD = 0, $pO = 0, $pT = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pOrg;
 $1 = $pDst;
 $2 = $oOrientation;
 $pT = 14048;
 $j = 0;
 $3 = $0;
 $pO = $3;
 while(1) {
  $4 = $j;
  $5 = ($4>>>0)<(4);
  if (!($5)) {
   break;
  }
  $6 = $2;
  $7 = (9672 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $i = 0;
   while(1) {
    $10 = $i;
    $11 = ($10>>>0)<(16);
    if (!($11)) {
     break;
    }
    $12 = $i;
    $13 = (($12) + 1)|0;
    $14 = $pT;
    $15 = (($14) + ($13<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $pO;
    $18 = (($17) + ($16<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (0 - ($19))|0;
    $21 = $i;
    $22 = (($21) + 1)|0;
    $23 = $pT;
    $24 = (($23) + ($22<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $pO;
    $27 = (($26) + ($25<<2)|0);
    HEAP32[$27>>2] = $20;
    $28 = $i;
    $29 = (($28) + 3)|0;
    $30 = $pT;
    $31 = (($30) + ($29<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $pO;
    $34 = (($33) + ($32<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (0 - ($35))|0;
    $37 = $i;
    $38 = (($37) + 3)|0;
    $39 = $pT;
    $40 = (($39) + ($38<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $pO;
    $43 = (($42) + ($41<<2)|0);
    HEAP32[$43>>2] = $36;
    $44 = $i;
    $45 = (($44) + 4)|0;
    $i = $45;
   }
  }
  $46 = $2;
  $47 = (9704 + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0);
  if ($49) {
   $i = 0;
   while(1) {
    $50 = $i;
    $51 = ($50>>>0)<(4);
    if (!($51)) {
     break;
    }
    $52 = $i;
    $53 = (($52) + 4)|0;
    $54 = $pT;
    $55 = (($54) + ($53<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $pO;
    $58 = (($57) + ($56<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (0 - ($59))|0;
    $61 = $i;
    $62 = (($61) + 4)|0;
    $63 = $pT;
    $64 = (($63) + ($62<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $pO;
    $67 = (($66) + ($65<<2)|0);
    HEAP32[$67>>2] = $60;
    $68 = $i;
    $69 = (($68) + 12)|0;
    $70 = $pT;
    $71 = (($70) + ($69<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $pO;
    $74 = (($73) + ($72<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (0 - ($75))|0;
    $77 = $i;
    $78 = (($77) + 12)|0;
    $79 = $pT;
    $80 = (($79) + ($78<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $pO;
    $83 = (($82) + ($81<<2)|0);
    HEAP32[$83>>2] = $76;
    $84 = $i;
    $85 = (($84) + 1)|0;
    $i = $85;
   }
  }
  $86 = $j;
  $87 = (($86) + 1)|0;
  $j = $87;
  $88 = $pO;
  $89 = (($88) + 64|0);
  $pO = $89;
 }
 $j = 0;
 while(1) {
  $90 = $j;
  $91 = ($90>>>0)<(2);
  if (!($91)) {
   break;
  }
  $i = 0;
  while(1) {
   $92 = $i;
   $93 = ($92>>>0)<(2);
   if (!($93)) {
    break;
   }
   $94 = $2;
   $95 = (9672 + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $i;
    $99 = (1 - ($98))|0;
    $101 = $99;
   } else {
    $100 = $i;
    $101 = $100;
   }
   $ii = $101;
   $102 = $2;
   $103 = (9704 + ($102<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104|0)!=(0);
   if ($105) {
    $106 = $j;
    $107 = (1 - ($106))|0;
    $109 = $107;
   } else {
    $108 = $j;
    $109 = $108;
   }
   $jj = $109;
   $110 = $2;
   $111 = ($110>>>0)<(4);
   if ($111) {
    $112 = $1;
    $113 = $jj;
    $114 = $113<<1;
    $115 = $ii;
    $116 = (($114) + ($115))|0;
    $117 = $116<<4;
    $118 = (($112) + ($117<<2)|0);
    $119 = $0;
    $120 = $j;
    $121 = $120<<1;
    $122 = $i;
    $123 = (($121) + ($122))|0;
    $124 = $123<<4;
    $125 = (($119) + ($124<<2)|0);
    dest=$118+0|0; src=$125+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   } else {
    $126 = $0;
    $127 = $j;
    $128 = $127<<1;
    $129 = $i;
    $130 = (($128) + ($129))|0;
    $131 = $130<<4;
    $132 = (($126) + ($131<<2)|0);
    $pO = $132;
    $133 = $1;
    $134 = $ii;
    $135 = $134<<1;
    $136 = $jj;
    $137 = (($135) + ($136))|0;
    $138 = $137<<4;
    $139 = (($133) + ($138<<2)|0);
    $pD = $139;
    $k = 1;
    while(1) {
     $140 = $k;
     $141 = ($140>>>0)<(16);
     if (!($141)) {
      break;
     }
     $142 = $k;
     $143 = $142 >>> 2;
     $144 = $k;
     $145 = $144 & 3;
     $146 = $145 << 2;
     $147 = (($143) + ($146))|0;
     $148 = $pT;
     $149 = (($148) + ($147<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $pO;
     $152 = (($151) + ($150<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $k;
     $155 = $pT;
     $156 = (($155) + ($154<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $pD;
     $159 = (($158) + ($157<<2)|0);
     HEAP32[$159>>2] = $153;
     $160 = $k;
     $161 = (($160) + 1)|0;
     $k = $161;
    }
   }
   $162 = $i;
   $163 = (($162) + 1)|0;
   $i = $163;
  }
  $164 = $j;
  $165 = (($164) + 1)|0;
  $j = $165;
 }
 STACKTOP = sp;return;
}
function _getROI($pII,$pCore,$pSCP,$pParam) {
 $pII = $pII|0;
 $pCore = $pCore|0;
 $pSCP = $pSCP|0;
 $pParam = $pParam|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cBlurred = 0, $cHeight = 0, $cWidth = 0, $i = 0, $iLeft = 0, $iTile = 0, $iTop = 0, $j = 0, $mbBottom = 0, $mbLeft = 0, $mbRight = 0, $mbTop = 0, $oO = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pII;
 $2 = $pCore;
 $3 = $pSCP;
 $4 = $pParam;
 $5 = $4;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $oO = $7;
 $8 = (_malloc(16384)|0);
 $iTile = $8;
 $9 = $iTile;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $0 = -1;
  $622 = $0;
  STACKTOP = sp;return ($622|0);
 }
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12) + ($15))|0;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16>>>0)>($18>>>0);
 if (!($19)) {
  $20 = $4;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $4;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($22) + ($25))|0;
  $27 = $1;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26>>>0)>($29>>>0);
  if (!($30)) {
   $31 = $4;
   $32 = (($31) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $cWidth = $33;
   $34 = $4;
   $35 = (($34) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $cHeight = $36;
   $37 = $4;
   $38 = HEAP32[$37>>2]|0;
   $39 = $2;
   $40 = (($39) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($38) + ($41))|0;
   $iLeft = $42;
   $43 = $4;
   $44 = (($43) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $2;
   $47 = (($46) + 40|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($45) + ($48))|0;
   $iTop = $49;
   $50 = $3;
   $51 = (($50) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)!=(0);
   if ($53) {
    $54 = $4;
    $55 = (($54) + 32|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(0);
    if ($57) {
     $58 = $3;
     $59 = (($58) + 24|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(2);
     $62 = $61 ? 10 : 2;
     $cBlurred = $62;
     $63 = $iLeft;
     $64 = $cBlurred;
     $65 = ($63>>>0)>($64>>>0);
     if ($65) {
      $66 = $cBlurred;
      $67 = $iLeft;
      $68 = (($67) - ($66))|0;
      $iLeft = $68;
      $69 = $cBlurred;
      $70 = $cWidth;
      $71 = (($70) + ($69))|0;
      $cWidth = $71;
     } else {
      $72 = $iLeft;
      $73 = $cWidth;
      $74 = (($73) + ($72))|0;
      $cWidth = $74;
      $iLeft = 0;
     }
     $75 = $iTop;
     $76 = $cBlurred;
     $77 = ($75>>>0)>($76>>>0);
     if ($77) {
      $78 = $cBlurred;
      $79 = $iTop;
      $80 = (($79) - ($78))|0;
      $iTop = $80;
      $81 = $cBlurred;
      $82 = $cHeight;
      $83 = (($82) + ($81))|0;
      $cHeight = $83;
     } else {
      $84 = $iTop;
      $85 = $cHeight;
      $86 = (($85) + ($84))|0;
      $cHeight = $86;
      $iTop = 0;
     }
     $87 = $cBlurred;
     $88 = $cWidth;
     $89 = (($88) + ($87))|0;
     $cWidth = $89;
     $90 = $cBlurred;
     $91 = $cHeight;
     $92 = (($91) + ($90))|0;
     $cHeight = $92;
     $93 = $iLeft;
     $94 = $cWidth;
     $95 = (($93) + ($94))|0;
     $96 = $1;
     $97 = HEAP32[$96>>2]|0;
     $98 = $2;
     $99 = (($98) + 44|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (($97) + ($100))|0;
     $102 = $2;
     $103 = (($102) + 52|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($101) + ($104))|0;
     $106 = ($95>>>0)>($105>>>0);
     if ($106) {
      $107 = $1;
      $108 = HEAP32[$107>>2]|0;
      $109 = $2;
      $110 = (($109) + 44|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (($108) + ($111))|0;
      $113 = $2;
      $114 = (($113) + 52|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($112) + ($115))|0;
      $117 = $iLeft;
      $118 = (($116) - ($117))|0;
      $cWidth = $118;
     }
     $119 = $iTop;
     $120 = $cHeight;
     $121 = (($119) + ($120))|0;
     $122 = $1;
     $123 = (($122) + 4|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = $2;
     $126 = (($125) + 40|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($124) + ($127))|0;
     $129 = $2;
     $130 = (($129) + 48|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($128) + ($131))|0;
     $133 = ($121>>>0)>($132>>>0);
     if ($133) {
      $134 = $1;
      $135 = (($134) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $2;
      $138 = (($137) + 40|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = (($136) + ($139))|0;
      $141 = $2;
      $142 = (($141) + 48|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = (($140) + ($143))|0;
      $145 = $iTop;
      $146 = (($144) - ($145))|0;
      $cHeight = $146;
     }
    }
   }
   $147 = $iTop;
   $148 = $147 >>> 4;
   $mbTop = $148;
   $149 = $iLeft;
   $150 = $149 >>> 4;
   $mbLeft = $150;
   $151 = $iTop;
   $152 = $cHeight;
   $153 = (($151) + ($152))|0;
   $154 = (($153) + 15)|0;
   $155 = $154 >>> 4;
   $mbBottom = $155;
   $156 = $iLeft;
   $157 = $cWidth;
   $158 = (($156) + ($157))|0;
   $159 = (($158) + 15)|0;
   $160 = $159 >>> 4;
   $mbRight = $160;
   $161 = $4;
   $162 = HEAP32[$161>>2]|0;
   $163 = $mbLeft;
   $164 = $163 << 4;
   $165 = (($162) - ($164))|0;
   $166 = $2;
   $167 = (($166) + 44|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + ($165))|0;
   HEAP32[$167>>2] = $169;
   $170 = $mbRight;
   $171 = $mbLeft;
   $172 = (($170) - ($171))|0;
   $173 = $172 << 4;
   $174 = $4;
   $175 = (($174) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($173) - ($176))|0;
   $178 = $2;
   $179 = (($178) + 44|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($177) - ($180))|0;
   $182 = $2;
   $183 = (($182) + 52|0);
   HEAP32[$183>>2] = $181;
   $184 = $4;
   $185 = (($184) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $mbTop;
   $188 = $187 << 4;
   $189 = (($186) - ($188))|0;
   $190 = $2;
   $191 = (($190) + 40|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = (($192) + ($189))|0;
   HEAP32[$191>>2] = $193;
   $194 = $mbBottom;
   $195 = $mbTop;
   $196 = (($194) - ($195))|0;
   $197 = $196 << 4;
   $198 = $4;
   $199 = (($198) + 12|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($197) - ($200))|0;
   $202 = $2;
   $203 = (($202) + 40|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = (($201) - ($204))|0;
   $206 = $2;
   $207 = (($206) + 48|0);
   HEAP32[$207>>2] = $205;
   $208 = $mbRight;
   $209 = $mbLeft;
   $210 = (($208) - ($209))|0;
   $211 = $210 << 4;
   $212 = $2;
   $213 = (($212) + 44|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (($211) - ($214))|0;
   $216 = $2;
   $217 = (($216) + 52|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = (($215) - ($218))|0;
   $220 = $1;
   HEAP32[$220>>2] = $219;
   $221 = $mbBottom;
   $222 = $mbTop;
   $223 = (($221) - ($222))|0;
   $224 = $223 << 4;
   $225 = $2;
   $226 = (($225) + 40|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (($224) - ($227))|0;
   $229 = $2;
   $230 = (($229) + 48|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (($228) - ($231))|0;
   $233 = $1;
   $234 = (($233) + 4|0);
   HEAP32[$234>>2] = $232;
   $235 = $iLeft;
   $236 = $4;
   HEAP32[$236>>2] = $235;
   $237 = $iTop;
   $238 = $4;
   $239 = (($238) + 8|0);
   HEAP32[$239>>2] = $237;
   $240 = $cWidth;
   $241 = $4;
   $242 = (($241) + 4|0);
   HEAP32[$242>>2] = $240;
   $243 = $cHeight;
   $244 = $4;
   $245 = (($244) + 12|0);
   HEAP32[$245>>2] = $243;
   $246 = $oO;
   $247 = ($246|0)==(2);
   if ($247) {
    label = 23;
   } else {
    $248 = $oO;
    $249 = ($248|0)==(3);
    if ($249) {
     label = 23;
    } else {
     $250 = $oO;
     $251 = ($250|0)==(5);
     if ($251) {
      label = 23;
     } else {
      $252 = $oO;
      $253 = ($252|0)==(7);
      if ($253) {
       label = 23;
      }
     }
    }
   }
   if ((label|0) == 23) {
    $254 = $2;
    $255 = (($254) + 44|0);
    $256 = HEAP32[$255>>2]|0;
    $i = $256;
    $257 = $2;
    $258 = (($257) + 52|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = $2;
    $261 = (($260) + 44|0);
    HEAP32[$261>>2] = $259;
    $262 = $i;
    $263 = $2;
    $264 = (($263) + 52|0);
    HEAP32[$264>>2] = $262;
   }
   $265 = $oO;
   $266 = ($265|0)==(1);
   if ($266) {
    label = 28;
   } else {
    $267 = $oO;
    $268 = ($267|0)==(3);
    if ($268) {
     label = 28;
    } else {
     $269 = $oO;
     $270 = ($269|0)==(4);
     if ($270) {
      label = 28;
     } else {
      $271 = $oO;
      $272 = ($271|0)==(5);
      if ($272) {
       label = 28;
      }
     }
    }
   }
   if ((label|0) == 28) {
    $273 = $2;
    $274 = (($273) + 40|0);
    $275 = HEAP32[$274>>2]|0;
    $i = $275;
    $276 = $2;
    $277 = (($276) + 48|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $2;
    $280 = (($279) + 40|0);
    HEAP32[$280>>2] = $278;
    $281 = $i;
    $282 = $2;
    $283 = (($282) + 48|0);
    HEAP32[$283>>2] = $281;
   }
   $284 = $oO;
   $285 = ($284>>>0)>=(4);
   if ($285) {
    $286 = $2;
    $287 = (($286) + 44|0);
    $288 = HEAP32[$287>>2]|0;
    $i = $288;
    $289 = $2;
    $290 = (($289) + 40|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = $2;
    $293 = (($292) + 44|0);
    HEAP32[$293>>2] = $291;
    $294 = $i;
    $295 = $2;
    $296 = (($295) + 40|0);
    HEAP32[$296>>2] = $294;
    $297 = $2;
    $298 = (($297) + 52|0);
    $299 = HEAP32[$298>>2]|0;
    $i = $299;
    $300 = $2;
    $301 = (($300) + 48|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = $2;
    $304 = (($303) + 52|0);
    HEAP32[$304>>2] = $302;
    $305 = $i;
    $306 = $2;
    $307 = (($306) + 48|0);
    HEAP32[$307>>2] = $305;
   }
   $i = 0;
   $j = 0;
   $308 = $iTile;
   HEAP32[$308>>2] = 0;
   while(1) {
    $309 = $i;
    $310 = $3;
    $311 = (($310) + 64|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = ($309>>>0)<=($312>>>0);
    if (!($313)) {
     break;
    }
    $314 = $i;
    $315 = $3;
    $316 = (($315) + 68|0);
    $317 = (($316) + ($314<<2)|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = $mbLeft;
    $320 = ($318>>>0)>=($319>>>0);
    if ($320) {
     $321 = $i;
     $322 = $3;
     $323 = (($322) + 68|0);
     $324 = (($323) + ($321<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $mbRight;
     $327 = ($325>>>0)<($326>>>0);
     if ($327) {
      $328 = $j;
      $329 = ($328>>>0)>=(4096);
      if ($329) {
       $j = 4095;
      }
      $330 = $i;
      $331 = $3;
      $332 = (($331) + 68|0);
      $333 = (($332) + ($330<<2)|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = $mbLeft;
      $336 = (($334) - ($335))|0;
      $337 = $j;
      $338 = $iTile;
      $339 = (($338) + ($337<<2)|0);
      HEAP32[$339>>2] = $336;
      $340 = $j;
      $341 = (($340) + 1)|0;
      $j = $341;
     }
    }
    $342 = $i;
    $343 = (($342) + 1)|0;
    $i = $343;
   }
   $344 = $iTile;
   $345 = HEAP32[$344>>2]|0;
   $346 = ($345|0)==(0);
   if ($346) {
    $i = 0;
    $347 = $j;
    $348 = ($347|0)==(0);
    if ($348) {
     $353 = 0;
    } else {
     $349 = $j;
     $350 = (($349) - 1)|0;
     $353 = $350;
    }
    $351 = $3;
    $352 = (($351) + 64|0);
    HEAP32[$352>>2] = $353;
    while(1) {
     $354 = $i;
     $355 = $j;
     $356 = ($354>>>0)<($355>>>0);
     if (!($356)) {
      break;
     }
     $357 = $i;
     $358 = $iTile;
     $359 = (($358) + ($357<<2)|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = $i;
     $362 = $3;
     $363 = (($362) + 68|0);
     $364 = (($363) + ($361<<2)|0);
     HEAP32[$364>>2] = $360;
     $365 = $i;
     $366 = (($365) + 1)|0;
     $i = $366;
    }
   } else {
    $i = 1;
    $367 = $3;
    $368 = (($367) + 68|0);
    HEAP32[$368>>2] = 0;
    $369 = $j;
    $370 = $3;
    $371 = (($370) + 64|0);
    HEAP32[$371>>2] = $369;
    while(1) {
     $372 = $i;
     $373 = $j;
     $374 = ($372>>>0)<=($373>>>0);
     if (!($374)) {
      break;
     }
     $375 = $i;
     $376 = (($375) - 1)|0;
     $377 = $iTile;
     $378 = (($377) + ($376<<2)|0);
     $379 = HEAP32[$378>>2]|0;
     $380 = $i;
     $381 = $3;
     $382 = (($381) + 68|0);
     $383 = (($382) + ($380<<2)|0);
     HEAP32[$383>>2] = $379;
     $384 = $i;
     $385 = (($384) + 1)|0;
     $i = $385;
    }
   }
   $386 = $oO;
   $387 = ($386|0)==(2);
   if ($387) {
    label = 58;
   } else {
    $388 = $oO;
    $389 = ($388|0)==(3);
    if ($389) {
     label = 58;
    } else {
     $390 = $oO;
     $391 = ($390|0)==(5);
     if ($391) {
      label = 58;
     } else {
      $392 = $oO;
      $393 = ($392|0)==(7);
      if ($393) {
       label = 58;
      }
     }
    }
   }
   if ((label|0) == 58) {
    $i = 0;
    while(1) {
     $394 = $i;
     $395 = $3;
     $396 = (($395) + 64|0);
     $397 = HEAP32[$396>>2]|0;
     $398 = ($394>>>0)<=($397>>>0);
     if (!($398)) {
      break;
     }
     $399 = $mbRight;
     $400 = $mbLeft;
     $401 = (($399) - ($400))|0;
     $402 = $i;
     $403 = $3;
     $404 = (($403) + 68|0);
     $405 = (($404) + ($402<<2)|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = (($401) - ($406))|0;
     $408 = $i;
     $409 = $iTile;
     $410 = (($409) + ($408<<2)|0);
     HEAP32[$410>>2] = $407;
     $411 = $i;
     $412 = (($411) + 1)|0;
     $i = $412;
    }
    $i = 1;
    $413 = $3;
    $414 = (($413) + 68|0);
    HEAP32[$414>>2] = 0;
    while(1) {
     $415 = $i;
     $416 = $3;
     $417 = (($416) + 64|0);
     $418 = HEAP32[$417>>2]|0;
     $419 = ($415>>>0)<=($418>>>0);
     if (!($419)) {
      break;
     }
     $420 = $3;
     $421 = (($420) + 64|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = $i;
     $424 = (($422) - ($423))|0;
     $425 = (($424) + 1)|0;
     $426 = $iTile;
     $427 = (($426) + ($425<<2)|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = $i;
     $430 = $3;
     $431 = (($430) + 68|0);
     $432 = (($431) + ($429<<2)|0);
     HEAP32[$432>>2] = $428;
     $433 = $i;
     $434 = (($433) + 1)|0;
     $i = $434;
    }
   }
   $i = 0;
   $j = 0;
   $435 = $iTile;
   HEAP32[$435>>2] = 0;
   while(1) {
    $436 = $i;
    $437 = $3;
    $438 = (($437) + 16452|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = ($436>>>0)<=($439>>>0);
    if (!($440)) {
     break;
    }
    $441 = $i;
    $442 = $3;
    $443 = (($442) + 16456|0);
    $444 = (($443) + ($441<<2)|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = $mbTop;
    $447 = ($445>>>0)>=($446>>>0);
    if ($447) {
     $448 = $i;
     $449 = $3;
     $450 = (($449) + 16456|0);
     $451 = (($450) + ($448<<2)|0);
     $452 = HEAP32[$451>>2]|0;
     $453 = $mbBottom;
     $454 = ($452>>>0)<($453>>>0);
     if ($454) {
      $455 = $j;
      $456 = ($455>>>0)>=(4096);
      if ($456) {
       $j = 4095;
      }
      $457 = $i;
      $458 = $3;
      $459 = (($458) + 16456|0);
      $460 = (($459) + ($457<<2)|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = $mbTop;
      $463 = (($461) - ($462))|0;
      $464 = $j;
      $465 = $iTile;
      $466 = (($465) + ($464<<2)|0);
      HEAP32[$466>>2] = $463;
      $467 = $j;
      $468 = (($467) + 1)|0;
      $j = $468;
     }
    }
    $469 = $i;
    $470 = (($469) + 1)|0;
    $i = $470;
   }
   $471 = $iTile;
   $472 = HEAP32[$471>>2]|0;
   $473 = ($472|0)==(0);
   if ($473) {
    $i = 0;
    $474 = $j;
    $475 = ($474|0)==(0);
    if ($475) {
     $480 = 0;
    } else {
     $476 = $j;
     $477 = (($476) - 1)|0;
     $480 = $477;
    }
    $478 = $3;
    $479 = (($478) + 16452|0);
    HEAP32[$479>>2] = $480;
    while(1) {
     $481 = $i;
     $482 = $j;
     $483 = ($481>>>0)<($482>>>0);
     if (!($483)) {
      break;
     }
     $484 = $i;
     $485 = $iTile;
     $486 = (($485) + ($484<<2)|0);
     $487 = HEAP32[$486>>2]|0;
     $488 = $i;
     $489 = $3;
     $490 = (($489) + 16456|0);
     $491 = (($490) + ($488<<2)|0);
     HEAP32[$491>>2] = $487;
     $492 = $i;
     $493 = (($492) + 1)|0;
     $i = $493;
    }
   } else {
    $i = 1;
    $494 = $3;
    $495 = (($494) + 16456|0);
    HEAP32[$495>>2] = 0;
    $496 = $j;
    $497 = $3;
    $498 = (($497) + 16452|0);
    HEAP32[$498>>2] = $496;
    while(1) {
     $499 = $i;
     $500 = $j;
     $501 = ($499>>>0)<=($500>>>0);
     if (!($501)) {
      break;
     }
     $502 = $i;
     $503 = (($502) - 1)|0;
     $504 = $iTile;
     $505 = (($504) + ($503<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = $i;
     $508 = $3;
     $509 = (($508) + 16456|0);
     $510 = (($509) + ($507<<2)|0);
     HEAP32[$510>>2] = $506;
     $511 = $i;
     $512 = (($511) + 1)|0;
     $i = $512;
    }
   }
   $513 = $oO;
   $514 = ($513|0)==(1);
   if ($514) {
    label = 94;
   } else {
    $515 = $oO;
    $516 = ($515|0)==(3);
    if ($516) {
     label = 94;
    } else {
     $517 = $oO;
     $518 = ($517|0)==(4);
     if ($518) {
      label = 94;
     } else {
      $519 = $oO;
      $520 = ($519|0)==(5);
      if ($520) {
       label = 94;
      }
     }
    }
   }
   if ((label|0) == 94) {
    $i = 0;
    while(1) {
     $521 = $i;
     $522 = $3;
     $523 = (($522) + 16452|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = ($521>>>0)<=($524>>>0);
     if (!($525)) {
      break;
     }
     $526 = $mbBottom;
     $527 = $mbTop;
     $528 = (($526) - ($527))|0;
     $529 = $i;
     $530 = $3;
     $531 = (($530) + 16456|0);
     $532 = (($531) + ($529<<2)|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = (($528) - ($533))|0;
     $535 = $i;
     $536 = $iTile;
     $537 = (($536) + ($535<<2)|0);
     HEAP32[$537>>2] = $534;
     $538 = $i;
     $539 = (($538) + 1)|0;
     $i = $539;
    }
    $i = 1;
    $540 = $3;
    $541 = (($540) + 16456|0);
    HEAP32[$541>>2] = 0;
    while(1) {
     $542 = $i;
     $543 = $3;
     $544 = (($543) + 16452|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = ($542>>>0)<=($545>>>0);
     if (!($546)) {
      break;
     }
     $547 = $3;
     $548 = (($547) + 16452|0);
     $549 = HEAP32[$548>>2]|0;
     $550 = $i;
     $551 = (($549) - ($550))|0;
     $552 = (($551) + 1)|0;
     $553 = $iTile;
     $554 = (($553) + ($552<<2)|0);
     $555 = HEAP32[$554>>2]|0;
     $556 = $i;
     $557 = $3;
     $558 = (($557) + 16456|0);
     $559 = (($558) + ($556<<2)|0);
     HEAP32[$559>>2] = $555;
     $560 = $i;
     $561 = (($560) + 1)|0;
     $i = $561;
    }
   }
   $562 = $oO;
   $563 = ($562>>>0)>=(4);
   if ($563) {
    $i = 0;
    while(1) {
     $564 = $i;
     $565 = $3;
     $566 = (($565) + 64|0);
     $567 = HEAP32[$566>>2]|0;
     $568 = ($564>>>0)<=($567>>>0);
     if (!($568)) {
      break;
     }
     $569 = $i;
     $570 = $3;
     $571 = (($570) + 68|0);
     $572 = (($571) + ($569<<2)|0);
     $573 = HEAP32[$572>>2]|0;
     $574 = $i;
     $575 = $iTile;
     $576 = (($575) + ($574<<2)|0);
     HEAP32[$576>>2] = $573;
     $577 = $i;
     $578 = (($577) + 1)|0;
     $i = $578;
    }
    $i = 0;
    while(1) {
     $579 = $i;
     $580 = $3;
     $581 = (($580) + 16452|0);
     $582 = HEAP32[$581>>2]|0;
     $583 = ($579>>>0)<=($582>>>0);
     if (!($583)) {
      break;
     }
     $584 = $i;
     $585 = $3;
     $586 = (($585) + 16456|0);
     $587 = (($586) + ($584<<2)|0);
     $588 = HEAP32[$587>>2]|0;
     $589 = $i;
     $590 = $3;
     $591 = (($590) + 68|0);
     $592 = (($591) + ($589<<2)|0);
     HEAP32[$592>>2] = $588;
     $593 = $i;
     $594 = (($593) + 1)|0;
     $i = $594;
    }
    $i = 0;
    while(1) {
     $595 = $i;
     $596 = $3;
     $597 = (($596) + 64|0);
     $598 = HEAP32[$597>>2]|0;
     $599 = ($595>>>0)<=($598>>>0);
     if (!($599)) {
      break;
     }
     $600 = $i;
     $601 = $iTile;
     $602 = (($601) + ($600<<2)|0);
     $603 = HEAP32[$602>>2]|0;
     $604 = $i;
     $605 = $3;
     $606 = (($605) + 16456|0);
     $607 = (($606) + ($604<<2)|0);
     HEAP32[$607>>2] = $603;
     $608 = $i;
     $609 = (($608) + 1)|0;
     $i = $609;
    }
    $610 = $3;
    $611 = (($610) + 16452|0);
    $612 = HEAP32[$611>>2]|0;
    $i = $612;
    $613 = $3;
    $614 = (($613) + 64|0);
    $615 = HEAP32[$614>>2]|0;
    $616 = $3;
    $617 = (($616) + 16452|0);
    HEAP32[$617>>2] = $615;
    $618 = $i;
    $619 = $3;
    $620 = (($619) + 64|0);
    HEAP32[$620>>2] = $618;
   }
   $621 = $iTile;
   _free($621);
   $0 = 0;
   $622 = $0;
   STACKTOP = sp;return ($622|0);
  }
 }
 $0 = -1;
 $622 = $0;
 STACKTOP = sp;return ($622|0);
}
function _isTileBoundary($pTilePos,$cTiles,$cMBs,$iPos) {
 $pTilePos = $pTilePos|0;
 $cTiles = $cTiles|0;
 $cMBs = $cMBs|0;
 $iPos = $iPos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pTilePos;
 $1 = $cTiles;
 $2 = $cMBs;
 $3 = $iPos;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = $i;
  $9 = $0;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11<<4;
  $13 = ($7|0)==($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 if ((label|0) == 4) {
 }
 $16 = $i;
 $17 = $1;
 $18 = ($16>>>0)<($17>>>0);
 if ($18) {
  $25 = 1;
  $24 = $25 ? 1 : 0;
  STACKTOP = sp;return ($24|0);
 }
 $19 = $3;
 $20 = (($19) + 15)|0;
 $21 = (($20>>>0) / 16)&-1;
 $22 = $2;
 $23 = ($21>>>0)>=($22>>>0);
 $25 = $23;
 $24 = $25 ? 1 : 0;
 STACKTOP = sp;return ($24|0);
}
function _isTileExtraction($pSC,$pParam) {
 $pSC = $pSC|0;
 $pParam = $pParam|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $pParam;
 $3 = $2;
 $4 = (($3) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $8 = (($7) + 84|0);
  $9 = (($8) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $2;
   $13 = (($12) + 32|0);
   HEAP32[$13>>2] = 1;
  }
 }
 $14 = $2;
 $15 = (($14) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(1);
 if ($17) {
  $18 = $2;
  $19 = (($18) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $22 = $2;
   $23 = (($22) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (($25) + 84|0);
   $27 = (($26) + 28|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($24|0)==($28|0);
   if ($29) {
    $30 = $2;
    $31 = (($30) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0);
    if ($33) {
     $34 = $2;
     $35 = (($34) + 24|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $1;
     $38 = (($37) + 84|0);
     $39 = (($38) + 44|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($36|0)!=($40|0);
     if ($41) {
      $0 = 0;
      $134 = $0;
      STACKTOP = sp;return ($134|0);
     }
    }
    $42 = $1;
    $43 = (($42) + 84|0);
    $44 = (($43) + 68|0);
    $45 = $1;
    $46 = (($45) + 84|0);
    $47 = (($46) + 64|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + 1)|0;
    $50 = $1;
    $51 = (($50) + 34364|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $2;
    $54 = HEAP32[$53>>2]|0;
    $55 = $1;
    $56 = (($55) + 34136|0);
    $57 = (($56) + 44|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($54) + ($58))|0;
    $60 = (_isTileBoundary($44,$49,$52,$59)|0);
    $61 = ($60|0)!=(0);
    if ($61) {
     $62 = $1;
     $63 = (($62) + 84|0);
     $64 = (($63) + 16456|0);
     $65 = $1;
     $66 = (($65) + 84|0);
     $67 = (($66) + 16452|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 1)|0;
     $70 = $1;
     $71 = (($70) + 34368|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $2;
     $74 = (($73) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $1;
     $77 = (($76) + 34136|0);
     $78 = (($77) + 40|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($75) + ($79))|0;
     $81 = (_isTileBoundary($64,$69,$72,$80)|0);
     $82 = ($81|0)!=(0);
     if ($82) {
      $83 = $1;
      $84 = (($83) + 84|0);
      $85 = (($84) + 68|0);
      $86 = $1;
      $87 = (($86) + 84|0);
      $88 = (($87) + 64|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (($89) + 1)|0;
      $91 = $1;
      $92 = (($91) + 34364|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $2;
      $95 = HEAP32[$94>>2]|0;
      $96 = $2;
      $97 = (($96) + 4|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($95) + ($98))|0;
      $100 = $1;
      $101 = (($100) + 34136|0);
      $102 = (($101) + 44|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($99) + ($103))|0;
      $105 = (_isTileBoundary($85,$90,$93,$104)|0);
      $106 = ($105|0)!=(0);
      if ($106) {
       $107 = $1;
       $108 = (($107) + 84|0);
       $109 = (($108) + 16456|0);
       $110 = $1;
       $111 = (($110) + 84|0);
       $112 = (($111) + 16452|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (($113) + 1)|0;
       $115 = $1;
       $116 = (($115) + 34368|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = $2;
       $119 = (($118) + 8|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $2;
       $122 = (($121) + 12|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = (($120) + ($123))|0;
       $125 = $1;
       $126 = (($125) + 34136|0);
       $127 = (($126) + 40|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = (($124) + ($128))|0;
       $130 = (_isTileBoundary($109,$114,$117,$129)|0);
       $131 = ($130|0)!=(0);
       $133 = $131;
      } else {
       $133 = 0;
      }
     } else {
      $133 = 0;
     }
    } else {
     $133 = 0;
    }
    $132 = $133&1;
    $0 = $132;
    $134 = $0;
    STACKTOP = sp;return ($134|0);
   }
  }
 }
 $0 = 0;
 $134 = $0;
 STACKTOP = sp;return ($134|0);
}
function _WMPhotoTranscode($pStreamIn,$pStreamOut,$pParam) {
 $pStreamIn = $pStreamIn|0;
 $pStreamOut = $pStreamOut|0;
 $pParam = $pParam|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $MBBufAlpha = 0, $SB = 0, $aDecoderParam = 0, $cColumn = 0, $cColumn2 = 0, $cOff = 0, $cOff3 = 0, $cRow = 0, $cRow1 = 0, $cUnit = 0;
 var $cfDec = 0, $cfEnc = 0, $i = 0, $iAlphaPos = 0, $j = 0, $k = 0, $l = 0, $mbBottom = 0, $mbHeight = 0, $mbLeft = 0, $mbRight = 0, $mbTop = 0, $mbWidth = 0, $oO = 0, $pContext = 0, $pFrameBuf = 0, $pFrameBufAlpha = 0, $pIOHeaderDec = 0, $pIOHeaderEnc = 0, $pMBBuf = 0;
 var $pMBInfo = 0, $pMBInfoAlpha = 0, $pSC = 0, $pSCDec = 0, $pSCEnc = 0, $pTile = 0, $pTileQPInfo = 0, $pTmp = 0, $sbDec = 0, $sbEnc = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $MBBufAlpha = sp + 216|0;
 $aDecoderParam = sp + 136|0;
 $SB = sp + 8|0;
 $1 = $pStreamIn;
 $2 = $pStreamOut;
 $3 = $pParam;
 $pFrameBuf = 0;
 $pFrameBufAlpha = 0;
 $pMBInfo = 0;
 $pMBInfoAlpha = 0;
 dest=$aDecoderParam+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $pTileQPInfo = 0;
 $4 = $3;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $oO = $6;
 $iAlphaPos = 0;
 $7 = $1;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $2;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $11 = $3;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = (_malloc(35176)|0);
    $pSCDec = $13;
    $14 = ($13|0)==(0|0);
    if ($14) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $15 = $pSCDec;
    _memset(($15|0),0,35176)|0;
    $16 = $3;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $pSCDec;
    $20 = (($19) + 84|0);
    $21 = (($20) + 60|0);
    HEAP32[$21>>2] = $18;
    $22 = $3;
    $23 = (($22) + 40|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $pSCDec;
    $26 = (($25) + 4|0);
    $27 = (($26) + 76|0);
    HEAP32[$27>>2] = $24;
    $28 = $1;
    $29 = $pSCDec;
    $30 = (($29) + 84|0);
    $31 = (($30) + 52|0);
    HEAP32[$31>>2] = $28;
    $32 = $pSCDec;
    $33 = (($32) + 4|0);
    $34 = $pSCDec;
    $35 = (($34) + 84|0);
    $36 = $pSCDec;
    $37 = (($36) + 34136|0);
    $38 = (_ReadWMIHeader($33,$35,$37)|0);
    $39 = ($38|0)!=(0);
    if ($39) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $40 = $pSCDec;
    $41 = (($40) + 84|0);
    $42 = (($41) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(2);
    if ($44) {
     $45 = $oO;
     $46 = ($45>>>0)>=(4);
     if ($46) {
      $oO = 0;
      $47 = $3;
      $48 = (($47) + 28|0);
      HEAP32[$48>>2] = 0;
     }
    }
    $49 = $pSCDec;
    $50 = (($49) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $pSCDec;
    $53 = (($52) + 34136|0);
    $54 = (($53) + 44|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($51) + ($55))|0;
    $57 = $pSCDec;
    $58 = (($57) + 34136|0);
    $59 = (($58) + 52|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($56) + ($60))|0;
    $62 = (($61) + 15)|0;
    $63 = (($62>>>0) / 16)&-1;
    $64 = $pSCDec;
    $65 = (($64) + 34364|0);
    HEAP32[$65>>2] = $63;
    $66 = $pSCDec;
    $67 = (($66) + 4|0);
    $68 = (($67) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $pSCDec;
    $71 = (($70) + 34136|0);
    $72 = (($71) + 40|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($69) + ($73))|0;
    $75 = $pSCDec;
    $76 = (($75) + 34136|0);
    $77 = (($76) + 48|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($74) + ($78))|0;
    $80 = (($79) + 15)|0;
    $81 = (($80>>>0) / 16)&-1;
    $82 = $pSCDec;
    $83 = (($82) + 34368|0);
    HEAP32[$83>>2] = $81;
    $84 = $pSCDec;
    $85 = (($84) + 84|0);
    $86 = (($85) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $pSCDec;
    $89 = (($88) + 34136|0);
    $90 = (($89) + 36|0);
    HEAP32[$90>>2] = $87;
    $91 = $pSCDec;
    $92 = (($91) + 34248|0);
    HEAP32[$92>>2] = $aDecoderParam;
    $93 = $pSCDec;
    $94 = (($93) + 84|0);
    $95 = (($94) + 44|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==(1);
    $98 = $97&1;
    $99 = $pSCDec;
    $100 = (($99) + 34248|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + 8|0);
    HEAP32[$102>>2] = $98;
    $103 = $pSCDec;
    $104 = (($103) + 34136|0);
    $105 = (($104) + 56|0);
    HEAP32[$105>>2] = 1;
    $106 = $pSCDec;
    $107 = $3;
    $108 = (_isTileExtraction($106,$107)|0);
    $109 = $3;
    $110 = (($109) + 32|0);
    HEAP32[$110>>2] = $108;
    $111 = $pSCDec;
    $112 = (($111) + 34136|0);
    $113 = (($112) + 8|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)==(1);
    if ($115) {
     $126 = 384;
    } else {
     $116 = $pSCDec;
     $117 = (($116) + 34136|0);
     $118 = (($117) + 8|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($119|0)==(2);
     if ($120) {
      $2205 = 512;
     } else {
      $121 = $pSCDec;
      $122 = (($121) + 34136|0);
      $123 = (($122) + 36|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = $124<<8;
      $2205 = $125;
     }
     $126 = $2205;
    }
    $cUnit = $126;
    $127 = $cUnit;
    $128 = ($127>>>0)>(4096);
    if ($128) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $129 = $cUnit;
    $130 = $129<<2;
    $131 = (_malloc($130)|0);
    $pMBBuf = $131;
    $132 = $pSCDec;
    $133 = (($132) + 34756|0);
    HEAP32[$133>>2] = $131;
    $134 = $pMBBuf;
    $135 = ($134|0)==(0|0);
    if ($135) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $136 = $pSCDec;
    $137 = (($136) + 34756|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + 1024|0);
    $140 = $pSCDec;
    $141 = (($140) + 34756|0);
    $142 = (($141) + 4|0);
    HEAP32[$142>>2] = $139;
    $i = 2;
    while(1) {
     $143 = $i;
     $144 = $pSCDec;
     $145 = (($144) + 34136|0);
     $146 = (($145) + 36|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($143>>>0)<($147>>>0);
     if (!($148)) {
      break;
     }
     $149 = $i;
     $150 = (($149) - 1)|0;
     $151 = $pSCDec;
     $152 = (($151) + 34756|0);
     $153 = (($152) + ($150<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $pSCDec;
     $156 = (($155) + 34136|0);
     $157 = (($156) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==(1);
     if ($159) {
      $167 = 64;
     } else {
      $160 = $pSCDec;
      $161 = (($160) + 34136|0);
      $162 = (($161) + 8|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==(2);
      $165 = $164 ? 128 : 256;
      $167 = $165;
     }
     $166 = (($154) + ($167<<2)|0);
     $168 = $i;
     $169 = $pSCDec;
     $170 = (($169) + 34756|0);
     $171 = (($170) + ($168<<2)|0);
     HEAP32[$171>>2] = $166;
     $172 = $i;
     $173 = (($172) + 1)|0;
     $i = $173;
    }
    $174 = $pSCDec;
    $175 = (($174) + 34136|0);
    $176 = (($175) + 16|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177|0)!=(0);
    do {
     if ($178) {
      ;HEAP32[$SB+0>>2]=0|0;HEAP32[$SB+4>>2]=0|0;HEAP32[$SB+8>>2]=0|0;HEAP32[$SB+12>>2]=0|0;
      $179 = $pSCDec;
      $180 = (($179) + 34136|0);
      $181 = (($180) + 36|0);
      $182 = HEAP32[$181>>2]|0;
      $iAlphaPos = $182;
      $183 = (_malloc(35176)|0);
      $184 = $pSCDec;
      $185 = (($184) + 35032|0);
      HEAP32[$185>>2] = $183;
      $186 = ($183|0)==(0|0);
      if ($186) {
       $0 = -1;
       $2204 = $0;
       STACKTOP = sp;return ($2204|0);
      }
      $187 = $pSCDec;
      $188 = (($187) + 35032|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $pSCDec;
      _memcpy(($189|0),($190|0),35176)|0;
      $191 = $pSCDec;
      $192 = (($191) + 35032|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193) + 34756|0);
      HEAP32[$194>>2] = $MBBufAlpha;
      $195 = $pSCDec;
      $196 = (($195) + 35032|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (($197) + 34136|0);
      $199 = (($198) + 8|0);
      HEAP32[$199>>2] = 0;
      $200 = $pSCDec;
      $201 = (($200) + 35032|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = (($202) + 4|0);
      $204 = (($203) + 8|0);
      HEAP32[$204>>2] = 0;
      $205 = $pSCDec;
      $206 = (($205) + 35032|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (($207) + 84|0);
      $209 = (($208) + 16|0);
      HEAP32[$209>>2] = 0;
      $210 = $pSCDec;
      $211 = (($210) + 35032|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = (($212) + 34136|0);
      $214 = (($213) + 36|0);
      HEAP32[$214>>2] = 1;
      $215 = $pSCDec;
      $216 = (($215) + 35032|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (($217) + 84|0);
      $219 = (($218) + 32|0);
      HEAP32[$219>>2] = 1;
      $220 = $pSCDec;
      $221 = (($220) + 35032|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = (($222) + 35036|0);
      HEAP32[$223>>2] = 1;
      $224 = $pSCDec;
      $225 = $pSCDec;
      $226 = (($225) + 35032|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = (($227) + 35032|0);
      HEAP32[$228>>2] = $224;
      $229 = $pSCDec;
      $230 = (($229) + 84|0);
      $231 = (($230) + 52|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = (_attach_SB($SB,$232)|0);
      $234 = ($233|0)!=(0);
      if ($234) {
       $0 = -1;
       $2204 = $0;
       STACKTOP = sp;return ($2204|0);
      }
      $235 = $pSCDec;
      $236 = (($235) + 35032|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = (($237) + 4|0);
      $239 = $pSCDec;
      $240 = (($239) + 35032|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = (($241) + 84|0);
      $243 = $pSCDec;
      $244 = (($243) + 35032|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = (($245) + 34136|0);
      (_ReadImagePlaneHeader($238,$242,$246,$SB)|0);
      (_detach_SB($SB)|0);
      $247 = $pSCDec;
      $248 = (($247) + 35032|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = (_StrDecInit($249,0)|0);
      $251 = ($250|0)!=(0);
      if (!($251)) {
       break;
      }
      $0 = -1;
      $2204 = $0;
      STACKTOP = sp;return ($2204|0);
     } else {
      $252 = $3;
      $253 = (($252) + 20|0);
      HEAP8[$253>>0] = 0;
     }
    } while(0);
    $254 = (_malloc(32807)|0);
    $pIOHeaderDec = $254;
    $255 = $pIOHeaderDec;
    $256 = ($255|0)==(0|0);
    if ($256) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $257 = $pIOHeaderDec;
    _memset(($257|0),0,32807)|0;
    $258 = $pIOHeaderDec;
    $259 = $258;
    $260 = (($259) + 16383)|0;
    $261 = $260 & -16384;
    $262 = $261;
    $263 = (($262) + 8192|0);
    $264 = $pSCDec;
    $265 = (($264) + 34272|0);
    HEAP32[$265>>2] = $263;
    $266 = $pSCDec;
    $267 = (_StrIODecInit($266,0)|0);
    $268 = ($267|0)!=(0);
    if ($268) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $269 = $pSCDec;
    $270 = (_StrDecInit($269,0)|0);
    $271 = ($270|0)!=(0);
    if ($271) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $272 = $pSCDec;
    $273 = (($272) + 34136|0);
    $274 = (($273) + 16|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)!=(0);
    do {
     if ($276) {
      $277 = $pSCDec;
      $278 = (($277) + 35032|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = (_StrDecInit($279,0)|0);
      $281 = ($280|0)!=(0);
      if (!($281)) {
       break;
      }
      $0 = -1;
      $2204 = $0;
      STACKTOP = sp;return ($2204|0);
     }
    } while(0);
    $282 = (_malloc(35176)|0);
    $pSCEnc = $282;
    $283 = ($282|0)==(0|0);
    if ($283) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $284 = $pSCEnc;
    _memset(($284|0),0,35176)|0;
    $285 = $pSCEnc;
    $286 = (($285) + 4|0);
    $287 = $pSCDec;
    $288 = (($287) + 4|0);
    dest=$286+0|0; src=$288+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $289 = $pSCEnc;
    $290 = (($289) + 84|0);
    $291 = $pSCDec;
    $292 = (($291) + 84|0);
    _memcpy(($290|0),($292|0),32868)|0;
    $293 = $pSCEnc;
    $294 = (($293) + 34136|0);
    $295 = $pSCDec;
    $296 = (($295) + 34136|0);
    dest=$294+0|0; src=$296+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $297 = $2;
    $298 = $pSCEnc;
    $299 = (($298) + 84|0);
    $300 = (($299) + 52|0);
    HEAP32[$300>>2] = $297;
    $301 = $3;
    $302 = (($301) + 16|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $pSCEnc;
    $305 = (($304) + 84|0);
    $306 = (($305) + 28|0);
    HEAP32[$306>>2] = $303;
    $307 = $pSCEnc;
    $308 = (($307) + 84|0);
    $309 = (($308) + 16|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = $pSCEnc;
    $312 = (($311) + 34136|0);
    $313 = (($312) + 8|0);
    HEAP32[$313>>2] = $310;
    $314 = $pSCEnc;
    $315 = (($314) + 84|0);
    $316 = (($315) + 16|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = ($317|0)==(0);
    if ($318) {
     $331 = 1;
    } else {
     $319 = $pSCEnc;
     $320 = (($319) + 84|0);
     $321 = (($320) + 16|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = ($322|0)==(3);
     if ($323) {
      $2206 = 3;
     } else {
      $324 = $pSCEnc;
      $325 = (($324) + 84|0);
      $326 = (($325) + 32|0);
      $327 = HEAP32[$326>>2]|0;
      $2206 = $327;
     }
     $331 = $2206;
    }
    $328 = $pSCEnc;
    $329 = (($328) + 34136|0);
    $330 = (($329) + 36|0);
    HEAP32[$330>>2] = $331;
    $332 = $3;
    $333 = (($332) + 20|0);
    $334 = HEAP8[$333>>0]|0;
    $335 = $334&255;
    $336 = ($335|0)>(0);
    $337 = $336&1;
    $338 = $pSCEnc;
    $339 = (($338) + 34136|0);
    $340 = (($339) + 16|0);
    HEAP32[$340>>2] = $337;
    $341 = $pSCEnc;
    $342 = (($341) + 34136|0);
    $343 = (($342) + 56|0);
    HEAP32[$343>>2] = 1;
    $344 = $3;
    $345 = (($344) + 24|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = ($346>>>0)>=(5);
    if ($347) {
     $348 = $3;
     $349 = (($348) + 24|0);
     HEAP32[$349>>2] = 0;
    }
    $350 = $3;
    $351 = (($350) + 24|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = $pSCEnc;
    $354 = (($353) + 84|0);
    $355 = (($354) + 44|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = ($352>>>0)>($356>>>0);
    if ($357) {
     $358 = $3;
     $359 = (($358) + 24|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = $pSCEnc;
     $362 = (($361) + 84|0);
     $363 = (($362) + 44|0);
     HEAP32[$363>>2] = $360;
    }
    $364 = $pSCEnc;
    $365 = (($364) + 35036|0);
    HEAP32[$365>>2] = 0;
    $366 = (_malloc(32807)|0);
    $pIOHeaderEnc = $366;
    $367 = $pIOHeaderEnc;
    $368 = ($367|0)==(0|0);
    if ($368) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $369 = $pIOHeaderEnc;
    _memset(($369|0),0,32807)|0;
    $370 = $pIOHeaderEnc;
    $371 = $370;
    $372 = (($371) + 16383)|0;
    $373 = $372 & -16384;
    $374 = $373;
    $375 = (($374) + 8192|0);
    $376 = $pSCEnc;
    $377 = (($376) + 34272|0);
    HEAP32[$377>>2] = $375;
    $i = 0;
    while(1) {
     $378 = $i;
     $379 = $pSCEnc;
     $380 = (($379) + 34136|0);
     $381 = (($380) + 36|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = ($378>>>0)<($382>>>0);
     if (!($383)) {
      break;
     }
     $384 = $i;
     $385 = $pSCDec;
     $386 = (($385) + 34756|0);
     $387 = (($386) + ($384<<2)|0);
     $388 = HEAP32[$387>>2]|0;
     $389 = $i;
     $390 = $pSCEnc;
     $391 = (($390) + 34500|0);
     $392 = (($391) + ($389<<2)|0);
     HEAP32[$392>>2] = $388;
     $393 = $i;
     $394 = (($393) + 1)|0;
     $i = $394;
    }
    $i = 1;
    while(1) {
     $395 = $i;
     $396 = $pSCDec;
     $397 = (($396) + 34328|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = $pSCDec;
     $400 = (($399) + 84|0);
     $401 = (($400) + 16452|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = (($402) + 1)|0;
     $404 = Math_imul($398, $403)|0;
     $405 = ($395>>>0)<($404>>>0);
     if (!($405)) {
      break;
     }
     $406 = $i;
     $407 = $pSCDec;
     $408 = (($407) + 34288|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = (($409) + ($406<<2)|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = ($411|0)==(0);
     do {
      if ($412) {
       $413 = $i;
       $414 = (($413) + 1)|0;
       $415 = $pSCDec;
       $416 = (($415) + 34328|0);
       $417 = HEAP32[$416>>2]|0;
       $418 = $pSCDec;
       $419 = (($418) + 84|0);
       $420 = (($419) + 16452|0);
       $421 = HEAP32[$420>>2]|0;
       $422 = (($421) + 1)|0;
       $423 = Math_imul($417, $422)|0;
       $424 = ($414|0)!=($423|0);
       if (!($424)) {
        break;
       }
       $425 = $i;
       $426 = (($425) + 1)|0;
       $427 = $pSCDec;
       $428 = (($427) + 34288|0);
       $429 = HEAP32[$428>>2]|0;
       $430 = (($429) + ($426<<2)|0);
       $431 = HEAP32[$430>>2]|0;
       $432 = $i;
       $433 = $pSCDec;
       $434 = (($433) + 34288|0);
       $435 = HEAP32[$434>>2]|0;
       $436 = (($435) + ($432<<2)|0);
       HEAP32[$436>>2] = $431;
      }
     } while(0);
     $437 = $i;
     $438 = $pSCDec;
     $439 = (($438) + 34288|0);
     $440 = HEAP32[$439>>2]|0;
     $441 = (($440) + ($437<<2)|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = ($442|0)!=(0);
     do {
      if ($443) {
       $444 = $i;
       $445 = $pSCDec;
       $446 = (($445) + 34288|0);
       $447 = HEAP32[$446>>2]|0;
       $448 = (($447) + ($444<<2)|0);
       $449 = HEAP32[$448>>2]|0;
       $450 = $i;
       $451 = (($450) - 1)|0;
       $452 = $pSCDec;
       $453 = (($452) + 34288|0);
       $454 = HEAP32[$453>>2]|0;
       $455 = (($454) + ($451<<2)|0);
       $456 = HEAP32[$455>>2]|0;
       $457 = ($449>>>0)<($456>>>0);
       if (!($457)) {
        break;
       }
       $458 = $3;
       $459 = (($458) + 32|0);
       HEAP32[$459>>2] = 0;
      }
     } while(0);
     $460 = $i;
     $461 = (($460) + 1)|0;
     $i = $461;
    }
    $462 = $pSCEnc;
    $463 = (($462) + 4|0);
    $464 = $pSCEnc;
    $465 = (($464) + 34136|0);
    $466 = $pSCEnc;
    $467 = (($466) + 84|0);
    $468 = $3;
    $469 = (_getROI($463,$465,$467,$468)|0);
    $470 = ($469|0)!=(0);
    if ($470) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    $471 = $3;
    $472 = HEAP32[$471>>2]|0;
    $473 = $472 >>> 4;
    $mbLeft = $473;
    $474 = $3;
    $475 = HEAP32[$474>>2]|0;
    $476 = $3;
    $477 = (($476) + 4|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = (($475) + ($478))|0;
    $480 = (($479) + 15)|0;
    $481 = $480 >>> 4;
    $mbRight = $481;
    $482 = $3;
    $483 = (($482) + 8|0);
    $484 = HEAP32[$483>>2]|0;
    $485 = $484 >>> 4;
    $mbTop = $485;
    $486 = $3;
    $487 = (($486) + 8|0);
    $488 = HEAP32[$487>>2]|0;
    $489 = $3;
    $490 = (($489) + 12|0);
    $491 = HEAP32[$490>>2]|0;
    $492 = (($488) + ($491))|0;
    $493 = (($492) + 15)|0;
    $494 = $493 >>> 4;
    $mbBottom = $494;
    $495 = $pSCDec;
    $496 = (($495) + 84|0);
    $497 = (($496) + 64|0);
    $498 = HEAP32[$497>>2]|0;
    $499 = $pSCDec;
    $500 = (($499) + 84|0);
    $501 = (($500) + 68|0);
    $502 = (($501) + ($498<<2)|0);
    $503 = HEAP32[$502>>2]|0;
    $504 = $mbLeft;
    $505 = ($503>>>0)>=($504>>>0);
    do {
     if ($505) {
      $506 = $pSCDec;
      $507 = (($506) + 84|0);
      $508 = (($507) + 64|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = $pSCDec;
      $511 = (($510) + 84|0);
      $512 = (($511) + 68|0);
      $513 = (($512) + ($509<<2)|0);
      $514 = HEAP32[$513>>2]|0;
      $515 = $mbRight;
      $516 = ($514>>>0)<=($515>>>0);
      if (!($516)) {
       break;
      }
      $517 = $pSCDec;
      $518 = (($517) + 84|0);
      $519 = (($518) + 16452|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = $pSCDec;
      $522 = (($521) + 84|0);
      $523 = (($522) + 16456|0);
      $524 = (($523) + ($520<<2)|0);
      $525 = HEAP32[$524>>2]|0;
      $526 = $mbTop;
      $527 = ($525>>>0)>=($526>>>0);
      if (!($527)) {
       break;
      }
      $528 = $pSCDec;
      $529 = (($528) + 84|0);
      $530 = (($529) + 16452|0);
      $531 = HEAP32[$530>>2]|0;
      $532 = $pSCDec;
      $533 = (($532) + 84|0);
      $534 = (($533) + 16456|0);
      $535 = (($534) + ($531<<2)|0);
      $536 = HEAP32[$535>>2]|0;
      $537 = $mbBottom;
      $538 = ($536>>>0)<=($537>>>0);
      if (!($538)) {
       break;
      }
      $539 = $3;
      $540 = (($539) + 32|0);
      HEAP32[$540>>2] = 0;
     }
    } while(0);
    $541 = $3;
    $542 = (($541) + 32|0);
    $543 = HEAP32[$542>>2]|0;
    $544 = $pSCEnc;
    $545 = (($544) + 34268|0);
    HEAP32[$545>>2] = $543;
    $546 = $mbRight;
    $547 = $mbLeft;
    $548 = (($546) - ($547))|0;
    $549 = $pSCEnc;
    $550 = (($549) + 34364|0);
    HEAP32[$550>>2] = $548;
    $mbWidth = $548;
    $551 = $mbBottom;
    $552 = $mbTop;
    $553 = (($551) - ($552))|0;
    $554 = $pSCEnc;
    $555 = (($554) + 34368|0);
    HEAP32[$555>>2] = $553;
    $mbHeight = $553;
    $556 = $oO;
    $557 = ($556>>>0)>=(4);
    if ($557) {
     $558 = $pSCEnc;
     $559 = (($558) + 4|0);
     $560 = HEAP32[$559>>2]|0;
     $i = $560;
     $561 = $pSCEnc;
     $562 = (($561) + 4|0);
     $563 = (($562) + 4|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = $pSCEnc;
     $566 = (($565) + 4|0);
     HEAP32[$566>>2] = $564;
     $567 = $i;
     $568 = $pSCEnc;
     $569 = (($568) + 4|0);
     $570 = (($569) + 4|0);
     HEAP32[$570>>2] = $567;
     $571 = $pSCEnc;
     $572 = (($571) + 34364|0);
     $573 = HEAP32[$572>>2]|0;
     $i = $573;
     $574 = $pSCEnc;
     $575 = (($574) + 34368|0);
     $576 = HEAP32[$575>>2]|0;
     $577 = $pSCEnc;
     $578 = (($577) + 34364|0);
     HEAP32[$578>>2] = $576;
     $579 = $i;
     $580 = $pSCEnc;
     $581 = (($580) + 34368|0);
     HEAP32[$581>>2] = $579;
    }
    $582 = $oO;
    $583 = ($582|0)!=(0);
    L130: do {
     if ($583) {
      $584 = $pSCEnc;
      $585 = (($584) + 34364|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = $pSCEnc;
      $588 = (($587) + 34368|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = Math_imul($586, $589)|0;
      $591 = $cUnit;
      $592 = Math_imul($590, $591)|0;
      $593 = $592<<2;
      $594 = (_malloc($593)|0);
      $pFrameBuf = $594;
      $595 = $pFrameBuf;
      $596 = ($595|0)==(0|0);
      do {
       if (!($596)) {
        $597 = $pSCEnc;
        $598 = (($597) + 34364|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = $pSCEnc;
        $601 = (($600) + 34368|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = Math_imul($599, $602)|0;
        $604 = $cUnit;
        $605 = Math_imul($603, $604)|0;
        $606 = $605<<2;
        $607 = $pSCEnc;
        $608 = (($607) + 34364|0);
        $609 = HEAP32[$608>>2]|0;
        $610 = $pSCEnc;
        $611 = (($610) + 34368|0);
        $612 = HEAP32[$611>>2]|0;
        $613 = Math_imul($609, $612)|0;
        $614 = $cUnit;
        $615 = Math_imul($613, $614)|0;
        $616 = ($606>>>0)<($615>>>0);
        if ($616) {
         break;
        }
        $617 = $pSCEnc;
        $618 = (($617) + 34364|0);
        $619 = HEAP32[$618>>2]|0;
        $620 = $pSCEnc;
        $621 = (($620) + 34368|0);
        $622 = HEAP32[$621>>2]|0;
        $623 = Math_imul($619, $622)|0;
        $624 = ($623*1160)|0;
        $625 = (_malloc($624)|0);
        $pMBInfo = $625;
        $626 = $pMBInfo;
        $627 = ($626|0)==(0|0);
        do {
         if (!($627)) {
          $628 = $pSCEnc;
          $629 = (($628) + 34364|0);
          $630 = HEAP32[$629>>2]|0;
          $631 = $pSCEnc;
          $632 = (($631) + 34368|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = Math_imul($630, $633)|0;
          $635 = ($634*1160)|0;
          $636 = $pSCEnc;
          $637 = (($636) + 34364|0);
          $638 = HEAP32[$637>>2]|0;
          $639 = $pSCEnc;
          $640 = (($639) + 34368|0);
          $641 = HEAP32[$640>>2]|0;
          $642 = Math_imul($638, $641)|0;
          $643 = ($635>>>0)<($642>>>0);
          if ($643) {
           break;
          }
          $644 = $3;
          $645 = (($644) + 20|0);
          $646 = HEAP8[$645>>0]|0;
          $647 = $646&255;
          $648 = ($647|0)>(0);
          L138: do {
           if ($648) {
            $649 = $pSCEnc;
            $650 = (($649) + 34364|0);
            $651 = HEAP32[$650>>2]|0;
            $652 = $pSCEnc;
            $653 = (($652) + 34368|0);
            $654 = HEAP32[$653>>2]|0;
            $655 = Math_imul($651, $654)|0;
            $656 = $655<<8;
            $657 = $656<<2;
            $658 = (_malloc($657)|0);
            $pFrameBufAlpha = $658;
            $659 = $pFrameBufAlpha;
            $660 = ($659|0)==(0|0);
            do {
             if (!($660)) {
              $661 = $pSCEnc;
              $662 = (($661) + 34364|0);
              $663 = HEAP32[$662>>2]|0;
              $664 = $pSCEnc;
              $665 = (($664) + 34368|0);
              $666 = HEAP32[$665>>2]|0;
              $667 = Math_imul($663, $666)|0;
              $668 = $667<<8;
              $669 = $668<<2;
              $670 = $pSCEnc;
              $671 = (($670) + 34364|0);
              $672 = HEAP32[$671>>2]|0;
              $673 = $pSCEnc;
              $674 = (($673) + 34368|0);
              $675 = HEAP32[$674>>2]|0;
              $676 = Math_imul($672, $675)|0;
              $677 = $676<<8;
              $678 = ($669>>>0)<($677>>>0);
              if ($678) {
               break;
              }
              $679 = $pSCEnc;
              $680 = (($679) + 34364|0);
              $681 = HEAP32[$680>>2]|0;
              $682 = $pSCEnc;
              $683 = (($682) + 34368|0);
              $684 = HEAP32[$683>>2]|0;
              $685 = Math_imul($681, $684)|0;
              $686 = ($685*1160)|0;
              $687 = (_malloc($686)|0);
              $pMBInfoAlpha = $687;
              $688 = $pMBInfoAlpha;
              $689 = ($688|0)==(0|0);
              do {
               if (!($689)) {
                $690 = $pSCEnc;
                $691 = (($690) + 34364|0);
                $692 = HEAP32[$691>>2]|0;
                $693 = $pSCEnc;
                $694 = (($693) + 34368|0);
                $695 = HEAP32[$694>>2]|0;
                $696 = Math_imul($692, $695)|0;
                $697 = ($696*1160)|0;
                $698 = $pSCEnc;
                $699 = (($698) + 34364|0);
                $700 = HEAP32[$699>>2]|0;
                $701 = $pSCEnc;
                $702 = (($701) + 34368|0);
                $703 = HEAP32[$702>>2]|0;
                $704 = Math_imul($700, $703)|0;
                $705 = ($697>>>0)<($704>>>0);
                if ($705) {
                 break;
                }
                break L138;
               }
              } while(0);
              $0 = -1;
              $2204 = $0;
              STACKTOP = sp;return ($2204|0);
             }
            } while(0);
            $0 = -1;
            $2204 = $0;
            STACKTOP = sp;return ($2204|0);
           }
          } while(0);
          break L130;
         }
        } while(0);
        $0 = -1;
        $2204 = $0;
        STACKTOP = sp;return ($2204|0);
       }
      } while(0);
      $0 = -1;
      $2204 = $0;
      STACKTOP = sp;return ($2204|0);
     }
    } while(0);
    $706 = $oO;
    $707 = ($706>>>0)<(4);
    do {
     if ($707) {
      $708 = $pSCEnc;
      $709 = (($708) + 4|0);
      $710 = (($709) + 64|0);
      $711 = HEAP32[$710>>2]|0;
      $712 = ($711>>>0)<(4);
      if (!($712)) {
       label = 104;
       break;
      }
      $713 = $oO;
      $714 = $pSCEnc;
      $715 = (($714) + 4|0);
      $716 = (($715) + 64|0);
      $717 = HEAP32[$716>>2]|0;
      $718 = $717 ^ $713;
      HEAP32[$716>>2] = $718;
     } else {
      label = 104;
     }
    } while(0);
    if ((label|0) == 104) {
     $719 = $oO;
     $720 = ($719>>>0)>=(4);
     do {
      if ($720) {
       $721 = $pSCEnc;
       $722 = (($721) + 4|0);
       $723 = (($722) + 64|0);
       $724 = HEAP32[$723>>2]|0;
       $725 = ($724>>>0)>=(4);
       if (!($725)) {
        label = 107;
        break;
       }
       $726 = $oO;
       $727 = $pSCEnc;
       $728 = (($727) + 4|0);
       $729 = (($728) + 64|0);
       $730 = HEAP32[$729>>2]|0;
       $731 = $730 ^ $726;
       HEAP32[$729>>2] = $731;
       $732 = $pSCEnc;
       $733 = (($732) + 4|0);
       $734 = (($733) + 64|0);
       $735 = HEAP32[$734>>2]|0;
       $736 = $735 & 1;
       $737 = $736<<1;
       $738 = $pSCEnc;
       $739 = (($738) + 4|0);
       $740 = (($739) + 64|0);
       $741 = HEAP32[$740>>2]|0;
       $742 = $741 >>> 1;
       $743 = (($737) + ($742))|0;
       $744 = $pSCEnc;
       $745 = (($744) + 4|0);
       $746 = (($745) + 64|0);
       HEAP32[$746>>2] = $743;
      } else {
       label = 107;
      }
     } while(0);
     if ((label|0) == 107) {
      $747 = $oO;
      $748 = ($747>>>0)>=(4);
      do {
       if ($748) {
        $749 = $pSCEnc;
        $750 = (($749) + 4|0);
        $751 = (($750) + 64|0);
        $752 = HEAP32[$751>>2]|0;
        $753 = ($752>>>0)<(4);
        if (!($753)) {
         label = 110;
         break;
        }
        $754 = $oO;
        $755 = $pSCEnc;
        $756 = (($755) + 4|0);
        $757 = (($756) + 64|0);
        $758 = HEAP32[$757>>2]|0;
        $759 = $758 & 1;
        $760 = $759<<1;
        $761 = $pSCEnc;
        $762 = (($761) + 4|0);
        $763 = (($762) + 64|0);
        $764 = HEAP32[$763>>2]|0;
        $765 = $764 >>> 1;
        $766 = (($760) + ($765))|0;
        $767 = $754 ^ $766;
        $768 = $pSCEnc;
        $769 = (($768) + 4|0);
        $770 = (($769) + 64|0);
        HEAP32[$770>>2] = $767;
       } else {
        label = 110;
       }
      } while(0);
      if ((label|0) == 110) {
       $771 = $oO;
       $772 = $771 & 1;
       $773 = $772<<1;
       $774 = $oO;
       $775 = $774 >>> 1;
       $776 = (($773) + ($775))|0;
       $777 = $pSCEnc;
       $778 = (($777) + 4|0);
       $779 = (($778) + 64|0);
       $780 = HEAP32[$779>>2]|0;
       $781 = $780 ^ $776;
       HEAP32[$779>>2] = $781;
      }
     }
    }
    $782 = $3;
    $783 = (($782) + 32|0);
    $784 = HEAP32[$783>>2]|0;
    $785 = ($784|0)==(1);
    L174: do {
     if ($785) {
      $786 = $pSCEnc;
      $787 = (($786) + 34272|0);
      $788 = HEAP32[$787>>2]|0;
      $789 = $pSCEnc;
      $790 = (($789) + 84|0);
      $791 = (($790) + 52|0);
      $792 = HEAP32[$791>>2]|0;
      (_attachISWrite($788,$792)|0);
      $793 = $pSCDec;
      $794 = (($793) + 34316|0);
      $795 = HEAP32[$794>>2]|0;
      $796 = $pSCEnc;
      $797 = (($796) + 34316|0);
      HEAP32[$797>>2] = $795;
      $798 = $pSCEnc;
      $799 = (($798) + 84|0);
      $800 = (($799) + 16452|0);
      $801 = HEAP32[$800>>2]|0;
      $802 = $pSCEnc;
      $803 = (($802) + 84|0);
      $804 = (($803) + 64|0);
      $805 = HEAP32[$804>>2]|0;
      $806 = (($801) + ($805))|0;
      $807 = ($806|0)==(0);
      do {
       if ($807) {
        $808 = $pSCEnc;
        $809 = (($808) + 84|0);
        $810 = (($809) + 28|0);
        $811 = HEAP32[$810>>2]|0;
        $812 = ($811|0)==(0);
        if (!($812)) {
         break;
        }
        $813 = $pSCEnc;
        $814 = (($813) + 34136|0);
        $815 = (($814) + 24|0);
        HEAP32[$815>>2] = 0;
       }
      } while(0);
      $816 = $pSCEnc;
      (_WriteWMIHeader($816)|0);
     } else {
      $817 = $oO;
      $818 = ($817|0)==(0);
      if ($818) {
       $831 = 1;
      } else {
       $819 = $pSCEnc;
       $820 = (($819) + 84|0);
       $821 = (($820) + 16452|0);
       $822 = HEAP32[$821>>2]|0;
       $823 = (($822) + 1)|0;
       $824 = $pSCEnc;
       $825 = (($824) + 84|0);
       $826 = (($825) + 64|0);
       $827 = HEAP32[$826>>2]|0;
       $828 = (($827) + 1)|0;
       $829 = Math_imul($823, $828)|0;
       $831 = $829;
      }
      $830 = ($831*596)|0;
      $832 = (_malloc($830)|0);
      $pTileQPInfo = $832;
      $833 = $pTileQPInfo;
      $834 = ($833|0)==(0|0);
      do {
       if (!($834)) {
        $835 = $oO;
        $836 = ($835|0)==(0);
        if ($836) {
         $849 = 1;
        } else {
         $837 = $pSCEnc;
         $838 = (($837) + 84|0);
         $839 = (($838) + 16452|0);
         $840 = HEAP32[$839>>2]|0;
         $841 = (($840) + 1)|0;
         $842 = $pSCEnc;
         $843 = (($842) + 84|0);
         $844 = (($843) + 64|0);
         $845 = HEAP32[$844>>2]|0;
         $846 = (($845) + 1)|0;
         $847 = Math_imul($841, $846)|0;
         $849 = $847;
        }
        $848 = ($849*596)|0;
        $850 = $oO;
        $851 = ($850|0)==(0);
        if ($851) {
         $864 = 1;
        } else {
         $852 = $pSCEnc;
         $853 = (($852) + 84|0);
         $854 = (($853) + 16452|0);
         $855 = HEAP32[$854>>2]|0;
         $856 = (($855) + 1)|0;
         $857 = $pSCEnc;
         $858 = (($857) + 84|0);
         $859 = (($858) + 64|0);
         $860 = HEAP32[$859>>2]|0;
         $861 = (($860) + 1)|0;
         $862 = Math_imul($856, $861)|0;
         $864 = $862;
        }
        $863 = ($848>>>0)<($864>>>0);
        if ($863) {
         break;
        }
        $865 = $pSCEnc;
        $866 = (_StrEncInit($865)|0);
        $867 = ($866|0)!=(0);
        if (!($867)) {
         break L174;
        }
        $0 = -1;
        $2204 = $0;
        STACKTOP = sp;return ($2204|0);
       }
      } while(0);
      $0 = -1;
      $2204 = $0;
      STACKTOP = sp;return ($2204|0);
     }
    } while(0);
    $868 = $3;
    $869 = (($868) + 20|0);
    $870 = HEAP8[$869>>0]|0;
    $871 = $870&255;
    $872 = ($871|0)>(0);
    if ($872) {
     $873 = (_malloc(35176)|0);
     $874 = $pSCEnc;
     $875 = (($874) + 35032|0);
     HEAP32[$875>>2] = $873;
     $876 = ($873|0)==(0|0);
     if ($876) {
      $0 = -1;
      $2204 = $0;
      STACKTOP = sp;return ($2204|0);
     }
     $877 = $pSCEnc;
     $878 = (($877) + 35032|0);
     $879 = HEAP32[$878>>2]|0;
     $880 = $pSCEnc;
     _memcpy(($879|0),($880|0),35176)|0;
     $881 = $pSCDec;
     $882 = (($881) + 35032|0);
     $883 = HEAP32[$882>>2]|0;
     $884 = (($883) + 34756|0);
     $885 = HEAP32[$884>>2]|0;
     $886 = $pSCEnc;
     $887 = (($886) + 35032|0);
     $888 = HEAP32[$887>>2]|0;
     $889 = (($888) + 34500|0);
     HEAP32[$889>>2] = $885;
     $890 = $pSCEnc;
     $891 = (($890) + 35032|0);
     $892 = HEAP32[$891>>2]|0;
     $893 = (($892) + 34136|0);
     $894 = (($893) + 8|0);
     HEAP32[$894>>2] = 0;
     $895 = $pSCEnc;
     $896 = (($895) + 35032|0);
     $897 = HEAP32[$896>>2]|0;
     $898 = (($897) + 4|0);
     $899 = (($898) + 8|0);
     HEAP32[$899>>2] = 0;
     $900 = $pSCEnc;
     $901 = (($900) + 35032|0);
     $902 = HEAP32[$901>>2]|0;
     $903 = (($902) + 84|0);
     $904 = (($903) + 16|0);
     HEAP32[$904>>2] = 0;
     $905 = $pSCEnc;
     $906 = (($905) + 35032|0);
     $907 = HEAP32[$906>>2]|0;
     $908 = (($907) + 34136|0);
     $909 = (($908) + 36|0);
     HEAP32[$909>>2] = 1;
     $910 = $pSCEnc;
     $911 = (($910) + 35032|0);
     $912 = HEAP32[$911>>2]|0;
     $913 = (($912) + 84|0);
     $914 = (($913) + 32|0);
     HEAP32[$914>>2] = 1;
     $915 = $pSCEnc;
     $916 = (($915) + 35032|0);
     $917 = HEAP32[$916>>2]|0;
     $918 = (($917) + 35036|0);
     HEAP32[$918>>2] = 1;
     $919 = $pSCEnc;
     $920 = $pSCEnc;
     $921 = (($920) + 35032|0);
     $922 = HEAP32[$921>>2]|0;
     $923 = (($922) + 35032|0);
     HEAP32[$923>>2] = $919;
     $924 = $pSCEnc;
     $925 = (($924) + 35032|0);
     $926 = HEAP32[$925>>2]|0;
     $927 = (($926) + 34136|0);
     $928 = $pSCDec;
     $929 = (($928) + 35032|0);
     $930 = HEAP32[$929>>2]|0;
     $931 = (($930) + 34136|0);
     dest=$927+0|0; src=$931+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $932 = $pSCEnc;
     $933 = (($932) + 34136|0);
     $934 = (($933) + 16|0);
     HEAP32[$934>>2] = 1;
     $935 = $3;
     $936 = (($935) + 32|0);
     $937 = HEAP32[$936>>2]|0;
     $938 = ($937|0)==(1);
     do {
      if ($938) {
       $939 = $pSCDec;
       $940 = (($939) + 35032|0);
       $941 = HEAP32[$940>>2]|0;
       $942 = (($941) + 34316|0);
       $943 = HEAP32[$942>>2]|0;
       $944 = $pSCEnc;
       $945 = (($944) + 35032|0);
       $946 = HEAP32[$945>>2]|0;
       $947 = (($946) + 34316|0);
       HEAP32[$947>>2] = $943;
      } else {
       $948 = $pSCEnc;
       $949 = (($948) + 35032|0);
       $950 = HEAP32[$949>>2]|0;
       $951 = (_StrEncInit($950)|0);
       $952 = ($951|0)!=(0);
       if (!($952)) {
        break;
       }
       $0 = -1;
       $2204 = $0;
       STACKTOP = sp;return ($2204|0);
      }
     } while(0);
     $953 = $pSCEnc;
     $954 = (($953) + 35032|0);
     $955 = HEAP32[$954>>2]|0;
     (_WriteImagePlaneHeader($955)|0);
    }
    $956 = $3;
    $957 = (($956) + 32|0);
    $958 = HEAP32[$957>>2]|0;
    $959 = ($958|0)==(1);
    L218: do {
     if ($959) {
      $960 = $pSCEnc;
      $961 = (($960) + 84|0);
      $962 = (($961) + 44|0);
      $963 = HEAP32[$962>>2]|0;
      $sbEnc = $963;
      $964 = $pSCDec;
      $965 = (($964) + 84|0);
      $966 = (($965) + 44|0);
      $967 = HEAP32[$966>>2]|0;
      $sbDec = $967;
      $968 = $pSCEnc;
      $969 = (($968) + 84|0);
      $970 = (($969) + 28|0);
      $971 = HEAP32[$970>>2]|0;
      $972 = ($971|0)==(0);
      do {
       if ($972) {
        label = 145;
       } else {
        $973 = $sbEnc;
        $974 = ($973|0)==(3);
        if ($974) {
         label = 145;
         break;
        }
        $975 = $sbEnc;
        $976 = ($975|0)==(2);
        if ($976) {
         $2207 = 2;
        } else {
         $977 = $sbEnc;
         $978 = ($977|0)==(1);
         $979 = $978 ? 3 : 4;
         $2207 = $979;
        }
        $980 = $2207;
       }
      } while(0);
      if ((label|0) == 145) {
       $980 = 1;
      }
      $cfEnc = $980;
      $981 = $pSCDec;
      $982 = (($981) + 84|0);
      $983 = (($982) + 28|0);
      $984 = HEAP32[$983>>2]|0;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        label = 152;
       } else {
        $986 = $sbDec;
        $987 = ($986|0)==(3);
        if ($987) {
         label = 152;
         break;
        }
        $988 = $sbDec;
        $989 = ($988|0)==(2);
        if ($989) {
         $2208 = 2;
        } else {
         $990 = $sbDec;
         $991 = ($990|0)==(1);
         $992 = $991 ? 3 : 4;
         $2208 = $992;
        }
        $993 = $2208;
       }
      } while(0);
      if ((label|0) == 152) {
       $993 = 1;
      }
      $cfDec = $993;
      $l = 0;
      $994 = $pSCEnc;
      $995 = (($994) + 84|0);
      $996 = (($995) + 16452|0);
      $997 = HEAP32[$996>>2]|0;
      $998 = (($997) + 1)|0;
      $999 = $998<<2;
      $1000 = $pSCEnc;
      $1001 = (($1000) + 84|0);
      $1002 = (($1001) + 64|0);
      $1003 = HEAP32[$1002>>2]|0;
      $1004 = (($1003) + 1)|0;
      $1005 = Math_imul($999, $1004)|0;
      $1006 = $cfEnc;
      $1007 = Math_imul($1005, $1006)|0;
      $1008 = (_malloc($1007)|0);
      $1009 = $pSCEnc;
      $1010 = (($1009) + 34288|0);
      HEAP32[$1010>>2] = $1008;
      $1011 = $pSCEnc;
      $1012 = (($1011) + 34288|0);
      $1013 = HEAP32[$1012>>2]|0;
      $1014 = ($1013|0)==(0|0);
      do {
       if (!($1014)) {
        $1015 = $cfEnc;
        $1016 = $cfDec;
        $1017 = ($1015>>>0)>($1016>>>0);
        if ($1017) {
         break;
        }
        $1018 = $cfEnc;
        $1019 = $pSCEnc;
        $1020 = (($1019) + 84|0);
        $1021 = (($1020) + 64|0);
        $1022 = HEAP32[$1021>>2]|0;
        $1023 = (($1022) + 1)|0;
        $1024 = Math_imul($1018, $1023)|0;
        $1025 = $pSCEnc;
        $1026 = (($1025) + 34328|0);
        HEAP32[$1026>>2] = $1024;
        $j = 0;
        while(1) {
         $1027 = $j;
         $1028 = $pSCDec;
         $1029 = (($1028) + 84|0);
         $1030 = (($1029) + 16452|0);
         $1031 = HEAP32[$1030>>2]|0;
         $1032 = ($1027>>>0)<=($1031>>>0);
         if (!($1032)) {
          break;
         }
         $i = 0;
         while(1) {
          $1033 = $i;
          $1034 = $pSCDec;
          $1035 = (($1034) + 84|0);
          $1036 = (($1035) + 64|0);
          $1037 = HEAP32[$1036>>2]|0;
          $1038 = ($1033>>>0)<=($1037>>>0);
          if (!($1038)) {
           break;
          }
          $1039 = $i;
          $1040 = $pSCDec;
          $1041 = (($1040) + 84|0);
          $1042 = (($1041) + 68|0);
          $1043 = (($1042) + ($1039<<2)|0);
          $1044 = HEAP32[$1043>>2]|0;
          $1045 = $mbLeft;
          $1046 = ($1044>>>0)>=($1045>>>0);
          do {
           if ($1046) {
            $1047 = $i;
            $1048 = $pSCDec;
            $1049 = (($1048) + 84|0);
            $1050 = (($1049) + 68|0);
            $1051 = (($1050) + ($1047<<2)|0);
            $1052 = HEAP32[$1051>>2]|0;
            $1053 = $mbRight;
            $1054 = ($1052>>>0)<($1053>>>0);
            if (!($1054)) {
             break;
            }
            $1055 = $j;
            $1056 = $pSCDec;
            $1057 = (($1056) + 84|0);
            $1058 = (($1057) + 16456|0);
            $1059 = (($1058) + ($1055<<2)|0);
            $1060 = HEAP32[$1059>>2]|0;
            $1061 = $mbTop;
            $1062 = ($1060>>>0)>=($1061>>>0);
            if (!($1062)) {
             break;
            }
            $1063 = $j;
            $1064 = $pSCDec;
            $1065 = (($1064) + 84|0);
            $1066 = (($1065) + 16456|0);
            $1067 = (($1066) + ($1063<<2)|0);
            $1068 = HEAP32[$1067>>2]|0;
            $1069 = $mbBottom;
            $1070 = ($1068>>>0)<($1069>>>0);
            if (!($1070)) {
             break;
            }
            $k = 0;
            while(1) {
             $1071 = $k;
             $1072 = $cfEnc;
             $1073 = ($1071>>>0)<($1072>>>0);
             if (!($1073)) {
              break;
             }
             $1074 = $j;
             $1075 = $pSCDec;
             $1076 = (($1075) + 84|0);
             $1077 = (($1076) + 64|0);
             $1078 = HEAP32[$1077>>2]|0;
             $1079 = (($1078) + 1)|0;
             $1080 = Math_imul($1074, $1079)|0;
             $1081 = $i;
             $1082 = (($1080) + ($1081))|0;
             $1083 = $cfDec;
             $1084 = Math_imul($1082, $1083)|0;
             $1085 = $k;
             $1086 = (($1084) + ($1085))|0;
             $1087 = (($1086) + 1)|0;
             $1088 = $pSCDec;
             $1089 = (($1088) + 34288|0);
             $1090 = HEAP32[$1089>>2]|0;
             $1091 = (($1090) + ($1087<<2)|0);
             $1092 = HEAP32[$1091>>2]|0;
             $1093 = $j;
             $1094 = $pSCDec;
             $1095 = (($1094) + 84|0);
             $1096 = (($1095) + 64|0);
             $1097 = HEAP32[$1096>>2]|0;
             $1098 = (($1097) + 1)|0;
             $1099 = Math_imul($1093, $1098)|0;
             $1100 = $i;
             $1101 = (($1099) + ($1100))|0;
             $1102 = $cfDec;
             $1103 = Math_imul($1101, $1102)|0;
             $1104 = $k;
             $1105 = (($1103) + ($1104))|0;
             $1106 = $pSCDec;
             $1107 = (($1106) + 34288|0);
             $1108 = HEAP32[$1107>>2]|0;
             $1109 = (($1108) + ($1105<<2)|0);
             $1110 = HEAP32[$1109>>2]|0;
             $1111 = (($1092) - ($1110))|0;
             $1112 = $l;
             $1113 = $pSCEnc;
             $1114 = (($1113) + 34288|0);
             $1115 = HEAP32[$1114>>2]|0;
             $1116 = (($1115) + ($1112<<2)|0);
             HEAP32[$1116>>2] = $1111;
             $1117 = $k;
             $1118 = (($1117) + 1)|0;
             $k = $1118;
             $1119 = $l;
             $1120 = (($1119) + 1)|0;
             $l = $1120;
            }
           }
          } while(0);
          $1121 = $i;
          $1122 = (($1121) + 1)|0;
          $i = $1122;
         }
         $1123 = $j;
         $1124 = (($1123) + 1)|0;
         $j = $1124;
        }
        $1125 = $pSCEnc;
        $1126 = (($1125) + 84|0);
        $1127 = (($1126) + 16452|0);
        $1128 = HEAP32[$1127>>2]|0;
        $1129 = $pSCEnc;
        $1130 = (($1129) + 84|0);
        $1131 = (($1130) + 64|0);
        $1132 = HEAP32[$1131>>2]|0;
        $1133 = (($1128) + ($1132))|0;
        $1134 = ($1133|0)==(0);
        do {
         if ($1134) {
          $1135 = $pSCEnc;
          $1136 = (($1135) + 84|0);
          $1137 = (($1136) + 28|0);
          $1138 = HEAP32[$1137>>2]|0;
          $1139 = ($1138|0)==(0);
          if (!($1139)) {
           label = 180;
           break;
          }
          $1140 = $pSCEnc;
          $1141 = (($1140) + 34136|0);
          $1142 = (($1141) + 24|0);
          HEAP32[$1142>>2] = 0;
          $1143 = $pSCEnc;
          $1144 = (($1143) + 34328|0);
          HEAP32[$1144>>2] = 0;
          $1145 = $pSCEnc;
          (_writeIndexTableNull($1145)|0);
         } else {
          label = 180;
         }
        } while(0);
        if ((label|0) == 180) {
         $1146 = $pSCEnc;
         (_writeIndexTable($1146)|0);
        }
        $1147 = $pSCEnc;
        $1148 = $pSCEnc;
        $1149 = (($1148) + 34272|0);
        $1150 = HEAP32[$1149>>2]|0;
        (_detachISWrite($1147,$1150)|0);
        $l = 0;
        $j = 0;
        while(1) {
         $1151 = $j;
         $1152 = $pSCDec;
         $1153 = (($1152) + 84|0);
         $1154 = (($1153) + 16452|0);
         $1155 = HEAP32[$1154>>2]|0;
         $1156 = ($1151>>>0)<=($1155>>>0);
         if (!($1156)) {
          break;
         }
         $i = 0;
         while(1) {
          $1157 = $i;
          $1158 = $pSCDec;
          $1159 = (($1158) + 84|0);
          $1160 = (($1159) + 64|0);
          $1161 = HEAP32[$1160>>2]|0;
          $1162 = ($1157>>>0)<=($1161>>>0);
          if (!($1162)) {
           break;
          }
          $1163 = $i;
          $1164 = $pSCDec;
          $1165 = (($1164) + 84|0);
          $1166 = (($1165) + 68|0);
          $1167 = (($1166) + ($1163<<2)|0);
          $1168 = HEAP32[$1167>>2]|0;
          $1169 = $mbLeft;
          $1170 = ($1168>>>0)>=($1169>>>0);
          do {
           if ($1170) {
            $1171 = $i;
            $1172 = $pSCDec;
            $1173 = (($1172) + 84|0);
            $1174 = (($1173) + 68|0);
            $1175 = (($1174) + ($1171<<2)|0);
            $1176 = HEAP32[$1175>>2]|0;
            $1177 = $mbRight;
            $1178 = ($1176>>>0)<($1177>>>0);
            if (!($1178)) {
             break;
            }
            $1179 = $j;
            $1180 = $pSCDec;
            $1181 = (($1180) + 84|0);
            $1182 = (($1181) + 16456|0);
            $1183 = (($1182) + ($1179<<2)|0);
            $1184 = HEAP32[$1183>>2]|0;
            $1185 = $mbTop;
            $1186 = ($1184>>>0)>=($1185>>>0);
            if (!($1186)) {
             break;
            }
            $1187 = $j;
            $1188 = $pSCDec;
            $1189 = (($1188) + 84|0);
            $1190 = (($1189) + 16456|0);
            $1191 = (($1190) + ($1187<<2)|0);
            $1192 = HEAP32[$1191>>2]|0;
            $1193 = $mbBottom;
            $1194 = ($1192>>>0)<($1193>>>0);
            if (!($1194)) {
             break;
            }
            $k = 0;
            while(1) {
             $1195 = $k;
             $1196 = $cfEnc;
             $1197 = ($1195>>>0)<($1196>>>0);
             if (!($1197)) {
              break;
             }
             $1198 = $pSCDec;
             $1199 = (($1198) + 84|0);
             $1200 = (($1199) + 52|0);
             $1201 = HEAP32[$1200>>2]|0;
             $1202 = (($1201) + 44|0);
             $1203 = HEAP32[$1202>>2]|0;
             $1204 = $pSCDec;
             $1205 = (($1204) + 84|0);
             $1206 = (($1205) + 52|0);
             $1207 = HEAP32[$1206>>2]|0;
             $1208 = $j;
             $1209 = $pSCDec;
             $1210 = (($1209) + 84|0);
             $1211 = (($1210) + 64|0);
             $1212 = HEAP32[$1211>>2]|0;
             $1213 = (($1212) + 1)|0;
             $1214 = Math_imul($1208, $1213)|0;
             $1215 = $i;
             $1216 = (($1214) + ($1215))|0;
             $1217 = $cfDec;
             $1218 = Math_imul($1216, $1217)|0;
             $1219 = $k;
             $1220 = (($1218) + ($1219))|0;
             $1221 = $pSCDec;
             $1222 = (($1221) + 34288|0);
             $1223 = HEAP32[$1222>>2]|0;
             $1224 = (($1223) + ($1220<<2)|0);
             $1225 = HEAP32[$1224>>2]|0;
             $1226 = $pSCDec;
             $1227 = (($1226) + 34332|0);
             $1228 = HEAP32[$1227>>2]|0;
             $1229 = (($1225) + ($1228))|0;
             (FUNCTION_TABLE_iii[$1203 & 255]($1207,$1229)|0);
             $1230 = $pSCDec;
             $1231 = (($1230) + 84|0);
             $1232 = (($1231) + 52|0);
             $1233 = HEAP32[$1232>>2]|0;
             $1234 = $pSCEnc;
             $1235 = (($1234) + 84|0);
             $1236 = (($1235) + 52|0);
             $1237 = HEAP32[$1236>>2]|0;
             $1238 = $l;
             $1239 = (($1238) + 1)|0;
             $l = $1239;
             $1240 = $pSCEnc;
             $1241 = (($1240) + 34288|0);
             $1242 = HEAP32[$1241>>2]|0;
             $1243 = (($1242) + ($1238<<2)|0);
             $1244 = HEAP32[$1243>>2]|0;
             (_copyTo($1233,$1237,$1244)|0);
             $1245 = $k;
             $1246 = (($1245) + 1)|0;
             $k = $1246;
            }
           }
          } while(0);
          $1247 = $i;
          $1248 = (($1247) + 1)|0;
          $i = $1248;
         }
         $1249 = $j;
         $1250 = (($1249) + 1)|0;
         $j = $1250;
        }
        $1251 = $pSCEnc;
        $1252 = (($1251) + 34288|0);
        $1253 = HEAP32[$1252>>2]|0;
        _free($1253);
        break L218;
       }
      } while(0);
      $0 = -1;
      $2204 = $0;
      STACKTOP = sp;return ($2204|0);
     } else {
      $1254 = $pSCEnc;
      (_writeIndexTableNull($1254)|0);
     }
    } while(0);
    $1255 = $pSCDec;
    $1256 = (($1255) + 34356|0);
    HEAP32[$1256>>2] = 0;
    L295: while(1) {
     $1257 = $pSCDec;
     $1258 = (($1257) + 34356|0);
     $1259 = HEAP32[$1258>>2]|0;
     $1260 = $mbBottom;
     $1261 = ($1259>>>0)<($1260>>>0);
     if ($1261) {
      $1262 = $3;
      $1263 = (($1262) + 32|0);
      $1264 = HEAP32[$1263>>2]|0;
      $1265 = ($1264|0)==(0);
      $2209 = $1265;
     } else {
      $2209 = 0;
     }
     if (!($2209)) {
      label = 322;
      break;
     }
     $1266 = $pSCDec;
     $1267 = (($1266) + 34360|0);
     HEAP32[$1267>>2] = 0;
     while(1) {
      $1268 = $pSCDec;
      $1269 = (($1268) + 34360|0);
      $1270 = HEAP32[$1269>>2]|0;
      $1271 = $pSCDec;
      $1272 = (($1271) + 34364|0);
      $1273 = HEAP32[$1272>>2]|0;
      $1274 = ($1270>>>0)<($1273>>>0);
      if (!($1274)) {
       break;
      }
      $1275 = $pSCDec;
      $1276 = (($1275) + 34356|0);
      $1277 = HEAP32[$1276>>2]|0;
      $cRow = $1277;
      $1278 = $pSCDec;
      $1279 = (($1278) + 34360|0);
      $1280 = HEAP32[$1279>>2]|0;
      $cColumn = $1280;
      $1281 = $pMBBuf;
      $1282 = $cUnit;
      $1283 = $1282<<2;
      _memset(($1281|0),0,($1283|0))|0;
      $1284 = $pSCDec;
      $1285 = (($1284) + 34136|0);
      $1286 = (($1285) + 16|0);
      $1287 = HEAP32[$1286>>2]|0;
      $1288 = ($1287|0)!=(0);
      if ($1288) {
       $1289 = $pSCDec;
       $1290 = (($1289) + 35032|0);
       $1291 = HEAP32[$1290>>2]|0;
       $1292 = (($1291) + 34756|0);
       $1293 = HEAP32[$1292>>2]|0;
       _memset(($1293|0),0,1024)|0;
       $1294 = $pSCDec;
       $1295 = (($1294) + 34356|0);
       $1296 = HEAP32[$1295>>2]|0;
       $1297 = $pSCDec;
       $1298 = (($1297) + 35032|0);
       $1299 = HEAP32[$1298>>2]|0;
       $1300 = (($1299) + 34356|0);
       HEAP32[$1300>>2] = $1296;
       $1301 = $pSCDec;
       $1302 = (($1301) + 34360|0);
       $1303 = HEAP32[$1302>>2]|0;
       $1304 = $pSCDec;
       $1305 = (($1304) + 35032|0);
       $1306 = HEAP32[$1305>>2]|0;
       $1307 = (($1306) + 34360|0);
       HEAP32[$1307>>2] = $1303;
      }
      $1308 = $pSCDec;
      $pSC = $1308;
      $1309 = $pSCDec;
      $1310 = (($1309) + 34136|0);
      $1311 = (($1310) + 16|0);
      $1312 = HEAP32[$1311>>2]|0;
      $1313 = ($1312|0)!=(0);
      $1314 = $1313 ? 2 : 1;
      $i = $1314;
      while(1) {
       $1315 = $i;
       $1316 = ($1315>>>0)>(0);
       if (!($1316)) {
        break;
       }
       $1317 = $pSCDec;
       $1318 = $cColumn;
       $1319 = $cRow;
       _getTilePos($1317,$1318,$1319);
       $1320 = $i;
       $1321 = ($1320|0)==(2);
       if ($1321) {
        $1322 = $pSCDec;
        $1323 = (($1322) + 34296|0);
        $1324 = HEAP32[$1323>>2]|0;
        $1325 = $pSCDec;
        $1326 = (($1325) + 35032|0);
        $1327 = HEAP32[$1326>>2]|0;
        $1328 = (($1327) + 34296|0);
        HEAP32[$1328>>2] = $1324;
        $1329 = $pSCDec;
        $1330 = (($1329) + 34292|0);
        $1331 = HEAP32[$1330>>2]|0;
        $1332 = $pSCDec;
        $1333 = (($1332) + 35032|0);
        $1334 = HEAP32[$1333>>2]|0;
        $1335 = (($1334) + 34292|0);
        HEAP32[$1335>>2] = $1331;
       }
       $1336 = $pSCDec;
       $1337 = (_readPackets($1336)|0);
       $1338 = ($1337|0)!=(0);
       if ($1338) {
        label = 213;
        break L295;
       }
       $1339 = $pSCDec;
       $1340 = (($1339) + 34296|0);
       $1341 = HEAP32[$1340>>2]|0;
       $1342 = $pSCDec;
       $1343 = (($1342) + 34336|0);
       $1344 = HEAP32[$1343>>2]|0;
       $1345 = (($1344) + (($1341*592)|0)|0);
       $pContext = $1345;
       $1346 = $pSCDec;
       $1347 = $pContext;
       $1348 = $cColumn;
       $1349 = $cRow;
       $1350 = (_DecodeMacroblockDC($1346,$1347,$1348,$1349)|0);
       $1351 = ($1350|0)!=(0);
       if ($1351) {
        label = 215;
        break L295;
       }
       $1352 = $pSCDec;
       $1353 = (($1352) + 34252|0);
       $1354 = HEAP32[$1353>>2]|0;
       $1355 = ($1354>>>0)>(1);
       if ($1355) {
        $1356 = $pSCDec;
        $1357 = $pContext;
        $1358 = $cColumn;
        $1359 = $cRow;
        $1360 = (_DecodeMacroblockLowpass($1356,$1357,$1358,$1359)|0);
        $1361 = ($1360|0)!=(0);
        if ($1361) {
         label = 218;
         break L295;
        }
       }
       $1362 = $pSCDec;
       _predDCACDec($1362);
       $1363 = $pSCDec;
       $1364 = (($1363) + 34252|0);
       $1365 = HEAP32[$1364>>2]|0;
       $1366 = ($1365>>>0)>(2);
       if ($1366) {
        $1367 = $pSCDec;
        $1368 = $pContext;
        $1369 = $cColumn;
        $1370 = $cRow;
        $1371 = (_DecodeMacroblockHighpass($1367,$1368,$1369,$1370)|0);
        $1372 = ($1371|0)!=(0);
        if ($1372) {
         label = 222;
         break L295;
        }
       }
       $1373 = $pSCDec;
       _predACDec($1373);
       $1374 = $pSCDec;
       $1375 = $pSCDec;
       $1376 = (($1375) + 32976|0);
       $1377 = $cColumn;
       $1378 = $pSCDec;
       $1379 = (($1378) + 84|0);
       $1380 = (($1379) + 16|0);
       $1381 = HEAP32[$1380>>2]|0;
       _updatePredInfo($1374,$1376,$1377,$1381);
       $1382 = $pSCDec;
       $1383 = (($1382) + 35032|0);
       $1384 = HEAP32[$1383>>2]|0;
       $pSCDec = $1384;
       $1385 = $i;
       $1386 = (($1385) + -1)|0;
       $i = $1386;
      }
      $1387 = $pSC;
      $pSCDec = $1387;
      $1388 = $pSCDec;
      $1389 = (($1388) + 34356|0);
      $1390 = HEAP32[$1389>>2]|0;
      $1391 = $mbTop;
      $1392 = ($1390>>>0)>=($1391>>>0);
      do {
       if ($1392) {
        $1393 = $pSCDec;
        $1394 = (($1393) + 34360|0);
        $1395 = HEAP32[$1394>>2]|0;
        $1396 = $mbLeft;
        $1397 = ($1395>>>0)>=($1396>>>0);
        if (!($1397)) {
         break;
        }
        $1398 = $pSCDec;
        $1399 = (($1398) + 34360|0);
        $1400 = HEAP32[$1399>>2]|0;
        $1401 = $mbRight;
        $1402 = ($1400>>>0)<($1401>>>0);
        if (!($1402)) {
         break;
        }
        $1403 = $pSCDec;
        $1404 = (($1403) + 34356|0);
        $1405 = HEAP32[$1404>>2]|0;
        $1406 = $mbTop;
        $1407 = (($1405) - ($1406))|0;
        $cRow = $1407;
        $1408 = $oO;
        $1409 = (9672 + ($1408<<2)|0);
        $1410 = HEAP32[$1409>>2]|0;
        $1411 = ($1410|0)!=(0);
        if ($1411) {
         $1412 = $mbHeight;
         $1413 = $cRow;
         $1414 = (($1412) - ($1413))|0;
         $1415 = (($1414) - 1)|0;
         $cRow = $1415;
        }
        $1416 = $pSCDec;
        $1417 = (($1416) + 34360|0);
        $1418 = HEAP32[$1417>>2]|0;
        $1419 = $mbLeft;
        $1420 = (($1418) - ($1419))|0;
        $cColumn = $1420;
        $1421 = $oO;
        $1422 = (9704 + ($1421<<2)|0);
        $1423 = HEAP32[$1422>>2]|0;
        $1424 = ($1423|0)!=(0);
        if ($1424) {
         $1425 = $mbWidth;
         $1426 = $cColumn;
         $1427 = (($1425) - ($1426))|0;
         $1428 = (($1427) - 1)|0;
         $cColumn = $1428;
        }
        $1429 = $pSCEnc;
        $1430 = (($1429) + 34304|0);
        HEAP32[$1430>>2] = 0;
        $1431 = $pSCEnc;
        $1432 = (($1431) + 34300|0);
        HEAP32[$1432>>2] = 0;
        $i = 0;
        while(1) {
         $1433 = $i;
         $1434 = $pSCEnc;
         $1435 = (($1434) + 84|0);
         $1436 = (($1435) + 16452|0);
         $1437 = HEAP32[$1436>>2]|0;
         $1438 = ($1433>>>0)<=($1437>>>0);
         if (!($1438)) {
          break;
         }
         $1439 = $i;
         $1440 = $pSCEnc;
         $1441 = (($1440) + 84|0);
         $1442 = (($1441) + 16456|0);
         $1443 = (($1442) + ($1439<<2)|0);
         $1444 = HEAP32[$1443>>2]|0;
         $1445 = $oO;
         $1446 = ($1445>>>0)<(4);
         if ($1446) {
          $1447 = $cRow;
          $1450 = $1447;
         } else {
          $1448 = $cColumn;
          $1450 = $1448;
         }
         $1449 = ($1444|0)==($1450|0);
         if ($1449) {
          label = 239;
          break;
         }
         $1456 = $i;
         $1457 = (($1456) + 1)|0;
         $i = $1457;
        }
        if ((label|0) == 239) {
         label = 0;
         $1451 = $i;
         $1452 = $pSCEnc;
         $1453 = (($1452) + 34292|0);
         HEAP32[$1453>>2] = $1451;
         $1454 = $pSCEnc;
         $1455 = (($1454) + 34304|0);
         HEAP32[$1455>>2] = 1;
        }
        $i = 0;
        while(1) {
         $1458 = $i;
         $1459 = $pSCEnc;
         $1460 = (($1459) + 84|0);
         $1461 = (($1460) + 64|0);
         $1462 = HEAP32[$1461>>2]|0;
         $1463 = ($1458>>>0)<=($1462>>>0);
         if (!($1463)) {
          break;
         }
         $1464 = $i;
         $1465 = $pSCEnc;
         $1466 = (($1465) + 84|0);
         $1467 = (($1466) + 68|0);
         $1468 = (($1467) + ($1464<<2)|0);
         $1469 = HEAP32[$1468>>2]|0;
         $1470 = $oO;
         $1471 = ($1470>>>0)<(4);
         if ($1471) {
          $1472 = $cColumn;
          $1475 = $1472;
         } else {
          $1473 = $cRow;
          $1475 = $1473;
         }
         $1474 = ($1469|0)==($1475|0);
         if ($1474) {
          label = 248;
          break;
         }
         $1481 = $i;
         $1482 = (($1481) + 1)|0;
         $i = $1482;
        }
        if ((label|0) == 248) {
         label = 0;
         $1476 = $i;
         $1477 = $pSCEnc;
         $1478 = (($1477) + 34296|0);
         HEAP32[$1478>>2] = $1476;
         $1479 = $pSCEnc;
         $1480 = (($1479) + 34300|0);
         HEAP32[$1480>>2] = 1;
        }
        $1483 = $pSCEnc;
        $1484 = (($1483) + 34300|0);
        $1485 = HEAP32[$1484>>2]|0;
        $1486 = ($1485|0)!=(0);
        do {
         if ($1486) {
          $1487 = $pSCEnc;
          $1488 = (($1487) + 34304|0);
          $1489 = HEAP32[$1488>>2]|0;
          $1490 = ($1489|0)!=(0);
          if (!($1490)) {
           break;
          }
          $1491 = $pTileQPInfo;
          $pTmp = $1491;
          $1492 = $pSCDec;
          $1493 = (($1492) + 34316|0);
          $1494 = HEAP32[$1493>>2]|0;
          $1495 = $pSCDec;
          $1496 = (($1495) + 34296|0);
          $1497 = HEAP32[$1496>>2]|0;
          $1498 = (($1494) + (($1497*240)|0)|0);
          $pTile = $1498;
          $1499 = $oO;
          $1500 = ($1499|0)!=(0);
          if ($1500) {
           $1501 = $pSCEnc;
           $1502 = (($1501) + 34292|0);
           $1503 = HEAP32[$1502>>2]|0;
           $1504 = $pSCEnc;
           $1505 = (($1504) + 84|0);
           $1506 = (($1505) + 64|0);
           $1507 = HEAP32[$1506>>2]|0;
           $1508 = (($1507) + 1)|0;
           $1509 = Math_imul($1503, $1508)|0;
           $1510 = $pSCEnc;
           $1511 = (($1510) + 34296|0);
           $1512 = HEAP32[$1511>>2]|0;
           $1513 = (($1509) + ($1512))|0;
           $1514 = $pTmp;
           $1515 = (($1514) + (($1513*596)|0)|0);
           $pTmp = $1515;
          }
          $1516 = $pTile;
          $1517 = (($1516) + 204|0);
          $1518 = HEAP8[$1517>>0]|0;
          $1519 = $pTmp;
          HEAP8[$1519>>0] = $1518;
          $i = 0;
          while(1) {
           $1520 = $i;
           $1521 = $pSCEnc;
           $1522 = (($1521) + 84|0);
           $1523 = (($1522) + 32|0);
           $1524 = HEAP32[$1523>>2]|0;
           $1525 = ($1520>>>0)<($1524>>>0);
           if (!($1525)) {
            break;
           }
           $1526 = $i;
           $1527 = $pTile;
           $1528 = (($1527) + ($1526<<2)|0);
           $1529 = HEAP32[$1528>>2]|0;
           $1530 = HEAP8[$1529>>0]|0;
           $1531 = $i;
           $1532 = $pTmp;
           $1533 = (($1532) + 1|0);
           $1534 = (($1533) + ($1531)|0);
           HEAP8[$1534>>0] = $1530;
           $1535 = $i;
           $1536 = (($1535) + 1)|0;
           $i = $1536;
          }
          $1537 = $pSCEnc;
          $1538 = (($1537) + 84|0);
          $1539 = (($1538) + 44|0);
          $1540 = HEAP32[$1539>>2]|0;
          $1541 = ($1540|0)!=(3);
          if ($1541) {
           $1542 = $pTile;
           $1543 = (($1542) + 196|0);
           $1544 = HEAP32[$1543>>2]|0;
           $1545 = $pTmp;
           $1546 = (($1545) + 20|0);
           HEAP32[$1546>>2] = $1544;
           $1547 = $pTile;
           $1548 = (($1547) + 192|0);
           $1549 = HEAP8[$1548>>0]|0;
           $1550 = $pTmp;
           $1551 = (($1550) + 24|0);
           HEAP8[$1551>>0] = $1549;
           $1552 = $pTmp;
           $1553 = (($1552) + 20|0);
           $1554 = HEAP32[$1553>>2]|0;
           $1555 = ($1554|0)==(0);
           if ($1555) {
            $j = 0;
            while(1) {
             $1556 = $j;
             $1557 = $pTmp;
             $1558 = (($1557) + 24|0);
             $1559 = HEAP8[$1558>>0]|0;
             $1560 = $1559&255;
             $1561 = ($1556>>>0)<($1560>>>0);
             if (!($1561)) {
              break;
             }
             $1562 = $j;
             $1563 = $pTile;
             $1564 = (($1563) + 205|0);
             $1565 = (($1564) + ($1562)|0);
             $1566 = HEAP8[$1565>>0]|0;
             $1567 = $j;
             $1568 = $pTmp;
             $1569 = (($1568) + 33|0);
             $1570 = (($1569) + ($1567)|0);
             HEAP8[$1570>>0] = $1566;
             $i = 0;
             while(1) {
              $1571 = $i;
              $1572 = $pSCEnc;
              $1573 = (($1572) + 84|0);
              $1574 = (($1573) + 32|0);
              $1575 = HEAP32[$1574>>2]|0;
              $1576 = ($1571>>>0)<($1575>>>0);
              if (!($1576)) {
               break;
              }
              $1577 = $j;
              $1578 = $i;
              $1579 = $pTile;
              $1580 = (($1579) + 64|0);
              $1581 = (($1580) + ($1578<<2)|0);
              $1582 = HEAP32[$1581>>2]|0;
              $1583 = (($1582) + (($1577*20)|0)|0);
              $1584 = HEAP8[$1583>>0]|0;
              $1585 = $i;
              $1586 = $j;
              $1587 = $pTmp;
              $1588 = (($1587) + 49|0);
              $1589 = (($1588) + ($1586<<4)|0);
              $1590 = (($1589) + ($1585)|0);
              HEAP8[$1590>>0] = $1584;
              $1591 = $i;
              $1592 = (($1591) + 1)|0;
              $i = $1592;
             }
             $1593 = $j;
             $1594 = (($1593) + 1)|0;
             $j = $1594;
            }
           }
           $1595 = $pSCEnc;
           $1596 = (($1595) + 84|0);
           $1597 = (($1596) + 44|0);
           $1598 = HEAP32[$1597>>2]|0;
           $1599 = ($1598|0)!=(2);
           if ($1599) {
            $1600 = $pTile;
            $1601 = (($1600) + 200|0);
            $1602 = HEAP32[$1601>>2]|0;
            $1603 = $pTmp;
            $1604 = (($1603) + 308|0);
            HEAP32[$1604>>2] = $1602;
            $1605 = $pTile;
            $1606 = (($1605) + 193|0);
            $1607 = HEAP8[$1606>>0]|0;
            $1608 = $pTmp;
            $1609 = (($1608) + 312|0);
            HEAP8[$1609>>0] = $1607;
            $1610 = $pTmp;
            $1611 = (($1610) + 308|0);
            $1612 = HEAP32[$1611>>2]|0;
            $1613 = ($1612|0)==(0);
            if ($1613) {
             $j = 0;
             while(1) {
              $1614 = $j;
              $1615 = $pTmp;
              $1616 = (($1615) + 312|0);
              $1617 = HEAP8[$1616>>0]|0;
              $1618 = $1617&255;
              $1619 = ($1614>>>0)<($1618>>>0);
              if (!($1619)) {
               break;
              }
              $1620 = $j;
              $1621 = $pTile;
              $1622 = (($1621) + 221|0);
              $1623 = (($1622) + ($1620)|0);
              $1624 = HEAP8[$1623>>0]|0;
              $1625 = $j;
              $1626 = $pTmp;
              $1627 = (($1626) + 321|0);
              $1628 = (($1627) + ($1625)|0);
              HEAP8[$1628>>0] = $1624;
              $i = 0;
              while(1) {
               $1629 = $i;
               $1630 = $pSCEnc;
               $1631 = (($1630) + 84|0);
               $1632 = (($1631) + 32|0);
               $1633 = HEAP32[$1632>>2]|0;
               $1634 = ($1629>>>0)<($1633>>>0);
               if (!($1634)) {
                break;
               }
               $1635 = $j;
               $1636 = $i;
               $1637 = $pTile;
               $1638 = (($1637) + 128|0);
               $1639 = (($1638) + ($1636<<2)|0);
               $1640 = HEAP32[$1639>>2]|0;
               $1641 = (($1640) + (($1635*20)|0)|0);
               $1642 = HEAP8[$1641>>0]|0;
               $1643 = $i;
               $1644 = $j;
               $1645 = $pTmp;
               $1646 = (($1645) + 337|0);
               $1647 = (($1646) + ($1644<<4)|0);
               $1648 = (($1647) + ($1643)|0);
               HEAP8[$1648>>0] = $1642;
               $1649 = $i;
               $1650 = (($1649) + 1)|0;
               $i = $1650;
              }
              $1651 = $j;
              $1652 = (($1651) + 1)|0;
              $j = $1652;
             }
            }
           }
          }
          $1653 = $3;
          $1654 = (($1653) + 20|0);
          $1655 = HEAP8[$1654>>0]|0;
          $1656 = $1655&255;
          $1657 = ($1656|0)>(0);
          if ($1657) {
           $1658 = $pSCDec;
           $1659 = (($1658) + 35032|0);
           $1660 = HEAP32[$1659>>2]|0;
           $1661 = (($1660) + 34316|0);
           $1662 = HEAP32[$1661>>2]|0;
           $1663 = $pSCDec;
           $1664 = (($1663) + 34296|0);
           $1665 = HEAP32[$1664>>2]|0;
           $1666 = (($1662) + (($1665*240)|0)|0);
           $pTile = $1666;
           $1667 = $pTile;
           $1668 = HEAP32[$1667>>2]|0;
           $1669 = HEAP8[$1668>>0]|0;
           $1670 = $iAlphaPos;
           $1671 = $pTmp;
           $1672 = (($1671) + 1|0);
           $1673 = (($1672) + ($1670)|0);
           HEAP8[$1673>>0] = $1669;
           $1674 = $pSCEnc;
           $1675 = (($1674) + 84|0);
           $1676 = (($1675) + 44|0);
           $1677 = HEAP32[$1676>>2]|0;
           $1678 = ($1677|0)!=(3);
           if ($1678) {
            $1679 = $pTile;
            $1680 = (($1679) + 196|0);
            $1681 = HEAP32[$1680>>2]|0;
            $1682 = $pTmp;
            $1683 = (($1682) + 28|0);
            HEAP32[$1683>>2] = $1681;
            $1684 = $pTile;
            $1685 = (($1684) + 192|0);
            $1686 = HEAP8[$1685>>0]|0;
            $1687 = $pTmp;
            $1688 = (($1687) + 32|0);
            HEAP8[$1688>>0] = $1686;
            $1689 = $pTmp;
            $1690 = (($1689) + 28|0);
            $1691 = HEAP32[$1690>>2]|0;
            $1692 = ($1691|0)==(0);
            if ($1692) {
             $j = 0;
             while(1) {
              $1693 = $j;
              $1694 = $pTmp;
              $1695 = (($1694) + 32|0);
              $1696 = HEAP8[$1695>>0]|0;
              $1697 = $1696&255;
              $1698 = ($1693>>>0)<($1697>>>0);
              if (!($1698)) {
               break;
              }
              $1699 = $j;
              $1700 = $pTile;
              $1701 = (($1700) + 64|0);
              $1702 = HEAP32[$1701>>2]|0;
              $1703 = (($1702) + (($1699*20)|0)|0);
              $1704 = HEAP8[$1703>>0]|0;
              $1705 = $iAlphaPos;
              $1706 = $j;
              $1707 = $pTmp;
              $1708 = (($1707) + 49|0);
              $1709 = (($1708) + ($1706<<4)|0);
              $1710 = (($1709) + ($1705)|0);
              HEAP8[$1710>>0] = $1704;
              $1711 = $j;
              $1712 = (($1711) + 1)|0;
              $j = $1712;
             }
            }
            $1713 = $pSCEnc;
            $1714 = (($1713) + 84|0);
            $1715 = (($1714) + 44|0);
            $1716 = HEAP32[$1715>>2]|0;
            $1717 = ($1716|0)!=(2);
            if ($1717) {
             $1718 = $pTile;
             $1719 = (($1718) + 200|0);
             $1720 = HEAP32[$1719>>2]|0;
             $1721 = $pTmp;
             $1722 = (($1721) + 316|0);
             HEAP32[$1722>>2] = $1720;
             $1723 = $pTile;
             $1724 = (($1723) + 193|0);
             $1725 = HEAP8[$1724>>0]|0;
             $1726 = $pTmp;
             $1727 = (($1726) + 320|0);
             HEAP8[$1727>>0] = $1725;
             $1728 = $pTmp;
             $1729 = (($1728) + 316|0);
             $1730 = HEAP32[$1729>>2]|0;
             $1731 = ($1730|0)==(0);
             if ($1731) {
              $j = 0;
              while(1) {
               $1732 = $j;
               $1733 = $pTmp;
               $1734 = (($1733) + 320|0);
               $1735 = HEAP8[$1734>>0]|0;
               $1736 = $1735&255;
               $1737 = ($1732>>>0)<($1736>>>0);
               if (!($1737)) {
                break;
               }
               $1738 = $j;
               $1739 = $pTile;
               $1740 = (($1739) + 128|0);
               $1741 = HEAP32[$1740>>2]|0;
               $1742 = (($1741) + (($1738*20)|0)|0);
               $1743 = HEAP8[$1742>>0]|0;
               $1744 = $iAlphaPos;
               $1745 = $j;
               $1746 = $pTmp;
               $1747 = (($1746) + 337|0);
               $1748 = (($1747) + ($1745<<4)|0);
               $1749 = (($1748) + ($1744)|0);
               HEAP8[$1749>>0] = $1743;
               $1750 = $j;
               $1751 = (($1750) + 1)|0;
               $j = $1751;
              }
             }
            }
           }
          }
         }
        } while(0);
        $1752 = $oO;
        $1753 = ($1752|0)==(0);
        if ($1753) {
         $1754 = $pSCDec;
         $1755 = (($1754) + 34360|0);
         $1756 = HEAP32[$1755>>2]|0;
         $1757 = $mbLeft;
         $1758 = (($1756) - ($1757))|0;
         $1759 = (($1758) + 1)|0;
         $1760 = $pSCEnc;
         $1761 = (($1760) + 34360|0);
         HEAP32[$1761>>2] = $1759;
         $1762 = $pSCDec;
         $1763 = (($1762) + 34356|0);
         $1764 = HEAP32[$1763>>2]|0;
         $1765 = (($1764) + 1)|0;
         $1766 = $mbTop;
         $1767 = (($1765) - ($1766))|0;
         $1768 = $pSCEnc;
         $1769 = (($1768) + 34356|0);
         HEAP32[$1769>>2] = $1767;
         $1770 = $pSCEnc;
         $1771 = (($1770) + 32976|0);
         $1772 = $pSCDec;
         $1773 = (($1772) + 32976|0);
         _memcpy(($1771|0),($1773|0),1160)|0;
         $1774 = $pSCEnc;
         $1775 = $cColumn;
         $1776 = $cRow;
         _getTilePos($1774,$1775,$1776);
         $1777 = $pSCEnc;
         $1778 = (($1777) + 34300|0);
         $1779 = HEAP32[$1778>>2]|0;
         $1780 = ($1779|0)!=(0);
         do {
          if ($1780) {
           $1781 = $pSCEnc;
           $1782 = (($1781) + 34304|0);
           $1783 = HEAP32[$1782>>2]|0;
           $1784 = ($1783|0)!=(0);
           if (!($1784)) {
            break;
           }
           $1785 = $pSCEnc;
           $1786 = $pTileQPInfo;
           _transcodeTileHeader($1785,$1786);
          }
         } while(0);
         $1787 = $pSCEnc;
         $1788 = $cColumn;
         $1789 = $cRow;
         (_encodeMB($1787,$1788,$1789)|0);
         $1790 = $3;
         $1791 = (($1790) + 20|0);
         $1792 = HEAP8[$1791>>0]|0;
         $1793 = $1792&255;
         $1794 = ($1793|0)>(0);
         if ($1794) {
          $1795 = $pSCDec;
          $1796 = (($1795) + 34360|0);
          $1797 = HEAP32[$1796>>2]|0;
          $1798 = $mbLeft;
          $1799 = (($1797) - ($1798))|0;
          $1800 = (($1799) + 1)|0;
          $1801 = $pSCEnc;
          $1802 = (($1801) + 35032|0);
          $1803 = HEAP32[$1802>>2]|0;
          $1804 = (($1803) + 34360|0);
          HEAP32[$1804>>2] = $1800;
          $1805 = $pSCDec;
          $1806 = (($1805) + 34356|0);
          $1807 = HEAP32[$1806>>2]|0;
          $1808 = (($1807) + 1)|0;
          $1809 = $mbTop;
          $1810 = (($1808) - ($1809))|0;
          $1811 = $pSCEnc;
          $1812 = (($1811) + 35032|0);
          $1813 = HEAP32[$1812>>2]|0;
          $1814 = (($1813) + 34356|0);
          HEAP32[$1814>>2] = $1810;
          $1815 = $pSCEnc;
          $1816 = (($1815) + 35032|0);
          $1817 = HEAP32[$1816>>2]|0;
          $1818 = $cColumn;
          $1819 = $cRow;
          _getTilePos($1817,$1818,$1819);
          $1820 = $pSCEnc;
          $1821 = (($1820) + 35032|0);
          $1822 = HEAP32[$1821>>2]|0;
          $1823 = (($1822) + 32976|0);
          $1824 = $pSCDec;
          $1825 = (($1824) + 35032|0);
          $1826 = HEAP32[$1825>>2]|0;
          $1827 = (($1826) + 32976|0);
          _memcpy(($1823|0),($1827|0),1160)|0;
          $1828 = $pSCEnc;
          $1829 = (($1828) + 35032|0);
          $1830 = HEAP32[$1829>>2]|0;
          $1831 = $cColumn;
          $1832 = $cRow;
          (_encodeMB($1830,$1831,$1832)|0);
         }
        } else {
         $1833 = $oO;
         $1834 = ($1833>>>0)<(4);
         if ($1834) {
          $1835 = $cRow;
          $1836 = $mbWidth;
          $1837 = Math_imul($1835, $1836)|0;
          $1838 = $cColumn;
          $1839 = (($1837) + ($1838))|0;
          $1845 = $1839;
         } else {
          $1840 = $cRow;
          $1841 = $mbHeight;
          $1842 = $cColumn;
          $1843 = Math_imul($1841, $1842)|0;
          $1844 = (($1840) + ($1843))|0;
          $1845 = $1844;
         }
         $cOff = $1845;
         $1846 = $cOff;
         $1847 = $pMBInfo;
         $1848 = (($1847) + (($1846*1160)|0)|0);
         $1849 = $pSCDec;
         $1850 = (($1849) + 32976|0);
         _memcpy(($1848|0),($1850|0),1160)|0;
         $1851 = $cOff;
         $1852 = $cUnit;
         $1853 = Math_imul($1851, $1852)|0;
         $1854 = $pFrameBuf;
         $1855 = (($1854) + ($1853<<2)|0);
         $1856 = $pMBBuf;
         $1857 = $cUnit;
         $1858 = $1857<<2;
         _memcpy(($1855|0),($1856|0),($1858|0))|0;
         $1859 = $3;
         $1860 = (($1859) + 20|0);
         $1861 = HEAP8[$1860>>0]|0;
         $1862 = $1861&255;
         $1863 = ($1862|0)>(0);
         if ($1863) {
          $1864 = $cOff;
          $1865 = $pMBInfoAlpha;
          $1866 = (($1865) + (($1864*1160)|0)|0);
          $1867 = $pSCDec;
          $1868 = (($1867) + 35032|0);
          $1869 = HEAP32[$1868>>2]|0;
          $1870 = (($1869) + 32976|0);
          _memcpy(($1866|0),($1870|0),1160)|0;
          $1871 = $cOff;
          $1872 = $1871<<8;
          $1873 = $pFrameBufAlpha;
          $1874 = (($1873) + ($1872<<2)|0);
          _memcpy(($1874|0),($MBBufAlpha|0),1024)|0;
         }
        }
       }
      } while(0);
      $1875 = $pSCDec;
      $1876 = (($1875) + 34360|0);
      $1877 = HEAP32[$1876>>2]|0;
      $1878 = (($1877) + 1)|0;
      HEAP32[$1876>>2] = $1878;
     }
     $1879 = $pSCDec;
     _advanceOneMBRow($1879);
     $1880 = $oO;
     $1881 = ($1880|0)==(0);
     if ($1881) {
      $1882 = $pSCEnc;
      _advanceOneMBRow($1882);
     }
     $1883 = $pSCDec;
     $1884 = (($1883) + 34356|0);
     $1885 = HEAP32[$1884>>2]|0;
     $1886 = (($1885) + 1)|0;
     HEAP32[$1884>>2] = $1886;
    }
    if ((label|0) == 213) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    else if ((label|0) == 215) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    else if ((label|0) == 218) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    else if ((label|0) == 222) {
     $0 = -1;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
    else if ((label|0) == 322) {
     $1887 = $oO;
     $1888 = ($1887|0)!=(0);
     if ($1888) {
      $1889 = $pSCEnc;
      $1890 = (($1889) + 34356|0);
      HEAP32[$1890>>2] = 1;
      while(1) {
       $1891 = $pSCEnc;
       $1892 = (($1891) + 34356|0);
       $1893 = HEAP32[$1892>>2]|0;
       $1894 = $pSCEnc;
       $1895 = (($1894) + 34368|0);
       $1896 = HEAP32[$1895>>2]|0;
       $1897 = ($1893>>>0)<=($1896>>>0);
       if (!($1897)) {
        break;
       }
       $1898 = $pSCEnc;
       $1899 = (($1898) + 34360|0);
       HEAP32[$1899>>2] = 1;
       while(1) {
        $1900 = $pSCEnc;
        $1901 = (($1900) + 34360|0);
        $1902 = HEAP32[$1901>>2]|0;
        $1903 = $pSCEnc;
        $1904 = (($1903) + 34364|0);
        $1905 = HEAP32[$1904>>2]|0;
        $1906 = ($1902>>>0)<=($1905>>>0);
        if (!($1906)) {
         break;
        }
        $1907 = $pSCEnc;
        $1908 = (($1907) + 34356|0);
        $1909 = HEAP32[$1908>>2]|0;
        $1910 = (($1909) - 1)|0;
        $1911 = $pSCEnc;
        $1912 = (($1911) + 34364|0);
        $1913 = HEAP32[$1912>>2]|0;
        $1914 = Math_imul($1910, $1913)|0;
        $1915 = $pSCEnc;
        $1916 = (($1915) + 34360|0);
        $1917 = HEAP32[$1916>>2]|0;
        $1918 = (($1914) + ($1917))|0;
        $1919 = (($1918) - 1)|0;
        $cOff3 = $1919;
        $i = 0;
        while(1) {
         $1920 = $i;
         $1921 = $pSCEnc;
         $1922 = (($1921) + 34136|0);
         $1923 = (($1922) + 8|0);
         $1924 = HEAP32[$1923>>2]|0;
         $1925 = ($1924|0)==(1);
         do {
          if ($1925) {
           label = 330;
          } else {
           $1926 = $pSCEnc;
           $1927 = (($1926) + 34136|0);
           $1928 = (($1927) + 8|0);
           $1929 = HEAP32[$1928>>2]|0;
           $1930 = ($1929|0)==(2);
           if ($1930) {
            label = 330;
            break;
           }
           $1931 = $pSCEnc;
           $1932 = (($1931) + 34136|0);
           $1933 = (($1932) + 36|0);
           $1934 = HEAP32[$1933>>2]|0;
           $1936 = $1934;
          }
         } while(0);
         if ((label|0) == 330) {
          label = 0;
          $1936 = 1;
         }
         $1935 = ($1920>>>0)<($1936>>>0);
         if (!($1935)) {
          break;
         }
         $1937 = $i;
         $1938 = $cOff3;
         $1939 = $pMBInfo;
         $1940 = (($1939) + (($1938*1160)|0)|0);
         $1941 = (($1940) + ($1937<<6)|0);
         $1942 = $i;
         $1943 = $pSCEnc;
         $1944 = (($1943) + 32976|0);
         $1945 = (($1944) + ($1942<<6)|0);
         $1946 = $oO;
         _transformDCBlock($1941,$1945,$1946);
         $1947 = $pFrameBuf;
         $1948 = $cOff3;
         $1949 = $cUnit;
         $1950 = Math_imul($1948, $1949)|0;
         $1951 = (($1947) + ($1950<<2)|0);
         $1952 = $i;
         $1953 = $1952<<8;
         $1954 = (($1951) + ($1953<<2)|0);
         $1955 = $pMBBuf;
         $1956 = $i;
         $1957 = $1956<<8;
         $1958 = (($1955) + ($1957<<2)|0);
         $1959 = $oO;
         _transformACBlocks($1954,$1958,$1959);
         $1960 = $i;
         $1961 = (($1960) + 1)|0;
         $i = $1961;
        }
        $1962 = $pSCEnc;
        $1963 = (($1962) + 84|0);
        $1964 = (($1963) + 16|0);
        $1965 = HEAP32[$1964>>2]|0;
        $1966 = ($1965|0)==(1);
        if ($1966) {
         $i = 0;
         while(1) {
          $1967 = $i;
          $1968 = ($1967>>>0)<(2);
          if (!($1968)) {
           break;
          }
          $1969 = $i;
          $1970 = (($1969) + 1)|0;
          $1971 = $cOff3;
          $1972 = $pMBInfo;
          $1973 = (($1972) + (($1971*1160)|0)|0);
          $1974 = (($1973) + ($1970<<6)|0);
          $1975 = $i;
          $1976 = (($1975) + 1)|0;
          $1977 = $pSCEnc;
          $1978 = (($1977) + 32976|0);
          $1979 = (($1978) + ($1976<<6)|0);
          $1980 = $oO;
          _transformDCBlock420($1974,$1979,$1980);
          $1981 = $pFrameBuf;
          $1982 = $cOff3;
          $1983 = $cUnit;
          $1984 = Math_imul($1982, $1983)|0;
          $1985 = (($1981) + ($1984<<2)|0);
          $1986 = (($1985) + 1024|0);
          $1987 = $i;
          $1988 = $1987<<6;
          $1989 = (($1986) + ($1988<<2)|0);
          $1990 = $pMBBuf;
          $1991 = (($1990) + 1024|0);
          $1992 = $i;
          $1993 = $1992<<6;
          $1994 = (($1991) + ($1993<<2)|0);
          $1995 = $oO;
          _transformACBlocks420($1989,$1994,$1995);
          $1996 = $i;
          $1997 = (($1996) + 1)|0;
          $i = $1997;
         }
        } else {
         $1998 = $pSCEnc;
         $1999 = (($1998) + 84|0);
         $2000 = (($1999) + 16|0);
         $2001 = HEAP32[$2000>>2]|0;
         $2002 = ($2001|0)==(2);
         if ($2002) {
          $i = 0;
          while(1) {
           $2003 = $i;
           $2004 = ($2003>>>0)<(2);
           if (!($2004)) {
            break;
           }
           $2005 = $i;
           $2006 = (($2005) + 1)|0;
           $2007 = $cOff3;
           $2008 = $pMBInfo;
           $2009 = (($2008) + (($2007*1160)|0)|0);
           $2010 = (($2009) + ($2006<<6)|0);
           $2011 = $i;
           $2012 = (($2011) + 1)|0;
           $2013 = $pSCEnc;
           $2014 = (($2013) + 32976|0);
           $2015 = (($2014) + ($2012<<6)|0);
           $2016 = $oO;
           _transformDCBlock422($2010,$2015,$2016);
           $2017 = $pFrameBuf;
           $2018 = $cOff3;
           $2019 = $cUnit;
           $2020 = Math_imul($2018, $2019)|0;
           $2021 = (($2017) + ($2020<<2)|0);
           $2022 = (($2021) + 1024|0);
           $2023 = $i;
           $2024 = $2023<<7;
           $2025 = (($2022) + ($2024<<2)|0);
           $2026 = $pMBBuf;
           $2027 = (($2026) + 1024|0);
           $2028 = $i;
           $2029 = $2028<<7;
           $2030 = (($2027) + ($2029<<2)|0);
           $2031 = $oO;
           _transformACBlocks422($2025,$2030,$2031);
           $2032 = $i;
           $2033 = (($2032) + 1)|0;
           $i = $2033;
          }
         }
        }
        $2034 = $cOff3;
        $2035 = $pMBInfo;
        $2036 = (($2035) + (($2034*1160)|0)|0);
        $2037 = (($2036) + 1156|0);
        $2038 = HEAP8[$2037>>0]|0;
        $2039 = $pSCEnc;
        $2040 = (($2039) + 32976|0);
        $2041 = (($2040) + 1156|0);
        HEAP8[$2041>>0] = $2038;
        $2042 = $cOff3;
        $2043 = $pMBInfo;
        $2044 = (($2043) + (($2042*1160)|0)|0);
        $2045 = (($2044) + 1157|0);
        $2046 = HEAP8[$2045>>0]|0;
        $2047 = $pSCEnc;
        $2048 = (($2047) + 32976|0);
        $2049 = (($2048) + 1157|0);
        HEAP8[$2049>>0] = $2046;
        $2050 = $pSCEnc;
        $2051 = (($2050) + 34356|0);
        $2052 = HEAP32[$2051>>2]|0;
        $2053 = (($2052) - 1)|0;
        $cRow1 = $2053;
        $2054 = $pSCEnc;
        $2055 = (($2054) + 34360|0);
        $2056 = HEAP32[$2055>>2]|0;
        $2057 = (($2056) - 1)|0;
        $cColumn2 = $2057;
        $2058 = $pSCEnc;
        $2059 = $cColumn2;
        $2060 = $cRow1;
        _getTilePos($2058,$2059,$2060);
        $2061 = $pSCEnc;
        $2062 = (($2061) + 34300|0);
        $2063 = HEAP32[$2062>>2]|0;
        $2064 = ($2063|0)!=(0);
        do {
         if ($2064) {
          $2065 = $pSCEnc;
          $2066 = (($2065) + 34304|0);
          $2067 = HEAP32[$2066>>2]|0;
          $2068 = ($2067|0)!=(0);
          if (!($2068)) {
           break;
          }
          $2069 = $pSCEnc;
          $2070 = $pTileQPInfo;
          $2071 = $pSCEnc;
          $2072 = (($2071) + 34292|0);
          $2073 = HEAP32[$2072>>2]|0;
          $2074 = $pSCEnc;
          $2075 = (($2074) + 84|0);
          $2076 = (($2075) + 64|0);
          $2077 = HEAP32[$2076>>2]|0;
          $2078 = (($2077) + 1)|0;
          $2079 = Math_imul($2073, $2078)|0;
          $2080 = (($2070) + (($2079*596)|0)|0);
          $2081 = $pSCEnc;
          $2082 = (($2081) + 34296|0);
          $2083 = HEAP32[$2082>>2]|0;
          $2084 = (($2080) + (($2083*596)|0)|0);
          _transcodeTileHeader($2069,$2084);
         }
        } while(0);
        $2085 = $pSCEnc;
        $2086 = $cColumn2;
        $2087 = $cRow1;
        (_encodeMB($2085,$2086,$2087)|0);
        $2088 = $3;
        $2089 = (($2088) + 20|0);
        $2090 = HEAP8[$2089>>0]|0;
        $2091 = $2090&255;
        $2092 = ($2091|0)>(0);
        if ($2092) {
         $2093 = $pSCEnc;
         $2094 = (($2093) + 34360|0);
         $2095 = HEAP32[$2094>>2]|0;
         $2096 = $pSCEnc;
         $2097 = (($2096) + 35032|0);
         $2098 = HEAP32[$2097>>2]|0;
         $2099 = (($2098) + 34360|0);
         HEAP32[$2099>>2] = $2095;
         $2100 = $pSCEnc;
         $2101 = (($2100) + 34356|0);
         $2102 = HEAP32[$2101>>2]|0;
         $2103 = $pSCEnc;
         $2104 = (($2103) + 35032|0);
         $2105 = HEAP32[$2104>>2]|0;
         $2106 = (($2105) + 34356|0);
         HEAP32[$2106>>2] = $2102;
         $2107 = $pSCEnc;
         $2108 = (($2107) + 35032|0);
         $2109 = HEAP32[$2108>>2]|0;
         $2110 = $cColumn2;
         $2111 = $cRow1;
         _getTilePos($2109,$2110,$2111);
         $2112 = $pSCEnc;
         $2113 = (($2112) + 35032|0);
         $2114 = HEAP32[$2113>>2]|0;
         $2115 = (($2114) + 32976|0);
         $2116 = $pSCDec;
         $2117 = (($2116) + 35032|0);
         $2118 = HEAP32[$2117>>2]|0;
         $2119 = (($2118) + 32976|0);
         _memcpy(($2115|0),($2119|0),1160)|0;
         $2120 = $cOff3;
         $2121 = $pMBInfoAlpha;
         $2122 = (($2121) + (($2120*1160)|0)|0);
         $2123 = $pSCEnc;
         $2124 = (($2123) + 35032|0);
         $2125 = HEAP32[$2124>>2]|0;
         $2126 = (($2125) + 32976|0);
         $2127 = $oO;
         _transformDCBlock($2122,$2126,$2127);
         $2128 = $pFrameBufAlpha;
         $2129 = $cOff3;
         $2130 = $2129<<8;
         $2131 = (($2128) + ($2130<<2)|0);
         $2132 = $oO;
         _transformACBlocks($2131,$MBBufAlpha,$2132);
         $2133 = $cOff3;
         $2134 = $pMBInfoAlpha;
         $2135 = (($2134) + (($2133*1160)|0)|0);
         $2136 = (($2135) + 1156|0);
         $2137 = HEAP8[$2136>>0]|0;
         $2138 = $pSCEnc;
         $2139 = (($2138) + 35032|0);
         $2140 = HEAP32[$2139>>2]|0;
         $2141 = (($2140) + 32976|0);
         $2142 = (($2141) + 1156|0);
         HEAP8[$2142>>0] = $2137;
         $2143 = $cOff3;
         $2144 = $pMBInfoAlpha;
         $2145 = (($2144) + (($2143*1160)|0)|0);
         $2146 = (($2145) + 1157|0);
         $2147 = HEAP8[$2146>>0]|0;
         $2148 = $pSCEnc;
         $2149 = (($2148) + 35032|0);
         $2150 = HEAP32[$2149>>2]|0;
         $2151 = (($2150) + 32976|0);
         $2152 = (($2151) + 1157|0);
         HEAP8[$2152>>0] = $2147;
         $2153 = $pSCEnc;
         $2154 = (($2153) + 35032|0);
         $2155 = HEAP32[$2154>>2]|0;
         $2156 = $cColumn2;
         $2157 = $cRow1;
         (_encodeMB($2155,$2156,$2157)|0);
        }
        $2158 = $pSCEnc;
        $2159 = (($2158) + 34360|0);
        $2160 = HEAP32[$2159>>2]|0;
        $2161 = (($2160) + 1)|0;
        HEAP32[$2159>>2] = $2161;
       }
       $2162 = $pSCEnc;
       _advanceOneMBRow($2162);
       $2163 = $pSCEnc;
       $2164 = (($2163) + 34356|0);
       $2165 = HEAP32[$2164>>2]|0;
       $2166 = (($2165) + 1)|0;
       HEAP32[$2164>>2] = $2166;
      }
     }
     $2167 = $pMBBuf;
     _free($2167);
     $2168 = $oO;
     $2169 = ($2168|0)!=(0);
     if ($2169) {
      $2170 = $pFrameBuf;
      _free($2170);
      $2171 = $pMBInfo;
      _free($2171);
      $2172 = $3;
      $2173 = (($2172) + 20|0);
      $2174 = HEAP8[$2173>>0]|0;
      $2175 = $2174&255;
      $2176 = ($2175|0)>(0);
      if ($2176) {
       $2177 = $pFrameBufAlpha;
       _free($2177);
       $2178 = $pMBInfoAlpha;
       _free($2178);
      }
     }
     $2179 = $pSCDec;
     _freePredInfo($2179);
     $2180 = $pSCDec;
     _freeTileInfo($2180);
     $2181 = $pSCDec;
     (_StrIODecTerm($2181)|0);
     $2182 = $pSCDec;
     _FreeCodingContextDec($2182);
     $2183 = $pSCDec;
     $2184 = (($2183) + 34136|0);
     $2185 = (($2184) + 16|0);
     $2186 = HEAP32[$2185>>2]|0;
     $2187 = ($2186|0)!=(0);
     if ($2187) {
      $2188 = $pSCDec;
      $2189 = (($2188) + 35032|0);
      $2190 = HEAP32[$2189>>2]|0;
      _free($2190);
     }
     $2191 = $pSCDec;
     _free($2191);
     $2192 = $pIOHeaderDec;
     _free($2192);
     $2193 = $3;
     $2194 = (($2193) + 32|0);
     $2195 = HEAP32[$2194>>2]|0;
     $2196 = ($2195|0)==(0);
     if ($2196) {
      $2197 = $pSCEnc;
      _freePredInfo($2197);
      $2198 = $pSCEnc;
      _freeTileInfo($2198);
      $2199 = $pSCEnc;
      (_StrIOEncTerm($2199)|0);
      $2200 = $pTileQPInfo;
      _free($2200);
      $2201 = $pSCEnc;
      _FreeCodingContextEnc($2201);
     }
     $2202 = $pSCEnc;
     _free($2202);
     $2203 = $pIOHeaderEnc;
     _free($2203);
     $0 = 0;
     $2204 = $0;
     STACKTOP = sp;return ($2204|0);
    }
   }
  }
 }
 $0 = -1;
 $2204 = $0;
 STACKTOP = sp;return ($2204|0);
}
function _Clean($pAdHuff) {
 $pAdHuff = $pAdHuff|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pAdHuff;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
 } else {
  $3 = $0;
  _free($3);
 }
 STACKTOP = sp;return;
}
function _Allocate($iNSymbols,$cm) {
 $iNSymbols = $iNSymbols|0;
 $cm = $cm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pAdHuff = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $iNSymbols;
 $2 = $cm;
 $3 = (_malloc(44)|0);
 $pAdHuff = $3;
 $4 = $2;
 $2 = $4;
 $5 = $pAdHuff;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $7 = $1;
 $8 = ($7|0)>(255);
 if (!($8)) {
  $9 = $1;
  $10 = ($9|0)<=(0);
  if (!($10)) {
   $11 = $pAdHuff;
   dest=$11+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $12 = $1;
   $13 = $pAdHuff;
   HEAP32[$13>>2] = $12;
   $14 = $pAdHuff;
   $15 = (($14) + 8|0);
   HEAP32[$15>>2] = 0;
   $16 = $pAdHuff;
   $17 = (($16) + 40|0);
   HEAP32[$17>>2] = 0;
   $18 = $pAdHuff;
   $19 = (($18) + 36|0);
   HEAP32[$19>>2] = 0;
   $20 = $pAdHuff;
   $21 = (($20) + 28|0);
   HEAP32[$21>>2] = 0;
   $22 = $pAdHuff;
   $0 = $22;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 }
 $23 = $pAdHuff;
 _Clean($23);
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _AdaptDiscriminant($pAdHuff) {
 $pAdHuff = $pAdHuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bChange = 0, $dH = 0, $dL = 0, $iSym = 0, $pCodes = 0, $pDelta = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pAdHuff;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $iSym = $2;
 $pDelta = 0;
 $bChange = 0;
 $3 = $0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $7 = $0;
  $8 = (($7) + 24|0);
  HEAP32[$8>>2] = 1;
  $9 = $0;
  $10 = (($9) + 32|0);
  HEAP32[$10>>2] = 0;
  $11 = $0;
  $12 = (($11) + 28|0);
  HEAP32[$12>>2] = 0;
  $13 = $iSym;
  $14 = (9896 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = (($16) + 16|0);
  HEAP32[$17>>2] = $15;
 }
 $18 = $0;
 $19 = (($18) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $dH = $20;
 $dL = $20;
 $21 = $iSym;
 $22 = (9896 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $0;
  $26 = (($25) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $dH = $27;
 }
 $28 = $dL;
 $29 = $0;
 $30 = (($29) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)<($31|0);
 if ($32) {
  $33 = $0;
  $34 = (($33) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + -1)|0;
  HEAP32[$34>>2] = $36;
  $bChange = 1;
 } else {
  $37 = $dH;
  $38 = $0;
  $39 = (($38) + 36|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)>($40|0);
  if ($41) {
   $42 = $0;
   $43 = (($42) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + 1)|0;
   HEAP32[$43>>2] = $45;
   $bChange = 1;
  }
 }
 $46 = $bChange;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $0;
  $49 = (($48) + 28|0);
  HEAP32[$49>>2] = 0;
  $50 = $0;
  $51 = (($50) + 32|0);
  HEAP32[$51>>2] = 0;
 }
 $52 = $0;
 $53 = (($52) + 28|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)<(-64);
 if ($55) {
  $56 = $0;
  $57 = (($56) + 28|0);
  HEAP32[$57>>2] = -64;
 } else {
  $58 = $0;
  $59 = (($58) + 28|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)>(64);
  if ($61) {
   $62 = $0;
   $63 = (($62) + 28|0);
   HEAP32[$63>>2] = 64;
  }
 }
 $64 = $0;
 $65 = (($64) + 32|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)<(-64);
 if ($67) {
  $68 = $0;
  $69 = (($68) + 32|0);
  HEAP32[$69>>2] = -64;
 } else {
  $70 = $0;
  $71 = (($70) + 32|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)>(64);
  if ($73) {
   $74 = $0;
   $75 = (($74) + 32|0);
   HEAP32[$75>>2] = 64;
  }
 }
 $76 = $0;
 $77 = (($76) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $t = $78;
 $79 = $t;
 $80 = ($79|0)>=(0);
 if (!($80)) {
  ___assert_fail((9952|0),(9960|0),458,(9984|0));
  // unreachable;
 }
 $81 = $t;
 $82 = $iSym;
 $83 = (9840 + ($82<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($81|0)<($84|0);
 if (!($85)) {
  ___assert_fail((10008|0),(9960|0),459,(9984|0));
  // unreachable;
 }
 $86 = $t;
 $87 = ($86|0)==(0);
 $88 = $87 ? -2147483648 : -8;
 $89 = $0;
 $90 = (($89) + 40|0);
 HEAP32[$90>>2] = $88;
 $91 = $t;
 $92 = $iSym;
 $93 = (9840 + ($92<<2)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) - 1)|0;
 $96 = ($91|0)==($95|0);
 $97 = $96 ? 1073741824 : 8;
 $98 = $0;
 $99 = (($98) + 36|0);
 HEAP32[$99>>2] = $97;
 $100 = $iSym;
 switch ($100|0) {
 case 5:  {
  $103 = $iSym;
  $104 = $103<<1;
  $105 = (($104) + 1)|0;
  $106 = $t;
  $107 = Math_imul($105, $106)|0;
  $108 = (10152 + ($107<<2)|0);
  $pCodes = $108;
  $pDelta = 10240;
  $109 = $t;
  $110 = (10264 + (($109*84)|0)|0);
  $111 = $0;
  $112 = (($111) + 20|0);
  HEAP32[$112>>2] = $110;
  break;
 }
 case 6:  {
  $113 = $iSym;
  $114 = $113<<1;
  $115 = (($114) + 1)|0;
  $116 = $t;
  $117 = Math_imul($115, $116)|0;
  $118 = (10432 + ($117<<2)|0);
  $pCodes = $118;
  $119 = $iSym;
  $120 = $t;
  $121 = $t;
  $122 = (($121) + 1)|0;
  $123 = $iSym;
  $124 = (9840 + ($123<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($122|0)==($125|0);
  $127 = $126&1;
  $128 = (($120) - ($127))|0;
  $129 = Math_imul($119, $128)|0;
  $130 = (10640 + ($129<<2)|0);
  $131 = $0;
  $132 = (($131) + 12|0);
  HEAP32[$132>>2] = $130;
  $133 = $t;
  $134 = (($133) - 1)|0;
  $135 = $t;
  $136 = ($135|0)==(0);
  $137 = $136&1;
  $138 = (($134) + ($137))|0;
  $139 = $iSym;
  $140 = Math_imul($138, $139)|0;
  $141 = (10640 + ($140<<2)|0);
  $pDelta = $141;
  $142 = $t;
  $143 = (10712 + (($142*88)|0)|0);
  $144 = $0;
  $145 = (($144) + 20|0);
  HEAP32[$145>>2] = $143;
  break;
 }
 case 4:  {
  $pCodes = 10032;
  $101 = $0;
  $102 = (($101) + 20|0);
  HEAP32[$102>>2] = 10072;
  break;
 }
 case 12:  {
  $168 = $iSym;
  $169 = $168<<1;
  $170 = (($169) + 1)|0;
  $171 = $t;
  $172 = Math_imul($170, $171)|0;
  $173 = (12120 + ($172<<2)|0);
  $pCodes = $173;
  $174 = $iSym;
  $175 = $t;
  $176 = $t;
  $177 = (($176) + 1)|0;
  $178 = $iSym;
  $179 = (9840 + ($178<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ($177|0)==($180|0);
  $182 = $181&1;
  $183 = (($175) - ($182))|0;
  $184 = Math_imul($174, $183)|0;
  $185 = (12624 + ($184<<2)|0);
  $186 = $0;
  $187 = (($186) + 12|0);
  HEAP32[$187>>2] = $185;
  $188 = $t;
  $189 = (($188) - 1)|0;
  $190 = $t;
  $191 = ($190|0)==(0);
  $192 = $191&1;
  $193 = (($189) + ($192))|0;
  $194 = $iSym;
  $195 = Math_imul($193, $194)|0;
  $196 = (12624 + ($195<<2)|0);
  $pDelta = $196;
  $197 = $t;
  $198 = (12816 + (($197*112)|0)|0);
  $199 = $0;
  $200 = (($199) + 20|0);
  HEAP32[$200>>2] = $198;
  break;
 }
 case 8:  {
  $pCodes = 11400;
  $156 = $0;
  $157 = (($156) + 20|0);
  HEAP32[$157>>2] = 11536;
  break;
 }
 case 7:  {
  $146 = $iSym;
  $147 = $146<<1;
  $148 = (($147) + 1)|0;
  $149 = $t;
  $150 = Math_imul($148, $149)|0;
  $151 = (11064 + ($150<<2)|0);
  $pCodes = $151;
  $pDelta = 11184;
  $152 = $t;
  $153 = (11216 + (($152*92)|0)|0);
  $154 = $0;
  $155 = (($154) + 20|0);
  HEAP32[$155>>2] = $153;
  break;
 }
 case 9:  {
  $158 = $iSym;
  $159 = $158<<1;
  $160 = (($159) + 1)|0;
  $161 = $t;
  $162 = Math_imul($160, $161)|0;
  $163 = (11728 + ($162<<2)|0);
  $pCodes = $163;
  $pDelta = 11880;
  $164 = $t;
  $165 = (11920 + (($164*100)|0)|0);
  $166 = $0;
  $167 = (($166) + 20|0);
  HEAP32[$167>>2] = $165;
  break;
 }
 default: {
  ___assert_fail((13376|0),(9960|0),504,(9984|0));
  // unreachable;
 }
 }
 $201 = $pCodes;
 $202 = $0;
 $203 = (($202) + 4|0);
 HEAP32[$203>>2] = $201;
 $204 = $pDelta;
 $205 = $0;
 $206 = (($205) + 8|0);
 HEAP32[$206>>2] = $204;
 STACKTOP = sp;return;
}
function _UpdateModelMB($cf,$iChannels,$iLaplacianMean,$pModel) {
 $cf = $cf|0;
 $iChannels = $iChannels|0;
 $iLaplacianMean = $iLaplacianMean|0;
 $pModel = $pModel|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iDelta = 0, $iLM = 0, $iMS = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cf;
 $1 = $iChannels;
 $2 = $iLaplacianMean;
 $3 = $pModel;
 $4 = $3;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 1)|0;
 $8 = (13704 + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($11, $9)|0;
 HEAP32[$10>>2] = $12;
 $13 = $0;
 $14 = ($13|0)==(1);
 if ($14) {
  $15 = $3;
  $16 = (($15) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) - 1)|0;
  $19 = (13912 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = Math_imul($23, $20)|0;
  HEAP32[$22>>2] = $24;
 } else {
  $25 = $0;
  $26 = ($25|0)==(2);
  if ($26) {
   $27 = $3;
   $28 = (($27) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (3 + ($29))|0;
   $31 = (($30) - 1)|0;
   $32 = (13912 + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $2;
   $35 = (($34) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = Math_imul($36, $33)|0;
   HEAP32[$35>>2] = $37;
  } else {
   $38 = $1;
   $39 = (($38) - 1)|0;
   $40 = $3;
   $41 = (($40) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) - 1)|0;
   $44 = (13720 + ($43<<6)|0);
   $45 = (($44) + ($39<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $2;
   $48 = (($47) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = Math_imul($49, $46)|0;
   HEAP32[$48>>2] = $50;
   $51 = $3;
   $52 = (($51) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(3);
   if ($54) {
    $55 = $2;
    $56 = (($55) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $57 >> 4;
    HEAP32[$56>>2] = $58;
   }
  }
 }
 $j = 0;
 while(1) {
  $59 = $j;
  $60 = ($59|0)<(2);
  if (!($60)) {
   label = 34;
   break;
  }
  $61 = $j;
  $62 = $2;
  $63 = (($62) + ($61<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $iLM = $64;
  $65 = $j;
  $66 = $3;
  $67 = (($66) + ($65<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $iMS = $68;
  $69 = $iLM;
  $70 = (($69) - 70)|0;
  $71 = $70 >> 2;
  $iDelta = $71;
  $72 = $iDelta;
  $73 = ($72|0)<=(-8);
  if ($73) {
   $74 = $iDelta;
   $75 = (($74) + 4)|0;
   $iDelta = $75;
   $76 = $iDelta;
   $77 = ($76|0)<(-16);
   if ($77) {
    $iDelta = -16;
   }
   $78 = $iDelta;
   $79 = $iMS;
   $80 = (($79) + ($78))|0;
   $iMS = $80;
   $81 = $iMS;
   $82 = ($81|0)<(-8);
   if ($82) {
    $83 = $j;
    $84 = $3;
    $85 = (($84) + 8|0);
    $86 = (($85) + ($83<<2)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0);
    if ($88) {
     $iMS = -8;
    } else {
     $iMS = 0;
     $89 = $j;
     $90 = $3;
     $91 = (($90) + 8|0);
     $92 = (($91) + ($89<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (($93) + -1)|0;
     HEAP32[$92>>2] = $94;
    }
   }
  } else {
   $95 = $iDelta;
   $96 = ($95|0)>=(8);
   if ($96) {
    $97 = $iDelta;
    $98 = (($97) - 4)|0;
    $iDelta = $98;
    $99 = $iDelta;
    $100 = ($99|0)>(15);
    if ($100) {
     $iDelta = 15;
    }
    $101 = $iDelta;
    $102 = $iMS;
    $103 = (($102) + ($101))|0;
    $iMS = $103;
    $104 = $iMS;
    $105 = ($104|0)>(8);
    if ($105) {
     $106 = $j;
     $107 = $3;
     $108 = (($107) + 8|0);
     $109 = (($108) + ($106<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)>=(15);
     if ($111) {
      $112 = $j;
      $113 = $3;
      $114 = (($113) + 8|0);
      $115 = (($114) + ($112<<2)|0);
      HEAP32[$115>>2] = 15;
      $iMS = 8;
     } else {
      $iMS = 0;
      $116 = $j;
      $117 = $3;
      $118 = (($117) + 8|0);
      $119 = (($118) + ($116<<2)|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (($120) + 1)|0;
      HEAP32[$119>>2] = $121;
     }
    }
   }
  }
  $122 = $iMS;
  $123 = $j;
  $124 = $3;
  $125 = (($124) + ($123<<2)|0);
  HEAP32[$125>>2] = $122;
  $126 = $0;
  $127 = ($126|0)==(0);
  if ($127) {
   break;
  }
  $128 = $j;
  $129 = (($128) + 1)|0;
  $j = $129;
 }
 if ((label|0) == 34) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _ResetCodingContext($pContext) {
 $pContext = $pContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pContext;
 $1 = $0;
 $2 = (($1) + 492|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 $3 = $0;
 $4 = (($3) + 492|0);
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 3;
 $6 = $0;
 $7 = (($6) + 512|0);
 ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;HEAP32[$7+16>>2]=0|0;
 $8 = $0;
 $9 = (($8) + 512|0);
 $10 = (($9) + 16|0);
 HEAP32[$10>>2] = 2;
 $11 = $0;
 $12 = (($11) + 512|0);
 $13 = (($12) + 8|0);
 $14 = (($13) + 4|0);
 HEAP32[$14>>2] = 4;
 $15 = $0;
 $16 = (($15) + 512|0);
 $17 = (($16) + 8|0);
 HEAP32[$17>>2] = 4;
 $18 = $0;
 $19 = (($18) + 532|0);
 ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;HEAP32[$19+16>>2]=0|0;
 $20 = $0;
 $21 = (($20) + 532|0);
 $22 = (($21) + 16|0);
 HEAP32[$22>>2] = 1;
 $23 = $0;
 $24 = (($23) + 532|0);
 $25 = (($24) + 8|0);
 $26 = (($25) + 4|0);
 HEAP32[$26>>2] = 8;
 $27 = $0;
 $28 = (($27) + 532|0);
 $29 = (($28) + 8|0);
 HEAP32[$29>>2] = 8;
 $30 = $0;
 $31 = (($30) + 552|0);
 HEAP32[$31>>2] = 1;
 $32 = $0;
 $33 = (($32) + 556|0);
 HEAP32[$33>>2] = 1;
 $34 = $0;
 $35 = (($34) + 560|0);
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = -4;
 $37 = $0;
 $38 = (($37) + 560|0);
 HEAP32[$38>>2] = -4;
 $39 = $0;
 $40 = (($39) + 560|0);
 $41 = (($40) + 8|0);
 $42 = (($41) + 4|0);
 HEAP32[$42>>2] = 4;
 $43 = $0;
 $44 = (($43) + 560|0);
 $45 = (($44) + 8|0);
 HEAP32[$45>>2] = 4;
 $46 = $0;
 $47 = (($46) + 560|0);
 $48 = (($47) + 16|0);
 $49 = (($48) + 4|0);
 HEAP32[$49>>2] = 0;
 $50 = $0;
 $51 = (($50) + 560|0);
 $52 = (($51) + 16|0);
 HEAP32[$52>>2] = 0;
 STACKTOP = sp;return;
}
function _InitZigzagScan($pContext) {
 $pContext = $pContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pContext;
 $1 = $0;
 $2 = (0|0)!=($1|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(16);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = (13384 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $i;
  $9 = $0;
  $10 = (($9) + 108|0);
  $11 = (($10) + ($8<<3)|0);
  $12 = (($11) + 4|0);
  HEAP32[$12>>2] = $7;
  $13 = $i;
  $14 = (13448 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (14048 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $i;
  $19 = $0;
  $20 = (($19) + 236|0);
  $21 = (($20) + ($18<<3)|0);
  $22 = (($21) + 4|0);
  HEAP32[$22>>2] = $17;
  $23 = $i;
  $24 = (13512 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (14048 + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $i;
  $29 = $0;
  $30 = (($29) + 364|0);
  $31 = (($30) + ($28<<3)|0);
  $32 = (($31) + 4|0);
  HEAP32[$32>>2] = $27;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 STACKTOP = sp;return;
}
function _checkImageBuffer($pSC,$cWidth,$cRows) {
 $pSC = $pSC|0;
 $cWidth = $cWidth|0;
 $cRows = $cRows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $bLessThan64Bit = 0, $bd = 0, $cBytes = 0, $cf = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $cWidth;
 $3 = $cRows;
 $4 = $1;
 $5 = (($4) + 84|0);
 $6 = (($5) + 32856|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $13 = 6;
 } else {
  $9 = $1;
  $10 = (($9) + 4|0);
  $11 = (($10) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12;
 }
 $bd = $13;
 $14 = $1;
 $15 = (($14) + 84|0);
 $16 = (($15) + 32856|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $1;
  $20 = (($19) + 34136|0);
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $27 = $22;
 } else {
  $23 = $1;
  $24 = (($23) + 4|0);
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26;
 }
 $cf = $27;
 $bLessThan64Bit = 1;
 $28 = $cf;
 $29 = ($28|0)==(1);
 if ($29) {
  $30 = $3;
  $31 = (($30) + 1)|0;
  $32 = (($31>>>0) / 2)&-1;
  $3 = $32;
 }
 $33 = $3;
 $34 = $1;
 $35 = (($34) + 32952|0);
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($33>>>0)>($37>>>0);
 if ($38) {
  $0 = -1;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 $39 = $cf;
 $40 = ($39|0)==(2);
 if ($40) {
  label = 13;
 } else {
  $41 = $cf;
  $42 = ($41|0)==(1);
  if ($42) {
   label = 13;
  }
 }
 if ((label|0) == 13) {
  $43 = $2;
  $44 = (($43) + 1)|0;
  $45 = (($44>>>0) / 2)&-1;
  $2 = $45;
 }
 $46 = $bLessThan64Bit;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $2;
  $49 = $48 >>> 27;
  $50 = ($49|0)!=(0);
  if ($50) {
   $0 = -1;
   $93 = $0;
   STACKTOP = sp;return ($93|0);
  }
 }
 $51 = $1;
 $52 = (($51) + 84|0);
 $53 = (($52) + 32856|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $2;
  $57 = $56<<2;
  $58 = $cf;
  $59 = ($58|0)==(1);
  if ($59) {
   $66 = 6;
  } else {
   $60 = $cf;
   $61 = ($60|0)==(2);
   if ($61) {
    $94 = 4;
   } else {
    $62 = $cf;
    $63 = ($62|0)==(3);
    $64 = $63 ? 3 : 1;
    $94 = $64;
   }
   $66 = $94;
  }
  $65 = Math_imul($57, $66)|0;
  $85 = $65;
 } else {
  $67 = $bd;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = $1;
   $70 = (($69) + 4|0);
   $71 = (($70) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $2;
   $74 = Math_imul($72, $73)|0;
   $75 = (($74) + 7)|0;
   $76 = (($75>>>0) / 8)&-1;
   $95 = $76;
  } else {
   $77 = $1;
   $78 = (($77) + 4|0);
   $79 = (($78) + 16|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + 7)|0;
   $82 = (($81>>>0) / 8)&-1;
   $83 = $2;
   $84 = Math_imul($82, $83)|0;
   $95 = $84;
  }
  $85 = $95;
 }
 $cBytes = $85;
 $86 = $cBytes;
 $87 = $1;
 $88 = (($87) + 32952|0);
 $89 = (($88) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($86>>>0)>($90>>>0);
 $92 = $91 ? -1 : 0;
 $0 = $92;
 $93 = $0;
 STACKTOP = sp;return ($93|0);
}
function _putBit16($pIO,$uiBits,$cBits) {
 $pIO = $pIO|0;
 $uiBits = $uiBits|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $uiBits;
 $2 = $cBits;
 $3 = $2;
 $4 = ($3>>>0)<=(16);
 if ($4) {
  $5 = $2;
  $6 = -1 << $5;
  $7 = $6 ^ -1;
  $8 = $1;
  $9 = $8 & $7;
  $1 = $9;
  $10 = $0;
  $11 = $1;
  $12 = $2;
  _putBit16z($10,$11,$12);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((15024|0),(14640|0),1265,(15080|0));
  // unreachable;
 }
}
function _getBit16($pIO,$cBits) {
 $pIO = $pIO|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $uiRet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cBits;
 $2 = $0;
 $3 = $1;
 $4 = (_peekBit16($2,$3)|0);
 $uiRet = $4;
 $5 = $0;
 $6 = $1;
 (_flushBit16($5,$6)|0);
 $7 = $uiRet;
 STACKTOP = sp;return ($7|0);
}
function _getTilePos($pSC,$mbX,$mbY) {
 $pSC = $pSC|0;
 $mbX = $mbX|0;
 $mbY = $mbY|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $mbX;
 $2 = $mbY;
 $3 = $1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 34296|0);
  HEAP32[$6>>2] = 0;
 } else {
  $7 = $0;
  $8 = (($7) + 34296|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = (($10) + 84|0);
  $12 = (($11) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($9>>>0)<($13>>>0);
  if ($14) {
   $15 = $1;
   $16 = $0;
   $17 = (($16) + 34296|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 1)|0;
   $20 = $0;
   $21 = (($20) + 84|0);
   $22 = (($21) + 68|0);
   $23 = (($22) + ($19<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($15|0)==($24|0);
   if ($25) {
    $26 = $0;
    $27 = (($26) + 34296|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 1)|0;
    HEAP32[$27>>2] = $29;
   }
  }
 }
 $30 = $2;
 $31 = ($30|0)==(0);
 if ($31) {
  $32 = $0;
  $33 = (($32) + 34292|0);
  HEAP32[$33>>2] = 0;
 } else {
  $34 = $0;
  $35 = (($34) + 34292|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $0;
  $38 = (($37) + 84|0);
  $39 = (($38) + 16452|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($36>>>0)<($40>>>0);
  if ($41) {
   $42 = $2;
   $43 = $0;
   $44 = (($43) + 34292|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 1)|0;
   $47 = $0;
   $48 = (($47) + 84|0);
   $49 = (($48) + 16456|0);
   $50 = (($49) + ($46<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($42|0)==($51|0);
   if ($52) {
    $53 = $0;
    $54 = (($53) + 34292|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + 1)|0;
    HEAP32[$54>>2] = $56;
   }
  }
 }
 $57 = $1;
 $58 = $0;
 $59 = (($58) + 34296|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $0;
 $62 = (($61) + 84|0);
 $63 = (($62) + 68|0);
 $64 = (($63) + ($60<<2)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($57|0)==($65|0);
 $67 = $66&1;
 $68 = $0;
 $69 = (($68) + 34300|0);
 HEAP32[$69>>2] = $67;
 $70 = $2;
 $71 = $0;
 $72 = (($71) + 34292|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $0;
 $75 = (($74) + 84|0);
 $76 = (($75) + 16456|0);
 $77 = (($76) + ($73<<2)|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($70|0)==($78|0);
 $80 = $79&1;
 $81 = $0;
 $82 = (($81) + 34304|0);
 HEAP32[$82>>2] = $80;
 $83 = $1;
 $84 = $0;
 $85 = (($84) + 34296|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $0;
 $88 = (($87) + 84|0);
 $89 = (($88) + 68|0);
 $90 = (($89) + ($86<<2)|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($83) - ($91))|0;
 $93 = $92 & 15;
 $94 = ($93|0)==(0);
 $95 = $94&1;
 $96 = $0;
 $97 = (($96) + 34308|0);
 HEAP32[$97>>2] = $95;
 $98 = $0;
 $99 = (($98) + 34312|0);
 HEAP32[$99>>2] = $95;
 $100 = $0;
 $101 = (($100) + 34296|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $0;
 $104 = (($103) + 84|0);
 $105 = (($104) + 64|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($102|0)==($106|0);
 if ($107) {
  $108 = $1;
  $109 = (($108) + 1)|0;
  $110 = $0;
  $111 = (($110) + 34364|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($109|0)==($112|0);
  if ($113) {
   $114 = $0;
   $115 = (($114) + 34312|0);
   HEAP32[$115>>2] = 1;
  }
  STACKTOP = sp;return;
 } else {
  $116 = $1;
  $117 = (($116) + 1)|0;
  $118 = $0;
  $119 = (($118) + 34296|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + 1)|0;
  $122 = $0;
  $123 = (($122) + 84|0);
  $124 = (($123) + 68|0);
  $125 = (($124) + ($121<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($117|0)==($126|0);
  if ($127) {
   $128 = $0;
   $129 = (($128) + 34312|0);
   HEAP32[$129>>2] = 1;
  }
  STACKTOP = sp;return;
 }
}
function _initMRPtr($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $j = 0, $jend = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 35032|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4&1;
 $jend = $5;
 $j = 0;
 while(1) {
  $6 = $j;
  $7 = $jend;
  $8 = ($6>>>0)<=($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = (($9) + 34692|0);
  $11 = $0;
  $12 = (($11) + 34564|0);
  dest=$10+0|0; src=$12+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $13 = $0;
  $14 = (($13) + 34756|0);
  $15 = $0;
  $16 = (($15) + 34628|0);
  dest=$14+0|0; src=$16+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $17 = $0;
  $18 = (($17) + 35032|0);
  $19 = HEAP32[$18>>2]|0;
  $0 = $19;
  $20 = $j;
  $21 = (($20) + 1)|0;
  $j = $21;
 }
 STACKTOP = sp;return;
}
function _advanceMRPtr($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cf = 0, $cpChroma = 0;
 var $cpStride = 0, $i = 0, $j = 0, $jend = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34136|0);
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $cf = $4;
 $5 = $cf;
 $6 = (14568 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7<<4;
 $cpChroma = $8;
 $9 = $0;
 $10 = (($9) + 35032|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 $13 = $12&1;
 $jend = $13;
 $14 = $0;
 $15 = (($14) + 35036|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if (!($17)) {
  ___assert_fail((14608|0),(14640|0),200,(14664|0));
  // unreachable;
 }
 $j = 0;
 while(1) {
  $18 = $j;
  $19 = $jend;
  $20 = ($18>>>0)<=($19>>>0);
  if (!($20)) {
   break;
  }
  $cpStride = 256;
  $i = 0;
  while(1) {
   $21 = $i;
   $22 = $0;
   $23 = (($22) + 34136|0);
   $24 = (($23) + 36|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($21>>>0)<($25>>>0);
   if (!($26)) {
    break;
   }
   $27 = $i;
   $28 = $0;
   $29 = (($28) + 34692|0);
   $30 = (($29) + ($27<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $i;
   $33 = $0;
   $34 = (($33) + 34500|0);
   $35 = (($34) + ($32<<2)|0);
   HEAP32[$35>>2] = $31;
   $36 = $cpStride;
   $37 = $i;
   $38 = $0;
   $39 = (($38) + 34692|0);
   $40 = (($39) + ($37<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($36<<2)|0);
   HEAP32[$40>>2] = $42;
   $43 = $cpStride;
   $44 = $i;
   $45 = $0;
   $46 = (($45) + 34756|0);
   $47 = (($46) + ($44<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($43<<2)|0);
   HEAP32[$47>>2] = $49;
   $50 = $cpChroma;
   $cpStride = $50;
   $51 = $i;
   $52 = (($51) + 1)|0;
   $i = $52;
  }
  $53 = $0;
  $54 = (($53) + 35032|0);
  $55 = HEAP32[$54>>2]|0;
  $0 = $55;
  $56 = $j;
  $57 = (($56) + 1)|0;
  $j = $57;
 }
 STACKTOP = sp;return;
}
function _advanceOneMBRow($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $j = 0, $jend = 0, $pPredInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 35032|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4&1;
 $jend = $5;
 $j = 0;
 while(1) {
  $6 = $j;
  $7 = $jend;
  $8 = ($6>>>0)<=($7>>>0);
  if (!($8)) {
   break;
  }
  $i = 0;
  while(1) {
   $9 = $i;
   $10 = $0;
   $11 = (($10) + 34136|0);
   $12 = (($11) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($9>>>0)<($13>>>0);
   if (!($14)) {
    break;
   }
   $15 = $i;
   $16 = $0;
   $17 = (($16) + 34892|0);
   $18 = (($17) + ($15<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $pPredInfo = $19;
   $20 = $i;
   $21 = $0;
   $22 = (($21) + 34956|0);
   $23 = (($22) + ($20<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $i;
   $26 = $0;
   $27 = (($26) + 34892|0);
   $28 = (($27) + ($25<<2)|0);
   HEAP32[$28>>2] = $24;
   $29 = $pPredInfo;
   $30 = $i;
   $31 = $0;
   $32 = (($31) + 34956|0);
   $33 = (($32) + ($30<<2)|0);
   HEAP32[$33>>2] = $29;
   $34 = $i;
   $35 = (($34) + 1)|0;
   $i = $35;
  }
  $36 = $0;
  $37 = (($36) + 35032|0);
  $38 = HEAP32[$37>>2]|0;
  $0 = $38;
  $39 = $j;
  $40 = (($39) + 1)|0;
  $j = $40;
 }
 STACKTOP = sp;return;
}
function _swapMRPtr($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $j = 0, $jend = 0, $pTemp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pTemp = sp;
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 35032|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4&1;
 $jend = $5;
 $j = 0;
 while(1) {
  $6 = $j;
  $7 = $jend;
  $8 = ($6>>>0)<=($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = (($9) + 34564|0);
  dest=$pTemp+0|0; src=$10+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $11 = $0;
  $12 = (($11) + 34564|0);
  $13 = $0;
  $14 = (($13) + 34628|0);
  dest=$12+0|0; src=$14+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $15 = $0;
  $16 = (($15) + 34628|0);
  dest=$16+0|0; src=$pTemp+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $17 = $0;
  $18 = (($17) + 35032|0);
  $19 = HEAP32[$18>>2]|0;
  $0 = $19;
  $20 = $j;
  $21 = (($20) + 1)|0;
  $j = $21;
 }
 STACKTOP = sp;return;
}
function _WMPAlloc($ppv,$cb) {
 $ppv = $ppv|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppv;
 $1 = $cb;
 $2 = $1;
 $3 = (_calloc(1,$2)|0);
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = $7 ? 0 : -101;
 STACKTOP = sp;return ($8|0);
}
function _WMPFree($ppv) {
 $ppv = $ppv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppv;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return 0;
 }
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $0;
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return 0;
}
function _CreateWS_File($ppWS,$szFilename,$szMode) {
 $ppWS = $ppWS|0;
 $szFilename = $szFilename|0;
 $szMode = $szMode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pWS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppWS;
 $1 = $szFilename;
 $2 = $szMode;
 $err = 0;
 $pWS = 0;
 $3 = $0;
 $4 = (_WMPAlloc($3,56)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = $err;
  $err = $6;
  $35 = $err;
  STACKTOP = sp;return ($35|0);
 }
 $7 = $err;
 $err = $7;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $pWS = $9;
 $10 = $pWS;
 $11 = (($10) + 24|0);
 HEAP32[$11>>2] = 99;
 $12 = $pWS;
 $13 = (($12) + 28|0);
 HEAP32[$13>>2] = 100;
 $14 = $pWS;
 $15 = (($14) + 32|0);
 HEAP32[$15>>2] = 101;
 $16 = $pWS;
 $17 = (($16) + 36|0);
 HEAP32[$17>>2] = 102;
 $18 = $pWS;
 $19 = (($18) + 40|0);
 HEAP32[$19>>2] = 103;
 $20 = $pWS;
 $21 = (($20) + 44|0);
 HEAP32[$21>>2] = 104;
 $22 = $pWS;
 $23 = (($22) + 48|0);
 HEAP32[$23>>2] = 105;
 $24 = $1;
 $25 = $2;
 $26 = (_fopen(($24|0),($25|0))|0);
 $27 = $pWS;
 HEAP32[$27>>2] = $26;
 $28 = $pWS;
 $29 = HEAP32[$28>>2]|0;
 $30 = (0|0)==($29|0);
 $31 = $30 ? -102 : 0;
 $err = $31;
 $32 = ($31|0)<(0);
 if ($32) {
  $33 = $err;
  $err = $33;
  $35 = $err;
  STACKTOP = sp;return ($35|0);
 }
 $34 = $err;
 $err = $34;
 $35 = $err;
 STACKTOP = sp;return ($35|0);
}
function _CloseWS_File($ppWS) {
 $ppWS = $ppWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pWS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppWS;
 $err = 0;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $pWS = $2;
 $3 = $pWS;
 $4 = HEAP32[$3>>2]|0;
 (_fclose(($4|0))|0);
 $5 = $0;
 $6 = (_WMPFree($5)|0);
 $err = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $err;
  $err = $8;
  $10 = $err;
  STACKTOP = sp;return ($10|0);
 }
 $9 = $err;
 $err = $9;
 $10 = $err;
 STACKTOP = sp;return ($10|0);
}
function _EOSWS_File($pWS) {
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_feof(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function _ReadWS_File($pWS,$pv,$cb) {
 $pWS = $pWS|0;
 $pv = $pv|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $pv;
 $2 = $cb;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_fread(($3|0),($4|0),1,($6|0))|0);
 $8 = (1)==($7|0);
 $9 = $8 ? 0 : -102;
 STACKTOP = sp;return ($9|0);
}
function _ReadWS_File1($pWS,$pv,$cb,$pcbRead) {
 $pWS = $pWS|0;
 $pv = $pv|0;
 $cb = $cb|0;
 $pcbRead = $pcbRead|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pWS;
 $2 = $pv;
 $3 = $cb;
 $4 = $pcbRead;
 $5 = $2;
 $6 = $3;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_fread(($5|0),1,($6|0),($8|0))|0);
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = $4;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)==($13|0);
 if ($14) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = (_feof(($16|0))|0);
  $18 = (0)!=($17|0);
  $19 = $18 ? 0 : -102;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return 0|0;
}
function _WriteWS_File($pWS,$pv,$cb) {
 $pWS = $pWS|0;
 $pv = $pv|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $pv;
 $2 = $cb;
 $err = 0;
 $3 = $2;
 $4 = (0)!=($3|0);
 do {
  if ($4) {
   $5 = $1;
   $6 = $2;
   $7 = $0;
   $8 = HEAP32[$7>>2]|0;
   $9 = (_fwrite(($5|0),($6|0),1,($8|0))|0);
   $10 = (1)!=($9|0);
   $11 = $10 ? -102 : 0;
   $err = $11;
   $12 = ($11|0)<(0);
   if ($12) {
    $13 = $err;
    $err = $13;
    $15 = $err;
    STACKTOP = sp;return ($15|0);
   } else {
    $14 = $err;
    $err = $14;
    break;
   }
  }
 } while(0);
 $15 = $err;
 STACKTOP = sp;return ($15|0);
}
function _SetPosWS_File($pWS,$offPos) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $offPos;
 $err = 0;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (_fseek(($3|0),($4|0),0)|0);
 $6 = (0)!=($5|0);
 $7 = $6 ? -102 : 0;
 $err = $7;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $err;
  $err = $9;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $10 = $err;
 $err = $10;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _GetPosWS_File($pWS,$poffPos) {
 $pWS = $pWS|0;
 $poffPos = $poffPos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $lOff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $poffPos;
 $err = 0;
 $lOff = 0;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_ftell(($3|0))|0);
 $lOff = $4;
 $5 = (-1)==($4|0);
 $6 = $5 ? -102 : 0;
 $err = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $err;
  $err = $8;
  $12 = $err;
  STACKTOP = sp;return ($12|0);
 }
 $9 = $err;
 $err = $9;
 $10 = $lOff;
 $11 = $1;
 HEAP32[$11>>2] = $10;
 $12 = $err;
 STACKTOP = sp;return ($12|0);
}
function _CreateWS_Memory($ppWS,$pv,$cb) {
 $ppWS = $ppWS|0;
 $pv = $pv|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pWS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppWS;
 $1 = $pv;
 $2 = $cb;
 $err = 0;
 $pWS = 0;
 $3 = $0;
 $4 = (_WMPAlloc($3,56)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = $err;
  $err = $6;
  $31 = $err;
  STACKTOP = sp;return ($31|0);
 }
 $7 = $err;
 $err = $7;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $pWS = $9;
 $10 = $1;
 $11 = $pWS;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = $pWS;
 $14 = (($13) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = $pWS;
 $16 = (($15) + 8|0);
 HEAP32[$16>>2] = 0;
 $17 = $pWS;
 $18 = (($17) + 24|0);
 HEAP32[$18>>2] = 106;
 $19 = $pWS;
 $20 = (($19) + 28|0);
 HEAP32[$20>>2] = 107;
 $21 = $pWS;
 $22 = (($21) + 32|0);
 HEAP32[$22>>2] = 108;
 $23 = $pWS;
 $24 = (($23) + 36|0);
 HEAP32[$24>>2] = 109;
 $25 = $pWS;
 $26 = (($25) + 40|0);
 HEAP32[$26>>2] = 110;
 $27 = $pWS;
 $28 = (($27) + 44|0);
 HEAP32[$28>>2] = 111;
 $29 = $pWS;
 $30 = (($29) + 48|0);
 HEAP32[$30>>2] = 112;
 $31 = $err;
 STACKTOP = sp;return ($31|0);
}
function _CloseWS_Memory($ppWS) {
 $ppWS = $ppWS|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppWS;
 $err = 0;
 $1 = $0;
 $2 = (_WMPFree($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
 } else {
  $5 = $err;
  $err = $5;
 }
 $6 = $err;
 STACKTOP = sp;return ($6|0);
}
function _EOSWS_Memory($pWS) {
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3>>>0)<=($6>>>0);
 $8 = $7&1;
 STACKTOP = sp;return ($8|0);
}
function _ReadWS_Memory($pWS,$pv,$cb) {
 $pWS = $pWS|0;
 $pv = $pv|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $pv;
 $2 = $cb;
 $err = 0;
 $3 = $0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)>=($8>>>0);
 $10 = $9 ? -103 : 0;
 $err = $10;
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = $err;
  $err = $12;
  $40 = $err;
  STACKTOP = sp;return ($40|0);
 }
 $13 = $err;
 $err = $13;
 $14 = $0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = (($16) + ($17))|0;
 $19 = $0;
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18>>>0)>($21>>>0);
 $23 = $22 ? -103 : 0;
 $err = $23;
 $24 = ($23|0)<(0);
 if ($24) {
  $25 = $err;
  $err = $25;
  $40 = $err;
  STACKTOP = sp;return ($40|0);
 }
 $26 = $err;
 $err = $26;
 $27 = $1;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = (($30) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($29) + ($32)|0);
 $34 = $2;
 _memcpy(($27|0),($33|0),($34|0))|0;
 $35 = $2;
 $36 = $0;
 $37 = (($36) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($35))|0;
 HEAP32[$37>>2] = $39;
 $40 = $err;
 STACKTOP = sp;return ($40|0);
}
function _ReadWS_Memory1($pWS,$pv,$cbToRead,$pcbRead) {
 $pWS = $pWS|0;
 $pv = $pv|0;
 $cbToRead = $cbToRead|0;
 $pcbRead = $pcbRead|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $pv;
 $2 = $cbToRead;
 $3 = $pcbRead;
 $err = 0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)>=($10>>>0);
 $12 = $11 ? -103 : 0;
 $err = $12;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $err;
  $err = $14;
  $47 = $err;
  STACKTOP = sp;return ($47|0);
 }
 $15 = $err;
 $err = $15;
 $16 = $0;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $2;
 $23 = (($21) + ($22))|0;
 $24 = ($18>>>0)<($23>>>0);
 if ($24) {
  $25 = $0;
  $26 = (($25) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $0;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($27) - ($30))|0;
  $2 = $31;
 }
 $32 = $1;
 $33 = $0;
 $34 = HEAP32[$33>>2]|0;
 $35 = $0;
 $36 = (($35) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($34) + ($37)|0);
 $39 = $2;
 _memcpy(($32|0),($38|0),($39|0))|0;
 $40 = $2;
 $41 = $0;
 $42 = (($41) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + ($40))|0;
 HEAP32[$42>>2] = $44;
 $45 = $2;
 $46 = $3;
 HEAP32[$46>>2] = $45;
 $47 = $err;
 STACKTOP = sp;return ($47|0);
}
function _WriteWS_Memory($pWS,$pv,$cb) {
 $pWS = $pWS|0;
 $pv = $pv|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $pv;
 $2 = $cb;
 $err = 0;
 $3 = $0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (($5) + ($6))|0;
 $8 = $0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)<($10>>>0);
 $12 = $11 ? -103 : 0;
 $err = $12;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $err;
  $err = $14;
  $42 = $err;
  STACKTOP = sp;return ($42|0);
 }
 $15 = $err;
 $err = $15;
 $16 = $0;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $2;
 $23 = (($21) + ($22))|0;
 $24 = ($18>>>0)<($23>>>0);
 $25 = $24 ? -103 : 0;
 $err = $25;
 $26 = ($25|0)<(0);
 if ($26) {
  $27 = $err;
  $err = $27;
  $42 = $err;
  STACKTOP = sp;return ($42|0);
 }
 $28 = $err;
 $err = $28;
 $29 = $0;
 $30 = HEAP32[$29>>2]|0;
 $31 = $0;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($30) + ($33)|0);
 $35 = $1;
 $36 = $2;
 _memcpy(($34|0),($35|0),($36|0))|0;
 $37 = $2;
 $38 = $0;
 $39 = (($38) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($37))|0;
 HEAP32[$39>>2] = $41;
 $42 = $err;
 STACKTOP = sp;return ($42|0);
}
function _SetPosWS_Memory($pWS,$offPos) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $offPos;
 $err = 0;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = $err;
 STACKTOP = sp;return ($5|0);
}
function _GetPosWS_Memory($pWS,$poffPos) {
 $pWS = $pWS|0;
 $poffPos = $poffPos|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $poffPos;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return 0;
}
function _CreateWS_List($ppWS) {
 $ppWS = $ppWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pWS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppWS;
 $err = 0;
 $pWS = 0;
 $1 = $0;
 $2 = (_WMPAlloc($1,60)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $33 = $err;
  STACKTOP = sp;return ($33|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pWS = $7;
 $8 = $pWS;
 HEAP32[$8>>2] = 0;
 $9 = $pWS;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = $pWS;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = $pWS;
 $14 = (($13) + 12|0);
 HEAP32[$14>>2] = 0;
 $15 = $pWS;
 $16 = (($15) + 16|0);
 HEAP32[$16>>2] = 0;
 $17 = $pWS;
 $18 = (($17) + 24|0);
 HEAP32[$18>>2] = 113;
 $19 = $pWS;
 $20 = (($19) + 28|0);
 HEAP32[$20>>2] = 0;
 $21 = $pWS;
 $22 = (($21) + 32|0);
 HEAP32[$22>>2] = 114;
 $23 = $pWS;
 $24 = (($23) + 36|0);
 HEAP32[$24>>2] = 115;
 $25 = $pWS;
 $26 = (($25) + 40|0);
 HEAP32[$26>>2] = 116;
 $27 = $pWS;
 $28 = (($27) + 44|0);
 HEAP32[$28>>2] = 117;
 $29 = $pWS;
 $30 = (($29) + 48|0);
 HEAP32[$30>>2] = 118;
 $31 = $pWS;
 $32 = (($31) + 52|0);
 HEAP32[$32>>2] = 119;
 $33 = $err;
 STACKTOP = sp;return ($33|0);
}
function _CloseWS_List($ppWS) {
 $ppWS = $ppWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $err = 0, $pBuf = 0, $pNext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pBuf = sp + 4|0;
 $0 = $ppWS;
 $err = 0;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 do {
  if ($2) {
   $3 = $0;
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + 56|0);
   $6 = HEAP32[$5>>2]|0;
   HEAP32[$pBuf>>2] = $6;
   while(1) {
    $7 = HEAP32[$pBuf>>2]|0;
    $8 = ($7|0)!=(0|0);
    if (!($8)) {
     break;
    }
    $9 = HEAP32[$pBuf>>2]|0;
    $10 = HEAP32[$9>>2]|0;
    $pNext = $10;
    $11 = (_WMPFree($pBuf)|0);
    $err = $11;
    $12 = ($11|0)<(0);
    if ($12) {
     label = 5;
     break;
    }
    $14 = $err;
    $err = $14;
    $15 = $pNext;
    HEAP32[$pBuf>>2] = $15;
   }
   if ((label|0) == 5) {
    $13 = $err;
    $err = $13;
    $21 = $err;
    STACKTOP = sp;return ($21|0);
   }
   $16 = $0;
   $17 = (_WMPFree($16)|0);
   $err = $17;
   $18 = ($17|0)<(0);
   if ($18) {
    $19 = $err;
    $err = $19;
    $21 = $err;
    STACKTOP = sp;return ($21|0);
   } else {
    $20 = $err;
    $err = $20;
    break;
   }
  }
 } while(0);
 $21 = $err;
 STACKTOP = sp;return ($21|0);
}
function _ReadWS_List($pWS,$pv,$cb) {
 $pWS = $pWS|0;
 $pv = $pv|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $cl = 0, $err = 0, $pNextBuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pWS;
 $2 = $pv;
 $3 = $cb;
 $err = 0;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (0)==($6|0);
 if ($7) {
  $8 = $3;
  $9 = ($8>>>0)>(0);
  if ($9) {
   $0 = -116;
   $79 = $0;
   STACKTOP = sp;return ($79|0);
  }
 }
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = (($16) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($15) + ($18))|0;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) - 1)|0;
 $24 = $23<<14;
 $25 = (($19) + ($24))|0;
 $26 = $3;
 $27 = (($25) + ($26))|0;
 $28 = ($12>>>0)<($27>>>0);
 if ($28) {
  $err = -116;
  $29 = $err;
  $0 = $29;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 }
 while(1) {
  $30 = $3;
  $31 = ($30|0)!=(0);
  if (!($31)) {
   break;
  }
  $32 = $1;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (16384 - ($34))|0;
  $cl = $35;
  $36 = $cl;
  $37 = $3;
  $38 = ($36>>>0)>($37>>>0);
  if ($38) {
   $39 = $3;
   $cl = $39;
  }
  $40 = $2;
  $41 = $1;
  $42 = HEAP32[$41>>2]|0;
  $43 = $1;
  $44 = (($43) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($42) + ($45)|0);
  $47 = $cl;
  _memcpy(($40|0),($46|0),($47|0))|0;
  $48 = $cl;
  $49 = $1;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($48))|0;
  HEAP32[$50>>2] = $52;
  $53 = $2;
  $54 = $cl;
  $55 = (($53) + ($54)|0);
  $2 = $55;
  $56 = $cl;
  $57 = $3;
  $58 = (($57) - ($56))|0;
  $3 = $58;
  $59 = $1;
  $60 = (($59) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(16384);
  if ($62) {
   $63 = $1;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + -4|0);
   $66 = HEAP32[$65>>2]|0;
   $pNextBuf = $66;
   $67 = $pNextBuf;
   $68 = (0|0)!=($67|0);
   if ($68) {
    $69 = $pNextBuf;
    $70 = (($69) + 4|0);
    $71 = $1;
    HEAP32[$71>>2] = $70;
    $72 = $1;
    $73 = (($72) + 8|0);
    HEAP32[$73>>2] = 0;
   }
   $74 = $1;
   $75 = (($74) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[$75>>2] = $77;
  }
 }
 $78 = $err;
 $0 = $78;
 $79 = $0;
 STACKTOP = sp;return ($79|0);
}
function _ReadWS_List1($pWS,$pv,$cb,$pcbRead) {
 $pWS = $pWS|0;
 $pv = $pv|0;
 $cb = $cb|0;
 $pcbRead = $pcbRead|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $cl = 0, $currPos = 0, $err = 0, $pNextBuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pWS;
 $2 = $pv;
 $3 = $cb;
 $4 = $pcbRead;
 $err = 0;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0)==($7|0);
 if ($8) {
  $9 = $3;
  $10 = ($9>>>0)>(0);
  if ($10) {
   $11 = $4;
   HEAP32[$11>>2] = 0;
   $0 = -116;
   $88 = $0;
   STACKTOP = sp;return ($88|0);
  }
 }
 $12 = $1;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) + ($17))|0;
 $19 = $1;
 $20 = (($19) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) - 1)|0;
 $23 = $22<<14;
 $24 = (($18) + ($23))|0;
 $currPos = $24;
 $25 = $1;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $currPos;
 $29 = $3;
 $30 = (($28) + ($29))|0;
 $31 = ($27>>>0)<($30>>>0);
 if ($31) {
  $32 = $1;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $currPos;
  $36 = (($34) - ($35))|0;
  $3 = $36;
 }
 $37 = $3;
 $38 = $4;
 HEAP32[$38>>2] = $37;
 while(1) {
  $39 = $3;
  $40 = ($39|0)!=(0);
  if (!($40)) {
   break;
  }
  $41 = $1;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (16384 - ($43))|0;
  $cl = $44;
  $45 = $cl;
  $46 = $3;
  $47 = ($45>>>0)>($46>>>0);
  if ($47) {
   $48 = $3;
   $cl = $48;
  }
  $49 = $2;
  $50 = $1;
  $51 = HEAP32[$50>>2]|0;
  $52 = $1;
  $53 = (($52) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($51) + ($54)|0);
  $56 = $cl;
  _memcpy(($49|0),($55|0),($56|0))|0;
  $57 = $cl;
  $58 = $1;
  $59 = (($58) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + ($57))|0;
  HEAP32[$59>>2] = $61;
  $62 = $2;
  $63 = $cl;
  $64 = (($62) + ($63)|0);
  $2 = $64;
  $65 = $cl;
  $66 = $3;
  $67 = (($66) - ($65))|0;
  $3 = $67;
  $68 = $1;
  $69 = (($68) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)==(16384);
  if ($71) {
   $72 = $1;
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + -4|0);
   $75 = HEAP32[$74>>2]|0;
   $pNextBuf = $75;
   $76 = $pNextBuf;
   $77 = (0|0)!=($76|0);
   if ($77) {
    $78 = $pNextBuf;
    $79 = (($78) + 4|0);
    $80 = $1;
    HEAP32[$80>>2] = $79;
    $81 = $1;
    $82 = (($81) + 8|0);
    HEAP32[$82>>2] = 0;
   }
   $83 = $1;
   $84 = (($83) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + 1)|0;
   HEAP32[$84>>2] = $86;
  }
 }
 $87 = $err;
 $0 = $87;
 $88 = $0;
 STACKTOP = sp;return ($88|0);
}
function _WriteWS_List($pWS,$pv,$cb) {
 $pWS = $pWS|0;
 $pv = $pv|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $cl = 0, $err = 0, $pBuf = 0, $pPtrLoc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pBuf = sp + 16|0;
 $0 = $pWS;
 $1 = $pv;
 $2 = $cb;
 $err = 0;
 while(1) {
  $3 = $2;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   label = 15;
   break;
  }
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (0|0)==($6|0);
  if ($7) {
   label = 5;
  } else {
   $8 = $0;
   $9 = (($8) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (16384)==($10|0);
   if ($11) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   HEAP32[$pBuf>>2] = 0;
   $12 = $0;
   $13 = HEAP32[$12>>2]|0;
   $14 = (0|0)==($13|0);
   if ($14) {
    $15 = $0;
    $16 = (($15) + 56|0);
    $pPtrLoc = $16;
   } else {
    $17 = $0;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + -4|0);
    $pPtrLoc = $19;
   }
   $20 = (_WMPAlloc($pBuf,16388)|0);
   $err = $20;
   $21 = ($20|0)<(0);
   if ($21) {
    label = 9;
    break;
   }
   $23 = $err;
   $err = $23;
   $24 = HEAP32[$pBuf>>2]|0;
   $25 = $pPtrLoc;
   HEAP32[$25>>2] = $24;
   $26 = HEAP32[$pBuf>>2]|0;
   $27 = (($26) + 4|0);
   $28 = $0;
   HEAP32[$28>>2] = $27;
   $29 = HEAP32[$pBuf>>2]|0;
   ;HEAP8[$29+0>>0]=0|0;HEAP8[$29+1>>0]=0|0;HEAP8[$29+2>>0]=0|0;HEAP8[$29+3>>0]=0|0;
   $30 = $0;
   $31 = (($30) + 8|0);
   HEAP32[$31>>2] = 0;
   $32 = $0;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[$33>>2] = $35;
  }
  $36 = $0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (16384 - ($38))|0;
  $cl = $39;
  $40 = $cl;
  $41 = $2;
  $42 = ($40>>>0)>($41>>>0);
  if ($42) {
   $43 = $2;
   $cl = $43;
  }
  $44 = $0;
  $45 = HEAP32[$44>>2]|0;
  $46 = $0;
  $47 = (($46) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($45) + ($48)|0);
  $50 = $1;
  $51 = $cl;
  _memcpy(($49|0),($50|0),($51|0))|0;
  $52 = $cl;
  $53 = $0;
  $54 = (($53) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($52))|0;
  HEAP32[$54>>2] = $56;
  $57 = $1;
  $58 = $cl;
  $59 = (($57) + ($58)|0);
  $1 = $59;
  $60 = $cl;
  $61 = $2;
  $62 = (($61) - ($60))|0;
  $2 = $62;
  $63 = $cl;
  $64 = $0;
  $65 = (($64) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($63))|0;
  HEAP32[$65>>2] = $67;
 }
 if ((label|0) == 9) {
  $22 = $err;
  $err = $22;
  $68 = $err;
  STACKTOP = sp;return ($68|0);
 }
 else if ((label|0) == 15) {
  $68 = $err;
  STACKTOP = sp;return ($68|0);
 }
 return 0|0;
}
function _SetPosWS_List($pWS,$offPos) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $off = 0, $pBuf = 0, $pNextBuf = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pWS;
 $2 = $offPos;
 $err = 0;
 $3 = $2;
 $off = $3;
 $4 = $2;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>($7>>>0);
 if ($8) {
  $0 = -116;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $9 = $2;
 $10 = (0)==($9|0);
 if ($10) {
  $11 = $1;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (0)==($13|0);
  if ($14) {
   $0 = 0;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 }
 $15 = $2;
 $16 = $1;
 $17 = (($16) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15>>>0)<($18>>>0);
 if ($19) {
  $0 = -117;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $20 = $1;
 $21 = (($20) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $off;
 $24 = (($23) - ($22))|0;
 $off = $24;
 $25 = $1;
 $26 = (($25) + 56|0);
 $27 = HEAP32[$26>>2]|0;
 $pBuf = $27;
 $28 = $1;
 $29 = (($28) + 8|0);
 HEAP32[$29>>2] = 0;
 $30 = $1;
 $31 = (($30) + 12|0);
 HEAP32[$31>>2] = 1;
 while(1) {
  $32 = $off;
  $33 = ($32>>>0)>=(16384);
  if (!($33)) {
   break;
  }
  $34 = $pBuf;
  $35 = HEAP32[$34>>2]|0;
  $pNextBuf = $35;
  $36 = $pNextBuf;
  $37 = (0|0)==($36|0);
  if ($37) {
   label = 11;
   break;
  }
  $38 = $1;
  $39 = (($38) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$39>>2] = $41;
  $42 = $pNextBuf;
  $pBuf = $42;
  $43 = $off;
  $44 = (($43) - 16384)|0;
  $off = $44;
 }
 if ((label|0) == 11) {
 }
 $45 = $off;
 $46 = $1;
 $47 = (($46) + 8|0);
 HEAP32[$47>>2] = $45;
 $48 = $pBuf;
 $49 = (0|0)==($48|0);
 if ($49) {
  $53 = 0;
 } else {
  $50 = $pBuf;
  $51 = (($50) + 4|0);
  $53 = $51;
 }
 $52 = $1;
 HEAP32[$52>>2] = $53;
 $54 = $err;
 $0 = $54;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _GetPosWS_List($pWS,$poffPos) {
 $pWS = $pWS|0;
 $poffPos = $poffPos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $poffPos;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (0)==($4|0);
 if ($5) {
  $20 = 0;
  $19 = $1;
  HEAP32[$19>>2] = $20;
  STACKTOP = sp;return 0;
 } else {
  $6 = $0;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $0;
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($8) + ($11))|0;
  $13 = $0;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) - 1)|0;
  $17 = $16<<14;
  $18 = (($12) + ($17))|0;
  $20 = $18;
  $19 = $1;
  HEAP32[$19>>2] = $20;
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _DiscardHeadWS_List($pWS,$cBytes,$pDiscarded) {
 $pWS = $pWS|0;
 $cBytes = $cBytes|0;
 $pDiscarded = $pDiscarded|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $currPos = 0, $err = 0, $pBuf = 0, $pHead = 0, $pNextBuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pBuf = sp + 4|0;
 $1 = $pWS;
 $2 = $cBytes;
 $3 = $pDiscarded;
 $err = 0;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (0)==($6|0);
 if ($7) {
  $8 = $2;
  $9 = ($8>>>0)>(0);
  if ($9) {
   $10 = $3;
   HEAP32[$10>>2] = 0;
   $0 = -116;
   $87 = $0;
   STACKTOP = sp;return ($87|0);
  }
 }
 $11 = $1;
 $12 = (($11) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ($13>>>0)>=($14>>>0);
 if ($15) {
  $16 = $1;
  $17 = (($16) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  HEAP32[$19>>2] = $18;
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $20 = $1;
 $21 = (($20) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 HEAP32[$23>>2] = $22;
 $24 = $1;
 $25 = (($24) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = (($27) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($26) + ($29))|0;
 $31 = $1;
 $32 = (($31) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) - 1)|0;
 $35 = $34<<14;
 $36 = (($30) + ($35))|0;
 $currPos = $36;
 $37 = $2;
 $38 = $currPos;
 $39 = ($37>>>0)>($38>>>0);
 if ($39) {
  $40 = $currPos;
  $2 = $40;
 }
 $41 = $2;
 $42 = $1;
 $43 = (($42) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41>>>0)>($44>>>0);
 if ($45) {
  $46 = $1;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $2 = $48;
 }
 $49 = $2;
 $50 = $1;
 $51 = (($50) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 16384)|0;
 $54 = ($49>>>0)<($53>>>0);
 if ($54) {
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $55 = $1;
 $56 = (($55) + 56|0);
 $pHead = $56;
 $57 = $pHead;
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$pBuf>>2] = $58;
 $59 = $1;
 $60 = (($59) + 16|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $2;
 $63 = (($62) - ($61))|0;
 $2 = $63;
 while(1) {
  $64 = $2;
  $65 = ($64>>>0)>=(16384);
  if (!($65)) {
   break;
  }
  $66 = HEAP32[$pBuf>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  $pNextBuf = $67;
  (_WMPFree($pBuf)|0);
  $68 = $pNextBuf;
  HEAP32[$pBuf>>2] = $68;
  $69 = $2;
  $70 = (($69) - 16384)|0;
  $2 = $70;
  $71 = $3;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + 16384)|0;
  HEAP32[$71>>2] = $73;
  $74 = $1;
  $75 = (($74) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + -1)|0;
  HEAP32[$75>>2] = $77;
 }
 $78 = HEAP32[$pBuf>>2]|0;
 $79 = $pHead;
 HEAP32[$79>>2] = $78;
 $80 = HEAP32[$pBuf>>2]|0;
 $81 = (0|0)==($80|0);
 if ($81) {
  $82 = $1;
  HEAP32[$82>>2] = 0;
 }
 $83 = $3;
 $84 = HEAP32[$83>>2]|0;
 $85 = $1;
 $86 = (($85) + 16|0);
 HEAP32[$86>>2] = $84;
 $0 = 0;
 $87 = $0;
 STACKTOP = sp;return ($87|0);
}
function _attach_SB($pSB,$pWS) {
 $pSB = $pSB|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSB;
 $1 = $pWS;
 $2 = $1;
 $3 = $0;
 HEAP32[$3>>2] = $2;
 $4 = $0;
 $5 = (($4) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = $0;
 $7 = (($6) + 8|0);
 HEAP8[$7>>0] = 0;
 $8 = $0;
 $9 = (($8) + 12|0);
 HEAP32[$9>>2] = 0;
 STACKTOP = sp;return 0;
}
function _getBit32_SB($pSB,$cBits,$prc) {
 $pSB = $pSB|0;
 $cBits = $cBits|0;
 $prc = $prc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSB;
 $1 = $cBits;
 $2 = $prc;
 $err = 0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 while(1) {
  $4 = $0;
  $5 = (($4) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $0;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 << $11;
  HEAP32[$12>>2] = $14;
  $15 = $0;
  $16 = (($15) + 8|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $0;
  $20 = (($19) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (8 - ($21))|0;
  $23 = $18 >> $22;
  $24 = $2;
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | $23;
  HEAP32[$24>>2] = $26;
  $27 = $0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = (($30) - ($29))|0;
  $1 = $31;
  $32 = $0;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  $37 = HEAP32[$36>>2]|0;
  $38 = $0;
  $39 = (($38) + 8|0);
  $40 = (FUNCTION_TABLE_iiii[$35 & 255]($37,$39,1)|0);
  $err = $40;
  $41 = ($40|0)<(0);
  if ($41) {
   label = 4;
   break;
  }
  $43 = $err;
  $err = $43;
  $44 = $0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$45>>2] = $47;
  $48 = $0;
  $49 = (($48) + 12|0);
  HEAP32[$49>>2] = 8;
 }
 if ((label|0) == 4) {
  $42 = $err;
  $err = $42;
  $76 = $err;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 7) {
  $50 = $1;
  $51 = $2;
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 << $50;
  HEAP32[$51>>2] = $53;
  $54 = $0;
  $55 = (($54) + 8|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $1;
  $59 = (8 - ($58))|0;
  $60 = $57 >> $59;
  $61 = $2;
  $62 = HEAP32[$61>>2]|0;
  $63 = $62 | $60;
  HEAP32[$61>>2] = $63;
  $64 = $1;
  $65 = $0;
  $66 = (($65) + 8|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $68 << $64;
  $70 = $69&255;
  HEAP8[$66>>0] = $70;
  $71 = $1;
  $72 = $0;
  $73 = (($72) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) - ($71))|0;
  HEAP32[$73>>2] = $75;
  $76 = $err;
  STACKTOP = sp;return ($76|0);
 }
 return 0|0;
}
function _flushToByte_SB($pSB) {
 $pSB = $pSB|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSB;
 $1 = $0;
 $2 = (($1) + 8|0);
 HEAP8[$2>>0] = 0;
 $3 = $0;
 $4 = (($3) + 12|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _getByteRead_SB($pSB) {
 $pSB = $pSB|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSB;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _detach_SB($pSB) {
 $pSB = $pSB|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSB;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (0)==($3|0);
 if ($4) {
  $5 = $0;
  HEAP32[$5>>2] = 0;
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((14680|0),(14640|0),854,(14704|0));
  // unreachable;
 }
 return 0|0;
}
function __byteswap_ulong($bits) {
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bits;
 $1 = $0;
 $2 = $1 & 255;
 $3 = $2 << 24;
 $r = $3;
 $4 = $0;
 $5 = $4 << 8;
 $6 = $5 & 16711680;
 $7 = $r;
 $8 = $7 | $6;
 $r = $8;
 $9 = $0;
 $10 = $9 >>> 8;
 $11 = $10 & 65280;
 $12 = $r;
 $13 = $12 | $11;
 $r = $13;
 $14 = $0;
 $15 = $14 >>> 24;
 $16 = $15 & 255;
 $17 = $r;
 $18 = $17 | $16;
 $r = $18;
 $19 = $r;
 STACKTOP = sp;return ($19|0);
}
function _load4BE($pv) {
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pv;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__byteswap_ulong($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _AllocateIndexTable($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $availSubband = 0, $cTableEntriesPerTile = 0, $cTableEntriesPerTileRow = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 84|0);
 $4 = (($3) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $availSubband = $5;
 $6 = $availSubband;
 $7 = ($6|0)==(3);
 if ($7) {
  $13 = 1;
 } else {
  $8 = $availSubband;
  $9 = ($8|0)==(2);
  if ($9) {
   $75 = 2;
  } else {
   $10 = $availSubband;
   $11 = ($10|0)==(1);
   $12 = $11 ? 3 : 4;
   $75 = $12;
  }
  $13 = $75;
 }
 $cTableEntriesPerTile = $13;
 $14 = $1;
 $15 = (($14) + 34136|0);
 $16 = (($15) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 do {
  if ($18) {
   $34 = $1;
   $35 = (($34) + 84|0);
   $36 = (($35) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = $1;
    $40 = (($39) + 84|0);
    $41 = (($40) + 64|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + 1)|0;
    $cTableEntriesPerTileRow = $43;
   } else {
    $44 = $1;
    $45 = (($44) + 84|0);
    $46 = (($45) + 64|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 1)|0;
    $49 = $cTableEntriesPerTile;
    $50 = Math_imul($48, $49)|0;
    $cTableEntriesPerTileRow = $50;
   }
  } else {
   $19 = $1;
   $20 = (($19) + 84|0);
   $21 = (($20) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0);
   if (!($23)) {
    ___assert_fail((14720|0),(14640|0),945,(14840|0));
    // unreachable;
   }
   $24 = $1;
   $25 = (($24) + 84|0);
   $26 = (($25) + 16452|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = (($28) + 84|0);
   $30 = (($29) + 64|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($27) + ($31))|0;
   $33 = ($32|0)==(0);
   if ($33) {
    $cTableEntriesPerTileRow = 0;
    break;
   } else {
    ___assert_fail((14720|0),(14640|0),945,(14840|0));
    // unreachable;
   }
  }
 } while(0);
 $51 = $cTableEntriesPerTileRow;
 $52 = ($51>>>0)>(0);
 do {
  if ($52) {
   $53 = $cTableEntriesPerTileRow;
   $54 = $1;
   $55 = (($54) + 84|0);
   $56 = (($55) + 16452|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 1)|0;
   $59 = Math_imul($53, $58)|0;
   $60 = $59<<2;
   $61 = (_malloc($60)|0);
   $62 = $1;
   $63 = (($62) + 34288|0);
   HEAP32[$63>>2] = $61;
   $64 = $1;
   $65 = (($64) + 34288|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (0|0)==($66|0);
   if (!($67)) {
    break;
   }
   $0 = -1;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 } while(0);
 $68 = $cTableEntriesPerTile;
 $69 = $1;
 $70 = (($69) + 34256|0);
 HEAP32[$70>>2] = $68;
 $71 = $cTableEntriesPerTileRow;
 $72 = $1;
 $73 = (($72) + 34260|0);
 HEAP32[$73>>2] = $71;
 $0 = 0;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _allocateBitIOInfo($pSC,$failSafe) {
 $pSC = $pSC|0;
 $failSafe = $failSafe|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $availSubband = 0, $cNumBitIO = 0, $sbSubband = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $failSafe;
 $3 = $1;
 $4 = (($3) + 84|0);
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $sbSubband = $6;
 $7 = $1;
 $8 = (($7) + 84|0);
 $9 = (($8) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $availSubband = $10;
 $11 = $availSubband;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $sbSubband;
  $14 = (0)==($13|0);
  if ($14) {
   $15 = $availSubband;
   $sbSubband = $15;
  } else {
   $16 = $availSubband;
   $17 = $sbSubband;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = $availSubband;
    $21 = $19;
   } else {
    $20 = $sbSubband;
    $21 = $20;
   }
   $sbSubband = $21;
  }
  $22 = $sbSubband;
  $23 = $1;
  $24 = (($23) + 84|0);
  $25 = (($24) + 44|0);
  HEAP32[$25>>2] = $22;
 }
 $26 = $sbSubband;
 $27 = ($26|0)==(3);
 if ($27) {
  $35 = 1;
 } else {
  $28 = $sbSubband;
  $29 = ($28|0)==(2);
  if ($29) {
   $103 = 2;
  } else {
   $30 = $sbSubband;
   $31 = ($30|0)==(1);
   $32 = $31 ? 3 : 4;
   $103 = $32;
  }
  $35 = $103;
 }
 $33 = $1;
 $34 = (($33) + 34252|0);
 HEAP32[$34>>2] = $35;
 $36 = $1;
 $37 = (($36) + 34136|0);
 $38 = (($37) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 do {
  if ($40) {
   $56 = $1;
   $57 = (($56) + 84|0);
   $58 = (($57) + 28|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0);
   if ($60) {
    $61 = $1;
    $62 = (($61) + 84|0);
    $63 = (($62) + 64|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + 1)|0;
    $cNumBitIO = $65;
   } else {
    $66 = $1;
    $67 = (($66) + 84|0);
    $68 = (($67) + 64|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + 1)|0;
    $71 = $1;
    $72 = (($71) + 34252|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = Math_imul($70, $73)|0;
    $cNumBitIO = $74;
   }
  } else {
   $41 = $1;
   $42 = (($41) + 84|0);
   $43 = (($42) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0);
   if (!($45)) {
    ___assert_fail((14720|0),(14640|0),994,(14864|0));
    // unreachable;
   }
   $46 = $1;
   $47 = (($46) + 84|0);
   $48 = (($47) + 16452|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $1;
   $51 = (($50) + 84|0);
   $52 = (($51) + 64|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($49) + ($53))|0;
   $55 = ($54|0)==(0);
   if ($55) {
    $cNumBitIO = 0;
    break;
   } else {
    ___assert_fail((14720|0),(14640|0),994,(14864|0));
    // unreachable;
   }
  }
 } while(0);
 $75 = $cNumBitIO;
 $76 = ($75>>>0)>(16384);
 if ($76) {
  $0 = -1;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $77 = $cNumBitIO;
 $78 = ($77>>>0)>(0);
 if ($78) {
  $79 = $1;
  $80 = $cNumBitIO;
  $81 = (_AllocateBitIOEntries($79,$80)|0);
  $82 = $1;
  $83 = (($82) + 34320|0);
  HEAP32[$83>>2] = $81;
  $84 = $1;
  $85 = (($84) + 34320|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (0|0)==($86|0);
  if ($87) {
   $0 = -1;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
  $88 = $2;
  $89 = ($88|0)!=(0);
  do {
   if ($89) {
    $90 = $1;
    $91 = $cNumBitIO;
    $92 = (_AllocateBitIOEntries($90,$91)|0);
    $93 = $1;
    $94 = (($93) + 34324|0);
    HEAP32[$94>>2] = $92;
    $95 = $1;
    $96 = (($95) + 34324|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (0|0)==($97|0);
    if (!($98)) {
     break;
    }
    $0 = -1;
    $102 = $0;
    STACKTOP = sp;return ($102|0);
   }
  } while(0);
 }
 $99 = $cNumBitIO;
 $100 = $1;
 $101 = (($100) + 34328|0);
 HEAP32[$101>>2] = $99;
 $0 = 0;
 $102 = $0;
 STACKTOP = sp;return ($102|0);
}
function _AllocateBitIOEntries($pSC,$cNumBitIO) {
 $pSC = $pSC|0;
 $cNumBitIO = $cNumBitIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cb = 0;
 var $entries = 0, $i = 0, $pb = 0, $pba = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $cNumBitIO;
 $i = 0;
 $3 = $2;
 $4 = $3<<2;
 $5 = (($4) + 16383)|0;
 $6 = $2;
 $7 = $6<<14;
 $8 = (($5) + ($7))|0;
 $cb = $8;
 $9 = $cb;
 $10 = (_malloc($9)|0);
 $pb = $10;
 $11 = $pb;
 $12 = (0|0)==($11|0);
 if ($12) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = $pb;
 $14 = $cb;
 _memset(($13|0),0,($14|0))|0;
 $15 = $pb;
 $entries = $15;
 $16 = $2;
 $17 = $16<<2;
 $18 = $pb;
 $19 = (($18) + ($17)|0);
 $pb = $19;
 $20 = $pb;
 $21 = $20;
 $22 = (($21) + 16383)|0;
 $23 = $22 & -16384;
 $24 = $23;
 $25 = (($24) + 8192|0);
 $pba = $25;
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = $2;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $pba;
  $30 = $i;
  $31 = $entries;
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = $pba;
  $34 = (($33) + 16384|0);
  $pba = $34;
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 $37 = $entries;
 $0 = $37;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _setBitIOPointers($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $j = 0, $pContext = 0, $pContext1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34328|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>(0);
 if (!($4)) {
  $87 = $0;
  $88 = (($87) + 34336|0);
  $89 = HEAP32[$88>>2]|0;
  $pContext1 = $89;
  $90 = $0;
  $91 = (($90) + 34272|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $pContext1;
  $94 = (($93) + 12|0);
  HEAP32[$94>>2] = $92;
  $95 = $pContext1;
  $96 = (($95) + 8|0);
  HEAP32[$96>>2] = $92;
  $97 = $pContext1;
  $98 = (($97) + 4|0);
  HEAP32[$98>>2] = $92;
  $99 = $pContext1;
  HEAP32[$99>>2] = $92;
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $0;
  $7 = (($6) + 84|0);
  $8 = (($7) + 64|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($5>>>0)<=($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $0;
  $13 = (($12) + 34336|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + (($11*592)|0)|0);
  $pContext = $15;
  $16 = $0;
  $17 = (($16) + 84|0);
  $18 = (($17) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = $i;
   $22 = $0;
   $23 = (($22) + 34320|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $pContext;
   $28 = (($27) + 12|0);
   HEAP32[$28>>2] = $26;
   $29 = $pContext;
   $30 = (($29) + 8|0);
   HEAP32[$30>>2] = $26;
   $31 = $pContext;
   $32 = (($31) + 4|0);
   HEAP32[$32>>2] = $26;
   $33 = $pContext;
   HEAP32[$33>>2] = $26;
  } else {
   $34 = $0;
   $35 = (($34) + 34252|0);
   $36 = HEAP32[$35>>2]|0;
   $j = $36;
   $37 = $i;
   $38 = $j;
   $39 = Math_imul($37, $38)|0;
   $40 = $0;
   $41 = (($40) + 34320|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $pContext;
   HEAP32[$45>>2] = $44;
   $46 = $j;
   $47 = ($46>>>0)>(1);
   if ($47) {
    $48 = $i;
    $49 = $j;
    $50 = Math_imul($48, $49)|0;
    $51 = (($50) + 1)|0;
    $52 = $0;
    $53 = (($52) + 34320|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + ($51<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $pContext;
    $58 = (($57) + 4|0);
    HEAP32[$58>>2] = $56;
   }
   $59 = $j;
   $60 = ($59>>>0)>(2);
   if ($60) {
    $61 = $i;
    $62 = $j;
    $63 = Math_imul($61, $62)|0;
    $64 = (($63) + 2)|0;
    $65 = $0;
    $66 = (($65) + 34320|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + ($64<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $pContext;
    $71 = (($70) + 8|0);
    HEAP32[$71>>2] = $69;
   }
   $72 = $j;
   $73 = ($72>>>0)>(3);
   if ($73) {
    $74 = $i;
    $75 = $j;
    $76 = Math_imul($74, $75)|0;
    $77 = (($76) + 3)|0;
    $78 = $0;
    $79 = (($78) + 34320|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + ($77<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $pContext;
    $84 = (($83) + 12|0);
    HEAP32[$84>>2] = $82;
   }
  }
  $85 = $i;
  $86 = (($85) + 1)|0;
  $i = $86;
 }
 STACKTOP = sp;return 0;
}
function _allocateTileInfo($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 84|0);
 $4 = (($3) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)>=(4096);
 if ($6) {
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $7 = $1;
 $8 = (($7) + 84|0);
 $9 = (($8) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 $12 = ($11*240)|0;
 $13 = (_malloc($12)|0);
 $14 = $1;
 $15 = (($14) + 34316|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = (($16) + 34316|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $20 = $1;
 $21 = (($20) + 34316|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $1;
 $24 = (($23) + 84|0);
 $25 = (($24) + 64|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 $28 = ($27*240)|0;
 _memset(($22|0),0,($28|0))|0;
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $1;
  $31 = (($30) + 84|0);
  $32 = (($31) + 64|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($29>>>0)<=($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $i;
  $36 = $1;
  $37 = (($36) + 34316|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + (($35*240)|0)|0);
  $40 = (($39) + 192|0);
  HEAP8[$40>>0] = 1;
  $41 = $i;
  $42 = $1;
  $43 = (($42) + 34316|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + (($41*240)|0)|0);
  $46 = (($45) + 193|0);
  HEAP8[$46>>0] = 1;
  $47 = $i;
  $48 = $1;
  $49 = (($48) + 34316|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($47*240)|0)|0);
  $52 = (($51) + 194|0);
  HEAP8[$52>>0] = 0;
  $53 = $i;
  $54 = $1;
  $55 = (($54) + 34316|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + (($53*240)|0)|0);
  $58 = (($57) + 195|0);
  HEAP8[$58>>0] = 0;
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 $0 = 0;
 $61 = $0;
 STACKTOP = sp;return ($61|0);
}
function _freeTileInfo($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $iTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 34136|0);
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $iTile = 0;
  while(1) {
   $7 = $iTile;
   $8 = $0;
   $9 = (($8) + 84|0);
   $10 = (($9) + 64|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($7>>>0)<=($11>>>0);
   if (!($12)) {
    break;
   }
   $13 = $iTile;
   $14 = $0;
   $15 = (($14) + 34316|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + (($13*240)|0)|0);
   _freeQuantizer($17);
   $18 = $iTile;
   $19 = (($18) + 1)|0;
   $iTile = $19;
  }
 } else {
  $20 = $0;
  $21 = (($20) + 34316|0);
  $22 = HEAP32[$21>>2]|0;
  _freeQuantizer($22);
 }
 $23 = $0;
 $24 = (($23) + 84|0);
 $25 = (($24) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(3);
 if ($27) {
  $28 = $0;
  $29 = (($28) + 34136|0);
  $30 = (($29) + 60|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & 2;
  $33 = ($32|0)!=(0);
  if ($33) {
   $iTile = 0;
   while(1) {
    $34 = $iTile;
    $35 = $0;
    $36 = (($35) + 84|0);
    $37 = (($36) + 64|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($34>>>0)<=($38>>>0);
    if (!($39)) {
     break;
    }
    $40 = $iTile;
    $41 = $0;
    $42 = (($41) + 34316|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + (($40*240)|0)|0);
    $45 = (($44) + 64|0);
    _freeQuantizer($45);
    $46 = $iTile;
    $47 = (($46) + 1)|0;
    $iTile = $47;
   }
  } else {
   $48 = $0;
   $49 = (($48) + 34316|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 64|0);
   _freeQuantizer($51);
  }
 }
 $52 = $0;
 $53 = (($52) + 84|0);
 $54 = (($53) + 44|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(3);
 if ($56) {
  $57 = $0;
  $58 = (($57) + 84|0);
  $59 = (($58) + 44|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(2);
  if ($61) {
   $62 = $0;
   $63 = (($62) + 34136|0);
   $64 = (($63) + 60|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 & 4;
   $67 = ($66|0)!=(0);
   if ($67) {
    $iTile = 0;
    while(1) {
     $68 = $iTile;
     $69 = $0;
     $70 = (($69) + 84|0);
     $71 = (($70) + 64|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($68>>>0)<=($72>>>0);
     if (!($73)) {
      break;
     }
     $74 = $iTile;
     $75 = $0;
     $76 = (($75) + 34316|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + (($74*240)|0)|0);
     $79 = (($78) + 128|0);
     _freeQuantizer($79);
     $80 = $iTile;
     $81 = (($80) + 1)|0;
     $iTile = $81;
    }
   } else {
    $82 = $0;
    $83 = (($82) + 34316|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + 128|0);
    _freeQuantizer($85);
   }
  }
 }
 $86 = $0;
 $87 = (($86) + 34316|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)!=(0|0);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 $90 = $0;
 $91 = (($90) + 34316|0);
 $92 = HEAP32[$91>>2]|0;
 _free($92);
 STACKTOP = sp;return;
}
function _freeQuantizer($pQuantizer) {
 $pQuantizer = $pQuantizer|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pQuantizer;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 STACKTOP = sp;return;
}
function _allocateQuantizer($pQuantizer,$cChannel,$cQP) {
 $pQuantizer = $pQuantizer|0;
 $cChannel = $cChannel|0;
 $cQP = $cQP|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iCh = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pQuantizer;
 $2 = $cChannel;
 $3 = $cQP;
 $4 = $3;
 $5 = ($4>>>0)>(16);
 if (!($5)) {
  $6 = $2;
  $7 = ($6>>>0)>(16);
  if (!($7)) {
   $8 = $3;
   $9 = ($8*20)|0;
   $10 = $2;
   $11 = Math_imul($9, $10)|0;
   $12 = (_malloc($11)|0);
   $13 = $1;
   HEAP32[$13>>2] = $12;
   $14 = $1;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $0 = -1;
    $32 = $0;
    STACKTOP = sp;return ($32|0);
   }
   $iCh = 1;
   while(1) {
    $17 = $iCh;
    $18 = $2;
    $19 = ($17>>>0)<($18>>>0);
    if (!($19)) {
     break;
    }
    $20 = $iCh;
    $21 = (($20) - 1)|0;
    $22 = $1;
    $23 = (($22) + ($21<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $3;
    $26 = (($24) + (($25*20)|0)|0);
    $27 = $iCh;
    $28 = $1;
    $29 = (($28) + ($27<<2)|0);
    HEAP32[$29>>2] = $26;
    $30 = $iCh;
    $31 = (($30) + 1)|0;
    $iCh = $31;
   }
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 }
 $0 = -1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _formatQuantizer($pQuantizer,$cChMode,$cCh,$iPos,$bShiftedUV,$bScaledArith) {
 $pQuantizer = $pQuantizer|0;
 $cChMode = $cChMode|0;
 $cCh = $cCh|0;
 $iPos = $iPos|0;
 $bShiftedUV = $bShiftedUV|0;
 $bScaledArith = $bScaledArith|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iCh = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pQuantizer;
 $1 = $cChMode;
 $2 = $cCh;
 $3 = $iPos;
 $4 = $bShiftedUV;
 $5 = $bScaledArith;
 $iCh = 0;
 while(1) {
  $6 = $iCh;
  $7 = $2;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $iCh;
  $10 = ($9>>>0)>(0);
  if ($10) {
   $11 = $1;
   $12 = $11&255;
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = $3;
    $15 = $iCh;
    $16 = $0;
    $17 = (($16) + ($15<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + (($14*20)|0)|0);
    $20 = $3;
    $21 = $0;
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + (($20*20)|0)|0);
    ;HEAP32[$19+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$19+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[$23+12>>2]|0;HEAP32[$19+16>>2]=HEAP32[$23+16>>2]|0;
   } else {
    $24 = $1;
    $25 = $24&255;
    $26 = ($25|0)==(1);
    if ($26) {
     $27 = $3;
     $28 = $iCh;
     $29 = $0;
     $30 = (($29) + ($28<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (($31) + (($27*20)|0)|0);
     $33 = $3;
     $34 = $0;
     $35 = (($34) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (($36) + (($33*20)|0)|0);
     ;HEAP32[$32+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$32+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$37+12>>2]|0;HEAP32[$32+16>>2]=HEAP32[$37+16>>2]|0;
    }
   }
  }
  $38 = $iCh;
  $39 = $0;
  $40 = (($39) + ($38<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $3;
  $43 = (($41) + (($42*20)|0)|0);
  $44 = $iCh;
  $45 = ($44>>>0)>(0);
  if ($45) {
   $46 = $4;
   $47 = ($46|0)==(1);
   $49 = $47;
  } else {
   $49 = 0;
  }
  $48 = $49 ? 0 : 1;
  $50 = $5;
  _remapQP($43,$48,$50);
  $51 = $iCh;
  $52 = (($51) + 1)|0;
  $iCh = $52;
 }
 STACKTOP = sp;return;
}
function _setUniformQuantizer($pSC,$sb) {
 $pSC = $pSC|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $iCh = 0, $iTile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $sb;
 $iCh = 0;
 while(1) {
  $2 = $iCh;
  $3 = $0;
  $4 = (($3) + 34136|0);
  $5 = (($4) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($2>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $iTile = 1;
  while(1) {
   $8 = $iTile;
   $9 = $0;
   $10 = (($9) + 84|0);
   $11 = (($10) + 64|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($8>>>0)<=($12>>>0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = $iCh;
    $17 = $0;
    $18 = (($17) + 34316|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + ($16<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $iCh;
    $23 = $iTile;
    $24 = $0;
    $25 = (($24) + 34316|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + (($23*240)|0)|0);
    $28 = (($27) + ($22<<2)|0);
    HEAP32[$28>>2] = $21;
   } else {
    $29 = $1;
    $30 = ($29|0)==(1);
    if ($30) {
     $31 = $iCh;
     $32 = $0;
     $33 = (($32) + 34316|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 64|0);
     $36 = (($35) + ($31<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $iCh;
     $39 = $iTile;
     $40 = $0;
     $41 = (($40) + 34316|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($42) + (($39*240)|0)|0);
     $44 = (($43) + 64|0);
     $45 = (($44) + ($38<<2)|0);
     HEAP32[$45>>2] = $37;
    } else {
     $46 = $iCh;
     $47 = $0;
     $48 = (($47) + 34316|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (($49) + 128|0);
     $51 = (($50) + ($46<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $iCh;
     $54 = $iTile;
     $55 = $0;
     $56 = (($55) + 34316|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + (($54*240)|0)|0);
     $59 = (($58) + 128|0);
     $60 = (($59) + ($53<<2)|0);
     HEAP32[$60>>2] = $52;
    }
   }
   $61 = $iTile;
   $62 = (($61) + 1)|0;
   $iTile = $62;
  }
  $63 = $iCh;
  $64 = (($63) + 1)|0;
  $iCh = $64;
 }
 STACKTOP = sp;return;
}
function _useDCQuantizer($pSC,$iTile) {
 $pSC = $pSC|0;
 $iTile = $iTile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iCh = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $iTile;
 $iCh = 0;
 while(1) {
  $2 = $iCh;
  $3 = $0;
  $4 = (($3) + 34136|0);
  $5 = (($4) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($2>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $iCh;
  $9 = $1;
  $10 = $0;
  $11 = (($10) + 34316|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + (($9*240)|0)|0);
  $14 = (($13) + 64|0);
  $15 = (($14) + ($8<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $iCh;
  $18 = $1;
  $19 = $0;
  $20 = (($19) + 34316|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + (($18*240)|0)|0);
  $23 = (($22) + ($17<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  ;HEAP32[$16+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$24+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[$24+16>>2]|0;
  $25 = $iCh;
  $26 = (($25) + 1)|0;
  $iCh = $26;
 }
 STACKTOP = sp;return;
}
function _useLPQuantizer($pSC,$cQP,$iTile) {
 $pSC = $pSC|0;
 $cQP = $cQP|0;
 $iTile = $iTile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iCh = 0, $iQP = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $cQP;
 $2 = $iTile;
 $iCh = 0;
 while(1) {
  $3 = $iCh;
  $4 = $0;
  $5 = (($4) + 34136|0);
  $6 = (($5) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($3>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $iQP = 0;
  while(1) {
   $9 = $iQP;
   $10 = $1;
   $11 = ($9>>>0)<($10>>>0);
   if (!($11)) {
    break;
   }
   $12 = $iQP;
   $13 = $iCh;
   $14 = $2;
   $15 = $0;
   $16 = (($15) + 34316|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + (($14*240)|0)|0);
   $19 = (($18) + 128|0);
   $20 = (($19) + ($13<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + (($12*20)|0)|0);
   $23 = $iQP;
   $24 = $iCh;
   $25 = $2;
   $26 = $0;
   $27 = (($26) + 34316|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + (($25*240)|0)|0);
   $30 = (($29) + 64|0);
   $31 = (($30) + ($24<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + (($23*20)|0)|0);
   ;HEAP32[$22+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$22+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$33+12>>2]|0;HEAP32[$22+16>>2]=HEAP32[$33+16>>2]|0;
   $34 = $iQP;
   $35 = (($34) + 1)|0;
   $iQP = $35;
  }
  $36 = $iCh;
  $37 = (($36) + 1)|0;
  $iCh = $37;
 }
 STACKTOP = sp;return;
}
function _dquantBits($cQP) {
 $cQP = $cQP|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cQP;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)<(2);
 if ($3) {
  $15 = 0;
  $14 = $15&255;
  STACKTOP = sp;return ($14|0);
 }
 $4 = $0;
 $5 = $4&255;
 $6 = ($5|0)<(4);
 if ($6) {
  $16 = 1;
 } else {
  $7 = $0;
  $8 = $7&255;
  $9 = ($8|0)<(6);
  if ($9) {
   $17 = 2;
  } else {
   $10 = $0;
   $11 = $10&255;
   $12 = ($11|0)<(10);
   $13 = $12 ? 3 : 4;
   $17 = $13;
  }
  $16 = $17;
 }
 $15 = $16;
 $14 = $15&255;
 STACKTOP = sp;return ($14|0);
}
function _peekBit16($pIO,$cBits) {
 $pIO = $pIO|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cBits;
 $2 = $1;
 $3 = (0)<=($2|0);
 if ($3) {
  $4 = $1;
  $5 = ($4>>>0)<=(16);
  if ($5) {
   $6 = $0;
   $7 = (($6) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $1;
   $10 = (32 - ($9))|0;
   $11 = $8 >>> $10;
   STACKTOP = sp;return ($11|0);
  }
 }
 ___assert_fail((14888|0),(14640|0),1184,(14920|0));
 // unreachable;
 return 0|0;
}
function _flushBit16($pIO,$cBits) {
 $pIO = $pIO|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cBits;
 $2 = $1;
 $3 = (0)<=($2|0);
 if (!($3)) {
  ___assert_fail((14888|0),(14640|0),1189,(14936|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4>>>0)<=(16);
 if (!($5)) {
  ___assert_fail((14888|0),(14640|0),1189,(14936|0));
  // unreachable;
 }
 $6 = $0;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $1;
  $12 = $0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11))|0;
  HEAP32[$13>>2] = $15;
  $16 = $0;
  $17 = (($16) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 >>> 3;
  $23 = (($18) + ($22)|0);
  $24 = $23;
  $25 = $0;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $24 & $27;
  $29 = $28;
  $30 = $0;
  $31 = (($30) + 20|0);
  HEAP32[$31>>2] = $29;
  $32 = $0;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & 15;
  HEAP32[$33>>2] = $35;
  $36 = $0;
  $37 = (($36) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_load4BE($38)|0);
  $40 = $0;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $39 << $42;
  $44 = $0;
  $45 = (($44) + 4|0);
  HEAP32[$45>>2] = $43;
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((14952|0),(14640|0),1189,(14936|0));
  // unreachable;
 }
 return 0|0;
}
function _getBit32($pIO,$cBits) {
 $pIO = $pIO|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $uiRet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $cBits;
 $uiRet = 0;
 $2 = $1;
 $3 = (0)<=($2|0);
 if (!($3)) {
  ___assert_fail((14976|0),(14640|0),1228,(15008|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4>>>0)<=(32);
 if (!($5)) {
  ___assert_fail((14976|0),(14640|0),1228,(15008|0));
  // unreachable;
 }
 $6 = $1;
 $7 = (16)<($6>>>0);
 if ($7) {
  $8 = $0;
  $9 = (_getBit16($8,16)|0);
  $uiRet = $9;
  $10 = $1;
  $11 = (($10) - 16)|0;
  $1 = $11;
  $12 = $1;
  $13 = $uiRet;
  $14 = $13 << $12;
  $uiRet = $14;
 }
 $15 = $0;
 $16 = $1;
 $17 = (_getBit16($15,$16)|0);
 $18 = $uiRet;
 $19 = $18 | $17;
 $uiRet = $19;
 $20 = $uiRet;
 STACKTOP = sp;return ($20|0);
}
function _flushToByte($pIO) {
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (16 - ($4))|0;
 $6 = $5 & 7;
 $7 = (_flushBit16($1,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _putBit16z($pIO,$uiBits,$cBits) {
 $pIO = $pIO|0;
 $uiBits = $uiBits|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $uiBits;
 $2 = $cBits;
 $3 = $2;
 $4 = ($3>>>0)<=(16);
 if (!($4)) {
  ___assert_fail((15024|0),(14640|0),1251,(15040|0));
  // unreachable;
 }
 $5 = $1;
 $6 = $2;
 $7 = $5 >>> $6;
 $8 = (0)==($7|0);
 if ($8) {
  $9 = $0;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = $11 << $12;
  $14 = $1;
  $15 = $13 | $14;
  $16 = $0;
  $17 = (($16) + 4|0);
  HEAP32[$17>>2] = $15;
  $18 = $2;
  $19 = $0;
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $23 = $0;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (32 - ($28))|0;
  $30 = $25 << $29;
  $31 = (__byteswap_ulong($30)|0);
  $32 = $31&65535;
  $33 = $0;
  $34 = (($33) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP16[$35>>1] = $32;
  $36 = $0;
  $37 = (($36) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $0;
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >>> 3;
  $43 = $42 & 2;
  $44 = (($38) + ($43)|0);
  $45 = $44;
  $46 = $0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $45 & $48;
  $50 = $49;
  $51 = $0;
  $52 = (($51) + 20|0);
  HEAP32[$52>>2] = $50;
  $53 = $0;
  $54 = (($53) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $55 & 15;
  HEAP32[$54>>2] = $56;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((15056|0),(14640|0),1252,(15040|0));
  // unreachable;
 }
}
function _putBit32($pIO,$uiBits,$cBits) {
 $pIO = $pIO|0;
 $uiBits = $uiBits|0;
 $cBits = $cBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $uiBits;
 $2 = $cBits;
 $3 = $2;
 $4 = (0)<=($3|0);
 if (!($4)) {
  ___assert_fail((14976|0),(14640|0),1273,(15096|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5>>>0)<=(32);
 if (!($6)) {
  ___assert_fail((14976|0),(14640|0),1273,(15096|0));
  // unreachable;
 }
 $7 = $2;
 $8 = (16)<($7>>>0);
 if (!($8)) {
  $16 = $0;
  $17 = $1;
  $18 = $2;
  _putBit16($16,$17,$18);
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = (($11) - 16)|0;
 $13 = $10 >>> $12;
 _putBit16($9,$13,16);
 $14 = $2;
 $15 = (($14) - 16)|0;
 $2 = $15;
 $16 = $0;
 $17 = $1;
 $18 = $2;
 _putBit16($16,$17,$18);
 STACKTOP = sp;return;
}
function _fillToByte($pIO) {
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (16 - ($4))|0;
 $6 = $5 & 7;
 _putBit16z($1,0,$6);
 STACKTOP = sp;return;
}
function _readIS($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cbRead = 0, $err = 0, $pWS = 0, $toRead = 0, $upperLimit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cbRead = sp + 16|0;
 $1 = $pSC;
 $2 = $pIO;
 $err = 0;
 $3 = $1;
 $4 = (($3) + 84|0);
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = (($8) + 76|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($6) + ($10))|0;
 $upperLimit = $11;
 $12 = $1;
 $13 = (($12) + 34280|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (0)!=($14|0);
 if ($15) {
  $16 = $upperLimit;
  $17 = $1;
  $18 = (($17) + 34280|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16>>>0)<($19>>>0);
  if ($20) {
   $21 = $upperLimit;
   $25 = $21;
  } else {
   $22 = $1;
   $23 = (($22) + 34280|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24;
  }
  $upperLimit = $25;
 }
 $26 = $2;
 $27 = (($26) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $2;
 $30 = (($29) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_PACKET1($28,$31,4096)|0);
 $33 = ($32|0)!=(0);
 do {
  if ($33) {
   $34 = $2;
   $35 = (($34) + 24|0);
   $36 = HEAP32[$35>>2]|0;
   $pWS = $36;
   $37 = $2;
   $38 = (($37) + 28|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $upperLimit;
   $41 = ($39>>>0)>=($40>>>0);
   if ($41) {
    $0 = -116;
    $112 = $0;
    STACKTOP = sp;return ($112|0);
   }
   $42 = $upperLimit;
   $43 = $2;
   $44 = (($43) + 28|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($42) - ($45))|0;
   $47 = (4096)<($46>>>0);
   if ($47) {
    $53 = 4096;
   } else {
    $48 = $upperLimit;
    $49 = $2;
    $50 = (($49) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($48) - ($51))|0;
    $53 = $52;
   }
   $toRead = $53;
   $54 = $pWS;
   $55 = (($54) + 44|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $pWS;
   $58 = $2;
   $59 = (($58) + 28|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (FUNCTION_TABLE_iii[$56 & 255]($57,$60)|0);
   $err = $61;
   $62 = ($61|0)<(0);
   if ($62) {
    $63 = $err;
    $err = $63;
    break;
   }
   $64 = $err;
   $err = $64;
   $65 = $pWS;
   $66 = (($65) + 36|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $pWS;
   $69 = $2;
   $70 = (($69) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $toRead;
   $73 = (FUNCTION_TABLE_iiiii[$67 & 255]($68,$71,$72,$cbRead)|0);
   $err = $73;
   $74 = ($73|0)<(0);
   if ($74) {
    $75 = $err;
    $err = $75;
    break;
   }
   $76 = $err;
   $err = $76;
   $77 = HEAP32[$cbRead>>2]|0;
   $78 = $toRead;
   $79 = ($77>>>0)<($78>>>0);
   if (!($79)) {
    $82 = $2;
    $83 = (($82) + 36|0);
    HEAP32[$83>>2] = 0;
    $84 = $toRead;
    $85 = $2;
    $86 = (($85) + 28|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + ($84))|0;
    HEAP32[$86>>2] = $88;
    $89 = $2;
    $90 = (($89) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = HEAP32[$91>>2]|0;
    $93 = $2;
    HEAP32[$93>>2] = $92;
    $94 = $2;
    $95 = (($94) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($96) + 4096|0);
    $98 = $97;
    $99 = $2;
    $100 = (($99) + 12|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $98 & $101;
    $103 = $102;
    $104 = $2;
    $105 = (($104) + 16|0);
    HEAP32[$105>>2] = $103;
    $106 = $toRead;
    $107 = $2;
    $108 = (($107) + 32|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + ($106))|0;
    HEAP32[$108>>2] = $110;
    label = 21;
    break;
   }
   $80 = $2;
   $81 = (($80) + 36|0);
   HEAP32[$81>>2] = 1;
   $0 = -115;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  } else {
   label = 21;
  }
 } while(0);
 if ((label|0) == 21) {
 }
 $111 = $err;
 $0 = $111;
 $112 = $0;
 STACKTOP = sp;return ($112|0);
}
function _writeIS($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pIO;
 $err = 0;
 $2 = $0;
 $0 = $2;
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_PACKET1($5,$8,4096)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $1;
   $12 = (($11) + 24|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $1;
   $17 = (($16) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $1;
   $20 = (($19) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iiii[$15 & 255]($18,$21,4096)|0);
   $err = $22;
   $23 = $err;
   $err = $23;
   $24 = ($23|0)<(0);
   if ($24) {
    $25 = $err;
    $err = $25;
    $39 = $err;
    STACKTOP = sp;return ($39|0);
   } else {
    $26 = $err;
    $err = $26;
    $27 = $1;
    $28 = (($27) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 4096|0);
    $31 = $30;
    $32 = $1;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $31 & $34;
    $36 = $35;
    $37 = $1;
    $38 = (($37) + 16|0);
    HEAP32[$38>>2] = $36;
    break;
   }
  }
 } while(0);
 $39 = $err;
 STACKTOP = sp;return ($39|0);
}
function _getSizeWrite($pIO) {
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6>>>0)<=($9>>>0);
 $11 = $10 ? 0 : 8192;
 $12 = (($3) + ($11)|0);
 $13 = $0;
 $14 = (($13) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $12;
 $17 = $15;
 $18 = (($16) - ($17))|0;
 $19 = $0;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21>>>0) / 8)&-1;
 $23 = (($18) + ($22))|0;
 STACKTOP = sp;return ($23|0);
}
function _getPosRead($pIO) {
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cbCached = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<(8192);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7;
 } else {
  $8 = 8192;
 }
 $n = $8;
 $9 = $0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $n;
 $13 = (($11) + ($12)|0);
 $14 = $0;
 $15 = (($14) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $13;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $0;
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22>>>0) / 8)&-1;
 $24 = (($19) - ($23))|0;
 $cbCached = $24;
 $25 = $0;
 $26 = (($25) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $cbCached;
 $29 = (($27) - ($28))|0;
 STACKTOP = sp;return ($29|0);
}
function _attachISRead($pIO,$pWS,$pSC) {
 $pIO = $pIO|0;
 $pWS = $pWS|0;
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $cbRead = 0;
 var $err = 0, $pStart = 0, $pos = 0, $toRead = 0, $upperLimit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cbRead = sp + 8|0;
 $pos = sp + 12|0;
 $1 = $pIO;
 $2 = $pWS;
 $3 = $pSC;
 $err = 0;
 $4 = $3;
 $5 = (($4) + 84|0);
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($8) + 4|0);
 $10 = (($9) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($7) + ($11))|0;
 $upperLimit = $12;
 $13 = $1;
 $14 = (($13) + -8192|0);
 $pStart = $14;
 $15 = $3;
 $16 = (($15) + 34280|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (0)!=($17|0);
 if ($18) {
  $19 = $upperLimit;
  $20 = $3;
  $21 = (($20) + 34280|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19>>>0)<($22>>>0);
  if ($23) {
   $24 = $upperLimit;
   $28 = $24;
  } else {
   $25 = $3;
   $26 = (($25) + 34280|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27;
  }
  $upperLimit = $28;
 }
 $29 = $1;
 $30 = (($29) + 24|0);
 HEAP32[$30>>2] = 0;
 $31 = $2;
 $32 = (($31) + 48|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 (FUNCTION_TABLE_iii[$33 & 255]($34,$pos)|0);
 $35 = HEAP32[$pos>>2]|0;
 $36 = $upperLimit;
 $37 = ($35>>>0)>=($36>>>0);
 if ($37) {
  $0 = -116;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $38 = $upperLimit;
 $39 = HEAP32[$pos>>2]|0;
 $40 = (($38) - ($39))|0;
 $41 = (8192)<($40>>>0);
 if ($41) {
  $45 = 8192;
 } else {
  $42 = $upperLimit;
  $43 = HEAP32[$pos>>2]|0;
  $44 = (($42) - ($43))|0;
  $45 = $44;
 }
 $toRead = $45;
 $46 = $2;
 $47 = (($46) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $2;
 $50 = $pStart;
 $51 = $toRead;
 $52 = (FUNCTION_TABLE_iiiii[$48 & 255]($49,$50,$51,$cbRead)|0);
 $err = $52;
 $53 = ($52|0)<(0);
 do {
  if ($53) {
   $54 = $err;
   $err = $54;
  } else {
   $55 = $err;
   $err = $55;
   $56 = HEAP32[$cbRead>>2]|0;
   $57 = $toRead;
   $58 = ($56>>>0)<($57>>>0);
   if (!($58)) {
    $61 = HEAP32[$pos>>2]|0;
    $62 = $1;
    $63 = (($62) + 28|0);
    HEAP32[$63>>2] = $61;
    $64 = $pStart;
    $65 = $1;
    $66 = (($65) + 16|0);
    HEAP32[$66>>2] = $64;
    $67 = $1;
    $68 = (($67) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $1;
    $71 = (($70) + 20|0);
    HEAP32[$71>>2] = $69;
    $72 = $toRead;
    $73 = $1;
    $74 = (($73) + 28|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + ($72))|0;
    HEAP32[$74>>2] = $76;
    $77 = $toRead;
    $78 = $1;
    $79 = (($78) + 32|0);
    HEAP32[$79>>2] = $77;
    $80 = $1;
    $81 = (($80) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (_load4BE($82)|0);
    $84 = $1;
    $85 = (($84) + 4|0);
    HEAP32[$85>>2] = $83;
    $86 = $1;
    $87 = (($86) + 8|0);
    HEAP32[$87>>2] = 0;
    $88 = $1;
    $89 = (($88) + 12|0);
    HEAP32[$89>>2] = -8193;
    $90 = $1;
    $91 = (($90) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $92 & -2;
    HEAP32[$91>>2] = $93;
    $94 = $2;
    $95 = $1;
    $96 = (($95) + 24|0);
    HEAP32[$96>>2] = $94;
    break;
   }
   $59 = $1;
   $60 = (($59) + 36|0);
   HEAP32[$60>>2] = 0;
   $0 = -115;
   $98 = $0;
   STACKTOP = sp;return ($98|0);
  }
 } while(0);
 $97 = $err;
 $0 = $97;
 $98 = $0;
 STACKTOP = sp;return ($98|0);
}
function _PACKET1($ps,$pc,$s) {
 $ps = $ps|0;
 $pc = $pc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $pc;
 $2 = $s;
 $3 = $0;
 $4 = $3;
 $5 = $1;
 $6 = $5;
 $7 = $4 ^ $6;
 $8 = $2;
 $9 = $7 & $8;
 STACKTOP = sp;return ($9|0);
}
function _detachISRead($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pWS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pIO;
 $err = 0;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $pWS = $4;
 $5 = $pWS;
 $6 = (0|0)==($5|0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  $7 = $1;
  HEAP32[$7>>2] = 0;
  $8 = $1;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = $1;
  $11 = (($10) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = $1;
  $13 = (($12) + 12|0);
  HEAP32[$13>>2] = 0;
  $14 = $1;
  $15 = (($14) + 16|0);
  HEAP32[$15>>2] = 0;
  $16 = $1;
  $17 = (($16) + 20|0);
  HEAP32[$17>>2] = 0;
  $18 = $1;
  $19 = (($18) + 28|0);
  HEAP32[$19>>2] = 0;
  $20 = $1;
  $21 = (($20) + 36|0);
  HEAP32[$21>>2] = 0;
  $22 = $1;
  $23 = (($22) + 24|0);
  HEAP32[$23>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _attachISWrite($pIO,$pWS) {
 $pIO = $pIO|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIO;
 $1 = $pWS;
 $2 = $1;
 $3 = (($2) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $0;
 $7 = (($6) + 28|0);
 (FUNCTION_TABLE_iii[$4 & 255]($5,$7)|0);
 $8 = $0;
 $9 = (($8) + -8192|0);
 $10 = $0;
 $11 = (($10) + 16|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (($15) + 20|0);
 HEAP32[$16>>2] = $14;
 $17 = $0;
 $18 = (($17) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = $0;
 $20 = (($19) + 8|0);
 HEAP32[$20>>2] = 0;
 $21 = $0;
 $22 = (($21) + 12|0);
 HEAP32[$22>>2] = -8193;
 $23 = $1;
 $24 = $0;
 $25 = (($24) + 24|0);
 HEAP32[$25>>2] = $23;
 STACKTOP = sp;return 0;
}
function _detachISWrite($pSC,$pIO) {
 $pSC = $pSC|0;
 $pIO = $pIO|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pIO;
 $err = 0;
 $2 = $1;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4>>>0) % 8)&-1;
 $6 = (0)==($5|0);
 if (!($6)) {
  ___assert_fail((15112|0),(14640|0),1515,(15144|0));
  // unreachable;
 }
 $7 = $0;
 $8 = $1;
 $9 = (_writeIS($7,$8)|0);
 $err = $9;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = $err;
  $err = $11;
  $45 = $err;
  STACKTOP = sp;return ($45|0);
 }
 $12 = $err;
 $err = $12;
 $13 = $1;
 $14 = (($13) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $1;
 $22 = (($21) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = (($24) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = (($27) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29>>>0) / 8)&-1;
 $31 = (($26) + ($30)|0);
 $32 = $1;
 $33 = (($32) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $31;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (FUNCTION_TABLE_iiii[$17 & 255]($20,$23,$37)|0);
 $err = $38;
 $39 = $err;
 $err = $39;
 $40 = ($39|0)<(0);
 if ($40) {
  $41 = $err;
  $err = $41;
  $45 = $err;
  STACKTOP = sp;return ($45|0);
 }
 $42 = $err;
 $err = $42;
 $43 = $1;
 $44 = (($43) + 24|0);
 HEAP32[$44>>2] = 0;
 $45 = $err;
 STACKTOP = sp;return ($45|0);
}
function _remapQP($pQP,$iShift,$bScaledArith) {
 $pQP = $pQP|0;
 $iShift = $iShift|0;
 $bScaledArith = $bScaledArith|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ciShift = 0, $exp = 0, $exp2 = 0, $man = 0, $man1 = 0, $uiQPIndex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pQP;
 $1 = $iShift;
 $2 = $bScaledArith;
 $3 = $0;
 $4 = HEAP8[$3>>0]|0;
 $uiQPIndex = $4;
 $5 = $uiQPIndex;
 $6 = $5&255;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $0;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 1;
  $10 = $0;
  $11 = (($10) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = $0;
  $13 = (($12) + 16|0);
  HEAP32[$13>>2] = 0;
  $14 = $0;
  $15 = (($14) + 12|0);
  HEAP32[$15>>2] = 0;
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = ($16|0)!=(0);
 if ($17) {
  $man1 = 0;
  $exp2 = 0;
  $82 = $0;
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ($84|0)<(16);
  if ($85) {
   $86 = $0;
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $man1 = $88;
   $89 = $1;
   $exp2 = $89;
  } else {
   $90 = $0;
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = $92 & 15;
   $94 = (16 + ($93))|0;
   $man1 = $94;
   $95 = $0;
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $97 >> 4;
   $99 = (($98) - 1)|0;
   $100 = $1;
   $101 = (($99) + ($100))|0;
   $exp2 = $101;
  }
  $102 = $man1;
  $103 = $exp2;
  $104 = $102 << $103;
  $105 = $0;
  $106 = (($105) + 4|0);
  HEAP32[$106>>2] = $104;
  $107 = $man1;
  $108 = (15160 + ($107<<3)|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $0;
  $111 = (($110) + 12|0);
  HEAP32[$111>>2] = $109;
  $112 = $man1;
  $113 = (15160 + ($112<<3)|0);
  $114 = (($113) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $exp2;
  $117 = (($115) + ($116))|0;
  $118 = $0;
  $119 = (($118) + 16|0);
  HEAP32[$119>>2] = $117;
  $120 = $0;
  $121 = (($120) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122*3)|0;
  $124 = (($123) + 1)|0;
  $125 = $124 >> 3;
  $126 = $0;
  $127 = (($126) + 8|0);
  HEAP32[$127>>2] = $125;
 } else {
  $man = 0;
  $exp = 0;
  $ciShift = -2;
  $18 = $0;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)<(32);
  if ($21) {
   $22 = $0;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = (($24) + 3)|0;
   $26 = $25 >> 2;
   $man = $26;
   $exp = 0;
  } else {
   $27 = $0;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ($29|0)<(48);
   if ($30) {
    $31 = $0;
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = $33 & 15;
    $35 = (16 + ($34))|0;
    $36 = (($35) + 1)|0;
    $37 = $36 >> 1;
    $man = $37;
    $38 = $0;
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = $40 >> 4;
    $42 = (($41) - 1)|0;
    $43 = (($42) + 1)|0;
    $44 = (($43) + -2)|0;
    $exp = $44;
   } else {
    $45 = $0;
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = $47 & 15;
    $49 = (16 + ($48))|0;
    $man = $49;
    $50 = $0;
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $53 = $52 >> 4;
    $54 = (($53) - 1)|0;
    $55 = (($54) + -2)|0;
    $exp = $55;
   }
  }
  $56 = $man;
  $57 = $exp;
  $58 = $56 << $57;
  $59 = $0;
  $60 = (($59) + 4|0);
  HEAP32[$60>>2] = $58;
  $61 = $man;
  $62 = (15160 + ($61<<3)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $0;
  $65 = (($64) + 12|0);
  HEAP32[$65>>2] = $63;
  $66 = $man;
  $67 = (15160 + ($66<<3)|0);
  $68 = (($67) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $exp;
  $71 = (($69) + ($70))|0;
  $72 = $0;
  $73 = (($72) + 16|0);
  HEAP32[$73>>2] = $71;
  $74 = $0;
  $75 = (($74) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76*3)|0;
  $78 = (($77) + 1)|0;
  $79 = $78 >> 3;
  $80 = $0;
  $81 = (($80) + 8|0);
  HEAP32[$81>>2] = $79;
 }
 STACKTOP = sp;return;
}
function _allocatePredInfo($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $b32Bit = 0, $i = 0, $iChannels = 0, $j = 0, $mbWidth = 0, $pMemory = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pSC;
 $2 = $1;
 $3 = (($2) + 34364|0);
 $4 = HEAP32[$3>>2]|0;
 $mbWidth = $4;
 $5 = $1;
 $6 = (($5) + 34136|0);
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $iChannels = $8;
 $b32Bit = 1;
 $9 = $b32Bit;
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $mbWidth;
   $12 = $11 >>> 16;
   $13 = $iChannels;
   $14 = Math_imul($12, $13)|0;
   $15 = $14<<1;
   $16 = ($15*40)|0;
   $17 = $16 & -65536;
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   $0 = -1;
   $88 = $0;
   STACKTOP = sp;return ($88|0);
  }
 } while(0);
 $19 = $mbWidth;
 $20 = $iChannels;
 $21 = Math_imul($19, $20)|0;
 $22 = $21<<1;
 $23 = ($22*40)|0;
 $24 = (_malloc($23)|0);
 $pMemory = $24;
 $25 = $pMemory;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $0 = -1;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 $27 = $pMemory;
 $28 = $1;
 $29 = (($28) + 35020|0);
 HEAP32[$29>>2] = $27;
 $i = 0;
 while(1) {
  $30 = $i;
  $31 = $iChannels;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $pMemory;
  $34 = $i;
  $35 = $1;
  $36 = (($35) + 34892|0);
  $37 = (($36) + ($34<<2)|0);
  HEAP32[$37>>2] = $33;
  $38 = $mbWidth;
  $39 = $pMemory;
  $40 = (($39) + (($38*40)|0)|0);
  $pMemory = $40;
  $41 = $pMemory;
  $42 = $i;
  $43 = $1;
  $44 = (($43) + 34956|0);
  $45 = (($44) + ($42<<2)|0);
  HEAP32[$45>>2] = $41;
  $46 = $mbWidth;
  $47 = $pMemory;
  $48 = (($47) + (($46*40)|0)|0);
  $pMemory = $48;
  $j = 0;
  while(1) {
   $49 = $j;
   $50 = $mbWidth;
   $51 = ($49>>>0)<($50>>>0);
   if (!($51)) {
    break;
   }
   $52 = $j;
   $53 = $i;
   $54 = $1;
   $55 = (($54) + 34892|0);
   $56 = (($55) + ($53<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + (($52*40)|0)|0);
   $59 = (($58) + 12|0);
   $60 = $j;
   $61 = $i;
   $62 = $1;
   $63 = (($62) + 34892|0);
   $64 = (($63) + ($61<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + (($60*40)|0)|0);
   $67 = (($66) + 36|0);
   HEAP32[$67>>2] = $59;
   $68 = $j;
   $69 = $i;
   $70 = $1;
   $71 = (($70) + 34956|0);
   $72 = (($71) + ($69<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + (($68*40)|0)|0);
   $75 = (($74) + 12|0);
   $76 = $j;
   $77 = $i;
   $78 = $1;
   $79 = (($78) + 34956|0);
   $80 = (($79) + ($77<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) + (($76*40)|0)|0);
   $83 = (($82) + 36|0);
   HEAP32[$83>>2] = $75;
   $84 = $j;
   $85 = (($84) + 1)|0;
   $j = $85;
  }
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
 }
 $0 = 0;
 $88 = $0;
 STACKTOP = sp;return ($88|0);
}
function _freePredInfo($pSC) {
 $pSC = $pSC|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $0;
 $2 = (($1) + 35020|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 35020|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
 }
 $8 = $0;
 $9 = (($8) + 35020|0);
 HEAP32[$9>>2] = 0;
 STACKTOP = sp;return;
}
function _getACPredMode($pMBInfo,$cf) {
 $pMBInfo = $pMBInfo|0;
 $cf = $cf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $StrH = 0, $StrV = 0;
 var $pCoeffs = 0, $pCoeffsU = 0, $pCoeffsV = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pMBInfo;
 $1 = $cf;
 $2 = $0;
 $pCoeffs = $2;
 $3 = $pCoeffs;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (Math_abs(($5|0))|0);
 $7 = $pCoeffs;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (Math_abs(($9|0))|0);
 $11 = (($6) + ($10))|0;
 $12 = $pCoeffs;
 $13 = (($12) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (Math_abs(($14|0))|0);
 $16 = (($11) + ($15))|0;
 $StrH = $16;
 $17 = $pCoeffs;
 $18 = (($17) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (Math_abs(($19|0))|0);
 $21 = $pCoeffs;
 $22 = (($21) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (Math_abs(($23|0))|0);
 $25 = (($20) + ($24))|0;
 $26 = $pCoeffs;
 $27 = (($26) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (Math_abs(($28|0))|0);
 $30 = (($25) + ($29))|0;
 $StrV = $30;
 $31 = $1;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $1;
  $34 = ($33|0)!=(6);
  if ($34) {
   $35 = $0;
   $36 = (($35) + 64|0);
   $pCoeffsU = $36;
   $37 = $0;
   $38 = (($37) + 128|0);
   $pCoeffsV = $38;
   $39 = $pCoeffsU;
   $40 = (($39) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (Math_abs(($41|0))|0);
   $43 = $pCoeffsV;
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (Math_abs(($45|0))|0);
   $47 = (($42) + ($46))|0;
   $48 = $StrH;
   $49 = (($48) + ($47))|0;
   $StrH = $49;
   $50 = $1;
   $51 = ($50|0)==(1);
   if ($51) {
    $52 = $pCoeffsU;
    $53 = (($52) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (Math_abs(($54|0))|0);
    $56 = $pCoeffsV;
    $57 = (($56) + 8|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (Math_abs(($58|0))|0);
    $60 = (($55) + ($59))|0;
    $61 = $StrV;
    $62 = (($61) + ($60))|0;
    $StrV = $62;
   } else {
    $63 = $1;
    $64 = ($63|0)==(2);
    if ($64) {
     $65 = $pCoeffsU;
     $66 = (($65) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (Math_abs(($67|0))|0);
     $69 = $pCoeffsV;
     $70 = (($69) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (Math_abs(($71|0))|0);
     $73 = (($68) + ($72))|0;
     $74 = $pCoeffsU;
     $75 = (($74) + 24|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (Math_abs(($76|0))|0);
     $78 = (($73) + ($77))|0;
     $79 = $pCoeffsV;
     $80 = (($79) + 24|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (Math_abs(($81|0))|0);
     $83 = (($78) + ($82))|0;
     $84 = $StrV;
     $85 = (($84) + ($83))|0;
     $StrV = $85;
     $86 = $pCoeffsU;
     $87 = (($86) + 20|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (Math_abs(($88|0))|0);
     $90 = $pCoeffsV;
     $91 = (($90) + 20|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (Math_abs(($92|0))|0);
     $94 = (($89) + ($93))|0;
     $95 = $StrH;
     $96 = (($95) + ($94))|0;
     $StrH = $96;
    } else {
     $97 = $pCoeffsU;
     $98 = (($97) + 16|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (Math_abs(($99|0))|0);
     $101 = $pCoeffsV;
     $102 = (($101) + 16|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (Math_abs(($103|0))|0);
     $105 = (($100) + ($104))|0;
     $106 = $StrV;
     $107 = (($106) + ($105))|0;
     $StrV = $107;
    }
   }
  }
 }
 $108 = $StrH;
 $109 = $108<<2;
 $110 = $StrV;
 $111 = ($109|0)<($110|0);
 if ($111) {
  $117 = 1;
  STACKTOP = sp;return ($117|0);
 } else {
  $112 = $StrV;
  $113 = $112<<2;
  $114 = $StrH;
  $115 = ($113|0)<($114|0);
  $116 = $115 ? 0 : 2;
  $117 = $116;
  STACKTOP = sp;return ($117|0);
 }
 return 0|0;
}
function _getDCACPredMode($pSC,$mbX) {
 $pSC = $pSC|0;
 $mbX = $mbX|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $StrH = 0, $StrV = 0, $cf = 0, $iADMode = 0, $iDCMode = 0, $iL = 0, $iT = 0, $iTL = 0, $pLU = 0, $pLV = 0, $pTLU = 0, $pTLV = 0, $pTU = 0, $pTV = 0, $scale = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $mbX;
 $iADMode = 2;
 $2 = $0;
 $3 = (($2) + 34300|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = (($6) + 34304|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $iDCMode = 3;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $0;
  $11 = (($10) + 34300|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0);
  if ($13) {
   $iDCMode = 1;
  } else {
   $14 = $0;
   $15 = (($14) + 34304|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)!=(0);
   if ($17) {
    $iDCMode = 0;
   } else {
    $18 = $0;
    $19 = (($18) + 34136|0);
    $20 = (($19) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $cf = $21;
    $22 = $1;
    $23 = (($22) - 1)|0;
    $24 = $0;
    $25 = (($24) + 34892|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + (($23*40)|0)|0);
    $28 = (($27) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $iL = $29;
    $30 = $1;
    $31 = $0;
    $32 = (($31) + 34956|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + (($30*40)|0)|0);
    $35 = (($34) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $iT = $36;
    $37 = $1;
    $38 = (($37) - 1)|0;
    $39 = $0;
    $40 = (($39) + 34956|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + (($38*40)|0)|0);
    $43 = (($42) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $iTL = $44;
    $45 = $cf;
    $46 = ($45|0)==(0);
    if ($46) {
     label = 10;
    } else {
     $47 = $cf;
     $48 = ($47|0)==(6);
     if ($48) {
      label = 10;
     } else {
      $57 = $0;
      $58 = (($57) + 34956|0);
      $59 = (($58) + 4|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = $1;
      $62 = (($60) + (($61*40)|0)|0);
      $pTU = $62;
      $63 = $0;
      $64 = (($63) + 34892|0);
      $65 = (($64) + 4|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = $1;
      $68 = (($66) + (($67*40)|0)|0);
      $69 = (($68) + -40|0);
      $pLU = $69;
      $70 = $pTU;
      $71 = (($70) + -40|0);
      $pTLU = $71;
      $72 = $0;
      $73 = (($72) + 34956|0);
      $74 = (($73) + 8|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $1;
      $77 = (($75) + (($76*40)|0)|0);
      $pTV = $77;
      $78 = $0;
      $79 = (($78) + 34892|0);
      $80 = (($79) + 8|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $1;
      $83 = (($81) + (($82*40)|0)|0);
      $84 = (($83) + -40|0);
      $pLV = $84;
      $85 = $pTV;
      $86 = (($85) + -40|0);
      $pTLV = $86;
      $87 = $cf;
      $88 = ($87|0)==(1);
      if ($88) {
       $92 = 8;
      } else {
       $89 = $cf;
       $90 = ($89|0)==(2);
       $91 = $90 ? 4 : 2;
       $92 = $91;
      }
      $scale = $92;
      $93 = $iTL;
      $94 = $iL;
      $95 = (($93) - ($94))|0;
      $96 = (Math_abs(($95|0))|0);
      $97 = $scale;
      $98 = Math_imul($96, $97)|0;
      $99 = $pTLU;
      $100 = (($99) + 8|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $pLU;
      $103 = (($102) + 8|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (($101) - ($104))|0;
      $106 = (Math_abs(($105|0))|0);
      $107 = (($98) + ($106))|0;
      $108 = $pTLV;
      $109 = (($108) + 8|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = $pLV;
      $112 = (($111) + 8|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (($110) - ($113))|0;
      $115 = (Math_abs(($114|0))|0);
      $116 = (($107) + ($115))|0;
      $StrH = $116;
      $117 = $iTL;
      $118 = $iT;
      $119 = (($117) - ($118))|0;
      $120 = (Math_abs(($119|0))|0);
      $121 = $scale;
      $122 = Math_imul($120, $121)|0;
      $123 = $pTLU;
      $124 = (($123) + 8|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = $pTU;
      $127 = (($126) + 8|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($125) - ($128))|0;
      $130 = (Math_abs(($129|0))|0);
      $131 = (($122) + ($130))|0;
      $132 = $pTLV;
      $133 = (($132) + 8|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = $pTV;
      $136 = (($135) + 8|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = (($134) - ($137))|0;
      $139 = (Math_abs(($138|0))|0);
      $140 = (($131) + ($139))|0;
      $StrV = $140;
     }
    }
    if ((label|0) == 10) {
     $49 = $iTL;
     $50 = $iL;
     $51 = (($49) - ($50))|0;
     $52 = (Math_abs(($51|0))|0);
     $StrH = $52;
     $53 = $iTL;
     $54 = $iT;
     $55 = (($53) - ($54))|0;
     $56 = (Math_abs(($55|0))|0);
     $StrV = $56;
    }
    $141 = $StrH;
    $142 = $141<<2;
    $143 = $StrV;
    $144 = ($142|0)<($143|0);
    if ($144) {
     $150 = 1;
    } else {
     $145 = $StrV;
     $146 = $145<<2;
     $147 = $StrH;
     $148 = ($146|0)<($147|0);
     $149 = $148 ? 0 : 2;
     $150 = $149;
    }
    $iDCMode = $150;
   }
  }
 }
 $151 = $iDCMode;
 $152 = ($151|0)==(1);
 if ($152) {
  $153 = $0;
  $154 = (($153) + 32976|0);
  $155 = (($154) + 1156|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = $156&255;
  $158 = $1;
  $159 = $0;
  $160 = (($159) + 34956|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($161) + (($158*40)|0)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($157|0)==($163|0);
  if ($164) {
   $iADMode = 1;
  }
 }
 $165 = $iDCMode;
 $166 = ($165|0)==(0);
 if (!($166)) {
  $180 = $iDCMode;
  $181 = $iADMode;
  $182 = $181 << 2;
  $183 = (($180) + ($182))|0;
  STACKTOP = sp;return ($183|0);
 }
 $167 = $0;
 $168 = (($167) + 32976|0);
 $169 = (($168) + 1156|0);
 $170 = HEAP8[$169>>0]|0;
 $171 = $170&255;
 $172 = $1;
 $173 = (($172) - 1)|0;
 $174 = $0;
 $175 = (($174) + 34892|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = (($176) + (($173*40)|0)|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = ($171|0)==($178|0);
 if (!($179)) {
  $180 = $iDCMode;
  $181 = $iADMode;
  $182 = $181 << 2;
  $183 = (($180) + ($182))|0;
  STACKTOP = sp;return ($183|0);
 }
 $iADMode = 0;
 $180 = $iDCMode;
 $181 = $iADMode;
 $182 = $181 << 2;
 $183 = (($180) + ($182))|0;
 STACKTOP = sp;return ($183|0);
}
function _copyAC($src,$dst) {
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $dst;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 HEAP32[$5>>2] = $4;
 $6 = $0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = (($14) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $0;
 $17 = (($16) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = $18;
 $21 = $0;
 $22 = (($21) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = (($24) + 16|0);
 HEAP32[$25>>2] = $23;
 $26 = $0;
 $27 = (($26) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $1;
 $30 = (($29) + 20|0);
 HEAP32[$30>>2] = $28;
 STACKTOP = sp;return;
}
function _updatePredInfo($pSC,$pMBInfo,$mbX,$cf) {
 $pSC = $pSC|0;
 $pMBInfo = $pMBInfo|0;
 $mbX = $mbX|0;
 $cf = $cf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $iChannels = 0;
 var $p = 0, $pPredInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSC;
 $1 = $pMBInfo;
 $2 = $mbX;
 $3 = $cf;
 $4 = $3;
 $5 = ($4|0)==(1);
 if ($5) {
  label = 3;
 } else {
  $6 = $3;
  $7 = ($6|0)==(2);
  if ($7) {
   label = 3;
  } else {
   $8 = $0;
   $9 = (($8) + 34136|0);
   $10 = (($9) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11;
  }
 }
 if ((label|0) == 3) {
  $12 = 1;
 }
 $iChannels = $12;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $iChannels;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $0;
  $18 = (($17) + 34892|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = (($20) + (($21*40)|0)|0);
  $pPredInfo = $22;
  $23 = $i;
  $24 = $1;
  $25 = (($24) + ($23<<6)|0);
  $p = $25;
  $26 = $p;
  $27 = HEAP32[$26>>2]|0;
  $28 = $pPredInfo;
  $29 = (($28) + 8|0);
  HEAP32[$29>>2] = $27;
  $30 = $1;
  $31 = (($30) + 1156|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $pPredInfo;
  HEAP32[$34>>2] = $33;
  $35 = $p;
  $36 = $pPredInfo;
  $37 = (($36) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  _copyAC($35,$38);
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 $41 = $3;
 $42 = ($41|0)==(1);
 if ($42) {
  $i = 1;
  while(1) {
   $43 = $i;
   $44 = ($43>>>0)<(3);
   if (!($44)) {
    break;
   }
   $45 = $i;
   $46 = $0;
   $47 = (($46) + 34892|0);
   $48 = (($47) + ($45<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $2;
   $51 = (($49) + (($50*40)|0)|0);
   $pPredInfo = $51;
   $52 = $i;
   $53 = $1;
   $54 = (($53) + ($52<<6)|0);
   $p = $54;
   $55 = $p;
   $56 = HEAP32[$55>>2]|0;
   $57 = $pPredInfo;
   $58 = (($57) + 8|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (($59) + 1156|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $pPredInfo;
   HEAP32[$63>>2] = $62;
   $64 = $p;
   $65 = (($64) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $pPredInfo;
   $68 = (($67) + 36|0);
   $69 = HEAP32[$68>>2]|0;
   HEAP32[$69>>2] = $66;
   $70 = $p;
   $71 = (($70) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $pPredInfo;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + 4|0);
   HEAP32[$76>>2] = $72;
   $77 = $i;
   $78 = (($77) + 1)|0;
   $i = $78;
  }
  STACKTOP = sp;return;
 }
 $79 = $3;
 $80 = ($79|0)==(2);
 if ($80) {
  $i = 1;
  while(1) {
   $81 = $i;
   $82 = ($81>>>0)<(3);
   if (!($82)) {
    break;
   }
   $83 = $i;
   $84 = $0;
   $85 = (($84) + 34892|0);
   $86 = (($85) + ($83<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $2;
   $89 = (($87) + (($88*40)|0)|0);
   $pPredInfo = $89;
   $90 = $1;
   $91 = (($90) + 1156|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = $pPredInfo;
   HEAP32[$94>>2] = $93;
   $95 = $i;
   $96 = $1;
   $97 = (($96) + ($95<<6)|0);
   $p = $97;
   $98 = $p;
   $99 = HEAP32[$98>>2]|0;
   $100 = $pPredInfo;
   $101 = (($100) + 8|0);
   HEAP32[$101>>2] = $99;
   $102 = $p;
   $103 = (($102) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $pPredInfo;
   $106 = (($105) + 36|0);
   $107 = HEAP32[$106>>2]|0;
   HEAP32[$107>>2] = $104;
   $108 = $p;
   $109 = (($108) + 8|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $pPredInfo;
   $112 = (($111) + 36|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 4|0);
   HEAP32[$114>>2] = $110;
   $115 = $p;
   $116 = (($115) + 20|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $pPredInfo;
   $119 = (($118) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + 8|0);
   HEAP32[$121>>2] = $117;
   $122 = $p;
   $123 = (($122) + 24|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $pPredInfo;
   $126 = (($125) + 36|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + 12|0);
   HEAP32[$128>>2] = $124;
   $129 = $p;
   $130 = (($129) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $pPredInfo;
   $133 = (($132) + 36|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + 16|0);
   HEAP32[$135>>2] = $131;
   $136 = $i;
   $137 = (($136) + 1)|0;
   $i = $137;
  }
 }
 STACKTOP = sp;return;
}
function _strDCT2x2dn($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $C = 0, $a = 0, $b = 0, $c = 0, $d = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $C = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $d;
 $13 = $a;
 $14 = (($13) + ($12))|0;
 $a = $14;
 $15 = $C;
 $16 = $b;
 $17 = (($16) - ($15))|0;
 $b = $17;
 $18 = $a;
 $19 = $b;
 $20 = (($18) - ($19))|0;
 $21 = $20 >> 1;
 $t = $21;
 $22 = $t;
 $23 = $d;
 $24 = (($22) - ($23))|0;
 $c = $24;
 $25 = $t;
 $26 = $C;
 $27 = (($25) - ($26))|0;
 $d = $27;
 $28 = $d;
 $29 = $a;
 $30 = (($29) - ($28))|0;
 $a = $30;
 $31 = $c;
 $32 = $b;
 $33 = (($32) + ($31))|0;
 $b = $33;
 $34 = $a;
 $35 = $0;
 HEAP32[$35>>2] = $34;
 $36 = $b;
 $37 = $1;
 HEAP32[$37>>2] = $36;
 $38 = $c;
 $39 = $2;
 HEAP32[$39>>2] = $38;
 $40 = $d;
 $41 = $3;
 HEAP32[$41>>2] = $40;
 STACKTOP = sp;return;
}
function _strDCT2x2up($pa,$pb,$pc,$pd) {
 $pa = $pa|0;
 $pb = $pb|0;
 $pc = $pc|0;
 $pd = $pd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $C = 0, $a = 0, $b = 0, $c = 0, $d = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pa;
 $1 = $pb;
 $2 = $pc;
 $3 = $pd;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $C = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $d = $11;
 $12 = $d;
 $13 = $a;
 $14 = (($13) + ($12))|0;
 $a = $14;
 $15 = $C;
 $16 = $b;
 $17 = (($16) - ($15))|0;
 $b = $17;
 $18 = $a;
 $19 = $b;
 $20 = (($18) - ($19))|0;
 $21 = (($20) + 1)|0;
 $22 = $21 >> 1;
 $t = $22;
 $23 = $t;
 $24 = $d;
 $25 = (($23) - ($24))|0;
 $c = $25;
 $26 = $t;
 $27 = $C;
 $28 = (($26) - ($27))|0;
 $d = $28;
 $29 = $d;
 $30 = $a;
 $31 = (($30) - ($29))|0;
 $a = $31;
 $32 = $c;
 $33 = $b;
 $34 = (($33) + ($32))|0;
 $b = $34;
 $35 = $a;
 $36 = $0;
 HEAP32[$36>>2] = $35;
 $37 = $b;
 $38 = $1;
 HEAP32[$38>>2] = $37;
 $39 = $c;
 $40 = $2;
 HEAP32[$40>>2] = $39;
 $41 = $d;
 $42 = $3;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function _FOURBUTTERFLY_HARDCODED1($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 16|0);
 $4 = $0;
 $5 = (($4) + 32|0);
 $6 = $0;
 $7 = (($6) + 48|0);
 _strDCT2x2dn($1,$3,$5,$7);
 $8 = $0;
 $9 = (($8) + 4|0);
 $10 = $0;
 $11 = (($10) + 20|0);
 $12 = $0;
 $13 = (($12) + 36|0);
 $14 = $0;
 $15 = (($14) + 52|0);
 _strDCT2x2dn($9,$11,$13,$15);
 $16 = $0;
 $17 = (($16) + 8|0);
 $18 = $0;
 $19 = (($18) + 24|0);
 $20 = $0;
 $21 = (($20) + 40|0);
 $22 = $0;
 $23 = (($22) + 56|0);
 _strDCT2x2dn($17,$19,$21,$23);
 $24 = $0;
 $25 = (($24) + 12|0);
 $26 = $0;
 $27 = (($26) + 28|0);
 $28 = $0;
 $29 = (($28) + 44|0);
 $30 = $0;
 $31 = (($30) + 60|0);
 _strDCT2x2dn($25,$27,$29,$31);
 STACKTOP = sp;return;
}
function _PKAlloc($ppv,$cb) {
 $ppv = $ppv|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppv;
 $1 = $cb;
 $2 = $1;
 $3 = (_calloc(1,$2)|0);
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = $7 ? 0 : -101;
 STACKTOP = sp;return ($8|0);
}
function _PKFree($ppv) {
 $ppv = $ppv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppv;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $0;
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return 0;
}
function _PKAllocAligned($ppv,$cb,$iAlign) {
 $ppv = $ppv|0;
 $cb = $cb|0;
 $iAlign = $iAlign|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c_cbBlockSize = 0, $iAlignmentCorrection = 0, $pOrigPtr = 0, $pReturnedPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ppv;
 $2 = $cb;
 $3 = $iAlign;
 $4 = $2;
 $5 = (($4) + 4)|0;
 $6 = $3;
 $7 = (($5) + ($6))|0;
 $8 = (($7) - 1)|0;
 $c_cbBlockSize = $8;
 $9 = $1;
 HEAP32[$9>>2] = 0;
 $10 = $c_cbBlockSize;
 $11 = (_calloc(1,$10)|0);
 $pOrigPtr = $11;
 $12 = $pOrigPtr;
 $13 = (0|0)==($12|0);
 if ($13) {
  $0 = -101;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $14 = $3;
 $15 = $pOrigPtr;
 $16 = $15;
 $17 = $3;
 $18 = (($16>>>0) % ($17>>>0))&-1;
 $19 = (($14) - ($18))|0;
 $iAlignmentCorrection = $19;
 $20 = $iAlignmentCorrection;
 $21 = ($20>>>0)<(4);
 if ($21) {
  $22 = $3;
  $23 = $iAlignmentCorrection;
  $24 = (($23) + ($22))|0;
  $iAlignmentCorrection = $24;
 }
 $25 = $iAlignmentCorrection;
 $26 = ($25>>>0)>=(4);
 if (!($26)) {
  ___assert_fail((16576|0),(16616|0),92,(16640|0));
  // unreachable;
 }
 $27 = $iAlignmentCorrection;
 $28 = $2;
 $29 = (($27) + ($28))|0;
 $30 = $c_cbBlockSize;
 $31 = ($29>>>0)<=($30>>>0);
 if (!($31)) {
  ___assert_fail((16656|0),(16616|0),93,(16640|0));
  // unreachable;
 }
 $32 = $pOrigPtr;
 $33 = $iAlignmentCorrection;
 $34 = (($32) + ($33)|0);
 $pReturnedPtr = $34;
 $35 = $pOrigPtr;
 $36 = $pReturnedPtr;
 $37 = (($36) + -4|0);
 HEAP32[$37>>2] = $35;
 $38 = $pReturnedPtr;
 $39 = $38;
 $40 = $3;
 $41 = (($39>>>0) % ($40>>>0))&-1;
 $42 = (0)==($41|0);
 if (!($42)) {
  ___assert_fail((16704|0),(16616|0),98,(16640|0));
  // unreachable;
 }
 $43 = $pReturnedPtr;
 $44 = $1;
 HEAP32[$44>>2] = $43;
 $0 = 0;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _PKFreeAligned($ppv) {
 $ppv = $ppv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ppOrigPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppv;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return 0;
 }
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -4|0);
 $ppOrigPtr = $8;
 $9 = $ppOrigPtr;
 $10 = HEAP32[$9>>2]|0;
 $11 = $ppOrigPtr;
 $12 = ($10>>>0)<=($11>>>0);
 if (!($12)) {
  ___assert_fail((16744|0),(16616|0),108,(16776|0));
  // unreachable;
 }
 $13 = $ppOrigPtr;
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 $15 = $0;
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return 0;
}
function _PKStrnicmp($s1,$s2,$c) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s1;
 $1 = $s2;
 $2 = $c;
 while(1) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = (_tolower($5)|0);
  $7 = $1;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = (_tolower($9)|0);
  $11 = ($6|0)==($10|0);
  if ($11) {
   $12 = $0;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $1;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)!=(0);
    if ($19) {
     $20 = $2;
     $21 = ($20|0)!=(0);
     $38 = $21;
    } else {
     $38 = 0;
    }
   } else {
    $38 = 0;
   }
  } else {
   $38 = 0;
  }
  if (!($38)) {
   break;
  }
  $22 = $0;
  $23 = (($22) + 1|0);
  $0 = $23;
  $24 = $1;
  $25 = (($24) + 1|0);
  $1 = $25;
  $26 = $2;
  $27 = (($26) + -1)|0;
  $2 = $27;
 }
 $28 = $2;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $0;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = $1;
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 << 24 >> 24;
  $36 = (($32) - ($35))|0;
  $37 = $36;
  STACKTOP = sp;return ($37|0);
 } else {
  $37 = 0;
  STACKTOP = sp;return ($37|0);
 }
 return 0|0;
}
function _PixelFormatLookup($pPI,$uLookupType) {
 $pPI = $pPI|0;
 $uLookupType = $uLookupType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pPI;
 $1 = $uLookupType;
 $err = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(68);
  if (!($3)) {
   label = 19;
   break;
  }
  $4 = $1;
  $5 = $4&255;
  $6 = (0)==($5|0);
  if ($6) {
   $7 = $0;
   $8 = HEAP32[$7>>2]|0;
   $9 = $i;
   $10 = (16792 + (($9*40)|0)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_memcmp($8,$11,16)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    label = 5;
    break;
   }
  } else {
   $17 = $1;
   $18 = $17&255;
   $19 = (1)==($18|0);
   if ($19) {
    $20 = $0;
    $21 = (($20) + 28|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $i;
    $24 = (16792 + (($23*40)|0)|0);
    $25 = (($24) + 28|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($22|0)==($26|0);
    if ($27) {
     $28 = $0;
     $29 = (($28) + 32|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $i;
     $32 = (16792 + (($31*40)|0)|0);
     $33 = (($32) + 32|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($30|0)==($34|0);
     if ($35) {
      $36 = $0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = $i;
      $40 = (16792 + (($39*40)|0)|0);
      $41 = (($40) + 36|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($38|0)==($42|0);
      if ($43) {
       $44 = $0;
       $45 = (($44) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = $i;
       $48 = (16792 + (($47*40)|0)|0);
       $49 = (($48) + 24|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($46|0)==($50|0);
       if ($51) {
        $52 = $0;
        $53 = (($52) + 20|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = $54 & 48;
        $56 = $i;
        $57 = (16792 + (($56*40)|0)|0);
        $58 = (($57) + 20|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = $59 & 48;
        $61 = ($55|0)==($60|0);
        if ($61) {
         label = 13;
         break;
        }
       }
      }
     }
    }
   }
  }
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 if ((label|0) == 5) {
  $14 = $0;
  $15 = $i;
  $16 = (16792 + (($15*40)|0)|0);
  dest=$14+0|0; src=$16+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $69 = $err;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 13) {
  $62 = $0;
  $63 = $i;
  $64 = (16792 + (($63*40)|0)|0);
  dest=$62+0|0; src=$64+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $69 = $err;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 19) {
  $err = -106;
  if (1) {
   $67 = $err;
   $err = $67;
   $69 = $err;
   STACKTOP = sp;return ($69|0);
  }
  $68 = $err;
  $err = $68;
  $69 = $err;
  STACKTOP = sp;return ($69|0);
 }
 return 0|0;
}
function _GetIIDInfo($szExt,$ppInfo) {
 $szExt = $szExt|0;
 $ppInfo = $ppInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $szExt;
 $1 = $ppInfo;
 $err = 0;
 $i = 0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3>>>0)<(3);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $i;
  $7 = (19544 + (($6*12)|0)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $i;
  $10 = (19544 + (($9*12)|0)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strlen(($11|0))|0);
  $13 = (_PKStrnicmp($5,$8,$12)|0);
  $14 = (0)==($13|0);
  if ($14) {
   label = 4;
   break;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 4) {
  $15 = $i;
  $16 = (19544 + (($15*12)|0)|0);
  $17 = $1;
  HEAP32[$17>>2] = $16;
  $22 = $err;
  STACKTOP = sp;return ($22|0);
 }
 $err = -106;
 if (1) {
  $20 = $err;
  $err = $20;
  $22 = $err;
  STACKTOP = sp;return ($22|0);
 }
 $21 = $err;
 $err = $21;
 $22 = $err;
 STACKTOP = sp;return ($22|0);
}
function _GetImageDecodeIID($szExt,$ppIID) {
 $szExt = $szExt|0;
 $ppIID = $ppIID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pInfo = sp + 8|0;
 $0 = $szExt;
 $1 = $ppIID;
 $err = 0;
 HEAP32[$pInfo>>2] = 0;
 $2 = $0;
 $3 = (_GetIIDInfo($2,$pInfo)|0);
 $err = $3;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = $err;
  $err = $5;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $6 = $err;
 $err = $6;
 $7 = HEAP32[$pInfo>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 HEAP32[$10>>2] = $9;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _PKCreateFactory_CreateStream($ppStream) {
 $ppStream = $ppStream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppStream;
 $err = 0;
 $1 = $0;
 $2 = (_PKAlloc($1,12)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
 } else {
  $5 = $err;
  $err = $5;
 }
 $6 = $err;
 STACKTOP = sp;return ($6|0);
}
function _PKCreateFactory_Release($ppFactory) {
 $ppFactory = $ppFactory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppFactory;
 $err = 0;
 $1 = $0;
 $2 = (_PKFree($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
 } else {
  $5 = $err;
  $err = $5;
 }
 $6 = $err;
 STACKTOP = sp;return ($6|0);
}
function _PKCreateFactory($ppFactory,$uVersion) {
 $ppFactory = $ppFactory|0;
 $uVersion = $uVersion|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pFactory = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppFactory;
 $1 = $uVersion;
 $err = 0;
 $pFactory = 0;
 $2 = $1;
 $1 = $2;
 $3 = $0;
 $4 = (_PKAlloc($3,16)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = $err;
  $err = $6;
  $17 = $err;
  STACKTOP = sp;return ($17|0);
 }
 $7 = $err;
 $err = $7;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $pFactory = $9;
 $10 = $pFactory;
 HEAP32[$10>>2] = 120;
 $11 = $pFactory;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 121;
 $13 = $pFactory;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 122;
 $15 = $pFactory;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = 123;
 $17 = $err;
 STACKTOP = sp;return ($17|0);
}
function _PKCreateCodecFactory_Release($ppCFactory) {
 $ppCFactory = $ppCFactory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppCFactory;
 $err = 0;
 $1 = $0;
 $2 = (_PKFree($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
 } else {
  $5 = $err;
  $err = $5;
 }
 $6 = $err;
 STACKTOP = sp;return ($6|0);
}
function _PKCreateCodecFactory($ppCFactory,$uVersion) {
 $ppCFactory = $ppCFactory|0;
 $uVersion = $uVersion|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pCFactory = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppCFactory;
 $1 = $uVersion;
 $err = 0;
 $pCFactory = 0;
 $2 = $1;
 $1 = $2;
 $3 = $0;
 $4 = (_PKAlloc($3,16)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = $err;
  $err = $6;
  $17 = $err;
  STACKTOP = sp;return ($17|0);
 }
 $7 = $err;
 $err = $7;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $pCFactory = $9;
 $10 = $pCFactory;
 HEAP32[$10>>2] = 0;
 $11 = $pCFactory;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = $pCFactory;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $pCFactory;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = 124;
 $17 = $err;
 STACKTOP = sp;return ($17|0);
}
function _PKImageEncode_Initialize($pIE,$pStream,$pvParam,$cbParam) {
 $pIE = $pIE|0;
 $pStream = $pStream|0;
 $pvParam = $pvParam|0;
 $cbParam = $cbParam|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pStream;
 $2 = $pvParam;
 $3 = $cbParam;
 $err = 0;
 $4 = $0;
 $0 = $4;
 $5 = $2;
 $2 = $5;
 $6 = $3;
 $3 = $6;
 $7 = $1;
 $8 = $0;
 $9 = (($8) + 60|0);
 HEAP32[$9>>2] = $7;
 $10 = $0;
 $11 = (($10) + 68|0);
 ;HEAP32[$11+0>>2]=HEAP32[15416+0>>2]|0;HEAP32[$11+4>>2]=HEAP32[15416+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[15416+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[15416+12>>2]|0;
 $12 = $0;
 $13 = (($12) + 96|0);
 HEAPF32[$13>>2] = 96.0;
 $14 = $0;
 $15 = (($14) + 100|0);
 HEAPF32[$15>>2] = 96.0;
 $16 = $0;
 $17 = (($16) + 104|0);
 HEAP32[$17>>2] = 1;
 $18 = $0;
 $19 = (($18) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = (($23) + 60|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = (($26) + 64|0);
 $28 = (FUNCTION_TABLE_iii[$22 & 255]($25,$27)|0);
 $err = $28;
 $29 = ($28|0)<(0);
 if ($29) {
  $30 = $err;
  $err = $30;
  $32 = $err;
  STACKTOP = sp;return ($32|0);
 }
 $31 = $err;
 $err = $31;
 $32 = $err;
 STACKTOP = sp;return ($32|0);
}
function _PKImageEncode_Terminate($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $0;
 $0 = $1;
 STACKTOP = sp;return 0;
}
function _PKImageEncode_SetPixelFormat($pIE,$enPixelFormat) {
 $pIE = $pIE|0;
 $enPixelFormat = $enPixelFormat|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $0;
 $2 = (($1) + 68|0);
 ;HEAP32[$2+0>>2]=HEAP32[$enPixelFormat+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$enPixelFormat+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$enPixelFormat+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$enPixelFormat+12>>2]|0;
 STACKTOP = sp;return 0;
}
function _PKImageEncode_SetSize($pIE,$iWidth,$iHeight) {
 $pIE = $pIE|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $iWidth;
 $2 = $iHeight;
 $err = 0;
 $3 = $1;
 $4 = $0;
 $5 = (($4) + 84|0);
 HEAP32[$5>>2] = $3;
 $6 = $2;
 $7 = $0;
 $8 = (($7) + 88|0);
 HEAP32[$8>>2] = $6;
 $9 = $err;
 STACKTOP = sp;return ($9|0);
}
function _PKImageEncode_SetResolution($pIE,$fResX,$fResY) {
 $pIE = $pIE|0;
 $fResX = +$fResX;
 $fResY = +$fResY;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $fResX;
 $2 = $fResY;
 $3 = $1;
 $4 = $0;
 $5 = (($4) + 96|0);
 HEAPF32[$5>>2] = $3;
 $6 = $2;
 $7 = $0;
 $8 = (($7) + 100|0);
 HEAPF32[$8>>2] = $6;
 STACKTOP = sp;return 0;
}
function _PKImageEncode_SetColorContext($pIE,$pbColorContext,$cbColorContext) {
 $pIE = $pIE|0;
 $pbColorContext = $pbColorContext|0;
 $cbColorContext = $cbColorContext|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pbColorContext;
 $2 = $cbColorContext;
 $3 = $0;
 $0 = $3;
 $4 = $1;
 $1 = $4;
 $5 = $2;
 $2 = $5;
 STACKTOP = sp;return -2;
}
function _PKImageEncode_SetDescriptiveMetadata($pIE,$pDescMetadata) {
 $pIE = $pIE|0;
 $pDescMetadata = $pDescMetadata|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pDescMetadata;
 $2 = $0;
 $0 = $2;
 $3 = $1;
 $1 = $3;
 STACKTOP = sp;return -2;
}
function _PKImageEncode_WritePixels($pIE,$cLine,$pbPixels,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixels;
 $3 = $cbStride;
 $4 = $0;
 $0 = $4;
 $5 = $1;
 $1 = $5;
 $6 = $2;
 $2 = $6;
 $7 = $3;
 $3 = $7;
 STACKTOP = sp;return -3;
}
function _PKImageEncode_WritePixelsBandedBegin($pEncoder,$pPATempFile) {
 $pEncoder = $pEncoder|0;
 $pPATempFile = $pPATempFile|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pEncoder;
 $1 = $pPATempFile;
 $2 = $0;
 $0 = $2;
 $3 = $1;
 $1 = $3;
 STACKTOP = sp;return -3;
}
function _PKImageEncode_WritePixelsBanded($pEncoder,$cLines,$pbPixels,$cbStride,$fLastCall) {
 $pEncoder = $pEncoder|0;
 $cLines = $cLines|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 $fLastCall = $fLastCall|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pEncoder;
 $1 = $cLines;
 $2 = $pbPixels;
 $3 = $cbStride;
 $4 = $fLastCall;
 $5 = $0;
 $0 = $5;
 $6 = $1;
 $1 = $6;
 $7 = $2;
 $2 = $7;
 $8 = $3;
 $3 = $8;
 $9 = $4;
 $4 = $9;
 STACKTOP = sp;return -3;
}
function _PKImageEncode_WritePixelsBandedEnd($pEncoder) {
 $pEncoder = $pEncoder|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pEncoder;
 $1 = $0;
 $0 = $1;
 STACKTOP = sp;return -3;
}
function _PKImageEncode_Transcode($pIE,$pFC,$pRect) {
 $pIE = $pIE|0;
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cParam = 0, $cbStride = 0, $cbStrideFrom = 0, $cbStrideTo = 0, $enPFFrom = 0, $enPFTo = 0, $err = 0, $pPIFrom = 0, $pPITo = 0, $pb = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $enPFFrom = sp + 160|0;
 $enPFTo = sp + 144|0;
 $pPIFrom = sp + 104|0;
 $pPITo = sp + 16|0;
 $pb = sp;
 $cParam = sp + 56|0;
 $0 = $pIE;
 $1 = $pFC;
 $2 = $pRect;
 $err = 0;
 ;HEAP32[$enPFFrom+0>>2]=HEAP32[15416+0>>2]|0;HEAP32[$enPFFrom+4>>2]=HEAP32[15416+4>>2]|0;HEAP32[$enPFFrom+8>>2]=HEAP32[15416+8>>2]|0;HEAP32[$enPFFrom+12>>2]=HEAP32[15416+12>>2]|0;
 ;HEAP32[$enPFTo+0>>2]=HEAP32[15416+0>>2]|0;HEAP32[$enPFTo+4>>2]=HEAP32[15416+4>>2]|0;HEAP32[$enPFTo+8>>2]=HEAP32[15416+8>>2]|0;HEAP32[$enPFTo+12>>2]=HEAP32[15416+12>>2]|0;
 $cbStrideTo = 0;
 $cbStrideFrom = 0;
 $cbStride = 0;
 HEAP32[$pb>>2] = 0;
 dest=$cParam+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (FUNCTION_TABLE_iii[$5 & 255]($6,$enPFFrom)|0);
 $err = $7;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $err;
  $err = $9;
  (_PKFreeAligned($pb)|0);
  $205 = $err;
  STACKTOP = sp;return ($205|0);
 }
 $10 = $err;
 $err = $10;
 $11 = $1;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = (FUNCTION_TABLE_iii[$13 & 255]($14,$enPFTo)|0);
 $err = $15;
 $16 = ($15|0)<(0);
 if ($16) {
  $17 = $err;
  $err = $17;
  (_PKFreeAligned($pb)|0);
  $205 = $err;
  STACKTOP = sp;return ($205|0);
 }
 $18 = $err;
 $err = $18;
 $19 = $0;
 $20 = (($19) + 68|0);
 $21 = (_memcmp($20,$enPFTo,16)|0);
 $22 = ($21|0)!=(0);
 $23 = $22 ^ 1;
 $24 = $23 ^ 1;
 $25 = $24 ? -106 : 0;
 $err = $25;
 $26 = ($25|0)<(0);
 if ($26) {
  $27 = $err;
  $err = $27;
  (_PKFreeAligned($pb)|0);
  $205 = $err;
  STACKTOP = sp;return ($205|0);
 }
 $28 = $err;
 $err = $28;
 HEAP32[$pPIFrom>>2] = $enPFFrom;
 (_PixelFormatLookup($pPIFrom,0)|0);
 HEAP32[$pPITo>>2] = $enPFTo;
 (_PixelFormatLookup($pPITo,0)|0);
 $29 = (($pPIFrom) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (0)==($30|0);
 if ($31) {
  $32 = (($pPIFrom) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $2;
  $35 = (($34) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = Math_imul($33, $36)|0;
  $38 = (($37) + 7)|0;
  $39 = $38 >>> 3;
  $48 = $39;
 } else {
  $40 = (($pPIFrom) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 7)|0;
  $43 = $42 >>> 3;
  $44 = $2;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = Math_imul($43, $46)|0;
  $48 = $47;
 }
 $cbStrideFrom = $48;
 $49 = HEAP32[$pPIFrom>>2]|0;
 $50 = (16440|0)==($49|0);
 if ($50) {
  label = 15;
 } else {
  $51 = HEAP32[$pPIFrom>>2]|0;
  $52 = (16456|0)==($51|0);
  if ($52) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $53 = $cbStrideFrom;
  $54 = $53 >>> 1;
  $cbStrideFrom = $54;
 }
 $55 = (($pPITo) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (0)==($56|0);
 if ($57) {
  $58 = (($pPITo) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $0;
  $61 = (($60) + 84|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = Math_imul($59, $62)|0;
  $64 = (($63) + 7)|0;
  $65 = $64 >>> 3;
  $74 = $65;
 } else {
  $66 = (($pPITo) + 16|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 7)|0;
  $69 = $68 >>> 3;
  $70 = $0;
  $71 = (($70) + 84|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = Math_imul($69, $72)|0;
  $74 = $73;
 }
 $cbStrideTo = $74;
 $75 = HEAP32[$pPITo>>2]|0;
 $76 = (16440|0)==($75|0);
 if ($76) {
  label = 21;
 } else {
  $77 = HEAP32[$pPITo>>2]|0;
  $78 = (16456|0)==($77|0);
  if ($78) {
   label = 21;
  }
 }
 if ((label|0) == 21) {
  $79 = $cbStrideTo;
  $80 = $79 >>> 1;
  $cbStrideTo = $80;
 }
 $81 = $cbStrideFrom;
 $82 = $cbStrideTo;
 $83 = ($81>>>0)>($82>>>0);
 if ($83) {
  $84 = $cbStrideFrom;
  $86 = $84;
 } else {
  $85 = $cbStrideTo;
  $86 = $85;
 }
 $cbStride = $86;
 $87 = $0;
 $88 = (($87) + 280|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0);
 do {
  if ($90) {
   $91 = $1;
   $92 = (($91) + 36|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + 92|0);
   $95 = (($94) + 88|0);
   $96 = (($95) + 32|0);
   $97 = HEAP32[$96>>2]|0;
   HEAP32[$cParam>>2] = $97;
   $98 = $1;
   $99 = (($98) + 36|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) + 92|0);
   $102 = (($101) + 88|0);
   $103 = (($102) + 40|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($cParam) + 8|0);
   HEAP32[$105>>2] = $104;
   $106 = $1;
   $107 = (($106) + 36|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + 92|0);
   $110 = (($109) + 88|0);
   $111 = (($110) + 36|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($cParam) + 4|0);
   HEAP32[$113>>2] = $112;
   $114 = $1;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + 92|0);
   $118 = (($117) + 88|0);
   $119 = (($118) + 44|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($cParam) + 12|0);
   HEAP32[$121>>2] = $120;
   $122 = $1;
   $123 = (($122) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + 92|0);
   $126 = (($125) + 88|0);
   $127 = (($126) + 64|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($cParam) + 28|0);
   HEAP32[$129>>2] = $128;
   $130 = $1;
   $131 = (($130) + 36|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($132) + 92|0);
   $134 = (($133) + 168|0);
   $135 = (($134) + 36|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = (($cParam) + 20|0);
   HEAP8[$137>>0] = $136;
   $138 = $1;
   $139 = (($138) + 36|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (($140) + 92|0);
   $142 = (($141) + 168|0);
   $143 = (($142) + 28|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($cParam) + 16|0);
   HEAP32[$145>>2] = $144;
   $146 = $1;
   $147 = (($146) + 36|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (($148) + 92|0);
   $150 = (($149) + 168|0);
   $151 = (($150) + 44|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (($cParam) + 24|0);
   HEAP32[$153>>2] = $152;
   $154 = $1;
   $155 = (($154) + 36|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + 92|0);
   $158 = (($157) + 65996|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($cParam) + 32|0);
   HEAP32[$160>>2] = $159;
   $161 = $0;
   $162 = (($161) + 48|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $0;
   $165 = $1;
   $166 = (($165) + 36|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (FUNCTION_TABLE_iiii[$163 & 255]($164,$167,$cParam)|0);
   $err = $168;
   $169 = ($168|0)<(0);
   if ($169) {
    $170 = $err;
    $err = $170;
    (_PKFreeAligned($pb)|0);
    $205 = $err;
    STACKTOP = sp;return ($205|0);
   } else {
    $171 = $err;
    $err = $171;
    break;
   }
  } else {
   $172 = $cbStride;
   $173 = $2;
   $174 = (($173) + 12|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = Math_imul($172, $175)|0;
   $177 = (_PKAllocAligned($pb,$176,128)|0);
   $err = $177;
   $178 = ($177|0)<(0);
   if ($178) {
    $179 = $err;
    $err = $179;
    (_PKFreeAligned($pb)|0);
    $205 = $err;
    STACKTOP = sp;return ($205|0);
   }
   $180 = $err;
   $err = $180;
   $181 = $1;
   $182 = (($181) + 24|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $1;
   $185 = $2;
   $186 = HEAP32[$pb>>2]|0;
   $187 = $cbStride;
   $188 = (FUNCTION_TABLE_iiiii[$183 & 255]($184,$185,$186,$187)|0);
   $err = $188;
   $189 = ($188|0)<(0);
   if ($189) {
    $190 = $err;
    $err = $190;
    (_PKFreeAligned($pb)|0);
    $205 = $err;
    STACKTOP = sp;return ($205|0);
   }
   $191 = $err;
   $err = $191;
   $192 = $0;
   $193 = (($192) + 28|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $0;
   $196 = $2;
   $197 = (($196) + 12|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = HEAP32[$pb>>2]|0;
   $200 = $cbStride;
   $201 = (FUNCTION_TABLE_iiiii[$194 & 255]($195,$198,$199,$200)|0);
   $err = $201;
   $202 = ($201|0)<(0);
   if ($202) {
    $203 = $err;
    $err = $203;
    (_PKFreeAligned($pb)|0);
    $205 = $err;
    STACKTOP = sp;return ($205|0);
   } else {
    $204 = $err;
    $err = $204;
    break;
   }
  }
 } while(0);
 (_PKFreeAligned($pb)|0);
 $205 = $err;
 STACKTOP = sp;return ($205|0);
}
function _PKImageEncode_CreateNewFrame($pIE,$pvParam,$cbParam) {
 $pIE = $pIE|0;
 $pvParam = $pvParam|0;
 $cbParam = $cbParam|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pvParam;
 $2 = $cbParam;
 $3 = $0;
 $0 = $3;
 $4 = $1;
 $1 = $4;
 $5 = $2;
 $2 = $5;
 STACKTOP = sp;return 0;
}
function _PKImageEncode_Release($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $pIE = $2;
 $3 = $pIE;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (0|0)!=($5|0);
 if (!($6)) {
  $14 = $0;
  $15 = (_PKFree($14)|0);
  STACKTOP = sp;return ($15|0);
 }
 $7 = $pIE;
 $8 = (($7) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $pIE;
 $13 = (($12) + 60|0);
 (FUNCTION_TABLE_ii[$11 & 255]($13)|0);
 $14 = $0;
 $15 = (_PKFree($14)|0);
 STACKTOP = sp;return ($15|0);
}
function _PKImageEncode_Create($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $pIE = 0;
 $1 = $0;
 $2 = (_PKAlloc($1,66308)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $35 = $err;
  STACKTOP = sp;return ($35|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pIE = $7;
 $8 = $pIE;
 HEAP32[$8>>2] = 125;
 $9 = $pIE;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 126;
 $11 = $pIE;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 127;
 $13 = $pIE;
 $14 = (($13) + 12|0);
 HEAP32[$14>>2] = 128;
 $15 = $pIE;
 $16 = (($15) + 16|0);
 HEAP32[$16>>2] = 129;
 $17 = $pIE;
 $18 = (($17) + 20|0);
 HEAP32[$18>>2] = 130;
 $19 = $pIE;
 $20 = (($19) + 24|0);
 HEAP32[$20>>2] = 131;
 $21 = $pIE;
 $22 = (($21) + 28|0);
 HEAP32[$22>>2] = 132;
 $23 = $pIE;
 $24 = (($23) + 36|0);
 HEAP32[$24>>2] = 133;
 $25 = $pIE;
 $26 = (($25) + 40|0);
 HEAP32[$26>>2] = 134;
 $27 = $pIE;
 $28 = (($27) + 44|0);
 HEAP32[$28>>2] = 135;
 $29 = $pIE;
 $30 = (($29) + 52|0);
 HEAP32[$30>>2] = 136;
 $31 = $pIE;
 $32 = (($31) + 56|0);
 HEAP32[$32>>2] = 137;
 $33 = $pIE;
 $34 = (($33) + 280|0);
 HEAP32[$34>>2] = 0;
 $35 = $err;
 STACKTOP = sp;return ($35|0);
}
function _PKImageDecode_Initialize($pID,$pStream) {
 $pID = $pID|0;
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pStream;
 $err = 0;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 44|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = (($5) + 56|0);
 ;HEAP32[$6+0>>2]=HEAP32[15416+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[15416+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[15416+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[15416+12>>2]|0;
 $7 = $0;
 $8 = (($7) + 80|0);
 HEAPF32[$8>>2] = 96.0;
 $9 = $0;
 $10 = (($9) + 84|0);
 HEAPF32[$10>>2] = 96.0;
 $11 = $0;
 $12 = (($11) + 88|0);
 HEAP32[$12>>2] = 1;
 $13 = $0;
 $14 = (($13) + 92|0);
 $15 = (($14) + 88|0);
 $16 = (($15) + 52|0);
 HEAP32[$16>>2] = 1;
 $17 = $0;
 $18 = (($17) + 92|0);
 $19 = (($18) + 33040|0);
 $20 = (($19) + 52|0);
 HEAP32[$20>>2] = 1;
 $21 = $0;
 $22 = (($21) + 92|0);
 dest=$22+0|0; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return 0;
}
function _PKImageDecode_GetPixelFormat($pID,$pPF) {
 $pID = $pID|0;
 $pPF = $pPF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pPF;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 56|0);
 ;HEAP32[$2+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return 0;
}
function _PKImageDecode_GetSize($pID,$piWidth,$piHeight) {
 $pID = $pID|0;
 $piWidth = $piWidth|0;
 $piHeight = $piHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $piWidth;
 $2 = $piHeight;
 $3 = $0;
 $4 = (($3) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 HEAP32[$6>>2] = $5;
 $7 = $0;
 $8 = (($7) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return 0;
}
function _PKImageDecode_GetResolution($pID,$pfResX,$pfResY) {
 $pID = $pID|0;
 $pfResX = $pfResX|0;
 $pfResY = $pfResY|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pfResX;
 $2 = $pfResY;
 $3 = $0;
 $4 = (($3) + 80|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $1;
 HEAPF32[$6>>2] = $5;
 $7 = $0;
 $8 = (($7) + 84|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $2;
 HEAPF32[$10>>2] = $9;
 STACKTOP = sp;return 0;
}
function _PKImageDecode_GetColorContext($pID,$pbColorContext,$pcbColorContext) {
 $pID = $pID|0;
 $pbColorContext = $pbColorContext|0;
 $pcbColorContext = $pcbColorContext|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pbColorContext;
 $2 = $pcbColorContext;
 $3 = $0;
 $0 = $3;
 $4 = $1;
 $1 = $4;
 $5 = $2;
 $2 = $5;
 STACKTOP = sp;return -2;
}
function _PKImageDecode_GetDescriptiveMetadata($pIE,$pDescMetadata) {
 $pIE = $pIE|0;
 $pDescMetadata = $pDescMetadata|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pDescMetadata;
 $2 = $0;
 $0 = $2;
 $3 = $1;
 $1 = $3;
 STACKTOP = sp;return -2;
}
function _PKImageDecode_Copy($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $0;
 $0 = $4;
 $5 = $1;
 $1 = $5;
 $6 = $2;
 $2 = $6;
 $7 = $3;
 $3 = $7;
 STACKTOP = sp;return -3;
}
function _PKImageDecode_GetFrameCount($pID,$puCount) {
 $pID = $pID|0;
 $puCount = $puCount|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $puCount;
 $2 = $0;
 $3 = (($2) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return 0;
}
function _PKImageDecode_SelectFrame($pID,$uFrame) {
 $pID = $pID|0;
 $uFrame = $uFrame|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $uFrame;
 $2 = $0;
 $0 = $2;
 $3 = $1;
 $1 = $3;
 STACKTOP = sp;return 0;
}
function _PKImageDecode_Release($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $pID = $2;
 $3 = $pID;
 $4 = (($3) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $14 = $0;
  $15 = (_PKFree($14)|0);
  STACKTOP = sp;return ($15|0);
 }
 $7 = $pID;
 $8 = (($7) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $pID;
 $13 = (($12) + 44|0);
 (FUNCTION_TABLE_ii[$11 & 255]($13)|0);
 $14 = $0;
 $15 = (_PKFree($14)|0);
 STACKTOP = sp;return ($15|0);
}
function _PKImageDecode_Create($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKAlloc($1,66240)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $27 = $err;
  STACKTOP = sp;return ($27|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 138;
 $9 = $pID;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 139;
 $11 = $pID;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 140;
 $13 = $pID;
 $14 = (($13) + 12|0);
 HEAP32[$14>>2] = 141;
 $15 = $pID;
 $16 = (($15) + 16|0);
 HEAP32[$16>>2] = 142;
 $17 = $pID;
 $18 = (($17) + 20|0);
 HEAP32[$18>>2] = 143;
 $19 = $pID;
 $20 = (($19) + 28|0);
 HEAP32[$20>>2] = 144;
 $21 = $pID;
 $22 = (($21) + 32|0);
 HEAP32[$22>>2] = 145;
 $23 = $pID;
 $24 = (($23) + 36|0);
 HEAP32[$24>>2] = 146;
 $25 = $pID;
 $26 = (($25) + 40|0);
 HEAP32[$26>>2] = 147;
 $27 = $err;
 STACKTOP = sp;return ($27|0);
}
function _FreeDescMetadata($pvar) {
 $pvar = $pvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pvar;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 19: case 18: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 case 30:  {
  $3 = $0;
  $4 = (($3) + 4|0);
  (_PKFree($4)|0);
  STACKTOP = sp;return;
  break;
 }
 case 31:  {
  $5 = $0;
  $6 = (($5) + 4|0);
  (_PKFree($6)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((19512|0),(16616|0),967,(19520|0));
  // unreachable;
 }
 }
}
function _getbfw($pb,$cb,$ofs,$pw) {
 $pb = $pb|0;
 $cb = $cb|0;
 $ofs = $ofs|0;
 $pw = $pw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pb;
 $1 = $cb;
 $2 = $ofs;
 $3 = $pw;
 $err = 0;
 $4 = $2;
 $5 = (($4) + 2)|0;
 $6 = $1;
 $7 = ($5>>>0)>($6>>>0);
 $8 = $7 ? -103 : 0;
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $27 = $err;
  STACKTOP = sp;return ($27|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $2;
 $13 = $0;
 $14 = (($13) + ($12)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $2;
 $18 = (($17) + 1)|0;
 $19 = $0;
 $20 = (($19) + ($18)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 8;
 $24 = (($16) + ($23))|0;
 $25 = $24&65535;
 $26 = $3;
 HEAP16[$26>>1] = $25;
 $27 = $err;
 STACKTOP = sp;return ($27|0);
}
function _getbfdw($pb,$cb,$ofs,$pdw) {
 $pb = $pb|0;
 $cb = $cb|0;
 $ofs = $ofs|0;
 $pdw = $pdw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pb;
 $1 = $cb;
 $2 = $ofs;
 $3 = $pdw;
 $err = 0;
 $4 = $2;
 $5 = (($4) + 4)|0;
 $6 = $1;
 $7 = ($5>>>0)>($6>>>0);
 $8 = $7 ? -103 : 0;
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $42 = $err;
  STACKTOP = sp;return ($42|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $2;
 $13 = $0;
 $14 = (($13) + ($12)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $2;
 $18 = (($17) + 1)|0;
 $19 = $0;
 $20 = (($19) + ($18)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 8;
 $24 = (($16) + ($23))|0;
 $25 = $2;
 $26 = (($25) + 2)|0;
 $27 = $0;
 $28 = (($27) + ($26)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 << 16;
 $32 = (($24) + ($31))|0;
 $33 = $2;
 $34 = (($33) + 3)|0;
 $35 = $0;
 $36 = (($35) + ($34)|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38 << 24;
 $40 = (($32) + ($39))|0;
 $41 = $3;
 HEAP32[$41>>2] = $40;
 $42 = $err;
 STACKTOP = sp;return ($42|0);
}
function _getbfwbig($pb,$cb,$ofs,$pw) {
 $pb = $pb|0;
 $cb = $cb|0;
 $ofs = $ofs|0;
 $pw = $pw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pb;
 $1 = $cb;
 $2 = $ofs;
 $3 = $pw;
 $err = 0;
 $4 = $2;
 $5 = (($4) + 2)|0;
 $6 = $1;
 $7 = ($5>>>0)>($6>>>0);
 $8 = $7 ? -103 : 0;
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $27 = $err;
  STACKTOP = sp;return ($27|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $2;
 $13 = (($12) + 1)|0;
 $14 = $0;
 $15 = (($14) + ($13)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $2;
 $19 = $0;
 $20 = (($19) + ($18)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 8;
 $24 = (($17) + ($23))|0;
 $25 = $24&65535;
 $26 = $3;
 HEAP16[$26>>1] = $25;
 $27 = $err;
 STACKTOP = sp;return ($27|0);
}
function _getbfdwbig($pb,$cb,$ofs,$pdw) {
 $pb = $pb|0;
 $cb = $cb|0;
 $ofs = $ofs|0;
 $pdw = $pdw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pb;
 $1 = $cb;
 $2 = $ofs;
 $3 = $pdw;
 $err = 0;
 $4 = $2;
 $5 = (($4) + 4)|0;
 $6 = $1;
 $7 = ($5>>>0)>($6>>>0);
 $8 = $7 ? -103 : 0;
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $42 = $err;
  STACKTOP = sp;return ($42|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $2;
 $13 = (($12) + 3)|0;
 $14 = $0;
 $15 = (($14) + ($13)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $2;
 $19 = (($18) + 2)|0;
 $20 = $0;
 $21 = (($20) + ($19)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 << 8;
 $25 = (($17) + ($24))|0;
 $26 = $2;
 $27 = (($26) + 1)|0;
 $28 = $0;
 $29 = (($28) + ($27)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 << 16;
 $33 = (($25) + ($32))|0;
 $34 = $2;
 $35 = $0;
 $36 = (($35) + ($34)|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38 << 24;
 $40 = (($33) + ($39))|0;
 $41 = $3;
 HEAP32[$41>>2] = $40;
 $42 = $err;
 STACKTOP = sp;return ($42|0);
}
function _getbfwe($pb,$cb,$ofs,$pw,$endian) {
 $pb = $pb|0;
 $cb = $cb|0;
 $ofs = $ofs|0;
 $pw = $pw|0;
 $endian = $endian|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pb;
 $2 = $cb;
 $3 = $ofs;
 $4 = $pw;
 $5 = $endian;
 $6 = $5;
 $7 = $6&255;
 $8 = ($7|0)==(73);
 if ($8) {
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = $4;
  $13 = (_getbfw($9,$10,$11,$12)|0);
  $0 = $13;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $14 = $1;
  $15 = $2;
  $16 = $3;
  $17 = $4;
  $18 = (_getbfwbig($14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return 0|0;
}
function _getbfdwe($pb,$cb,$ofs,$pdw,$endian) {
 $pb = $pb|0;
 $cb = $cb|0;
 $ofs = $ofs|0;
 $pdw = $pdw|0;
 $endian = $endian|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pb;
 $2 = $cb;
 $3 = $ofs;
 $4 = $pdw;
 $5 = $endian;
 $6 = $5;
 $7 = $6&255;
 $8 = ($7|0)==(73);
 if ($8) {
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = $4;
  $13 = (_getbfdw($9,$10,$11,$12)|0);
  $0 = $13;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $14 = $1;
  $15 = $2;
  $16 = $3;
  $17 = $4;
  $18 = (_getbfdwbig($14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return 0|0;
}
function _setbfw($pb,$cb,$ofs,$dw) {
 $pb = $pb|0;
 $cb = $cb|0;
 $ofs = $ofs|0;
 $dw = $dw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pb;
 $1 = $cb;
 $2 = $ofs;
 $3 = $dw;
 $err = 0;
 $4 = $2;
 $5 = (($4) + 2)|0;
 $6 = $1;
 $7 = ($5>>>0)>($6>>>0);
 $8 = $7 ? -103 : 0;
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $25 = $err;
  STACKTOP = sp;return ($25|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $3;
 $13 = $12&255;
 $14 = $2;
 $15 = $0;
 $16 = (($15) + ($14)|0);
 HEAP8[$16>>0] = $13;
 $17 = $3;
 $18 = $17&65535;
 $19 = $18 >> 8;
 $20 = $19&255;
 $21 = $2;
 $22 = (($21) + 1)|0;
 $23 = $0;
 $24 = (($23) + ($22)|0);
 HEAP8[$24>>0] = $20;
 $25 = $err;
 STACKTOP = sp;return ($25|0);
}
function _setbfdw($pb,$cb,$ofs,$dw) {
 $pb = $pb|0;
 $cb = $cb|0;
 $ofs = $ofs|0;
 $dw = $dw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pb;
 $1 = $cb;
 $2 = $ofs;
 $3 = $dw;
 $err = 0;
 $4 = $2;
 $5 = (($4) + 4)|0;
 $6 = $1;
 $7 = ($5>>>0)>($6>>>0);
 $8 = $7 ? -103 : 0;
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $38 = $err;
  STACKTOP = sp;return ($38|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $3;
 $13 = $12&255;
 $14 = $2;
 $15 = $0;
 $16 = (($15) + ($14)|0);
 HEAP8[$16>>0] = $13;
 $17 = $3;
 $18 = $17 >>> 8;
 $19 = $18&255;
 $20 = $2;
 $21 = (($20) + 1)|0;
 $22 = $0;
 $23 = (($22) + ($21)|0);
 HEAP8[$23>>0] = $19;
 $24 = $3;
 $25 = $24 >>> 16;
 $26 = $25&255;
 $27 = $2;
 $28 = (($27) + 2)|0;
 $29 = $0;
 $30 = (($29) + ($28)|0);
 HEAP8[$30>>0] = $26;
 $31 = $3;
 $32 = $31 >>> 24;
 $33 = $32&255;
 $34 = $2;
 $35 = (($34) + 3)|0;
 $36 = $0;
 $37 = (($36) + ($35)|0);
 HEAP8[$37>>0] = $33;
 $38 = $err;
 STACKTOP = sp;return ($38|0);
}
function _StreamCalcIFDSize($pWS,$uIFDOfs,$pcbifd) {
 $pWS = $pWS|0;
 $uIFDOfs = $uIFDOfs|0;
 $pcbifd = $pcbifd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $GetPosOK = 0, $cDir = 0, $cbEXIFIFD = 0, $cbGPSInfoIFD = 0, $cbInteroperabilityIFD = 0, $cbifd = 0, $count = 0, $datasize = 0, $err = 0, $i = 0;
 var $offCurPos = 0, $ofsdir = 0, $tag = 0, $type = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offCurPos = sp + 40|0;
 $cDir = sp + 64|0;
 $cbEXIFIFD = sp + 8|0;
 $cbGPSInfoIFD = sp + 16|0;
 $cbInteroperabilityIFD = sp + 20|0;
 $tag = sp + 62|0;
 $type = sp + 60|0;
 $count = sp + 24|0;
 $value = sp + 28|0;
 $0 = $pWS;
 $1 = $uIFDOfs;
 $2 = $pcbifd;
 $err = 0;
 HEAP32[$offCurPos>>2] = 0;
 $GetPosOK = 0;
 $cbifd = 0;
 HEAP32[$cbEXIFIFD>>2] = 0;
 HEAP32[$cbGPSInfoIFD>>2] = 0;
 HEAP32[$cbInteroperabilityIFD>>2] = 0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = (FUNCTION_TABLE_iii[$6 & 255]($7,$offCurPos)|0);
 $err = $8;
 $9 = ($8|0)<(0);
 do {
  if ($9) {
   $10 = $err;
   $err = $10;
  } else {
   $11 = $err;
   $err = $11;
   $GetPosOK = 1;
   $12 = $0;
   $13 = $1;
   $14 = (_GetUShort($12,$13,$cDir)|0);
   $err = $14;
   $15 = ($14|0)<(0);
   if ($15) {
    $16 = $err;
    $err = $16;
    break;
   }
   $17 = $err;
   $err = $17;
   $18 = HEAP16[$cDir>>1]|0;
   $19 = $18&65535;
   $20 = HEAP32[16568>>2]|0;
   $21 = Math_imul($19, $20)|0;
   $22 = (2 + ($21))|0;
   $23 = (($22) + 4)|0;
   $cbifd = $23;
   $24 = $1;
   $25 = (($24) + 2)|0;
   $ofsdir = $25;
   $i = 0;
   while(1) {
    $26 = $i;
    $27 = HEAP16[$cDir>>1]|0;
    $28 = $27&65535;
    $29 = ($26>>>0)<($28>>>0);
    if (!($29)) {
     label = 48;
     break;
    }
    $30 = $0;
    $31 = $ofsdir;
    $32 = (_GetUShort($30,$31,$tag)|0);
    $err = $32;
    $33 = ($32|0)<(0);
    if ($33) {
     label = 10;
     break;
    }
    $35 = $err;
    $err = $35;
    $36 = $0;
    $37 = $ofsdir;
    $38 = (($37) + 2)|0;
    $39 = (_GetUShort($36,$38,$type)|0);
    $err = $39;
    $40 = ($39|0)<(0);
    if ($40) {
     label = 13;
     break;
    }
    $42 = $err;
    $err = $42;
    $43 = $0;
    $44 = $ofsdir;
    $45 = (($44) + 4)|0;
    $46 = (_GetULong($43,$45,$count)|0);
    $err = $46;
    $47 = ($46|0)<(0);
    if ($47) {
     label = 16;
     break;
    }
    $49 = $err;
    $err = $49;
    $50 = $0;
    $51 = $ofsdir;
    $52 = (($51) + 4)|0;
    $53 = (($52) + 4)|0;
    $54 = (_GetULong($50,$53,$value)|0);
    $err = $54;
    $55 = ($54|0)<(0);
    if ($55) {
     label = 19;
     break;
    }
    $57 = $err;
    $err = $57;
    $58 = HEAP16[$type>>1]|0;
    $59 = $58&65535;
    $60 = ($59|0)==(0);
    if ($60) {
     $65 = 1;
    } else {
     $61 = HEAP16[$type>>1]|0;
     $62 = $61&65535;
     $63 = ($62>>>0)>=(13);
     $65 = $63;
    }
    $64 = $65 ? -106 : 0;
    $err = $64;
    $66 = ($64|0)<(0);
    if ($66) {
     label = 24;
     break;
    }
    $68 = $err;
    $err = $68;
    $69 = HEAP16[$tag>>1]|0;
    $70 = $69&65535;
    $71 = ($70|0)==(34665);
    if ($71) {
     $72 = $0;
     $73 = HEAP32[$value>>2]|0;
     $74 = (_StreamCalcIFDSize($72,$73,$cbEXIFIFD)|0);
     $err = $74;
     $75 = ($74|0)<(0);
     if ($75) {
      label = 28;
      break;
     }
     $77 = $err;
     $err = $77;
    } else {
     $78 = HEAP16[$tag>>1]|0;
     $79 = $78&65535;
     $80 = ($79|0)==(34853);
     if ($80) {
      $81 = $0;
      $82 = HEAP32[$value>>2]|0;
      $83 = (_StreamCalcIFDSize($81,$82,$cbGPSInfoIFD)|0);
      $err = $83;
      $84 = ($83|0)<(0);
      if ($84) {
       label = 33;
       break;
      }
      $86 = $err;
      $err = $86;
     } else {
      $87 = HEAP16[$tag>>1]|0;
      $88 = $87&65535;
      $89 = ($88|0)==(40965);
      if ($89) {
       $90 = $0;
       $91 = HEAP32[$value>>2]|0;
       $92 = (_StreamCalcIFDSize($90,$91,$cbInteroperabilityIFD)|0);
       $err = $92;
       $93 = ($92|0)<(0);
       if ($93) {
        label = 38;
        break;
       }
       $95 = $err;
       $err = $95;
      } else {
       $96 = HEAP16[$type>>1]|0;
       $97 = $96&65535;
       $98 = (16512 + ($97<<2)|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = HEAP32[$count>>2]|0;
       $101 = Math_imul($99, $100)|0;
       $datasize = $101;
       $102 = $datasize;
       $103 = ($102>>>0)>(4);
       if ($103) {
        $104 = $datasize;
        $105 = $cbifd;
        $106 = (($105) + ($104))|0;
        $cbifd = $106;
       }
      }
     }
    }
    $107 = HEAP32[16568>>2]|0;
    $108 = $ofsdir;
    $109 = (($108) + ($107))|0;
    $ofsdir = $109;
    $110 = $i;
    $111 = (($110) + 1)|0;
    $i = $111;
   }
   if ((label|0) == 10) {
    $34 = $err;
    $err = $34;
    break;
   }
   else if ((label|0) == 13) {
    $41 = $err;
    $err = $41;
    break;
   }
   else if ((label|0) == 16) {
    $48 = $err;
    $err = $48;
    break;
   }
   else if ((label|0) == 19) {
    $56 = $err;
    $err = $56;
    break;
   }
   else if ((label|0) == 24) {
    $67 = $err;
    $err = $67;
    break;
   }
   else if ((label|0) == 28) {
    $76 = $err;
    $err = $76;
    break;
   }
   else if ((label|0) == 33) {
    $85 = $err;
    $err = $85;
    break;
   }
   else if ((label|0) == 38) {
    $94 = $err;
    $err = $94;
    break;
   }
   else if ((label|0) == 48) {
    $112 = HEAP32[$cbEXIFIFD>>2]|0;
    $113 = ($112|0)!=(0);
    if ($113) {
     $114 = $cbifd;
     $115 = $114 & 1;
     $116 = HEAP32[$cbEXIFIFD>>2]|0;
     $117 = (($115) + ($116))|0;
     $118 = $cbifd;
     $119 = (($118) + ($117))|0;
     $cbifd = $119;
    }
    $120 = HEAP32[$cbGPSInfoIFD>>2]|0;
    $121 = ($120|0)!=(0);
    if ($121) {
     $122 = $cbifd;
     $123 = $122 & 1;
     $124 = HEAP32[$cbGPSInfoIFD>>2]|0;
     $125 = (($123) + ($124))|0;
     $126 = $cbifd;
     $127 = (($126) + ($125))|0;
     $cbifd = $127;
    }
    $128 = HEAP32[$cbInteroperabilityIFD>>2]|0;
    $129 = ($128|0)!=(0);
    if ($129) {
     $130 = $cbifd;
     $131 = $130 & 1;
     $132 = HEAP32[$cbInteroperabilityIFD>>2]|0;
     $133 = (($131) + ($132))|0;
     $134 = $cbifd;
     $135 = (($134) + ($133))|0;
     $cbifd = $135;
    }
    $136 = $cbifd;
    $137 = $2;
    HEAP32[$137>>2] = $136;
    break;
   }
  }
 } while(0);
 while(1) {
  $138 = $GetPosOK;
  $139 = ($138|0)!=(0);
  if (!($139)) {
   label = 60;
   break;
  }
  $140 = $0;
  $141 = (($140) + 44|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $0;
  $144 = HEAP32[$offCurPos>>2]|0;
  $145 = (FUNCTION_TABLE_iii[$142 & 255]($143,$144)|0);
  $err = $145;
  $146 = ($145|0)<(0);
  if (!($146)) {
   break;
  }
  $147 = $err;
  $err = $147;
 }
 if ((label|0) == 60) {
  $149 = $err;
  STACKTOP = sp;return ($149|0);
 }
 $148 = $err;
 $err = $148;
 $149 = $err;
 STACKTOP = sp;return ($149|0);
}
function _GetUShort($pWS,$offPos,$puValue) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 $puValue = $puValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cVal = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cVal = sp + 16|0;
 $0 = $pWS;
 $1 = $offPos;
 $2 = $puValue;
 $err = 0;
 $3 = $0;
 $4 = (($3) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $1;
 $8 = (FUNCTION_TABLE_iii[$5 & 255]($6,$7)|0);
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $40 = $err;
  STACKTOP = sp;return ($40|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $0;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (FUNCTION_TABLE_iiii[$14 & 255]($15,$cVal,1)|0);
 $err = $16;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $err;
  $err = $18;
  $40 = $err;
  STACKTOP = sp;return ($40|0);
 }
 $19 = $err;
 $err = $19;
 $20 = HEAP8[$cVal>>0]|0;
 $21 = $20&255;
 $22 = $2;
 HEAP16[$22>>1] = $21;
 $23 = $0;
 $24 = (($23) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = (FUNCTION_TABLE_iiii[$25 & 255]($26,$cVal,1)|0);
 $err = $27;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = $err;
  $err = $29;
  $40 = $err;
  STACKTOP = sp;return ($40|0);
 }
 $30 = $err;
 $err = $30;
 $31 = HEAP8[$cVal>>0]|0;
 $32 = $31&255;
 $33 = $32&65535;
 $34 = $33 << 8;
 $35 = $2;
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = (($37) + ($34))|0;
 $39 = $38&65535;
 HEAP16[$35>>1] = $39;
 $40 = $err;
 STACKTOP = sp;return ($40|0);
}
function _GetULong($pWS,$offPos,$puValue) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 $puValue = $puValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $cVal = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cVal = sp + 16|0;
 $0 = $pWS;
 $1 = $offPos;
 $2 = $puValue;
 $err = 0;
 $3 = $0;
 $4 = (($3) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $1;
 $8 = (FUNCTION_TABLE_iii[$5 & 255]($6,$7)|0);
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $65 = $err;
  STACKTOP = sp;return ($65|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $0;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (FUNCTION_TABLE_iiii[$14 & 255]($15,$cVal,1)|0);
 $err = $16;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $err;
  $err = $18;
  $65 = $err;
  STACKTOP = sp;return ($65|0);
 }
 $19 = $err;
 $err = $19;
 $20 = HEAP8[$cVal>>0]|0;
 $21 = $20&255;
 $22 = $2;
 HEAP32[$22>>2] = $21;
 $23 = $0;
 $24 = (($23) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = (FUNCTION_TABLE_iiii[$25 & 255]($26,$cVal,1)|0);
 $err = $27;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = $err;
  $err = $29;
  $65 = $err;
  STACKTOP = sp;return ($65|0);
 }
 $30 = $err;
 $err = $30;
 $31 = HEAP8[$cVal>>0]|0;
 $32 = $31&255;
 $33 = $32 << 8;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($33))|0;
 HEAP32[$34>>2] = $36;
 $37 = $0;
 $38 = (($37) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $0;
 $41 = (FUNCTION_TABLE_iiii[$39 & 255]($40,$cVal,1)|0);
 $err = $41;
 $42 = ($41|0)<(0);
 if ($42) {
  $43 = $err;
  $err = $43;
  $65 = $err;
  STACKTOP = sp;return ($65|0);
 }
 $44 = $err;
 $err = $44;
 $45 = HEAP8[$cVal>>0]|0;
 $46 = $45&255;
 $47 = $46 << 16;
 $48 = $2;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + ($47))|0;
 HEAP32[$48>>2] = $50;
 $51 = $0;
 $52 = (($51) + 32|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $0;
 $55 = (FUNCTION_TABLE_iiii[$53 & 255]($54,$cVal,1)|0);
 $err = $55;
 $56 = ($55|0)<(0);
 if ($56) {
  $57 = $err;
  $err = $57;
  $65 = $err;
  STACKTOP = sp;return ($65|0);
 }
 $58 = $err;
 $err = $58;
 $59 = HEAP8[$cVal>>0]|0;
 $60 = $59&255;
 $61 = $60 << 24;
 $62 = $2;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($61))|0;
 HEAP32[$62>>2] = $64;
 $65 = $err;
 STACKTOP = sp;return ($65|0);
}
function _BufferCopyIFD($pbsrc,$cbsrc,$ofssrc,$endian,$pbdst,$cbdst,$pofsdst) {
 $pbsrc = $pbsrc|0;
 $cbsrc = $cbsrc|0;
 $ofssrc = $ofssrc|0;
 $endian = $endian|0;
 $pbdst = $pbdst|0;
 $cbdst = $cbdst|0;
 $pofsdst = $pofsdst|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cDir = 0, $count = 0;
 var $dw = 0, $dwhi = 0, $dwlo = 0, $err = 0, $i = 0, $j = 0, $ofsEXIFIFD = 0, $ofsEXIFIFDEntry = 0, $ofsGPSInfoIFD = 0, $ofsGPSInfoIFDEntry = 0, $ofsInteroperabilityIFD = 0, $ofsInteroperabilityIFDEntry = 0, $ofsdst = 0, $ofsdstdata = 0, $ofsdstdir = 0, $ofsdstnextdata = 0, $ofsnextifd = 0, $ofssrcdata = 0, $ofssrcdir = 0, $size = 0;
 var $tag = 0, $type = 0, $value = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cDir = sp + 104|0;
 $ofsdstnextdata = sp + 4|0;
 $tag = sp + 108|0;
 $type = sp + 110|0;
 $count = sp + 28|0;
 $value = sp + 32|0;
 $w = sp + 100|0;
 $dwlo = sp + 52|0;
 $dwhi = sp + 56|0;
 $dw = sp + 60|0;
 $0 = $pbsrc;
 $1 = $cbsrc;
 $2 = $ofssrc;
 $3 = $endian;
 $4 = $pbdst;
 $5 = $cbdst;
 $6 = $pofsdst;
 $err = 0;
 $ofsEXIFIFDEntry = 0;
 $ofsGPSInfoIFDEntry = 0;
 $ofsInteroperabilityIFDEntry = 0;
 $ofsEXIFIFD = 0;
 $ofsGPSInfoIFD = 0;
 $ofsInteroperabilityIFD = 0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $ofsdst = $8;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = (_getbfwe($9,$10,$11,$cDir,$12)|0);
 $err = $13;
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = $err;
  $err = $15;
  $377 = $err;
  STACKTOP = sp;return ($377|0);
 }
 $16 = $err;
 $err = $16;
 $17 = $4;
 $18 = $5;
 $19 = $ofsdst;
 $20 = HEAP16[$cDir>>1]|0;
 $21 = (_setbfw($17,$18,$19,$20)|0);
 $err = $21;
 $22 = ($21|0)<(0);
 if ($22) {
  $23 = $err;
  $err = $23;
  $377 = $err;
  STACKTOP = sp;return ($377|0);
 }
 $24 = $err;
 $err = $24;
 $25 = $ofsdst;
 $26 = (($25) + 2)|0;
 $27 = HEAP32[16568>>2]|0;
 $28 = HEAP16[$cDir>>1]|0;
 $29 = $28&65535;
 $30 = Math_imul($27, $29)|0;
 $31 = (($26) + ($30))|0;
 $ofsnextifd = $31;
 $32 = $ofsnextifd;
 $33 = (($32) + 4)|0;
 HEAP32[$ofsdstnextdata>>2] = $33;
 $34 = $2;
 $35 = (($34) + 2)|0;
 $ofssrcdir = $35;
 $36 = $ofsdst;
 $37 = (($36) + 2)|0;
 $ofsdstdir = $37;
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $38&65535;
  $40 = HEAP16[$cDir>>1]|0;
  $41 = $40&65535;
  $42 = ($39|0)<($41|0);
  if (!($42)) {
   label = 81;
   break;
  }
  $43 = $0;
  $44 = $1;
  $45 = $ofssrcdir;
  $46 = $3;
  $47 = (_getbfwe($43,$44,$45,$tag,$46)|0);
  $err = $47;
  $48 = ($47|0)<(0);
  if ($48) {
   label = 10;
   break;
  }
  $50 = $err;
  $err = $50;
  $51 = $4;
  $52 = $5;
  $53 = $ofsdstdir;
  $54 = HEAP16[$tag>>1]|0;
  $55 = (_setbfw($51,$52,$53,$54)|0);
  $err = $55;
  $56 = ($55|0)<(0);
  if ($56) {
   label = 13;
   break;
  }
  $58 = $err;
  $err = $58;
  $59 = $0;
  $60 = $1;
  $61 = $ofssrcdir;
  $62 = (($61) + 2)|0;
  $63 = $3;
  $64 = (_getbfwe($59,$60,$62,$type,$63)|0);
  $err = $64;
  $65 = ($64|0)<(0);
  if ($65) {
   label = 16;
   break;
  }
  $67 = $err;
  $err = $67;
  $68 = $4;
  $69 = $5;
  $70 = $ofsdstdir;
  $71 = (($70) + 2)|0;
  $72 = HEAP16[$type>>1]|0;
  $73 = (_setbfw($68,$69,$71,$72)|0);
  $err = $73;
  $74 = ($73|0)<(0);
  if ($74) {
   label = 19;
   break;
  }
  $76 = $err;
  $err = $76;
  $77 = $0;
  $78 = $1;
  $79 = $ofssrcdir;
  $80 = (($79) + 4)|0;
  $81 = $3;
  $82 = (_getbfdwe($77,$78,$80,$count,$81)|0);
  $err = $82;
  $83 = ($82|0)<(0);
  if ($83) {
   label = 22;
   break;
  }
  $85 = $err;
  $err = $85;
  $86 = $4;
  $87 = $5;
  $88 = $ofsdstdir;
  $89 = (($88) + 4)|0;
  $90 = HEAP32[$count>>2]|0;
  $91 = (_setbfdw($86,$87,$89,$90)|0);
  $err = $91;
  $92 = ($91|0)<(0);
  if ($92) {
   label = 25;
   break;
  }
  $94 = $err;
  $err = $94;
  $95 = $0;
  $96 = $1;
  $97 = $ofssrcdir;
  $98 = (($97) + 4)|0;
  $99 = (($98) + 4)|0;
  $100 = $3;
  $101 = (_getbfdwe($95,$96,$99,$value,$100)|0);
  $err = $101;
  $102 = ($101|0)<(0);
  if ($102) {
   label = 28;
   break;
  }
  $104 = $err;
  $err = $104;
  $105 = $4;
  $106 = $5;
  $107 = $ofsdstdir;
  $108 = (($107) + 4)|0;
  $109 = (($108) + 4)|0;
  $110 = (_setbfdw($105,$106,$109,0)|0);
  $err = $110;
  $111 = ($110|0)<(0);
  if ($111) {
   label = 31;
   break;
  }
  $113 = $err;
  $err = $113;
  $114 = HEAP16[$type>>1]|0;
  $115 = $114&65535;
  $116 = ($115|0)==(0);
  if ($116) {
   $121 = 1;
  } else {
   $117 = HEAP16[$type>>1]|0;
   $118 = $117&65535;
   $119 = ($118>>>0)>=(13);
   $121 = $119;
  }
  $120 = $121 ? -1 : 0;
  $err = $120;
  $122 = ($120|0)<(0);
  if ($122) {
   label = 36;
   break;
  }
  $124 = $err;
  $err = $124;
  $125 = HEAP16[$tag>>1]|0;
  $126 = $125&65535;
  $127 = ($126|0)==(34665);
  if ($127) {
   $128 = $ofsdstdir;
   $129 = $128&65535;
   $ofsEXIFIFDEntry = $129;
   $130 = HEAP32[$value>>2]|0;
   $ofsEXIFIFD = $130;
  } else {
   $131 = HEAP16[$tag>>1]|0;
   $132 = $131&65535;
   $133 = ($132|0)==(34853);
   if ($133) {
    $134 = $ofsdstdir;
    $135 = $134&65535;
    $ofsGPSInfoIFDEntry = $135;
    $136 = HEAP32[$value>>2]|0;
    $ofsGPSInfoIFD = $136;
   } else {
    $137 = HEAP16[$tag>>1]|0;
    $138 = $137&65535;
    $139 = ($138|0)==(40965);
    if ($139) {
     $140 = $ofsdstdir;
     $141 = $140&65535;
     $ofsInteroperabilityIFDEntry = $141;
     $142 = HEAP32[$value>>2]|0;
     $ofsInteroperabilityIFD = $142;
    } else {
     $143 = $ofsdstdir;
     $144 = (($143) + 4)|0;
     $145 = (($144) + 4)|0;
     $ofsdstdata = $145;
     $146 = $ofssrcdir;
     $147 = (($146) + 4)|0;
     $148 = (($147) + 4)|0;
     $ofssrcdata = $148;
     $149 = HEAP32[$count>>2]|0;
     $150 = HEAP16[$type>>1]|0;
     $151 = $150&65535;
     $152 = (16512 + ($151<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = Math_imul($149, $153)|0;
     $size = $154;
     $155 = $size;
     $156 = ($155>>>0)>(4);
     if ($156) {
      $157 = HEAP32[$value>>2]|0;
      $ofssrcdata = $157;
      $158 = $4;
      $159 = $5;
      $160 = $ofsdstdata;
      $161 = HEAP32[$ofsdstnextdata>>2]|0;
      $162 = (_setbfdw($158,$159,$160,$161)|0);
      $err = $162;
      $163 = ($162|0)<(0);
      if ($163) {
       label = 46;
       break;
      }
      $165 = $err;
      $err = $165;
      $166 = HEAP32[$ofsdstnextdata>>2]|0;
      $ofsdstdata = $166;
      $167 = $size;
      $168 = HEAP32[$ofsdstnextdata>>2]|0;
      $169 = (($168) + ($167))|0;
      HEAP32[$ofsdstnextdata>>2] = $169;
     }
     $170 = $ofssrcdata;
     $171 = $size;
     $172 = (($170) + ($171))|0;
     $173 = $1;
     $174 = ($172>>>0)>($173>>>0);
     if ($174) {
      $181 = 1;
     } else {
      $175 = $ofsdstdata;
      $176 = $size;
      $177 = (($175) + ($176))|0;
      $178 = $5;
      $179 = ($177>>>0)>($178>>>0);
      $181 = $179;
     }
     $180 = $181 ? -103 : 0;
     $err = $180;
     $182 = ($180|0)<(0);
     if ($182) {
      label = 52;
      break;
     }
     $184 = $err;
     $err = $184;
     $185 = $size;
     $186 = HEAP32[$count>>2]|0;
     $187 = ($185|0)==($186|0);
     do {
      if ($187) {
       label = 56;
      } else {
       $188 = $3;
       $189 = $188&255;
       $190 = ($189|0)==(73);
       if ($190) {
        label = 56;
        break;
       }
       $198 = HEAP16[$type>>1]|0;
       $199 = $198&65535;
       $200 = (16512 + ($199<<2)|0);
       $201 = HEAP32[$200>>2]|0;
       do {
        if ((($201|0) == 8)) {
         $220 = HEAP16[$type>>1]|0;
         $221 = $220&65535;
         $222 = ($221|0)==(12);
         if (!($222)) {
          $256 = HEAP32[$count>>2]|0;
          $257 = $256<<1;
          HEAP32[$count>>2] = $257;
          label = 70;
          break;
         }
         $j = 0;
         while(1) {
          $223 = $j;
          $224 = HEAP32[$count>>2]|0;
          $225 = ($223>>>0)<($224>>>0);
          if (!($225)) {
           break;
          }
          $226 = $0;
          $227 = $1;
          $228 = $ofssrcdata;
          $229 = $j;
          $230 = $229<<3;
          $231 = (($228) + ($230))|0;
          (_getbfdwbig($226,$227,$231,$dwhi)|0);
          $232 = $0;
          $233 = $1;
          $234 = $ofssrcdata;
          $235 = $j;
          $236 = $235<<3;
          $237 = (($234) + ($236))|0;
          $238 = (($237) + 4)|0;
          (_getbfdwbig($232,$233,$238,$dwlo)|0);
          $239 = $4;
          $240 = $5;
          $241 = $ofsdstdata;
          $242 = $j;
          $243 = $242<<3;
          $244 = (($241) + ($243))|0;
          $245 = HEAP32[$dwlo>>2]|0;
          (_setbfdw($239,$240,$244,$245)|0);
          $246 = $4;
          $247 = $5;
          $248 = $ofsdstdata;
          $249 = $j;
          $250 = $249<<3;
          $251 = (($248) + ($250))|0;
          $252 = (($251) + 4)|0;
          $253 = HEAP32[$dwhi>>2]|0;
          (_setbfdw($246,$247,$252,$253)|0);
          $254 = $j;
          $255 = (($254) + 1)|0;
          $j = $255;
         }
        } else if ((($201|0) == 4)) {
         label = 70;
        } else if ((($201|0) == 2)) {
         $j = 0;
         while(1) {
          $202 = $j;
          $203 = HEAP32[$count>>2]|0;
          $204 = ($202>>>0)<($203>>>0);
          if (!($204)) {
           break;
          }
          $205 = $0;
          $206 = $1;
          $207 = $ofssrcdata;
          $208 = $j;
          $209 = $208<<1;
          $210 = (($207) + ($209))|0;
          (_getbfwbig($205,$206,$210,$w)|0);
          $211 = $4;
          $212 = $5;
          $213 = $ofsdstdata;
          $214 = $j;
          $215 = $214<<1;
          $216 = (($213) + ($215))|0;
          $217 = HEAP16[$w>>1]|0;
          (_setbfw($211,$212,$216,$217)|0);
          $218 = $j;
          $219 = (($218) + 1)|0;
          $j = $219;
         }
        }
       } while(0);
       if ((label|0) == 70) {
        label = 0;
        $j = 0;
        while(1) {
         $258 = $j;
         $259 = HEAP32[$count>>2]|0;
         $260 = ($258>>>0)<($259>>>0);
         if (!($260)) {
          break;
         }
         $261 = $0;
         $262 = $1;
         $263 = $ofssrcdata;
         $264 = $j;
         $265 = $264<<2;
         $266 = (($263) + ($265))|0;
         (_getbfdwbig($261,$262,$266,$dw)|0);
         $267 = $4;
         $268 = $5;
         $269 = $ofsdstdata;
         $270 = $j;
         $271 = $270<<2;
         $272 = (($269) + ($271))|0;
         $273 = HEAP32[$dw>>2]|0;
         (_setbfdw($267,$268,$272,$273)|0);
         $274 = $j;
         $275 = (($274) + 1)|0;
         $j = $275;
        }
       }
      }
     } while(0);
     if ((label|0) == 56) {
      label = 0;
      $191 = $ofsdstdata;
      $192 = $4;
      $193 = (($192) + ($191)|0);
      $194 = $ofssrcdata;
      $195 = $0;
      $196 = (($195) + ($194)|0);
      $197 = $size;
      _memcpy(($193|0),($196|0),($197|0))|0;
     }
    }
   }
  }
  $276 = HEAP32[16568>>2]|0;
  $277 = $ofssrcdir;
  $278 = (($277) + ($276))|0;
  $ofssrcdir = $278;
  $279 = HEAP32[16568>>2]|0;
  $280 = $ofsdstdir;
  $281 = (($280) + ($279))|0;
  $ofsdstdir = $281;
  $282 = $i;
  $283 = (($282) + 1)<<16>>16;
  $i = $283;
 }
 switch (label|0) {
  case 10: {
   $49 = $err;
   $err = $49;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 13: {
   $57 = $err;
   $err = $57;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 16: {
   $66 = $err;
   $err = $66;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 19: {
   $75 = $err;
   $err = $75;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 22: {
   $84 = $err;
   $err = $84;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 25: {
   $93 = $err;
   $err = $93;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 28: {
   $103 = $err;
   $err = $103;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 31: {
   $112 = $err;
   $err = $112;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 36: {
   $123 = $err;
   $err = $123;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 46: {
   $164 = $err;
   $err = $164;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 52: {
   $183 = $err;
   $err = $183;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
  case 81: {
   $284 = $4;
   $285 = $5;
   $286 = $ofsnextifd;
   $287 = (_setbfdw($284,$285,$286,0)|0);
   $err = $287;
   $288 = ($287|0)<(0);
   if ($288) {
    $289 = $err;
    $err = $289;
    $377 = $err;
    STACKTOP = sp;return ($377|0);
   }
   $290 = $err;
   $err = $290;
   $291 = $ofsEXIFIFDEntry;
   $292 = $291&65535;
   $293 = ($292|0)!=(0);
   do {
    if ($293) {
     $294 = HEAP32[$ofsdstnextdata>>2]|0;
     $295 = $294 & 1;
     $296 = HEAP32[$ofsdstnextdata>>2]|0;
     $297 = (($296) + ($295))|0;
     HEAP32[$ofsdstnextdata>>2] = $297;
     $298 = $4;
     $299 = $5;
     $300 = $ofsEXIFIFDEntry;
     $301 = $300&65535;
     $302 = (($301) + 4)|0;
     $303 = (($302) + 4)|0;
     $304 = HEAP32[$ofsdstnextdata>>2]|0;
     $305 = (_setbfdw($298,$299,$303,$304)|0);
     $err = $305;
     $306 = ($305|0)<(0);
     if ($306) {
      $307 = $err;
      $err = $307;
      $377 = $err;
      STACKTOP = sp;return ($377|0);
     }
     $308 = $err;
     $err = $308;
     $309 = $0;
     $310 = $1;
     $311 = $ofsEXIFIFD;
     $312 = $3;
     $313 = $4;
     $314 = $5;
     $315 = (_BufferCopyIFD($309,$310,$311,$312,$313,$314,$ofsdstnextdata)|0);
     $err = $315;
     $316 = ($315|0)<(0);
     if ($316) {
      $317 = $err;
      $err = $317;
      $377 = $err;
      STACKTOP = sp;return ($377|0);
     } else {
      $318 = $err;
      $err = $318;
      break;
     }
    }
   } while(0);
   $319 = $ofsGPSInfoIFDEntry;
   $320 = $319&65535;
   $321 = ($320|0)!=(0);
   do {
    if ($321) {
     $322 = HEAP32[$ofsdstnextdata>>2]|0;
     $323 = $322 & 1;
     $324 = HEAP32[$ofsdstnextdata>>2]|0;
     $325 = (($324) + ($323))|0;
     HEAP32[$ofsdstnextdata>>2] = $325;
     $326 = $4;
     $327 = $5;
     $328 = $ofsGPSInfoIFDEntry;
     $329 = $328&65535;
     $330 = (($329) + 4)|0;
     $331 = (($330) + 4)|0;
     $332 = HEAP32[$ofsdstnextdata>>2]|0;
     $333 = (_setbfdw($326,$327,$331,$332)|0);
     $err = $333;
     $334 = ($333|0)<(0);
     if ($334) {
      $335 = $err;
      $err = $335;
      $377 = $err;
      STACKTOP = sp;return ($377|0);
     }
     $336 = $err;
     $err = $336;
     $337 = $0;
     $338 = $1;
     $339 = $ofsGPSInfoIFD;
     $340 = $3;
     $341 = $4;
     $342 = $5;
     $343 = (_BufferCopyIFD($337,$338,$339,$340,$341,$342,$ofsdstnextdata)|0);
     $err = $343;
     $344 = ($343|0)<(0);
     if ($344) {
      $345 = $err;
      $err = $345;
      $377 = $err;
      STACKTOP = sp;return ($377|0);
     } else {
      $346 = $err;
      $err = $346;
      break;
     }
    }
   } while(0);
   $347 = $ofsInteroperabilityIFDEntry;
   $348 = $347&65535;
   $349 = ($348|0)!=(0);
   do {
    if ($349) {
     $350 = HEAP32[$ofsdstnextdata>>2]|0;
     $351 = $350 & 1;
     $352 = HEAP32[$ofsdstnextdata>>2]|0;
     $353 = (($352) + ($351))|0;
     HEAP32[$ofsdstnextdata>>2] = $353;
     $354 = $4;
     $355 = $5;
     $356 = $ofsInteroperabilityIFDEntry;
     $357 = $356&65535;
     $358 = (($357) + 4)|0;
     $359 = (($358) + 4)|0;
     $360 = HEAP32[$ofsdstnextdata>>2]|0;
     $361 = (_setbfdw($354,$355,$359,$360)|0);
     $err = $361;
     $362 = ($361|0)<(0);
     if ($362) {
      $363 = $err;
      $err = $363;
      $377 = $err;
      STACKTOP = sp;return ($377|0);
     }
     $364 = $err;
     $err = $364;
     $365 = $0;
     $366 = $1;
     $367 = $ofsInteroperabilityIFD;
     $368 = $3;
     $369 = $4;
     $370 = $5;
     $371 = (_BufferCopyIFD($365,$366,$367,$368,$369,$370,$ofsdstnextdata)|0);
     $err = $371;
     $372 = ($371|0)<(0);
     if ($372) {
      $373 = $err;
      $err = $373;
      $377 = $err;
      STACKTOP = sp;return ($377|0);
     } else {
      $374 = $err;
      $err = $374;
      break;
     }
    }
   } while(0);
   $375 = HEAP32[$ofsdstnextdata>>2]|0;
   $376 = $6;
   HEAP32[$376>>2] = $375;
   $377 = $err;
   STACKTOP = sp;return ($377|0);
   break;
  }
 }
 return 0|0;
}
function _PutUShort($pWS,$offPos,$uValue) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 $uValue = $uValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cVal = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cVal = sp + 14|0;
 $0 = $pWS;
 $1 = $offPos;
 $2 = $uValue;
 $err = 0;
 $3 = $2;
 $4 = $3&255;
 HEAP8[$cVal>>0] = $4;
 $5 = $0;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $1;
 $10 = (FUNCTION_TABLE_iii[$7 & 255]($8,$9)|0);
 $err = $10;
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = $err;
  $err = $12;
  $34 = $err;
  STACKTOP = sp;return ($34|0);
 }
 $13 = $err;
 $err = $13;
 $14 = $0;
 $15 = (($14) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (FUNCTION_TABLE_iiii[$16 & 255]($17,$cVal,1)|0);
 $err = $18;
 $19 = ($18|0)<(0);
 if ($19) {
  $20 = $err;
  $err = $20;
  $34 = $err;
  STACKTOP = sp;return ($34|0);
 }
 $21 = $err;
 $err = $21;
 $22 = $2;
 $23 = $22&65535;
 $24 = $23 >> 8;
 $25 = $24&255;
 HEAP8[$cVal>>0] = $25;
 $26 = $0;
 $27 = (($26) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = (FUNCTION_TABLE_iiii[$28 & 255]($29,$cVal,1)|0);
 $err = $30;
 $31 = ($30|0)<(0);
 if ($31) {
  $32 = $err;
  $err = $32;
  $34 = $err;
  STACKTOP = sp;return ($34|0);
 }
 $33 = $err;
 $err = $33;
 $34 = $err;
 STACKTOP = sp;return ($34|0);
}
function _PutULong($pWS,$offPos,$uValue) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 $uValue = $uValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cVal = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cVal = sp + 16|0;
 $0 = $pWS;
 $1 = $offPos;
 $2 = $uValue;
 $err = 0;
 $3 = $2;
 $4 = $3&255;
 HEAP8[$cVal>>0] = $4;
 $5 = $0;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $1;
 $10 = (FUNCTION_TABLE_iii[$7 & 255]($8,$9)|0);
 $err = $10;
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = $err;
  $err = $12;
  $55 = $err;
  STACKTOP = sp;return ($55|0);
 }
 $13 = $err;
 $err = $13;
 $14 = $0;
 $15 = (($14) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (FUNCTION_TABLE_iiii[$16 & 255]($17,$cVal,1)|0);
 $err = $18;
 $19 = ($18|0)<(0);
 if ($19) {
  $20 = $err;
  $err = $20;
  $55 = $err;
  STACKTOP = sp;return ($55|0);
 }
 $21 = $err;
 $err = $21;
 $22 = $2;
 $23 = $22 >>> 8;
 $24 = $23&255;
 HEAP8[$cVal>>0] = $24;
 $25 = $0;
 $26 = (($25) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $0;
 $29 = (FUNCTION_TABLE_iiii[$27 & 255]($28,$cVal,1)|0);
 $err = $29;
 $30 = ($29|0)<(0);
 if ($30) {
  $31 = $err;
  $err = $31;
  $55 = $err;
  STACKTOP = sp;return ($55|0);
 }
 $32 = $err;
 $err = $32;
 $33 = $2;
 $34 = $33 >>> 16;
 $35 = $34&255;
 HEAP8[$cVal>>0] = $35;
 $36 = $0;
 $37 = (($36) + 40|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $0;
 $40 = (FUNCTION_TABLE_iiii[$38 & 255]($39,$cVal,1)|0);
 $err = $40;
 $41 = ($40|0)<(0);
 if ($41) {
  $42 = $err;
  $err = $42;
  $55 = $err;
  STACKTOP = sp;return ($55|0);
 }
 $43 = $err;
 $err = $43;
 $44 = $2;
 $45 = $44 >>> 24;
 $46 = $45&255;
 HEAP8[$cVal>>0] = $46;
 $47 = $0;
 $48 = (($47) + 40|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $0;
 $51 = (FUNCTION_TABLE_iiii[$49 & 255]($50,$cVal,1)|0);
 $err = $51;
 $52 = ($51|0)<(0);
 if ($52) {
  $53 = $err;
  $err = $53;
  $55 = $err;
  STACKTOP = sp;return ($55|0);
 }
 $54 = $err;
 $err = $54;
 $55 = $err;
 STACKTOP = sp;return ($55|0);
}
function _ReadBinaryData($pWS,$uCount,$uValue,$ppbData) {
 $pWS = $pWS|0;
 $uCount = $uCount|0;
 $uValue = $uValue|0;
 $ppbData = $ppbData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, $offPosPrev = 0, $pbData = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $pbData = sp + 16|0;
 $offPosPrev = sp + 24|0;
 $0 = $pWS;
 $1 = $uCount;
 HEAP32[$2>>2] = $uValue;
 $3 = $ppbData;
 $err = 0;
 HEAP32[$pbData>>2] = 0;
 $4 = $1;
 $5 = (($4) + 2)|0;
 $6 = (_PKAlloc($pbData,$5)|0);
 $err = $6;
 $7 = ($6|0)<(0);
 do {
  if ($7) {
   $8 = $err;
   $err = $8;
  } else {
   $9 = $err;
   $err = $9;
   $10 = $1;
   $11 = ($10>>>0)<=(4);
   if ($11) {
    $i = 0;
    while(1) {
     $12 = $i;
     $13 = $1;
     $14 = ($12>>>0)<($13>>>0);
     if (!($14)) {
      break;
     }
     $15 = $i;
     $16 = (($2) + ($15)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $i;
     $19 = HEAP32[$pbData>>2]|0;
     $20 = (($19) + ($18)|0);
     HEAP8[$20>>0] = $17;
     $21 = $i;
     $22 = (($21) + 1)|0;
     $i = $22;
    }
   } else {
    $23 = $0;
    $24 = (($23) + 48|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $0;
    $27 = (FUNCTION_TABLE_iii[$25 & 255]($26,$offPosPrev)|0);
    $err = $27;
    $28 = ($27|0)<(0);
    if ($28) {
     $29 = $err;
     $err = $29;
     break;
    }
    $30 = $err;
    $err = $30;
    $31 = $0;
    $32 = (($31) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $0;
    $35 = HEAP32[$2>>2]|0;
    $36 = (FUNCTION_TABLE_iii[$33 & 255]($34,$35)|0);
    $err = $36;
    $37 = ($36|0)<(0);
    if ($37) {
     $38 = $err;
     $err = $38;
     break;
    }
    $39 = $err;
    $err = $39;
    $40 = $0;
    $41 = (($40) + 32|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $0;
    $44 = HEAP32[$pbData>>2]|0;
    $45 = $1;
    $46 = (FUNCTION_TABLE_iiii[$42 & 255]($43,$44,$45)|0);
    $err = $46;
    $47 = ($46|0)<(0);
    if ($47) {
     $48 = $err;
     $err = $48;
     break;
    }
    $49 = $err;
    $err = $49;
    $50 = $0;
    $51 = (($50) + 44|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $0;
    $54 = HEAP32[$offPosPrev>>2]|0;
    $55 = (FUNCTION_TABLE_iii[$52 & 255]($53,$54)|0);
    $err = $55;
    $56 = ($55|0)<(0);
    if ($56) {
     $57 = $err;
     $err = $57;
     break;
    }
    $58 = $err;
    $err = $58;
   }
   $59 = HEAP32[$pbData>>2]|0;
   $60 = $3;
   HEAP32[$60>>2] = $59;
  }
 } while(0);
 $61 = $err;
 $62 = ($61|0)<(0);
 if (!($62)) {
  $65 = $err;
  STACKTOP = sp;return ($65|0);
 }
 $63 = HEAP32[$pbData>>2]|0;
 $64 = ($63|0)!=(0|0);
 if ($64) {
  (_PKFree($pbData)|0);
 }
 $65 = $err;
 STACKTOP = sp;return ($65|0);
}
function _ReadPropvar($pWS,$uType,$uCount,$uValue,$pvar) {
 $pWS = $pWS|0;
 $uType = $uType|0;
 $uCount = $uCount|0;
 $uValue = $uValue|0;
 $pvar = $pvar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $uType;
 $2 = $uCount;
 $3 = $uValue;
 $4 = $pvar;
 $err = 0;
 $5 = $4;
 ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 $6 = $2;
 $7 = ($6|0)==(0);
 if ($7) {
  $58 = $err;
  STACKTOP = sp;return ($58|0);
 }
 $8 = $1;
 $9 = $8&65535;
 do {
  if ((($9|0) == 3)) {
   $44 = $2;
   $45 = (1)==($44|0);
   if ($45) {
    $46 = $4;
    HEAP32[$46>>2] = 18;
    $47 = $3;
    $48 = $47 & 65535;
    $49 = $48&65535;
    $50 = $4;
    $51 = (($50) + 4|0);
    HEAP16[$51>>1] = $49;
   } else {
    $52 = $2;
    $53 = (2)==($52|0);
    if (!($53)) {
     ___assert_fail((19688|0),(19648|0),751,(19672|0));
     // unreachable;
    }
    $54 = $4;
    HEAP32[$54>>2] = 19;
    $55 = $3;
    $56 = $4;
    $57 = (($56) + 4|0);
    HEAP32[$57>>2] = $55;
   }
  } else if ((($9|0) == 7) | (($9|0) == 1)) {
   $34 = $4;
   HEAP32[$34>>2] = 16401;
   $35 = $0;
   $36 = $2;
   $37 = $3;
   $38 = $4;
   $39 = (($38) + 4|0);
   $40 = (_ReadBinaryData($35,$36,$37,$39)|0);
   $err = $40;
   $41 = ($40|0)<(0);
   if ($41) {
    $42 = $err;
    $err = $42;
    $58 = $err;
    STACKTOP = sp;return ($58|0);
   } else {
    $43 = $err;
    $err = $43;
    break;
   }
  } else if ((($9|0) == 2)) {
   $10 = $4;
   HEAP32[$10>>2] = 30;
   $11 = $0;
   $12 = $2;
   $13 = $3;
   $14 = $4;
   $15 = (($14) + 4|0);
   $16 = (_ReadBinaryData($11,$12,$13,$15)|0);
   $err = $16;
   $17 = ($16|0)<(0);
   if ($17) {
    $18 = $err;
    $err = $18;
    $58 = $err;
    STACKTOP = sp;return ($58|0);
   }
   $19 = $err;
   $err = $19;
   $20 = $2;
   $21 = (($20) - 1)|0;
   $22 = $4;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = (0)==($27|0);
   if ($28) {
    $29 = $2;
    $30 = $4;
    $31 = (($30) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + ($29)|0);
    HEAP8[$33>>0] = 0;
    break;
   } else {
    ___assert_fail((19608|0),(19648|0),724,(19672|0));
    // unreachable;
   }
  } else {
   ___assert_fail((19688|0),(19648|0),757,(19672|0));
   // unreachable;
  }
 } while(0);
 $58 = $err;
 STACKTOP = sp;return ($58|0);
}
function _WriteWmpDE($pWS,$pOffPos,$pDE,$pbData,$pcbDataWrittenToOffset) {
 $pWS = $pWS|0;
 $pOffPos = $pOffPos|0;
 $pDE = $pDE|0;
 $pbData = $pbData|0;
 $pcbDataWrittenToOffset = $pcbDataWrittenToOffset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $offPos = 0, $pad = 0, $uiShrt1 = 0, $uiShrt2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp + 32|0;
 $0 = $pWS;
 $1 = $pOffPos;
 $2 = $pDE;
 $3 = $pbData;
 $4 = $pcbDataWrittenToOffset;
 $err = 0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $offPos = $6;
 $7 = $2;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (-1)!=($9|0);
 if (!($10)) {
  ___assert_fail((19696|0),(19648|0),777,(19720|0));
  // unreachable;
 }
 $11 = $2;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (-1)!=($13|0);
 if (!($14)) {
  ___assert_fail((19736|0),(19648|0),778,(19720|0));
  // unreachable;
 }
 $15 = $4;
 $16 = ($15|0)!=(0|0);
 do {
  if ($16) {
   $17 = $3;
   $18 = ($17|0)!=(0|0);
   if ($18) {
    $19 = $4;
    HEAP32[$19>>2] = 0;
    break;
   } else {
    ___assert_fail((19768|0),(19648|0),782,(19720|0));
    // unreachable;
   }
  }
 } while(0);
 $20 = $0;
 $21 = $offPos;
 $22 = $2;
 $23 = HEAP16[$22>>1]|0;
 $24 = (_PutUShort($20,$21,$23)|0);
 $err = $24;
 $25 = ($24|0)<(0);
 L13: do {
  if ($25) {
   $26 = $err;
   $err = $26;
  } else {
   $27 = $err;
   $err = $27;
   $28 = $offPos;
   $29 = (($28) + 2)|0;
   $offPos = $29;
   $30 = $0;
   $31 = $offPos;
   $32 = $2;
   $33 = (($32) + 2|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = (_PutUShort($30,$31,$34)|0);
   $err = $35;
   $36 = ($35|0)<(0);
   if ($36) {
    $37 = $err;
    $err = $37;
    break;
   }
   $38 = $err;
   $err = $38;
   $39 = $offPos;
   $40 = (($39) + 2)|0;
   $offPos = $40;
   $41 = $0;
   $42 = $offPos;
   $43 = $2;
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (_PutULong($41,$42,$45)|0);
   $err = $46;
   $47 = ($46|0)<(0);
   if ($47) {
    $48 = $err;
    $err = $48;
    break;
   }
   $49 = $err;
   $err = $49;
   $50 = $offPos;
   $51 = (($50) + 4)|0;
   $offPos = $51;
   $52 = $2;
   $53 = (($52) + 2|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   switch ($55|0) {
   case 1: case 7: case 2:  {
    $56 = $2;
    $57 = (($56) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58>>>0)<=(4);
    if ($59) {
     ;HEAP8[$pad+0>>0]=0|0;HEAP8[$pad+1>>0]=0|0;HEAP8[$pad+2>>0]=0|0;HEAP8[$pad+3>>0]=0|0;
     $60 = $0;
     $61 = (($60) + 44|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $0;
     $64 = $offPos;
     $65 = (FUNCTION_TABLE_iii[$62 & 255]($63,$64)|0);
     $err = $65;
     $66 = ($65|0)<(0);
     if ($66) {
      $67 = $err;
      $err = $67;
      break L13;
     }
     $68 = $err;
     $err = $68;
     $69 = $3;
     $70 = (0|0)==($69|0);
     if ($70) {
      $71 = $2;
      $72 = (($71) + 8|0);
      $3 = $72;
     }
     $73 = $0;
     $74 = (($73) + 40|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $0;
     $77 = $3;
     $78 = $2;
     $79 = (($78) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (FUNCTION_TABLE_iiii[$75 & 255]($76,$77,$80)|0);
     $err = $81;
     $82 = ($81|0)<(0);
     if ($82) {
      $83 = $err;
      $err = $83;
      break L13;
     }
     $84 = $err;
     $err = $84;
     $85 = $0;
     $86 = (($85) + 40|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $0;
     $89 = $2;
     $90 = (($89) + 4|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (4 - ($91))|0;
     $93 = (FUNCTION_TABLE_iiii[$87 & 255]($88,$pad,$92)|0);
     $err = $93;
     $94 = ($93|0)<(0);
     if ($94) {
      $95 = $err;
      $err = $95;
      break L13;
     }
     $96 = $err;
     $err = $96;
     $97 = $offPos;
     $98 = (($97) + 4)|0;
     $offPos = $98;
    } else {
     $99 = $0;
     $100 = $offPos;
     $101 = $2;
     $102 = (($101) + 8|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (_PutULong($99,$100,$103)|0);
     $err = $104;
     $105 = ($104|0)<(0);
     if ($105) {
      $106 = $err;
      $err = $106;
      break L13;
     }
     $107 = $err;
     $err = $107;
     $108 = $offPos;
     $109 = (($108) + 4)|0;
     $offPos = $109;
     $110 = $3;
     $111 = ($110|0)!=(0|0);
     if ($111) {
      $112 = $0;
      $113 = (($112) + 44|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = $0;
      $116 = $2;
      $117 = (($116) + 8|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = (FUNCTION_TABLE_iii[$114 & 255]($115,$118)|0);
      $err = $119;
      $120 = ($119|0)<(0);
      if ($120) {
       $121 = $err;
       $err = $121;
       break L13;
      }
      $122 = $err;
      $err = $122;
      $123 = $0;
      $124 = (($123) + 40|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = $0;
      $127 = $3;
      $128 = $2;
      $129 = (($128) + 4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (FUNCTION_TABLE_iiii[$125 & 255]($126,$127,$130)|0);
      $err = $131;
      $132 = ($131|0)<(0);
      if ($132) {
       $133 = $err;
       $err = $133;
       break L13;
      }
      $134 = $err;
      $err = $134;
      $135 = $0;
      $136 = (($135) + 44|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = $0;
      $139 = $offPos;
      $140 = (FUNCTION_TABLE_iii[$137 & 255]($138,$139)|0);
      $err = $140;
      $141 = ($140|0)<(0);
      if ($141) {
       $142 = $err;
       $err = $142;
       break L13;
      }
      $143 = $err;
      $err = $143;
      $144 = $2;
      $145 = (($144) + 4|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = $4;
      HEAP32[$147>>2] = $146;
     }
    }
    break;
   }
   case 3:  {
    $148 = $2;
    $149 = (($148) + 4|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ($150>>>0)<=(2);
    if (!($151)) {
     ___assert_fail((19688|0),(19648|0),845,(19720|0));
     // unreachable;
    }
    $uiShrt1 = 0;
    $uiShrt2 = 0;
    $152 = $3;
    $153 = (0|0)==($152|0);
    if ($153) {
     $154 = $2;
     $155 = (($154) + 8|0);
     $3 = $155;
    }
    $156 = $2;
    $157 = (($156) + 4|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158>>>0)>(0);
    if ($159) {
     $160 = $3;
     $161 = HEAP16[$160>>1]|0;
     $uiShrt1 = $161;
    }
    $162 = $2;
    $163 = (($162) + 4|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ($164>>>0)>(1);
    if ($165) {
     ___assert_fail((19688|0),(19648|0),836,(19720|0));
     // unreachable;
    }
    $166 = $0;
    $167 = $offPos;
    $168 = $uiShrt1;
    $169 = (_PutUShort($166,$167,$168)|0);
    $err = $169;
    $170 = ($169|0)<(0);
    if ($170) {
     $171 = $err;
     $err = $171;
     break L13;
    }
    $172 = $err;
    $err = $172;
    $173 = $offPos;
    $174 = (($173) + 2)|0;
    $offPos = $174;
    $175 = $0;
    $176 = $offPos;
    $177 = $uiShrt2;
    $178 = (_PutUShort($175,$176,$177)|0);
    $err = $178;
    $179 = ($178|0)<(0);
    if ($179) {
     $180 = $err;
     $err = $180;
     break L13;
    }
    $181 = $err;
    $err = $181;
    $182 = $offPos;
    $183 = (($182) + 2)|0;
    $offPos = $183;
    break;
   }
   case 4: case 11:  {
    $184 = $2;
    $185 = (($184) + 4|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = ($186>>>0)<=(1);
    if (!($187)) {
     ___assert_fail((19688|0),(19648|0),876,(19720|0));
     // unreachable;
    }
    $188 = $3;
    $189 = (0|0)==($188|0);
    if ($189) {
     $190 = $2;
     $191 = (($190) + 8|0);
     $3 = $191;
    }
    $192 = $0;
    $193 = $offPos;
    $194 = $3;
    $195 = HEAP32[$194>>2]|0;
    $196 = (_PutULong($192,$193,$195)|0);
    $err = $196;
    $197 = ($196|0)<(0);
    if ($197) {
     $198 = $err;
     $err = $198;
     break L13;
    }
    $199 = $err;
    $err = $199;
    $200 = $offPos;
    $201 = (($200) + 4)|0;
    $offPos = $201;
    break;
   }
   default: {
    ___assert_fail((19688|0),(19648|0),896,(19720|0));
    // unreachable;
   }
   }
  }
 } while(0);
 $202 = $offPos;
 $203 = $1;
 HEAP32[$203>>2] = $202;
 $204 = $err;
 STACKTOP = sp;return ($204|0);
}
function _RGB24_BGR24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $j = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $i = 0;
 $j = 0;
 $4 = $0;
 $0 = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $j = 0;
  while(1) {
   $10 = $j;
   $11 = $1;
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13*3)|0;
   $15 = ($10|0)<($14|0);
   if (!($15)) {
    break;
   }
   $16 = $j;
   $17 = $2;
   $18 = (($17) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $t = $19;
   $20 = $j;
   $21 = (($20) + 2)|0;
   $22 = $2;
   $23 = (($22) + ($21)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $j;
   $26 = $2;
   $27 = (($26) + ($25)|0);
   HEAP8[$27>>0] = $24;
   $28 = $t;
   $29 = $j;
   $30 = (($29) + 2)|0;
   $31 = $2;
   $32 = (($31) + ($30)|0);
   HEAP8[$32>>0] = $28;
   $33 = $j;
   $34 = (($33) + 3)|0;
   $j = $34;
  }
  $35 = $3;
  $36 = $2;
  $37 = (($36) + ($35)|0);
  $2 = $37;
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 STACKTOP = sp;return 0;
}
function _BGR24_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_RGB24_BGR24($4,$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _RGB24_BGR32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $i = 0;
 $j = 0;
 $4 = $0;
 $0 = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) - 1)|0;
  $j = $13;
  while(1) {
   $14 = $j;
   $15 = ($14|0)>=(0);
   if (!($15)) {
    break;
   }
   $16 = $j;
   $17 = ($16*3)|0;
   $18 = $2;
   $19 = (($18) + ($17)|0);
   $20 = HEAP8[$19>>0]|0;
   $t = $20;
   $21 = $j;
   $22 = ($21*3)|0;
   $23 = (($22) + 2)|0;
   $24 = $2;
   $25 = (($24) + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $j;
   $28 = $27<<2;
   $29 = $2;
   $30 = (($29) + ($28)|0);
   HEAP8[$30>>0] = $26;
   $31 = $j;
   $32 = ($31*3)|0;
   $33 = (($32) + 1)|0;
   $34 = $2;
   $35 = (($34) + ($33)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $j;
   $38 = $37<<2;
   $39 = (($38) + 1)|0;
   $40 = $2;
   $41 = (($40) + ($39)|0);
   HEAP8[$41>>0] = $36;
   $42 = $t;
   $43 = $j;
   $44 = $43<<2;
   $45 = (($44) + 2)|0;
   $46 = $2;
   $47 = (($46) + ($45)|0);
   HEAP8[$47>>0] = $42;
   $48 = $j;
   $49 = (($48) + -1)|0;
   $j = $49;
  }
  $50 = $3;
  $51 = $2;
  $52 = (($51) + ($50)|0);
  $2 = $52;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 STACKTOP = sp;return 0;
}
function _RGB24_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $i = 0;
 $j = 0;
 $4 = $0;
 $0 = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) - 1)|0;
  $j = $13;
  while(1) {
   $14 = $j;
   $15 = ($14|0)>=(0);
   if (!($15)) {
    break;
   }
   $16 = $j;
   $17 = ($16*3)|0;
   $18 = $2;
   $19 = (($18) + ($17)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $j;
   $22 = $21<<2;
   $23 = $2;
   $24 = (($23) + ($22)|0);
   HEAP8[$24>>0] = $20;
   $25 = $j;
   $26 = ($25*3)|0;
   $27 = (($26) + 1)|0;
   $28 = $2;
   $29 = (($28) + ($27)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $j;
   $32 = $31<<2;
   $33 = (($32) + 1)|0;
   $34 = $2;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = $30;
   $36 = $j;
   $37 = ($36*3)|0;
   $38 = (($37) + 2)|0;
   $39 = $2;
   $40 = (($39) + ($38)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $j;
   $43 = $42<<2;
   $44 = (($43) + 2)|0;
   $45 = $2;
   $46 = (($45) + ($44)|0);
   HEAP8[$46>>0] = $41;
   $47 = $j;
   $48 = (($47) + -1)|0;
   $j = $48;
  }
  $49 = $3;
  $50 = $2;
  $51 = (($50) + ($49)|0);
  $2 = $51;
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 STACKTOP = sp;return 0;
}
function _BGR32_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $i = 0;
 $j = 0;
 $4 = $0;
 $0 = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $j = 0;
  while(1) {
   $10 = $j;
   $11 = $1;
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($10|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $j;
   $16 = $15<<2;
   $17 = $2;
   $18 = (($17) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $t = $19;
   $20 = $j;
   $21 = $20<<2;
   $22 = (($21) + 2)|0;
   $23 = $2;
   $24 = (($23) + ($22)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $j;
   $27 = ($26*3)|0;
   $28 = $2;
   $29 = (($28) + ($27)|0);
   HEAP8[$29>>0] = $25;
   $30 = $j;
   $31 = $30<<2;
   $32 = (($31) + 1)|0;
   $33 = $2;
   $34 = (($33) + ($32)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $j;
   $37 = ($36*3)|0;
   $38 = (($37) + 1)|0;
   $39 = $2;
   $40 = (($39) + ($38)|0);
   HEAP8[$40>>0] = $35;
   $41 = $t;
   $42 = $j;
   $43 = ($42*3)|0;
   $44 = (($43) + 2)|0;
   $45 = $2;
   $46 = (($45) + ($44)|0);
   HEAP8[$46>>0] = $41;
   $47 = $j;
   $48 = (($47) + 1)|0;
   $j = $48;
  }
  $49 = $3;
  $50 = $2;
  $51 = (($50) + ($49)|0);
  $2 = $51;
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 STACKTOP = sp;return 0;
}
function _RGB24_Gray8($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $i = 0, $j = 0, $k = 0;
 var $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $i = 0;
 $j = 0;
 $k = 0;
 $4 = $0;
 $0 = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $j = 0;
  $k = 0;
  while(1) {
   $10 = $j;
   $11 = $1;
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13*3)|0;
   $15 = ($10|0)<($14|0);
   if (!($15)) {
    break;
   }
   $16 = $j;
   $17 = $2;
   $18 = (($17) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $r = $19;
   $20 = $j;
   $21 = (($20) + 1)|0;
   $22 = $2;
   $23 = (($22) + ($21)|0);
   $24 = HEAP8[$23>>0]|0;
   $g = $24;
   $25 = $j;
   $26 = (($25) + 2)|0;
   $27 = $2;
   $28 = (($27) + ($26)|0);
   $29 = HEAP8[$28>>0]|0;
   $b = $29;
   $30 = $r;
   $31 = $30&255;
   $32 = (($31|0) / 4)&-1;
   $33 = $g;
   $34 = $33&255;
   $35 = (($34|0) / 2)&-1;
   $36 = (($32) + ($35))|0;
   $37 = $b;
   $38 = $37&255;
   $39 = (($38|0) / 8)&-1;
   $40 = (($36) + ($39))|0;
   $41 = (($40) + 16)|0;
   $42 = $41&255;
   $43 = $k;
   $44 = $2;
   $45 = (($44) + ($43)|0);
   HEAP8[$45>>0] = $42;
   $46 = $j;
   $47 = (($46) + 3)|0;
   $j = $47;
   $48 = $k;
   $49 = (($48) + 1)|0;
   $k = $49;
  }
  $50 = $3;
  $51 = $2;
  $52 = (($51) + ($50)|0);
  $2 = $52;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 STACKTOP = sp;return 0;
}
function _BGR24_Gray8($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_BGR24_RGB24($4,$5,$6,$7)|0);
 $err = $8;
 $9 = ($8|0)<(0);
 do {
  if ($9) {
   $10 = $err;
   $err = $10;
  } else {
   $11 = $err;
   $err = $11;
   $12 = $0;
   $13 = $1;
   $14 = $2;
   $15 = $3;
   $16 = (_RGB24_Gray8($12,$13,$14,$15)|0);
   $err = $16;
   $17 = ($16|0)<(0);
   if ($17) {
    $18 = $err;
    $err = $18;
    break;
   }
   $19 = $err;
   $err = $19;
  }
 } while(0);
 $20 = $err;
 STACKTOP = sp;return ($20|0);
}
function _Gray8_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $k = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $i = 0;
 $j = 0;
 $k = 0;
 $4 = $0;
 $0 = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) - 1)|0;
  $j = $13;
  $14 = $j;
  $15 = ($14*3)|0;
  $k = $15;
  while(1) {
   $16 = $j;
   $17 = (0)<=($16|0);
   if (!($17)) {
    break;
   }
   $18 = $j;
   $19 = $2;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20>>0]|0;
   $v = $21;
   $22 = $v;
   $23 = $k;
   $24 = $2;
   $25 = (($24) + ($23)|0);
   HEAP8[$25>>0] = $22;
   $26 = $v;
   $27 = $k;
   $28 = (($27) + 1)|0;
   $29 = $2;
   $30 = (($29) + ($28)|0);
   HEAP8[$30>>0] = $26;
   $31 = $v;
   $32 = $k;
   $33 = (($32) + 2)|0;
   $34 = $2;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = $31;
   $36 = $j;
   $37 = (($36) + -1)|0;
   $j = $37;
   $38 = $k;
   $39 = (($38) - 3)|0;
   $k = $39;
  }
  $40 = $3;
  $41 = $2;
  $42 = (($41) + ($40)|0);
  $2 = $42;
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 STACKTOP = sp;return 0;
}
function _Gray8_BGR24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_Gray8_RGB24($4,$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _RGBA128Fixed_RGBA128Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidthX4 = 0;
 var $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $iWidthX4 = $10;
 $fltCvtFactor = 5.9604644775390625E-8;
 $11 = $0;
 $0 = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $iHeight;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $pfltDstPixel = $19;
  $20 = $pfltDstPixel;
  $piSrcPixel = $20;
  $x = 0;
  while(1) {
   $21 = $x;
   $22 = $iWidthX4;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $x;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($27|0));
   $29 = $28 * 5.9604644775390625E-8;
   $30 = $x;
   $31 = $pfltDstPixel;
   $32 = (($31) + ($30<<2)|0);
   HEAPF32[$32>>2] = $29;
   $33 = $x;
   $34 = (($33) + 1)|0;
   $x = $34;
  }
  $35 = $y;
  $36 = (($35) + 1)|0;
  $y = $36;
 }
 STACKTOP = sp;return 0;
}
function _RGBA128Float_RGBA128Fixed($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0;
 var $iWidthX4 = 0, $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $iWidthX4 = $10;
 $fltCvtFactor = 16777216.0;
 $11 = $0;
 $0 = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $iHeight;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piDstPixel = $19;
  $20 = $piDstPixel;
  $pfltSrcPixel = $20;
  $x = 0;
  while(1) {
   $21 = $x;
   $22 = $iWidthX4;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $x;
   $25 = $pfltSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27 * 16777216.0;
   $29 = $28 + 0.5;
   $30 = (~~(($29)));
   $31 = $x;
   $32 = $piDstPixel;
   $33 = (($32) + ($31<<2)|0);
   HEAP32[$33>>2] = $30;
   $34 = $x;
   $35 = (($34) + 1)|0;
   $x = $35;
  }
  $36 = $y;
  $37 = (($36) + 1)|0;
  $y = $37;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Fixed_RGB96Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidthX3 = 0;
 var $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9*3)|0;
 $iWidthX3 = $10;
 $fltCvtFactor = 5.9604644775390625E-8;
 $11 = $0;
 $0 = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $iHeight;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $pfltDstPixel = $19;
  $20 = $pfltDstPixel;
  $piSrcPixel = $20;
  $x = 0;
  while(1) {
   $21 = $x;
   $22 = $iWidthX3;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $x;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($27|0));
   $29 = $28 * 5.9604644775390625E-8;
   $30 = $x;
   $31 = $pfltDstPixel;
   $32 = (($31) + ($30<<2)|0);
   HEAPF32[$32>>2] = $29;
   $33 = $x;
   $34 = (($33) + 1)|0;
   $x = $34;
  }
  $35 = $y;
  $36 = (($35) + 1)|0;
  $y = $36;
 }
 STACKTOP = sp;return 0;
}
function _RGB128Fixed_RGB96Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 5.9604644775390625E-8;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($27|0));
   $29 = $28 * 5.9604644775390625E-8;
   $30 = $x;
   $31 = ($30*3)|0;
   $32 = $pfltDstPixel;
   $33 = (($32) + ($31<<2)|0);
   HEAPF32[$33>>2] = $29;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 1)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (+($39|0));
   $41 = $40 * 5.9604644775390625E-8;
   $42 = $x;
   $43 = ($42*3)|0;
   $44 = (($43) + 1)|0;
   $45 = $pfltDstPixel;
   $46 = (($45) + ($44<<2)|0);
   HEAPF32[$46>>2] = $41;
   $47 = $x;
   $48 = $47<<2;
   $49 = (($48) + 2)|0;
   $50 = $piSrcPixel;
   $51 = (($50) + ($49<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (+($52|0));
   $54 = $53 * 5.9604644775390625E-8;
   $55 = $x;
   $56 = ($55*3)|0;
   $57 = (($56) + 2)|0;
   $58 = $pfltDstPixel;
   $59 = (($58) + ($57<<2)|0);
   HEAPF32[$59>>2] = $54;
   $60 = $x;
   $61 = (($60) + 1)|0;
   $x = $61;
  }
  $62 = $y;
  $63 = (($62) + 1)|0;
  $y = $63;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Float_RGB96Fixed($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0;
 var $iWidthX3 = 0, $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9*3)|0;
 $iWidthX3 = $10;
 $fltCvtFactor = 16777216.0;
 $11 = $0;
 $0 = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $iHeight;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piDstPixel = $19;
  $20 = $piDstPixel;
  $pfltSrcPixel = $20;
  $x = 0;
  while(1) {
   $21 = $x;
   $22 = $iWidthX3;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $x;
   $25 = $pfltSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27 * 16777216.0;
   $29 = $28 + 0.5;
   $30 = (~~(($29)));
   $31 = $x;
   $32 = $piDstPixel;
   $33 = (($32) + ($31<<2)|0);
   HEAP32[$33>>2] = $30;
   $34 = $x;
   $35 = (($34) + 1)|0;
   $x = $35;
  }
  $36 = $y;
  $37 = (($36) + 1)|0;
  $y = $37;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Float_RGB128Fixed($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltSrcPixel = 0;
 var $piDstPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 16777216.0;
 $10 = $0;
 $0 = $10;
 $11 = $iWidth;
 $12 = ($11|0)>(2);
 if (!($12)) {
  ___assert_fail((19776|0),(19792|0),529,(19816|0));
  // unreachable;
 }
 $13 = $iHeight;
 $14 = (($13) - 1)|0;
 $y = $14;
 while(1) {
  $15 = $y;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $2;
  $18 = $3;
  $19 = $y;
  $20 = Math_imul($18, $19)|0;
  $21 = (($17) + ($20)|0);
  $piDstPixel = $21;
  $22 = $piDstPixel;
  $pfltSrcPixel = $22;
  $23 = $iWidth;
  $24 = (($23) - 1)|0;
  $x = $24;
  while(1) {
   $25 = $x;
   $26 = ($25|0)>=(0);
   if (!($26)) {
    break;
   }
   $27 = $x;
   $28 = ($27*3)|0;
   $29 = $pfltSrcPixel;
   $30 = (($29) + ($28<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $31 * 16777216.0;
   $33 = $32 + 0.5;
   $34 = (~~(($33)));
   $35 = $x;
   $36 = $35<<2;
   $37 = $piDstPixel;
   $38 = (($37) + ($36<<2)|0);
   HEAP32[$38>>2] = $34;
   $39 = $x;
   $40 = ($39*3)|0;
   $41 = (($40) + 1)|0;
   $42 = $pfltSrcPixel;
   $43 = (($42) + ($41<<2)|0);
   $44 = +HEAPF32[$43>>2];
   $45 = $44 * 16777216.0;
   $46 = $45 + 0.5;
   $47 = (~~(($46)));
   $48 = $x;
   $49 = $48<<2;
   $50 = (($49) + 1)|0;
   $51 = $piDstPixel;
   $52 = (($51) + ($50<<2)|0);
   HEAP32[$52>>2] = $47;
   $53 = $x;
   $54 = ($53*3)|0;
   $55 = (($54) + 2)|0;
   $56 = $pfltSrcPixel;
   $57 = (($56) + ($55<<2)|0);
   $58 = +HEAPF32[$57>>2];
   $59 = $58 * 16777216.0;
   $60 = $59 + 0.5;
   $61 = (~~(($60)));
   $62 = $x;
   $63 = $62<<2;
   $64 = (($63) + 2)|0;
   $65 = $piDstPixel;
   $66 = (($65) + ($64<<2)|0);
   HEAP32[$66>>2] = $61;
   $67 = $x;
   $68 = $67<<2;
   $69 = (($68) + 3)|0;
   $70 = $piDstPixel;
   $71 = (($70) + ($69<<2)|0);
   HEAP32[$71>>2] = 0;
   $72 = $x;
   $73 = (($72) + -1)|0;
   $x = $73;
  }
  $74 = $y;
  $75 = (($74) + -1)|0;
  $y = $75;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Float_RGB128Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $pfltSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iWidth;
 $12 = ($11|0)>(2);
 if (!($12)) {
  ___assert_fail((19776|0),(19792|0),557,(19840|0));
  // unreachable;
 }
 $13 = $iHeight;
 $14 = (($13) - 1)|0;
 $y = $14;
 while(1) {
  $15 = $y;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $2;
  $18 = $3;
  $19 = $y;
  $20 = Math_imul($18, $19)|0;
  $21 = (($17) + ($20)|0);
  $pfltDstPixel = $21;
  $22 = $pfltDstPixel;
  $pfltSrcPixel = $22;
  $23 = $iWidth;
  $24 = (($23) - 1)|0;
  $x = $24;
  while(1) {
   $25 = $x;
   $26 = ($25|0)>=(0);
   if (!($26)) {
    break;
   }
   $27 = $x;
   $28 = ($27*3)|0;
   $29 = $pfltSrcPixel;
   $30 = (($29) + ($28<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $x;
   $33 = $32<<2;
   $34 = $pfltDstPixel;
   $35 = (($34) + ($33<<2)|0);
   HEAPF32[$35>>2] = $31;
   $36 = $x;
   $37 = ($36*3)|0;
   $38 = (($37) + 1)|0;
   $39 = $pfltSrcPixel;
   $40 = (($39) + ($38<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $x;
   $43 = $42<<2;
   $44 = (($43) + 1)|0;
   $45 = $pfltDstPixel;
   $46 = (($45) + ($44<<2)|0);
   HEAPF32[$46>>2] = $41;
   $47 = $x;
   $48 = ($47*3)|0;
   $49 = (($48) + 2)|0;
   $50 = $pfltSrcPixel;
   $51 = (($50) + ($49<<2)|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $x;
   $54 = $53<<2;
   $55 = (($54) + 2)|0;
   $56 = $pfltDstPixel;
   $57 = (($56) + ($55<<2)|0);
   HEAPF32[$57>>2] = $52;
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 3)|0;
   $61 = $pfltDstPixel;
   $62 = (($61) + ($60<<2)|0);
   HEAPF32[$62>>2] = 0.0;
   $63 = $x;
   $64 = (($63) + -1)|0;
   $x = $64;
  }
  $65 = $y;
  $66 = (($65) + -1)|0;
  $y = $66;
 }
 STACKTOP = sp;return 0;
}
function _RGB128Float_RGB96Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0;
 var $pfltDstPixel = 0, $pfltSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $pfltSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $pfltSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $x;
   $29 = ($28*3)|0;
   $30 = $pfltDstPixel;
   $31 = (($30) + ($29<<2)|0);
   HEAPF32[$31>>2] = $27;
   $32 = $x;
   $33 = $32<<2;
   $34 = (($33) + 1)|0;
   $35 = $pfltSrcPixel;
   $36 = (($35) + ($34<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = $x;
   $39 = ($38*3)|0;
   $40 = (($39) + 1)|0;
   $41 = $pfltDstPixel;
   $42 = (($41) + ($40<<2)|0);
   HEAPF32[$42>>2] = $37;
   $43 = $x;
   $44 = $43<<2;
   $45 = (($44) + 2)|0;
   $46 = $pfltSrcPixel;
   $47 = (($46) + ($45<<2)|0);
   $48 = +HEAPF32[$47>>2];
   $49 = $x;
   $50 = ($49*3)|0;
   $51 = (($50) + 2)|0;
   $52 = $pfltDstPixel;
   $53 = (($52) + ($51<<2)|0);
   HEAPF32[$53>>2] = $48;
   $54 = $x;
   $55 = (($54) + 1)|0;
   $x = $55;
  }
  $56 = $y;
  $57 = (($56) + 1)|0;
  $y = $57;
 }
 STACKTOP = sp;return 0;
}
function _RGB48Half_RGB64Half($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iWidth;
 $12 = ($11|0)>(2);
 if (!($12)) {
  ___assert_fail((19776|0),(19792|0),611,(19864|0));
  // unreachable;
 }
 $13 = $iHeight;
 $14 = (($13) - 1)|0;
 $y = $14;
 while(1) {
  $15 = $y;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $2;
  $18 = $3;
  $19 = $y;
  $20 = Math_imul($18, $19)|0;
  $21 = (($17) + ($20)|0);
  $piDstPixel = $21;
  $22 = $piDstPixel;
  $piSrcPixel = $22;
  $23 = $iWidth;
  $24 = (($23) - 1)|0;
  $x = $24;
  while(1) {
   $25 = $x;
   $26 = ($25|0)>=(0);
   if (!($26)) {
    break;
   }
   $27 = $x;
   $28 = ($27*3)|0;
   $29 = $piSrcPixel;
   $30 = (($29) + ($28<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $x;
   $33 = $32<<2;
   $34 = $piDstPixel;
   $35 = (($34) + ($33<<1)|0);
   HEAP16[$35>>1] = $31;
   $36 = $x;
   $37 = ($36*3)|0;
   $38 = (($37) + 1)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $x;
   $43 = $42<<2;
   $44 = (($43) + 1)|0;
   $45 = $piDstPixel;
   $46 = (($45) + ($44<<1)|0);
   HEAP16[$46>>1] = $41;
   $47 = $x;
   $48 = ($47*3)|0;
   $49 = (($48) + 2)|0;
   $50 = $piSrcPixel;
   $51 = (($50) + ($49<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $x;
   $54 = $53<<2;
   $55 = (($54) + 2)|0;
   $56 = $piDstPixel;
   $57 = (($56) + ($55<<1)|0);
   HEAP16[$57>>1] = $52;
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 3)|0;
   $61 = $piDstPixel;
   $62 = (($61) + ($60<<1)|0);
   HEAP16[$62>>1] = 0;
   $63 = $x;
   $64 = (($63) + -1)|0;
   $x = $64;
  }
  $65 = $y;
  $66 = (($65) + -1)|0;
  $y = $66;
 }
 STACKTOP = sp;return 0;
}
function _RGB64Half_RGB48Half($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0;
 var $piDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $x;
   $29 = ($28*3)|0;
   $30 = $piDstPixel;
   $31 = (($30) + ($29<<1)|0);
   HEAP16[$31>>1] = $27;
   $32 = $x;
   $33 = $32<<2;
   $34 = (($33) + 1)|0;
   $35 = $piSrcPixel;
   $36 = (($35) + ($34<<1)|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $x;
   $39 = ($38*3)|0;
   $40 = (($39) + 1)|0;
   $41 = $piDstPixel;
   $42 = (($41) + ($40<<1)|0);
   HEAP16[$42>>1] = $37;
   $43 = $x;
   $44 = $43<<2;
   $45 = (($44) + 2)|0;
   $46 = $piSrcPixel;
   $47 = (($46) + ($45<<1)|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $x;
   $50 = ($49*3)|0;
   $51 = (($50) + 2)|0;
   $52 = $piDstPixel;
   $53 = (($52) + ($51<<1)|0);
   HEAP16[$53>>1] = $48;
   $54 = $x;
   $55 = (($54) + 1)|0;
   $x = $55;
  }
  $56 = $y;
  $57 = (($56) + 1)|0;
  $y = $57;
 }
 STACKTOP = sp;return 0;
}
function _BGR24_BGR32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iWidth;
 $12 = ($11|0)>(2);
 if (!($12)) {
  ___assert_fail((19776|0),(19792|0),665,(19888|0));
  // unreachable;
 }
 $13 = $iHeight;
 $14 = (($13) - 1)|0;
 $y = $14;
 while(1) {
  $15 = $y;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $2;
  $18 = $3;
  $19 = $y;
  $20 = Math_imul($18, $19)|0;
  $21 = (($17) + ($20)|0);
  $piDstPixel = $21;
  $22 = $piDstPixel;
  $piSrcPixel = $22;
  $23 = $iWidth;
  $24 = (($23) - 1)|0;
  $x = $24;
  while(1) {
   $25 = $x;
   $26 = ($25|0)>=(0);
   if (!($26)) {
    break;
   }
   $27 = $x;
   $28 = ($27*3)|0;
   $29 = $piSrcPixel;
   $30 = (($29) + ($28)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $x;
   $33 = $32<<2;
   $34 = $piDstPixel;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = $31;
   $36 = $x;
   $37 = ($36*3)|0;
   $38 = (($37) + 1)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $x;
   $43 = $42<<2;
   $44 = (($43) + 1)|0;
   $45 = $piDstPixel;
   $46 = (($45) + ($44)|0);
   HEAP8[$46>>0] = $41;
   $47 = $x;
   $48 = ($47*3)|0;
   $49 = (($48) + 2)|0;
   $50 = $piSrcPixel;
   $51 = (($50) + ($49)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $x;
   $54 = $53<<2;
   $55 = (($54) + 2)|0;
   $56 = $piDstPixel;
   $57 = (($56) + ($55)|0);
   HEAP8[$57>>0] = $52;
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 3)|0;
   $61 = $piDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = 0;
   $63 = $x;
   $64 = (($63) + -1)|0;
   $x = $64;
  }
  $65 = $y;
  $66 = (($65) + -1)|0;
  $y = $66;
 }
 STACKTOP = sp;return 0;
}
function _BGR32_BGR24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0;
 var $piDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $x;
   $29 = ($28*3)|0;
   $30 = $piDstPixel;
   $31 = (($30) + ($29)|0);
   HEAP8[$31>>0] = $27;
   $32 = $x;
   $33 = $32<<2;
   $34 = (($33) + 1)|0;
   $35 = $piSrcPixel;
   $36 = (($35) + ($34)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $x;
   $39 = ($38*3)|0;
   $40 = (($39) + 1)|0;
   $41 = $piDstPixel;
   $42 = (($41) + ($40)|0);
   HEAP8[$42>>0] = $37;
   $43 = $x;
   $44 = $43<<2;
   $45 = (($44) + 2)|0;
   $46 = $piSrcPixel;
   $47 = (($46) + ($45)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $x;
   $50 = ($49*3)|0;
   $51 = (($50) + 2)|0;
   $52 = $piDstPixel;
   $53 = (($52) + ($51)|0);
   HEAP8[$53>>0] = $48;
   $54 = $x;
   $55 = (($54) + 1)|0;
   $x = $55;
  }
  $56 = $y;
  $57 = (($56) + 1)|0;
  $y = $57;
 }
 STACKTOP = sp;return 0;
}
function _Gray32Fixed_Gray32Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0;
 var $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 5.9604644775390625E-8;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $piSrcPixel;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (+($26|0));
   $28 = $27 * 5.9604644775390625E-8;
   $29 = $x;
   $30 = $pfltDstPixel;
   $31 = (($30) + ($29<<2)|0);
   HEAPF32[$31>>2] = $28;
   $32 = $x;
   $33 = (($32) + 1)|0;
   $x = $33;
  }
  $34 = $y;
  $35 = (($34) + 1)|0;
  $y = $35;
 }
 STACKTOP = sp;return 0;
}
function _Gray32Float_Gray32Fixed($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0;
 var $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 16777216.0;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $pfltSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $pfltSrcPixel;
   $25 = (($24) + ($23<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = $26 * 16777216.0;
   $28 = $27 + 0.5;
   $29 = (~~(($28)));
   $30 = $x;
   $31 = $piDstPixel;
   $32 = (($31) + ($30<<2)|0);
   HEAP32[$32>>2] = $29;
   $33 = $x;
   $34 = (($33) + 1)|0;
   $x = $34;
  }
  $35 = $y;
  $36 = (($35) + 1)|0;
  $y = $36;
 }
 STACKTOP = sp;return 0;
}
function _Gray16Fixed_Gray32Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0;
 var $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 1.220703125E-4;
 $10 = $0;
 $0 = $10;
 $11 = $iHeight;
 $12 = (($11) - 1)|0;
 $y = $12;
 while(1) {
  $13 = $y;
  $14 = ($13|0)>=(0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $pfltDstPixel = $19;
  $20 = $pfltDstPixel;
  $piSrcPixel = $20;
  $21 = $iWidth;
  $22 = (($21) - 1)|0;
  $x = $22;
  while(1) {
   $23 = $x;
   $24 = ($23|0)>=(0);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = $piSrcPixel;
   $27 = (($26) + ($25<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28 << 16 >> 16;
   $30 = (+($29|0));
   $31 = $30 * 1.220703125E-4;
   $32 = $x;
   $33 = $pfltDstPixel;
   $34 = (($33) + ($32<<2)|0);
   HEAPF32[$34>>2] = $31;
   $35 = $x;
   $36 = (($35) + -1)|0;
   $x = $36;
  }
  $37 = $y;
  $38 = (($37) + -1)|0;
  $y = $38;
 }
 STACKTOP = sp;return 0;
}
function _Gray32Float_Gray16Fixed($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0;
 var $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 8192.0;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $pfltSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $pfltSrcPixel;
   $25 = (($24) + ($23<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = $26 * 8192.0;
   $28 = $27 + 0.5;
   $29 = (~~(($28)));
   $30 = $x;
   $31 = $piDstPixel;
   $32 = (($31) + ($30<<1)|0);
   HEAP16[$32>>1] = $29;
   $33 = $x;
   $34 = (($33) + 1)|0;
   $x = $34;
  }
  $35 = $y;
  $36 = (($35) + 1)|0;
  $y = $36;
 }
 STACKTOP = sp;return 0;
}
function _RGB48Fixed_RGB96Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fltCvtFactor = 0.0, $iHeight = 0, $iWidthX3 = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9*3)|0;
 $iWidthX3 = $10;
 $fltCvtFactor = 1.220703125E-4;
 $11 = $0;
 $0 = $11;
 $12 = $iHeight;
 $13 = (($12) - 1)|0;
 $y = $13;
 while(1) {
  $14 = $y;
  $15 = ($14|0)>=(0);
  if (!($15)) {
   break;
  }
  $16 = $2;
  $17 = $3;
  $18 = $y;
  $19 = Math_imul($17, $18)|0;
  $20 = (($16) + ($19)|0);
  $pfltDstPixel = $20;
  $21 = $pfltDstPixel;
  $piSrcPixel = $21;
  $22 = $iWidthX3;
  $23 = (($22) - 1)|0;
  $x = $23;
  while(1) {
   $24 = $x;
   $25 = ($24|0)>=(0);
   if (!($25)) {
    break;
   }
   $26 = $x;
   $27 = $piSrcPixel;
   $28 = (($27) + ($26<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = (+($30|0));
   $32 = $31 * 1.220703125E-4;
   $33 = $x;
   $34 = $pfltDstPixel;
   $35 = (($34) + ($33<<2)|0);
   HEAPF32[$35>>2] = $32;
   $36 = $x;
   $37 = (($36) + -1)|0;
   $x = $37;
  }
  $38 = $y;
  $39 = (($38) + -1)|0;
  $y = $39;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Float_RGB48Fixed($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0;
 var $iWidthX3 = 0, $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9*3)|0;
 $iWidthX3 = $10;
 $fltCvtFactor = 8192.0;
 $11 = $0;
 $0 = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $iHeight;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piDstPixel = $19;
  $20 = $piDstPixel;
  $pfltSrcPixel = $20;
  $x = 0;
  while(1) {
   $21 = $x;
   $22 = $iWidthX3;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $x;
   $25 = $pfltSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27 * 8192.0;
   $29 = $28 + 0.5;
   $30 = (~~(($29)));
   $31 = $x;
   $32 = $piDstPixel;
   $33 = (($32) + ($31<<1)|0);
   HEAP16[$33>>1] = $30;
   $34 = $x;
   $35 = (($34) + 1)|0;
   $x = $35;
  }
  $36 = $y;
  $37 = (($36) + 1)|0;
  $y = $37;
 }
 STACKTOP = sp;return 0;
}
function _RGB64Fixed_RGB96Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 1.220703125E-4;
 $10 = $0;
 $0 = $10;
 $11 = $iHeight;
 $12 = (($11) - 1)|0;
 $y = $12;
 while(1) {
  $13 = $y;
  $14 = ($13|0)>=(0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $pfltDstPixel = $19;
  $20 = $pfltDstPixel;
  $piSrcPixel = $20;
  $21 = $iWidth;
  $22 = (($21) - 1)|0;
  $x = $22;
  while(1) {
   $23 = $x;
   $24 = ($23|0)>=(0);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = $25<<2;
   $27 = $piSrcPixel;
   $28 = (($27) + ($26<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = (+($30|0));
   $32 = $31 * 1.220703125E-4;
   $33 = $x;
   $34 = ($33*3)|0;
   $35 = $pfltDstPixel;
   $36 = (($35) + ($34<<2)|0);
   HEAPF32[$36>>2] = $32;
   $37 = $x;
   $38 = $37<<2;
   $39 = (($38) + 1)|0;
   $40 = $piSrcPixel;
   $41 = (($40) + ($39<<1)|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42 << 16 >> 16;
   $44 = (+($43|0));
   $45 = $44 * 1.220703125E-4;
   $46 = $x;
   $47 = ($46*3)|0;
   $48 = (($47) + 1)|0;
   $49 = $pfltDstPixel;
   $50 = (($49) + ($48<<2)|0);
   HEAPF32[$50>>2] = $45;
   $51 = $x;
   $52 = $51<<2;
   $53 = (($52) + 2)|0;
   $54 = $piSrcPixel;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56 << 16 >> 16;
   $58 = (+($57|0));
   $59 = $58 * 1.220703125E-4;
   $60 = $x;
   $61 = ($60*3)|0;
   $62 = (($61) + 2)|0;
   $63 = $pfltDstPixel;
   $64 = (($63) + ($62<<2)|0);
   HEAPF32[$64>>2] = $59;
   $65 = $x;
   $66 = (($65) + -1)|0;
   $x = $66;
  }
  $67 = $y;
  $68 = (($67) + -1)|0;
  $y = $68;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Float_RGB64Fixed($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0, $y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 8192.0;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $pfltSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $pfltSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27 * 8192.0;
   $29 = $28 + 0.5;
   $30 = (~~(($29)));
   $31 = $x;
   $32 = $31<<2;
   $33 = $piDstPixel;
   $34 = (($33) + ($32<<1)|0);
   HEAP16[$34>>1] = $30;
   $35 = $x;
   $36 = ($35*3)|0;
   $37 = (($36) + 1)|0;
   $38 = $pfltSrcPixel;
   $39 = (($38) + ($37<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $40 * 8192.0;
   $42 = $41 + 0.5;
   $43 = (~~(($42)));
   $44 = $x;
   $45 = $44<<2;
   $46 = (($45) + 1)|0;
   $47 = $piDstPixel;
   $48 = (($47) + ($46<<1)|0);
   HEAP16[$48>>1] = $43;
   $49 = $x;
   $50 = ($49*3)|0;
   $51 = (($50) + 2)|0;
   $52 = $pfltSrcPixel;
   $53 = (($52) + ($51<<2)|0);
   $54 = +HEAPF32[$53>>2];
   $55 = $54 * 8192.0;
   $56 = $55 + 0.5;
   $57 = (~~(($56)));
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 2)|0;
   $61 = $piDstPixel;
   $62 = (($61) + ($60<<1)|0);
   HEAP16[$62>>1] = $57;
   $63 = $x;
   $64 = $63<<2;
   $65 = (($64) + 3)|0;
   $66 = $piDstPixel;
   $67 = (($66) + ($65<<1)|0);
   HEAP16[$67>>1] = 0;
   $68 = $x;
   $69 = (($68) + 1)|0;
   $x = $69;
  }
  $70 = $y;
  $71 = (($70) + 1)|0;
  $y = $71;
 }
 STACKTOP = sp;return 0;
}
function _RGBA64Fixed_RGBA128Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fltCvtFactor = 0.0, $iHeight = 0, $iWidthX4 = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $iWidthX4 = $10;
 $fltCvtFactor = 1.220703125E-4;
 $11 = $0;
 $0 = $11;
 $12 = $iHeight;
 $13 = (($12) - 1)|0;
 $y = $13;
 while(1) {
  $14 = $y;
  $15 = ($14|0)>=(0);
  if (!($15)) {
   break;
  }
  $16 = $2;
  $17 = $3;
  $18 = $y;
  $19 = Math_imul($17, $18)|0;
  $20 = (($16) + ($19)|0);
  $pfltDstPixel = $20;
  $21 = $pfltDstPixel;
  $piSrcPixel = $21;
  $22 = $iWidthX4;
  $23 = (($22) - 1)|0;
  $x = $23;
  while(1) {
   $24 = $x;
   $25 = ($24|0)>=(0);
   if (!($25)) {
    break;
   }
   $26 = $x;
   $27 = $piSrcPixel;
   $28 = (($27) + ($26<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = (+($30|0));
   $32 = $31 * 1.220703125E-4;
   $33 = $x;
   $34 = $pfltDstPixel;
   $35 = (($34) + ($33<<2)|0);
   HEAPF32[$35>>2] = $32;
   $36 = $x;
   $37 = (($36) + -1)|0;
   $x = $37;
  }
  $38 = $y;
  $39 = (($38) + -1)|0;
  $y = $39;
 }
 STACKTOP = sp;return 0;
}
function _RGBA128Float_RGBA64Fixed($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0;
 var $iWidthX4 = 0, $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $iWidthX4 = $10;
 $fltCvtFactor = 8192.0;
 $11 = $0;
 $0 = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $iHeight;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piDstPixel = $19;
  $20 = $piDstPixel;
  $pfltSrcPixel = $20;
  $x = 0;
  while(1) {
   $21 = $x;
   $22 = $iWidthX4;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $x;
   $25 = $pfltSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27 * 8192.0;
   $29 = $28 + 0.5;
   $30 = (~~(($29)));
   $31 = $x;
   $32 = $piDstPixel;
   $33 = (($32) + ($31<<1)|0);
   HEAP16[$33>>1] = $30;
   $34 = $x;
   $35 = (($34) + 1)|0;
   $x = $35;
  }
  $36 = $y;
  $37 = (($36) + 1)|0;
  $y = $37;
 }
 STACKTOP = sp;return 0;
}
function _RGBE_RGB96Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $adjExp = 0, $fltExp = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0;
 var $rawExp = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iHeight;
 $12 = (($11) - 1)|0;
 $y = $12;
 while(1) {
  $13 = $y;
  $14 = ($13|0)>=(0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $pfltDstPixel = $19;
  $20 = $pfltDstPixel;
  $piSrcPixel = $20;
  $21 = $iWidth;
  $22 = (($21) - 1)|0;
  $x = $22;
  while(1) {
   $23 = $x;
   $24 = ($23|0)>=(0);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = $25<<2;
   $27 = (($26) + 3)|0;
   $28 = $piSrcPixel;
   $29 = (($28) + ($27)|0);
   $30 = HEAP8[$29>>0]|0;
   $rawExp = $30;
   $31 = $rawExp;
   $32 = $31&255;
   $33 = (0)==($32|0);
   if ($33) {
    $34 = $x;
    $35 = ($34*3)|0;
    $36 = $pfltDstPixel;
    $37 = (($36) + ($35<<2)|0);
    HEAPF32[$37>>2] = 0.0;
    $38 = $x;
    $39 = ($38*3)|0;
    $40 = (($39) + 1)|0;
    $41 = $pfltDstPixel;
    $42 = (($41) + ($40<<2)|0);
    HEAPF32[$42>>2] = 0.0;
    $43 = $x;
    $44 = ($43*3)|0;
    $45 = (($44) + 2)|0;
    $46 = $pfltDstPixel;
    $47 = (($46) + ($45<<2)|0);
    HEAPF32[$47>>2] = 0.0;
   } else {
    $48 = $rawExp;
    $49 = $48&255;
    $50 = (($49) - 128)|0;
    $51 = (($50) - 8)|0;
    $adjExp = $51;
    $52 = $adjExp;
    $53 = ($52|0)>(-32);
    if ($53) {
     $54 = $adjExp;
     $55 = ($54|0)<(32);
     if ($55) {
      $56 = $adjExp;
      $57 = (Math_abs(($56|0))|0);
      $58 = 1 << $57;
      $59 = (+($58>>>0));
      $fltExp = $59;
      $60 = $adjExp;
      $61 = ($60|0)<(0);
      if ($61) {
       $62 = $fltExp;
       $63 = 1.0 / $62;
       $fltExp = $63;
      }
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
    if ((label|0) == 12) {
     label = 0;
     $64 = $adjExp;
     $65 = (+_ldexp(1.0,$64));
     $66 = $65;
     $fltExp = $66;
    }
    $67 = $x;
    $68 = $67<<2;
    $69 = $piSrcPixel;
    $70 = (($69) + ($68)|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = (+($72|0));
    $74 = $fltExp;
    $75 = $73 * $74;
    $76 = $x;
    $77 = ($76*3)|0;
    $78 = $pfltDstPixel;
    $79 = (($78) + ($77<<2)|0);
    HEAPF32[$79>>2] = $75;
    $80 = $x;
    $81 = $80<<2;
    $82 = (($81) + 1)|0;
    $83 = $piSrcPixel;
    $84 = (($83) + ($82)|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = (+($86|0));
    $88 = $fltExp;
    $89 = $87 * $88;
    $90 = $x;
    $91 = ($90*3)|0;
    $92 = (($91) + 1)|0;
    $93 = $pfltDstPixel;
    $94 = (($93) + ($92<<2)|0);
    HEAPF32[$94>>2] = $89;
    $95 = $x;
    $96 = $95<<2;
    $97 = (($96) + 2)|0;
    $98 = $piSrcPixel;
    $99 = (($98) + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = (+($101|0));
    $103 = $fltExp;
    $104 = $102 * $103;
    $105 = $x;
    $106 = ($105*3)|0;
    $107 = (($106) + 2)|0;
    $108 = $pfltDstPixel;
    $109 = (($108) + ($107<<2)|0);
    HEAPF32[$109>>2] = $104;
   }
   $110 = $x;
   $111 = (($110) + -1)|0;
   $x = $111;
  }
  $112 = $y;
  $113 = (($112) + -1)|0;
  $y = $113;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Float_RGBE($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, $e = 0, $fltBlue = 0.0, $fltGreen = 0.0, $fltMaxPos = 0.0, $fltRed = 0.0, $fltScale = 0.0, $iHeight = 0, $iWidth = 0, $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $e = sp;
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iWidth;
 $12 = ($11|0)>(2);
 if (!($12)) {
  ___assert_fail((19776|0),(19792|0),1022,(19904|0));
  // unreachable;
 }
 $y = 0;
 while(1) {
  $13 = $y;
  $14 = $iHeight;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $2;
  $17 = $3;
  $18 = $y;
  $19 = Math_imul($17, $18)|0;
  $20 = (($16) + ($19)|0);
  $piDstPixel = $20;
  $21 = $piDstPixel;
  $pfltSrcPixel = $21;
  $x = 0;
  while(1) {
   $22 = $x;
   $23 = $iWidth;
   $24 = ($22|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = ($25*3)|0;
   $27 = $pfltSrcPixel;
   $28 = (($27) + ($26<<2)|0);
   $29 = +HEAPF32[$28>>2];
   $30 = $29 > 0.0;
   if ($30) {
    $31 = $x;
    $32 = ($31*3)|0;
    $33 = $pfltSrcPixel;
    $34 = (($33) + ($32<<2)|0);
    $35 = +HEAPF32[$34>>2];
    $36 = $35;
   } else {
    $36 = 0.0;
   }
   $fltRed = $36;
   $37 = $x;
   $38 = ($37*3)|0;
   $39 = (($38) + 1)|0;
   $40 = $pfltSrcPixel;
   $41 = (($40) + ($39<<2)|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $42 > 0.0;
   if ($43) {
    $44 = $x;
    $45 = ($44*3)|0;
    $46 = (($45) + 1)|0;
    $47 = $pfltSrcPixel;
    $48 = (($47) + ($46<<2)|0);
    $49 = +HEAPF32[$48>>2];
    $50 = $49;
   } else {
    $50 = 0.0;
   }
   $fltGreen = $50;
   $51 = $x;
   $52 = ($51*3)|0;
   $53 = (($52) + 2)|0;
   $54 = $pfltSrcPixel;
   $55 = (($54) + ($53<<2)|0);
   $56 = +HEAPF32[$55>>2];
   $57 = $56 > 0.0;
   if ($57) {
    $58 = $x;
    $59 = ($58*3)|0;
    $60 = (($59) + 2)|0;
    $61 = $pfltSrcPixel;
    $62 = (($61) + ($60<<2)|0);
    $63 = +HEAPF32[$62>>2];
    $64 = $63;
   } else {
    $64 = 0.0;
   }
   $fltBlue = $64;
   $65 = $fltRed;
   $fltMaxPos = $65;
   $66 = $fltGreen;
   $67 = $fltMaxPos;
   $68 = $66 > $67;
   if ($68) {
    $69 = $fltGreen;
    $fltMaxPos = $69;
   }
   $70 = $fltBlue;
   $71 = $fltMaxPos;
   $72 = $70 > $71;
   if ($72) {
    $73 = $fltBlue;
    $fltMaxPos = $73;
   }
   $74 = $fltMaxPos;
   $75 = $74;
   $76 = $75 < 1.0000000000000001E-32;
   if ($76) {
    $77 = $x;
    $78 = $77<<2;
    $79 = $piDstPixel;
    $80 = (($79) + ($78)|0);
    HEAP8[$80>>0] = 0;
    $81 = $x;
    $82 = $81<<2;
    $83 = (($82) + 1)|0;
    $84 = $piDstPixel;
    $85 = (($84) + ($83)|0);
    HEAP8[$85>>0] = 0;
    $86 = $x;
    $87 = $86<<2;
    $88 = (($87) + 2)|0;
    $89 = $piDstPixel;
    $90 = (($89) + ($88)|0);
    HEAP8[$90>>0] = 0;
    $91 = $x;
    $92 = $91<<2;
    $93 = (($92) + 3)|0;
    $94 = $piDstPixel;
    $95 = (($94) + ($93)|0);
    HEAP8[$95>>0] = 0;
   } else {
    $96 = $fltMaxPos;
    $97 = $96;
    $98 = (+_frexp($97,$e));
    $99 = $98;
    $100 = $99 * 256.0;
    $101 = $fltMaxPos;
    $102 = $100 / $101;
    $fltScale = $102;
    $103 = $fltRed;
    $104 = $fltScale;
    $105 = $103 * $104;
    $106 = (~~(($105))&255);
    $107 = $x;
    $108 = $107<<2;
    $109 = $piDstPixel;
    $110 = (($109) + ($108)|0);
    HEAP8[$110>>0] = $106;
    $111 = $fltGreen;
    $112 = $fltScale;
    $113 = $111 * $112;
    $114 = (~~(($113))&255);
    $115 = $x;
    $116 = $115<<2;
    $117 = (($116) + 1)|0;
    $118 = $piDstPixel;
    $119 = (($118) + ($117)|0);
    HEAP8[$119>>0] = $114;
    $120 = $fltBlue;
    $121 = $fltScale;
    $122 = $120 * $121;
    $123 = (~~(($122))&255);
    $124 = $x;
    $125 = $124<<2;
    $126 = (($125) + 2)|0;
    $127 = $piDstPixel;
    $128 = (($127) + ($126)|0);
    HEAP8[$128>>0] = $123;
    $129 = HEAP32[$e>>2]|0;
    $130 = (($129) + 128)|0;
    $131 = $130&255;
    $132 = $x;
    $133 = $132<<2;
    $134 = (($133) + 3)|0;
    $135 = $piDstPixel;
    $136 = (($135) + ($134)|0);
    HEAP8[$136>>0] = $131;
   }
   $137 = $x;
   $138 = (($137) + 1)|0;
   $x = $138;
  }
  $139 = $y;
  $140 = (($139) + 1)|0;
  $y = $140;
 }
 STACKTOP = sp;return 0;
}
function _RGBA64Half_RGBA128Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidthX4 = 0;
 var $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $iWidthX4 = $10;
 $11 = $0;
 $0 = $11;
 $12 = $iHeight;
 $13 = (($12) - 1)|0;
 $y = $13;
 while(1) {
  $14 = $y;
  $15 = ($14|0)>=(0);
  if (!($15)) {
   break;
  }
  $16 = $2;
  $17 = $3;
  $18 = $y;
  $19 = Math_imul($17, $18)|0;
  $20 = (($16) + ($19)|0);
  $pfltDstPixel = $20;
  $21 = $pfltDstPixel;
  $piSrcPixel = $21;
  $22 = $iWidthX4;
  $23 = (($22) - 1)|0;
  $x = $23;
  while(1) {
   $24 = $x;
   $25 = ($24|0)>=(0);
   if (!($25)) {
    break;
   }
   $26 = $x;
   $27 = $piSrcPixel;
   $28 = (($27) + ($26<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = (_Convert_Half_To_Float($29)|0);
   $31 = $x;
   $32 = $pfltDstPixel;
   $33 = (($32) + ($31<<2)|0);
   HEAP32[$33>>2] = $30;
   $34 = $x;
   $35 = (($34) + -1)|0;
   $x = $35;
  }
  $36 = $y;
  $37 = (($36) + -1)|0;
  $y = $37;
 }
 STACKTOP = sp;return 0;
}
function _Convert_Half_To_Float($u16) {
 $u16 = $u16|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $m = 0, $s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $u16;
 $2 = $1;
 $3 = $2&65535;
 $4 = $3 >> 15;
 $5 = $4 & 1;
 $s = $5;
 $6 = $1;
 $7 = $6&65535;
 $8 = $7 >> 10;
 $9 = $8 & 31;
 $e = $9;
 $10 = $1;
 $11 = $10&65535;
 $12 = $11 >> 0;
 $13 = $12 & 1023;
 $m = $13;
 $14 = $e;
 $15 = (0)==($14|0);
 if ($15) {
  $16 = $s;
  $17 = $16 << 31;
  $0 = $17;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $18 = $e;
 $19 = (31)==($18|0);
 if ($19) {
  $20 = $s;
  $21 = $20 << 31;
  $22 = $21 | 2139095040;
  $23 = $m;
  $24 = $23 << 13;
  $25 = $22 | $24;
  $0 = $25;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $26 = $s;
 $27 = $26 << 31;
 $28 = $e;
 $29 = (($28) - 15)|0;
 $30 = (($29) + 127)|0;
 $31 = $30 << 23;
 $32 = $27 | $31;
 $33 = $m;
 $34 = $33 << 13;
 $35 = $32 | $34;
 $0 = $35;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _RGBA128Float_RGBA64Half($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidthX4 = 0, $pfltSrcPixel = 0, $piDstPixel = 0;
 var $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $iWidthX4 = $10;
 $11 = $0;
 $0 = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $iHeight;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piDstPixel = $19;
  $20 = $piDstPixel;
  $pfltSrcPixel = $20;
  $x = 0;
  while(1) {
   $21 = $x;
   $22 = $iWidthX4;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $x;
   $25 = $pfltSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = (_Convert_Float_To_Half($27)|0);
   $29 = $x;
   $30 = $piDstPixel;
   $31 = (($30) + ($29<<1)|0);
   HEAP16[$31>>1] = $28;
   $32 = $x;
   $33 = (($32) + 1)|0;
   $x = $33;
  }
  $34 = $y;
  $35 = (($34) + 1)|0;
  $y = $35;
 }
 STACKTOP = sp;return 0;
}
function _Convert_Float_To_Half($f) {
 $f = +$f;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, $e = 0, $iFloat = 0, $m = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 HEAPF32[$1>>2] = $f;
 $2 = HEAP32[$1>>2]|0;
 $iFloat = $2;
 $3 = +HEAPF32[$1>>2];
 $4 = +HEAPF32[$1>>2];
 $5 = $3 != $4;
 if ($5) {
  $6 = $iFloat;
  $7 = $6 | 32767;
  $8 = $7&65535;
  $0 = $8;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $9 = +HEAPF32[$1>>2];
 $10 = $9 < -65504.0;
 if ($10) {
  $0 = -1025;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $11 = +HEAPF32[$1>>2];
 $12 = 65504.0 < $11;
 if ($12) {
  $0 = 31743;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $13 = +HEAPF32[$1>>2];
 $14 = -6.103515625E-5 < $13;
 if ($14) {
  $15 = +HEAPF32[$1>>2];
  $16 = $15 < 6.103515625E-5;
  if ($16) {
   $17 = $iFloat;
   $18 = $17 >>> 16;
   $19 = $18 & 32768;
   $20 = $19&65535;
   $0 = $20;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 }
 $21 = $iFloat;
 $22 = $21 >>> 31;
 $23 = $22 & 1;
 $s = $23;
 $24 = $iFloat;
 $25 = $24 >>> 23;
 $26 = $25 & 255;
 $e = $26;
 $27 = $iFloat;
 $28 = $27 >>> 0;
 $29 = $28 & 8388607;
 $m = $29;
 $30 = $s;
 $31 = $30 << 15;
 $32 = $e;
 $33 = (($32) - 127)|0;
 $34 = (($33) + 15)|0;
 $35 = $34 << 10;
 $36 = $31 | $35;
 $37 = $m;
 $38 = $37 >>> 13;
 $39 = $36 | $38;
 $40 = $39&65535;
 $0 = $40;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _RGB64Half_RGB96Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iHeight;
 $12 = (($11) - 1)|0;
 $y = $12;
 while(1) {
  $13 = $y;
  $14 = ($13|0)>=(0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $pfltDstPixel = $19;
  $20 = $pfltDstPixel;
  $piSrcPixel = $20;
  $21 = $iWidth;
  $22 = (($21) - 1)|0;
  $x = $22;
  while(1) {
   $23 = $x;
   $24 = ($23|0)>=(0);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = $25<<2;
   $27 = $piSrcPixel;
   $28 = (($27) + ($26<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = (_Convert_Half_To_Float($29)|0);
   $31 = $x;
   $32 = ($31*3)|0;
   $33 = $pfltDstPixel;
   $34 = (($33) + ($32<<2)|0);
   HEAP32[$34>>2] = $30;
   $35 = $x;
   $36 = $35<<2;
   $37 = (($36) + 1)|0;
   $38 = $piSrcPixel;
   $39 = (($38) + ($37<<1)|0);
   $40 = HEAP16[$39>>1]|0;
   $41 = (_Convert_Half_To_Float($40)|0);
   $42 = $x;
   $43 = ($42*3)|0;
   $44 = (($43) + 1)|0;
   $45 = $pfltDstPixel;
   $46 = (($45) + ($44<<2)|0);
   HEAP32[$46>>2] = $41;
   $47 = $x;
   $48 = $47<<2;
   $49 = (($48) + 2)|0;
   $50 = $piSrcPixel;
   $51 = (($50) + ($49<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = (_Convert_Half_To_Float($52)|0);
   $54 = $x;
   $55 = ($54*3)|0;
   $56 = (($55) + 2)|0;
   $57 = $pfltDstPixel;
   $58 = (($57) + ($56<<2)|0);
   HEAP32[$58>>2] = $53;
   $59 = $x;
   $60 = (($59) + -1)|0;
   $x = $60;
  }
  $61 = $y;
  $62 = (($61) + -1)|0;
  $y = $62;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Float_RGB64Half($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $pfltSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $pfltSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = (_Convert_Float_To_Half($27)|0);
   $29 = $x;
   $30 = $29<<2;
   $31 = $piDstPixel;
   $32 = (($31) + ($30<<1)|0);
   HEAP16[$32>>1] = $28;
   $33 = $x;
   $34 = ($33*3)|0;
   $35 = (($34) + 1)|0;
   $36 = $pfltSrcPixel;
   $37 = (($36) + ($35<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = (_Convert_Float_To_Half($38)|0);
   $40 = $x;
   $41 = $40<<2;
   $42 = (($41) + 1)|0;
   $43 = $piDstPixel;
   $44 = (($43) + ($42<<1)|0);
   HEAP16[$44>>1] = $39;
   $45 = $x;
   $46 = ($45*3)|0;
   $47 = (($46) + 2)|0;
   $48 = $pfltSrcPixel;
   $49 = (($48) + ($47<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = (_Convert_Float_To_Half($50)|0);
   $52 = $x;
   $53 = $52<<2;
   $54 = (($53) + 2)|0;
   $55 = $piDstPixel;
   $56 = (($55) + ($54<<1)|0);
   HEAP16[$56>>1] = $51;
   $57 = $x;
   $58 = $57<<2;
   $59 = (($58) + 3)|0;
   $60 = $piDstPixel;
   $61 = (($60) + ($59<<1)|0);
   HEAP16[$61>>1] = 0;
   $62 = $x;
   $63 = (($62) + 1)|0;
   $x = $63;
  }
  $64 = $y;
  $65 = (($64) + 1)|0;
  $y = $65;
 }
 STACKTOP = sp;return 0;
}
function _RGB48Half_RGB96Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidthX3 = 0;
 var $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9*3)|0;
 $iWidthX3 = $10;
 $11 = $0;
 $0 = $11;
 $12 = $iHeight;
 $13 = (($12) - 1)|0;
 $y = $13;
 while(1) {
  $14 = $y;
  $15 = ($14|0)>=(0);
  if (!($15)) {
   break;
  }
  $16 = $2;
  $17 = $3;
  $18 = $y;
  $19 = Math_imul($17, $18)|0;
  $20 = (($16) + ($19)|0);
  $pfltDstPixel = $20;
  $21 = $pfltDstPixel;
  $piSrcPixel = $21;
  $22 = $iWidthX3;
  $23 = (($22) - 1)|0;
  $x = $23;
  while(1) {
   $24 = $x;
   $25 = ($24|0)>=(0);
   if (!($25)) {
    break;
   }
   $26 = $x;
   $27 = $piSrcPixel;
   $28 = (($27) + ($26<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = (_Convert_Half_To_Float($29)|0);
   $31 = $x;
   $32 = $pfltDstPixel;
   $33 = (($32) + ($31<<2)|0);
   HEAP32[$33>>2] = $30;
   $34 = $x;
   $35 = (($34) + -1)|0;
   $x = $35;
  }
  $36 = $y;
  $37 = (($36) + -1)|0;
  $y = $37;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Float_RGB48Half($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidthX3 = 0, $pfltSrcPixel = 0, $piDstPixel = 0;
 var $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9*3)|0;
 $iWidthX3 = $10;
 $11 = $0;
 $0 = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $iHeight;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piDstPixel = $19;
  $20 = $piDstPixel;
  $pfltSrcPixel = $20;
  $x = 0;
  while(1) {
   $21 = $x;
   $22 = $iWidthX3;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $x;
   $25 = $pfltSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = (_Convert_Float_To_Half($27)|0);
   $29 = $x;
   $30 = $piDstPixel;
   $31 = (($30) + ($29<<1)|0);
   HEAP16[$31>>1] = $28;
   $32 = $x;
   $33 = (($32) + 1)|0;
   $x = $33;
  }
  $34 = $y;
  $35 = (($34) + 1)|0;
  $y = $35;
 }
 STACKTOP = sp;return 0;
}
function _Gray16Half_Gray32Float($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0;
 var $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iHeight;
 $12 = (($11) - 1)|0;
 $y = $12;
 while(1) {
  $13 = $y;
  $14 = ($13|0)>=(0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $pfltDstPixel = $19;
  $20 = $pfltDstPixel;
  $piSrcPixel = $20;
  $21 = $iWidth;
  $22 = (($21) - 1)|0;
  $x = $22;
  while(1) {
   $23 = $x;
   $24 = ($23|0)>=(0);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = $piSrcPixel;
   $27 = (($26) + ($25<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = (_Convert_Half_To_Float($28)|0);
   $30 = $x;
   $31 = $pfltDstPixel;
   $32 = (($31) + ($30<<2)|0);
   HEAP32[$32>>2] = $29;
   $33 = $x;
   $34 = (($33) + -1)|0;
   $x = $34;
  }
  $35 = $y;
  $36 = (($35) + -1)|0;
  $y = $36;
 }
 STACKTOP = sp;return 0;
}
function _Gray32Float_Gray16Half($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $pfltSrcPixel = 0, $piDstPixel = 0, $x = 0;
 var $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $pfltSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $pfltSrcPixel;
   $25 = (($24) + ($23<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = (_Convert_Float_To_Half($26)|0);
   $28 = $x;
   $29 = $piDstPixel;
   $30 = (($29) + ($28<<1)|0);
   HEAP16[$30>>1] = $27;
   $31 = $x;
   $32 = (($31) + 1)|0;
   $x = $32;
  }
  $33 = $y;
  $34 = (($33) + 1)|0;
  $y = $34;
 }
 STACKTOP = sp;return 0;
}
function _RGB555_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $v = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iHeight;
 $12 = (($11) - 1)|0;
 $y = $12;
 while(1) {
  $13 = $y;
  $14 = ($13|0)>=(0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piDstPixel = $19;
  $20 = $piDstPixel;
  $piSrcPixel = $20;
  $21 = $iWidth;
  $22 = (($21) - 1)|0;
  $x = $22;
  while(1) {
   $23 = $x;
   $24 = ($23|0)>=(0);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = $piSrcPixel;
   $27 = (($26) + ($25<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $v = $28;
   $29 = $v;
   $30 = $29&65535;
   $31 = $30 >> 10;
   $32 = $31 & 31;
   $r = $32;
   $33 = $v;
   $34 = $33&65535;
   $35 = $34 >> 5;
   $36 = $35 & 31;
   $g = $36;
   $37 = $v;
   $38 = $37&65535;
   $39 = $38 & 31;
   $b = $39;
   $40 = $r;
   $41 = $40 << 3;
   $42 = $41&255;
   $43 = $x;
   $44 = ($43*3)|0;
   $45 = $piDstPixel;
   $46 = (($45) + ($44)|0);
   HEAP8[$46>>0] = $42;
   $47 = $g;
   $48 = $47 << 3;
   $49 = $48&255;
   $50 = $x;
   $51 = ($50*3)|0;
   $52 = (($51) + 1)|0;
   $53 = $piDstPixel;
   $54 = (($53) + ($52)|0);
   HEAP8[$54>>0] = $49;
   $55 = $b;
   $56 = $55 << 3;
   $57 = $56&255;
   $58 = $x;
   $59 = ($58*3)|0;
   $60 = (($59) + 2)|0;
   $61 = $piDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $x;
   $64 = (($63) + -1)|0;
   $x = $64;
  }
  $65 = $y;
  $66 = (($65) + -1)|0;
  $y = $66;
 }
 STACKTOP = sp;return 0;
}
function _RGB101010_RGB48($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $v = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iHeight;
 $12 = (($11) - 1)|0;
 $y = $12;
 while(1) {
  $13 = $y;
  $14 = ($13|0)>=(0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piDstPixel = $19;
  $20 = $piDstPixel;
  $piSrcPixel = $20;
  $21 = $iWidth;
  $22 = (($21) - 1)|0;
  $x = $22;
  while(1) {
   $23 = $x;
   $24 = ($23|0)>=(0);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = $piSrcPixel;
   $27 = (($26) + ($25<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $v = $28;
   $29 = $v;
   $30 = $29 >>> 20;
   $31 = $30 & 1023;
   $r = $31;
   $32 = $v;
   $33 = $32 >>> 10;
   $34 = $33 & 1023;
   $g = $34;
   $35 = $v;
   $36 = $35 & 1023;
   $b = $36;
   $37 = $r;
   $38 = $37 << 6;
   $39 = $38&65535;
   $40 = $x;
   $41 = ($40*3)|0;
   $42 = $piDstPixel;
   $43 = (($42) + ($41<<1)|0);
   HEAP16[$43>>1] = $39;
   $44 = $g;
   $45 = $44 << 6;
   $46 = $45&65535;
   $47 = $x;
   $48 = ($47*3)|0;
   $49 = (($48) + 1)|0;
   $50 = $piDstPixel;
   $51 = (($50) + ($49<<1)|0);
   HEAP16[$51>>1] = $46;
   $52 = $b;
   $53 = $52 << 6;
   $54 = $53&65535;
   $55 = $x;
   $56 = ($55*3)|0;
   $57 = (($56) + 2)|0;
   $58 = $piDstPixel;
   $59 = (($58) + ($57<<1)|0);
   HEAP16[$59>>1] = $54;
   $60 = $x;
   $61 = (($60) + -1)|0;
   $x = $61;
  }
  $62 = $y;
  $63 = (($62) + -1)|0;
  $y = $63;
 }
 STACKTOP = sp;return 0;
}
function _RGB24_RGB555($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $r = $28;
   $29 = $x;
   $30 = ($29*3)|0;
   $31 = (($30) + 1)|0;
   $32 = $piSrcPixel;
   $33 = (($32) + ($31)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $g = $35;
   $36 = $x;
   $37 = ($36*3)|0;
   $38 = (($37) + 2)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $b = $42;
   $43 = $r;
   $44 = $43 & 248;
   $45 = $44 << 7;
   $46 = $g;
   $47 = $46 & 248;
   $48 = $47 << 2;
   $49 = $45 | $48;
   $50 = $b;
   $51 = $50 >>> 3;
   $52 = $49 | $51;
   $53 = $52&65535;
   $54 = $x;
   $55 = $piDstPixel;
   $56 = (($55) + ($54<<1)|0);
   HEAP16[$56>>1] = $53;
   $57 = $x;
   $58 = (($57) + 1)|0;
   $x = $58;
  }
  $59 = $y;
  $60 = (($59) + 1)|0;
  $y = $60;
 }
 STACKTOP = sp;return 0;
}
function _RGB48_RGB101010($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27&65535;
   $r = $28;
   $29 = $x;
   $30 = ($29*3)|0;
   $31 = (($30) + 1)|0;
   $32 = $piSrcPixel;
   $33 = (($32) + ($31<<1)|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   $g = $35;
   $36 = $x;
   $37 = ($36*3)|0;
   $38 = (($37) + 2)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   $b = $42;
   $43 = $r;
   $44 = $43 & 65472;
   $45 = $44 << 14;
   $46 = -1073741824 | $45;
   $47 = $g;
   $48 = $47 & 65472;
   $49 = $48 << 4;
   $50 = $46 | $49;
   $51 = $b;
   $52 = $51 >>> 6;
   $53 = $50 | $52;
   $54 = $x;
   $55 = $piDstPixel;
   $56 = (($55) + ($54<<2)|0);
   HEAP32[$56>>2] = $53;
   $57 = $x;
   $58 = (($57) + 1)|0;
   $x = $58;
  }
  $59 = $y;
  $60 = (($59) + 1)|0;
  $y = $60;
 }
 STACKTOP = sp;return 0;
}
function _RGB565_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $v = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $11 = $iHeight;
 $12 = (($11) - 1)|0;
 $y = $12;
 while(1) {
  $13 = $y;
  $14 = ($13|0)>=(0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piDstPixel = $19;
  $20 = $piDstPixel;
  $piSrcPixel = $20;
  $21 = $iWidth;
  $22 = (($21) - 1)|0;
  $x = $22;
  while(1) {
   $23 = $x;
   $24 = ($23|0)>=(0);
   if (!($24)) {
    break;
   }
   $25 = $x;
   $26 = $piSrcPixel;
   $27 = (($26) + ($25<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $v = $28;
   $29 = $v;
   $30 = $29&65535;
   $31 = $30 >> 11;
   $32 = $31 & 31;
   $r = $32;
   $33 = $v;
   $34 = $33&65535;
   $35 = $34 >> 5;
   $36 = $35 & 63;
   $g = $36;
   $37 = $v;
   $38 = $37&65535;
   $39 = $38 & 31;
   $b = $39;
   $40 = $r;
   $41 = $40 << 3;
   $42 = $41&255;
   $43 = $x;
   $44 = ($43*3)|0;
   $45 = $piDstPixel;
   $46 = (($45) + ($44)|0);
   HEAP8[$46>>0] = $42;
   $47 = $g;
   $48 = $47 << 2;
   $49 = $48&255;
   $50 = $x;
   $51 = ($50*3)|0;
   $52 = (($51) + 1)|0;
   $53 = $piDstPixel;
   $54 = (($53) + ($52)|0);
   HEAP8[$54>>0] = $49;
   $55 = $b;
   $56 = $55 << 3;
   $57 = $56&255;
   $58 = $x;
   $59 = ($58*3)|0;
   $60 = (($59) + 2)|0;
   $61 = $piDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $x;
   $64 = (($63) + -1)|0;
   $x = $64;
  }
  $65 = $y;
  $66 = (($65) + -1)|0;
  $y = $66;
 }
 STACKTOP = sp;return 0;
}
function _RGB24_RGB565($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $r = $28;
   $29 = $x;
   $30 = ($29*3)|0;
   $31 = (($30) + 1)|0;
   $32 = $piSrcPixel;
   $33 = (($32) + ($31)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $g = $35;
   $36 = $x;
   $37 = ($36*3)|0;
   $38 = (($37) + 2)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $b = $42;
   $43 = $r;
   $44 = $43 & 248;
   $45 = $44 << 8;
   $46 = $g;
   $47 = $46 & 252;
   $48 = $47 << 3;
   $49 = $45 | $48;
   $50 = $b;
   $51 = $50 >>> 3;
   $52 = $49 | $51;
   $53 = $52&65535;
   $54 = $x;
   $55 = $piDstPixel;
   $56 = (($55) + ($54<<1)|0);
   HEAP16[$56>>1] = $53;
   $57 = $x;
   $58 = (($57) + 1)|0;
   $x = $58;
  }
  $59 = $y;
  $60 = (($59) + 1)|0;
  $y = $60;
 }
 STACKTOP = sp;return 0;
}
function _RGBA32_BGRA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bTemp = 0, $iHeight = 0, $iWidthX4 = 0, $piPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $iWidthX4 = $10;
 $11 = $0;
 $0 = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $iHeight;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $3;
  $17 = $y;
  $18 = Math_imul($16, $17)|0;
  $19 = (($15) + ($18)|0);
  $piPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidthX4;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $piPixel;
   $25 = (($24) + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $bTemp = $26;
   $27 = $x;
   $28 = (($27) + 2)|0;
   $29 = $piPixel;
   $30 = (($29) + ($28)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $x;
   $33 = $piPixel;
   $34 = (($33) + ($32)|0);
   HEAP8[$34>>0] = $31;
   $35 = $bTemp;
   $36 = $x;
   $37 = (($36) + 2)|0;
   $38 = $piPixel;
   $39 = (($38) + ($37)|0);
   HEAP8[$39>>0] = $35;
   $40 = $x;
   $41 = (($40) + 4)|0;
   $x = $41;
  }
  $42 = $y;
  $43 = (($42) + 1)|0;
  $y = $43;
 }
 STACKTOP = sp;return 0;
}
function _BGRA32_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_RGBA32_BGRA32($4,$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _BlackWhite_Gray8($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $bBlackWhite = 0, $iHeight = 0, $iWidth = 0;
 var $n = 0, $piDstPixel = 0, $piSrcPixel = 0, $v = 0, $v1 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 92|0);
 $14 = (($13) + 168|0);
 $15 = (($14) + 32844|0);
 $16 = HEAP32[$15>>2]|0;
 $bBlackWhite = $16;
 $17 = $iHeight;
 $18 = (($17) - 1)|0;
 $y = $18;
 while(1) {
  $19 = $y;
  $20 = ($19|0)>=(0);
  if (!($20)) {
   break;
  }
  $21 = $2;
  $22 = $3;
  $23 = $y;
  $24 = Math_imul($22, $23)|0;
  $25 = (($21) + ($24)|0);
  $piDstPixel = $25;
  $26 = $piDstPixel;
  $piSrcPixel = $26;
  $27 = $iWidth;
  $28 = (($27|0) % 8)&-1;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $iWidth;
   $31 = (($30|0) / 8)&-1;
   $32 = $piSrcPixel;
   $33 = (($32) + ($31)|0);
   $34 = HEAP8[$33>>0]|0;
   $v = $34;
   $n = 0;
   while(1) {
    $35 = $n;
    $36 = $iWidth;
    $37 = (($36|0) % 8)&-1;
    $38 = ($35|0)<($37|0);
    if (!($38)) {
     break;
    }
    $39 = $v;
    $40 = $39&255;
    $41 = $n;
    $42 = (7 - ($41))|0;
    $43 = $40 >> $42;
    $44 = $43 & 1;
    $45 = ($44|0)!=(0);
    $46 = $45&1;
    $47 = $bBlackWhite;
    $48 = $46 ^ $47;
    $49 = ($48|0)!=(0);
    $50 = $49 ? 255 : 0;
    $51 = $50&255;
    $52 = $iWidth;
    $53 = (($52|0) / 8)&-1;
    $54 = $53<<3;
    $55 = $n;
    $56 = (($54) + ($55))|0;
    $57 = $piDstPixel;
    $58 = (($57) + ($56)|0);
    HEAP8[$58>>0] = $51;
    $59 = $n;
    $60 = (($59) + 1)|0;
    $n = $60;
   }
  }
  $61 = $iWidth;
  $62 = (($61|0) / 8)&-1;
  $63 = (($62) - 1)|0;
  $x = $63;
  while(1) {
   $64 = $x;
   $65 = ($64|0)>=(0);
   if (!($65)) {
    break;
   }
   $66 = $x;
   $67 = $piSrcPixel;
   $68 = (($67) + ($66)|0);
   $69 = HEAP8[$68>>0]|0;
   $v1 = $69;
   $n = 0;
   while(1) {
    $70 = $n;
    $71 = ($70|0)<(8);
    if (!($71)) {
     break;
    }
    $72 = $v1;
    $73 = $72&255;
    $74 = $n;
    $75 = (7 - ($74))|0;
    $76 = $73 >> $75;
    $77 = $76 & 1;
    $78 = ($77|0)!=(0);
    $79 = $78&1;
    $80 = $bBlackWhite;
    $81 = $79 ^ $80;
    $82 = ($81|0)!=(0);
    $83 = $82 ? 255 : 0;
    $84 = $83&255;
    $85 = $x;
    $86 = $85<<3;
    $87 = $n;
    $88 = (($86) + ($87))|0;
    $89 = $piDstPixel;
    $90 = (($89) + ($88)|0);
    HEAP8[$90>>0] = $84;
    $91 = $n;
    $92 = (($91) + 1)|0;
    $n = $92;
   }
   $93 = $x;
   $94 = (($93) + -1)|0;
   $x = $94;
  }
  $95 = $y;
  $96 = (($95) + -1)|0;
  $y = $96;
 }
 STACKTOP = sp;return 0;
}
function _Gray16_Gray8($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $i = 0;
 $j = 0;
 $4 = $0;
 $0 = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $j = 0;
  while(1) {
   $10 = $j;
   $11 = $1;
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($10|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $j;
   $16 = $2;
   $17 = (($16) + ($15<<1)|0);
   $18 = HEAP16[$17>>1]|0;
   $v = $18;
   $19 = $v;
   $20 = $19&65535;
   $21 = $20 >> 8;
   $22 = $21&255;
   $23 = $j;
   $24 = $2;
   $25 = (($24) + ($23)|0);
   HEAP8[$25>>0] = $22;
   $26 = $j;
   $27 = (($26) + 1)|0;
   $j = $27;
  }
  $28 = $3;
  $29 = $2;
  $30 = (($29) + ($28)|0);
  $2 = $30;
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 STACKTOP = sp;return 0;
}
function _RGB48_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $r = $27;
   $28 = $x;
   $29 = ($28*3)|0;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $g = $33;
   $34 = $x;
   $35 = ($34*3)|0;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<1)|0);
   $39 = HEAP16[$38>>1]|0;
   $b = $39;
   $40 = $r;
   $41 = $40&65535;
   $42 = $41 >> 8;
   $43 = $42&255;
   $44 = $x;
   $45 = ($44*3)|0;
   $46 = $piDstPixel;
   $47 = (($46) + ($45)|0);
   HEAP8[$47>>0] = $43;
   $48 = $g;
   $49 = $48&65535;
   $50 = $49 >> 8;
   $51 = $50&255;
   $52 = $x;
   $53 = ($52*3)|0;
   $54 = (($53) + 1)|0;
   $55 = $piDstPixel;
   $56 = (($55) + ($54)|0);
   HEAP8[$56>>0] = $51;
   $57 = $b;
   $58 = $57&65535;
   $59 = $58 >> 8;
   $60 = $59&255;
   $61 = $x;
   $62 = ($61*3)|0;
   $63 = (($62) + 2)|0;
   $64 = $piDstPixel;
   $65 = (($64) + ($63)|0);
   HEAP8[$65>>0] = $60;
   $66 = $x;
   $67 = (($66) + 1)|0;
   $x = $67;
  }
  $68 = $y;
  $69 = (($68) + 1)|0;
  $y = $69;
 }
 STACKTOP = sp;return 0;
}
function _RGBA64_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $a = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<1)|0);
   $39 = HEAP16[$38>>1]|0;
   $b = $39;
   $40 = $x;
   $41 = $40<<2;
   $42 = (($41) + 3)|0;
   $43 = $piSrcPixel;
   $44 = (($43) + ($42<<1)|0);
   $45 = HEAP16[$44>>1]|0;
   $a = $45;
   $46 = $r;
   $47 = $46&65535;
   $48 = $47 >> 8;
   $49 = $48&255;
   $50 = $x;
   $51 = $50<<2;
   $52 = $piDstPixel;
   $53 = (($52) + ($51)|0);
   HEAP8[$53>>0] = $49;
   $54 = $g;
   $55 = $54&65535;
   $56 = $55 >> 8;
   $57 = $56&255;
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 1)|0;
   $61 = $piDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $b;
   $64 = $63&65535;
   $65 = $64 >> 8;
   $66 = $65&255;
   $67 = $x;
   $68 = $67<<2;
   $69 = (($68) + 2)|0;
   $70 = $piDstPixel;
   $71 = (($70) + ($69)|0);
   HEAP8[$71>>0] = $66;
   $72 = $a;
   $73 = $72&65535;
   $74 = $73 >> 8;
   $75 = $74&255;
   $76 = $x;
   $77 = $76<<2;
   $78 = (($77) + 3)|0;
   $79 = $piDstPixel;
   $80 = (($79) + ($78)|0);
   HEAP8[$80>>0] = $75;
   $81 = $x;
   $82 = (($81) + 1)|0;
   $x = $82;
  }
  $83 = $y;
  $84 = (($83) + 1)|0;
  $y = $84;
 }
 STACKTOP = sp;return 0;
}
function _RGBA64_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0;
 var $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<1)|0);
   $39 = HEAP16[$38>>1]|0;
   $b = $39;
   $40 = $r;
   $41 = $40&65535;
   $42 = $41 >> 8;
   $43 = $42&255;
   $44 = $x;
   $45 = $44<<2;
   $46 = $piDstPixel;
   $47 = (($46) + ($45)|0);
   HEAP8[$47>>0] = $43;
   $48 = $g;
   $49 = $48&65535;
   $50 = $49 >> 8;
   $51 = $50&255;
   $52 = $x;
   $53 = $52<<2;
   $54 = (($53) + 1)|0;
   $55 = $piDstPixel;
   $56 = (($55) + ($54)|0);
   HEAP8[$56>>0] = $51;
   $57 = $b;
   $58 = $57&65535;
   $59 = $58 >> 8;
   $60 = $59&255;
   $61 = $x;
   $62 = $61<<2;
   $63 = (($62) + 2)|0;
   $64 = $piDstPixel;
   $65 = (($64) + ($63)|0);
   HEAP8[$65>>0] = $60;
   $66 = $x;
   $67 = $66<<2;
   $68 = (($67) + 3)|0;
   $69 = $piDstPixel;
   $70 = (($69) + ($68)|0);
   HEAP8[$70>>0] = 0;
   $71 = $x;
   $72 = (($71) + 1)|0;
   $x = $72;
  }
  $73 = $y;
  $74 = (($73) + 1)|0;
  $y = $74;
 }
 STACKTOP = sp;return 0;
}
function _Gray32Float_Gray8($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0;
 var $v = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $piSrcPixel;
   $25 = (($24) + ($23<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $v = $26;
   $27 = $v;
   $28 = (_Convert_Float_To_U8($27)|0);
   $29 = $x;
   $30 = $piDstPixel;
   $31 = (($30) + ($29)|0);
   HEAP8[$31>>0] = $28;
   $32 = $x;
   $33 = (($32) + 1)|0;
   $x = $33;
  }
  $34 = $y;
  $35 = (($34) + 1)|0;
  $y = $35;
 }
 STACKTOP = sp;return 0;
}
function _Convert_Float_To_U8($f) {
 $f = +$f;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $1;
 $3 = $2 <= 0.0;
 do {
  if ($3) {
   $0 = 0;
  } else {
   $4 = $1;
   $5 = $4 <= 0.0031308000907301903;
   if ($5) {
    $6 = $1;
    $7 = 255.0 * $6;
    $8 = $7 * 12.920000076293945;
    $9 = $8 + 0.5;
    $10 = (~~(($9))&255);
    $0 = $10;
    break;
   }
   $11 = $1;
   $12 = $11 < 1.0;
   if ($12) {
    $13 = $1;
    $14 = $13;
    $15 = (+Math_pow((+$14),0.41666666666666669));
    $16 = $15;
    $17 = 1.0549999475479126 * $16;
    $18 = $17 - 0.054999999701976776;
    $19 = 255.0 * $18;
    $20 = $19 + 0.5;
    $21 = (~~(($20))&255);
    $0 = $21;
    break;
   } else {
    $0 = -1;
    break;
   }
  }
 } while(0);
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _RGB96Float_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0.0, $g = 0.0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $r = $27;
   $28 = $x;
   $29 = ($28*3)|0;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $g = $33;
   $34 = $x;
   $35 = ($34*3)|0;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $b = $39;
   $40 = $r;
   $41 = (_Convert_Float_To_U8($40)|0);
   $42 = $x;
   $43 = ($42*3)|0;
   $44 = $piDstPixel;
   $45 = (($44) + ($43)|0);
   HEAP8[$45>>0] = $41;
   $46 = $g;
   $47 = (_Convert_Float_To_U8($46)|0);
   $48 = $x;
   $49 = ($48*3)|0;
   $50 = (($49) + 1)|0;
   $51 = $piDstPixel;
   $52 = (($51) + ($50)|0);
   HEAP8[$52>>0] = $47;
   $53 = $b;
   $54 = (_Convert_Float_To_U8($53)|0);
   $55 = $x;
   $56 = ($55*3)|0;
   $57 = (($56) + 2)|0;
   $58 = $piDstPixel;
   $59 = (($58) + ($57)|0);
   HEAP8[$59>>0] = $54;
   $60 = $x;
   $61 = (($60) + 1)|0;
   $x = $61;
  }
  $62 = $y;
  $63 = (($62) + 1)|0;
  $y = $63;
 }
 STACKTOP = sp;return 0;
}
function _RGB128Float_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0.0, $g = 0.0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $b = $39;
   $40 = $r;
   $41 = (_Convert_Float_To_U8($40)|0);
   $42 = $x;
   $43 = ($42*3)|0;
   $44 = $piDstPixel;
   $45 = (($44) + ($43)|0);
   HEAP8[$45>>0] = $41;
   $46 = $g;
   $47 = (_Convert_Float_To_U8($46)|0);
   $48 = $x;
   $49 = ($48*3)|0;
   $50 = (($49) + 1)|0;
   $51 = $piDstPixel;
   $52 = (($51) + ($50)|0);
   HEAP8[$52>>0] = $47;
   $53 = $b;
   $54 = (_Convert_Float_To_U8($53)|0);
   $55 = $x;
   $56 = ($55*3)|0;
   $57 = (($56) + 2)|0;
   $58 = $piDstPixel;
   $59 = (($58) + ($57)|0);
   HEAP8[$59>>0] = $54;
   $60 = $x;
   $61 = (($60) + 1)|0;
   $x = $61;
  }
  $62 = $y;
  $63 = (($62) + 1)|0;
  $y = $63;
 }
 STACKTOP = sp;return 0;
}
function _RGBA128Float_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $a = 0.0, $b = 0.0, $g = 0.0;
 var $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $b = $39;
   $40 = $x;
   $41 = $40<<2;
   $42 = (($41) + 3)|0;
   $43 = $piSrcPixel;
   $44 = (($43) + ($42<<2)|0);
   $45 = +HEAPF32[$44>>2];
   $a = $45;
   $46 = $r;
   $47 = (_Convert_Float_To_U8($46)|0);
   $48 = $x;
   $49 = $48<<2;
   $50 = $piDstPixel;
   $51 = (($50) + ($49)|0);
   HEAP8[$51>>0] = $47;
   $52 = $g;
   $53 = (_Convert_Float_To_U8($52)|0);
   $54 = $x;
   $55 = $54<<2;
   $56 = (($55) + 1)|0;
   $57 = $piDstPixel;
   $58 = (($57) + ($56)|0);
   HEAP8[$58>>0] = $53;
   $59 = $b;
   $60 = (_Convert_Float_To_U8($59)|0);
   $61 = $x;
   $62 = $61<<2;
   $63 = (($62) + 2)|0;
   $64 = $piDstPixel;
   $65 = (($64) + ($63)|0);
   HEAP8[$65>>0] = $60;
   $66 = $a;
   $67 = (_Convert_AlphaFloat_To_U8($66)|0);
   $68 = $x;
   $69 = $68<<2;
   $70 = (($69) + 3)|0;
   $71 = $piDstPixel;
   $72 = (($71) + ($70)|0);
   HEAP8[$72>>0] = $67;
   $73 = $x;
   $74 = (($73) + 1)|0;
   $x = $74;
  }
  $75 = $y;
  $76 = (($75) + 1)|0;
  $y = $76;
 }
 STACKTOP = sp;return 0;
}
function _Convert_AlphaFloat_To_U8($f) {
 $f = +$f;
 var $0 = 0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $1;
 $3 = $2 <= 0.0;
 do {
  if ($3) {
   $0 = 0;
  } else {
   $4 = $1;
   $5 = $4 < 1.0;
   if ($5) {
    $6 = $1;
    $7 = 255.0 * $6;
    $8 = $7 + 0.5;
    $9 = (~~(($8))&255);
    $0 = $9;
    break;
   } else {
    $0 = -1;
    break;
   }
  }
 } while(0);
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _RGBA128Float_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0.0, $g = 0.0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $b = $39;
   $40 = $r;
   $41 = (_Convert_Float_To_U8($40)|0);
   $42 = $x;
   $43 = $42<<2;
   $44 = $piDstPixel;
   $45 = (($44) + ($43)|0);
   HEAP8[$45>>0] = $41;
   $46 = $g;
   $47 = (_Convert_Float_To_U8($46)|0);
   $48 = $x;
   $49 = $48<<2;
   $50 = (($49) + 1)|0;
   $51 = $piDstPixel;
   $52 = (($51) + ($50)|0);
   HEAP8[$52>>0] = $47;
   $53 = $b;
   $54 = (_Convert_Float_To_U8($53)|0);
   $55 = $x;
   $56 = $55<<2;
   $57 = (($56) + 2)|0;
   $58 = $piDstPixel;
   $59 = (($58) + ($57)|0);
   HEAP8[$59>>0] = $54;
   $60 = $x;
   $61 = $60<<2;
   $62 = (($61) + 3)|0;
   $63 = $piDstPixel;
   $64 = (($63) + ($62)|0);
   HEAP8[$64>>0] = 0;
   $65 = $x;
   $66 = (($65) + 1)|0;
   $x = $66;
  }
  $67 = $y;
  $68 = (($67) + 1)|0;
  $y = $68;
 }
 STACKTOP = sp;return 0;
}
function _Clip255($v) {
 $v = +$v;
 var $0 = 0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = $1;
 $3 = (~~(($2)));
 $i = $3;
 $4 = $i;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $0 = 0;
  } else {
   $6 = $i;
   $7 = ($6|0)>(255);
   if ($7) {
    $0 = -1;
    break;
   } else {
    $8 = $i;
    $9 = $8&255;
    $0 = $9;
    break;
   }
  }
 } while(0);
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _PRGBA128Float_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $a = 0.0, $b = 0.0, $g = 0.0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $b = $39;
   $40 = $x;
   $41 = $40<<2;
   $42 = (($41) + 3)|0;
   $43 = $piSrcPixel;
   $44 = (($43) + ($42<<2)|0);
   $45 = +HEAPF32[$44>>2];
   $a = $45;
   $46 = $r;
   $47 = $a;
   $48 = (_Convert_PFloat_To_U8($46,$47)|0);
   $49 = $x;
   $50 = $49<<2;
   $51 = $piDstPixel;
   $52 = (($51) + ($50)|0);
   HEAP8[$52>>0] = $48;
   $53 = $g;
   $54 = $a;
   $55 = (_Convert_PFloat_To_U8($53,$54)|0);
   $56 = $x;
   $57 = $56<<2;
   $58 = (($57) + 1)|0;
   $59 = $piDstPixel;
   $60 = (($59) + ($58)|0);
   HEAP8[$60>>0] = $55;
   $61 = $b;
   $62 = $a;
   $63 = (_Convert_PFloat_To_U8($61,$62)|0);
   $64 = $x;
   $65 = $64<<2;
   $66 = (($65) + 2)|0;
   $67 = $piDstPixel;
   $68 = (($67) + ($66)|0);
   HEAP8[$68>>0] = $63;
   $69 = $a;
   $70 = (_Convert_AlphaFloat_To_U8($69)|0);
   $71 = $x;
   $72 = $71<<2;
   $73 = (($72) + 3)|0;
   $74 = $piDstPixel;
   $75 = (($74) + ($73)|0);
   HEAP8[$75>>0] = $70;
   $76 = $x;
   $77 = (($76) + 1)|0;
   $x = $77;
  }
  $78 = $y;
  $79 = (($78) + 1)|0;
  $y = $79;
 }
 STACKTOP = sp;return 0;
}
function _Convert_PFloat_To_U8($f,$alpha) {
 $f = +$f;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $alpha;
 $3 = $2;
 $4 = 0.0 == $3;
 do {
  if ($4) {
   $0 = 0;
  } else {
   $5 = $2;
   $6 = $1;
   $7 = $6 / $5;
   $1 = $7;
   $8 = $1;
   $9 = $8 <= 0.0;
   if ($9) {
    $0 = 0;
    break;
   }
   $10 = $1;
   $11 = $10 <= 0.0031308000907301903;
   if ($11) {
    $12 = $1;
    $13 = 255.0 * $12;
    $14 = $13 * 12.920000076293945;
    $15 = $14 + 0.5;
    $16 = (~~(($15))&255);
    $0 = $16;
    break;
   }
   $17 = $1;
   $18 = $17 < 1.0;
   if ($18) {
    $19 = $1;
    $20 = $19;
    $21 = (+Math_pow((+$20),0.41666666666666669));
    $22 = $21;
    $23 = 1.0549999475479126 * $22;
    $24 = $23 - 0.054999999701976776;
    $25 = 255.0 * $24;
    $26 = $25 + 0.5;
    $27 = (~~(($26))&255);
    $0 = $27;
    break;
   } else {
    $0 = -1;
    break;
   }
  }
 } while(0);
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _PRGBA128Float_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0.0, $g = 0.0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $b = $39;
   $40 = $r;
   $41 = (_Convert_Float_To_U8($40)|0);
   $42 = $x;
   $43 = $42<<2;
   $44 = $piDstPixel;
   $45 = (($44) + ($43)|0);
   HEAP8[$45>>0] = $41;
   $46 = $g;
   $47 = (_Convert_Float_To_U8($46)|0);
   $48 = $x;
   $49 = $48<<2;
   $50 = (($49) + 1)|0;
   $51 = $piDstPixel;
   $52 = (($51) + ($50)|0);
   HEAP8[$52>>0] = $47;
   $53 = $b;
   $54 = (_Convert_Float_To_U8($53)|0);
   $55 = $x;
   $56 = $55<<2;
   $57 = (($56) + 2)|0;
   $58 = $piDstPixel;
   $59 = (($58) + ($57)|0);
   HEAP8[$59>>0] = $54;
   $60 = $x;
   $61 = $60<<2;
   $62 = (($61) + 3)|0;
   $63 = $piDstPixel;
   $64 = (($63) + ($62)|0);
   HEAP8[$64>>0] = 0;
   $65 = $x;
   $66 = (($65) + 1)|0;
   $x = $66;
  }
  $67 = $y;
  $68 = (($67) + 1)|0;
  $y = $68;
 }
 STACKTOP = sp;return 0;
}
function _PRGBA64_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $a = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<1)|0);
   $39 = HEAP16[$38>>1]|0;
   $b = $39;
   $40 = $x;
   $41 = $40<<2;
   $42 = (($41) + 3)|0;
   $43 = $piSrcPixel;
   $44 = (($43) + ($42<<1)|0);
   $45 = HEAP16[$44>>1]|0;
   $a = $45;
   $46 = $r;
   $47 = $46&65535;
   $48 = $47 >> 8;
   $49 = $48&255;
   $50 = $x;
   $51 = $50<<2;
   $52 = $piDstPixel;
   $53 = (($52) + ($51)|0);
   HEAP8[$53>>0] = $49;
   $54 = $g;
   $55 = $54&65535;
   $56 = $55 >> 8;
   $57 = $56&255;
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 1)|0;
   $61 = $piDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $b;
   $64 = $63&65535;
   $65 = $64 >> 8;
   $66 = $65&255;
   $67 = $x;
   $68 = $67<<2;
   $69 = (($68) + 2)|0;
   $70 = $piDstPixel;
   $71 = (($70) + ($69)|0);
   HEAP8[$71>>0] = $66;
   $72 = $a;
   $73 = $72&65535;
   $74 = $73 >> 8;
   $75 = $74&255;
   $76 = $x;
   $77 = $76<<2;
   $78 = (($77) + 3)|0;
   $79 = $piDstPixel;
   $80 = (($79) + ($78)|0);
   HEAP8[$80>>0] = $75;
   $81 = $x;
   $82 = (($81) + 1)|0;
   $x = $82;
  }
  $83 = $y;
  $84 = (($83) + 1)|0;
  $y = $84;
 }
 STACKTOP = sp;return 0;
}
function _PRGBA64_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0;
 var $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36<<1)|0);
   $39 = HEAP16[$38>>1]|0;
   $b = $39;
   $40 = $r;
   $41 = $40&65535;
   $42 = $41 >> 8;
   $43 = $42&255;
   $44 = $x;
   $45 = $44<<2;
   $46 = $piDstPixel;
   $47 = (($46) + ($45)|0);
   HEAP8[$47>>0] = $43;
   $48 = $g;
   $49 = $48&65535;
   $50 = $49 >> 8;
   $51 = $50&255;
   $52 = $x;
   $53 = $52<<2;
   $54 = (($53) + 1)|0;
   $55 = $piDstPixel;
   $56 = (($55) + ($54)|0);
   HEAP8[$56>>0] = $51;
   $57 = $b;
   $58 = $57&65535;
   $59 = $58 >> 8;
   $60 = $59&255;
   $61 = $x;
   $62 = $61<<2;
   $63 = (($62) + 2)|0;
   $64 = $piDstPixel;
   $65 = (($64) + ($63)|0);
   HEAP8[$65>>0] = $60;
   $66 = $x;
   $67 = $66<<2;
   $68 = (($67) + 3)|0;
   $69 = $piDstPixel;
   $70 = (($69) + ($68)|0);
   HEAP8[$70>>0] = 0;
   $71 = $x;
   $72 = (($71) + 1)|0;
   $x = $72;
  }
  $73 = $y;
  $74 = (($73) + 1)|0;
  $y = $74;
 }
 STACKTOP = sp;return 0;
}
function _PRGBA32_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $a = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $ia = 0.0;
 var $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $b = $39;
   $40 = $x;
   $41 = $40<<2;
   $42 = (($41) + 3)|0;
   $43 = $piSrcPixel;
   $44 = (($43) + ($42)|0);
   $45 = HEAP8[$44>>0]|0;
   $a = $45;
   $46 = $a;
   $47 = $46&255;
   $48 = (0)==($47|0);
   if ($48) {
    $49 = $r;
    $50 = $x;
    $51 = $50<<2;
    $52 = $piDstPixel;
    $53 = (($52) + ($51)|0);
    HEAP8[$53>>0] = $49;
    $54 = $g;
    $55 = $x;
    $56 = $55<<2;
    $57 = (($56) + 1)|0;
    $58 = $piDstPixel;
    $59 = (($58) + ($57)|0);
    HEAP8[$59>>0] = $54;
    $60 = $b;
    $61 = $x;
    $62 = $61<<2;
    $63 = (($62) + 2)|0;
    $64 = $piDstPixel;
    $65 = (($64) + ($63)|0);
    HEAP8[$65>>0] = $60;
    $66 = $a;
    $67 = $x;
    $68 = $67<<2;
    $69 = (($68) + 3)|0;
    $70 = $piDstPixel;
    $71 = (($70) + ($69)|0);
    HEAP8[$71>>0] = $66;
   } else {
    $72 = $a;
    $73 = (+($72&255));
    $74 = 255.0 / $73;
    $ia = $74;
    $75 = $r;
    $76 = (+($75&255));
    $77 = $ia;
    $78 = $76 * $77;
    $79 = (_Clip255($78)|0);
    $80 = $x;
    $81 = $80<<2;
    $82 = $piDstPixel;
    $83 = (($82) + ($81)|0);
    HEAP8[$83>>0] = $79;
    $84 = $g;
    $85 = (+($84&255));
    $86 = $ia;
    $87 = $85 * $86;
    $88 = (_Clip255($87)|0);
    $89 = $x;
    $90 = $89<<2;
    $91 = (($90) + 1)|0;
    $92 = $piDstPixel;
    $93 = (($92) + ($91)|0);
    HEAP8[$93>>0] = $88;
    $94 = $b;
    $95 = (+($94&255));
    $96 = $ia;
    $97 = $95 * $96;
    $98 = (_Clip255($97)|0);
    $99 = $x;
    $100 = $99<<2;
    $101 = (($100) + 2)|0;
    $102 = $piDstPixel;
    $103 = (($102) + ($101)|0);
    HEAP8[$103>>0] = $98;
    $104 = $a;
    $105 = $x;
    $106 = $105<<2;
    $107 = (($106) + 3)|0;
    $108 = $piDstPixel;
    $109 = (($108) + ($107)|0);
    HEAP8[$109>>0] = $104;
   }
   $110 = $x;
   $111 = (($110) + 1)|0;
   $x = $111;
  }
  $112 = $y;
  $113 = (($112) + 1)|0;
  $y = $113;
 }
 STACKTOP = sp;return 0;
}
function _PRGBA32_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $r = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $b = $39;
   $40 = $r;
   $41 = $x;
   $42 = $41<<2;
   $43 = $piDstPixel;
   $44 = (($43) + ($42)|0);
   HEAP8[$44>>0] = $40;
   $45 = $g;
   $46 = $x;
   $47 = $46<<2;
   $48 = (($47) + 1)|0;
   $49 = $piDstPixel;
   $50 = (($49) + ($48)|0);
   HEAP8[$50>>0] = $45;
   $51 = $b;
   $52 = $x;
   $53 = $52<<2;
   $54 = (($53) + 2)|0;
   $55 = $piDstPixel;
   $56 = (($55) + ($54)|0);
   HEAP8[$56>>0] = $51;
   $57 = $x;
   $58 = $57<<2;
   $59 = (($58) + 3)|0;
   $60 = $piDstPixel;
   $61 = (($60) + ($59)|0);
   HEAP8[$61>>0] = 0;
   $62 = $x;
   $63 = (($62) + 1)|0;
   $x = $63;
  }
  $64 = $y;
  $65 = (($64) + 1)|0;
  $y = $65;
 }
 STACKTOP = sp;return 0;
}
function _PBGRA32_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $a = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $ia = 0.0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $b = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $r = $39;
   $40 = $x;
   $41 = $40<<2;
   $42 = (($41) + 3)|0;
   $43 = $piSrcPixel;
   $44 = (($43) + ($42)|0);
   $45 = HEAP8[$44>>0]|0;
   $a = $45;
   $46 = $a;
   $47 = $x;
   $48 = $47<<2;
   $49 = (($48) + 3)|0;
   $50 = $piDstPixel;
   $51 = (($50) + ($49)|0);
   HEAP8[$51>>0] = $46;
   $52 = $a;
   $53 = $52&255;
   $54 = (0)==($53|0);
   if ($54) {
    $55 = $r;
    $56 = $x;
    $57 = $56<<2;
    $58 = $piDstPixel;
    $59 = (($58) + ($57)|0);
    HEAP8[$59>>0] = $55;
    $60 = $g;
    $61 = $x;
    $62 = $61<<2;
    $63 = (($62) + 1)|0;
    $64 = $piDstPixel;
    $65 = (($64) + ($63)|0);
    HEAP8[$65>>0] = $60;
    $66 = $b;
    $67 = $x;
    $68 = $67<<2;
    $69 = (($68) + 2)|0;
    $70 = $piDstPixel;
    $71 = (($70) + ($69)|0);
    HEAP8[$71>>0] = $66;
    $72 = $a;
    $73 = $x;
    $74 = $73<<2;
    $75 = (($74) + 3)|0;
    $76 = $piDstPixel;
    $77 = (($76) + ($75)|0);
    HEAP8[$77>>0] = $72;
   } else {
    $78 = $a;
    $79 = (+($78&255));
    $80 = 255.0 / $79;
    $ia = $80;
    $81 = $r;
    $82 = (+($81&255));
    $83 = $ia;
    $84 = $82 * $83;
    $85 = (_Clip255($84)|0);
    $86 = $x;
    $87 = $86<<2;
    $88 = $piDstPixel;
    $89 = (($88) + ($87)|0);
    HEAP8[$89>>0] = $85;
    $90 = $g;
    $91 = (+($90&255));
    $92 = $ia;
    $93 = $91 * $92;
    $94 = (_Clip255($93)|0);
    $95 = $x;
    $96 = $95<<2;
    $97 = (($96) + 1)|0;
    $98 = $piDstPixel;
    $99 = (($98) + ($97)|0);
    HEAP8[$99>>0] = $94;
    $100 = $b;
    $101 = (+($100&255));
    $102 = $ia;
    $103 = $101 * $102;
    $104 = (_Clip255($103)|0);
    $105 = $x;
    $106 = $105<<2;
    $107 = (($106) + 2)|0;
    $108 = $piDstPixel;
    $109 = (($108) + ($107)|0);
    HEAP8[$109>>0] = $104;
    $110 = $a;
    $111 = $x;
    $112 = $111<<2;
    $113 = (($112) + 3)|0;
    $114 = $piDstPixel;
    $115 = (($114) + ($113)|0);
    HEAP8[$115>>0] = $110;
   }
   $116 = $x;
   $117 = (($116) + 1)|0;
   $x = $117;
  }
  $118 = $y;
  $119 = (($118) + 1)|0;
  $y = $119;
 }
 STACKTOP = sp;return 0;
}
function _PBGRA32_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $b = $27;
   $28 = $x;
   $29 = $28<<2;
   $30 = (($29) + 1)|0;
   $31 = $piSrcPixel;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $g = $33;
   $34 = $x;
   $35 = $34<<2;
   $36 = (($35) + 2)|0;
   $37 = $piSrcPixel;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $r = $39;
   $40 = $r;
   $41 = $x;
   $42 = $41<<2;
   $43 = $piDstPixel;
   $44 = (($43) + ($42)|0);
   HEAP8[$44>>0] = $40;
   $45 = $g;
   $46 = $x;
   $47 = $46<<2;
   $48 = (($47) + 1)|0;
   $49 = $piDstPixel;
   $50 = (($49) + ($48)|0);
   HEAP8[$50>>0] = $45;
   $51 = $b;
   $52 = $x;
   $53 = $52<<2;
   $54 = (($53) + 2)|0;
   $55 = $piDstPixel;
   $56 = (($55) + ($54)|0);
   HEAP8[$56>>0] = $51;
   $57 = $x;
   $58 = $57<<2;
   $59 = (($58) + 3)|0;
   $60 = $piDstPixel;
   $61 = (($60) + ($59)|0);
   HEAP8[$61>>0] = 0;
   $62 = $x;
   $63 = (($62) + 1)|0;
   $x = $63;
  }
  $64 = $y;
  $65 = (($64) + 1)|0;
  $y = $65;
 }
 STACKTOP = sp;return 0;
}
function _Gray16Fixed_Gray8($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0;
 var $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 1.220703125E-4;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $piSrcPixel;
   $25 = (($24) + ($23<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 << 16 >> 16;
   $28 = (+($27|0));
   $29 = $28 * 1.220703125E-4;
   $30 = (_Convert_Float_To_U8($29)|0);
   $31 = $x;
   $32 = $piDstPixel;
   $33 = (($32) + ($31)|0);
   HEAP8[$33>>0] = $30;
   $34 = $x;
   $35 = (($34) + 1)|0;
   $x = $35;
  }
  $36 = $y;
  $37 = (($36) + 1)|0;
  $y = $37;
 }
 STACKTOP = sp;return 0;
}
function _Gray32Fixed_Gray8($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0;
 var $piDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 5.9604644775390625E-8;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $piSrcPixel;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (+($26|0));
   $28 = $27 * 5.9604644775390625E-8;
   $29 = (_Convert_Float_To_U8($28)|0);
   $30 = $x;
   $31 = $piDstPixel;
   $32 = (($31) + ($30)|0);
   HEAP8[$32>>0] = $29;
   $33 = $x;
   $34 = (($33) + 1)|0;
   $x = $34;
  }
  $35 = $y;
  $36 = (($35) + 1)|0;
  $y = $36;
 }
 STACKTOP = sp;return 0;
}
function _RGB48Fixed_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 1.220703125E-4;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = (+($28|0));
   $30 = $29 * 1.220703125E-4;
   $31 = (_Convert_Float_To_U8($30)|0);
   $32 = $x;
   $33 = ($32*3)|0;
   $34 = $pfltDstPixel;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = $31;
   $36 = $x;
   $37 = ($36*3)|0;
   $38 = (($37) + 1)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41 << 16 >> 16;
   $43 = (+($42|0));
   $44 = $43 * 1.220703125E-4;
   $45 = (_Convert_Float_To_U8($44)|0);
   $46 = $x;
   $47 = ($46*3)|0;
   $48 = (($47) + 1)|0;
   $49 = $pfltDstPixel;
   $50 = (($49) + ($48)|0);
   HEAP8[$50>>0] = $45;
   $51 = $x;
   $52 = ($51*3)|0;
   $53 = (($52) + 2)|0;
   $54 = $piSrcPixel;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56 << 16 >> 16;
   $58 = (+($57|0));
   $59 = $58 * 1.220703125E-4;
   $60 = (_Convert_Float_To_U8($59)|0);
   $61 = $x;
   $62 = ($61*3)|0;
   $63 = (($62) + 2)|0;
   $64 = $pfltDstPixel;
   $65 = (($64) + ($63)|0);
   HEAP8[$65>>0] = $60;
   $66 = $x;
   $67 = (($66) + 1)|0;
   $x = $67;
  }
  $68 = $y;
  $69 = (($68) + 1)|0;
  $y = $69;
 }
 STACKTOP = sp;return 0;
}
function _RGB64Fixed_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 1.220703125E-4;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = (+($28|0));
   $30 = $29 * 1.220703125E-4;
   $31 = (_Convert_Float_To_U8($30)|0);
   $32 = $x;
   $33 = ($32*3)|0;
   $34 = $pfltDstPixel;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = $31;
   $36 = $x;
   $37 = $36<<2;
   $38 = (($37) + 1)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41 << 16 >> 16;
   $43 = (+($42|0));
   $44 = $43 * 1.220703125E-4;
   $45 = (_Convert_Float_To_U8($44)|0);
   $46 = $x;
   $47 = ($46*3)|0;
   $48 = (($47) + 1)|0;
   $49 = $pfltDstPixel;
   $50 = (($49) + ($48)|0);
   HEAP8[$50>>0] = $45;
   $51 = $x;
   $52 = $51<<2;
   $53 = (($52) + 2)|0;
   $54 = $piSrcPixel;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56 << 16 >> 16;
   $58 = (+($57|0));
   $59 = $58 * 1.220703125E-4;
   $60 = (_Convert_Float_To_U8($59)|0);
   $61 = $x;
   $62 = ($61*3)|0;
   $63 = (($62) + 2)|0;
   $64 = $pfltDstPixel;
   $65 = (($64) + ($63)|0);
   HEAP8[$65>>0] = $60;
   $66 = $x;
   $67 = (($66) + 1)|0;
   $x = $67;
  }
  $68 = $y;
  $69 = (($68) + 1)|0;
  $y = $69;
 }
 STACKTOP = sp;return 0;
}
function _RGB96Fixed_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 5.9604644775390625E-8;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($27|0));
   $29 = $28 * 5.9604644775390625E-8;
   $30 = (_Convert_Float_To_U8($29)|0);
   $31 = $x;
   $32 = ($31*3)|0;
   $33 = $pfltDstPixel;
   $34 = (($33) + ($32)|0);
   HEAP8[$34>>0] = $30;
   $35 = $x;
   $36 = ($35*3)|0;
   $37 = (($36) + 1)|0;
   $38 = $piSrcPixel;
   $39 = (($38) + ($37<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (+($40|0));
   $42 = $41 * 5.9604644775390625E-8;
   $43 = (_Convert_Float_To_U8($42)|0);
   $44 = $x;
   $45 = ($44*3)|0;
   $46 = (($45) + 1)|0;
   $47 = $pfltDstPixel;
   $48 = (($47) + ($46)|0);
   HEAP8[$48>>0] = $43;
   $49 = $x;
   $50 = ($49*3)|0;
   $51 = (($50) + 2)|0;
   $52 = $piSrcPixel;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (+($54|0));
   $56 = $55 * 5.9604644775390625E-8;
   $57 = (_Convert_Float_To_U8($56)|0);
   $58 = $x;
   $59 = ($58*3)|0;
   $60 = (($59) + 2)|0;
   $61 = $pfltDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $x;
   $64 = (($63) + 1)|0;
   $x = $64;
  }
  $65 = $y;
  $66 = (($65) + 1)|0;
  $y = $66;
 }
 STACKTOP = sp;return 0;
}
function _RGB128Fixed_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 5.9604644775390625E-8;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($27|0));
   $29 = $28 * 5.9604644775390625E-8;
   $30 = (_Convert_Float_To_U8($29)|0);
   $31 = $x;
   $32 = ($31*3)|0;
   $33 = $pfltDstPixel;
   $34 = (($33) + ($32)|0);
   HEAP8[$34>>0] = $30;
   $35 = $x;
   $36 = $35<<2;
   $37 = (($36) + 1)|0;
   $38 = $piSrcPixel;
   $39 = (($38) + ($37<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (+($40|0));
   $42 = $41 * 5.9604644775390625E-8;
   $43 = (_Convert_Float_To_U8($42)|0);
   $44 = $x;
   $45 = ($44*3)|0;
   $46 = (($45) + 1)|0;
   $47 = $pfltDstPixel;
   $48 = (($47) + ($46)|0);
   HEAP8[$48>>0] = $43;
   $49 = $x;
   $50 = $49<<2;
   $51 = (($50) + 2)|0;
   $52 = $piSrcPixel;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (+($54|0));
   $56 = $55 * 5.9604644775390625E-8;
   $57 = (_Convert_Float_To_U8($56)|0);
   $58 = $x;
   $59 = ($58*3)|0;
   $60 = (($59) + 2)|0;
   $61 = $pfltDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $x;
   $64 = (($63) + 1)|0;
   $x = $64;
  }
  $65 = $y;
  $66 = (($65) + 1)|0;
  $y = $66;
 }
 STACKTOP = sp;return 0;
}
function _RGBA64Fixed_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 1.220703125E-4;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = (+($28|0));
   $30 = $29 * 1.220703125E-4;
   $31 = (_Convert_Float_To_U8($30)|0);
   $32 = $x;
   $33 = $32<<2;
   $34 = $pfltDstPixel;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = $31;
   $36 = $x;
   $37 = $36<<2;
   $38 = (($37) + 1)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41 << 16 >> 16;
   $43 = (+($42|0));
   $44 = $43 * 1.220703125E-4;
   $45 = (_Convert_Float_To_U8($44)|0);
   $46 = $x;
   $47 = $46<<2;
   $48 = (($47) + 1)|0;
   $49 = $pfltDstPixel;
   $50 = (($49) + ($48)|0);
   HEAP8[$50>>0] = $45;
   $51 = $x;
   $52 = $51<<2;
   $53 = (($52) + 2)|0;
   $54 = $piSrcPixel;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56 << 16 >> 16;
   $58 = (+($57|0));
   $59 = $58 * 1.220703125E-4;
   $60 = (_Convert_Float_To_U8($59)|0);
   $61 = $x;
   $62 = $61<<2;
   $63 = (($62) + 2)|0;
   $64 = $pfltDstPixel;
   $65 = (($64) + ($63)|0);
   HEAP8[$65>>0] = $60;
   $66 = $x;
   $67 = $66<<2;
   $68 = (($67) + 3)|0;
   $69 = $piSrcPixel;
   $70 = (($69) + ($68<<1)|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71 << 16 >> 16;
   $73 = (+($72|0));
   $74 = $73 * 1.220703125E-4;
   $75 = (_Convert_AlphaFloat_To_U8($74)|0);
   $76 = $x;
   $77 = $76<<2;
   $78 = (($77) + 3)|0;
   $79 = $pfltDstPixel;
   $80 = (($79) + ($78)|0);
   HEAP8[$80>>0] = $75;
   $81 = $x;
   $82 = (($81) + 1)|0;
   $x = $82;
  }
  $83 = $y;
  $84 = (($83) + 1)|0;
  $y = $84;
 }
 STACKTOP = sp;return 0;
}
function _RGBA64Fixed_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0;
 var $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 1.220703125E-4;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = (+($28|0));
   $30 = $29 * 1.220703125E-4;
   $31 = (_Convert_Float_To_U8($30)|0);
   $32 = $x;
   $33 = $32<<2;
   $34 = $pfltDstPixel;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = $31;
   $36 = $x;
   $37 = $36<<2;
   $38 = (($37) + 1)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41 << 16 >> 16;
   $43 = (+($42|0));
   $44 = $43 * 1.220703125E-4;
   $45 = (_Convert_Float_To_U8($44)|0);
   $46 = $x;
   $47 = $46<<2;
   $48 = (($47) + 1)|0;
   $49 = $pfltDstPixel;
   $50 = (($49) + ($48)|0);
   HEAP8[$50>>0] = $45;
   $51 = $x;
   $52 = $51<<2;
   $53 = (($52) + 2)|0;
   $54 = $piSrcPixel;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56 << 16 >> 16;
   $58 = (+($57|0));
   $59 = $58 * 1.220703125E-4;
   $60 = (_Convert_Float_To_U8($59)|0);
   $61 = $x;
   $62 = $61<<2;
   $63 = (($62) + 2)|0;
   $64 = $pfltDstPixel;
   $65 = (($64) + ($63)|0);
   HEAP8[$65>>0] = $60;
   $66 = $x;
   $67 = $66<<2;
   $68 = (($67) + 3)|0;
   $69 = $pfltDstPixel;
   $70 = (($69) + ($68)|0);
   HEAP8[$70>>0] = 0;
   $71 = $x;
   $72 = (($71) + 1)|0;
   $x = $72;
  }
  $73 = $y;
  $74 = (($73) + 1)|0;
  $y = $74;
 }
 STACKTOP = sp;return 0;
}
function _RGBA128Fixed_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 5.9604644775390625E-8;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($27|0));
   $29 = $28 * 5.9604644775390625E-8;
   $30 = (_Convert_Float_To_U8($29)|0);
   $31 = $x;
   $32 = $31<<2;
   $33 = $pfltDstPixel;
   $34 = (($33) + ($32)|0);
   HEAP8[$34>>0] = $30;
   $35 = $x;
   $36 = $35<<2;
   $37 = (($36) + 1)|0;
   $38 = $piSrcPixel;
   $39 = (($38) + ($37<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (+($40|0));
   $42 = $41 * 5.9604644775390625E-8;
   $43 = (_Convert_Float_To_U8($42)|0);
   $44 = $x;
   $45 = $44<<2;
   $46 = (($45) + 1)|0;
   $47 = $pfltDstPixel;
   $48 = (($47) + ($46)|0);
   HEAP8[$48>>0] = $43;
   $49 = $x;
   $50 = $49<<2;
   $51 = (($50) + 2)|0;
   $52 = $piSrcPixel;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (+($54|0));
   $56 = $55 * 5.9604644775390625E-8;
   $57 = (_Convert_Float_To_U8($56)|0);
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 2)|0;
   $61 = $pfltDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $x;
   $64 = $63<<2;
   $65 = (($64) + 3)|0;
   $66 = $piSrcPixel;
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (+($68|0));
   $70 = $69 * 5.9604644775390625E-8;
   $71 = (_Convert_AlphaFloat_To_U8($70)|0);
   $72 = $x;
   $73 = $72<<2;
   $74 = (($73) + 3)|0;
   $75 = $pfltDstPixel;
   $76 = (($75) + ($74)|0);
   HEAP8[$76>>0] = $71;
   $77 = $x;
   $78 = (($77) + 1)|0;
   $x = $78;
  }
  $79 = $y;
  $80 = (($79) + 1)|0;
  $y = $80;
 }
 STACKTOP = sp;return 0;
}
function _RGBA128Fixed_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $fltCvtFactor = 0.0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $x = 0, $y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $fltCvtFactor = 5.9604644775390625E-8;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($27|0));
   $29 = $28 * 5.9604644775390625E-8;
   $30 = (_Convert_Float_To_U8($29)|0);
   $31 = $x;
   $32 = $31<<2;
   $33 = $pfltDstPixel;
   $34 = (($33) + ($32)|0);
   HEAP8[$34>>0] = $30;
   $35 = $x;
   $36 = $35<<2;
   $37 = (($36) + 1)|0;
   $38 = $piSrcPixel;
   $39 = (($38) + ($37<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (+($40|0));
   $42 = $41 * 5.9604644775390625E-8;
   $43 = (_Convert_Float_To_U8($42)|0);
   $44 = $x;
   $45 = $44<<2;
   $46 = (($45) + 1)|0;
   $47 = $pfltDstPixel;
   $48 = (($47) + ($46)|0);
   HEAP8[$48>>0] = $43;
   $49 = $x;
   $50 = $49<<2;
   $51 = (($50) + 2)|0;
   $52 = $piSrcPixel;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (+($54|0));
   $56 = $55 * 5.9604644775390625E-8;
   $57 = (_Convert_Float_To_U8($56)|0);
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 2)|0;
   $61 = $pfltDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $x;
   $64 = $63<<2;
   $65 = (($64) + 3)|0;
   $66 = $pfltDstPixel;
   $67 = (($66) + ($65)|0);
   HEAP8[$67>>0] = 0;
   $68 = $x;
   $69 = (($68) + 1)|0;
   $x = $69;
  }
  $70 = $y;
  $71 = (($70) + 1)|0;
  $y = $71;
 }
 STACKTOP = sp;return 0;
}
function _Gray16Half_Gray8($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0;
 var $piSrcPixel = 0, $v = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 16|0;
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $piSrcPixel;
   $25 = (($24) + ($23<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = (_Convert_Half_To_Float($26)|0);
   HEAP32[$v>>2] = $27;
   $28 = +HEAPF32[$v>>2];
   $29 = (_Convert_Float_To_U8($28)|0);
   $30 = $x;
   $31 = $piDstPixel;
   $32 = (($31) + ($30)|0);
   HEAP8[$32>>0] = $29;
   $33 = $x;
   $34 = (($33) + 1)|0;
   $x = $34;
  }
  $35 = $y;
  $36 = (($35) + 1)|0;
  $y = $36;
 }
 STACKTOP = sp;return 0;
}
function _RGB48Half_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 4|0;
 $g = sp;
 $b = sp + 20|0;
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = ($23*3)|0;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = (_Convert_Half_To_Float($27)|0);
   HEAP32[$r>>2] = $28;
   $29 = $x;
   $30 = ($29*3)|0;
   $31 = (($30) + 1)|0;
   $32 = $piSrcPixel;
   $33 = (($32) + ($31<<1)|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = (_Convert_Half_To_Float($34)|0);
   HEAP32[$g>>2] = $35;
   $36 = $x;
   $37 = ($36*3)|0;
   $38 = (($37) + 2)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = (_Convert_Half_To_Float($41)|0);
   HEAP32[$b>>2] = $42;
   $43 = +HEAPF32[$r>>2];
   $44 = (_Convert_Float_To_U8($43)|0);
   $45 = $x;
   $46 = ($45*3)|0;
   $47 = $pfltDstPixel;
   $48 = (($47) + ($46)|0);
   HEAP8[$48>>0] = $44;
   $49 = +HEAPF32[$g>>2];
   $50 = (_Convert_Float_To_U8($49)|0);
   $51 = $x;
   $52 = ($51*3)|0;
   $53 = (($52) + 1)|0;
   $54 = $pfltDstPixel;
   $55 = (($54) + ($53)|0);
   HEAP8[$55>>0] = $50;
   $56 = +HEAPF32[$b>>2];
   $57 = (_Convert_Float_To_U8($56)|0);
   $58 = $x;
   $59 = ($58*3)|0;
   $60 = (($59) + 2)|0;
   $61 = $pfltDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $x;
   $64 = (($63) + 1)|0;
   $x = $64;
  }
  $65 = $y;
  $66 = (($65) + 1)|0;
  $y = $66;
 }
 STACKTOP = sp;return 0;
}
function _RGB64Half_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 4|0;
 $g = sp;
 $b = sp + 20|0;
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = (_Convert_Half_To_Float($27)|0);
   HEAP32[$r>>2] = $28;
   $29 = $x;
   $30 = $29<<2;
   $31 = (($30) + 1)|0;
   $32 = $piSrcPixel;
   $33 = (($32) + ($31<<1)|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = (_Convert_Half_To_Float($34)|0);
   HEAP32[$g>>2] = $35;
   $36 = $x;
   $37 = $36<<2;
   $38 = (($37) + 2)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = (_Convert_Half_To_Float($41)|0);
   HEAP32[$b>>2] = $42;
   $43 = +HEAPF32[$r>>2];
   $44 = (_Convert_Float_To_U8($43)|0);
   $45 = $x;
   $46 = ($45*3)|0;
   $47 = $pfltDstPixel;
   $48 = (($47) + ($46)|0);
   HEAP8[$48>>0] = $44;
   $49 = +HEAPF32[$g>>2];
   $50 = (_Convert_Float_To_U8($49)|0);
   $51 = $x;
   $52 = ($51*3)|0;
   $53 = (($52) + 1)|0;
   $54 = $pfltDstPixel;
   $55 = (($54) + ($53)|0);
   HEAP8[$55>>0] = $50;
   $56 = +HEAPF32[$b>>2];
   $57 = (_Convert_Float_To_U8($56)|0);
   $58 = $x;
   $59 = ($58*3)|0;
   $60 = (($59) + 2)|0;
   $61 = $pfltDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $x;
   $64 = (($63) + 1)|0;
   $x = $64;
  }
  $65 = $y;
  $66 = (($65) + 1)|0;
  $y = $66;
 }
 STACKTOP = sp;return 0;
}
function _RGBA64Half_RGBA32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $a = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 8|0;
 $g = sp + 4|0;
 $b = sp;
 $a = sp + 20|0;
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = (_Convert_Half_To_Float($27)|0);
   HEAP32[$r>>2] = $28;
   $29 = $x;
   $30 = $29<<2;
   $31 = (($30) + 1)|0;
   $32 = $piSrcPixel;
   $33 = (($32) + ($31<<1)|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = (_Convert_Half_To_Float($34)|0);
   HEAP32[$g>>2] = $35;
   $36 = $x;
   $37 = $36<<2;
   $38 = (($37) + 2)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = (_Convert_Half_To_Float($41)|0);
   HEAP32[$b>>2] = $42;
   $43 = $x;
   $44 = $43<<2;
   $45 = (($44) + 3)|0;
   $46 = $piSrcPixel;
   $47 = (($46) + ($45<<1)|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = (_Convert_Half_To_Float($48)|0);
   HEAP32[$a>>2] = $49;
   $50 = +HEAPF32[$r>>2];
   $51 = (_Convert_Float_To_U8($50)|0);
   $52 = $x;
   $53 = $52<<2;
   $54 = $pfltDstPixel;
   $55 = (($54) + ($53)|0);
   HEAP8[$55>>0] = $51;
   $56 = +HEAPF32[$g>>2];
   $57 = (_Convert_Float_To_U8($56)|0);
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 1)|0;
   $61 = $pfltDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = +HEAPF32[$b>>2];
   $64 = (_Convert_Float_To_U8($63)|0);
   $65 = $x;
   $66 = $65<<2;
   $67 = (($66) + 2)|0;
   $68 = $pfltDstPixel;
   $69 = (($68) + ($67)|0);
   HEAP8[$69>>0] = $64;
   $70 = +HEAPF32[$a>>2];
   $71 = (_Convert_AlphaFloat_To_U8($70)|0);
   $72 = $x;
   $73 = $72<<2;
   $74 = (($73) + 3)|0;
   $75 = $pfltDstPixel;
   $76 = (($75) + ($74)|0);
   HEAP8[$76>>0] = $71;
   $77 = $x;
   $78 = (($77) + 1)|0;
   $x = $78;
  }
  $79 = $y;
  $80 = (($79) + 1)|0;
  $y = $80;
 }
 STACKTOP = sp;return 0;
}
function _RGBA64Half_RGB32($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $pfltDstPixel = 0, $piSrcPixel = 0, $r = 0, $x = 0;
 var $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 4|0;
 $g = sp;
 $b = sp + 20|0;
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $pfltDstPixel = $18;
  $19 = $pfltDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $23<<2;
   $25 = $piSrcPixel;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = (_Convert_Half_To_Float($27)|0);
   HEAP32[$r>>2] = $28;
   $29 = $x;
   $30 = $29<<2;
   $31 = (($30) + 1)|0;
   $32 = $piSrcPixel;
   $33 = (($32) + ($31<<1)|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = (_Convert_Half_To_Float($34)|0);
   HEAP32[$g>>2] = $35;
   $36 = $x;
   $37 = $36<<2;
   $38 = (($37) + 2)|0;
   $39 = $piSrcPixel;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = (_Convert_Half_To_Float($41)|0);
   HEAP32[$b>>2] = $42;
   $43 = +HEAPF32[$r>>2];
   $44 = (_Convert_Float_To_U8($43)|0);
   $45 = $x;
   $46 = $45<<2;
   $47 = $pfltDstPixel;
   $48 = (($47) + ($46)|0);
   HEAP8[$48>>0] = $44;
   $49 = +HEAPF32[$g>>2];
   $50 = (_Convert_Float_To_U8($49)|0);
   $51 = $x;
   $52 = $51<<2;
   $53 = (($52) + 1)|0;
   $54 = $pfltDstPixel;
   $55 = (($54) + ($53)|0);
   HEAP8[$55>>0] = $50;
   $56 = +HEAPF32[$b>>2];
   $57 = (_Convert_Float_To_U8($56)|0);
   $58 = $x;
   $59 = $58<<2;
   $60 = (($59) + 2)|0;
   $61 = $pfltDstPixel;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $x;
   $64 = $63<<2;
   $65 = (($64) + 3)|0;
   $66 = $pfltDstPixel;
   $67 = (($66) + ($65)|0);
   HEAP8[$67>>0] = 0;
   $68 = $x;
   $69 = (($68) + 1)|0;
   $x = $69;
  }
  $70 = $y;
  $71 = (($70) + 1)|0;
  $y = $71;
 }
 STACKTOP = sp;return 0;
}
function _RGB101010_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b = 0, $g = 0, $iHeight = 0, $iWidth = 0, $piDstPixel = 0, $piSrcPixel = 0, $r = 0, $v = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $iHeight = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $iWidth = $9;
 $10 = $0;
 $0 = $10;
 $y = 0;
 while(1) {
  $11 = $y;
  $12 = $iHeight;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = $y;
  $17 = Math_imul($15, $16)|0;
  $18 = (($14) + ($17)|0);
  $piDstPixel = $18;
  $19 = $piDstPixel;
  $piSrcPixel = $19;
  $x = 0;
  while(1) {
   $20 = $x;
   $21 = $iWidth;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $x;
   $24 = $piSrcPixel;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $v = $26;
   $27 = $v;
   $28 = $27 >>> 20;
   $29 = $28 & 1023;
   $r = $29;
   $30 = $v;
   $31 = $30 >>> 10;
   $32 = $31 & 1023;
   $g = $32;
   $33 = $v;
   $34 = $33 & 1023;
   $b = $34;
   $35 = $r;
   $36 = $35 >>> 2;
   $37 = $36&255;
   $38 = $x;
   $39 = ($38*3)|0;
   $40 = $piDstPixel;
   $41 = (($40) + ($39)|0);
   HEAP8[$41>>0] = $37;
   $42 = $g;
   $43 = $42 >>> 2;
   $44 = $43&255;
   $45 = $x;
   $46 = ($45*3)|0;
   $47 = (($46) + 1)|0;
   $48 = $piDstPixel;
   $49 = (($48) + ($47)|0);
   HEAP8[$49>>0] = $44;
   $50 = $b;
   $51 = $50 >>> 2;
   $52 = $51&255;
   $53 = $x;
   $54 = ($53*3)|0;
   $55 = (($54) + 2)|0;
   $56 = $piDstPixel;
   $57 = (($56) + ($55)|0);
   HEAP8[$57>>0] = $52;
   $58 = $x;
   $59 = (($58) + 1)|0;
   $x = $59;
  }
  $60 = $y;
  $61 = (($60) + 1)|0;
  $y = $61;
 }
 STACKTOP = sp;return 0;
}
function _RGBE_RGB24($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0;
 var $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $adjExp = 0, $fltExp = 0.0, $i = 0, $j = 0, $rawExp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $i = 0;
 $j = 0;
 $4 = $0;
 $0 = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $j = 0;
  while(1) {
   $10 = $j;
   $11 = $1;
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($10|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $j;
   $16 = $15<<2;
   $17 = (($16) + 3)|0;
   $18 = $2;
   $19 = (($18) + ($17)|0);
   $20 = HEAP8[$19>>0]|0;
   $rawExp = $20;
   $21 = $rawExp;
   $22 = $21&255;
   $23 = (0)==($22|0);
   if ($23) {
    $24 = $j;
    $25 = ($24*3)|0;
    $26 = $2;
    $27 = (($26) + ($25)|0);
    HEAP8[$27>>0] = 0;
    $28 = $j;
    $29 = ($28*3)|0;
    $30 = (($29) + 1)|0;
    $31 = $2;
    $32 = (($31) + ($30)|0);
    HEAP8[$32>>0] = 0;
    $33 = $j;
    $34 = ($33*3)|0;
    $35 = (($34) + 2)|0;
    $36 = $2;
    $37 = (($36) + ($35)|0);
    HEAP8[$37>>0] = 0;
   } else {
    $38 = $rawExp;
    $39 = $38&255;
    $40 = (($39) - 128)|0;
    $41 = (($40) - 8)|0;
    $adjExp = $41;
    $42 = $adjExp;
    $43 = ($42|0)>(-32);
    if ($43) {
     $44 = $adjExp;
     $45 = ($44|0)<(32);
     if ($45) {
      $46 = $adjExp;
      $47 = (Math_abs(($46|0))|0);
      $48 = 1 << $47;
      $49 = (+($48>>>0));
      $fltExp = $49;
      $50 = $adjExp;
      $51 = ($50|0)<(0);
      if ($51) {
       $52 = $fltExp;
       $53 = 1.0 / $52;
       $fltExp = $53;
      }
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
    if ((label|0) == 12) {
     label = 0;
     $54 = $adjExp;
     $55 = (+_ldexp(1.0,$54));
     $56 = $55;
     $fltExp = $56;
    }
    $57 = $j;
    $58 = $57<<2;
    $59 = $2;
    $60 = (($59) + ($58)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = (+($62|0));
    $64 = $fltExp;
    $65 = $63 * $64;
    $66 = (_Convert_Float_To_U8($65)|0);
    $67 = $j;
    $68 = ($67*3)|0;
    $69 = $2;
    $70 = (($69) + ($68)|0);
    HEAP8[$70>>0] = $66;
    $71 = $j;
    $72 = $71<<2;
    $73 = (($72) + 1)|0;
    $74 = $2;
    $75 = (($74) + ($73)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = (+($77|0));
    $79 = $fltExp;
    $80 = $78 * $79;
    $81 = (_Convert_Float_To_U8($80)|0);
    $82 = $j;
    $83 = ($82*3)|0;
    $84 = (($83) + 1)|0;
    $85 = $2;
    $86 = (($85) + ($84)|0);
    HEAP8[$86>>0] = $81;
    $87 = $j;
    $88 = $87<<2;
    $89 = (($88) + 2)|0;
    $90 = $2;
    $91 = (($90) + ($89)|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = (+($93|0));
    $95 = $fltExp;
    $96 = $94 * $95;
    $97 = (_Convert_Float_To_U8($96)|0);
    $98 = $j;
    $99 = ($98*3)|0;
    $100 = (($99) + 2)|0;
    $101 = $2;
    $102 = (($101) + ($100)|0);
    HEAP8[$102>>0] = $97;
   }
   $103 = $j;
   $104 = (($103) + 1)|0;
   $j = $104;
  }
  $105 = $3;
  $106 = $2;
  $107 = (($106) + ($105)|0);
  $2 = $107;
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 STACKTOP = sp;return 0;
}
function _PKFormatConverter_Initialize($pFC,$pID,$pExt,$enPF) {
 $pFC = $pFC|0;
 $pID = $pID|0;
 $pExt = $pExt|0;
 $enPF = $enPF|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $enPF$byval_copy = 0, $enPFFrom = 0, $enPFFrom$byval_copy = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $enPF$byval_copy = sp + 48|0;
 $enPFFrom$byval_copy = sp;
 $enPFFrom = sp + 32|0;
 $0 = $pFC;
 $1 = $pID;
 $2 = $pExt;
 $3 = $1;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (FUNCTION_TABLE_iii[$5 & 255]($6,$enPFFrom)|0);
 $err = $7;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $err;
  $err = $9;
  $20 = $err;
  STACKTOP = sp;return ($20|0);
 }
 $10 = $err;
 $err = $10;
 $11 = $0;
 $12 = $2;
 ;HEAP32[$enPFFrom$byval_copy+0>>2]=HEAP32[$enPFFrom+0>>2]|0;HEAP32[$enPFFrom$byval_copy+4>>2]=HEAP32[$enPFFrom+4>>2]|0;HEAP32[$enPFFrom$byval_copy+8>>2]=HEAP32[$enPFFrom+8>>2]|0;HEAP32[$enPFFrom$byval_copy+12>>2]=HEAP32[$enPFFrom+12>>2]|0;
 ;HEAP32[$enPF$byval_copy+0>>2]=HEAP32[$enPF+0>>2]|0;HEAP32[$enPF$byval_copy+4>>2]=HEAP32[$enPF+4>>2]|0;HEAP32[$enPF$byval_copy+8>>2]=HEAP32[$enPF+8>>2]|0;HEAP32[$enPF$byval_copy+12>>2]=HEAP32[$enPF+12>>2]|0;
 $13 = (_PKFormatConverter_InitializeConvert($11,$enPFFrom$byval_copy,$12,$enPF$byval_copy)|0);
 $err = $13;
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = $err;
  $err = $15;
  $20 = $err;
  STACKTOP = sp;return ($20|0);
 }
 $16 = $err;
 $err = $16;
 $17 = $1;
 $18 = $0;
 $19 = (($18) + 36|0);
 HEAP32[$19>>2] = $17;
 $20 = $err;
 STACKTOP = sp;return ($20|0);
}
function _PKFormatConverter_InitializeConvert($pFC,$enPFFrom,$pExt,$enPFTo) {
 $pFC = $pFC|0;
 $enPFFrom = $enPFFrom|0;
 $pExt = $pExt|0;
 $enPFTo = $enPFTo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, $pPCI = 0, $pPCI1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pExt;
 $err = 0;
 $2 = $0;
 $3 = (($2) + 28|0);
 HEAP32[$3>>2] = 148;
 $4 = $0;
 $5 = (($4) + 40|0);
 ;HEAP32[$5+0>>2]=HEAP32[$enPFTo+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$enPFTo+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$enPFTo+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$enPFTo+12>>2]|0;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = (_memcmp($enPFTo,15528,16)|0);
  $9 = ($8|0)!=(0);
  if (!($9)) {
   $10 = $1;
   $11 = $1;
   $12 = (_strlen(($11|0))|0);
   $13 = (_PKStrnicmp($10,19920,$12)|0);
   $14 = (0)==($13|0);
   if ($14) {
    ;HEAP32[$enPFTo+0>>2]=HEAP32[15512+0>>2]|0;HEAP32[$enPFTo+4>>2]=HEAP32[15512+4>>2]|0;HEAP32[$enPFTo+8>>2]=HEAP32[15512+8>>2]|0;HEAP32[$enPFTo+12>>2]=HEAP32[15512+12>>2]|0;
   }
  }
 }
 $15 = $1;
 $16 = ($15|0)!=(0|0);
 do {
  if ($16) {
   $17 = $1;
   $18 = $1;
   $19 = (_strlen(($18|0))|0);
   $20 = (_PKStrnicmp($17,19928,$19)|0);
   $21 = (0)==($20|0);
   if (!($21)) {
    $22 = $1;
    $23 = $1;
    $24 = (_strlen(($23|0))|0);
    $25 = (_PKStrnicmp($22,19936,$24)|0);
    $26 = (0)==($25|0);
    if (!($26)) {
     break;
    }
   }
   $27 = (_memcmp($enPFTo,15560,16)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    ;HEAP32[$enPFTo+0>>2]=HEAP32[15624+0>>2]|0;HEAP32[$enPFTo+4>>2]=HEAP32[15624+4>>2]|0;HEAP32[$enPFTo+8>>2]=HEAP32[15624+8>>2]|0;HEAP32[$enPFTo+12>>2]=HEAP32[15624+12>>2]|0;
   }
   $29 = (_memcmp($enPFTo,15576,16)|0);
   $30 = ($29|0)!=(0);
   if (!($30)) {
    ;HEAP32[$enPFTo+0>>2]=HEAP32[15640+0>>2]|0;HEAP32[$enPFTo+4>>2]=HEAP32[15640+4>>2]|0;HEAP32[$enPFTo+8>>2]=HEAP32[15640+8>>2]|0;HEAP32[$enPFTo+12>>2]=HEAP32[15640+12>>2]|0;
   }
  }
 } while(0);
 $31 = (_memcmp($enPFFrom,$enPFTo,16)|0);
 $32 = ($31|0)!=(0);
 do {
  if ($32) {
   $i = 0;
   $i = 0;
   while(1) {
    $33 = $i;
    $34 = ($33>>>0)<(90);
    if (!($34)) {
     break;
    }
    $35 = $i;
    $36 = (19944 + (($35*12)|0)|0);
    $pPCI = $36;
    $37 = $pPCI;
    $38 = HEAP32[$37>>2]|0;
    $39 = (_memcmp($enPFFrom,$38,16)|0);
    $40 = ($39|0)!=(0);
    if (!($40)) {
     $41 = $pPCI;
     $42 = (($41) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (_memcmp($enPFTo,$43,16)|0);
     $45 = ($44|0)!=(0);
     if (!($45)) {
      label = 18;
      break;
     }
    }
    $51 = $i;
    $52 = (($51) + 1)|0;
    $i = $52;
   }
   if ((label|0) == 18) {
    $46 = $pPCI;
    $47 = (($46) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $0;
    $50 = (($49) + 28|0);
    HEAP32[$50>>2] = $48;
    $70 = $err;
    STACKTOP = sp;return ($70|0);
   }
   $i = 0;
   while(1) {
    $53 = $i;
    $54 = ($53>>>0)<(6);
    if (!($54)) {
     break;
    }
    $55 = $i;
    $56 = (21024 + ($55<<3)|0);
    $pPCI1 = $56;
    $57 = $pPCI1;
    $58 = HEAP32[$57>>2]|0;
    $59 = (_memcmp($enPFFrom,$58,16)|0);
    $60 = ($59|0)!=(0);
    if (!($60)) {
     $61 = $pPCI1;
     $62 = (($61) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (_memcmp($enPFTo,$63,16)|0);
     $65 = ($64|0)!=(0);
     if (!($65)) {
      label = 25;
      break;
     }
    }
    $66 = $i;
    $67 = (($66) + 1)|0;
    $i = $67;
   }
   if ((label|0) == 25) {
    $70 = $err;
    STACKTOP = sp;return ($70|0);
   }
   $err = -106;
   if (1) {
    $68 = $err;
    $err = $68;
    $70 = $err;
    STACKTOP = sp;return ($70|0);
   } else {
    $69 = $err;
    $err = $69;
    break;
   }
  }
 } while(0);
 $70 = $err;
 STACKTOP = sp;return ($70|0);
}
function _PKFormatConverter_Convert($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $0;
 $0 = $4;
 $5 = $1;
 $1 = $5;
 $6 = $2;
 $2 = $6;
 $7 = $3;
 $3 = $7;
 STACKTOP = sp;return 0;
}
function _PKFormatConverter_GetPixelFormat($pFC,$pPF) {
 $pFC = $pFC|0;
 $pPF = $pPF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pPF;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 40|0);
 ;HEAP32[$2+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return 0;
}
function _PKFormatConverter_GetSourcePixelFormat($pFC,$pPF) {
 $pFC = $pFC|0;
 $pPF = $pPF|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pPF;
 $2 = $0;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = (($7) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (FUNCTION_TABLE_iii[$6 & 255]($9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _PKFormatConverter_GetSize($pFC,$piWidth,$piHeight) {
 $pFC = $pFC|0;
 $piWidth = $piWidth|0;
 $piHeight = $piHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $piWidth;
 $2 = $piHeight;
 $3 = $0;
 $4 = (($3) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = $2;
 $13 = (FUNCTION_TABLE_iiii[$7 & 255]($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _PKFormatConverter_GetResolution($pFC,$pfrX,$pfrY) {
 $pFC = $pFC|0;
 $pfrX = $pfrX|0;
 $pfrY = $pfrY|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pfrX;
 $2 = $pfrY;
 $3 = $0;
 $4 = (($3) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = $2;
 $13 = (FUNCTION_TABLE_iiii[$7 & 255]($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _PKFormatConverter_Copy($pFC,$pRect,$pb,$cbStride) {
 $pFC = $pFC|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFC;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (($9) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = (FUNCTION_TABLE_iiiii[$8 & 255]($11,$12,$13,$14)|0);
 $err = $15;
 $16 = ($15|0)<(0);
 if ($16) {
  $17 = $err;
  $err = $17;
  $30 = $err;
  STACKTOP = sp;return ($30|0);
 }
 $18 = $err;
 $err = $18;
 $19 = $0;
 $20 = (($19) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = $1;
 $24 = $2;
 $25 = $3;
 $26 = (FUNCTION_TABLE_iiiii[$21 & 255]($22,$23,$24,$25)|0);
 $err = $26;
 $27 = ($26|0)<(0);
 if ($27) {
  $28 = $err;
  $err = $28;
  $30 = $err;
  STACKTOP = sp;return ($30|0);
 }
 $29 = $err;
 $err = $29;
 $30 = $err;
 STACKTOP = sp;return ($30|0);
}
function _PKFormatConverter_Release($ppFC) {
 $ppFC = $ppFC|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppFC;
 $err = 0;
 $1 = $0;
 $2 = (_PKFree($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
 } else {
  $5 = $err;
  $err = $5;
 }
 $6 = $err;
 STACKTOP = sp;return ($6|0);
}
function _PKCodecFactory_CreateFormatConverter($ppFConverter) {
 $ppFConverter = $ppFConverter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pFC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppFConverter;
 $err = 0;
 $pFC = 0;
 $1 = $0;
 $2 = (_PKAlloc($1,56)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $25 = $err;
  STACKTOP = sp;return ($25|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pFC = $7;
 $8 = $pFC;
 HEAP32[$8>>2] = 149;
 $9 = $pFC;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 150;
 $11 = $pFC;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 151;
 $13 = $pFC;
 $14 = (($13) + 12|0);
 HEAP32[$14>>2] = 152;
 $15 = $pFC;
 $16 = (($15) + 16|0);
 HEAP32[$16>>2] = 153;
 $17 = $pFC;
 $18 = (($17) + 20|0);
 HEAP32[$18>>2] = 154;
 $19 = $pFC;
 $20 = (($19) + 24|0);
 HEAP32[$20>>2] = 155;
 $21 = $pFC;
 $22 = (($21) + 28|0);
 HEAP32[$22>>2] = 148;
 $23 = $pFC;
 $24 = (($23) + 32|0);
 HEAP32[$24>>2] = 156;
 $25 = $err;
 STACKTOP = sp;return ($25|0);
}
function _ReadContainer($pID) {
 $pID = $pID|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bVersion = 0, $cPFDEntry = 0, $err = 0, $offPFD = 0, $offPos = 0, $pWS = 0, $szSig = 0, $uWmpID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offPos = sp + 8|0;
 $szSig = sp + 26|0;
 $uWmpID = sp + 20|0;
 $offPFD = sp + 12|0;
 $cPFDEntry = sp + 22|0;
 $0 = $pID;
 $err = 0;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $pWS = $3;
 HEAP32[$offPos>>2] = 0;
 ;HEAP8[$szSig+0>>0]=0|0;HEAP8[$szSig+1>>0]=0|0;
 HEAP16[$uWmpID>>1] = 0;
 HEAP32[$offPFD>>2] = 0;
 HEAP16[$cPFDEntry>>1] = 0;
 $4 = $pWS;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $pWS;
 $8 = (FUNCTION_TABLE_iii[$6 & 255]($7,$offPos)|0);
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $11 = $err;
 $err = $11;
 $12 = HEAP32[$offPos>>2]|0;
 $13 = (0)!=($12|0);
 $14 = $13 ? -106 : 0;
 $err = $14;
 $15 = ($14|0)<(0);
 if ($15) {
  $16 = $err;
  $err = $16;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $17 = $err;
 $err = $17;
 $18 = $pWS;
 $19 = (($18) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $pWS;
 $22 = (FUNCTION_TABLE_iiii[$20 & 255]($21,$szSig,2)|0);
 $err = $22;
 $23 = ($22|0)<(0);
 if ($23) {
  $24 = $err;
  $err = $24;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $25 = $err;
 $err = $25;
 $26 = HEAP32[$offPos>>2]|0;
 $27 = (($26) + 2)|0;
 HEAP32[$offPos>>2] = $27;
 $28 = (_strstr($szSig,21072)|0);
 $29 = ($szSig|0)!=($28|0);
 $30 = $29 ? -106 : 0;
 $err = $30;
 $31 = ($30|0)<(0);
 if ($31) {
  $32 = $err;
  $err = $32;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $33 = $err;
 $err = $33;
 $34 = $pWS;
 $35 = HEAP32[$offPos>>2]|0;
 $36 = (_GetUShort($34,$35,$uWmpID)|0);
 $err = $36;
 $37 = ($36|0)<(0);
 if ($37) {
  $38 = $err;
  $err = $38;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $39 = $err;
 $err = $39;
 $40 = HEAP32[$offPos>>2]|0;
 $41 = (($40) + 2)|0;
 HEAP32[$offPos>>2] = $41;
 $42 = HEAP16[$uWmpID>>1]|0;
 $43 = $42&65535;
 $44 = 255 & $43;
 $45 = (188)!=($44|0);
 $46 = $45 ? -106 : 0;
 $err = $46;
 $47 = ($46|0)<(0);
 if ($47) {
  $48 = $err;
  $err = $48;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $49 = $err;
 $err = $49;
 $50 = HEAP16[$uWmpID>>1]|0;
 $51 = $50&65535;
 $52 = 65280 & $51;
 $53 = $52 >> 8;
 $54 = $53&255;
 $bVersion = $54;
 $55 = $bVersion;
 $56 = $55&255;
 $57 = ($56|0)!=(0);
 if ($57) {
  $58 = $bVersion;
  $59 = $58&255;
  $60 = ($59|0)!=(1);
  $62 = $60;
 } else {
  $62 = 0;
 }
 $61 = $62 ? -106 : 0;
 $err = $61;
 $63 = ($61|0)<(0);
 if ($63) {
  $64 = $err;
  $err = $64;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $65 = $err;
 $err = $65;
 $66 = $pWS;
 $67 = HEAP32[$offPos>>2]|0;
 $68 = (_GetULong($66,$67,$offPFD)|0);
 $err = $68;
 $69 = ($68|0)<(0);
 if ($69) {
  $70 = $err;
  $err = $70;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $71 = $err;
 $err = $71;
 $72 = HEAP32[$offPos>>2]|0;
 $73 = (($72) + 4)|0;
 HEAP32[$offPos>>2] = $73;
 $74 = HEAP32[$offPFD>>2]|0;
 HEAP32[$offPos>>2] = $74;
 $75 = $pWS;
 $76 = HEAP32[$offPos>>2]|0;
 $77 = (_GetUShort($75,$76,$cPFDEntry)|0);
 $err = $77;
 $78 = ($77|0)<(0);
 if ($78) {
  $79 = $err;
  $err = $79;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $80 = $err;
 $err = $80;
 $81 = HEAP32[$offPos>>2]|0;
 $82 = (($81) + 2)|0;
 HEAP32[$offPos>>2] = $82;
 $83 = HEAP16[$cPFDEntry>>1]|0;
 $84 = $83&65535;
 $85 = (0)==($84|0);
 if ($85) {
  $90 = 1;
 } else {
  $86 = HEAP16[$cPFDEntry>>1]|0;
  $87 = $86&65535;
  $88 = (65535)==($87|0);
  $90 = $88;
 }
 $89 = $90 ? -106 : 0;
 $err = $89;
 $91 = ($89|0)<(0);
 if ($91) {
  $92 = $err;
  $err = $92;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $93 = $err;
 $err = $93;
 $94 = $0;
 $95 = HEAP32[$offPos>>2]|0;
 $96 = HEAP16[$cPFDEntry>>1]|0;
 $97 = (_ParsePFD($94,$95,$96)|0);
 $err = $97;
 $98 = ($97|0)<(0);
 if ($98) {
  $99 = $err;
  $err = $99;
  $101 = $err;
  STACKTOP = sp;return ($101|0);
 }
 $100 = $err;
 $err = $100;
 $101 = $err;
 STACKTOP = sp;return ($101|0);
}
function _ParsePFD($pID,$offPos,$cEntry) {
 $pID = $pID|0;
 $offPos = $offPos|0;
 $cEntry = $cEntry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, $pWS = 0, $uCount = 0, $uTag = 0;
 var $uType = 0, $uValue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uTag = sp + 26|0;
 $uType = sp + 24|0;
 $uCount = sp;
 $uValue = sp + 16|0;
 $0 = $pID;
 $1 = $offPos;
 $2 = $cEntry;
 $err = 0;
 $3 = $0;
 $4 = (($3) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $pWS = $5;
 $i = 0;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $6&65535;
  $8 = $2;
  $9 = $8&65535;
  $10 = ($7|0)<($9|0);
  if (!($10)) {
   label = 20;
   break;
  }
  HEAP16[$uTag>>1] = 0;
  HEAP16[$uType>>1] = 0;
  HEAP32[$uCount>>2] = 0;
  HEAP32[$uValue>>2] = 0;
  $11 = $pWS;
  $12 = $1;
  $13 = (_GetUShort($11,$12,$uTag)|0);
  $err = $13;
  $14 = ($13|0)<(0);
  if ($14) {
   label = 4;
   break;
  }
  $16 = $err;
  $err = $16;
  $17 = $1;
  $18 = (($17) + 2)|0;
  $1 = $18;
  $19 = $pWS;
  $20 = $1;
  $21 = (_GetUShort($19,$20,$uType)|0);
  $err = $21;
  $22 = ($21|0)<(0);
  if ($22) {
   label = 7;
   break;
  }
  $24 = $err;
  $err = $24;
  $25 = $1;
  $26 = (($25) + 2)|0;
  $1 = $26;
  $27 = $pWS;
  $28 = $1;
  $29 = (_GetULong($27,$28,$uCount)|0);
  $err = $29;
  $30 = ($29|0)<(0);
  if ($30) {
   label = 10;
   break;
  }
  $32 = $err;
  $err = $32;
  $33 = $1;
  $34 = (($33) + 4)|0;
  $1 = $34;
  $35 = $pWS;
  $36 = $1;
  $37 = (_GetULong($35,$36,$uValue)|0);
  $err = $37;
  $38 = ($37|0)<(0);
  if ($38) {
   label = 13;
   break;
  }
  $40 = $err;
  $err = $40;
  $41 = $1;
  $42 = (($41) + 4)|0;
  $1 = $42;
  $43 = $0;
  $44 = HEAP16[$uTag>>1]|0;
  $45 = HEAP16[$uType>>1]|0;
  $46 = HEAP32[$uCount>>2]|0;
  $47 = HEAP32[$uValue>>2]|0;
  $48 = (_ParsePFDEntry($43,$44,$45,$46,$47)|0);
  $err = $48;
  $49 = ($48|0)<(0);
  if ($49) {
   label = 16;
   break;
  }
  $51 = $err;
  $err = $51;
  $52 = $i;
  $53 = (($52) + 1)<<16>>16;
  $i = $53;
 }
 if ((label|0) == 4) {
  $15 = $err;
  $err = $15;
  $74 = $err;
  STACKTOP = sp;return ($74|0);
 }
 else if ((label|0) == 7) {
  $23 = $err;
  $err = $23;
  $74 = $err;
  STACKTOP = sp;return ($74|0);
 }
 else if ((label|0) == 10) {
  $31 = $err;
  $err = $31;
  $74 = $err;
  STACKTOP = sp;return ($74|0);
 }
 else if ((label|0) == 13) {
  $39 = $err;
  $err = $39;
  $74 = $err;
  STACKTOP = sp;return ($74|0);
 }
 else if ((label|0) == 16) {
  $50 = $err;
  $err = $50;
  $74 = $err;
  STACKTOP = sp;return ($74|0);
 }
 else if ((label|0) == 20) {
  $54 = $0;
  $55 = (($54) + 92|0);
  $56 = (($55) + 65992|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $0;
   $60 = (($59) + 92|0);
   $61 = (($60) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = $0;
    $65 = (($64) + 92|0);
    $66 = (($65) + 12|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)!=(0);
    $70 = $68;
   } else {
    $70 = 0;
   }
  } else {
   $70 = 0;
  }
  $69 = $70&1;
  $71 = $0;
  $72 = (($71) + 92|0);
  $73 = (($72) + 65992|0);
  HEAP32[$73>>2] = $69;
  $74 = $err;
  STACKTOP = sp;return ($74|0);
 }
 return 0|0;
}
function _PKImageDecode_Initialize_WMP($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $pII = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $pII = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_PKImageDecode_Initialize($2,$3)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = $err;
  $err = $6;
  $123 = $err;
  STACKTOP = sp;return ($123|0);
 }
 $7 = $err;
 $err = $7;
 $8 = $0;
 $9 = (_ReadContainer($8)|0);
 $err = $9;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = $err;
  $err = $11;
  $123 = $err;
  STACKTOP = sp;return ($123|0);
 }
 $12 = $err;
 $err = $12;
 $13 = $1;
 $14 = (($13) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = $0;
 $18 = (($17) + 92|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_iii[$15 & 255]($16,$19)|0);
 $err = $20;
 $21 = ($20|0)<(0);
 if ($21) {
  $22 = $err;
  $err = $22;
  $123 = $err;
  STACKTOP = sp;return ($123|0);
 }
 $23 = $err;
 $err = $23;
 $24 = $1;
 $25 = $0;
 $26 = (($25) + 92|0);
 $27 = (($26) + 168|0);
 $28 = (($27) + 52|0);
 HEAP32[$28>>2] = $24;
 $29 = $0;
 $30 = (($29) + 92|0);
 $31 = (($30) + 168|0);
 $32 = (($31) + 60|0);
 HEAP32[$32>>2] = 0;
 $33 = $0;
 $34 = (($33) + 92|0);
 $35 = (($34) + 33120|0);
 $36 = (($35) + 60|0);
 HEAP32[$36>>2] = 0;
 $37 = $0;
 $38 = (($37) + 92|0);
 $39 = (($38) + 66000|0);
 HEAP32[$39>>2] = 0;
 $40 = $0;
 $41 = (($40) + 92|0);
 $42 = (($41) + 66004|0);
 HEAP32[$42>>2] = 0;
 $43 = $0;
 $44 = (($43) + 92|0);
 $45 = (($44) + 66008|0);
 HEAP32[$45>>2] = 0;
 $46 = $0;
 $47 = (($46) + 92|0);
 $48 = (($47) + 66012|0);
 HEAP32[$48>>2] = 0;
 $49 = $0;
 $50 = (($49) + 92|0);
 $51 = (($50) + 66016|0);
 HEAP32[$51>>2] = 0;
 $52 = $0;
 $53 = (($52) + 92|0);
 $54 = (($53) + 66020|0);
 HEAP32[$54>>2] = 0;
 $55 = $0;
 $56 = (($55) + 92|0);
 $57 = (($56) + 66024|0);
 HEAP32[$57>>2] = 0;
 $58 = $0;
 $59 = (($58) + 92|0);
 $60 = (($59) + 88|0);
 $61 = $0;
 $62 = (($61) + 92|0);
 $63 = (($62) + 168|0);
 $64 = (_ImageStrDecGetInfo($60,$63)|0);
 $65 = (0)!=($64|0);
 $66 = $65 ? -1 : 0;
 $err = $66;
 $67 = ($66|0)<(0);
 if ($67) {
  $68 = $err;
  $err = $68;
  $123 = $err;
  STACKTOP = sp;return ($123|0);
 }
 $69 = $err;
 $err = $69;
 $70 = $0;
 $71 = (($70) + 92|0);
 $72 = (($71) + 88|0);
 $pII = $72;
 $73 = $0;
 $74 = (($73) + 92|0);
 $75 = (($74) + 168|0);
 $76 = (($75) + 16|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (0)<=($77>>>0);
 if (!($78)) {
  ___assert_fail((21080|0),(21168|0),384,(21192|0));
  // unreachable;
 }
 $79 = $0;
 $80 = (($79) + 92|0);
 $81 = (($80) + 168|0);
 $82 = (($81) + 16|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83>>>0)<(9);
 if (!($84)) {
  ___assert_fail((21080|0),(21168|0),384,(21192|0));
  // unreachable;
 }
 $85 = $0;
 $86 = (($85) + 92|0);
 $87 = (($86) + 168|0);
 $88 = (($87) + 20|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (0)==($89|0);
 if (!($90)) {
  $91 = $0;
  $92 = (($91) + 92|0);
  $93 = (($92) + 168|0);
  $94 = (($93) + 20|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (1)==($95|0);
  if (!($96)) {
   ___assert_fail((21224|0),(21168|0),385,(21192|0));
   // unreachable;
  }
 }
 $97 = $0;
 $98 = (($97) + 92|0);
 $99 = (($98) + 66028|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0);
 if ($101) {
  $102 = $0;
  $103 = (($102) + 92|0);
  $104 = (($103) + 66032|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $0;
  $107 = (($106) + 92|0);
  $108 = (($107) + 88|0);
  $109 = (($108) + 64|0);
  HEAP32[$109>>2] = $105;
 } else {
  $110 = $0;
  $111 = (($110) + 92|0);
  $112 = (($111) + 88|0);
  $113 = (($112) + 64|0);
  HEAP32[$113>>2] = 0;
 }
 $114 = $pII;
 $115 = HEAP32[$114>>2]|0;
 $116 = $0;
 $117 = (($116) + 72|0);
 HEAP32[$117>>2] = $115;
 $118 = $pII;
 $119 = (($118) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $0;
 $122 = (($121) + 76|0);
 HEAP32[$122>>2] = $120;
 $123 = $err;
 STACKTOP = sp;return ($123|0);
}
function _PKImageDecode_GetSize_WMP($pID,$piWidth,$piHeight) {
 $pID = $pID|0;
 $piWidth = $piWidth|0;
 $piHeight = $piHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $piWidth;
 $2 = $piHeight;
 $3 = $0;
 $4 = (($3) + 92|0);
 $5 = (($4) + 88|0);
 $6 = (($5) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>=(4);
 if ($8) {
  $9 = $0;
  $10 = (($9) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  HEAP32[$12>>2] = $11;
  $13 = $0;
  $14 = (($13) + 72|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  HEAP32[$16>>2] = $15;
  STACKTOP = sp;return 0;
 } else {
  $17 = $0;
  $18 = (($17) + 72|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  HEAP32[$20>>2] = $19;
  $21 = $0;
  $22 = (($21) + 76|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  HEAP32[$24>>2] = $23;
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _PKImageDecode_GetRawStream_WMP($pID,$ppWS) {
 $pID = $pID|0;
 $ppWS = $ppWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $err = 0, $pWS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $ppWS;
 $err = 0;
 $2 = $0;
 $3 = (($2) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $pWS = $4;
 $5 = $1;
 HEAP32[$5>>2] = 0;
 $6 = $pWS;
 $7 = (($6) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $pWS;
 $10 = $0;
 $11 = (($10) + 92|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iii[$8 & 255]($9,$12)|0);
 $err = $13;
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = $err;
  $err = $15;
  $19 = $err;
  STACKTOP = sp;return ($19|0);
 }
 $16 = $err;
 $err = $16;
 $17 = $pWS;
 $18 = $1;
 HEAP32[$18>>2] = $17;
 $19 = $err;
 STACKTOP = sp;return ($19|0);
}
function _JXR_BeginDecodingMBRows($pID,$pRect,$pb,$cbStride,$fullROIBuffer,$failSafe) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 $fullROIBuffer = $fullROIBuffer|0;
 $failSafe = $failSafe|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $errCode1 = 0, $pWMII = 0, $pos = 0, $roi = 0, $tempAlphaMode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $roi = sp;
 $0 = $pID;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $fullROIBuffer;
 $5 = $failSafe;
 $err = 0;
 $6 = $0;
 $7 = (($6) + 92|0);
 $8 = (($7) + 88|0);
 $pWMII = $8;
 $tempAlphaMode = 0;
 $9 = $4;
 $10 = ($9|0)!=(0);
 if ($10) {
  $16 = 0;
 } else {
  $11 = $pWMII;
  $12 = (($11) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13>>>0)>=(4);
  $16 = $14;
 }
 $15 = $16 ? -1 : 0;
 $err = $15;
 $17 = ($15|0)<(0);
 do {
  if ($17) {
   $18 = $err;
   $err = $18;
  } else {
   $19 = $err;
   $err = $19;
   $20 = $1;
   $21 = (0|0)==($20|0);
   if ($21) {
    $22 = (($roi) + 12|0);
    HEAP32[$22>>2] = 0;
    $23 = (($roi) + 8|0);
    HEAP32[$23>>2] = 0;
    $24 = (($roi) + 4|0);
    HEAP32[$24>>2] = 0;
    HEAP32[$roi>>2] = 0;
   } else {
    $25 = $pWMII;
    _CalcThumbnailSize($25);
    $26 = $1;
    $27 = $pWMII;
    $28 = (($27) + 56|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $pWMII;
    $31 = (($30) + 60|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $pWMII;
    $34 = (($33) + 64|0);
    $35 = HEAP32[$34>>2]|0;
    _TranslateROI($26,$roi,$29,$32,$35);
   }
   $36 = HEAP32[$roi>>2]|0;
   $37 = $pWMII;
   $38 = (($37) + 32|0);
   HEAP32[$38>>2] = $36;
   $39 = (($roi) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $pWMII;
   $42 = (($41) + 40|0);
   HEAP32[$42>>2] = $40;
   $43 = (($roi) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $pWMII;
   $46 = (($45) + 36|0);
   HEAP32[$46>>2] = $44;
   $47 = (($roi) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $pWMII;
   $50 = (($49) + 44|0);
   HEAP32[$50>>2] = $48;
   $51 = $0;
   $52 = (($51) + 92|0);
   $53 = (($52) + 66000|0);
   HEAP32[$53>>2] = 0;
   $54 = $0;
   $55 = (($54) + 92|0);
   $56 = (($55) + 66012|0);
   HEAP32[$56>>2] = 0;
   $57 = $0;
   $58 = (($57) + 92|0);
   $59 = (($58) + 66016|0);
   HEAP32[$59>>2] = 0;
   $60 = $2;
   $61 = $60;
   $62 = (($61>>>0) % 128)&-1;
   $63 = (0)==($62|0);
   if ($63) {
    $64 = $3;
    $65 = (($64>>>0) % 128)&-1;
    $66 = (0)==($65|0);
    if ($66) {
     $67 = $pWMII;
     $68 = (($67) + 72|0);
     HEAP32[$68>>2] = 1;
    }
   }
   $69 = $0;
   $70 = (($69) + 92|0);
   $71 = (($70) + 65992|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $0;
    $75 = (($74) + 92|0);
    $76 = (($75) + 168|0);
    $77 = (($76) + 36|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = ($79|0)!=(1);
    if ($80) {
     label = 14;
    }
   } else {
    label = 14;
   }
   if ((label|0) == 14) {
    $81 = $0;
    $82 = (($81) + 92|0);
    $83 = (($82) + 65992|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)!=(0);
    if ($85) {
     $86 = $0;
     $87 = (($86) + 92|0);
     $88 = (($87) + 168|0);
     $89 = (($88) + 36|0);
     $90 = HEAP8[$89>>0]|0;
     $tempAlphaMode = $90;
     $91 = $0;
     $92 = (($91) + 92|0);
     $93 = (($92) + 168|0);
     $94 = (($93) + 36|0);
     HEAP8[$94>>0] = 0;
    }
    $95 = $0;
    $96 = (($95) + 92|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $0;
    $99 = (($98) + 52|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($97>>>0)>=($100>>>0);
    if (!($101)) {
     ___assert_fail((21304|0),(21168|0),543,(21360|0));
     // unreachable;
    }
    $102 = $0;
    $103 = (($102) + 92|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $0;
    $106 = (($105) + 52|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($104) - ($107))|0;
    $pos = $108;
    $109 = $pos;
    $110 = $0;
    $111 = (($110) + 92|0);
    $112 = (($111) + 168|0);
    $113 = (($112) + 60|0);
    HEAP32[$113>>2] = $109;
    $114 = $0;
    $115 = (($114) + 92|0);
    $116 = (($115) + 168|0);
    $117 = (($116) + 52|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + 44|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $0;
    $122 = (($121) + 92|0);
    $123 = (($122) + 168|0);
    $124 = (($123) + 52|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $pos;
    $127 = (FUNCTION_TABLE_iii[$120 & 255]($125,$126)|0);
    $err = $127;
    $128 = ($127|0)<(0);
    if ($128) {
     $129 = $err;
     $err = $129;
     break;
    }
    $130 = $err;
    $err = $130;
    $131 = $pWMII;
    $132 = $0;
    $133 = (($132) + 92|0);
    $134 = (($133) + 168|0);
    $135 = $0;
    $136 = (($135) + 92|0);
    $137 = (($136) + 33036|0);
    $138 = $3;
    $139 = $5;
    $140 = (_ImageStrDecInit($131,$134,$137,$138,$139)|0);
    $141 = (0)!=($140|0);
    $142 = $141 ? -1 : 0;
    $err = $142;
    $143 = ($142|0)<(0);
    if ($143) {
     $144 = $err;
     $err = $144;
     break;
    }
    $145 = $err;
    $err = $145;
    $146 = $0;
    $147 = (($146) + 92|0);
    $148 = (($147) + 65992|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)!=(0);
    if ($150) {
     $151 = $tempAlphaMode;
     $152 = $0;
     $153 = (($152) + 92|0);
     $154 = (($153) + 168|0);
     $155 = (($154) + 36|0);
     HEAP8[$155>>0] = $151;
    }
   }
  }
 } while(0);
 $156 = $err;
 $157 = (0)!=($156|0);
 if (!($157)) {
  $163 = $err;
  STACKTOP = sp;return ($163|0);
 }
 $158 = $0;
 $159 = (($158) + 92|0);
 $160 = (($159) + 33036|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (_ImageStrDecTerm($161)|0);
 $errCode1 = $162;
 $163 = $err;
 STACKTOP = sp;return ($163|0);
}
function _TranslateROI($pRectUser,$pRectImage,$imageWidth,$imageHeight,$or) {
 $pRectUser = $pRectUser|0;
 $pRectImage = $pRectImage|0;
 $imageWidth = $imageWidth|0;
 $imageHeight = $imageHeight|0;
 $or = $or|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $bReverse = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pRectUser;
 $1 = $pRectImage;
 $2 = $imageWidth;
 $3 = $imageHeight;
 $4 = $or;
 $5 = $1;
 $6 = $0;
 ;HEAP32[$5+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$6+12>>2]|0;
 $7 = $4;
 $8 = $7 & 4;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $tmp = $12;
  $13 = $1;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = (($16) + 8|0);
  HEAP32[$17>>2] = $15;
  $18 = $tmp;
  $19 = $1;
  $20 = (($19) + 12|0);
  HEAP32[$20>>2] = $18;
  $21 = $1;
  $22 = HEAP32[$21>>2]|0;
  $tmp = $22;
  $23 = $1;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  HEAP32[$26>>2] = $25;
  $27 = $tmp;
  $28 = $1;
  $29 = (($28) + 4|0);
  HEAP32[$29>>2] = $27;
 }
 $30 = $4;
 $31 = (1)==($30|0);
 if ($31) {
  $39 = 1;
 } else {
  $32 = $4;
  $33 = (3)==($32|0);
  if ($33) {
   $39 = 1;
  } else {
   $34 = $4;
   $35 = (4)==($34|0);
   if ($35) {
    $39 = 1;
   } else {
    $36 = $4;
    $37 = (5)==($36|0);
    $39 = $37;
   }
  }
 }
 $38 = $39&1;
 $bReverse = $38;
 $40 = $bReverse;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $3;
  $43 = $1;
  $44 = (($43) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($42) - ($45))|0;
  $47 = $1;
  $48 = (($47) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = $1;
  $52 = (($51) + 4|0);
  HEAP32[$52>>2] = $50;
 }
 $53 = $4;
 $54 = (2)==($53|0);
 if ($54) {
  $62 = 1;
 } else {
  $55 = $4;
  $56 = (3)==($55|0);
  if ($56) {
   $62 = 1;
  } else {
   $57 = $4;
   $58 = (5)==($57|0);
   if ($58) {
    $62 = 1;
   } else {
    $59 = $4;
    $60 = (7)==($59|0);
    $62 = $60;
   }
  }
 }
 $61 = $62&1;
 $bReverse = $61;
 $63 = $bReverse;
 $64 = ($63|0)!=(0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $2;
 $66 = $1;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) - ($67))|0;
 $69 = $1;
 $70 = (($69) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($68) - ($71))|0;
 $73 = $1;
 HEAP32[$73>>2] = $72;
 STACKTOP = sp;return;
}
function _JXR_DecodeNextMBRow($pID,$pb,$cbStride,$pNumLinesDecoded,$pFinished) {
 $pID = $pID|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 $pNumLinesDecoded = $pNumLinesDecoded|0;
 $pFinished = $pFinished|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cLinesCropped = 0, $cLinesDecoded = 0, $cMBRow = 0, $currMBRow = 0, $err = 0, $finished = 0, $i = 0, $linesPerMBRow = 0, $lowMemAdj = 0, $pWMII = 0, $tempAlphaMode = 0, $wmiBI = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wmiBI = sp + 32|0;
 $cLinesDecoded = sp + 24|0;
 $0 = $pID;
 $1 = $pb;
 $2 = $cbStride;
 $3 = $pNumLinesDecoded;
 $4 = $pFinished;
 $err = 0;
 $finished = 0;
 ;HEAP32[$wmiBI+0>>2]=0|0;HEAP32[$wmiBI+4>>2]=0|0;HEAP32[$wmiBI+8>>2]=0|0;HEAP32[$wmiBI+12>>2]=0|0;HEAP32[$wmiBI+16>>2]=0|0;HEAP32[$wmiBI+20>>2]=0|0;
 $tempAlphaMode = 0;
 $5 = $0;
 $6 = (($5) + 92|0);
 $7 = (($6) + 88|0);
 $pWMII = $7;
 $8 = $0;
 $9 = (($8) + 92|0);
 $10 = (($9) + 66000|0);
 $11 = HEAP32[$10>>2]|0;
 $currMBRow = $11;
 $12 = $0;
 $13 = (($12) + 92|0);
 $14 = (($13) + 66012|0);
 $15 = HEAP32[$14>>2]|0;
 $cLinesCropped = $15;
 $16 = $3;
 HEAP32[$16>>2] = 0;
 $17 = $4;
 HEAP32[$17>>2] = 0;
 $18 = $pWMII;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (16 / ($20>>>0))&-1;
 $linesPerMBRow = $21;
 $22 = $linesPerMBRow;
 $23 = (($wmiBI) + 4|0);
 HEAP32[$23>>2] = $22;
 $24 = $0;
 $25 = (($24) + 92|0);
 $26 = (($25) + 65992|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $0;
  $30 = (($29) + 92|0);
  $31 = (($30) + 168|0);
  $32 = (($31) + 36|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = ($34|0)!=(1);
  if ($35) {
   label = 3;
  } else {
   label = 34;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $36 = $0;
   $37 = (($36) + 92|0);
   $38 = (($37) + 65992|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)!=(0);
   if ($40) {
    $41 = $0;
    $42 = (($41) + 92|0);
    $43 = (($42) + 168|0);
    $44 = (($43) + 36|0);
    $45 = HEAP8[$44>>0]|0;
    $tempAlphaMode = $45;
    $46 = $0;
    $47 = (($46) + 92|0);
    $48 = (($47) + 168|0);
    $49 = (($48) + 36|0);
    HEAP8[$49>>0] = 0;
   }
   $50 = $currMBRow;
   $51 = (0)==($50|0);
   if ($51) {
    $54 = 2;
   } else {
    $52 = $currMBRow;
    $53 = (($52) + 1)|0;
    $54 = $53;
   }
   $cMBRow = $54;
   $55 = $currMBRow;
   $56 = (0)==($55|0);
   if ($56) {
    $68 = 0;
   } else {
    $57 = $currMBRow;
    $58 = (($57) - 1)|0;
    $59 = $linesPerMBRow;
    $60 = Math_imul($58, $59)|0;
    $61 = $0;
    $62 = (($61) + 92|0);
    $63 = (($62) + 66012|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($60) - ($64))|0;
    $66 = $2;
    $67 = Math_imul($65, $66)|0;
    $68 = $67;
   }
   $lowMemAdj = $68;
   $69 = $pWMII;
   $70 = (($69) + 64|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (1)==($71|0);
   if ($72) {
    label = 13;
   } else {
    $73 = $pWMII;
    $74 = (($73) + 64|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (3)==($75|0);
    if ($76) {
     label = 13;
    }
   }
   if ((label|0) == 13) {
    $77 = $pWMII;
    $78 = (($77) + 44|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $linesPerMBRow;
    $81 = (($79) - ($80))|0;
    $82 = $2;
    $83 = Math_imul($81, $82)|0;
    $84 = $lowMemAdj;
    $85 = (($83) - ($84))|0;
    $lowMemAdj = $85;
   }
   $86 = $1;
   $87 = $lowMemAdj;
   $88 = (0 - ($87))|0;
   $89 = (($86) + ($88)|0);
   HEAP32[$wmiBI>>2] = $89;
   $90 = $2;
   $91 = (($wmiBI) + 8|0);
   HEAP32[$91>>2] = $90;
   $92 = $0;
   $93 = (($92) + 92|0);
   $94 = (($93) + 33036|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (_NeedRestoreAfterFailure($95)|0);
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $0;
    $99 = (($98) + 92|0);
    $100 = (($99) + 33036|0);
    $101 = HEAP32[$100>>2]|0;
    _RestoreDecoderState($101);
   } else {
    $102 = $0;
    $103 = (($102) + 92|0);
    $104 = (($103) + 33036|0);
    $105 = HEAP32[$104>>2]|0;
    _SaveDecoderState($105);
   }
   $106 = $currMBRow;
   $i = $106;
   while(1) {
    $107 = $i;
    $108 = $cMBRow;
    $109 = ($107>>>0)<($108>>>0);
    if (!($109)) {
     break;
    }
    $110 = $i;
    $111 = (($wmiBI) + 12|0);
    HEAP32[$111>>2] = $110;
    $112 = $i;
    $113 = (($wmiBI) + 16|0);
    HEAP32[$113>>2] = $112;
    $114 = $0;
    $115 = (($114) + 92|0);
    $116 = (($115) + 33036|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (_ImageStrDecDecode($117,$wmiBI,$cLinesDecoded)|0);
    $119 = (0)!=($118|0);
    if ($119) {
     label = 20;
     break;
    }
    $124 = HEAP32[$cLinesDecoded>>2]|0;
    $125 = $0;
    $126 = (($125) + 92|0);
    $127 = (($126) + 66008|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (($128) + ($124))|0;
    HEAP32[$127>>2] = $129;
    $130 = HEAP32[$cLinesDecoded>>2]|0;
    $131 = $3;
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($130))|0;
    HEAP32[$131>>2] = $133;
    $134 = $0;
    $135 = (($134) + 92|0);
    $136 = (($135) + 66016|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (0)==($137|0);
    if ($138) {
     $139 = HEAP32[$cLinesDecoded>>2]|0;
     $140 = ($139>>>0)>(0);
     if ($140) {
      $141 = $0;
      $142 = (($141) + 92|0);
      $143 = (($142) + 66016|0);
      HEAP32[$143>>2] = 1;
      $144 = $linesPerMBRow;
      $145 = HEAP32[$cLinesDecoded>>2]|0;
      $146 = (($144) - ($145))|0;
      $147 = $cLinesCropped;
      $148 = (($147) + ($146))|0;
      $cLinesCropped = $148;
     }
    }
    $149 = HEAP32[$cLinesDecoded>>2]|0;
    $150 = (0)==($149|0);
    if ($150) {
     $151 = $i;
     $152 = ($151>>>0)>(0);
     if ($152) {
      $153 = $cMBRow;
      $154 = (($153) + 1)|0;
      $cMBRow = $154;
      $155 = $linesPerMBRow;
      $156 = $cLinesCropped;
      $157 = (($156) + ($155))|0;
      $cLinesCropped = $157;
     }
    }
    $158 = $i;
    $159 = (($158) + 1)|0;
    $i = $159;
   }
   if ((label|0) == 20) {
    $120 = $0;
    $121 = (($120) + 92|0);
    $122 = (($121) + 33036|0);
    $123 = HEAP32[$122>>2]|0;
    _SetRestoreAfterFailure($123);
    $err = -1;
    break;
   }
   $160 = $linesPerMBRow;
   $161 = $cMBRow;
   $162 = (($161) - 1)|0;
   $163 = Math_imul($160, $162)|0;
   $164 = $pWMII;
   $165 = (($164) + 44|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $cLinesCropped;
   $168 = (($166) + ($167))|0;
   $169 = ($163>>>0)>=($168>>>0);
   if ($169) {
    $170 = $4;
    HEAP32[$170>>2] = 1;
   }
   $171 = $cMBRow;
   $172 = $0;
   $173 = (($172) + 92|0);
   $174 = (($173) + 66000|0);
   HEAP32[$174>>2] = $171;
   $175 = $cLinesCropped;
   $176 = $0;
   $177 = (($176) + 92|0);
   $178 = (($177) + 66012|0);
   HEAP32[$178>>2] = $175;
   $179 = $0;
   $180 = (($179) + 92|0);
   $181 = (($180) + 65992|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ($182|0)!=(0);
   if ($183) {
    $184 = $tempAlphaMode;
    $185 = $0;
    $186 = (($185) + 92|0);
    $187 = (($186) + 168|0);
    $188 = (($187) + 36|0);
    HEAP8[$188>>0] = $184;
   }
   label = 34;
  }
 } while(0);
 if ((label|0) == 34) {
 }
 $189 = $err;
 $190 = (0)!=($189|0);
 if (!($190)) {
  $201 = $err;
  STACKTOP = sp;return ($201|0);
 }
 $191 = $0;
 $192 = (($191) + 92|0);
 $193 = (($192) + 65992|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = ($194|0)!=(0);
 if ($195) {
  $196 = $tempAlphaMode;
  $197 = $0;
  $198 = (($197) + 92|0);
  $199 = (($198) + 168|0);
  $200 = (($199) + 36|0);
  HEAP8[$200>>0] = $196;
 }
 $201 = $err;
 STACKTOP = sp;return ($201|0);
}
function _JXR_EndDecodingMBRows($pID) {
 $pID = $pID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $errCode1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $0;
 $2 = (($1) + 92|0);
 $3 = (($2) + 33036|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_ImageStrDecTerm($4)|0);
 $errCode1 = $5;
 $6 = $0;
 $7 = (($6) + 92|0);
 $8 = (($7) + 33036|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = (($9) + 92|0);
 $11 = (($10) + 66000|0);
 HEAP32[$11>>2] = 0;
 STACKTOP = sp;return;
}
function _JXR_BeginDecodingMBRows_Alpha($pID,$pRect,$pb,$cbStride,$fullROIBuffer,$failSafe) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 $fullROIBuffer = $fullROIBuffer|0;
 $failSafe = $failSafe|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $err = 0, $errCode = 0, $pWMII = 0, $pWS = 0, $pos = 0, $roi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $roi = sp;
 $1 = $pID;
 $2 = $pRect;
 $3 = $pb;
 $4 = $cbStride;
 $5 = $fullROIBuffer;
 $6 = $failSafe;
 $err = 0;
 $7 = $1;
 $8 = (($7) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $pWS = $9;
 $10 = $1;
 $11 = (($10) + 92|0);
 $12 = (($11) + 33040|0);
 $pWMII = $12;
 $13 = $1;
 $14 = (($13) + 92|0);
 $15 = (($14) + 65992|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $0 = -115;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $18 = $5;
 $19 = ($18|0)!=(0);
 if ($19) {
  $25 = 0;
 } else {
  $20 = $pWMII;
  $21 = (($20) + 64|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22>>>0)>=(4);
  $25 = $23;
 }
 $24 = $25 ? -1 : 0;
 $err = $24;
 $26 = ($24|0)<(0);
 do {
  if ($26) {
   $27 = $err;
   $err = $27;
  } else {
   $28 = $err;
   $err = $28;
   $29 = $pWMII;
   $30 = HEAP32[$29>>2]|0;
   $31 = (0)==($30|0);
   if ($31) {
    label = 10;
   } else {
    $32 = $pWMII;
    $33 = (($32) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (0)==($34|0);
    if ($35) {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $36 = $1;
    $37 = (($36) + 72|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $pWMII;
    HEAP32[$39>>2] = $38;
    $40 = $1;
    $41 = (($40) + 72|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $pWMII;
    $44 = (($43) + 4|0);
    HEAP32[$44>>2] = $42;
   }
   $45 = $2;
   $46 = (0|0)==($45|0);
   if ($46) {
    $47 = (($roi) + 12|0);
    HEAP32[$47>>2] = 0;
    $48 = (($roi) + 8|0);
    HEAP32[$48>>2] = 0;
    $49 = (($roi) + 4|0);
    HEAP32[$49>>2] = 0;
    HEAP32[$roi>>2] = 0;
   } else {
    $50 = $pWMII;
    _CalcThumbnailSize($50);
    $51 = $2;
    $52 = $pWMII;
    $53 = (($52) + 56|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $pWMII;
    $56 = (($55) + 60|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $pWMII;
    $59 = (($58) + 64|0);
    $60 = HEAP32[$59>>2]|0;
    _TranslateROI($51,$roi,$54,$57,$60);
   }
   $61 = HEAP32[$roi>>2]|0;
   $62 = $pWMII;
   $63 = (($62) + 32|0);
   HEAP32[$63>>2] = $61;
   $64 = (($roi) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $pWMII;
   $67 = (($66) + 40|0);
   HEAP32[$67>>2] = $65;
   $68 = (($roi) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $pWMII;
   $71 = (($70) + 36|0);
   HEAP32[$71>>2] = $69;
   $72 = (($roi) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $pWMII;
   $75 = (($74) + 44|0);
   HEAP32[$75>>2] = $73;
   $76 = $pWS;
   $77 = $1;
   $78 = (($77) + 92|0);
   $79 = (($78) + 33120|0);
   $80 = (($79) + 52|0);
   HEAP32[$80>>2] = $76;
   $81 = $1;
   $82 = (($81) + 92|0);
   $83 = (($82) + 66004|0);
   HEAP32[$83>>2] = 0;
   $84 = $1;
   $85 = (($84) + 92|0);
   $86 = (($85) + 66020|0);
   HEAP32[$86>>2] = 0;
   $87 = $1;
   $88 = (($87) + 92|0);
   $89 = (($88) + 66024|0);
   HEAP32[$89>>2] = 0;
   $90 = $3;
   $91 = $90;
   $92 = (($91>>>0) % 128)&-1;
   $93 = (0)==($92|0);
   if ($93) {
    $94 = $4;
    $95 = (($94>>>0) % 128)&-1;
    $96 = (0)==($95|0);
    if ($96) {
     $97 = $pWMII;
     $98 = (($97) + 72|0);
     HEAP32[$98>>2] = 1;
    }
   }
   $99 = $1;
   $100 = (($99) + 92|0);
   $101 = (($100) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $1;
   $104 = (($103) + 52|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($102>>>0)>=($105>>>0);
   if (!($106)) {
    ___assert_fail((21384|0),(21168|0),772,(21440|0));
    // unreachable;
   }
   $107 = $1;
   $108 = (($107) + 92|0);
   $109 = (($108) + 8|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $1;
   $112 = (($111) + 52|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($110) - ($113))|0;
   $pos = $114;
   $115 = $pos;
   $116 = $1;
   $117 = (($116) + 92|0);
   $118 = (($117) + 33120|0);
   $119 = (($118) + 60|0);
   HEAP32[$119>>2] = $115;
   $120 = $pWS;
   $121 = (($120) + 44|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $pWS;
   $124 = $pos;
   $125 = (FUNCTION_TABLE_iii[$122 & 255]($123,$124)|0);
   $err = $125;
   $126 = ($125|0)<(0);
   if ($126) {
    $127 = $err;
    $err = $127;
    break;
   }
   $128 = $err;
   $err = $128;
   $129 = $1;
   $130 = (($129) + 92|0);
   $131 = (($130) + 88|0);
   $132 = (($131) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   switch ($133|0) {
   case 10: case 9: case 8:  {
    label = 27;
    break;
   }
   case 4: case 3: case 2:  {
    $141 = $pWMII;
    $142 = (($141) + 16|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $143 >>> 3;
    $145 = (($144>>>0) / 2)&-1;
    $146 = (($145) - 1)|0;
    $147 = $pWMII;
    $148 = (($147) + 20|0);
    HEAP32[$148>>2] = $146;
    break;
   }
   case 1:  {
    $134 = $pWMII;
    $135 = (($134) + 16|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $136 >>> 3;
    $138 = (($137) - 1)|0;
    $139 = $pWMII;
    $140 = (($139) + 20|0);
    HEAP32[$140>>2] = $138;
    break;
   }
   case 7: case 6: case 5:  {
    $149 = $pWMII;
    $150 = (($149) + 16|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $151 >>> 3;
    $153 = (($152>>>0) / 4)&-1;
    $154 = (($153) - 1)|0;
    $155 = $pWMII;
    $156 = (($155) + 20|0);
    HEAP32[$156>>2] = $154;
    break;
   }
   default: {
    label = 27;
   }
   }
   if ((label|0) == 27) {
   }
   $157 = $pWMII;
   $158 = $1;
   $159 = (($158) + 92|0);
   $160 = (($159) + 33120|0);
   $161 = $1;
   $162 = (($161) + 92|0);
   $163 = (($162) + 65988|0);
   $164 = $4;
   $165 = $6;
   $166 = (_ImageStrDecInit($157,$160,$163,$164,$165)|0);
   $167 = (0)!=($166|0);
   $168 = $167 ? -1 : 0;
   $err = $168;
   $169 = ($168|0)<(0);
   if ($169) {
    $170 = $err;
    $err = $170;
    break;
   }
   $171 = $err;
   $err = $171;
  }
 } while(0);
 $172 = $err;
 $173 = (0)!=($172|0);
 if ($173) {
  $174 = $1;
  $175 = (($174) + 92|0);
  $176 = (($175) + 65988|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (_ImageStrDecTerm($177)|0);
  $errCode = $178;
 }
 $179 = $err;
 $0 = $179;
 $180 = $0;
 STACKTOP = sp;return ($180|0);
}
function _JXR_DecodeNextMBRow_Alpha($pID,$pb,$cbStride,$pNumLinesDecoded,$pFinished) {
 $pID = $pID|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 $pNumLinesDecoded = $pNumLinesDecoded|0;
 $pFinished = $pFinished|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cLinesCropped = 0, $cLinesDecoded = 0, $cMBRow = 0, $currMBRow = 0, $err = 0, $i = 0, $linesPerMBRow = 0, $lowMemAdj = 0, $pWMII = 0;
 var $wmiBI = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wmiBI = sp + 32|0;
 $cLinesDecoded = sp + 24|0;
 $0 = $pID;
 $1 = $pb;
 $2 = $cbStride;
 $3 = $pNumLinesDecoded;
 $4 = $pFinished;
 $err = 0;
 $5 = $0;
 $6 = (($5) + 92|0);
 $7 = (($6) + 33040|0);
 $pWMII = $7;
 $8 = $0;
 $9 = (($8) + 92|0);
 $10 = (($9) + 66004|0);
 $11 = HEAP32[$10>>2]|0;
 $currMBRow = $11;
 $12 = $0;
 $13 = (($12) + 92|0);
 $14 = (($13) + 66020|0);
 $15 = HEAP32[$14>>2]|0;
 $cLinesCropped = $15;
 $16 = $3;
 HEAP32[$16>>2] = 0;
 $17 = $4;
 HEAP32[$17>>2] = 0;
 $18 = $pWMII;
 $19 = (($18) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (16 / ($20>>>0))&-1;
 $linesPerMBRow = $21;
 $22 = $linesPerMBRow;
 $23 = (($wmiBI) + 4|0);
 HEAP32[$23>>2] = $22;
 $24 = $currMBRow;
 $25 = (0)==($24|0);
 if ($25) {
  $28 = 2;
 } else {
  $26 = $currMBRow;
  $27 = (($26) + 1)|0;
  $28 = $27;
 }
 $cMBRow = $28;
 $29 = $currMBRow;
 $30 = (0)==($29|0);
 if ($30) {
  $42 = 0;
 } else {
  $31 = $currMBRow;
  $32 = (($31) - 1)|0;
  $33 = $linesPerMBRow;
  $34 = Math_imul($32, $33)|0;
  $35 = $0;
  $36 = (($35) + 92|0);
  $37 = (($36) + 66020|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($34) - ($38))|0;
  $40 = $2;
  $41 = Math_imul($39, $40)|0;
  $42 = $41;
 }
 $lowMemAdj = $42;
 $43 = $pWMII;
 $44 = (($43) + 64|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (1)==($45|0);
 if ($46) {
  label = 9;
 } else {
  $47 = $pWMII;
  $48 = (($47) + 64|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (3)==($49|0);
  if ($50) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $51 = $pWMII;
  $52 = (($51) + 44|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $linesPerMBRow;
  $55 = (($53) - ($54))|0;
  $56 = $2;
  $57 = Math_imul($55, $56)|0;
  $58 = $lowMemAdj;
  $59 = (($57) - ($58))|0;
  $lowMemAdj = $59;
 }
 $60 = $1;
 $61 = $lowMemAdj;
 $62 = (0 - ($61))|0;
 $63 = (($60) + ($62)|0);
 HEAP32[$wmiBI>>2] = $63;
 $64 = $2;
 $65 = (($wmiBI) + 8|0);
 HEAP32[$65>>2] = $64;
 $66 = $0;
 $67 = (($66) + 92|0);
 $68 = (($67) + 65988|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (_NeedRestoreAfterFailure($69)|0);
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $0;
  $73 = (($72) + 92|0);
  $74 = (($73) + 65988|0);
  $75 = HEAP32[$74>>2]|0;
  _RestoreDecoderState($75);
 } else {
  $76 = $0;
  $77 = (($76) + 92|0);
  $78 = (($77) + 65988|0);
  $79 = HEAP32[$78>>2]|0;
  _SaveDecoderState($79);
 }
 $80 = $currMBRow;
 $i = $80;
 while(1) {
  $81 = $i;
  $82 = $cMBRow;
  $83 = ($81>>>0)<($82>>>0);
  if (!($83)) {
   break;
  }
  $84 = $i;
  $85 = (($wmiBI) + 16|0);
  HEAP32[$85>>2] = $84;
  $86 = (($wmiBI) + 12|0);
  HEAP32[$86>>2] = $84;
  $87 = $0;
  $88 = (($87) + 92|0);
  $89 = (($88) + 65988|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (_ImageStrDecDecode($90,$wmiBI,$cLinesDecoded)|0);
  $92 = (0)!=($91|0);
  if ($92) {
   label = 16;
   break;
  }
  $97 = HEAP32[$cLinesDecoded>>2]|0;
  $98 = $0;
  $99 = (($98) + 92|0);
  $100 = (($99) + 66008|0);
  HEAP32[$100>>2] = $97;
  $101 = HEAP32[$cLinesDecoded>>2]|0;
  $102 = $3;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + ($101))|0;
  HEAP32[$102>>2] = $104;
  $105 = $0;
  $106 = (($105) + 92|0);
  $107 = (($106) + 66024|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (0)==($108|0);
  if ($109) {
   $110 = HEAP32[$cLinesDecoded>>2]|0;
   $111 = ($110>>>0)>(0);
   if ($111) {
    $112 = $0;
    $113 = (($112) + 92|0);
    $114 = (($113) + 66024|0);
    HEAP32[$114>>2] = 1;
    $115 = $linesPerMBRow;
    $116 = HEAP32[$cLinesDecoded>>2]|0;
    $117 = (($115) - ($116))|0;
    $118 = $cLinesCropped;
    $119 = (($118) + ($117))|0;
    $cLinesCropped = $119;
   }
  }
  $120 = HEAP32[$cLinesDecoded>>2]|0;
  $121 = (0)==($120|0);
  if ($121) {
   $122 = $i;
   $123 = ($122>>>0)>(0);
   if ($123) {
    $124 = $cMBRow;
    $125 = (($124) + 1)|0;
    $cMBRow = $125;
    $126 = $linesPerMBRow;
    $127 = $cLinesCropped;
    $128 = (($127) + ($126))|0;
    $cLinesCropped = $128;
   }
  }
  $129 = $i;
  $130 = (($129) + 1)|0;
  $i = $130;
 }
 if ((label|0) == 16) {
  $93 = $0;
  $94 = (($93) + 92|0);
  $95 = (($94) + 65988|0);
  $96 = HEAP32[$95>>2]|0;
  _SetRestoreAfterFailure($96);
  $err = -1;
  $150 = $err;
  STACKTOP = sp;return ($150|0);
 }
 $131 = $linesPerMBRow;
 $132 = $cMBRow;
 $133 = (($132) - 1)|0;
 $134 = Math_imul($131, $133)|0;
 $135 = $pWMII;
 $136 = (($135) + 44|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $cLinesCropped;
 $139 = (($137) + ($138))|0;
 $140 = ($134>>>0)>=($139>>>0);
 if ($140) {
  $141 = $4;
  HEAP32[$141>>2] = 1;
 }
 $142 = $cMBRow;
 $143 = $0;
 $144 = (($143) + 92|0);
 $145 = (($144) + 66004|0);
 HEAP32[$145>>2] = $142;
 $146 = $cLinesCropped;
 $147 = $0;
 $148 = (($147) + 92|0);
 $149 = (($148) + 66020|0);
 HEAP32[$149>>2] = $146;
 $150 = $err;
 STACKTOP = sp;return ($150|0);
}
function _JXR_EndDecodingMBRows_Alpha($pID) {
 $pID = $pID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $errCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $0;
 $2 = (($1) + 92|0);
 $3 = (($2) + 65988|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_ImageStrDecTerm($4)|0);
 $errCode = $5;
 $6 = $0;
 $7 = (($6) + 92|0);
 $8 = (($7) + 65988|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = (($9) + 92|0);
 $11 = (($10) + 66004|0);
 HEAP32[$11>>2] = 0;
 STACKTOP = sp;return;
}
function _PKImageDecode_Copy_WMP($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alphaFinished = 0, $decodeAlpha = 0, $err = 0, $finished = 0, $finished1 = 0, $hasPlanarAlpha = 0, $linesPerMBRow = 0, $mainPlaneFinished = 0, $numLinesDecoded = 0, $pRow = 0, $pStart = 0, $pWMII = 0, $pWS = 0;
 var $pos = 0, $stepStride = 0, $upsideDown = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numLinesDecoded = sp + 4|0;
 $finished = sp + 16|0;
 $finished1 = sp + 32|0;
 $0 = $pID;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 92|0);
 $6 = (($5) + 168|0);
 $7 = (($6) + 36|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 $11 = $10&1;
 $decodeAlpha = $11;
 $12 = $0;
 $13 = (($12) + 92|0);
 $14 = (($13) + 65992|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 $17 = $16&1;
 $hasPlanarAlpha = $17;
 $mainPlaneFinished = 1;
 $alphaFinished = 1;
 $18 = $0;
 $19 = (($18) + 92|0);
 $20 = (($19) + 88|0);
 $21 = (($20) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (1)==($22|0);
 if ($23) {
  $31 = 1;
 } else {
  $24 = $0;
  $25 = (($24) + 92|0);
  $26 = (($25) + 88|0);
  $27 = (($26) + 64|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (3)==($28|0);
  $31 = $29;
 }
 $30 = $31&1;
 $upsideDown = $30;
 $32 = $0;
 $33 = $1;
 $34 = $2;
 $35 = $3;
 $36 = (_JXR_BeginDecodingMBRows($32,$33,$34,$35,1,0)|0);
 $err = $36;
 $37 = ($36|0)<(0);
 do {
  if ($37) {
   $38 = $err;
   $err = $38;
  } else {
   $39 = $err;
   $err = $39;
   $40 = $3;
   $stepStride = $40;
   $41 = $upsideDown;
   $42 = ($41|0)!=(0);
   if ($42) {
    $43 = $0;
    $44 = (($43) + 92|0);
    $45 = (($44) + 88|0);
    $46 = (($45) + 52|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (16 / ($47>>>0))&-1;
    $linesPerMBRow = $48;
    $49 = $2;
    $50 = $1;
    $51 = (($50) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $linesPerMBRow;
    $54 = (($52) - ($53))|0;
    $55 = $3;
    $56 = Math_imul($54, $55)|0;
    $57 = (($49) + ($56)|0);
    $pStart = $57;
    $58 = $stepStride;
    $59 = (0 - ($58))|0;
    $stepStride = $59;
   } else {
    $60 = $2;
    $pStart = $60;
   }
   $mainPlaneFinished = 0;
   $61 = $pStart;
   $pRow = $61;
   while(1) {
    $62 = $0;
    $63 = $pRow;
    $64 = $3;
    $65 = (_JXR_DecodeNextMBRow($62,$63,$64,$numLinesDecoded,$finished)|0);
    $err = $65;
    $66 = ($65|0)<(0);
    if ($66) {
     label = 11;
     break;
    }
    $68 = $err;
    $err = $68;
    $69 = HEAP32[$numLinesDecoded>>2]|0;
    $70 = (0)==($69|0);
    if ($70) {
     label = 14;
     break;
    }
    $71 = HEAP32[$finished>>2]|0;
    $72 = ($71|0)!=(0);
    if ($72) {
     label = 16;
     break;
    }
    $73 = HEAP32[$numLinesDecoded>>2]|0;
    $74 = $stepStride;
    $75 = Math_imul($73, $74)|0;
    $76 = $pRow;
    $77 = (($76) + ($75)|0);
    $pRow = $77;
   }
   if ((label|0) == 11) {
    $67 = $err;
    $err = $67;
    break;
   }
   else if ((label|0) == 14) {
    $err = -1;
   }
   else if ((label|0) == 16) {
   }
   $mainPlaneFinished = 1;
   $78 = $0;
   _JXR_EndDecodingMBRows($78);
   $79 = $decodeAlpha;
   $80 = ($79|0)!=(0);
   if ($80) {
    $81 = $hasPlanarAlpha;
    $82 = ($81|0)!=(0);
    if ($82) {
     $83 = $0;
     $84 = (($83) + 92|0);
     $85 = (($84) + 33040|0);
     $pWMII = $85;
     $86 = $0;
     $87 = (($86) + 44|0);
     $88 = HEAP32[$87>>2]|0;
     $pWS = $88;
     $89 = $0;
     $90 = (($89) + 92|0);
     $91 = (($90) + 8|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $0;
     $94 = (($93) + 52|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($92>>>0)>=($95>>>0);
     if (!($96)) {
      ___assert_fail((21384|0),(21168|0),987,(21472|0));
      // unreachable;
     }
     $97 = $0;
     $98 = (($97) + 92|0);
     $99 = (($98) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $0;
     $102 = (($101) + 52|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (($100) - ($103))|0;
     $pos = $104;
     $105 = $pos;
     $106 = $0;
     $107 = (($106) + 92|0);
     $108 = (($107) + 33120|0);
     $109 = (($108) + 60|0);
     HEAP32[$109>>2] = $105;
     $110 = $pWS;
     $111 = (($110) + 44|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $pWS;
     $114 = $pos;
     $115 = (FUNCTION_TABLE_iii[$112 & 255]($113,$114)|0);
     $err = $115;
     $116 = ($115|0)<(0);
     if ($116) {
      $117 = $err;
      $err = $117;
      break;
     }
     $118 = $err;
     $err = $118;
     $119 = $pWS;
     $120 = $0;
     $121 = (($120) + 92|0);
     $122 = (($121) + 33120|0);
     $123 = (($122) + 52|0);
     HEAP32[$123>>2] = $119;
     $124 = $pWMII;
     $125 = $0;
     $126 = (($125) + 92|0);
     $127 = (($126) + 33120|0);
     (_ImageStrDecGetInfo($124,$127)|0);
     $128 = $0;
     $129 = (($128) + 92|0);
     $130 = (($129) + 88|0);
     $131 = (($130) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = $pWMII;
     $134 = (($133) + 16|0);
     HEAP32[$134>>2] = $132;
     $135 = $0;
     $136 = (($135) + 92|0);
     $137 = (($136) + 88|0);
     $138 = (($137) + 64|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $pWMII;
     $141 = (($140) + 64|0);
     HEAP32[$141>>2] = $139;
     $142 = $0;
     $143 = (($142) + 92|0);
     $144 = (($143) + 88|0);
     $145 = (($144) + 52|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $pWMII;
     $148 = (($147) + 52|0);
     HEAP32[$148>>2] = $146;
     $149 = $0;
     $150 = $1;
     $151 = $2;
     $152 = $3;
     $153 = (_JXR_BeginDecodingMBRows_Alpha($149,$150,$151,$152,1,0)|0);
     $err = $153;
     $154 = ($153|0)<(0);
     if ($154) {
      $155 = $err;
      $err = $155;
      break;
     }
     $156 = $err;
     $err = $156;
     $alphaFinished = 0;
     $157 = $3;
     $stepStride = $157;
     $158 = $upsideDown;
     $159 = ($158|0)!=(0);
     if ($159) {
      $160 = $stepStride;
      $161 = (0 - ($160))|0;
      $stepStride = $161;
     }
     $162 = $pStart;
     $pRow = $162;
     while(1) {
      $163 = $0;
      $164 = $pRow;
      $165 = $3;
      $166 = (_JXR_DecodeNextMBRow_Alpha($163,$164,$165,$numLinesDecoded,$finished1)|0);
      $err = $166;
      $167 = ($166|0)<(0);
      if ($167) {
       label = 33;
       break;
      }
      $169 = $err;
      $err = $169;
      $170 = HEAP32[$numLinesDecoded>>2]|0;
      $171 = (0)==($170|0);
      if ($171) {
       label = 36;
       break;
      }
      $172 = HEAP32[$finished1>>2]|0;
      $173 = ($172|0)!=(0);
      if ($173) {
       label = 38;
       break;
      }
      $174 = HEAP32[$numLinesDecoded>>2]|0;
      $175 = $stepStride;
      $176 = Math_imul($174, $175)|0;
      $177 = $pRow;
      $178 = (($177) + ($176)|0);
      $pRow = $178;
     }
     if ((label|0) == 33) {
      $168 = $err;
      $err = $168;
      break;
     }
     else if ((label|0) == 36) {
      $err = -1;
     }
     else if ((label|0) == 38) {
     }
     $alphaFinished = 1;
     $179 = $0;
     _JXR_EndDecodingMBRows_Alpha($179);
    }
   }
  }
 } while(0);
 $180 = $mainPlaneFinished;
 $181 = ($180|0)!=(0);
 if (!($181)) {
  $182 = $0;
  _JXR_EndDecodingMBRows($182);
 }
 $183 = $alphaFinished;
 $184 = ($183|0)!=(0);
 if ($184) {
  $186 = $err;
  STACKTOP = sp;return ($186|0);
 }
 $185 = $0;
 _JXR_EndDecodingMBRows_Alpha($185);
 $186 = $err;
 STACKTOP = sp;return ($186|0);
}
function _PKImageDecode_GetMetadata_WMP($pID,$uOffset,$uByteCount,$pbGot,$pcbGot) {
 $pID = $pID|0;
 $uOffset = $uOffset|0;
 $uByteCount = $uByteCount|0;
 $pbGot = $pbGot|0;
 $pcbGot = $pcbGot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $err = 0, $iCurrPos = 0, $pWS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iCurrPos = sp + 24|0;
 $0 = $pID;
 $1 = $uOffset;
 $2 = $uByteCount;
 $3 = $pbGot;
 $4 = $pcbGot;
 $err = 0;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $1;
   $8 = ($7|0)!=(0);
   if ($8) {
    $9 = $0;
    $10 = (($9) + 44|0);
    $11 = HEAP32[$10>>2]|0;
    $pWS = $11;
    $12 = $4;
    $13 = HEAP32[$12>>2]|0;
    $14 = $2;
    $15 = ($13>>>0)<($14>>>0);
    $16 = $15 ? -103 : 0;
    $err = $16;
    $17 = ($16|0)<(0);
    if ($17) {
     $18 = $err;
     $err = $18;
     break;
    }
    $19 = $err;
    $err = $19;
    $20 = $pWS;
    $21 = (($20) + 48|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $pWS;
    $24 = (FUNCTION_TABLE_iii[$22 & 255]($23,$iCurrPos)|0);
    $err = $24;
    $25 = ($24|0)<(0);
    if ($25) {
     $26 = $err;
     $err = $26;
     break;
    }
    $27 = $err;
    $err = $27;
    $28 = $pWS;
    $29 = (($28) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $pWS;
    $32 = $1;
    $33 = (FUNCTION_TABLE_iii[$30 & 255]($31,$32)|0);
    $err = $33;
    $34 = ($33|0)<(0);
    if ($34) {
     $35 = $err;
     $err = $35;
     break;
    }
    $36 = $err;
    $err = $36;
    $37 = $pWS;
    $38 = (($37) + 32|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $pWS;
    $41 = $3;
    $42 = $2;
    $43 = (FUNCTION_TABLE_iiii[$39 & 255]($40,$41,$42)|0);
    $err = $43;
    $44 = ($43|0)<(0);
    if ($44) {
     $45 = $err;
     $err = $45;
     break;
    }
    $46 = $err;
    $err = $46;
    $47 = $pWS;
    $48 = (($47) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $pWS;
    $51 = HEAP32[$iCurrPos>>2]|0;
    $52 = (FUNCTION_TABLE_iii[$49 & 255]($50,$51)|0);
    $err = $52;
    $53 = ($52|0)<(0);
    if ($53) {
     $54 = $err;
     $err = $54;
     break;
    }
    $55 = $err;
    $err = $55;
    label = 19;
   } else {
    label = 19;
   }
  } else {
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
 }
 $56 = $err;
 $57 = ($56|0)<(0);
 if ($57) {
  $58 = $4;
  HEAP32[$58>>2] = 0;
  $61 = $err;
  STACKTOP = sp;return ($61|0);
 } else {
  $59 = $2;
  $60 = $4;
  HEAP32[$60>>2] = $59;
  $61 = $err;
  STACKTOP = sp;return ($61|0);
 }
 return 0|0;
}
function _PKImageDecode_GetColorContext_WMP($pID,$pbColorContext,$pcbColorContext) {
 $pID = $pID|0;
 $pbColorContext = $pbColorContext|0;
 $pcbColorContext = $pcbColorContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pbColorContext;
 $2 = $pcbColorContext;
 $3 = $0;
 $4 = $0;
 $5 = (($4) + 92|0);
 $6 = (($5) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 92|0);
 $10 = (($9) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = $2;
 $14 = (_PKImageDecode_GetMetadata_WMP($3,$7,$11,$12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function _PKImageDecode_GetDescriptiveMetadata_WMP($pID,$pDescMetadata) {
 $pID = $pID|0;
 $pDescMetadata = $pDescMetadata|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $err = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pDescMetadata;
 $err = 0;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 92|0);
 $5 = (($4) + 66036|0);
 dest=$2+0|0; src=$5+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = $err;
 STACKTOP = sp;return ($6|0);
}
function _PKImageDecode_Release_WMP($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $1 = $0;
 $2 = (0|0)==($1|0);
 if ($2) {
  $65 = $err;
  STACKTOP = sp;return ($65|0);
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $pID = $4;
 $5 = $pID;
 $6 = (($5) + 92|0);
 $7 = (($6) + 66036|0);
 _FreeDescMetadata($7);
 $8 = $pID;
 $9 = (($8) + 92|0);
 $10 = (($9) + 66036|0);
 $11 = (($10) + 8|0);
 _FreeDescMetadata($11);
 $12 = $pID;
 $13 = (($12) + 92|0);
 $14 = (($13) + 66036|0);
 $15 = (($14) + 16|0);
 _FreeDescMetadata($15);
 $16 = $pID;
 $17 = (($16) + 92|0);
 $18 = (($17) + 66036|0);
 $19 = (($18) + 24|0);
 _FreeDescMetadata($19);
 $20 = $pID;
 $21 = (($20) + 92|0);
 $22 = (($21) + 66036|0);
 $23 = (($22) + 32|0);
 _FreeDescMetadata($23);
 $24 = $pID;
 $25 = (($24) + 92|0);
 $26 = (($25) + 66036|0);
 $27 = (($26) + 40|0);
 _FreeDescMetadata($27);
 $28 = $pID;
 $29 = (($28) + 92|0);
 $30 = (($29) + 66036|0);
 $31 = (($30) + 48|0);
 _FreeDescMetadata($31);
 $32 = $pID;
 $33 = (($32) + 92|0);
 $34 = (($33) + 66036|0);
 $35 = (($34) + 56|0);
 _FreeDescMetadata($35);
 $36 = $pID;
 $37 = (($36) + 92|0);
 $38 = (($37) + 66036|0);
 $39 = (($38) + 64|0);
 _FreeDescMetadata($39);
 $40 = $pID;
 $41 = (($40) + 92|0);
 $42 = (($41) + 66036|0);
 $43 = (($42) + 72|0);
 _FreeDescMetadata($43);
 $44 = $pID;
 $45 = (($44) + 92|0);
 $46 = (($45) + 66036|0);
 $47 = (($46) + 80|0);
 _FreeDescMetadata($47);
 $48 = $pID;
 $49 = (($48) + 92|0);
 $50 = (($49) + 66036|0);
 $51 = (($50) + 88|0);
 _FreeDescMetadata($51);
 $52 = $pID;
 $53 = (($52) + 92|0);
 $54 = (($53) + 66036|0);
 $55 = (($54) + 96|0);
 _FreeDescMetadata($55);
 $56 = $pID;
 $57 = (($56) + 92|0);
 $58 = (($57) + 66036|0);
 $59 = (($58) + 104|0);
 _FreeDescMetadata($59);
 $60 = $0;
 $61 = (_PKImageDecode_Release($60)|0);
 $err = $61;
 $62 = ($61|0)<(0);
 if ($62) {
  $63 = $err;
  $err = $63;
  $65 = $err;
  STACKTOP = sp;return ($65|0);
 }
 $64 = $err;
 $err = $64;
 $65 = $err;
 STACKTOP = sp;return ($65|0);
}
function _PKImageDecode_Create_WMP($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKImageDecode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $21 = $err;
  STACKTOP = sp;return ($21|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 157;
 $9 = $pID;
 $10 = (($9) + 8|0);
 HEAP32[$10>>2] = 158;
 $11 = $pID;
 $12 = (($11) + 24|0);
 HEAP32[$12>>2] = 159;
 $13 = $pID;
 $14 = (($13) + 28|0);
 HEAP32[$14>>2] = 160;
 $15 = $pID;
 $16 = (($15) + 16|0);
 HEAP32[$16>>2] = 161;
 $17 = $pID;
 $18 = (($17) + 20|0);
 HEAP32[$18>>2] = 162;
 $19 = $pID;
 $20 = (($19) + 40|0);
 HEAP32[$20>>2] = 163;
 $21 = $err;
 STACKTOP = sp;return ($21|0);
}
function _ParsePFDEntry($pID,$uTag,$uType,$uCount,$uValue) {
 $pID = $pID|0;
 $uTag = $uTag|0;
 $uType = $uType|0;
 $uCount = $uCount|0;
 $uValue = $uValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $PI = 0, $err = 0, $errTmp = 0, $pGuid = 0, $pWS = 0, $ufValue = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $PI = sp + 24|0;
 $ufValue = sp + 68|0;
 $0 = $pID;
 $1 = $uTag;
 $2 = $uType;
 $3 = $uCount;
 $4 = $uValue;
 $err = 0;
 $errTmp = 0;
 $5 = $0;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $pWS = $7;
 ;HEAP32[$ufValue+0>>2]=0|0;
 $8 = $1;
 $9 = $8&65535;
 L1: do {
  if ((($9|0) == 270)) {
   $235 = $pWS;
   $236 = $2;
   $237 = $3;
   $238 = $4;
   $239 = $0;
   $240 = (($239) + 92|0);
   $241 = (($240) + 66036|0);
   $242 = (_ReadPropvar($235,$236,$237,$238,$241)|0);
   $errTmp = $242;
   $243 = ($242|0)<(0);
   if ($243) {
    $244 = $errTmp;
    $errTmp = $244;
   } else {
    $245 = $errTmp;
    $errTmp = $245;
   }
   $246 = $0;
   $247 = (($246) + 92|0);
   $248 = (($247) + 66036|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (30)==($249|0);
   if ($250) {
    break L1;
   } else {
    ___assert_fail((21528|0),(21168|0),178,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 48325) | (($9|0) == 48324) | (($9|0) == 48132) | (($9|0) == 48131)) {
  } else if ((($9|0) == 34377)) {
   $227 = $3;
   $228 = $0;
   $229 = (($228) + 92|0);
   $230 = (($229) + 76|0);
   HEAP32[$230>>2] = $227;
   $231 = $4;
   $232 = $0;
   $233 = (($232) + 92|0);
   $234 = (($233) + 72|0);
   HEAP32[$234>>2] = $231;
  } else if ((($9|0) == 306)) {
   $305 = $pWS;
   $306 = $2;
   $307 = $3;
   $308 = $4;
   $309 = $0;
   $310 = (($309) + 92|0);
   $311 = (($310) + 66036|0);
   $312 = (($311) + 32|0);
   $313 = (_ReadPropvar($305,$306,$307,$308,$312)|0);
   $errTmp = $313;
   $314 = ($313|0)<(0);
   if ($314) {
    $315 = $errTmp;
    $errTmp = $315;
   } else {
    $316 = $errTmp;
    $errTmp = $316;
   }
   $317 = $0;
   $318 = (($317) + 92|0);
   $319 = (($318) + 66036|0);
   $320 = (($319) + 32|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = (30)==($321|0);
   if ($322) {
    break L1;
   } else {
    ___assert_fail((21768|0),(21168|0),202,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 305)) {
   $287 = $pWS;
   $288 = $2;
   $289 = $3;
   $290 = $4;
   $291 = $0;
   $292 = (($291) + 92|0);
   $293 = (($292) + 66036|0);
   $294 = (($293) + 24|0);
   $295 = (_ReadPropvar($287,$288,$289,$290,$294)|0);
   $errTmp = $295;
   $296 = ($295|0)<(0);
   if ($296) {
    $297 = $errTmp;
    $errTmp = $297;
   } else {
    $298 = $errTmp;
    $errTmp = $298;
   }
   $299 = $0;
   $300 = (($299) + 92|0);
   $301 = (($300) + 66036|0);
   $302 = (($301) + 24|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (30)==($303|0);
   if ($304) {
    break L1;
   } else {
    ___assert_fail((21712|0),(21168|0),196,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 272)) {
   $269 = $pWS;
   $270 = $2;
   $271 = $3;
   $272 = $4;
   $273 = $0;
   $274 = (($273) + 92|0);
   $275 = (($274) + 66036|0);
   $276 = (($275) + 16|0);
   $277 = (_ReadPropvar($269,$270,$271,$272,$276)|0);
   $errTmp = $277;
   $278 = ($277|0)<(0);
   if ($278) {
    $279 = $errTmp;
    $errTmp = $279;
   } else {
    $280 = $errTmp;
    $errTmp = $280;
   }
   $281 = $0;
   $282 = (($281) + 92|0);
   $283 = (($282) + 66036|0);
   $284 = (($283) + 16|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = (30)==($285|0);
   if ($286) {
    break L1;
   } else {
    ___assert_fail((21648|0),(21168|0),190,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 271)) {
   $251 = $pWS;
   $252 = $2;
   $253 = $3;
   $254 = $4;
   $255 = $0;
   $256 = (($255) + 92|0);
   $257 = (($256) + 66036|0);
   $258 = (($257) + 8|0);
   $259 = (_ReadPropvar($251,$252,$253,$254,$258)|0);
   $errTmp = $259;
   $260 = ($259|0)<(0);
   if ($260) {
    $261 = $errTmp;
    $errTmp = $261;
   } else {
    $262 = $errTmp;
    $errTmp = $262;
   }
   $263 = $0;
   $264 = (($263) + 92|0);
   $265 = (($264) + 66036|0);
   $266 = (($265) + 8|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = (30)==($267|0);
   if ($268) {
    break L1;
   } else {
    ___assert_fail((21592|0),(21168|0),184,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 18249)) {
   $377 = $pWS;
   $378 = $2;
   $379 = $3;
   $380 = $4;
   $381 = $0;
   $382 = (($381) + 92|0);
   $383 = (($382) + 66036|0);
   $384 = (($383) + 64|0);
   $385 = (_ReadPropvar($377,$378,$379,$380,$384)|0);
   $errTmp = $385;
   $386 = ($385|0)<(0);
   if ($386) {
    $387 = $errTmp;
    $errTmp = $387;
   } else {
    $388 = $errTmp;
    $errTmp = $388;
   }
   $389 = $0;
   $390 = (($389) + 92|0);
   $391 = (($390) + 66036|0);
   $392 = (($391) + 64|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = (18)==($393|0);
   if ($394) {
    break L1;
   } else {
    ___assert_fail((21992|0),(21168|0),226,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 40091)) {
   $395 = $pWS;
   $396 = $2;
   $397 = $3;
   $398 = $4;
   $399 = $0;
   $400 = (($399) + 92|0);
   $401 = (($400) + 66036|0);
   $402 = (($401) + 72|0);
   $403 = (_ReadPropvar($395,$396,$397,$398,$402)|0);
   $errTmp = $403;
   $404 = ($403|0)<(0);
   if ($404) {
    $405 = $errTmp;
    $errTmp = $405;
   } else {
    $406 = $errTmp;
    $errTmp = $406;
   }
   $407 = $0;
   $408 = (($407) + 92|0);
   $409 = (($408) + 66036|0);
   $410 = (($409) + 72|0);
   $411 = HEAP32[$410>>2]|0;
   $412 = (16401)==($411|0);
   if (!($412)) {
    ___assert_fail((22048|0),(21168|0),232,(21512|0));
    // unreachable;
   }
   $413 = $0;
   $414 = (($413) + 92|0);
   $415 = (($414) + 66036|0);
   $416 = (($415) + 72|0);
   $417 = (($416) + 4|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = $0;
   $420 = (($419) + 92|0);
   $421 = (($420) + 66036|0);
   $422 = (($421) + 72|0);
   $423 = (($422) + 4|0);
   $424 = HEAP32[$423>>2]|0;
   $425 = ($418|0)==($424|0);
   if (!($425)) {
    ___assert_fail((22120|0),(21168|0),236,(21512|0));
    // unreachable;
   }
   $426 = $3;
   $427 = (($426>>>0) / 2)&-1;
   $428 = (($427) - 1)|0;
   $429 = $0;
   $430 = (($429) + 92|0);
   $431 = (($430) + 66036|0);
   $432 = (($431) + 72|0);
   $433 = (($432) + 4|0);
   $434 = HEAP32[$433>>2]|0;
   $435 = (($434) + ($428<<1)|0);
   $436 = HEAP16[$435>>1]|0;
   $437 = $436&65535;
   $438 = (0)==($437|0);
   if ($438) {
    $439 = $3;
    $440 = (($439>>>0) / 2)&-1;
    $441 = $0;
    $442 = (($441) + 92|0);
    $443 = (($442) + 66036|0);
    $444 = (($443) + 72|0);
    $445 = (($444) + 4|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = (($446) + ($440<<1)|0);
    HEAP16[$447>>1] = 0;
    $448 = $0;
    $449 = (($448) + 92|0);
    $450 = (($449) + 66036|0);
    $451 = (($450) + 72|0);
    HEAP32[$451>>2] = 31;
    break L1;
   } else {
    ___assert_fail((22224|0),(21168|0),237,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 269)) {
   $452 = $pWS;
   $453 = $2;
   $454 = $3;
   $455 = $4;
   $456 = $0;
   $457 = (($456) + 92|0);
   $458 = (($457) + 66036|0);
   $459 = (($458) + 80|0);
   $460 = (_ReadPropvar($452,$453,$454,$455,$459)|0);
   $errTmp = $460;
   $461 = ($460|0)<(0);
   if ($461) {
    $462 = $errTmp;
    $errTmp = $462;
   } else {
    $463 = $errTmp;
    $errTmp = $463;
   }
   $464 = $0;
   $465 = (($464) + 92|0);
   $466 = (($465) + 66036|0);
   $467 = (($466) + 80|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = (30)==($468|0);
   if ($469) {
    break L1;
   } else {
    ___assert_fail((22304|0),(21168|0),246,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 18246)) {
   $359 = $pWS;
   $360 = $2;
   $361 = $3;
   $362 = $4;
   $363 = $0;
   $364 = (($363) + 92|0);
   $365 = (($364) + 66036|0);
   $366 = (($365) + 56|0);
   $367 = (_ReadPropvar($359,$360,$361,$362,$366)|0);
   $errTmp = $367;
   $368 = ($367|0)<(0);
   if ($368) {
    $369 = $errTmp;
    $errTmp = $369;
   } else {
    $370 = $errTmp;
    $errTmp = $370;
   }
   $371 = $0;
   $372 = (($371) + 92|0);
   $373 = (($372) + 66036|0);
   $374 = (($373) + 56|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = (18)==($375|0);
   if ($376) {
    break L1;
   } else {
    ___assert_fail((21936|0),(21168|0),220,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 315)) {
   $323 = $pWS;
   $324 = $2;
   $325 = $3;
   $326 = $4;
   $327 = $0;
   $328 = (($327) + 92|0);
   $329 = (($328) + 66036|0);
   $330 = (($329) + 40|0);
   $331 = (_ReadPropvar($323,$324,$325,$326,$330)|0);
   $errTmp = $331;
   $332 = ($331|0)<(0);
   if ($332) {
    $333 = $errTmp;
    $errTmp = $333;
   } else {
    $334 = $errTmp;
    $errTmp = $334;
   }
   $335 = $0;
   $336 = (($335) + 92|0);
   $337 = (($336) + 66036|0);
   $338 = (($337) + 40|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = (30)==($339|0);
   if ($340) {
    break L1;
   } else {
    ___assert_fail((21824|0),(21168|0),208,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 316)) {
   $506 = $pWS;
   $507 = $2;
   $508 = $3;
   $509 = $4;
   $510 = $0;
   $511 = (($510) + 92|0);
   $512 = (($511) + 66036|0);
   $513 = (($512) + 104|0);
   $514 = (_ReadPropvar($506,$507,$508,$509,$513)|0);
   $errTmp = $514;
   $515 = ($514|0)<(0);
   if ($515) {
    $516 = $errTmp;
    $errTmp = $516;
   } else {
    $517 = $errTmp;
    $errTmp = $517;
   }
   $518 = $0;
   $519 = (($518) + 92|0);
   $520 = (($519) + 66036|0);
   $521 = (($520) + 104|0);
   $522 = HEAP32[$521>>2]|0;
   $523 = (30)==($522|0);
   if ($523) {
    break L1;
   } else {
    ___assert_fail((22480|0),(21168|0),264,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 285)) {
   $470 = $pWS;
   $471 = $2;
   $472 = $3;
   $473 = $4;
   $474 = $0;
   $475 = (($474) + 92|0);
   $476 = (($475) + 66036|0);
   $477 = (($476) + 88|0);
   $478 = (_ReadPropvar($470,$471,$472,$473,$477)|0);
   $errTmp = $478;
   $479 = ($478|0)<(0);
   if ($479) {
    $480 = $errTmp;
    $errTmp = $480;
   } else {
    $481 = $errTmp;
    $errTmp = $481;
   }
   $482 = $0;
   $483 = (($482) + 92|0);
   $484 = (($483) + 66036|0);
   $485 = (($484) + 88|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = (30)==($486|0);
   if ($487) {
    break L1;
   } else {
    ___assert_fail((22368|0),(21168|0),252,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 33432)) {
   $341 = $pWS;
   $342 = $2;
   $343 = $3;
   $344 = $4;
   $345 = $0;
   $346 = (($345) + 92|0);
   $347 = (($346) + 66036|0);
   $348 = (($347) + 48|0);
   $349 = (_ReadPropvar($341,$342,$343,$344,$348)|0);
   $errTmp = $349;
   $350 = ($349|0)<(0);
   if ($350) {
    $351 = $errTmp;
    $errTmp = $351;
   } else {
    $352 = $errTmp;
    $errTmp = $352;
   }
   $353 = $0;
   $354 = (($353) + 92|0);
   $355 = (($354) + 66036|0);
   $356 = (($355) + 48|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = (30)==($357|0);
   if ($358) {
    break L1;
   } else {
    ___assert_fail((21880|0),(21168|0),214,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 297)) {
   $488 = $pWS;
   $489 = $2;
   $490 = $3;
   $491 = $4;
   $492 = $0;
   $493 = (($492) + 92|0);
   $494 = (($493) + 66036|0);
   $495 = (($494) + 96|0);
   $496 = (_ReadPropvar($488,$489,$490,$491,$495)|0);
   $errTmp = $496;
   $497 = ($496|0)<(0);
   if ($497) {
    $498 = $errTmp;
    $errTmp = $498;
   } else {
    $499 = $errTmp;
    $errTmp = $499;
   }
   $500 = $0;
   $501 = (($500) + 92|0);
   $502 = (($501) + 66036|0);
   $503 = (($502) + 96|0);
   $504 = HEAP32[$503>>2]|0;
   $505 = (19)==($504|0);
   if ($505) {
    break L1;
   } else {
    ___assert_fail((22424|0),(21168|0),258,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 48320)) {
   $108 = $3;
   $109 = (1)!=($108|0);
   $110 = $109 ? -106 : 0;
   $err = $110;
   $111 = ($110|0)<(0);
   if ($111) {
    $112 = $err;
    $err = $112;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   } else {
    $113 = $err;
    $err = $113;
    $114 = $4;
    $115 = $0;
    $116 = (($115) + 92|0);
    HEAP32[$116>>2] = $114;
    break L1;
   }
  } else if ((($9|0) == 48323)) {
   $142 = $3;
   $143 = (1)!=($142|0);
   $144 = $143 ? -106 : 0;
   $err = $144;
   $145 = ($144|0)<(0);
   if ($145) {
    $146 = $err;
    $err = $146;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   } else {
    $147 = $err;
    $err = $147;
    $148 = $4;
    $149 = $0;
    $150 = (($149) + 92|0);
    $151 = (($150) + 12|0);
    HEAP32[$151>>2] = $148;
    $152 = $4;
    $153 = $0;
    $154 = (($153) + 92|0);
    $155 = (($154) + 33040|0);
    $156 = (($155) + 76|0);
    HEAP32[$156>>2] = $152;
    break L1;
   }
  } else if ((($9|0) == 48258)) {
   $157 = $3;
   $158 = (1)!=($157|0);
   $159 = $158 ? -106 : 0;
   $err = $159;
   $160 = ($159|0)<(0);
   if ($160) {
    $161 = $err;
    $err = $161;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   } else {
    $162 = $err;
    $err = $162;
    $163 = $4;
    HEAP32[$ufValue>>2] = $163;
    $164 = +HEAPF32[$ufValue>>2];
    $165 = $0;
    $166 = (($165) + 80|0);
    HEAPF32[$166>>2] = $164;
    break L1;
   }
  } else if ((($9|0) == 48129)) {
   $10 = $0;
   $11 = (($10) + 56|0);
   $pGuid = $11;
   $12 = $pWS;
   $13 = $4;
   $14 = $pGuid;
   $15 = (_GetULong($12,$13,$14)|0);
   $err = $15;
   $16 = ($15|0)<(0);
   if ($16) {
    $17 = $err;
    $err = $17;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   }
   $18 = $err;
   $err = $18;
   $19 = $pWS;
   $20 = $4;
   $21 = (($20) + 4)|0;
   $22 = $pGuid;
   $23 = (($22) + 4|0);
   $24 = (_GetUShort($19,$21,$23)|0);
   $err = $24;
   $25 = ($24|0)<(0);
   if ($25) {
    $26 = $err;
    $err = $26;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   }
   $27 = $err;
   $err = $27;
   $28 = $pWS;
   $29 = $4;
   $30 = (($29) + 6)|0;
   $31 = $pGuid;
   $32 = (($31) + 6|0);
   $33 = (_GetUShort($28,$30,$32)|0);
   $err = $33;
   $34 = ($33|0)<(0);
   if ($34) {
    $35 = $err;
    $err = $35;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   }
   $36 = $err;
   $err = $36;
   $37 = $pWS;
   $38 = (($37) + 32|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $pWS;
   $41 = $pGuid;
   $42 = (($41) + 8|0);
   $43 = (FUNCTION_TABLE_iiii[$39 & 255]($40,$42,8)|0);
   $err = $43;
   $44 = ($43|0)<(0);
   if ($44) {
    $45 = $err;
    $err = $45;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   } else {
    $46 = $err;
    $err = $46;
    $47 = $0;
    $48 = (($47) + 56|0);
    HEAP32[$PI>>2] = $48;
    (_PixelFormatLookup($PI,0)|0);
    $49 = (($PI) + 20|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $50 & 16;
    $52 = ($51|0)!=(0);
    $53 = $52 ^ 1;
    $54 = $53 ^ 1;
    $55 = $54&1;
    $56 = $0;
    $57 = (($56) + 92|0);
    $58 = (($57) + 65992|0);
    HEAP32[$58>>2] = $55;
    $59 = (($PI) + 16|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $0;
    $62 = (($61) + 92|0);
    $63 = (($62) + 88|0);
    $64 = (($63) + 16|0);
    HEAP32[$64>>2] = $60;
    $65 = (($PI) + 20|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $66 & 64;
    $68 = ($67|0)!=(0);
    $69 = $68 ^ 1;
    $70 = $69&1;
    $71 = $0;
    $72 = (($71) + 92|0);
    $73 = (($72) + 88|0);
    $74 = (($73) + 24|0);
    HEAP32[$74>>2] = $70;
    break L1;
   }
  } else if ((($9|0) == 34665)) {
   $193 = $4;
   $194 = $0;
   $195 = (($194) + 92|0);
   $196 = (($195) + 48|0);
   HEAP32[$196>>2] = $193;
   $197 = $pWS;
   $198 = $4;
   $199 = $0;
   $200 = (($199) + 92|0);
   $201 = (($200) + 52|0);
   $202 = (_StreamCalcIFDSize($197,$198,$201)|0);
   $errTmp = $202;
   $203 = ($202|0)<(0);
   if ($203) {
    $204 = $errTmp;
    $errTmp = $204;
   } else {
    $205 = $errTmp;
    $errTmp = $205;
   }
  } else if ((($9|0) == 48257)) {
   $99 = $4;
   $100 = (0)==($99|0);
   $101 = $100 ? -106 : 0;
   $err = $101;
   $102 = ($101|0)<(0);
   if ($102) {
    $103 = $err;
    $err = $103;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   } else {
    $104 = $err;
    $err = $104;
    $105 = $4;
    $106 = $0;
    $107 = (($106) + 76|0);
    HEAP32[$107>>2] = $105;
    break L1;
   }
  } else if ((($9|0) == 48322)) {
   $132 = $3;
   $133 = (1)!=($132|0);
   $134 = $133 ? -106 : 0;
   $err = $134;
   $135 = ($134|0)<(0);
   if ($135) {
    $136 = $err;
    $err = $136;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   } else {
    $137 = $err;
    $err = $137;
    $138 = $4;
    $139 = $0;
    $140 = (($139) + 92|0);
    $141 = (($140) + 8|0);
    HEAP32[$141>>2] = $138;
    break L1;
   }
  } else if ((($9|0) == 48130)) {
   $75 = $3;
   $76 = (1)!=($75|0);
   $77 = $76 ? -106 : 0;
   $err = $77;
   $78 = ($77|0)<(0);
   if ($78) {
    $79 = $err;
    $err = $79;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   }
   $80 = $err;
   $err = $80;
   $81 = $4;
   $82 = ($81>>>0)<(8);
   if ($82) {
    $83 = $0;
    $84 = (($83) + 92|0);
    $85 = (($84) + 66028|0);
    HEAP32[$85>>2] = 1;
    $86 = $4;
    $87 = $0;
    $88 = (($87) + 92|0);
    $89 = (($88) + 66032|0);
    HEAP32[$89>>2] = $86;
    break L1;
   } else {
    ___assert_fail((21496|0),(21168|0),89,(21512|0));
    // unreachable;
   }
  } else if ((($9|0) == 48256)) {
   $90 = $4;
   $91 = (0)==($90|0);
   $92 = $91 ? -106 : 0;
   $err = $92;
   $93 = ($92|0)<(0);
   if ($93) {
    $94 = $err;
    $err = $94;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   } else {
    $95 = $err;
    $err = $95;
    $96 = $4;
    $97 = $0;
    $98 = (($97) + 72|0);
    HEAP32[$98>>2] = $96;
    break L1;
   }
  } else if ((($9|0) == 48321)) {
   $117 = $3;
   $118 = (1)!=($117|0);
   $119 = $118 ? -106 : 0;
   $err = $119;
   $120 = ($119|0)<(0);
   if ($120) {
    $121 = $err;
    $err = $121;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   } else {
    $122 = $err;
    $err = $122;
    $123 = $4;
    $124 = $0;
    $125 = (($124) + 92|0);
    $126 = (($125) + 4|0);
    HEAP32[$126>>2] = $123;
    $127 = $4;
    $128 = $0;
    $129 = (($128) + 92|0);
    $130 = (($129) + 88|0);
    $131 = (($130) + 76|0);
    HEAP32[$131>>2] = $127;
    break L1;
   }
  } else if ((($9|0) == 34675)) {
   $177 = $3;
   $178 = $0;
   $179 = (($178) + 92|0);
   $180 = (($179) + 36|0);
   HEAP32[$180>>2] = $177;
   $181 = $4;
   $182 = $0;
   $183 = (($182) + 92|0);
   $184 = (($183) + 32|0);
   HEAP32[$184>>2] = $181;
  } else if ((($9|0) == 34853)) {
   $206 = $4;
   $207 = $0;
   $208 = (($207) + 92|0);
   $209 = (($208) + 56|0);
   HEAP32[$209>>2] = $206;
   $210 = $pWS;
   $211 = $4;
   $212 = $0;
   $213 = (($212) + 92|0);
   $214 = (($213) + 60|0);
   $215 = (_StreamCalcIFDSize($210,$211,$214)|0);
   $errTmp = $215;
   $216 = ($215|0)<(0);
   if ($216) {
    $217 = $errTmp;
    $errTmp = $217;
   } else {
    $218 = $errTmp;
    $errTmp = $218;
   }
  } else if ((($9|0) == 48259)) {
   $167 = $3;
   $168 = (1)!=($167|0);
   $169 = $168 ? -106 : 0;
   $err = $169;
   $170 = ($169|0)<(0);
   if ($170) {
    $171 = $err;
    $err = $171;
    $533 = $err;
    STACKTOP = sp;return ($533|0);
   } else {
    $172 = $err;
    $err = $172;
    $173 = $4;
    HEAP32[$ufValue>>2] = $173;
    $174 = +HEAPF32[$ufValue>>2];
    $175 = $0;
    $176 = (($175) + 84|0);
    HEAPF32[$176>>2] = $174;
    break L1;
   }
  } else if ((($9|0) == 700)) {
   $185 = $3;
   $186 = $0;
   $187 = (($186) + 92|0);
   $188 = (($187) + 44|0);
   HEAP32[$188>>2] = $185;
   $189 = $4;
   $190 = $0;
   $191 = (($190) + 92|0);
   $192 = (($191) + 40|0);
   HEAP32[$192>>2] = $189;
  } else if ((($9|0) == 33723)) {
   $219 = $3;
   $220 = $0;
   $221 = (($220) + 92|0);
   $222 = (($221) + 68|0);
   HEAP32[$222>>2] = $219;
   $223 = $4;
   $224 = $0;
   $225 = (($224) + 92|0);
   $226 = (($225) + 64|0);
   HEAP32[$226>>2] = $223;
  } else {
   $524 = HEAP32[_stderr>>2]|0;
   $525 = $1;
   $526 = $525&65535;
   $527 = $1;
   $528 = $527&65535;
   $529 = $2;
   $530 = $529&65535;
   $531 = $3;
   $532 = $4;
   HEAP32[$vararg_buffer>>2] = $526;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $528;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $530;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $531;
   $vararg_ptr4 = (($vararg_buffer) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $532;
   (_fprintf(($524|0),(22544|0),($vararg_buffer|0))|0);
  }
 } while(0);
 $533 = $err;
 STACKTOP = sp;return ($533|0);
}
function _CalcMetadataSizeLPSTR($var,$pcInactiveMetadata,$pcbOffsetSize,$pcbCount) {
 $var = $var|0;
 $pcInactiveMetadata = $pcInactiveMetadata|0;
 $pcbOffsetSize = $pcbOffsetSize|0;
 $pcbCount = $pcbCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uiLenWithNull = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pcInactiveMetadata;
 $1 = $pcbOffsetSize;
 $2 = $pcbCount;
 $3 = HEAP32[$var>>2]|0;
 $4 = (0)!=($3|0);
 if (!($4)) {
  $21 = $0;
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = (($23) + 1)|0;
  $25 = $24&65535;
  HEAP16[$21>>1] = $25;
  STACKTOP = sp;return;
 }
 $5 = (($var) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_strlen(($6|0))|0);
 $8 = (($7) + 1)|0;
 $uiLenWithNull = $8;
 $9 = HEAP32[$var>>2]|0;
 $10 = (30)==($9|0);
 if (!($10)) {
  ___assert_fail((22592|0),(22616|0),55,(22640|0));
  // unreachable;
 }
 $11 = $uiLenWithNull;
 $12 = ($11>>>0)>(4);
 if ($12) {
  $13 = $uiLenWithNull;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13))|0;
  HEAP32[$14>>2] = $16;
 }
 $17 = $2;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $uiLenWithNull;
  $20 = $2;
  HEAP32[$20>>2] = $19;
 }
 STACKTOP = sp;return;
}
function _CalcMetadataSizeLPWSTR($var,$pcInactiveMetadata,$pcbOffsetSize,$pcbCount) {
 $var = $var|0;
 $pcInactiveMetadata = $pcInactiveMetadata|0;
 $pcbOffsetSize = $pcbOffsetSize|0;
 $pcbCount = $pcbCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uiCBWithNull = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pcInactiveMetadata;
 $1 = $pcbOffsetSize;
 $2 = $pcbCount;
 $3 = HEAP32[$var>>2]|0;
 $4 = (0)!=($3|0);
 if (!($4)) {
  $22 = $0;
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = (($24) + 1)|0;
  $26 = $25&65535;
  HEAP16[$22>>1] = $26;
  STACKTOP = sp;return;
 }
 $5 = (($var) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_wcslen($6)|0);
 $8 = (($7) + 1)|0;
 $9 = $8<<1;
 $uiCBWithNull = $9;
 $10 = HEAP32[$var>>2]|0;
 $11 = (31)==($10|0);
 if (!($11)) {
  ___assert_fail((22664|0),(22616|0),76,(22688|0));
  // unreachable;
 }
 $12 = $uiCBWithNull;
 $13 = ($12>>>0)>(4);
 if ($13) {
  $14 = $uiCBWithNull;
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14))|0;
  HEAP32[$15>>2] = $17;
 }
 $18 = $2;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $uiCBWithNull;
  $21 = $2;
  HEAP32[$21>>2] = $20;
 }
 STACKTOP = sp;return;
}
function _CalcMetadataSizeUI2($var,$pcInactiveMetadata,$pcbMetadataSize) {
 $var = $var|0;
 $pcInactiveMetadata = $pcInactiveMetadata|0;
 $pcbMetadataSize = $pcbMetadataSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pcInactiveMetadata;
 $1 = $pcbMetadataSize;
 $2 = $1;
 $1 = $2;
 $3 = HEAP32[$var>>2]|0;
 $4 = (0)!=($3|0);
 if (!($4)) {
  $7 = $0;
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = (($9) + 1)|0;
  $11 = $10&65535;
  HEAP16[$7>>1] = $11;
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$var>>2]|0;
 $6 = (18)==($5|0);
 if (!($6)) {
  ___assert_fail((22712|0),(22616|0),96,(22736|0));
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _CalcMetadataSizeUI4($var,$pcInactiveMetadata,$pcbContainer) {
 $var = $var|0;
 $pcInactiveMetadata = $pcInactiveMetadata|0;
 $pcbContainer = $pcbContainer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pcInactiveMetadata;
 $1 = $pcbContainer;
 $2 = $1;
 $1 = $2;
 $3 = HEAP32[$var>>2]|0;
 $4 = (0)!=($3|0);
 if (!($4)) {
  $7 = $0;
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = (($9) + 1)|0;
  $11 = $10&65535;
  HEAP16[$7>>1] = $11;
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$var>>2]|0;
 $6 = (19)==($5|0);
 if (!($6)) {
  ___assert_fail((22760|0),(22616|0),110,(22784|0));
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _CalcMetadataOffsetSize($pIE,$pcInactiveMetadata,$pcbMetadataSize) {
 $pIE = $pIE|0;
 $pcInactiveMetadata = $pcInactiveMetadata|0;
 $pcbMetadataSize = $pcbMetadataSize|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy13 = sp + 128|0;
 $$byval_copy12 = sp + 120|0;
 $$byval_copy11 = sp + 112|0;
 $$byval_copy10 = sp + 104|0;
 $$byval_copy9 = sp + 96|0;
 $$byval_copy8 = sp + 88|0;
 $$byval_copy7 = sp + 80|0;
 $$byval_copy6 = sp + 72|0;
 $$byval_copy5 = sp + 64|0;
 $$byval_copy4 = sp + 56|0;
 $$byval_copy3 = sp + 40|0;
 $$byval_copy2 = sp + 32|0;
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 16|0;
 $0 = $pIE;
 $1 = $pcInactiveMetadata;
 $2 = $pcbMetadataSize;
 $err = 0;
 $3 = $0;
 $4 = (($3) + 168|0);
 $5 = $1;
 $6 = $2;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy,$5,$6,0);
 $7 = $0;
 $8 = (($7) + 168|0);
 $9 = (($8) + 8|0);
 $10 = $1;
 $11 = $2;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$9+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy1,$10,$11,0);
 $12 = $0;
 $13 = (($12) + 168|0);
 $14 = (($13) + 16|0);
 $15 = $1;
 $16 = $2;
 ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$14+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy2,$15,$16,0);
 $17 = $0;
 $18 = (($17) + 168|0);
 $19 = (($18) + 24|0);
 $20 = $1;
 $21 = $2;
 ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$19+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy3,$20,$21,0);
 $22 = $0;
 $23 = (($22) + 168|0);
 $24 = (($23) + 32|0);
 $25 = $1;
 $26 = $2;
 ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$24+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy4,$25,$26,0);
 $27 = $0;
 $28 = (($27) + 168|0);
 $29 = (($28) + 40|0);
 $30 = $1;
 $31 = $2;
 ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$29+0>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$29+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy5,$30,$31,0);
 $32 = $0;
 $33 = (($32) + 168|0);
 $34 = (($33) + 48|0);
 $35 = $1;
 $36 = $2;
 ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$34+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy6,$35,$36,0);
 $37 = $0;
 $38 = (($37) + 168|0);
 $39 = (($38) + 56|0);
 $40 = $1;
 $41 = $2;
 ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$39+0>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$39+4>>2]|0;
 _CalcMetadataSizeUI2($$byval_copy7,$40,$41);
 $42 = $0;
 $43 = (($42) + 168|0);
 $44 = (($43) + 64|0);
 $45 = $1;
 $46 = $2;
 ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$44+0>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$44+4>>2]|0;
 _CalcMetadataSizeUI2($$byval_copy8,$45,$46);
 $47 = $0;
 $48 = (($47) + 168|0);
 $49 = (($48) + 72|0);
 $50 = $1;
 $51 = $2;
 ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$49+4>>2]|0;
 _CalcMetadataSizeLPWSTR($$byval_copy9,$50,$51,0);
 $52 = $0;
 $53 = (($52) + 168|0);
 $54 = (($53) + 80|0);
 $55 = $1;
 $56 = $2;
 ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$54+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy10,$55,$56,0);
 $57 = $0;
 $58 = (($57) + 168|0);
 $59 = (($58) + 88|0);
 $60 = $1;
 $61 = $2;
 ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$59+0>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$59+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy11,$60,$61,0);
 $62 = $0;
 $63 = (($62) + 168|0);
 $64 = (($63) + 96|0);
 $65 = $1;
 $66 = $2;
 ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$64+0>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$64+4>>2]|0;
 _CalcMetadataSizeUI4($$byval_copy12,$65,$66);
 $67 = $0;
 $68 = (($67) + 168|0);
 $69 = (($68) + 104|0);
 $70 = $1;
 $71 = $2;
 ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$69+0>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$69+4>>2]|0;
 _CalcMetadataSizeLPSTR($$byval_copy13,$70,$71,0);
 $72 = $err;
 STACKTOP = sp;return ($72|0);
}
function _CopyDescMetadata($pvarDst,$varSrc) {
 $pvarDst = $pvarDst|0;
 $varSrc = $varSrc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $uiSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pvarDst;
 $err = 0;
 $1 = HEAP32[$varSrc>>2]|0;
 $2 = $0;
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$varSrc>>2]|0;
 L1: do {
  switch ($3|0) {
  case 18:  {
   $41 = (($varSrc) + 4|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $0;
   $44 = (($43) + 4|0);
   HEAP16[$44>>1] = $42;
   break;
  }
  case 19:  {
   $45 = (($varSrc) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $0;
   $48 = (($47) + 4|0);
   HEAP32[$48>>2] = $46;
   break;
  }
  case 31:  {
   $22 = $0;
   HEAP32[$22>>2] = 31;
   $23 = (($varSrc) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_wcslen($24)|0);
   $26 = (($25) + 1)|0;
   $27 = $26<<1;
   $uiSize = $27;
   $28 = $0;
   $29 = (($28) + 4|0);
   $30 = $uiSize;
   $31 = (_PKAlloc($29,$30)|0);
   $err = $31;
   $32 = ($31|0)<(0);
   if ($32) {
    $33 = $err;
    $err = $33;
    $53 = $err;
    STACKTOP = sp;return ($53|0);
   } else {
    $34 = $err;
    $err = $34;
    $35 = $0;
    $36 = (($35) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($varSrc) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $uiSize;
    _memcpy(($37|0),($39|0),($40|0))|0;
    break L1;
   }
   break;
  }
  case 30:  {
   $4 = $0;
   HEAP32[$4>>2] = 30;
   $5 = (($varSrc) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_strlen(($6|0))|0);
   $8 = (($7) + 1)|0;
   $uiSize = $8;
   $9 = $0;
   $10 = (($9) + 4|0);
   $11 = $uiSize;
   $12 = (_PKAlloc($10,$11)|0);
   $err = $12;
   $13 = ($12|0)<(0);
   if ($13) {
    $14 = $err;
    $err = $14;
    $53 = $err;
    STACKTOP = sp;return ($53|0);
   } else {
    $15 = $err;
    $err = $15;
    $16 = $0;
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($varSrc) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $uiSize;
    _memcpy(($18|0),($20|0),($21|0))|0;
    break L1;
   }
   break;
  }
  case 0:  {
   $49 = $0;
   ;HEAP32[$49+0>>2]=0|0;HEAP32[$49+4>>2]=0|0;
   $50 = $0;
   $51 = HEAP32[$50>>2]|0;
   $52 = (0)==($51|0);
   if ($52) {
    break L1;
   } else {
    ___assert_fail((22840|0),(22616|0),181,(22816|0));
    // unreachable;
   }
   break;
  }
  default: {
   ___assert_fail((22808|0),(22616|0),174,(22816|0));
   // unreachable;
  }
  }
 } while(0);
 $53 = $err;
 STACKTOP = sp;return ($53|0);
}
function _WriteDescMetadata($pIE,$var,$pwmpDE,$puiCurrDescMetadataOffset,$poffPos) {
 $pIE = $pIE|0;
 $var = $var|0;
 $pwmpDE = $pwmpDE|0;
 $puiCurrDescMetadataOffset = $puiCurrDescMetadataOffset|0;
 $poffPos = $poffPos|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $err = 0, $pDEMisc = 0, $pWS = 0, $uiCount = 0, $uiDataWrittenToOffset = 0, $uiMetadataOffsetSize = 0, $uiTemp = 0, $var$byval_copy = 0, $var$byval_copy1 = 0, $var$byval_copy2 = 0, $var$byval_copy3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $var$byval_copy3 = sp + 32|0;
 $var$byval_copy2 = sp + 72|0;
 $var$byval_copy1 = sp + 64|0;
 $var$byval_copy = sp + 56|0;
 $uiMetadataOffsetSize = sp + 8|0;
 $uiCount = sp + 4|0;
 $uiDataWrittenToOffset = sp;
 $uiTemp = sp + 80|0;
 $0 = $pIE;
 $1 = $pwmpDE;
 $2 = $puiCurrDescMetadataOffset;
 $3 = $poffPos;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 284|0);
 $pDEMisc = $5;
 $6 = $0;
 $7 = (($6) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $pWS = $8;
 HEAP32[$uiMetadataOffsetSize>>2] = 0;
 HEAP32[$uiCount>>2] = 0;
 HEAP32[$uiDataWrittenToOffset>>2] = 0;
 HEAP16[$uiTemp>>1] = 0;
 $9 = $pDEMisc;
 $10 = (($9) + 80|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (0)==($11|0);
 if (!($12)) {
  $13 = $pDEMisc;
  $14 = (($13) + 84|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (0)==($15|0);
  if (!($16)) {
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = $pDEMisc;
   $20 = (($19) + 84|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($18>>>0)<=($21>>>0);
   if (!($22)) {
    ___assert_fail((22872|0),(22616|0),207,(22936|0));
    // unreachable;
   }
   $23 = HEAP32[$var>>2]|0;
   L7: do {
    switch ($23|0) {
    case 30:  {
     ;HEAP32[$var$byval_copy+0>>2]=HEAP32[$var+0>>2]|0;HEAP32[$var$byval_copy+4>>2]=HEAP32[$var+4>>2]|0;
     _CalcMetadataSizeLPSTR($var$byval_copy,$uiTemp,$uiMetadataOffsetSize,$uiCount);
     $24 = HEAP32[$uiCount>>2]|0;
     $25 = $1;
     $26 = (($25) + 4|0);
     HEAP32[$26>>2] = $24;
     $27 = $pDEMisc;
     $28 = (($27) + 80|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $2;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + ($31))|0;
     $33 = $1;
     $34 = (($33) + 8|0);
     HEAP32[$34>>2] = $32;
     $35 = $pWS;
     $36 = $3;
     $37 = $1;
     $38 = (($var) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (_WriteWmpDE($35,$36,$37,$39,$uiDataWrittenToOffset)|0);
     $err = $40;
     $41 = ($40|0)<(0);
     if ($41) {
      $42 = $err;
      $err = $42;
      $101 = $err;
      STACKTOP = sp;return ($101|0);
     } else {
      $43 = $err;
      $err = $43;
      break L7;
     }
     break;
    }
    case 31:  {
     ;HEAP32[$var$byval_copy1+0>>2]=HEAP32[$var+0>>2]|0;HEAP32[$var$byval_copy1+4>>2]=HEAP32[$var+4>>2]|0;
     _CalcMetadataSizeLPWSTR($var$byval_copy1,$uiTemp,$uiMetadataOffsetSize,$uiCount);
     $44 = HEAP32[$uiCount>>2]|0;
     $45 = $1;
     $46 = (($45) + 4|0);
     HEAP32[$46>>2] = $44;
     $47 = $pDEMisc;
     $48 = (($47) + 80|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $2;
     $51 = HEAP32[$50>>2]|0;
     $52 = (($49) + ($51))|0;
     $53 = $1;
     $54 = (($53) + 8|0);
     HEAP32[$54>>2] = $52;
     $55 = $pWS;
     $56 = $3;
     $57 = $1;
     $58 = (($var) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (_WriteWmpDE($55,$56,$57,$59,$uiDataWrittenToOffset)|0);
     $err = $60;
     $61 = ($60|0)<(0);
     if ($61) {
      $62 = $err;
      $err = $62;
      $101 = $err;
      STACKTOP = sp;return ($101|0);
     } else {
      $63 = $err;
      $err = $63;
      break L7;
     }
     break;
    }
    case 18:  {
     ;HEAP32[$var$byval_copy2+0>>2]=HEAP32[$var+0>>2]|0;HEAP32[$var$byval_copy2+4>>2]=HEAP32[$var+4>>2]|0;
     _CalcMetadataSizeUI2($var$byval_copy2,$uiTemp,$uiMetadataOffsetSize);
     $64 = $1;
     $65 = (($64) + 4|0);
     HEAP32[$65>>2] = 1;
     $66 = (($var) + 4|0);
     $67 = HEAP16[$66>>1]|0;
     $68 = $67&65535;
     $69 = $1;
     $70 = (($69) + 8|0);
     HEAP32[$70>>2] = $68;
     $71 = $pWS;
     $72 = $3;
     $73 = $1;
     $74 = (_WriteWmpDE($71,$72,$73,0,0)|0);
     $err = $74;
     $75 = ($74|0)<(0);
     if ($75) {
      $76 = $err;
      $err = $76;
      $101 = $err;
      STACKTOP = sp;return ($101|0);
     } else {
      $77 = $err;
      $err = $77;
      break L7;
     }
     break;
    }
    case 19:  {
     ;HEAP32[$var$byval_copy3+0>>2]=HEAP32[$var+0>>2]|0;HEAP32[$var$byval_copy3+4>>2]=HEAP32[$var+4>>2]|0;
     _CalcMetadataSizeUI4($var$byval_copy3,$uiTemp,$uiMetadataOffsetSize);
     $78 = $1;
     $79 = (($78) + 4|0);
     HEAP32[$79>>2] = 1;
     $80 = (($var) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $1;
     $83 = (($82) + 8|0);
     HEAP32[$83>>2] = $81;
     $84 = $pWS;
     $85 = $3;
     $86 = $1;
     $87 = (_WriteWmpDE($84,$85,$86,0,0)|0);
     $err = $87;
     $88 = ($87|0)<(0);
     if ($88) {
      $89 = $err;
      $err = $89;
      $101 = $err;
      STACKTOP = sp;return ($101|0);
     } else {
      $90 = $err;
      $err = $90;
      break L7;
     }
     break;
    }
    case 0:  {
     break;
    }
    default: {
     ___assert_fail((22808|0),(22616|0),243,(22936|0));
     // unreachable;
    }
    }
   } while(0);
   $91 = HEAP32[$uiDataWrittenToOffset>>2]|0;
   $92 = $2;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + ($91))|0;
   HEAP32[$92>>2] = $94;
   $95 = $2;
   $96 = HEAP32[$95>>2]|0;
   $97 = $pDEMisc;
   $98 = (($97) + 84|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ($96>>>0)<=($99>>>0);
   if (!($100)) {
    ___assert_fail((22872|0),(22616|0),251,(22936|0));
    // unreachable;
   }
   $101 = $err;
   STACKTOP = sp;return ($101|0);
  }
 }
 $101 = $err;
 STACKTOP = sp;return ($101|0);
}
function _WriteContainerPre($pIE) {
 $pIE = $pIE|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0;
 var $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0;
 var $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0;
 var $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0;
 var $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0;
 var $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0.0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0.0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $IIMM = 0, $OFFSET_OF_PFD = 0, $PI = 0, $cInactiveMetadata = 0, $cWmpDEs = 0, $cbMetadataOffsetSize = 0, $err = 0, $i = 0, $offPos = 0, $pDEMisc = 0, $pGuid = 0, $pWS = 0, $pbEXIFMetadata = 0, $pbGPSInfoMetadata = 0, $uiCurrDescMetadataOffset = 0, $uiTemp = 0, $uiTemp1 = 0;
 var $uiTemp2 = 0, $uiTemp3 = 0, $uiTemp4 = 0, $uiTemp5 = 0, $wmpDE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy13 = sp + 184|0;
 $$byval_copy12 = sp + 136|0;
 $$byval_copy11 = sp + 144|0;
 $$byval_copy10 = sp + 152|0;
 $$byval_copy9 = sp + 160|0;
 $$byval_copy8 = sp + 168|0;
 $$byval_copy7 = sp + 176|0;
 $$byval_copy6 = sp + 192|0;
 $$byval_copy5 = sp + 200|0;
 $$byval_copy4 = sp + 208|0;
 $$byval_copy3 = sp + 216|0;
 $$byval_copy2 = sp + 224|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 128|0;
 $PI = sp + 8|0;
 $offPos = sp + 48|0;
 $IIMM = sp + 244|0;
 $cbMetadataOffsetSize = sp + 52|0;
 $cInactiveMetadata = sp + 240|0;
 $uiCurrDescMetadataOffset = sp + 56|0;
 $wmpDE = sp + 60|0;
 $pbEXIFMetadata = sp + 80|0;
 $pbGPSInfoMetadata = sp + 84|0;
 $uiTemp = sp + 92|0;
 $uiTemp1 = sp + 96|0;
 $uiTemp2 = sp + 100|0;
 $uiTemp3 = sp + 104|0;
 $uiTemp4 = sp + 108|0;
 $uiTemp5 = sp + 112|0;
 $0 = $pIE;
 $err = 0;
 $OFFSET_OF_PFD = 32;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $pWS = $3;
 $4 = $0;
 $5 = (($4) + 284|0);
 $pDEMisc = $5;
 HEAP32[$offPos>>2] = 0;
 ;HEAP8[$IIMM+0>>0]=HEAP8[22960+0>>0]|0;HEAP8[$IIMM+1>>0]=HEAP8[22960+1>>0]|0;
 HEAP32[$cbMetadataOffsetSize>>2] = 0;
 HEAP16[$cInactiveMetadata>>1] = 0;
 HEAP32[$uiCurrDescMetadataOffset>>2] = 0;
 $cWmpDEs = 30;
 ;HEAP32[$wmpDE+0>>2]=0|0;HEAP32[$wmpDE+4>>2]=0|0;HEAP32[$wmpDE+8>>2]=0|0;
 $i = 0;
 HEAP32[$pbEXIFMetadata>>2] = 0;
 HEAP32[$pbGPSInfoMetadata>>2] = 0;
 $6 = HEAP32[16568>>2]|0;
 $7 = ($6*360)|0;
 $8 = (($7>>>0) / 12)&-1;
 $9 = (($8) + 4)|0;
 $10 = ($9>>>0)>(32);
 if (!($10)) {
  ___assert_fail((23696|0),(22616|0),322,(23776|0));
  // unreachable;
 }
 $11 = $pWS;
 $12 = (($11) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $pWS;
 $15 = (FUNCTION_TABLE_iii[$13 & 255]($14,$offPos)|0);
 $err = $15;
 $16 = ($15|0)<(0);
 L4: do {
  if ($16) {
   $17 = $err;
   $err = $17;
  } else {
   $18 = $err;
   $err = $18;
   $19 = HEAP32[$offPos>>2]|0;
   $20 = (0)!=($19|0);
   $21 = $20 ? -106 : 0;
   $err = $21;
   $22 = ($21|0)<(0);
   if ($22) {
    $23 = $err;
    $err = $23;
    break;
   }
   $24 = $err;
   $err = $24;
   $25 = $pWS;
   $26 = (($25) + 40|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $pWS;
   $29 = (FUNCTION_TABLE_iiii[$27 & 255]($28,$IIMM,2)|0);
   $err = $29;
   $30 = ($29|0)<(0);
   if ($30) {
    $31 = $err;
    $err = $31;
    break;
   }
   $32 = $err;
   $err = $32;
   $33 = HEAP32[$offPos>>2]|0;
   $34 = (($33) + 2)|0;
   HEAP32[$offPos>>2] = $34;
   $35 = $pWS;
   $36 = HEAP32[$offPos>>2]|0;
   $37 = (_PutUShort($35,$36,444)|0);
   $err = $37;
   $38 = ($37|0)<(0);
   if ($38) {
    $39 = $err;
    $err = $39;
    break;
   }
   $40 = $err;
   $err = $40;
   $41 = HEAP32[$offPos>>2]|0;
   $42 = (($41) + 2)|0;
   HEAP32[$offPos>>2] = $42;
   $43 = $pWS;
   $44 = HEAP32[$offPos>>2]|0;
   $45 = (_PutULong($43,$44,32)|0);
   $err = $45;
   $46 = ($45|0)<(0);
   if ($46) {
    $47 = $err;
    $err = $47;
    break;
   }
   $48 = $err;
   $err = $48;
   $49 = HEAP32[$offPos>>2]|0;
   $50 = (($49) + 4)|0;
   HEAP32[$offPos>>2] = $50;
   $51 = HEAP32[$offPos>>2]|0;
   $52 = $pDEMisc;
   $53 = (($52) + 16|0);
   HEAP32[$53>>2] = $51;
   $54 = $0;
   $55 = (($54) + 68|0);
   HEAP32[$PI>>2] = $55;
   (_PixelFormatLookup($PI,0)|0);
   $56 = $0;
   $57 = (($56) + 68|0);
   $pGuid = $57;
   $58 = $pWS;
   $59 = HEAP32[$offPos>>2]|0;
   $60 = $pGuid;
   $61 = HEAP32[$60>>2]|0;
   $62 = (_PutULong($58,$59,$61)|0);
   $err = $62;
   $63 = ($62|0)<(0);
   if ($63) {
    $64 = $err;
    $err = $64;
    break;
   }
   $65 = $err;
   $err = $65;
   $66 = $pWS;
   $67 = HEAP32[$offPos>>2]|0;
   $68 = (($67) + 4)|0;
   $69 = $pGuid;
   $70 = (($69) + 4|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = (_PutUShort($66,$68,$71)|0);
   $err = $72;
   $73 = ($72|0)<(0);
   if ($73) {
    $74 = $err;
    $err = $74;
    break;
   }
   $75 = $err;
   $err = $75;
   $76 = $pWS;
   $77 = HEAP32[$offPos>>2]|0;
   $78 = (($77) + 6)|0;
   $79 = $pGuid;
   $80 = (($79) + 6|0);
   $81 = HEAP16[$80>>1]|0;
   $82 = (_PutUShort($76,$78,$81)|0);
   $err = $82;
   $83 = ($82|0)<(0);
   if ($83) {
    $84 = $err;
    $err = $84;
    break;
   }
   $85 = $err;
   $err = $85;
   $86 = $pWS;
   $87 = (($86) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $pWS;
   $90 = $pGuid;
   $91 = (($90) + 8|0);
   $92 = (FUNCTION_TABLE_iiii[$88 & 255]($89,$91,8)|0);
   $err = $92;
   $93 = ($92|0)<(0);
   if ($93) {
    $94 = $err;
    $err = $94;
    break;
   }
   $95 = $err;
   $err = $95;
   $96 = HEAP32[$offPos>>2]|0;
   $97 = (($96) + 16)|0;
   HEAP32[$offPos>>2] = $97;
   $98 = $0;
   $99 = (_CalcMetadataOffsetSize($98,$cInactiveMetadata,$cbMetadataOffsetSize)|0);
   $err = $99;
   $100 = ($99|0)<(0);
   if ($100) {
    $101 = $err;
    $err = $101;
    break;
   }
   $102 = $err;
   $err = $102;
   $103 = HEAP16[$cInactiveMetadata>>1]|0;
   $104 = $103&65535;
   $105 = $cWmpDEs;
   $106 = $105&65535;
   $107 = (($106) - ($104))|0;
   $108 = $107&65535;
   $cWmpDEs = $108;
   $109 = HEAP32[$offPos>>2]|0;
   $110 = ($109>>>0)<=(32);
   if (!($110)) {
    ___assert_fail((23800|0),(22616|0),358,(23776|0));
    // unreachable;
   }
   $111 = HEAP32[$offPos>>2]|0;
   $112 = ($111>>>0)<(32);
   if ($112) {
    $113 = $pWS;
    $114 = (($113) + 40|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $pWS;
    $117 = HEAP32[$offPos>>2]|0;
    $118 = (32 - ($117))|0;
    $119 = (FUNCTION_TABLE_iiii[$115 & 255]($116,23328,$118)|0);
    $err = $119;
    $120 = ($119|0)<(0);
    if ($120) {
     $121 = $err;
     $err = $121;
     break;
    }
    $122 = $err;
    $err = $122;
   }
   HEAP32[$offPos>>2] = 32;
   $123 = $0;
   $124 = (($123) + 284|0);
   $125 = (($124) + 65992|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $0;
    $129 = (($128) + 284|0);
    $130 = (($129) + 168|0);
    $131 = (($130) + 36|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = $132&255;
    $134 = ($133|0)!=(2);
    if ($134) {
     label = 42;
    }
   } else {
    label = 42;
   }
   if ((label|0) == 42) {
    $135 = $cWmpDEs;
    $136 = $135&65535;
    $137 = (($136) - 2)|0;
    $138 = $137&65535;
    $cWmpDEs = $138;
   }
   $139 = $0;
   $140 = (($139) + 156|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (0)==($141|0);
   if ($142) {
    $143 = $cWmpDEs;
    $144 = $143&65535;
    $145 = (($144) - 1)|0;
    $146 = $145&65535;
    $cWmpDEs = $146;
   }
   $147 = $0;
   $148 = (($147) + 148|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (0)==($149|0);
   if ($150) {
    $151 = $cWmpDEs;
    $152 = $151&65535;
    $153 = (($152) - 1)|0;
    $154 = $153&65535;
    $cWmpDEs = $154;
   }
   $155 = $0;
   $156 = (($155) + 164|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = (0)==($157|0);
   if ($158) {
    $159 = $cWmpDEs;
    $160 = $159&65535;
    $161 = (($160) - 1)|0;
    $162 = $161&65535;
    $cWmpDEs = $162;
   }
   $163 = $0;
   $164 = (($163) + 132|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (0)==($165|0);
   if ($166) {
    $167 = $cWmpDEs;
    $168 = $167&65535;
    $169 = (($168) - 1)|0;
    $170 = $169&65535;
    $cWmpDEs = $170;
   }
   $171 = $0;
   $172 = (($171) + 124|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (0)==($173|0);
   if ($174) {
    $175 = $cWmpDEs;
    $176 = $175&65535;
    $177 = (($176) - 1)|0;
    $178 = $177&65535;
    $cWmpDEs = $178;
   }
   $179 = $0;
   $180 = (($179) + 140|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (0)==($181|0);
   if ($182) {
    $183 = $cWmpDEs;
    $184 = $183&65535;
    $185 = (($184) - 1)|0;
    $186 = $185&65535;
    $cWmpDEs = $186;
   }
   $187 = HEAP32[$offPos>>2]|0;
   $188 = (($187) + 2)|0;
   $189 = HEAP32[16568>>2]|0;
   $190 = $cWmpDEs;
   $191 = $190&65535;
   $192 = Math_imul($189, $191)|0;
   $193 = (($188) + ($192))|0;
   $194 = (($193) + 4)|0;
   $195 = $pDEMisc;
   HEAP32[$195>>2] = $194;
   $196 = HEAP32[$cbMetadataOffsetSize>>2]|0;
   $197 = ($196>>>0)>(0);
   if ($197) {
    $198 = HEAP32[$cbMetadataOffsetSize>>2]|0;
    $199 = $pDEMisc;
    $200 = (($199) + 84|0);
    HEAP32[$200>>2] = $198;
    $201 = $pDEMisc;
    $202 = HEAP32[$201>>2]|0;
    $203 = $pDEMisc;
    $204 = (($203) + 80|0);
    HEAP32[$204>>2] = $202;
    $205 = HEAP32[$cbMetadataOffsetSize>>2]|0;
    $206 = $pDEMisc;
    $207 = HEAP32[$206>>2]|0;
    $208 = (($207) + ($205))|0;
    HEAP32[$206>>2] = $208;
   }
   $209 = $0;
   $210 = (($209) + 156|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ($211>>>0)>(0);
   if ($212) {
    $213 = $pDEMisc;
    $214 = HEAP32[$213>>2]|0;
    $215 = $pDEMisc;
    $216 = (($215) + 40|0);
    HEAP32[$216>>2] = $214;
    $217 = $0;
    $218 = (($217) + 156|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = $pDEMisc;
    $221 = HEAP32[$220>>2]|0;
    $222 = (($221) + ($219))|0;
    HEAP32[$220>>2] = $222;
   }
   $223 = $0;
   $224 = (($223) + 148|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = ($225>>>0)>(0);
   if ($226) {
    $227 = $pDEMisc;
    $228 = HEAP32[$227>>2]|0;
    $229 = $pDEMisc;
    $230 = (($229) + 64|0);
    HEAP32[$230>>2] = $228;
    $231 = $0;
    $232 = (($231) + 148|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $pDEMisc;
    $235 = HEAP32[$234>>2]|0;
    $236 = (($235) + ($233))|0;
    HEAP32[$234>>2] = $236;
   }
   $237 = $0;
   $238 = (($237) + 164|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = ($239>>>0)>(0);
   if ($240) {
    $241 = $pDEMisc;
    $242 = HEAP32[$241>>2]|0;
    $243 = $pDEMisc;
    $244 = (($243) + 72|0);
    HEAP32[$244>>2] = $242;
    $245 = $0;
    $246 = (($245) + 164|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = $pDEMisc;
    $249 = HEAP32[$248>>2]|0;
    $250 = (($249) + ($247))|0;
    HEAP32[$248>>2] = $250;
   }
   $251 = $0;
   $252 = (($251) + 132|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = ($253>>>0)>(0);
   if ($254) {
    $255 = $pDEMisc;
    $256 = HEAP32[$255>>2]|0;
    $257 = $pDEMisc;
    $258 = (($257) + 48|0);
    HEAP32[$258>>2] = $256;
    $259 = $pDEMisc;
    $260 = HEAP32[$259>>2]|0;
    $261 = $260 & 1;
    $262 = $pDEMisc;
    $263 = HEAP32[$262>>2]|0;
    $264 = (($263) + ($261))|0;
    HEAP32[$262>>2] = $264;
    $265 = $0;
    $266 = (($265) + 132|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = $pDEMisc;
    $269 = HEAP32[$268>>2]|0;
    $270 = (($269) + ($267))|0;
    HEAP32[$268>>2] = $270;
   }
   $271 = $0;
   $272 = (($271) + 124|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = ($273>>>0)>(0);
   if ($274) {
    $275 = $pDEMisc;
    $276 = HEAP32[$275>>2]|0;
    $277 = $pDEMisc;
    $278 = (($277) + 32|0);
    HEAP32[$278>>2] = $276;
    $279 = $0;
    $280 = (($279) + 124|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = $pDEMisc;
    $283 = HEAP32[$282>>2]|0;
    $284 = (($283) + ($281))|0;
    HEAP32[$282>>2] = $284;
   }
   $285 = $0;
   $286 = (($285) + 140|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = ($287>>>0)>(0);
   if ($288) {
    $289 = $pDEMisc;
    $290 = HEAP32[$289>>2]|0;
    $291 = $pDEMisc;
    $292 = (($291) + 56|0);
    HEAP32[$292>>2] = $290;
    $293 = $pDEMisc;
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & 1;
    $296 = $pDEMisc;
    $297 = HEAP32[$296>>2]|0;
    $298 = (($297) + ($295))|0;
    HEAP32[$296>>2] = $298;
    $299 = $0;
    $300 = (($299) + 140|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = $pDEMisc;
    $303 = HEAP32[$302>>2]|0;
    $304 = (($303) + ($301))|0;
    HEAP32[$302>>2] = $304;
   }
   $305 = $pWS;
   $306 = HEAP32[$offPos>>2]|0;
   $307 = $cWmpDEs;
   $308 = (_PutUShort($305,$306,$307)|0);
   $err = $308;
   $309 = ($308|0)<(0);
   if ($309) {
    $310 = $err;
    $err = $310;
    break;
   }
   $311 = $err;
   $err = $311;
   $312 = HEAP32[$offPos>>2]|0;
   $313 = (($312) + 2)|0;
   HEAP32[$offPos>>2] = $313;
   $314 = $pWS;
   $315 = (($314) + 40|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $pWS;
   $318 = HEAP32[16568>>2]|0;
   $319 = $cWmpDEs;
   $320 = $319&65535;
   $321 = Math_imul($318, $320)|0;
   $322 = (($321) + 4)|0;
   $323 = (FUNCTION_TABLE_iiii[$316 & 255]($317,23328,$322)|0);
   $err = $323;
   $324 = ($323|0)<(0);
   if ($324) {
    $325 = $err;
    $err = $325;
    break;
   }
   $326 = $err;
   $err = $326;
   $327 = $i;
   $328 = (($327) + 1)|0;
   $i = $328;
   $329 = (22968 + (($327*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$329+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$329+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$329+8>>2]|0;
   $330 = HEAP16[$wmpDE>>1]|0;
   $331 = $330&65535;
   $332 = (269)==($331|0);
   if (!($332)) {
    ___assert_fail((23824|0),(22616|0),436,(23776|0));
    // unreachable;
   }
   $333 = $0;
   $334 = $0;
   $335 = (($334) + 168|0);
   $336 = (($335) + 80|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$336+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$336+4>>2]|0;
   $337 = (_WriteDescMetadata($333,$$byval_copy,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $337;
   $338 = ($337|0)<(0);
   if ($338) {
    $339 = $err;
    $err = $339;
    break;
   }
   $340 = $err;
   $err = $340;
   $341 = $i;
   $342 = (($341) + 1)|0;
   $i = $342;
   $343 = (22968 + (($341*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$343+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$343+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$343+8>>2]|0;
   $344 = HEAP16[$wmpDE>>1]|0;
   $345 = $344&65535;
   $346 = (270)==($345|0);
   if (!($346)) {
    ___assert_fail((23864|0),(22616|0),441,(23776|0));
    // unreachable;
   }
   $347 = $0;
   $348 = $0;
   $349 = (($348) + 168|0);
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$349+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$349+4>>2]|0;
   $350 = (_WriteDescMetadata($347,$$byval_copy1,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $350;
   $351 = ($350|0)<(0);
   if ($351) {
    $352 = $err;
    $err = $352;
    break;
   }
   $353 = $err;
   $err = $353;
   $354 = $i;
   $355 = (($354) + 1)|0;
   $i = $355;
   $356 = (22968 + (($354*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$356+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$356+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$356+8>>2]|0;
   $357 = HEAP16[$wmpDE>>1]|0;
   $358 = $357&65535;
   $359 = (271)==($358|0);
   if (!($359)) {
    ___assert_fail((23904|0),(22616|0),446,(23776|0));
    // unreachable;
   }
   $360 = $0;
   $361 = $0;
   $362 = (($361) + 168|0);
   $363 = (($362) + 8|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$363+0>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$363+4>>2]|0;
   $364 = (_WriteDescMetadata($360,$$byval_copy2,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $364;
   $365 = ($364|0)<(0);
   if ($365) {
    $366 = $err;
    $err = $366;
    break;
   }
   $367 = $err;
   $err = $367;
   $368 = $i;
   $369 = (($368) + 1)|0;
   $i = $369;
   $370 = (22968 + (($368*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$370+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$370+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$370+8>>2]|0;
   $371 = HEAP16[$wmpDE>>1]|0;
   $372 = $371&65535;
   $373 = (272)==($372|0);
   if (!($373)) {
    ___assert_fail((23936|0),(22616|0),451,(23776|0));
    // unreachable;
   }
   $374 = $0;
   $375 = $0;
   $376 = (($375) + 168|0);
   $377 = (($376) + 16|0);
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$377+0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$377+4>>2]|0;
   $378 = (_WriteDescMetadata($374,$$byval_copy3,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $378;
   $379 = ($378|0)<(0);
   if ($379) {
    $380 = $err;
    $err = $380;
    break;
   }
   $381 = $err;
   $err = $381;
   $382 = $i;
   $383 = (($382) + 1)|0;
   $i = $383;
   $384 = (22968 + (($382*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$384+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$384+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$384+8>>2]|0;
   $385 = HEAP16[$wmpDE>>1]|0;
   $386 = $385&65535;
   $387 = (285)==($386|0);
   if (!($387)) {
    ___assert_fail((23976|0),(22616|0),456,(23776|0));
    // unreachable;
   }
   $388 = $0;
   $389 = $0;
   $390 = (($389) + 168|0);
   $391 = (($390) + 88|0);
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$391+0>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$391+4>>2]|0;
   $392 = (_WriteDescMetadata($388,$$byval_copy4,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $392;
   $393 = ($392|0)<(0);
   if ($393) {
    $394 = $err;
    $err = $394;
    break;
   }
   $395 = $err;
   $err = $395;
   $396 = $i;
   $397 = (($396) + 1)|0;
   $i = $397;
   $398 = (22968 + (($396*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$398+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$398+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$398+8>>2]|0;
   $399 = HEAP16[$wmpDE>>1]|0;
   $400 = $399&65535;
   $401 = (297)==($400|0);
   if (!($401)) {
    ___assert_fail((24008|0),(22616|0),461,(23776|0));
    // unreachable;
   }
   $402 = $0;
   $403 = $0;
   $404 = (($403) + 168|0);
   $405 = (($404) + 96|0);
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$405+0>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$405+4>>2]|0;
   $406 = (_WriteDescMetadata($402,$$byval_copy5,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $406;
   $407 = ($406|0)<(0);
   if ($407) {
    $408 = $err;
    $err = $408;
    break;
   }
   $409 = $err;
   $err = $409;
   $410 = $i;
   $411 = (($410) + 1)|0;
   $i = $411;
   $412 = (22968 + (($410*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$412+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$412+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$412+8>>2]|0;
   $413 = HEAP16[$wmpDE>>1]|0;
   $414 = $413&65535;
   $415 = (305)==($414|0);
   if (!($415)) {
    ___assert_fail((24040|0),(22616|0),466,(23776|0));
    // unreachable;
   }
   $416 = $0;
   $417 = $0;
   $418 = (($417) + 168|0);
   $419 = (($418) + 24|0);
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$419+0>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$419+4>>2]|0;
   $420 = (_WriteDescMetadata($416,$$byval_copy6,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $420;
   $421 = ($420|0)<(0);
   if ($421) {
    $422 = $err;
    $err = $422;
    break;
   }
   $423 = $err;
   $err = $423;
   $424 = $i;
   $425 = (($424) + 1)|0;
   $i = $425;
   $426 = (22968 + (($424*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$426+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$426+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$426+8>>2]|0;
   $427 = HEAP16[$wmpDE>>1]|0;
   $428 = $427&65535;
   $429 = (306)==($428|0);
   if (!($429)) {
    ___assert_fail((24072|0),(22616|0),471,(23776|0));
    // unreachable;
   }
   $430 = $0;
   $431 = $0;
   $432 = (($431) + 168|0);
   $433 = (($432) + 32|0);
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$433+0>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$433+4>>2]|0;
   $434 = (_WriteDescMetadata($430,$$byval_copy7,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $434;
   $435 = ($434|0)<(0);
   if ($435) {
    $436 = $err;
    $err = $436;
    break;
   }
   $437 = $err;
   $err = $437;
   $438 = $i;
   $439 = (($438) + 1)|0;
   $i = $439;
   $440 = (22968 + (($438*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$440+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$440+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$440+8>>2]|0;
   $441 = HEAP16[$wmpDE>>1]|0;
   $442 = $441&65535;
   $443 = (315)==($442|0);
   if (!($443)) {
    ___assert_fail((24104|0),(22616|0),476,(23776|0));
    // unreachable;
   }
   $444 = $0;
   $445 = $0;
   $446 = (($445) + 168|0);
   $447 = (($446) + 40|0);
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$447+0>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$447+4>>2]|0;
   $448 = (_WriteDescMetadata($444,$$byval_copy8,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $448;
   $449 = ($448|0)<(0);
   if ($449) {
    $450 = $err;
    $err = $450;
    break;
   }
   $451 = $err;
   $err = $451;
   $452 = $i;
   $453 = (($452) + 1)|0;
   $i = $453;
   $454 = (22968 + (($452*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$454+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$454+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$454+8>>2]|0;
   $455 = HEAP16[$wmpDE>>1]|0;
   $456 = $455&65535;
   $457 = (316)==($456|0);
   if (!($457)) {
    ___assert_fail((24136|0),(22616|0),481,(23776|0));
    // unreachable;
   }
   $458 = $0;
   $459 = $0;
   $460 = (($459) + 168|0);
   $461 = (($460) + 104|0);
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$461+0>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$461+4>>2]|0;
   $462 = (_WriteDescMetadata($458,$$byval_copy9,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $462;
   $463 = ($462|0)<(0);
   if ($463) {
    $464 = $err;
    $err = $464;
    break;
   }
   $465 = $err;
   $err = $465;
   $466 = $i;
   $467 = (($466) + 1)|0;
   $i = $467;
   $468 = (22968 + (($466*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$468+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$468+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$468+8>>2]|0;
   $469 = HEAP16[$wmpDE>>1]|0;
   $470 = $469&65535;
   $471 = (18246)==($470|0);
   if (!($471)) {
    ___assert_fail((24176|0),(22616|0),486,(23776|0));
    // unreachable;
   }
   $472 = $0;
   $473 = $0;
   $474 = (($473) + 168|0);
   $475 = (($474) + 56|0);
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$475+0>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$475+4>>2]|0;
   $476 = (_WriteDescMetadata($472,$$byval_copy10,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $476;
   $477 = ($476|0)<(0);
   if ($477) {
    $478 = $err;
    $err = $478;
    break;
   }
   $479 = $err;
   $err = $479;
   $480 = $i;
   $481 = (($480) + 1)|0;
   $i = $481;
   $482 = (22968 + (($480*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$482+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$482+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$482+8>>2]|0;
   $483 = HEAP16[$wmpDE>>1]|0;
   $484 = $483&65535;
   $485 = (18249)==($484|0);
   if (!($485)) {
    ___assert_fail((24216|0),(22616|0),491,(23776|0));
    // unreachable;
   }
   $486 = $0;
   $487 = $0;
   $488 = (($487) + 168|0);
   $489 = (($488) + 64|0);
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$489+0>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$489+4>>2]|0;
   $490 = (_WriteDescMetadata($486,$$byval_copy11,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $490;
   $491 = ($490|0)<(0);
   if ($491) {
    $492 = $err;
    $err = $492;
    break;
   }
   $493 = $err;
   $err = $493;
   $494 = $i;
   $495 = (($494) + 1)|0;
   $i = $495;
   $496 = (22968 + (($494*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$496+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$496+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$496+8>>2]|0;
   $497 = HEAP16[$wmpDE>>1]|0;
   $498 = $497&65535;
   $499 = (33432)==($498|0);
   if (!($499)) {
    ___assert_fail((24256|0),(22616|0),496,(23776|0));
    // unreachable;
   }
   $500 = $0;
   $501 = $0;
   $502 = (($501) + 168|0);
   $503 = (($502) + 48|0);
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$503+0>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$503+4>>2]|0;
   $504 = (_WriteDescMetadata($500,$$byval_copy12,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $504;
   $505 = ($504|0)<(0);
   if ($505) {
    $506 = $err;
    $err = $506;
    break;
   }
   $507 = $err;
   $err = $507;
   $508 = $i;
   $509 = (($508) + 1)|0;
   $i = $509;
   $510 = (22968 + (($508*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$510+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$510+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$510+8>>2]|0;
   $511 = HEAP16[$wmpDE>>1]|0;
   $512 = $511&65535;
   $513 = (40091)==($512|0);
   if (!($513)) {
    ___assert_fail((24288|0),(22616|0),501,(23776|0));
    // unreachable;
   }
   $514 = $0;
   $515 = $0;
   $516 = (($515) + 168|0);
   $517 = (($516) + 72|0);
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$517+0>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$517+4>>2]|0;
   $518 = (_WriteDescMetadata($514,$$byval_copy13,$wmpDE,$uiCurrDescMetadataOffset,$offPos)|0);
   $err = $518;
   $519 = ($518|0)<(0);
   if ($519) {
    $520 = $err;
    $err = $520;
    break;
   }
   $521 = $err;
   $err = $521;
   $522 = $i;
   $523 = (($522) + 1)|0;
   $i = $523;
   $524 = (22968 + (($522*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$524+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$524+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$524+8>>2]|0;
   $525 = HEAP16[$wmpDE>>1]|0;
   $526 = $525&65535;
   $527 = (700)==($526|0);
   if (!($527)) {
    ___assert_fail((24320|0),(22616|0),507,(23776|0));
    // unreachable;
   }
   $528 = $0;
   $529 = (($528) + 156|0);
   $530 = HEAP32[$529>>2]|0;
   $531 = ($530>>>0)>(0);
   if ($531) {
    $532 = $0;
    $533 = (($532) + 156|0);
    $534 = HEAP32[$533>>2]|0;
    $535 = (($wmpDE) + 4|0);
    HEAP32[$535>>2] = $534;
    $536 = $pDEMisc;
    $537 = (($536) + 40|0);
    $538 = HEAP32[$537>>2]|0;
    $539 = (($wmpDE) + 8|0);
    HEAP32[$539>>2] = $538;
    $540 = $pWS;
    $541 = $0;
    $542 = (($541) + 152|0);
    $543 = HEAP32[$542>>2]|0;
    $544 = (_WriteWmpDE($540,$offPos,$wmpDE,$543,$uiTemp)|0);
    $err = $544;
    $545 = ($544|0)<(0);
    if ($545) {
     $546 = $err;
     $err = $546;
     break;
    }
    $547 = $err;
    $err = $547;
   }
   $548 = $i;
   $549 = (($548) + 1)|0;
   $i = $549;
   $550 = (22968 + (($548*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$550+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$550+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$550+8>>2]|0;
   $551 = HEAP16[$wmpDE>>1]|0;
   $552 = $551&65535;
   $553 = (33723)==($552|0);
   if (!($553)) {
    ___assert_fail((24360|0),(22616|0),518,(23776|0));
    // unreachable;
   }
   $554 = $0;
   $555 = (($554) + 148|0);
   $556 = HEAP32[$555>>2]|0;
   $557 = ($556>>>0)>(0);
   if ($557) {
    $558 = $0;
    $559 = (($558) + 148|0);
    $560 = HEAP32[$559>>2]|0;
    $561 = (($wmpDE) + 4|0);
    HEAP32[$561>>2] = $560;
    $562 = $pDEMisc;
    $563 = (($562) + 64|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = (($wmpDE) + 8|0);
    HEAP32[$565>>2] = $564;
    $566 = $pWS;
    $567 = $0;
    $568 = (($567) + 144|0);
    $569 = HEAP32[$568>>2]|0;
    $570 = (_WriteWmpDE($566,$offPos,$wmpDE,$569,$uiTemp1)|0);
    $err = $570;
    $571 = ($570|0)<(0);
    if ($571) {
     $572 = $err;
     $err = $572;
     break;
    }
    $573 = $err;
    $err = $573;
   }
   $574 = $i;
   $575 = (($574) + 1)|0;
   $i = $575;
   $576 = (22968 + (($574*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$576+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$576+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$576+8>>2]|0;
   $577 = HEAP16[$wmpDE>>1]|0;
   $578 = $577&65535;
   $579 = (34377)==($578|0);
   if (!($579)) {
    ___assert_fail((24400|0),(22616|0),529,(23776|0));
    // unreachable;
   }
   $580 = $0;
   $581 = (($580) + 164|0);
   $582 = HEAP32[$581>>2]|0;
   $583 = ($582>>>0)>(0);
   if ($583) {
    $584 = $0;
    $585 = (($584) + 164|0);
    $586 = HEAP32[$585>>2]|0;
    $587 = (($wmpDE) + 4|0);
    HEAP32[$587>>2] = $586;
    $588 = $pDEMisc;
    $589 = (($588) + 72|0);
    $590 = HEAP32[$589>>2]|0;
    $591 = (($wmpDE) + 8|0);
    HEAP32[$591>>2] = $590;
    $592 = $pWS;
    $593 = $0;
    $594 = (($593) + 160|0);
    $595 = HEAP32[$594>>2]|0;
    $596 = (_WriteWmpDE($592,$offPos,$wmpDE,$595,$uiTemp2)|0);
    $err = $596;
    $597 = ($596|0)<(0);
    if ($597) {
     $598 = $err;
     $err = $598;
     break;
    }
    $599 = $err;
    $err = $599;
   }
   $600 = $i;
   $601 = (($600) + 1)|0;
   $i = $601;
   $602 = (22968 + (($600*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$602+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$602+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$602+8>>2]|0;
   $603 = HEAP16[$wmpDE>>1]|0;
   $604 = $603&65535;
   $605 = (34665)==($604|0);
   if (!($605)) {
    ___assert_fail((24440|0),(22616|0),540,(23776|0));
    // unreachable;
   }
   $606 = $0;
   $607 = (($606) + 132|0);
   $608 = HEAP32[$607>>2]|0;
   $609 = ($608>>>0)>(0);
   if ($609) {
    $610 = $pDEMisc;
    $611 = (($610) + 48|0);
    $612 = HEAP32[$611>>2]|0;
    $613 = $612 & 1;
    $614 = ($613|0)!=(0);
    if ($614) {
     $615 = $pWS;
     $616 = (($615) + 44|0);
     $617 = HEAP32[$616>>2]|0;
     $618 = $pWS;
     $619 = $pDEMisc;
     $620 = (($619) + 48|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = (FUNCTION_TABLE_iii[$617 & 255]($618,$621)|0);
     $err = $622;
     $623 = ($622|0)<(0);
     if ($623) {
      $624 = $err;
      $err = $624;
      break;
     }
     $625 = $err;
     $err = $625;
     $626 = $pWS;
     $627 = (($626) + 40|0);
     $628 = HEAP32[$627>>2]|0;
     $629 = $pWS;
     $630 = (FUNCTION_TABLE_iiii[$628 & 255]($629,23328,1)|0);
     $err = $630;
     $631 = ($630|0)<(0);
     if ($631) {
      $632 = $err;
      $err = $632;
      break;
     }
     $633 = $err;
     $err = $633;
    }
    $634 = $pDEMisc;
    $635 = (($634) + 48|0);
    $636 = HEAP32[$635>>2]|0;
    $637 = $636 & 1;
    $638 = $pDEMisc;
    $639 = (($638) + 48|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = (($640) + ($637))|0;
    HEAP32[$639>>2] = $641;
    $642 = $pDEMisc;
    $643 = (($642) + 48|0);
    $644 = HEAP32[$643>>2]|0;
    $645 = (($wmpDE) + 8|0);
    HEAP32[$645>>2] = $644;
    $646 = $pWS;
    $647 = (_WriteWmpDE($646,$offPos,$wmpDE,0,0)|0);
    $err = $647;
    $648 = ($647|0)<(0);
    if ($648) {
     $649 = $err;
     $err = $649;
     break;
    }
    $650 = $err;
    $err = $650;
    $651 = $0;
    $652 = (($651) + 132|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = (_PKAlloc($pbEXIFMetadata,$653)|0);
    $err = $654;
    $655 = ($654|0)<(0);
    if ($655) {
     $656 = $err;
     $err = $656;
     break;
    }
    $657 = $err;
    $err = $657;
    $658 = $pDEMisc;
    $659 = (($658) + 48|0);
    $660 = HEAP32[$659>>2]|0;
    HEAP32[$uiTemp3>>2] = $660;
    $661 = $0;
    $662 = (($661) + 128|0);
    $663 = HEAP32[$662>>2]|0;
    $664 = $0;
    $665 = (($664) + 132|0);
    $666 = HEAP32[$665>>2]|0;
    $667 = HEAP32[$pbEXIFMetadata>>2]|0;
    $668 = HEAP32[$uiTemp3>>2]|0;
    $669 = (0 - ($668))|0;
    $670 = (($667) + ($669)|0);
    $671 = HEAP32[$uiTemp3>>2]|0;
    $672 = $0;
    $673 = (($672) + 132|0);
    $674 = HEAP32[$673>>2]|0;
    $675 = (($671) + ($674))|0;
    $676 = (_BufferCopyIFD($663,$666,0,73,$670,$675,$uiTemp3)|0);
    $err = $676;
    $677 = ($676|0)<(0);
    if ($677) {
     $678 = $err;
     $err = $678;
     break;
    }
    $679 = $err;
    $err = $679;
    $680 = $pWS;
    $681 = (($680) + 44|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = $pWS;
    $684 = $pDEMisc;
    $685 = (($684) + 48|0);
    $686 = HEAP32[$685>>2]|0;
    $687 = (FUNCTION_TABLE_iii[$682 & 255]($683,$686)|0);
    $err = $687;
    $688 = ($687|0)<(0);
    if ($688) {
     $689 = $err;
     $err = $689;
     break;
    }
    $690 = $err;
    $err = $690;
    $691 = $pWS;
    $692 = (($691) + 40|0);
    $693 = HEAP32[$692>>2]|0;
    $694 = $pWS;
    $695 = HEAP32[$pbEXIFMetadata>>2]|0;
    $696 = $0;
    $697 = (($696) + 132|0);
    $698 = HEAP32[$697>>2]|0;
    $699 = (FUNCTION_TABLE_iiii[$693 & 255]($694,$695,$698)|0);
    $err = $699;
    $700 = ($699|0)<(0);
    if ($700) {
     $701 = $err;
     $err = $701;
     break;
    }
    $702 = $err;
    $err = $702;
   }
   $703 = $i;
   $704 = (($703) + 1)|0;
   $i = $704;
   $705 = (22968 + (($703*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$705+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$705+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$705+8>>2]|0;
   $706 = HEAP16[$wmpDE>>1]|0;
   $707 = $706&65535;
   $708 = (34675)==($707|0);
   if (!($708)) {
    ___assert_fail((24480|0),(22616|0),563,(23776|0));
    // unreachable;
   }
   $709 = $0;
   $710 = (($709) + 124|0);
   $711 = HEAP32[$710>>2]|0;
   $712 = ($711>>>0)>(0);
   if ($712) {
    $713 = $0;
    $714 = (($713) + 124|0);
    $715 = HEAP32[$714>>2]|0;
    $716 = (($wmpDE) + 4|0);
    HEAP32[$716>>2] = $715;
    $717 = $pDEMisc;
    $718 = (($717) + 32|0);
    $719 = HEAP32[$718>>2]|0;
    $720 = (($wmpDE) + 8|0);
    HEAP32[$720>>2] = $719;
    $721 = $pWS;
    $722 = $0;
    $723 = (($722) + 120|0);
    $724 = HEAP32[$723>>2]|0;
    $725 = (_WriteWmpDE($721,$offPos,$wmpDE,$724,$uiTemp4)|0);
    $err = $725;
    $726 = ($725|0)<(0);
    if ($726) {
     $727 = $err;
     $err = $727;
     break;
    }
    $728 = $err;
    $err = $728;
   }
   $729 = $i;
   $730 = (($729) + 1)|0;
   $i = $730;
   $731 = (22968 + (($729*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$731+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$731+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$731+8>>2]|0;
   $732 = HEAP16[$wmpDE>>1]|0;
   $733 = $732&65535;
   $734 = (34853)==($733|0);
   if (!($734)) {
    ___assert_fail((24512|0),(22616|0),574,(23776|0));
    // unreachable;
   }
   $735 = $0;
   $736 = (($735) + 140|0);
   $737 = HEAP32[$736>>2]|0;
   $738 = ($737>>>0)>(0);
   if ($738) {
    $739 = $pDEMisc;
    $740 = (($739) + 56|0);
    $741 = HEAP32[$740>>2]|0;
    $742 = $741 & 1;
    $743 = ($742|0)!=(0);
    if ($743) {
     $744 = $pWS;
     $745 = (($744) + 44|0);
     $746 = HEAP32[$745>>2]|0;
     $747 = $pWS;
     $748 = $pDEMisc;
     $749 = (($748) + 56|0);
     $750 = HEAP32[$749>>2]|0;
     $751 = (FUNCTION_TABLE_iii[$746 & 255]($747,$750)|0);
     $err = $751;
     $752 = ($751|0)<(0);
     if ($752) {
      $753 = $err;
      $err = $753;
      break;
     }
     $754 = $err;
     $err = $754;
     $755 = $pWS;
     $756 = (($755) + 40|0);
     $757 = HEAP32[$756>>2]|0;
     $758 = $pWS;
     $759 = (FUNCTION_TABLE_iiii[$757 & 255]($758,23328,1)|0);
     $err = $759;
     $760 = ($759|0)<(0);
     if ($760) {
      $761 = $err;
      $err = $761;
      break;
     }
     $762 = $err;
     $err = $762;
    }
    $763 = $pDEMisc;
    $764 = (($763) + 56|0);
    $765 = HEAP32[$764>>2]|0;
    $766 = $765 & 1;
    $767 = $pDEMisc;
    $768 = (($767) + 56|0);
    $769 = HEAP32[$768>>2]|0;
    $770 = (($769) + ($766))|0;
    HEAP32[$768>>2] = $770;
    $771 = $pDEMisc;
    $772 = (($771) + 56|0);
    $773 = HEAP32[$772>>2]|0;
    $774 = (($wmpDE) + 8|0);
    HEAP32[$774>>2] = $773;
    $775 = $pWS;
    $776 = (_WriteWmpDE($775,$offPos,$wmpDE,0,0)|0);
    $err = $776;
    $777 = ($776|0)<(0);
    if ($777) {
     $778 = $err;
     $err = $778;
     break;
    }
    $779 = $err;
    $err = $779;
    $780 = $0;
    $781 = (($780) + 140|0);
    $782 = HEAP32[$781>>2]|0;
    $783 = (_PKAlloc($pbGPSInfoMetadata,$782)|0);
    $err = $783;
    $784 = ($783|0)<(0);
    if ($784) {
     $785 = $err;
     $err = $785;
     break;
    }
    $786 = $err;
    $err = $786;
    $787 = $pDEMisc;
    $788 = (($787) + 56|0);
    $789 = HEAP32[$788>>2]|0;
    HEAP32[$uiTemp5>>2] = $789;
    $790 = $0;
    $791 = (($790) + 136|0);
    $792 = HEAP32[$791>>2]|0;
    $793 = $0;
    $794 = (($793) + 140|0);
    $795 = HEAP32[$794>>2]|0;
    $796 = HEAP32[$pbGPSInfoMetadata>>2]|0;
    $797 = HEAP32[$uiTemp5>>2]|0;
    $798 = (0 - ($797))|0;
    $799 = (($796) + ($798)|0);
    $800 = HEAP32[$uiTemp5>>2]|0;
    $801 = $0;
    $802 = (($801) + 140|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = (($800) + ($803))|0;
    $805 = (_BufferCopyIFD($792,$795,0,73,$799,$804,$uiTemp5)|0);
    $err = $805;
    $806 = ($805|0)<(0);
    if ($806) {
     $807 = $err;
     $err = $807;
     break;
    }
    $808 = $err;
    $err = $808;
    $809 = $pWS;
    $810 = (($809) + 44|0);
    $811 = HEAP32[$810>>2]|0;
    $812 = $pWS;
    $813 = $pDEMisc;
    $814 = (($813) + 56|0);
    $815 = HEAP32[$814>>2]|0;
    $816 = (FUNCTION_TABLE_iii[$811 & 255]($812,$815)|0);
    $err = $816;
    $817 = ($816|0)<(0);
    if ($817) {
     $818 = $err;
     $err = $818;
     break;
    }
    $819 = $err;
    $err = $819;
    $820 = $pWS;
    $821 = (($820) + 40|0);
    $822 = HEAP32[$821>>2]|0;
    $823 = $pWS;
    $824 = HEAP32[$pbGPSInfoMetadata>>2]|0;
    $825 = $0;
    $826 = (($825) + 140|0);
    $827 = HEAP32[$826>>2]|0;
    $828 = (FUNCTION_TABLE_iiii[$822 & 255]($823,$824,$827)|0);
    $err = $828;
    $829 = ($828|0)<(0);
    if ($829) {
     $830 = $err;
     $err = $830;
     break;
    }
    $831 = $err;
    $err = $831;
   }
   $832 = $i;
   $833 = (($832) + 1)|0;
   $i = $833;
   $834 = (22968 + (($832*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$834+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$834+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$834+8>>2]|0;
   $835 = HEAP16[$wmpDE>>1]|0;
   $836 = $835&65535;
   $837 = (48129)==($836|0);
   if (!($837)) {
    ___assert_fail((24552|0),(22616|0),596,(23776|0));
    // unreachable;
   }
   $838 = $pDEMisc;
   $839 = (($838) + 16|0);
   $840 = HEAP32[$839>>2]|0;
   $841 = (($wmpDE) + 8|0);
   HEAP32[$841>>2] = $840;
   $842 = $pWS;
   $843 = (_WriteWmpDE($842,$offPos,$wmpDE,0,0)|0);
   $err = $843;
   $844 = ($843|0)<(0);
   if ($844) {
    $845 = $err;
    $err = $845;
    break;
   }
   $846 = $err;
   $err = $846;
   $847 = $i;
   $848 = (($847) + 1)|0;
   $i = $848;
   $849 = (22968 + (($847*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$849+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$849+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$849+8>>2]|0;
   $850 = HEAP16[$wmpDE>>1]|0;
   $851 = $850&65535;
   $852 = (48130)==($851|0);
   if (!($852)) {
    ___assert_fail((24592|0),(22616|0),601,(23776|0));
    // unreachable;
   }
   $853 = $0;
   $854 = (($853) + 284|0);
   $855 = (($854) + 66012|0);
   $856 = HEAP32[$855>>2]|0;
   $857 = (($wmpDE) + 8|0);
   HEAP32[$857>>2] = $856;
   $858 = $pWS;
   $859 = (_WriteWmpDE($858,$offPos,$wmpDE,0,0)|0);
   $err = $859;
   $860 = ($859|0)<(0);
   if ($860) {
    $861 = $err;
    $err = $861;
    break;
   }
   $862 = $err;
   $err = $862;
   $863 = $i;
   $864 = (($863) + 1)|0;
   $i = $864;
   $865 = (22968 + (($863*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$865+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$865+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$865+8>>2]|0;
   $866 = HEAP16[$wmpDE>>1]|0;
   $867 = $866&65535;
   $868 = (48256)==($867|0);
   if (!($868)) {
    ___assert_fail((24632|0),(22616|0),606,(23776|0));
    // unreachable;
   }
   $869 = $0;
   $870 = (($869) + 84|0);
   $871 = HEAP32[$870>>2]|0;
   $872 = (($wmpDE) + 8|0);
   HEAP32[$872>>2] = $871;
   $873 = $pWS;
   $874 = (_WriteWmpDE($873,$offPos,$wmpDE,0,0)|0);
   $err = $874;
   $875 = ($874|0)<(0);
   if ($875) {
    $876 = $err;
    $err = $876;
    break;
   }
   $877 = $err;
   $err = $877;
   $878 = $i;
   $879 = (($878) + 1)|0;
   $i = $879;
   $880 = (22968 + (($878*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$880+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$880+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$880+8>>2]|0;
   $881 = HEAP16[$wmpDE>>1]|0;
   $882 = $881&65535;
   $883 = (48257)==($882|0);
   if (!($883)) {
    ___assert_fail((24664|0),(22616|0),611,(23776|0));
    // unreachable;
   }
   $884 = $0;
   $885 = (($884) + 88|0);
   $886 = HEAP32[$885>>2]|0;
   $887 = (($wmpDE) + 8|0);
   HEAP32[$887>>2] = $886;
   $888 = $pWS;
   $889 = (_WriteWmpDE($888,$offPos,$wmpDE,0,0)|0);
   $err = $889;
   $890 = ($889|0)<(0);
   if ($890) {
    $891 = $err;
    $err = $891;
    break;
   }
   $892 = $err;
   $err = $892;
   $893 = $i;
   $894 = (($893) + 1)|0;
   $i = $894;
   $895 = (22968 + (($893*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$895+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$895+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$895+8>>2]|0;
   $896 = HEAP16[$wmpDE>>1]|0;
   $897 = $896&65535;
   $898 = (48258)==($897|0);
   if (!($898)) {
    ___assert_fail((24704|0),(22616|0),616,(23776|0));
    // unreachable;
   }
   $899 = $0;
   $900 = (($899) + 96|0);
   $901 = +HEAPF32[$900>>2];
   $902 = (($wmpDE) + 8|0);
   HEAPF32[$902>>2] = $901;
   $903 = $pWS;
   $904 = (_WriteWmpDE($903,$offPos,$wmpDE,0,0)|0);
   $err = $904;
   $905 = ($904|0)<(0);
   if ($905) {
    $906 = $err;
    $err = $906;
    break;
   }
   $907 = $err;
   $err = $907;
   $908 = $i;
   $909 = (($908) + 1)|0;
   $i = $909;
   $910 = (22968 + (($908*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$910+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$910+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$910+8>>2]|0;
   $911 = HEAP16[$wmpDE>>1]|0;
   $912 = $911&65535;
   $913 = (48259)==($912|0);
   if (!($913)) {
    ___assert_fail((24744|0),(22616|0),621,(23776|0));
    // unreachable;
   }
   $914 = $0;
   $915 = (($914) + 100|0);
   $916 = +HEAPF32[$915>>2];
   $917 = (($wmpDE) + 8|0);
   HEAPF32[$917>>2] = $916;
   $918 = $pWS;
   $919 = (_WriteWmpDE($918,$offPos,$wmpDE,0,0)|0);
   $err = $919;
   $920 = ($919|0)<(0);
   if ($920) {
    $921 = $err;
    $err = $921;
    break;
   }
   $922 = $err;
   $err = $922;
   $923 = $i;
   $924 = (($923) + 1)|0;
   $i = $924;
   $925 = (22968 + (($923*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$925+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$925+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$925+8>>2]|0;
   $926 = HEAP16[$wmpDE>>1]|0;
   $927 = $926&65535;
   $928 = (48320)==($927|0);
   if (!($928)) {
    ___assert_fail((24784|0),(22616|0),626,(23776|0));
    // unreachable;
   }
   $929 = $pDEMisc;
   $930 = HEAP32[$929>>2]|0;
   $931 = (($wmpDE) + 8|0);
   HEAP32[$931>>2] = $930;
   $932 = $pWS;
   $933 = (_WriteWmpDE($932,$offPos,$wmpDE,0,0)|0);
   $err = $933;
   $934 = ($933|0)<(0);
   if ($934) {
    $935 = $err;
    $err = $935;
    break;
   }
   $936 = $err;
   $err = $936;
   $937 = $i;
   $938 = (($937) + 1)|0;
   $i = $938;
   $939 = (22968 + (($937*12)|0)|0);
   ;HEAP32[$wmpDE+0>>2]=HEAP32[$939+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$939+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$939+8>>2]|0;
   $940 = HEAP16[$wmpDE>>1]|0;
   $941 = $940&65535;
   $942 = (48321)==($941|0);
   if (!($942)) {
    ___assert_fail((24824|0),(22616|0),632,(23776|0));
    // unreachable;
   }
   $943 = HEAP32[$offPos>>2]|0;
   $944 = $pDEMisc;
   $945 = (($944) + 20|0);
   HEAP32[$945>>2] = $943;
   $946 = (($wmpDE) + 8|0);
   HEAP32[$946>>2] = 0;
   $947 = $pWS;
   $948 = (_WriteWmpDE($947,$offPos,$wmpDE,0,0)|0);
   $err = $948;
   $949 = ($948|0)<(0);
   if ($949) {
    $950 = $err;
    $err = $950;
    break;
   }
   $951 = $err;
   $err = $951;
   $952 = $0;
   $953 = (($952) + 284|0);
   $954 = (($953) + 65992|0);
   $955 = HEAP32[$954>>2]|0;
   $956 = ($955|0)!=(0);
   do {
    if ($956) {
     $957 = $0;
     $958 = (($957) + 284|0);
     $959 = (($958) + 168|0);
     $960 = (($959) + 36|0);
     $961 = HEAP8[$960>>0]|0;
     $962 = $961&255;
     $963 = ($962|0)==(2);
     if (!($963)) {
      break;
     }
     $964 = $i;
     $965 = (($964) + 1)|0;
     $i = $965;
     $966 = (22968 + (($964*12)|0)|0);
     ;HEAP32[$wmpDE+0>>2]=HEAP32[$966+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$966+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$966+8>>2]|0;
     $967 = HEAP16[$wmpDE>>1]|0;
     $968 = $967&65535;
     $969 = (48322)==($968|0);
     if (!($969)) {
      ___assert_fail((24864|0),(22616|0),641,(23776|0));
      // unreachable;
     }
     $970 = HEAP32[$offPos>>2]|0;
     $971 = $pDEMisc;
     $972 = (($971) + 24|0);
     HEAP32[$972>>2] = $970;
     $973 = (($wmpDE) + 8|0);
     HEAP32[$973>>2] = 0;
     $974 = $pWS;
     $975 = (_WriteWmpDE($974,$offPos,$wmpDE,0,0)|0);
     $err = $975;
     $976 = ($975|0)<(0);
     if ($976) {
      $977 = $err;
      $err = $977;
      break L4;
     }
     $978 = $err;
     $err = $978;
     $979 = $i;
     $980 = (($979) + 1)|0;
     $i = $980;
     $981 = (22968 + (($979*12)|0)|0);
     ;HEAP32[$wmpDE+0>>2]=HEAP32[$981+0>>2]|0;HEAP32[$wmpDE+4>>2]=HEAP32[$981+4>>2]|0;HEAP32[$wmpDE+8>>2]=HEAP32[$981+8>>2]|0;
     $982 = HEAP16[$wmpDE>>1]|0;
     $983 = $982&65535;
     $984 = (48323)==($983|0);
     if (!($984)) {
      ___assert_fail((24904|0),(22616|0),648,(23776|0));
      // unreachable;
     }
     $985 = HEAP32[$offPos>>2]|0;
     $986 = $pDEMisc;
     $987 = (($986) + 28|0);
     HEAP32[$987>>2] = $985;
     $988 = (($wmpDE) + 8|0);
     HEAP32[$988>>2] = 0;
     $989 = $pWS;
     $990 = (_WriteWmpDE($989,$offPos,$wmpDE,0,0)|0);
     $err = $990;
     $991 = ($990|0)<(0);
     if ($991) {
      $992 = $err;
      $err = $992;
      break L4;
     }
     $993 = $err;
     $err = $993;
    }
   } while(0);
   $994 = $pWS;
   $995 = HEAP32[$offPos>>2]|0;
   $996 = (_PutULong($994,$995,0)|0);
   $err = $996;
   $997 = ($996|0)<(0);
   if ($997) {
    $998 = $err;
    $err = $998;
    break;
   }
   $999 = $err;
   $err = $999;
   $1000 = HEAP32[$offPos>>2]|0;
   $1001 = (($1000) + 4)|0;
   HEAP32[$offPos>>2] = $1001;
   $1002 = HEAP32[$offPos>>2]|0;
   $1003 = $1002 & 1;
   $1004 = (0)==($1003|0);
   if (!($1004)) {
    ___assert_fail((24944|0),(22616|0),657,(23776|0));
    // unreachable;
   }
   $1005 = $pDEMisc;
   $1006 = (($1005) + 32|0);
   $1007 = HEAP32[$1006>>2]|0;
   $1008 = ($1007>>>0)>(0);
   do {
    if ($1008) {
     label = 292;
    } else {
     $1009 = $pDEMisc;
     $1010 = (($1009) + 80|0);
     $1011 = HEAP32[$1010>>2]|0;
     $1012 = ($1011>>>0)>(0);
     if ($1012) {
      label = 292;
      break;
     }
     $1013 = $pDEMisc;
     $1014 = (($1013) + 40|0);
     $1015 = HEAP32[$1014>>2]|0;
     $1016 = ($1015>>>0)>(0);
     if ($1016) {
      label = 292;
      break;
     }
     $1017 = $pDEMisc;
     $1018 = (($1017) + 64|0);
     $1019 = HEAP32[$1018>>2]|0;
     $1020 = ($1019>>>0)>(0);
     if ($1020) {
      label = 292;
      break;
     }
     $1021 = $pDEMisc;
     $1022 = (($1021) + 72|0);
     $1023 = HEAP32[$1022>>2]|0;
     $1024 = ($1023>>>0)>(0);
     if ($1024) {
      label = 292;
      break;
     }
     $1025 = $pDEMisc;
     $1026 = (($1025) + 48|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = ($1027>>>0)>(0);
     if ($1028) {
      label = 292;
      break;
     }
     $1029 = $pDEMisc;
     $1030 = (($1029) + 56|0);
     $1031 = HEAP32[$1030>>2]|0;
     $1032 = ($1031>>>0)>(0);
     if ($1032) {
      label = 292;
     }
    }
   } while(0);
   if ((label|0) == 292) {
    $1033 = $pDEMisc;
    $1034 = (($1033) + 32|0);
    $1035 = HEAP32[$1034>>2]|0;
    $1036 = HEAP32[$offPos>>2]|0;
    $1037 = ($1035|0)==($1036|0);
    do {
     if (!($1037)) {
      $1038 = $pDEMisc;
      $1039 = (($1038) + 80|0);
      $1040 = HEAP32[$1039>>2]|0;
      $1041 = HEAP32[$offPos>>2]|0;
      $1042 = ($1040|0)==($1041|0);
      if ($1042) {
       break;
      }
      $1043 = $pDEMisc;
      $1044 = (($1043) + 40|0);
      $1045 = HEAP32[$1044>>2]|0;
      $1046 = HEAP32[$offPos>>2]|0;
      $1047 = ($1045|0)==($1046|0);
      if ($1047) {
       break;
      }
      $1048 = $pDEMisc;
      $1049 = (($1048) + 64|0);
      $1050 = HEAP32[$1049>>2]|0;
      $1051 = HEAP32[$offPos>>2]|0;
      $1052 = ($1050|0)==($1051|0);
      if ($1052) {
       break;
      }
      $1053 = $pDEMisc;
      $1054 = (($1053) + 72|0);
      $1055 = HEAP32[$1054>>2]|0;
      $1056 = HEAP32[$offPos>>2]|0;
      $1057 = ($1055|0)==($1056|0);
      if ($1057) {
       break;
      }
      $1058 = $pDEMisc;
      $1059 = (($1058) + 48|0);
      $1060 = HEAP32[$1059>>2]|0;
      $1061 = HEAP32[$offPos>>2]|0;
      $1062 = ($1060|0)==($1061|0);
      if ($1062) {
       break;
      }
      $1063 = $pDEMisc;
      $1064 = (($1063) + 56|0);
      $1065 = HEAP32[$1064>>2]|0;
      $1066 = HEAP32[$offPos>>2]|0;
      $1067 = ($1065|0)==($1066|0);
      if ($1067) {
       break;
      }
      ___assert_fail((24968|0),(22616|0),669,(23776|0));
      // unreachable;
     }
    } while(0);
    $1068 = $pWS;
    $1069 = (($1068) + 44|0);
    $1070 = HEAP32[$1069>>2]|0;
    $1071 = $pWS;
    $1072 = $pDEMisc;
    $1073 = HEAP32[$1072>>2]|0;
    $1074 = (FUNCTION_TABLE_iii[$1070 & 255]($1071,$1073)|0);
    $err = $1074;
    $1075 = ($1074|0)<(0);
    if ($1075) {
     $1076 = $err;
     $err = $1076;
     break;
    }
    $1077 = $err;
    $err = $1077;
    $1078 = $pDEMisc;
    $1079 = HEAP32[$1078>>2]|0;
    HEAP32[$offPos>>2] = $1079;
   }
   $1080 = $pDEMisc;
   $1081 = HEAP32[$1080>>2]|0;
   $1082 = HEAP32[$offPos>>2]|0;
   $1083 = ($1081|0)==($1082|0);
   if ($1083) {
    break;
   } else {
    ___assert_fail((25272|0),(22616|0),675,(23776|0));
    // unreachable;
   }
  }
 } while(0);
 $1084 = HEAP32[$pbEXIFMetadata>>2]|0;
 $1085 = ($1084|0)!=(0|0);
 if ($1085) {
  (_PKFree($pbEXIFMetadata)|0);
 }
 $1086 = HEAP32[$pbGPSInfoMetadata>>2]|0;
 $1087 = ($1086|0)!=(0|0);
 if (!($1087)) {
  $1088 = $err;
  STACKTOP = sp;return ($1088|0);
 }
 (_PKFree($pbGPSInfoMetadata)|0);
 $1088 = $err;
 STACKTOP = sp;return ($1088|0);
}
function _WriteContainerPost($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $deAlphaByteCount = 0, $deAlphaOffset = 0;
 var $deImageByteCount = 0, $err = 0, $offPos = 0, $pDEMisc = 0, $pWS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offPos = sp + 12|0;
 $deImageByteCount = sp + 16|0;
 $deAlphaOffset = sp + 28|0;
 $deAlphaByteCount = sp + 40|0;
 $0 = $pIE;
 $err = 0;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $pWS = $3;
 $4 = $0;
 $5 = (($4) + 284|0);
 $pDEMisc = $5;
 ;HEAP32[$deImageByteCount+0>>2]=HEAP32[25304+0>>2]|0;HEAP32[$deImageByteCount+4>>2]=HEAP32[25304+4>>2]|0;HEAP32[$deImageByteCount+8>>2]=HEAP32[25304+8>>2]|0;
 ;HEAP32[$deAlphaOffset+0>>2]=HEAP32[25320+0>>2]|0;HEAP32[$deAlphaOffset+4>>2]=HEAP32[25320+4>>2]|0;HEAP32[$deAlphaOffset+8>>2]=HEAP32[25320+8>>2]|0;
 ;HEAP32[$deAlphaByteCount+0>>2]=HEAP32[25336+0>>2]|0;HEAP32[$deAlphaByteCount+4>>2]=HEAP32[25336+4>>2]|0;HEAP32[$deAlphaByteCount+8>>2]=HEAP32[25336+8>>2]|0;
 $6 = $0;
 $7 = (($6) + 284|0);
 $8 = (($7) + 66000|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($deImageByteCount) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = $pDEMisc;
 $12 = (($11) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$offPos>>2] = $13;
 $14 = $pWS;
 $15 = (_WriteWmpDE($14,$offPos,$deImageByteCount,0,0)|0);
 $err = $15;
 $16 = ($15|0)<(0);
 if ($16) {
  $17 = $err;
  $err = $17;
  $57 = $err;
  STACKTOP = sp;return ($57|0);
 }
 $18 = $err;
 $err = $18;
 $19 = $0;
 $20 = (($19) + 284|0);
 $21 = (($20) + 65992|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 do {
  if ($23) {
   $24 = $0;
   $25 = (($24) + 284|0);
   $26 = (($25) + 168|0);
   $27 = (($26) + 36|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ($29|0)==(2);
   if ($30) {
    $31 = $0;
    $32 = (($31) + 284|0);
    $33 = (($32) + 66004|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($deAlphaOffset) + 8|0);
    HEAP32[$35>>2] = $34;
    $36 = $pDEMisc;
    $37 = (($36) + 24|0);
    $38 = HEAP32[$37>>2]|0;
    HEAP32[$offPos>>2] = $38;
    $39 = $pWS;
    $40 = (_WriteWmpDE($39,$offPos,$deAlphaOffset,0,0)|0);
    $err = $40;
    $41 = ($40|0)<(0);
    if ($41) {
     $42 = $err;
     $err = $42;
     $57 = $err;
     STACKTOP = sp;return ($57|0);
    }
    $43 = $err;
    $err = $43;
    $44 = $0;
    $45 = (($44) + 284|0);
    $46 = (($45) + 66008|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($deAlphaByteCount) + 8|0);
    HEAP32[$48>>2] = $47;
    $49 = $pDEMisc;
    $50 = (($49) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    HEAP32[$offPos>>2] = $51;
    $52 = $pWS;
    $53 = (_WriteWmpDE($52,$offPos,$deAlphaByteCount,0,0)|0);
    $err = $53;
    $54 = ($53|0)<(0);
    if ($54) {
     $55 = $err;
     $err = $55;
     $57 = $err;
     STACKTOP = sp;return ($57|0);
    } else {
     $56 = $err;
     $err = $56;
     break;
    }
   }
  }
 } while(0);
 $57 = $err;
 STACKTOP = sp;return ($57|0);
}
function _PKImageEncode_Initialize_WMP($pIE,$pStream,$pvParam,$cbParam) {
 $pIE = $pIE|0;
 $pStream = $pStream|0;
 $pvParam = $pvParam|0;
 $cbParam = $cbParam|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pStream;
 $2 = $pvParam;
 $3 = $cbParam;
 $err = 0;
 $4 = $3;
 $5 = (32868)!=($4|0);
 $6 = $5 ? -105 : 0;
 $err = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $err;
  $err = $8;
  $35 = $err;
  STACKTOP = sp;return ($35|0);
 }
 $9 = $err;
 $err = $9;
 $10 = $0;
 $11 = (($10) + 284|0);
 $12 = (($11) + 168|0);
 $13 = $2;
 _memcpy(($12|0),($13|0),32868)|0;
 $14 = $0;
 $15 = (($14) + 284|0);
 $16 = (($15) + 33120|0);
 $17 = $2;
 _memcpy(($16|0),($17|0),32868)|0;
 $18 = $1;
 $19 = $0;
 $20 = (($19) + 60|0);
 HEAP32[$20>>2] = $18;
 $21 = $0;
 $22 = (($21) + 60|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 $25 = (($24) + 284|0);
 $26 = (($25) + 168|0);
 $27 = (($26) + 52|0);
 HEAP32[$27>>2] = $23;
 $28 = $0;
 $29 = (($28) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $0;
 $32 = (($31) + 284|0);
 $33 = (($32) + 33120|0);
 $34 = (($33) + 52|0);
 HEAP32[$34>>2] = $30;
 $35 = $err;
 STACKTOP = sp;return ($35|0);
}
function _PKImageEncode_Terminate_WMP($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $2 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $err = 0;
 $1 = $0;
 $0 = $1;
 $2 = $err;
 STACKTOP = sp;return ($2|0);
}
function _PKImageEncode_EncodeContent_Init($pIE,$PI,$cLine,$pbPixels,$cbStride) {
 $pIE = $pIE|0;
 $PI = $PI|0;
 $cLine = $cLine|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixels;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = (($7) + 284|0);
 $9 = (($8) + 88|0);
 HEAP32[$9>>2] = $6;
 $10 = $0;
 $11 = (($10) + 88|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = (($13) + 284|0);
 $15 = (($14) + 88|0);
 $16 = (($15) + 4|0);
 HEAP32[$16>>2] = $12;
 $17 = (($PI) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = (($19) + 284|0);
 $21 = (($20) + 88|0);
 $22 = (($21) + 12|0);
 HEAP32[$22>>2] = $18;
 $23 = (($PI) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $0;
 $26 = (($25) + 284|0);
 $27 = (($26) + 88|0);
 $28 = (($27) + 16|0);
 HEAP32[$28>>2] = $24;
 $29 = (($PI) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 64;
 $32 = ($31|0)!=(0);
 $33 = $32 ^ 1;
 $34 = $33&1;
 $35 = $0;
 $36 = (($35) + 284|0);
 $37 = (($36) + 88|0);
 $38 = (($37) + 24|0);
 HEAP32[$38>>2] = $34;
 $39 = (($PI) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $0;
 $42 = (($41) + 284|0);
 $43 = (($42) + 88|0);
 $44 = (($43) + 8|0);
 HEAP32[$44>>2] = $40;
 $45 = $0;
 $46 = (($45) + 284|0);
 $47 = (($46) + 66012|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $0;
 $50 = (($49) + 284|0);
 $51 = (($50) + 88|0);
 $52 = (($51) + 64|0);
 HEAP32[$52>>2] = $48;
 $53 = $2;
 $54 = $53;
 $55 = (($54>>>0) % 128)&-1;
 $56 = (0)==($55|0);
 if ($56) {
  $57 = $0;
  $58 = (($57) + 84|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59>>>0) % 16)&-1;
  $61 = (0)==($60|0);
  if ($61) {
   $62 = $1;
   $63 = (($62>>>0) % 16)&-1;
   $64 = (0)==($63|0);
   if ($64) {
    $65 = $3;
    $66 = (($65>>>0) % 128)&-1;
    $67 = (0)==($66|0);
    if ($67) {
     $68 = $0;
     $69 = (($68) + 284|0);
     $70 = (($69) + 88|0);
     $71 = (($70) + 72|0);
     HEAP32[$71>>2] = 1;
    }
   }
  }
 }
 $72 = (($PI) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(6);
 if ($74) {
  $75 = (($PI) + 20|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $76 & 16;
  $78 = ($77|0)!=(0);
  if ($78) {
   label = 9;
  } else {
   $79 = (($PI) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $0;
   $82 = (($81) + 284|0);
   $83 = (($82) + 168|0);
   $84 = (($83) + 32|0);
   HEAP32[$84>>2] = $80;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $85 = (($PI) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) - 1)|0;
  $88 = $0;
  $89 = (($88) + 284|0);
  $90 = (($89) + 168|0);
  $91 = (($90) + 32|0);
  HEAP32[$91>>2] = $87;
 }
 $92 = $0;
 $93 = (($92) + 92|0);
 HEAP32[$93>>2] = 0;
 $94 = $0;
 $95 = (($94) + 284|0);
 $96 = (($95) + 168|0);
 $97 = (($96) + 32864|0);
 HEAP32[$97>>2] = 1;
 $98 = $0;
 $99 = (($98) + 284|0);
 $100 = (($99) + 88|0);
 $101 = $0;
 $102 = (($101) + 284|0);
 $103 = (($102) + 168|0);
 $104 = $0;
 $105 = (($104) + 284|0);
 $106 = (($105) + 33036|0);
 $107 = (_ImageStrEncInit($100,$103,$106)|0);
 $108 = (0)!=($107|0);
 $109 = $108 ? -1 : 0;
 $err = $109;
 $110 = ($109|0)<(0);
 if ($110) {
  $111 = $err;
  $err = $111;
  $113 = $err;
  STACKTOP = sp;return ($113|0);
 }
 $112 = $err;
 $err = $112;
 $113 = $err;
 STACKTOP = sp;return ($113|0);
}
function _PKImageEncode_EncodeContent_Encode($pIE,$cLine,$pbPixels,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $f420 = 0, $i = 0, $wmiBI = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wmiBI = sp + 24|0;
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixels;
 $3 = $cbStride;
 $err = 0;
 $i = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   label = 15;
   break;
  }
  $7 = $0;
  $8 = (($7) + 284|0);
  $9 = (($8) + 88|0);
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  if ($12) {
   $26 = 1;
  } else {
   $13 = $0;
   $14 = (($13) + 284|0);
   $15 = (($14) + 168|0);
   $16 = (($15) + 32856|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $0;
    $20 = (($19) + 284|0);
    $21 = (($20) + 168|0);
    $22 = (($21) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(1);
    $65 = $24;
   } else {
    $65 = 0;
   }
   $26 = $65;
  }
  $25 = $26&1;
  $f420 = $25;
  ;HEAP32[$wmiBI+0>>2]=0|0;HEAP32[$wmiBI+4>>2]=0|0;HEAP32[$wmiBI+8>>2]=0|0;HEAP32[$wmiBI+12>>2]=0|0;HEAP32[$wmiBI+16>>2]=0|0;HEAP32[$wmiBI+20>>2]=0|0;
  $27 = $2;
  $28 = $3;
  $29 = $i;
  $30 = Math_imul($28, $29)|0;
  $31 = $f420;
  $32 = ($31|0)!=(0);
  $33 = $32 ? 2 : 1;
  $34 = (($30>>>0) / ($33>>>0))&-1;
  $35 = (($27) + ($34)|0);
  HEAP32[$wmiBI>>2] = $35;
  $36 = $1;
  $37 = $i;
  $38 = (($36) - ($37))|0;
  $39 = (16)<($38>>>0);
  if ($39) {
   $44 = 16;
  } else {
   $40 = $1;
   $41 = $i;
   $42 = (($40) - ($41))|0;
   $44 = $42;
  }
  $43 = (($wmiBI) + 4|0);
  HEAP32[$43>>2] = $44;
  $45 = $3;
  $46 = (($wmiBI) + 8|0);
  HEAP32[$46>>2] = $45;
  $47 = $0;
  $48 = (($47) + 284|0);
  $49 = (($48) + 33036|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_ImageStrEncEncode($50,$wmiBI)|0);
  $52 = (0)!=($51|0);
  $53 = $52 ? -1 : 0;
  $err = $53;
  $54 = ($53|0)<(0);
  if ($54) {
   label = 11;
   break;
  }
  $56 = $err;
  $err = $56;
  $57 = $i;
  $58 = (($57) + 16)|0;
  $i = $58;
 }
 if ((label|0) == 11) {
  $55 = $err;
  $err = $55;
  $64 = $err;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 15) {
  $59 = $1;
  $60 = $0;
  $61 = (($60) + 92|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($59))|0;
  HEAP32[$61>>2] = $63;
  $64 = $err;
  STACKTOP = sp;return ($64|0);
 }
 return 0|0;
}
function _PKImageEncode_EncodeContent_Term($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $err = 0;
 $1 = $0;
 $2 = (($1) + 284|0);
 $3 = (($2) + 33036|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_ImageStrEncTerm($4)|0);
 $6 = (0)!=($5|0);
 $7 = $6 ? -1 : 0;
 $err = $7;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $err;
  $err = $9;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $10 = $err;
 $err = $10;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _PKImageEncode_EncodeContent($pIE,$PI,$cLine,$pbPixels,$cbStride) {
 $pIE = $pIE|0;
 $PI = $PI|0;
 $cLine = $cLine|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $PI$byval_copy = 0, $err = 0, $offPos = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $PI$byval_copy = sp + 24|0;
 $offPos = sp + 20|0;
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixels;
 $3 = $cbStride;
 $err = 0;
 HEAP32[$offPos>>2] = 0;
 $4 = $0;
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (($9) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iii[$8 & 255]($11,$offPos)|0);
 $err = $12;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $err;
  $err = $14;
  $62 = $err;
  STACKTOP = sp;return ($62|0);
 }
 $15 = $err;
 $err = $15;
 $16 = HEAP32[$offPos>>2]|0;
 $17 = $0;
 $18 = (($17) + 284|0);
 $19 = (($18) + 65996|0);
 HEAP32[$19>>2] = $16;
 $20 = $0;
 $21 = $1;
 $22 = $2;
 $23 = $3;
 dest=$PI$byval_copy+0|0; src=$PI+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $24 = (_PKImageEncode_EncodeContent_Init($20,$PI$byval_copy,$21,$22,$23)|0);
 $err = $24;
 $25 = ($24|0)<(0);
 if ($25) {
  $26 = $err;
  $err = $26;
  $62 = $err;
  STACKTOP = sp;return ($62|0);
 }
 $27 = $err;
 $err = $27;
 $28 = $0;
 $29 = $1;
 $30 = $2;
 $31 = $3;
 $32 = (_PKImageEncode_EncodeContent_Encode($28,$29,$30,$31)|0);
 $err = $32;
 $33 = ($32|0)<(0);
 if ($33) {
  $34 = $err;
  $err = $34;
  $62 = $err;
  STACKTOP = sp;return ($62|0);
 }
 $35 = $err;
 $err = $35;
 $36 = $0;
 $37 = (_PKImageEncode_EncodeContent_Term($36)|0);
 $err = $37;
 $38 = ($37|0)<(0);
 if ($38) {
  $39 = $err;
  $err = $39;
  $62 = $err;
  STACKTOP = sp;return ($62|0);
 }
 $40 = $err;
 $err = $40;
 $41 = $0;
 $42 = (($41) + 60|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 48|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $0;
 $47 = (($46) + 60|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (FUNCTION_TABLE_iii[$45 & 255]($48,$offPos)|0);
 $err = $49;
 $50 = ($49|0)<(0);
 if ($50) {
  $51 = $err;
  $err = $51;
  $62 = $err;
  STACKTOP = sp;return ($62|0);
 }
 $52 = $err;
 $err = $52;
 $53 = HEAP32[$offPos>>2]|0;
 $54 = $0;
 $55 = (($54) + 284|0);
 $56 = (($55) + 65996|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($53) - ($57))|0;
 $59 = $0;
 $60 = (($59) + 284|0);
 $61 = (($60) + 66000|0);
 HEAP32[$61>>2] = $58;
 $62 = $err;
 STACKTOP = sp;return ($62|0);
}
function _PKImageEncode_EncodeAlpha_Init($pIE,$PI,$cLine,$pbPixels,$cbStride) {
 $pIE = $pIE|0;
 $PI = $PI|0;
 $cLine = $cLine|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixels;
 $3 = $cbStride;
 $err = 0;
 $4 = $1;
 $1 = $4;
 $5 = $2;
 $2 = $5;
 $6 = $3;
 $3 = $6;
 $7 = $0;
 $8 = (($7) + 284|0);
 $9 = (($8) + 33040|0);
 $10 = $0;
 $11 = (($10) + 284|0);
 $12 = (($11) + 88|0);
 dest=$9+0|0; src=$12+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $13 = $0;
 $14 = (($13) + 84|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (($16) + 284|0);
 $18 = (($17) + 33040|0);
 HEAP32[$18>>2] = $15;
 $19 = $0;
 $20 = (($19) + 88|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = (($22) + 284|0);
 $24 = (($23) + 33040|0);
 $25 = (($24) + 4|0);
 HEAP32[$25>>2] = $21;
 $26 = (($PI) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $0;
 $29 = (($28) + 284|0);
 $30 = (($29) + 33040|0);
 $31 = (($30) + 12|0);
 HEAP32[$31>>2] = $27;
 $32 = (($PI) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = (($34) + 284|0);
 $36 = (($35) + 33040|0);
 $37 = (($36) + 16|0);
 HEAP32[$37>>2] = $33;
 $38 = (($PI) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 64;
 $41 = ($40|0)!=(0);
 $42 = $41 ^ 1;
 $43 = $42&1;
 $44 = $0;
 $45 = (($44) + 284|0);
 $46 = (($45) + 33040|0);
 $47 = (($46) + 24|0);
 HEAP32[$47>>2] = $43;
 $48 = $0;
 $49 = (($48) + 284|0);
 $50 = (($49) + 66012|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $0;
 $53 = (($52) + 284|0);
 $54 = (($53) + 88|0);
 $55 = (($54) + 64|0);
 HEAP32[$55>>2] = $51;
 $56 = $0;
 $57 = (($56) + 284|0);
 $58 = (($57) + 88|0);
 $59 = (($58) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 switch ($60|0) {
 case 1:  {
  $61 = $0;
  $62 = (($61) + 284|0);
  $63 = (($62) + 88|0);
  $64 = (($63) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $65 >>> 3;
  $67 = (($66) - 1)|0;
  $68 = $0;
  $69 = (($68) + 284|0);
  $70 = (($69) + 33040|0);
  $71 = (($70) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($67))|0;
  HEAP32[$71>>2] = $73;
  break;
 }
 case 4: case 3: case 2:  {
  $74 = $0;
  $75 = (($74) + 284|0);
  $76 = (($75) + 88|0);
  $77 = (($76) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78 >>> 3;
  $80 = (($79>>>0) / 2)&-1;
  $81 = (($80) - 1)|0;
  $82 = $0;
  $83 = (($82) + 284|0);
  $84 = (($83) + 33040|0);
  $85 = (($84) + 20|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + ($81))|0;
  HEAP32[$85>>2] = $87;
  break;
 }
 case 10: case 9: case 8:  {
  label = 6;
  break;
 }
 case 7: case 6: case 5:  {
  $88 = $0;
  $89 = (($88) + 284|0);
  $90 = (($89) + 88|0);
  $91 = (($90) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 >>> 3;
  $94 = (($93>>>0) / 4)&-1;
  $95 = (($94) - 1)|0;
  $96 = $0;
  $97 = (($96) + 284|0);
  $98 = (($97) + 33040|0);
  $99 = (($98) + 20|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($95))|0;
  HEAP32[$99>>2] = $101;
  break;
 }
 default: {
  label = 6;
 }
 }
 if ((label|0) == 6) {
 }
 $102 = $0;
 $103 = (($102) + 284|0);
 $104 = (($103) + 33040|0);
 $105 = (($104) + 8|0);
 HEAP32[$105>>2] = 0;
 $106 = $0;
 $107 = (($106) + 284|0);
 $108 = (($107) + 33120|0);
 $109 = (($108) + 16|0);
 HEAP32[$109>>2] = 0;
 $110 = $0;
 $111 = (($110) + 92|0);
 HEAP32[$111>>2] = 0;
 $112 = $0;
 $113 = (($112) + 284|0);
 $114 = (($113) + 33120|0);
 $115 = (($114) + 32864|0);
 HEAP32[$115>>2] = 1;
 $116 = $0;
 $117 = (($116) + 284|0);
 $118 = (($117) + 33040|0);
 $119 = $0;
 $120 = (($119) + 284|0);
 $121 = (($120) + 33120|0);
 $122 = $0;
 $123 = (($122) + 284|0);
 $124 = (($123) + 65988|0);
 $125 = (_ImageStrEncInit($118,$121,$124)|0);
 $126 = (0)!=($125|0);
 $127 = $126 ? -1 : 0;
 $err = $127;
 $128 = ($127|0)<(0);
 if ($128) {
  $129 = $err;
  $err = $129;
  $131 = $err;
  STACKTOP = sp;return ($131|0);
 }
 $130 = $err;
 $err = $130;
 $131 = $err;
 STACKTOP = sp;return ($131|0);
}
function _PKImageEncode_EncodeAlpha_Encode($pIE,$cLine,$pbPixels,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $err = 0, $i = 0, $wmiBI = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wmiBI = sp + 24|0;
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixels;
 $3 = $cbStride;
 $err = 0;
 $i = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   label = 11;
   break;
  }
  ;HEAP32[$wmiBI+0>>2]=0|0;HEAP32[$wmiBI+4>>2]=0|0;HEAP32[$wmiBI+8>>2]=0|0;HEAP32[$wmiBI+12>>2]=0|0;HEAP32[$wmiBI+16>>2]=0|0;HEAP32[$wmiBI+20>>2]=0|0;
  $7 = $2;
  $8 = $3;
  $9 = $i;
  $10 = Math_imul($8, $9)|0;
  $11 = (($7) + ($10)|0);
  HEAP32[$wmiBI>>2] = $11;
  $12 = $1;
  $13 = $i;
  $14 = (($12) - ($13))|0;
  $15 = (16)<($14>>>0);
  if ($15) {
   $20 = 16;
  } else {
   $16 = $1;
   $17 = $i;
   $18 = (($16) - ($17))|0;
   $20 = $18;
  }
  $19 = (($wmiBI) + 4|0);
  HEAP32[$19>>2] = $20;
  $21 = $3;
  $22 = (($wmiBI) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = $0;
  $24 = (($23) + 284|0);
  $25 = (($24) + 65988|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_ImageStrEncEncode($26,$wmiBI)|0);
  $28 = (0)!=($27|0);
  $29 = $28 ? -1 : 0;
  $err = $29;
  $30 = ($29|0)<(0);
  if ($30) {
   label = 7;
   break;
  }
  $32 = $err;
  $err = $32;
  $33 = $i;
  $34 = (($33) + 16)|0;
  $i = $34;
 }
 if ((label|0) == 7) {
  $31 = $err;
  $err = $31;
  $40 = $err;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 11) {
  $35 = $1;
  $36 = $0;
  $37 = (($36) + 92|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($35))|0;
  HEAP32[$37>>2] = $39;
  $40 = $err;
  STACKTOP = sp;return ($40|0);
 }
 return 0|0;
}
function _PKImageEncode_EncodeAlpha_Term($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $err = 0;
 $1 = $0;
 $2 = (($1) + 284|0);
 $3 = (($2) + 65988|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_ImageStrEncTerm($4)|0);
 $6 = (0)!=($5|0);
 $7 = $6 ? -1 : 0;
 $err = $7;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $err;
  $err = $9;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $10 = $err;
 $err = $10;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _PKImageEncode_EncodeAlpha($pIE,$PI,$cLine,$pbPixels,$cbStride) {
 $pIE = $pIE|0;
 $PI = $PI|0;
 $cLine = $cLine|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $PI$byval_copy = 0, $err = 0, $offPos = 0, $zero = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $PI$byval_copy = sp + 24|0;
 $offPos = sp + 20|0;
 $zero = sp + 64|0;
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixels;
 $3 = $cbStride;
 $err = 0;
 HEAP32[$offPos>>2] = 0;
 $4 = $0;
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (($9) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iii[$8 & 255]($11,$offPos)|0);
 $err = $12;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $err;
  $err = $14;
  $79 = $err;
  STACKTOP = sp;return ($79|0);
 }
 $15 = $err;
 $err = $15;
 $16 = HEAP32[$offPos>>2]|0;
 $17 = $16 & 1;
 $18 = ($17|0)!=(0);
 do {
  if ($18) {
   HEAP8[$zero>>0] = 0;
   $19 = $0;
   $20 = (($19) + 60|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 40|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $0;
   $25 = (($24) + 60|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (FUNCTION_TABLE_iiii[$23 & 255]($26,$zero,1)|0);
   $err = $27;
   $28 = ($27|0)<(0);
   if ($28) {
    $29 = $err;
    $err = $29;
    $79 = $err;
    STACKTOP = sp;return ($79|0);
   } else {
    $30 = $err;
    $err = $30;
    $31 = HEAP32[$offPos>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$offPos>>2] = $32;
    break;
   }
  }
 } while(0);
 $33 = HEAP32[$offPos>>2]|0;
 $34 = $0;
 $35 = (($34) + 284|0);
 $36 = (($35) + 66004|0);
 HEAP32[$36>>2] = $33;
 $37 = $0;
 $38 = $1;
 $39 = $2;
 $40 = $3;
 dest=$PI$byval_copy+0|0; src=$PI+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $41 = (_PKImageEncode_EncodeAlpha_Init($37,$PI$byval_copy,$38,$39,$40)|0);
 $err = $41;
 $42 = ($41|0)<(0);
 if ($42) {
  $43 = $err;
  $err = $43;
  $79 = $err;
  STACKTOP = sp;return ($79|0);
 }
 $44 = $err;
 $err = $44;
 $45 = $0;
 $46 = $1;
 $47 = $2;
 $48 = $3;
 $49 = (_PKImageEncode_EncodeAlpha_Encode($45,$46,$47,$48)|0);
 $err = $49;
 $50 = ($49|0)<(0);
 if ($50) {
  $51 = $err;
  $err = $51;
  $79 = $err;
  STACKTOP = sp;return ($79|0);
 }
 $52 = $err;
 $err = $52;
 $53 = $0;
 $54 = (_PKImageEncode_EncodeAlpha_Term($53)|0);
 $err = $54;
 $55 = ($54|0)<(0);
 if ($55) {
  $56 = $err;
  $err = $56;
  $79 = $err;
  STACKTOP = sp;return ($79|0);
 }
 $57 = $err;
 $err = $57;
 $58 = $0;
 $59 = (($58) + 60|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $0;
 $64 = (($63) + 60|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (FUNCTION_TABLE_iii[$62 & 255]($65,$offPos)|0);
 $err = $66;
 $67 = ($66|0)<(0);
 if ($67) {
  $68 = $err;
  $err = $68;
  $79 = $err;
  STACKTOP = sp;return ($79|0);
 }
 $69 = $err;
 $err = $69;
 $70 = HEAP32[$offPos>>2]|0;
 $71 = $0;
 $72 = (($71) + 284|0);
 $73 = (($72) + 66004|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($70) - ($74))|0;
 $76 = $0;
 $77 = (($76) + 284|0);
 $78 = (($77) + 66008|0);
 HEAP32[$78>>2] = $75;
 $79 = $err;
 STACKTOP = sp;return ($79|0);
}
function _PKImageEncode_SetColorContext_WMP($pIE,$pbColorContext,$cbColorContext) {
 $pIE = $pIE|0;
 $pbColorContext = $pbColorContext|0;
 $cbColorContext = $cbColorContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pbColorContext;
 $2 = $cbColorContext;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $0;
 $7 = (($6) + 120|0);
 $8 = $0;
 $9 = (($8) + 124|0);
 $10 = (_SetMetadata($3,$4,$5,$7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _SetMetadata($pIE,$pbMetadata,$cbMetadata,$pbSet,$pcbSet) {
 $pIE = $pIE|0;
 $pbMetadata = $pbMetadata|0;
 $cbMetadata = $cbMetadata|0;
 $pbSet = $pbSet|0;
 $pcbSet = $pcbSet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pbMetadata;
 $2 = $cbMetadata;
 $3 = $pbSet;
 $4 = $pcbSet;
 $err = 0;
 $5 = $0;
 $6 = (($5) + 108|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  ___assert_fail((22808|0),(22616|0),1002,(25832|0));
  // unreachable;
 }
 $9 = $3;
 (_PKFree($9)|0);
 $10 = $4;
 HEAP32[$10>>2] = 0;
 $11 = $3;
 $12 = $2;
 $13 = (_PKAlloc($11,$12)|0);
 $err = $13;
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = $err;
  $err = $15;
  $23 = $err;
  STACKTOP = sp;return ($23|0);
 }
 $16 = $err;
 $err = $16;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = $2;
 _memcpy(($18|0),($19|0),($20|0))|0;
 $21 = $2;
 $22 = $4;
 HEAP32[$22>>2] = $21;
 $23 = $err;
 STACKTOP = sp;return ($23|0);
}
function _PKImageEncode_SetDescriptiveMetadata_WMP($pIE,$pSrcMeta) {
 $pIE = $pIE|0;
 $pSrcMeta = $pSrcMeta|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $pDstMeta = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy13 = sp + 128|0;
 $$byval_copy12 = sp + 120|0;
 $$byval_copy11 = sp + 112|0;
 $$byval_copy10 = sp + 104|0;
 $$byval_copy9 = sp + 96|0;
 $$byval_copy8 = sp + 88|0;
 $$byval_copy7 = sp + 80|0;
 $$byval_copy6 = sp + 72|0;
 $$byval_copy5 = sp + 64|0;
 $$byval_copy4 = sp + 56|0;
 $$byval_copy3 = sp + 40|0;
 $$byval_copy2 = sp + 32|0;
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 16|0;
 $0 = $pIE;
 $1 = $pSrcMeta;
 $err = 0;
 $2 = $0;
 $3 = (($2) + 168|0);
 $pDstMeta = $3;
 $4 = $0;
 $5 = (($4) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  ___assert_fail((22808|0),(22616|0),1135,(25352|0));
  // unreachable;
 }
 $8 = $pDstMeta;
 $9 = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$9+4>>2]|0;
 $10 = (_CopyDescMetadata($8,$$byval_copy)|0);
 $err = $10;
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = $err;
  $err = $12;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $13 = $err;
 $err = $13;
 $14 = $pDstMeta;
 $15 = (($14) + 8|0);
 $16 = $1;
 $17 = (($16) + 8|0);
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$17+4>>2]|0;
 $18 = (_CopyDescMetadata($15,$$byval_copy1)|0);
 $err = $18;
 $19 = ($18|0)<(0);
 if ($19) {
  $20 = $err;
  $err = $20;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $21 = $err;
 $err = $21;
 $22 = $pDstMeta;
 $23 = (($22) + 16|0);
 $24 = $1;
 $25 = (($24) + 16|0);
 ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$25+4>>2]|0;
 $26 = (_CopyDescMetadata($23,$$byval_copy2)|0);
 $err = $26;
 $27 = ($26|0)<(0);
 if ($27) {
  $28 = $err;
  $err = $28;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $29 = $err;
 $err = $29;
 $30 = $pDstMeta;
 $31 = (($30) + 24|0);
 $32 = $1;
 $33 = (($32) + 24|0);
 ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$33+4>>2]|0;
 $34 = (_CopyDescMetadata($31,$$byval_copy3)|0);
 $err = $34;
 $35 = ($34|0)<(0);
 if ($35) {
  $36 = $err;
  $err = $36;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $37 = $err;
 $err = $37;
 $38 = $pDstMeta;
 $39 = (($38) + 32|0);
 $40 = $1;
 $41 = (($40) + 32|0);
 ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$41+0>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$41+4>>2]|0;
 $42 = (_CopyDescMetadata($39,$$byval_copy4)|0);
 $err = $42;
 $43 = ($42|0)<(0);
 if ($43) {
  $44 = $err;
  $err = $44;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $45 = $err;
 $err = $45;
 $46 = $pDstMeta;
 $47 = (($46) + 40|0);
 $48 = $1;
 $49 = (($48) + 40|0);
 ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$49+4>>2]|0;
 $50 = (_CopyDescMetadata($47,$$byval_copy5)|0);
 $err = $50;
 $51 = ($50|0)<(0);
 if ($51) {
  $52 = $err;
  $err = $52;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $53 = $err;
 $err = $53;
 $54 = $pDstMeta;
 $55 = (($54) + 48|0);
 $56 = $1;
 $57 = (($56) + 48|0);
 ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$57+0>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$57+4>>2]|0;
 $58 = (_CopyDescMetadata($55,$$byval_copy6)|0);
 $err = $58;
 $59 = ($58|0)<(0);
 if ($59) {
  $60 = $err;
  $err = $60;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $61 = $err;
 $err = $61;
 $62 = $pDstMeta;
 $63 = (($62) + 56|0);
 $64 = $1;
 $65 = (($64) + 56|0);
 ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$65+4>>2]|0;
 $66 = (_CopyDescMetadata($63,$$byval_copy7)|0);
 $err = $66;
 $67 = ($66|0)<(0);
 if ($67) {
  $68 = $err;
  $err = $68;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $69 = $err;
 $err = $69;
 $70 = $pDstMeta;
 $71 = (($70) + 64|0);
 $72 = $1;
 $73 = (($72) + 64|0);
 ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$73+0>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$73+4>>2]|0;
 $74 = (_CopyDescMetadata($71,$$byval_copy8)|0);
 $err = $74;
 $75 = ($74|0)<(0);
 if ($75) {
  $76 = $err;
  $err = $76;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $77 = $err;
 $err = $77;
 $78 = $pDstMeta;
 $79 = (($78) + 72|0);
 $80 = $1;
 $81 = (($80) + 72|0);
 ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$81+0>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$81+4>>2]|0;
 $82 = (_CopyDescMetadata($79,$$byval_copy9)|0);
 $err = $82;
 $83 = ($82|0)<(0);
 if ($83) {
  $84 = $err;
  $err = $84;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $85 = $err;
 $err = $85;
 $86 = $pDstMeta;
 $87 = (($86) + 80|0);
 $88 = $1;
 $89 = (($88) + 80|0);
 ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$89+0>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$89+4>>2]|0;
 $90 = (_CopyDescMetadata($87,$$byval_copy10)|0);
 $err = $90;
 $91 = ($90|0)<(0);
 if ($91) {
  $92 = $err;
  $err = $92;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $93 = $err;
 $err = $93;
 $94 = $pDstMeta;
 $95 = (($94) + 88|0);
 $96 = $1;
 $97 = (($96) + 88|0);
 ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$97+0>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$97+4>>2]|0;
 $98 = (_CopyDescMetadata($95,$$byval_copy11)|0);
 $err = $98;
 $99 = ($98|0)<(0);
 if ($99) {
  $100 = $err;
  $err = $100;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $101 = $err;
 $err = $101;
 $102 = $pDstMeta;
 $103 = (($102) + 96|0);
 $104 = $1;
 $105 = (($104) + 96|0);
 ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$105+0>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$105+4>>2]|0;
 $106 = (_CopyDescMetadata($103,$$byval_copy12)|0);
 $err = $106;
 $107 = ($106|0)<(0);
 if ($107) {
  $108 = $err;
  $err = $108;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $109 = $err;
 $err = $109;
 $110 = $pDstMeta;
 $111 = (($110) + 104|0);
 $112 = $1;
 $113 = (($112) + 104|0);
 ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$113+0>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$113+4>>2]|0;
 $114 = (_CopyDescMetadata($111,$$byval_copy13)|0);
 $err = $114;
 $115 = ($114|0)<(0);
 if ($115) {
  $116 = $err;
  $err = $116;
  $118 = $err;
  STACKTOP = sp;return ($118|0);
 }
 $117 = $err;
 $err = $117;
 $118 = $err;
 STACKTOP = sp;return ($118|0);
}
function _PKImageEncode_WritePixels_WMP($pIE,$cLine,$pbPixels,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $PI = 0, $PI$byval_copy = 0, $PI$byval_copy1 = 0, $err = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $PI$byval_copy1 = sp + 104|0;
 $PI$byval_copy = sp;
 $PI = sp + 64|0;
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixels;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 284|0);
 $6 = (($5) + 66016|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0)==($7|0);
 if (!($8)) {
  ___assert_fail((25400|0),(22616|0),1172,(25464|0));
  // unreachable;
 }
 $9 = $0;
 $10 = (($9) + 284|0);
 $11 = (($10) + 66016|0);
 HEAP32[$11>>2] = 4;
 $12 = $0;
 $13 = (($12) + 68|0);
 HEAP32[$PI>>2] = $13;
 (_PixelFormatLookup($PI,0)|0);
 $14 = (($PI) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 16;
 $17 = ($16|0)!=(0);
 $18 = $17 ^ 1;
 $19 = $18 ^ 1;
 $20 = $19&1;
 $21 = $0;
 $22 = (($21) + 284|0);
 $23 = (($22) + 65992|0);
 HEAP32[$23>>2] = $20;
 $24 = $0;
 $25 = (($24) + 108|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 do {
  if (!($27)) {
   $28 = $0;
   $29 = (_WriteContainerPre($28)|0);
   $err = $29;
   $30 = ($29|0)<(0);
   if ($30) {
    $31 = $err;
    $err = $31;
    $68 = $err;
    STACKTOP = sp;return ($68|0);
   } else {
    $32 = $err;
    $err = $32;
    $33 = $0;
    $34 = (($33) + 108|0);
    HEAP32[$34>>2] = 1;
    break;
   }
  }
 } while(0);
 $35 = $0;
 $36 = $1;
 $37 = $2;
 $38 = $3;
 dest=$PI$byval_copy+0|0; src=$PI+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $39 = (_PKImageEncode_EncodeContent($35,$PI$byval_copy,$36,$37,$38)|0);
 $err = $39;
 $40 = ($39|0)<(0);
 if ($40) {
  $41 = $err;
  $err = $41;
  $68 = $err;
  STACKTOP = sp;return ($68|0);
 }
 $42 = $err;
 $err = $42;
 $43 = $0;
 $44 = (($43) + 284|0);
 $45 = (($44) + 65992|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0);
 do {
  if ($47) {
   $48 = $0;
   $49 = (($48) + 284|0);
   $50 = (($49) + 168|0);
   $51 = (($50) + 36|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = ($53|0)==(2);
   if ($54) {
    $55 = $0;
    $56 = $1;
    $57 = $2;
    $58 = $3;
    dest=$PI$byval_copy1+0|0; src=$PI+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $59 = (_PKImageEncode_EncodeAlpha($55,$PI$byval_copy1,$56,$57,$58)|0);
    $err = $59;
    $60 = ($59|0)<(0);
    if ($60) {
     $61 = $err;
     $err = $61;
     $68 = $err;
     STACKTOP = sp;return ($68|0);
    } else {
     $62 = $err;
     $err = $62;
     break;
    }
   }
  }
 } while(0);
 $63 = $0;
 $64 = (_WriteContainerPost($63)|0);
 $err = $64;
 $65 = ($64|0)<(0);
 if ($65) {
  $66 = $err;
  $err = $66;
  $68 = $err;
  STACKTOP = sp;return ($68|0);
 }
 $67 = $err;
 $err = $67;
 $68 = $err;
 STACKTOP = sp;return ($68|0);
}
function _PKImageEncode_WritePixelsBandedBegin_WMP($pIE,$pPATempFile) {
 $pIE = $pIE|0;
 $pPATempFile = $pPATempFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pPATempFile;
 $err = 0;
 $2 = $0;
 $3 = (($2) + 284|0);
 $4 = (($3) + 66016|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (0)==($5|0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 284|0);
  $9 = (($8) + 66016|0);
  HEAP32[$9>>2] = 1;
  $10 = $1;
  $11 = $0;
  $12 = (($11) + 284|0);
  $13 = (($12) + 66020|0);
  HEAP32[$13>>2] = $10;
  $14 = $err;
  STACKTOP = sp;return ($14|0);
 } else {
  ___assert_fail((25400|0),(22616|0),1208,(25496|0));
  // unreachable;
 }
 return 0|0;
}
function _PKImageEncode_WritePixelsBanded_WMP($pIE,$cLine,$pbPixels,$cbStride,$fLastCall) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixels = $pbPixels|0;
 $cbStride = $cbStride|0;
 $fLastCall = $fLastCall|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $PI = 0, $PI$byval_copy = 0, $PI$byval_copy1 = 0, $eEncStateOrig = 0, $err = 0, $fPI = 0;
 var $offPos = 0, $offStart = 0, $pPATempFile = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $PI$byval_copy1 = sp + 128|0;
 $PI$byval_copy = sp + 88|0;
 $PI = sp + 16|0;
 $offPos = sp;
 $offStart = sp + 56|0;
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixels;
 $3 = $cbStride;
 $4 = $fLastCall;
 $err = 0;
 dest=$PI+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $fPI = 0;
 $5 = $0;
 $6 = (($5) + 284|0);
 $7 = (($6) + 66016|0);
 $8 = HEAP32[$7>>2]|0;
 $eEncStateOrig = $8;
 $9 = $0;
 $10 = (($9) + 284|0);
 $11 = (($10) + 66020|0);
 $12 = HEAP32[$11>>2]|0;
 $pPATempFile = $12;
 $13 = $4;
 $14 = ($13|0)!=(0);
 if ($14) {
  $19 = 0;
 } else {
  $15 = $1;
  $16 = (($15>>>0) % 16)&-1;
  $17 = (0)!=($16|0);
  $19 = $17;
 }
 $18 = $19 ? -111 : 0;
 $err = $18;
 $20 = ($18|0)<(0);
 if ($20) {
  $21 = $err;
  $err = $21;
  $173 = $err;
  STACKTOP = sp;return ($173|0);
 }
 $22 = $err;
 $err = $22;
 $23 = $0;
 $24 = (($23) + 108|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $0;
  $28 = (($27) + 284|0);
  $29 = (($28) + 66016|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (1)==($30|0);
  if ($31) {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $32 = $0;
  $33 = (($32) + 68|0);
  HEAP32[$PI>>2] = $33;
  (_PixelFormatLookup($PI,0)|0);
  $34 = (($PI) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 16;
  $37 = ($36|0)!=(0);
  $38 = $37 ^ 1;
  $39 = $38 ^ 1;
  $40 = $39&1;
  $41 = $0;
  $42 = (($41) + 284|0);
  $43 = (($42) + 65992|0);
  HEAP32[$43>>2] = $40;
  $fPI = 1;
  $44 = $0;
  $45 = (($44) + 284|0);
  $46 = (($45) + 65992|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0);
  do {
   if ($48) {
    $49 = $0;
    $50 = (($49) + 284|0);
    $51 = (($50) + 168|0);
    $52 = (($51) + 36|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = ($54|0)==(2);
    if ($55) {
     $56 = $pPATempFile;
     $57 = (0|0)==($56|0);
     $58 = $57 ? -112 : 0;
     $err = $58;
     $59 = ($58|0)<(0);
     if ($59) {
      $60 = $err;
      $err = $60;
      $173 = $err;
      STACKTOP = sp;return ($173|0);
     } else {
      $61 = $err;
      $err = $61;
      break;
     }
    }
   }
  } while(0);
 }
 $62 = $0;
 $63 = (($62) + 108|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0);
 do {
  if (!($65)) {
   $66 = $fPI;
   $67 = ($66|0)!=(0);
   if (!($67)) {
    ___assert_fail((25544|0),(22616|0),1246,(25552|0));
    // unreachable;
   }
   $68 = $0;
   $69 = (_WriteContainerPre($68)|0);
   $err = $69;
   $70 = ($69|0)<(0);
   if ($70) {
    $71 = $err;
    $err = $71;
    $173 = $err;
    STACKTOP = sp;return ($173|0);
   } else {
    $72 = $err;
    $err = $72;
    $73 = $0;
    $74 = (($73) + 108|0);
    HEAP32[$74>>2] = 1;
    break;
   }
  }
 } while(0);
 $75 = $0;
 $76 = (($75) + 284|0);
 $77 = (($76) + 66016|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (1)==($78|0);
 do {
  if ($79) {
   $80 = $0;
   $81 = (($80) + 60|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + 48|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $0;
   $86 = (($85) + 60|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_iii[$84 & 255]($87,$offPos)|0);
   $err = $88;
   $89 = ($88|0)<(0);
   if ($89) {
    $90 = $err;
    $err = $90;
    $173 = $err;
    STACKTOP = sp;return ($173|0);
   }
   $91 = $err;
   $err = $91;
   $92 = HEAP32[$offPos>>2]|0;
   $93 = $0;
   $94 = (($93) + 284|0);
   $95 = (($94) + 65996|0);
   HEAP32[$95>>2] = $92;
   $96 = $fPI;
   $97 = ($96|0)!=(0);
   if (!($97)) {
    ___assert_fail((25544|0),(22616|0),1258,(25552|0));
    // unreachable;
   }
   $98 = $0;
   $99 = $1;
   $100 = $2;
   $101 = $3;
   dest=$PI$byval_copy+0|0; src=$PI+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $102 = (_PKImageEncode_EncodeContent_Init($98,$PI$byval_copy,$99,$100,$101)|0);
   $err = $102;
   $103 = ($102|0)<(0);
   if ($103) {
    $104 = $err;
    $err = $104;
    $173 = $err;
    STACKTOP = sp;return ($173|0);
   } else {
    $105 = $err;
    $err = $105;
    $106 = $0;
    $107 = (($106) + 284|0);
    $108 = (($107) + 66016|0);
    HEAP32[$108>>2] = 2;
    break;
   }
  }
 } while(0);
 $109 = $0;
 $110 = $1;
 $111 = $2;
 $112 = $3;
 $113 = (_PKImageEncode_EncodeContent_Encode($109,$110,$111,$112)|0);
 $err = $113;
 $114 = ($113|0)<(0);
 if ($114) {
  $115 = $err;
  $err = $115;
  $173 = $err;
  STACKTOP = sp;return ($173|0);
 }
 $116 = $err;
 $err = $116;
 $117 = $0;
 $118 = (($117) + 284|0);
 $119 = (($118) + 65992|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)!=(0);
 do {
  if ($121) {
   $122 = $0;
   $123 = (($122) + 284|0);
   $124 = (($123) + 168|0);
   $125 = (($124) + 36|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = ($127|0)==(2);
   if ($128) {
    $129 = $eEncStateOrig;
    $130 = (1)==($129|0);
    do {
     if ($130) {
      $131 = $pPATempFile;
      $132 = (($131) + 48|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = $pPATempFile;
      $135 = (FUNCTION_TABLE_iii[$133 & 255]($134,$offStart)|0);
      $err = $135;
      $136 = ($135|0)<(0);
      if ($136) {
       $137 = $err;
       $err = $137;
       $173 = $err;
       STACKTOP = sp;return ($173|0);
      }
      $138 = $err;
      $err = $138;
      $139 = HEAP32[$offStart>>2]|0;
      $140 = (0)==($139|0);
      if (!($140)) {
       ___assert_fail((25592|0),(22616|0),1273,(25552|0));
       // unreachable;
      }
      $141 = $0;
      $142 = (($141) + 284|0);
      $143 = (($142) + 33120|0);
      $144 = (($143) + 52|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $0;
      $147 = (($146) + 284|0);
      $148 = (($147) + 168|0);
      $149 = (($148) + 52|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($145|0)==($150|0);
      if (!($151)) {
       ___assert_fail((25608|0),(22616|0),1274,(25552|0));
       // unreachable;
      }
      $152 = $pPATempFile;
      $153 = $0;
      $154 = (($153) + 284|0);
      $155 = (($154) + 33120|0);
      $156 = (($155) + 52|0);
      HEAP32[$156>>2] = $152;
      $157 = $0;
      $158 = $1;
      $159 = $2;
      $160 = $3;
      dest=$PI$byval_copy1+0|0; src=$PI+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $161 = (_PKImageEncode_EncodeAlpha_Init($157,$PI$byval_copy1,$158,$159,$160)|0);
      $err = $161;
      $162 = ($161|0)<(0);
      if ($162) {
       $163 = $err;
       $err = $163;
       $173 = $err;
       STACKTOP = sp;return ($173|0);
      } else {
       $164 = $err;
       $err = $164;
       break;
      }
     }
    } while(0);
    $165 = $0;
    $166 = $1;
    $167 = $2;
    $168 = $3;
    $169 = (_PKImageEncode_EncodeAlpha_Encode($165,$166,$167,$168)|0);
    $err = $169;
    $170 = ($169|0)<(0);
    if ($170) {
     $171 = $err;
     $err = $171;
     $173 = $err;
     STACKTOP = sp;return ($173|0);
    } else {
     $172 = $err;
     $err = $172;
     break;
    }
   }
  }
 } while(0);
 $173 = $err;
 STACKTOP = sp;return ($173|0);
}
function _PKImageEncode_WritePixelsBandedEnd_WMP($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cbAlpha = 0, $cbBytesCopied = 0, $cbCopy = 0, $err = 0, $offAlpha = 0, $pAlphaStream = 0, $pMainStream = 0, $rgbBuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offAlpha = sp + 16|0;
 $cbAlpha = sp + 12|0;
 $rgbBuf = sp + 32|0;
 $0 = $pIE;
 $err = 0;
 $1 = $0;
 $2 = (($1) + 284|0);
 $3 = (($2) + 168|0);
 $4 = (($3) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $pMainStream = $5;
 $6 = $0;
 $7 = (($6) + 284|0);
 $8 = (($7) + 66016|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (2)==($9|0);
 if (!($10)) {
  ___assert_fail((25672|0),(22616|0),1294,(25728|0));
  // unreachable;
 }
 $11 = $0;
 $12 = (_PKImageEncode_EncodeContent_Term($11)|0);
 $err = $12;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $err;
  $err = $14;
  $124 = $err;
  STACKTOP = sp;return ($124|0);
 }
 $15 = $err;
 $err = $15;
 $16 = $pMainStream;
 $17 = (($16) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = (($19) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_iii[$18 & 255]($21,$offAlpha)|0);
 $err = $22;
 $23 = ($22|0)<(0);
 if ($23) {
  $24 = $err;
  $err = $24;
  $124 = $err;
  STACKTOP = sp;return ($124|0);
 }
 $25 = $err;
 $err = $25;
 $26 = HEAP32[$offAlpha>>2]|0;
 $27 = $0;
 $28 = (($27) + 284|0);
 $29 = (($28) + 65996|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($26) - ($30))|0;
 $32 = $0;
 $33 = (($32) + 284|0);
 $34 = (($33) + 66000|0);
 HEAP32[$34>>2] = $31;
 $35 = $0;
 $36 = (($35) + 284|0);
 $37 = (($36) + 65992|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0);
 do {
  if ($39) {
   $40 = $0;
   $41 = (($40) + 284|0);
   $42 = (($41) + 168|0);
   $43 = (($42) + 36|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = ($45|0)==(2);
   if ($46) {
    $47 = $0;
    $48 = (($47) + 284|0);
    $49 = (($48) + 33120|0);
    $50 = (($49) + 52|0);
    $51 = HEAP32[$50>>2]|0;
    $pAlphaStream = $51;
    $52 = $pAlphaStream;
    $53 = $pMainStream;
    $54 = ($52|0)!=($53|0);
    if (!($54)) {
     ___assert_fail((25768|0),(22616|0),1307,(25728|0));
     // unreachable;
    }
    $55 = $0;
    $56 = (_PKImageEncode_EncodeAlpha_Term($55)|0);
    $err = $56;
    $57 = ($56|0)<(0);
    if ($57) {
     $58 = $err;
     $err = $58;
     $124 = $err;
     STACKTOP = sp;return ($124|0);
    }
    $59 = $err;
    $err = $59;
    $60 = $pAlphaStream;
    $61 = (($60) + 48|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = $pAlphaStream;
    $64 = (FUNCTION_TABLE_iii[$62 & 255]($63,$cbAlpha)|0);
    $err = $64;
    $65 = ($64|0)<(0);
    if ($65) {
     $66 = $err;
     $err = $66;
     $124 = $err;
     STACKTOP = sp;return ($124|0);
    }
    $67 = $err;
    $err = $67;
    $cbBytesCopied = 0;
    $68 = $pAlphaStream;
    $69 = (($68) + 44|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $pAlphaStream;
    $72 = (FUNCTION_TABLE_iii[$70 & 255]($71,0)|0);
    $err = $72;
    $73 = ($72|0)<(0);
    if ($73) {
     $74 = $err;
     $err = $74;
     $124 = $err;
     STACKTOP = sp;return ($124|0);
    }
    $75 = $err;
    $err = $75;
    while(1) {
     $76 = $cbBytesCopied;
     $77 = HEAP32[$cbAlpha>>2]|0;
     $78 = ($76>>>0)<($77>>>0);
     if (!($78)) {
      label = 34;
      break;
     }
     $79 = HEAP32[$cbAlpha>>2]|0;
     $80 = $cbBytesCopied;
     $81 = (($79) - ($80))|0;
     $82 = (8192)<($81>>>0);
     if ($82) {
      $86 = 8192;
     } else {
      $83 = HEAP32[$cbAlpha>>2]|0;
      $84 = $cbBytesCopied;
      $85 = (($83) - ($84))|0;
      $86 = $85;
     }
     $cbCopy = $86;
     $87 = $pAlphaStream;
     $88 = (($87) + 32|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $pAlphaStream;
     $91 = $cbCopy;
     $92 = (FUNCTION_TABLE_iiii[$89 & 255]($90,$rgbBuf,$91)|0);
     $err = $92;
     $93 = ($92|0)<(0);
     if ($93) {
      label = 28;
      break;
     }
     $95 = $err;
     $err = $95;
     $96 = $pMainStream;
     $97 = (($96) + 40|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $pMainStream;
     $100 = $cbCopy;
     $101 = (FUNCTION_TABLE_iiii[$98 & 255]($99,$rgbBuf,$100)|0);
     $err = $101;
     $102 = ($101|0)<(0);
     if ($102) {
      label = 31;
      break;
     }
     $104 = $err;
     $err = $104;
     $105 = $cbCopy;
     $106 = $cbBytesCopied;
     $107 = (($106) + ($105))|0;
     $cbBytesCopied = $107;
    }
    if ((label|0) == 28) {
     $94 = $err;
     $err = $94;
     $124 = $err;
     STACKTOP = sp;return ($124|0);
    }
    else if ((label|0) == 31) {
     $103 = $err;
     $err = $103;
     $124 = $err;
     STACKTOP = sp;return ($124|0);
    }
    else if ((label|0) == 34) {
     $108 = $cbBytesCopied;
     $109 = HEAP32[$cbAlpha>>2]|0;
     $110 = ($108|0)==($109|0);
     if ($110) {
      $111 = HEAP32[$offAlpha>>2]|0;
      $112 = $0;
      $113 = (($112) + 284|0);
      $114 = (($113) + 66004|0);
      HEAP32[$114>>2] = $111;
      $115 = HEAP32[$cbAlpha>>2]|0;
      $116 = $0;
      $117 = (($116) + 284|0);
      $118 = (($117) + 66008|0);
      HEAP32[$118>>2] = $115;
      break;
     } else {
      ___assert_fail((25800|0),(22616|0),1329,(25728|0));
      // unreachable;
     }
    }
   }
  }
 } while(0);
 $119 = $0;
 $120 = (_WriteContainerPost($119)|0);
 $err = $120;
 $121 = ($120|0)<(0);
 if ($121) {
  $122 = $err;
  $err = $122;
  $124 = $err;
  STACKTOP = sp;return ($124|0);
 }
 $123 = $err;
 $err = $123;
 $124 = $err;
 STACKTOP = sp;return ($124|0);
}
function _PKImageEncode_CreateNewFrame_WMP($pIE,$pvParam,$cbParam) {
 $pIE = $pIE|0;
 $pvParam = $pvParam|0;
 $cbParam = $cbParam|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $pvParam;
 $2 = $cbParam;
 $err = 0;
 $3 = $0;
 $0 = $3;
 $4 = $1;
 $1 = $4;
 $5 = $2;
 $2 = $5;
 $err = -2;
 if (1) {
  $6 = $err;
  $err = $6;
  $8 = $err;
  STACKTOP = sp;return ($8|0);
 }
 $7 = $err;
 $err = $7;
 $8 = $err;
 STACKTOP = sp;return ($8|0);
}
function _PKImageEncode_Release_WMP($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $pIE = $2;
 $3 = $pIE;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $pIE;
 $9 = (($8) + 60|0);
 (FUNCTION_TABLE_ii[$7 & 255]($9)|0);
 $10 = $pIE;
 $11 = (($10) + 120|0);
 (_PKFree($11)|0);
 $12 = $pIE;
 $13 = (($12) + 124|0);
 HEAP32[$13>>2] = 0;
 $14 = $pIE;
 $15 = (($14) + 152|0);
 (_PKFree($15)|0);
 $16 = $pIE;
 $17 = (($16) + 156|0);
 HEAP32[$17>>2] = 0;
 $18 = $pIE;
 $19 = (($18) + 128|0);
 (_PKFree($19)|0);
 $20 = $pIE;
 $21 = (($20) + 132|0);
 HEAP32[$21>>2] = 0;
 $22 = $pIE;
 $23 = (($22) + 136|0);
 (_PKFree($23)|0);
 $24 = $pIE;
 $25 = (($24) + 140|0);
 HEAP32[$25>>2] = 0;
 $26 = $pIE;
 $27 = (($26) + 144|0);
 (_PKFree($27)|0);
 $28 = $pIE;
 $29 = (($28) + 148|0);
 HEAP32[$29>>2] = 0;
 $30 = $pIE;
 $31 = (($30) + 160|0);
 (_PKFree($31)|0);
 $32 = $pIE;
 $33 = (($32) + 164|0);
 HEAP32[$33>>2] = 0;
 $34 = $pIE;
 $35 = (($34) + 168|0);
 _FreeDescMetadata($35);
 $36 = $pIE;
 $37 = (($36) + 168|0);
 $38 = (($37) + 8|0);
 _FreeDescMetadata($38);
 $39 = $pIE;
 $40 = (($39) + 168|0);
 $41 = (($40) + 16|0);
 _FreeDescMetadata($41);
 $42 = $pIE;
 $43 = (($42) + 168|0);
 $44 = (($43) + 24|0);
 _FreeDescMetadata($44);
 $45 = $pIE;
 $46 = (($45) + 168|0);
 $47 = (($46) + 32|0);
 _FreeDescMetadata($47);
 $48 = $pIE;
 $49 = (($48) + 168|0);
 $50 = (($49) + 40|0);
 _FreeDescMetadata($50);
 $51 = $pIE;
 $52 = (($51) + 168|0);
 $53 = (($52) + 48|0);
 _FreeDescMetadata($53);
 $54 = $pIE;
 $55 = (($54) + 168|0);
 $56 = (($55) + 56|0);
 _FreeDescMetadata($56);
 $57 = $pIE;
 $58 = (($57) + 168|0);
 $59 = (($58) + 64|0);
 _FreeDescMetadata($59);
 $60 = $pIE;
 $61 = (($60) + 168|0);
 $62 = (($61) + 72|0);
 _FreeDescMetadata($62);
 $63 = $pIE;
 $64 = (($63) + 168|0);
 $65 = (($64) + 80|0);
 _FreeDescMetadata($65);
 $66 = $pIE;
 $67 = (($66) + 168|0);
 $68 = (($67) + 88|0);
 _FreeDescMetadata($68);
 $69 = $pIE;
 $70 = (($69) + 168|0);
 $71 = (($70) + 96|0);
 _FreeDescMetadata($71);
 $72 = $pIE;
 $73 = (($72) + 168|0);
 $74 = (($73) + 104|0);
 _FreeDescMetadata($74);
 $75 = $0;
 $76 = (_PKFree($75)|0);
 $err = $76;
 $77 = ($76|0)<(0);
 if ($77) {
  $78 = $err;
  $err = $78;
  $80 = $err;
  STACKTOP = sp;return ($80|0);
 }
 $79 = $err;
 $err = $79;
 $80 = $err;
 STACKTOP = sp;return ($80|0);
}
function _PKImageEncode_Create_WMP($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $pIE = 0;
 $1 = $0;
 $2 = (_PKImageEncode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $31 = $err;
  STACKTOP = sp;return ($31|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pIE = $7;
 $8 = $pIE;
 HEAP32[$8>>2] = 164;
 $9 = $pIE;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 165;
 $11 = $pIE;
 $12 = (($11) + 20|0);
 HEAP32[$12>>2] = 166;
 $13 = $pIE;
 $14 = (($13) + 24|0);
 HEAP32[$14>>2] = 167;
 $15 = $pIE;
 $16 = (($15) + 28|0);
 HEAP32[$16>>2] = 168;
 $17 = $pIE;
 $18 = (($17) + 36|0);
 HEAP32[$18>>2] = 169;
 $19 = $pIE;
 $20 = (($19) + 40|0);
 HEAP32[$20>>2] = 170;
 $21 = $pIE;
 $22 = (($21) + 44|0);
 HEAP32[$22>>2] = 171;
 $23 = $pIE;
 $24 = (($23) + 48|0);
 HEAP32[$24>>2] = 0;
 $25 = $pIE;
 $26 = (($25) + 52|0);
 HEAP32[$26>>2] = 172;
 $27 = $pIE;
 $28 = (($27) + 56|0);
 HEAP32[$28>>2] = 173;
 $29 = $pIE;
 $30 = (($29) + 280|0);
 HEAP32[$30>>2] = 1;
 $31 = $err;
 STACKTOP = sp;return ($31|0);
}
function _PKCodecFactory_CreateDecoderFromFile($szFilename,$ppDecoder) {
 $szFilename = $szFilename|0;
 $ppDecoder = $ppDecoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pDecoder = 0;
 var $pExt = 0, $pIID = 0, $pStream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pIID = sp + 12|0;
 $pStream = sp + 16|0;
 $0 = $szFilename;
 $1 = $ppDecoder;
 $err = 0;
 $pExt = 0;
 HEAP32[$pIID>>2] = 0;
 HEAP32[$pStream>>2] = 0;
 $pDecoder = 0;
 $2 = $0;
 $3 = (_strrchr($2,46)|0);
 $pExt = $3;
 $4 = $pExt;
 $5 = (0|0)==($4|0);
 $6 = $5 ? -106 : 0;
 $err = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $err;
  $err = $8;
  $37 = $err;
  STACKTOP = sp;return ($37|0);
 }
 $9 = $err;
 $err = $9;
 $10 = $pExt;
 $11 = (_GetImageDecodeIID($10,$pIID)|0);
 $err = $11;
 $12 = ($11|0)<(0);
 if ($12) {
  $13 = $err;
  $err = $13;
  $37 = $err;
  STACKTOP = sp;return ($37|0);
 }
 $14 = $err;
 $err = $14;
 $15 = $0;
 $16 = (_CreateWS_File($pStream,$15,25848)|0);
 $err = $16;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $err;
  $err = $18;
  $37 = $err;
  STACKTOP = sp;return ($37|0);
 }
 $19 = $err;
 $err = $19;
 $20 = $1;
 $21 = (_PKImageDecode_Create_WMP($20)|0);
 $err = $21;
 $22 = ($21|0)<(0);
 if ($22) {
  $23 = $err;
  $err = $23;
  $37 = $err;
  STACKTOP = sp;return ($37|0);
 }
 $24 = $err;
 $err = $24;
 $25 = $1;
 $26 = HEAP32[$25>>2]|0;
 $pDecoder = $26;
 $27 = $pDecoder;
 $28 = HEAP32[$27>>2]|0;
 $29 = $pDecoder;
 $30 = HEAP32[$pStream>>2]|0;
 $31 = (FUNCTION_TABLE_iii[$28 & 255]($29,$30)|0);
 $err = $31;
 $32 = ($31|0)<(0);
 if ($32) {
  $33 = $err;
  $err = $33;
  $37 = $err;
  STACKTOP = sp;return ($37|0);
 }
 $34 = $err;
 $err = $34;
 $35 = $pDecoder;
 $36 = (($35) + 48|0);
 HEAP32[$36>>2] = 1;
 $37 = $err;
 STACKTOP = sp;return ($37|0);
}
function _PKImageEncode_Transcode_WMP($pIE,$pID,$pParam) {
 $pIE = $pIE|0;
 $pID = $pID|0;
 $pParam = $pParam|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $PI = 0, $err = 0, $fPlanarAlpha = 0, $fResX = 0;
 var $fResY = 0, $offPos = 0, $pWSDec = 0, $pWSEnc = 0, $pixGUID = 0, $pixGUID$byval_copy = 0, $tcParamAlpha = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixGUID$byval_copy = sp + 144|0;
 $fResX = sp + 124|0;
 $fResY = sp + 120|0;
 $pixGUID = sp + 104|0;
 $tcParamAlpha = sp + 56|0;
 $offPos = sp + 52|0;
 $PI = sp + 8|0;
 $pWSDec = sp;
 $0 = $pIE;
 $1 = $pID;
 $2 = $pParam;
 $err = 0;
 HEAPF32[$fResX>>2] = 0.0;
 HEAPF32[$fResY>>2] = 0.0;
 ;HEAP32[$pixGUID+0>>2]=0|0;HEAP32[$pixGUID+4>>2]=0|0;HEAP32[$pixGUID+8>>2]=0|0;HEAP32[$pixGUID+12>>2]=0|0;
 HEAP32[$offPos>>2] = 0;
 HEAP32[$pWSDec>>2] = 0;
 $3 = $0;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $pWSEnc = $5;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (FUNCTION_TABLE_iii[$8 & 255]($9,$pixGUID)|0);
 $err = $10;
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = $err;
  $err = $12;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $13 = $err;
 $err = $13;
 $14 = $0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 ;HEAP32[$pixGUID$byval_copy+0>>2]=HEAP32[$pixGUID+0>>2]|0;HEAP32[$pixGUID$byval_copy+4>>2]=HEAP32[$pixGUID+4>>2]|0;HEAP32[$pixGUID$byval_copy+8>>2]=HEAP32[$pixGUID+8>>2]|0;HEAP32[$pixGUID$byval_copy+12>>2]=HEAP32[$pixGUID+12>>2]|0;
 $18 = (FUNCTION_TABLE_iii[$16 & 255]($17,$pixGUID$byval_copy)|0);
 $err = $18;
 $19 = ($18|0)<(0);
 if ($19) {
  $20 = $err;
  $err = $20;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $21 = $err;
 $err = $21;
 $22 = $0;
 $23 = (($22) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $0;
 $26 = $2;
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $2;
 $30 = (($29) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (FUNCTION_TABLE_iiii[$24 & 255]($25,$28,$31)|0);
 $err = $32;
 $33 = ($32|0)<(0);
 if ($33) {
  $34 = $err;
  $err = $34;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $35 = $err;
 $err = $35;
 $36 = $1;
 $37 = (($36) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $1;
 $40 = (FUNCTION_TABLE_iiii[$38 & 255]($39,$fResX,$fResY)|0);
 $err = $40;
 $41 = ($40|0)<(0);
 if ($41) {
  $42 = $err;
  $err = $42;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $43 = $err;
 $err = $43;
 $44 = $0;
 $45 = (($44) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $0;
 $48 = +HEAPF32[$fResX>>2];
 $49 = +HEAPF32[$fResY>>2];
 $50 = (FUNCTION_TABLE_iidd[$46 & 255]($47,$48,$49)|0);
 $err = $50;
 $51 = ($50|0)<(0);
 if ($51) {
  $52 = $err;
  $err = $52;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $53 = $err;
 $err = $53;
 $54 = $0;
 $55 = (($54) + 68|0);
 HEAP32[$PI>>2] = $55;
 (_PixelFormatLookup($PI,0)|0);
 $56 = (($PI) + 20|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 & 16;
 $59 = ($58|0)!=(0);
 if ($59) {
  $60 = $2;
  $61 = (($60) + 20|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = (2)==($63|0);
  $66 = $64;
 } else {
  $66 = 0;
 }
 $65 = $66&1;
 $67 = $0;
 $68 = (($67) + 284|0);
 $69 = (($68) + 65992|0);
 HEAP32[$69>>2] = $65;
 $70 = $0;
 $71 = (($70) + 284|0);
 $72 = (($71) + 65992|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (0)==($73|0);
 if (!($74)) {
  $75 = $2;
  $76 = (($75) + 20|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = ($78|0)==(2);
  if (!($79)) {
   ___assert_fail((25856|0),(25912|0),37,(25944|0));
   // unreachable;
  }
 }
 HEAP32[$PI>>2] = $pixGUID;
 (_PixelFormatLookup($PI,0)|0);
 $80 = (($PI) + 20|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 & 16;
 $83 = (0)==($82|0);
 if ($83) {
  $84 = $2;
  $85 = (($84) + 20|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = ($87|0)!=(0);
  $90 = $88;
 } else {
  $90 = 0;
 }
 $89 = $90 ? -113 : 0;
 $err = $89;
 $91 = ($89|0)<(0);
 if ($91) {
  $92 = $err;
  $err = $92;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $93 = $err;
 $err = $93;
 $94 = (($PI) + 20|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $95 & 16;
 $97 = ($96|0)!=(0);
 if ($97) {
  $98 = $2;
  $99 = (($98) + 20|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = (2)==($101|0);
  if ($102) {
   $103 = $1;
   $104 = (($103) + 92|0);
   $105 = (($104) + 65992|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (0)==($106|0);
   $109 = $107;
  } else {
   $109 = 0;
  }
 } else {
  $109 = 0;
 }
 $108 = $109 ? -113 : 0;
 $err = $108;
 $110 = ($108|0)<(0);
 if ($110) {
  $111 = $err;
  $err = $111;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $112 = $err;
 $err = $112;
 $113 = (($PI) + 20|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 16;
 $116 = ($115|0)!=(0);
 if ($116) {
  $117 = $2;
  $118 = (($117) + 20|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = (3)==($120|0);
  if ($121) {
   $122 = $1;
   $123 = (($122) + 92|0);
   $124 = (($123) + 65992|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125|0)!=(0);
   $128 = $126;
  } else {
   $128 = 0;
  }
 } else {
  $128 = 0;
 }
 $127 = $128 ? -113 : 0;
 $err = $127;
 $129 = ($127|0)<(0);
 if ($129) {
  $130 = $err;
  $err = $130;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $131 = $err;
 $err = $131;
 $132 = $2;
 $133 = (($132) + 20|0);
 $134 = HEAP8[$133>>0]|0;
 $135 = $134&255;
 $136 = ($135|0)<=(3);
 if (!($136)) {
  ___assert_fail((25976|0),(25912|0),50,(25944|0));
  // unreachable;
 }
 $137 = $0;
 $138 = (($137) + 284|0);
 $139 = (($138) + 65992|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0);
 if ($141) {
  $142 = $2;
  $143 = (($142) + 20|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $144&255;
  $146 = (2)==($145|0);
  $148 = $146;
 } else {
  $148 = 0;
 }
 $147 = $148&1;
 $fPlanarAlpha = $147;
 $149 = $0;
 $150 = (_WriteContainerPre($149)|0);
 $err = $150;
 $151 = ($150|0)<(0);
 if ($151) {
  $152 = $err;
  $err = $152;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $153 = $err;
 $err = $153;
 $154 = $fPlanarAlpha;
 $155 = ($154|0)!=(0);
 if ($155) {
  $156 = $2;
  dest=$tcParamAlpha+0|0; src=$156+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $157 = $1;
 $158 = (($157) + 24|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $1;
 $161 = (FUNCTION_TABLE_iii[$159 & 255]($160,$pWSDec)|0);
 $err = $161;
 $162 = ($161|0)<(0);
 if ($162) {
  $163 = $err;
  $err = $163;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $164 = $err;
 $err = $164;
 $165 = $1;
 $166 = (($165) + 92|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = $2;
 $169 = (($168) + 36|0);
 HEAP32[$169>>2] = $167;
 $170 = $1;
 $171 = (($170) + 92|0);
 $172 = (($171) + 4|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = $2;
 $175 = (($174) + 40|0);
 HEAP32[$175>>2] = $173;
 $176 = HEAP32[$pWSDec>>2]|0;
 $177 = $pWSEnc;
 $178 = $2;
 $179 = (_WMPhotoTranscode($176,$177,$178)|0);
 $180 = (0)!=($179|0);
 $181 = $180 ? -1 : 0;
 $err = $181;
 $182 = ($181|0)<(0);
 if ($182) {
  $183 = $err;
  $err = $183;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $184 = $err;
 $err = $184;
 $185 = $0;
 $186 = (($185) + 60|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = (($187) + 48|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = $0;
 $191 = (($190) + 60|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = (FUNCTION_TABLE_iii[$189 & 255]($192,$offPos)|0);
 $err = $193;
 $194 = ($193|0)<(0);
 if ($194) {
  $195 = $err;
  $err = $195;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $196 = $err;
 $err = $196;
 $197 = HEAP32[$offPos>>2]|0;
 $198 = $0;
 $199 = (($198) + 284|0);
 $200 = (($199) + 65996|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = (($197) - ($201))|0;
 $203 = $0;
 $204 = (($203) + 284|0);
 $205 = (($204) + 66000|0);
 HEAP32[$205>>2] = $202;
 $206 = $fPlanarAlpha;
 $207 = ($206|0)!=(0);
 do {
  if ($207) {
   $208 = $1;
   $209 = (($208) + 92|0);
   $210 = (($209) + 8|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $2;
   $213 = (($212) + 36|0);
   HEAP32[$213>>2] = $211;
   $214 = $1;
   $215 = (($214) + 92|0);
   $216 = (($215) + 12|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $2;
   $219 = (($218) + 40|0);
   HEAP32[$219>>2] = $217;
   $220 = HEAP32[$offPos>>2]|0;
   $221 = $0;
   $222 = (($221) + 284|0);
   $223 = (($222) + 66004|0);
   HEAP32[$223>>2] = $220;
   $224 = $1;
   $225 = (($224) + 92|0);
   $226 = (($225) + 8|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ($227>>>0)>(0);
   if (!($228)) {
    ___assert_fail((26000|0),(25912|0),83,(25944|0));
    // unreachable;
   }
   $229 = HEAP32[$pWSDec>>2]|0;
   $230 = (($229) + 44|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = HEAP32[$pWSDec>>2]|0;
   $233 = $1;
   $234 = (($233) + 92|0);
   $235 = (($234) + 8|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = (FUNCTION_TABLE_iii[$231 & 255]($232,$236)|0);
   $err = $237;
   $238 = ($237|0)<(0);
   if ($238) {
    $239 = $err;
    $err = $239;
    $275 = $err;
    STACKTOP = sp;return ($275|0);
   }
   $240 = $err;
   $err = $240;
   $241 = HEAP32[$pWSDec>>2]|0;
   $242 = $pWSEnc;
   $243 = (_WMPhotoTranscode($241,$242,$tcParamAlpha)|0);
   $244 = (0)!=($243|0);
   $245 = $244 ? -1 : 0;
   $err = $245;
   $246 = ($245|0)<(0);
   if ($246) {
    $247 = $err;
    $err = $247;
    $275 = $err;
    STACKTOP = sp;return ($275|0);
   }
   $248 = $err;
   $err = $248;
   $249 = $0;
   $250 = (($249) + 60|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = (($251) + 48|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $0;
   $255 = (($254) + 60|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = (FUNCTION_TABLE_iii[$253 & 255]($256,$offPos)|0);
   $err = $257;
   $258 = ($257|0)<(0);
   if ($258) {
    $259 = $err;
    $err = $259;
    $275 = $err;
    STACKTOP = sp;return ($275|0);
   } else {
    $260 = $err;
    $err = $260;
    $261 = HEAP32[$offPos>>2]|0;
    $262 = $0;
    $263 = (($262) + 284|0);
    $264 = (($263) + 66004|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = (($261) - ($265))|0;
    $267 = $0;
    $268 = (($267) + 284|0);
    $269 = (($268) + 66008|0);
    HEAP32[$269>>2] = $266;
    break;
   }
  }
 } while(0);
 $270 = $0;
 $271 = (_WriteContainerPost($270)|0);
 $err = $271;
 $272 = ($271|0)<(0);
 if ($272) {
  $273 = $err;
  $err = $273;
  $275 = $err;
  STACKTOP = sp;return ($275|0);
 }
 $274 = $err;
 $err = $274;
 $275 = $err;
 STACKTOP = sp;return ($275|0);
}
function _GetTestEncodeIID($szExt,$ppIID) {
 $szExt = $szExt|0;
 $ppIID = $ppIID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pInfo = sp + 8|0;
 $0 = $szExt;
 $1 = $ppIID;
 $err = 0;
 HEAP32[$pInfo>>2] = 0;
 $2 = $0;
 $3 = (_GetTestInfo($2,$pInfo)|0);
 $err = $3;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = $err;
  $err = $5;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $6 = $err;
 $err = $6;
 $7 = HEAP32[$pInfo>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 HEAP32[$10>>2] = $9;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _GetTestInfo($szExt,$ppInfo) {
 $szExt = $szExt|0;
 $ppInfo = $ppInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $szExt;
 $1 = $ppInfo;
 $err = 0;
 $i = 0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3>>>0)<(10);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $i;
  $7 = (26152 + (($6*12)|0)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $i;
  $10 = (26152 + (($9*12)|0)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strlen(($11|0))|0);
  $13 = (_PKStrnicmp($5,$8,$12)|0);
  $14 = (0)==($13|0);
  if ($14) {
   label = 4;
   break;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 4) {
  $15 = $i;
  $16 = (26152 + (($15*12)|0)|0);
  $17 = $1;
  HEAP32[$17>>2] = $16;
  $22 = $err;
  STACKTOP = sp;return ($22|0);
 }
 $err = -106;
 if (1) {
  $20 = $err;
  $err = $20;
  $22 = $err;
  STACKTOP = sp;return ($22|0);
 }
 $21 = $err;
 $err = $21;
 $22 = $err;
 STACKTOP = sp;return ($22|0);
}
function _PKTestFactory_CreateCodec($iid,$ppv) {
 $iid = $iid|0;
 $ppv = $ppv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $iid;
 $1 = $ppv;
 $err = 0;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (103)==($3|0);
 do {
  if ($4) {
   $5 = $1;
   $6 = (_PKImageEncode_Create_BMP($5)|0);
   $err = $6;
   $7 = ($6|0)<(0);
   if ($7) {
    $8 = $err;
    $err = $8;
    break;
   }
   $9 = $err;
   $err = $9;
   label = 88;
  } else {
   $10 = $0;
   $11 = HEAP32[$10>>2]|0;
   $12 = (102)==($11|0);
   if ($12) {
    $13 = $1;
    $14 = (_PKImageEncode_Create_PNM($13)|0);
    $err = $14;
    $15 = ($14|0)<(0);
    if ($15) {
     $16 = $err;
     $err = $16;
     break;
    }
    $17 = $err;
    $err = $17;
   } else {
    $18 = $0;
    $19 = HEAP32[$18>>2]|0;
    $20 = (104)==($19|0);
    if ($20) {
     $21 = $1;
     $22 = (_PKImageEncode_Create_TIF($21)|0);
     $err = $22;
     $23 = ($22|0)<(0);
     if ($23) {
      $24 = $err;
      $err = $24;
      break;
     }
     $25 = $err;
     $err = $25;
    } else {
     $26 = $0;
     $27 = HEAP32[$26>>2]|0;
     $28 = (105)==($27|0);
     if ($28) {
      $29 = $1;
      $30 = (_PKImageEncode_Create_HDR($29)|0);
      $err = $30;
      $31 = ($30|0)<(0);
      if ($31) {
       $32 = $err;
       $err = $32;
       break;
      }
      $33 = $err;
      $err = $33;
     } else {
      $34 = $0;
      $35 = HEAP32[$34>>2]|0;
      $36 = (106)==($35|0);
      if ($36) {
       $37 = $1;
       $38 = (_PKImageEncode_Create_IYUV($37)|0);
       $err = $38;
       $39 = ($38|0)<(0);
       if ($39) {
        $40 = $err;
        $err = $40;
        break;
       }
       $41 = $err;
       $err = $41;
      } else {
       $42 = $0;
       $43 = HEAP32[$42>>2]|0;
       $44 = (107)==($43|0);
       if ($44) {
        $45 = $1;
        $46 = (_PKImageEncode_Create_YUV422($45)|0);
        $err = $46;
        $47 = ($46|0)<(0);
        if ($47) {
         $48 = $err;
         $err = $48;
         break;
        }
        $49 = $err;
        $err = $49;
       } else {
        $50 = $0;
        $51 = HEAP32[$50>>2]|0;
        $52 = (108)==($51|0);
        if ($52) {
         $53 = $1;
         $54 = (_PKImageEncode_Create_YUV444($53)|0);
         $err = $54;
         $55 = ($54|0)<(0);
         if ($55) {
          $56 = $err;
          $err = $56;
          break;
         }
         $57 = $err;
         $err = $57;
        } else {
         $58 = $0;
         $59 = HEAP32[$58>>2]|0;
         $60 = (202)==($59|0);
         if ($60) {
          $61 = $1;
          $62 = (_PKImageDecode_Create_BMP($61)|0);
          $err = $62;
          $63 = ($62|0)<(0);
          if ($63) {
           $64 = $err;
           $err = $64;
           break;
          }
          $65 = $err;
          $err = $65;
         } else {
          $66 = $0;
          $67 = HEAP32[$66>>2]|0;
          $68 = (203)==($67|0);
          if ($68) {
           $69 = $1;
           $70 = (_PKImageDecode_Create_PNM($69)|0);
           $err = $70;
           $71 = ($70|0)<(0);
           if ($71) {
            $72 = $err;
            $err = $72;
            break;
           }
           $73 = $err;
           $err = $73;
          } else {
           $74 = $0;
           $75 = HEAP32[$74>>2]|0;
           $76 = (204)==($75|0);
           if ($76) {
            $77 = $1;
            $78 = (_PKImageDecode_Create_TIF($77)|0);
            $err = $78;
            $79 = ($78|0)<(0);
            if ($79) {
             $80 = $err;
             $err = $80;
             break;
            }
            $81 = $err;
            $err = $81;
           } else {
            $82 = $0;
            $83 = HEAP32[$82>>2]|0;
            $84 = (205)==($83|0);
            if ($84) {
             $85 = $1;
             $86 = (_PKImageDecode_Create_HDR($85)|0);
             $err = $86;
             $87 = ($86|0)<(0);
             if ($87) {
              $88 = $err;
              $err = $88;
              break;
             }
             $89 = $err;
             $err = $89;
            } else {
             $90 = $0;
             $91 = HEAP32[$90>>2]|0;
             $92 = (206)==($91|0);
             if ($92) {
              $93 = $1;
              $94 = (_PKImageDecode_Create_IYUV($93)|0);
              $err = $94;
              $95 = ($94|0)<(0);
              if ($95) {
               $96 = $err;
               $err = $96;
               break;
              }
              $97 = $err;
              $err = $97;
             } else {
              $98 = $0;
              $99 = HEAP32[$98>>2]|0;
              $100 = (207)==($99|0);
              if ($100) {
               $101 = $1;
               $102 = (_PKImageDecode_Create_YUV422($101)|0);
               $err = $102;
               $103 = ($102|0)<(0);
               if ($103) {
                $104 = $err;
                $err = $104;
                break;
               }
               $105 = $err;
               $err = $105;
              } else {
               $106 = $0;
               $107 = HEAP32[$106>>2]|0;
               $108 = (208)==($107|0);
               if ($108) {
                $109 = $1;
                $110 = (_PKImageDecode_Create_YUV444($109)|0);
                $err = $110;
                $111 = ($110|0)<(0);
                if ($111) {
                 $112 = $err;
                 $err = $112;
                 break;
                }
                $113 = $err;
                $err = $113;
               } else {
                $err = -106;
                if (1) {
                 $114 = $err;
                 $err = $114;
                 break;
                }
                $115 = $err;
                $err = $115;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   label = 88;
  }
 } while(0);
 if ((label|0) == 88) {
 }
 $116 = $err;
 STACKTOP = sp;return ($116|0);
}
function _PKTestDecode_Initialize($pID,$pStream) {
 $pID = $pID|0;
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pStream;
 $err = 0;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 44|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = (($5) + 56|0);
 ;HEAP32[$6+0>>2]=HEAP32[15416+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[15416+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[15416+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[15416+12>>2]|0;
 $7 = $0;
 $8 = (($7) + 84|0);
 HEAPF32[$8>>2] = 96.0;
 $9 = $0;
 $10 = (($9) + 88|0);
 HEAPF32[$10>>2] = 96.0;
 $11 = $0;
 $12 = (($11) + 92|0);
 HEAP32[$12>>2] = 1;
 $13 = $0;
 $14 = (($13) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = (($18) + 44|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = (($21) + 52|0);
 $23 = (FUNCTION_TABLE_iii[$17 & 255]($20,$22)|0);
 $err = $23;
 $24 = ($23|0)<(0);
 if ($24) {
  $25 = $err;
  $err = $25;
  STACKTOP = sp;return 0;
 }
 $26 = $err;
 $err = $26;
 STACKTOP = sp;return 0;
}
function _PKTestDecode_Copy($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $4 = $0;
 $0 = $4;
 $5 = $1;
 $1 = $5;
 $6 = $2;
 $2 = $6;
 $7 = $3;
 $3 = $7;
 STACKTOP = sp;return -3;
}
function _PKTestDecode_Release($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $pID = $2;
 $3 = $pID;
 $4 = (($3) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $14 = $0;
  $15 = (_PKFree($14)|0);
  STACKTOP = sp;return ($15|0);
 }
 $7 = $pID;
 $8 = (($7) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $pID;
 $13 = (($12) + 44|0);
 (FUNCTION_TABLE_ii[$11 & 255]($13)|0);
 $14 = $0;
 $15 = (_PKFree($14)|0);
 STACKTOP = sp;return ($15|0);
}
function _PKTestDecode_Create($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKAlloc($1,144)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $27 = $err;
  STACKTOP = sp;return ($27|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 174;
 $9 = $pID;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 139;
 $11 = $pID;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 140;
 $13 = $pID;
 $14 = (($13) + 12|0);
 HEAP32[$14>>2] = 141;
 $15 = $pID;
 $16 = (($15) + 16|0);
 HEAP32[$16>>2] = 142;
 $17 = $pID;
 $18 = (($17) + 20|0);
 HEAP32[$18>>2] = 143;
 $19 = $pID;
 $20 = (($19) + 28|0);
 HEAP32[$20>>2] = 175;
 $21 = $pID;
 $22 = (($21) + 32|0);
 HEAP32[$22>>2] = 145;
 $23 = $pID;
 $24 = (($23) + 36|0);
 HEAP32[$24>>2] = 146;
 $25 = $pID;
 $26 = (($25) + 40|0);
 HEAP32[$26>>2] = 176;
 $27 = $err;
 STACKTOP = sp;return ($27|0);
}
function _WriteBMPHeader($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bmpFH = 0, $bmpIH = 0, $cbColorTable = 0, $cbLineS = 0, $err = 0, $i = 0, $pS = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bmpFH = sp + 64|0;
 $bmpIH = sp + 24|0;
 $0 = $pIE;
 $err = 0;
 $cbColorTable = 0;
 $cbLineS = 0;
 $i = 0;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $pS = $3;
 dest=$bmpFH+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$bmpIH+0|0; stop=dest+40|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$bmpIH>>2] = 40;
 HEAP8[$bmpFH>>0] = 66;
 $4 = (($bmpFH) + 1|0);
 HEAP8[$4>>0] = 77;
 $5 = $0;
 $6 = (($5) + 68|0);
 $7 = (_memcmp(15528,$6,16)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  $10 = (($9) + 68|0);
  $11 = (_memcmp(15512,$10,16)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $15 = $0;
   $16 = (($15) + 68|0);
   $17 = (_memcmp(15560,$16,16)|0);
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $0;
    $20 = (($19) + 68|0);
    $21 = (_memcmp(15544,$20,16)|0);
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = $0;
     $24 = (($23) + 68|0);
     $25 = (_memcmp(15576,$24,16)|0);
     $26 = ($25|0)!=(0);
     if ($26) {
      $29 = $0;
      $30 = (($29) + 68|0);
      $31 = (_memcmp(15448,$30,16)|0);
      $32 = ($31|0)!=(0);
      if ($32) {
       $48 = $0;
       $49 = (($48) + 68|0);
       $50 = (_memcmp(15464,$49,16)|0);
       $51 = ($50|0)!=(0);
       if ($51) {
        $55 = $0;
        $56 = (($55) + 68|0);
        $57 = (_memcmp(15480,$56,16)|0);
        $58 = ($57|0)!=(0);
        if ($58) {
         $62 = $0;
         $63 = (($62) + 68|0);
         $64 = (_memcmp(15688,$63,16)|0);
         $65 = ($64|0)!=(0);
         do {
          if ($65) {
           $err = -106;
           if (1) {
            $69 = $err;
            $err = $69;
            $163 = $err;
            STACKTOP = sp;return ($163|0);
           } else {
            $70 = $err;
            $err = $70;
            break;
           }
          } else {
           $66 = $0;
           $67 = (($66) + 116|0);
           HEAP32[$67>>2] = 4;
           $68 = (($bmpIH) + 16|0);
           HEAP8[$68>>0]=3&255;HEAP8[$68+1>>0]=(3>>8)&255;HEAP8[$68+2>>0]=(3>>16)&255;HEAP8[$68+3>>0]=3>>24;
           $cbColorTable = 12;
           HEAP32[26352>>2] = 1072693248;
           HEAP32[((26352 + 4|0))>>2] = 1047552;
           HEAP32[((26352 + 8|0))>>2] = 1023;
          }
         } while(0);
        } else {
         $59 = $0;
         $60 = (($59) + 116|0);
         HEAP32[$60>>2] = 2;
         $61 = (($bmpIH) + 16|0);
         HEAP8[$61>>0]=3&255;HEAP8[$61+1>>0]=(3>>8)&255;HEAP8[$61+2>>0]=(3>>16)&255;HEAP8[$61+3>>0]=3>>24;
         $cbColorTable = 12;
         HEAP32[26352>>2] = 63488;
         HEAP32[((26352 + 4|0))>>2] = 2016;
         HEAP32[((26352 + 8|0))>>2] = 31;
        }
       } else {
        $52 = $0;
        $53 = (($52) + 116|0);
        HEAP32[$53>>2] = 2;
        $54 = (($bmpIH) + 16|0);
        HEAP8[$54>>0]=3&255;HEAP8[$54+1>>0]=(3>>8)&255;HEAP8[$54+2>>0]=(3>>16)&255;HEAP8[$54+3>>0]=3>>24;
        $cbColorTable = 12;
        HEAP32[26352>>2] = 31744;
        HEAP32[((26352 + 4|0))>>2] = 992;
        HEAP32[((26352 + 8|0))>>2] = 31;
       }
      } else {
       $33 = $0;
       $34 = (($33) + 116|0);
       HEAP32[$34>>2] = 1;
       $cbColorTable = 1024;
       $i = 0;
       while(1) {
        $35 = $i;
        $36 = ($35>>>0)<(256);
        if (!($36)) {
         break;
        }
        $37 = $i;
        $38 = $i;
        $39 = $38 << 8;
        $40 = $37 | $39;
        $41 = $i;
        $42 = $41 << 16;
        $43 = $40 | $42;
        $44 = $i;
        $45 = (26352 + ($44<<2)|0);
        HEAP32[$45>>2] = $43;
        $46 = $i;
        $47 = (($46) + 1)|0;
        $i = $47;
       }
      }
     } else {
      label = 7;
     }
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    $27 = $0;
    $28 = (($27) + 116|0);
    HEAP32[$28>>2] = 4;
    $cbColorTable = 0;
   }
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $13 = $0;
  $14 = (($13) + 116|0);
  HEAP32[$14>>2] = 3;
  $cbColorTable = 0;
 }
 $71 = $0;
 $72 = (($71) + 116|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $0;
 $75 = (($74) + 84|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = Math_imul($73, $76)|0;
 $78 = (($77) + 3)|0;
 $79 = (($78>>>0) / 4)&-1;
 $80 = $79<<2;
 $cbLineS = $80;
 $81 = $cbColorTable;
 $82 = (54 + ($81))|0;
 $83 = (($bmpFH) + 10|0);
 HEAP8[$83>>0]=$82&255;HEAP8[$83+1>>0]=($82>>8)&255;HEAP8[$83+2>>0]=($82>>16)&255;HEAP8[$83+3>>0]=$82>>24;
 $84 = (($bmpFH) + 10|0);
 $85 = HEAPU8[$84>>0]|(HEAPU8[$84+1>>0]<<8)|(HEAPU8[$84+2>>0]<<16)|(HEAPU8[$84+3>>0]<<24);
 $86 = $cbLineS;
 $87 = $0;
 $88 = (($87) + 88|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = Math_imul($86, $89)|0;
 $91 = (($85) + ($90))|0;
 $92 = (($bmpFH) + 2|0);
 HEAP8[$92>>0]=$91&255;HEAP8[$92+1>>0]=($91>>8)&255;HEAP8[$92+2>>0]=($91>>16)&255;HEAP8[$92+3>>0]=$91>>24;
 $93 = $0;
 $94 = (($93) + 84|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($bmpIH) + 4|0);
 HEAP8[$96>>0]=$95&255;HEAP8[$96+1>>0]=($95>>8)&255;HEAP8[$96+2>>0]=($95>>16)&255;HEAP8[$96+3>>0]=$95>>24;
 $97 = $0;
 $98 = (($97) + 88|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($bmpIH) + 8|0);
 HEAP8[$100>>0]=$99&255;HEAP8[$100+1>>0]=($99>>8)&255;HEAP8[$100+2>>0]=($99>>16)&255;HEAP8[$100+3>>0]=$99>>24;
 $101 = (($bmpIH) + 12|0);
 HEAP8[$101>>0]=1&255;HEAP8[$101+1>>0]=1>>8;
 $102 = $0;
 $103 = (($102) + 116|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $104<<3;
 $106 = $105&65535;
 $107 = (($bmpIH) + 14|0);
 HEAP8[$107>>0]=$106&255;HEAP8[$107+1>>0]=$106>>8;
 $108 = $cbLineS;
 $109 = $0;
 $110 = (($109) + 88|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = Math_imul($108, $111)|0;
 $113 = (($bmpIH) + 20|0);
 HEAP8[$113>>0]=$112&255;HEAP8[$113+1>>0]=($112>>8)&255;HEAP8[$113+2>>0]=($112>>16)&255;HEAP8[$113+3>>0]=$112>>24;
 $114 = $0;
 $115 = (($114) + 96|0);
 $116 = +HEAPF32[$115>>2];
 $117 = $116;
 $118 = $117 * 39.369999999999997;
 $119 = (~~(($118)));
 $120 = (($bmpIH) + 24|0);
 HEAP8[$120>>0]=$119&255;HEAP8[$120+1>>0]=($119>>8)&255;HEAP8[$120+2>>0]=($119>>16)&255;HEAP8[$120+3>>0]=$119>>24;
 $121 = $0;
 $122 = (($121) + 100|0);
 $123 = +HEAPF32[$122>>2];
 $124 = $123;
 $125 = $124 * 39.369999999999997;
 $126 = (~~(($125)));
 $127 = (($bmpIH) + 28|0);
 HEAP8[$127>>0]=$126&255;HEAP8[$127+1>>0]=($126>>8)&255;HEAP8[$127+2>>0]=($126>>16)&255;HEAP8[$127+3>>0]=$126>>24;
 $128 = $pS;
 $129 = (($128) + 40|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = $pS;
 $132 = (FUNCTION_TABLE_iiii[$130 & 255]($131,$bmpFH,14)|0);
 $err = $132;
 $133 = ($132|0)<(0);
 if ($133) {
  $134 = $err;
  $err = $134;
  $163 = $err;
  STACKTOP = sp;return ($163|0);
 }
 $135 = $err;
 $err = $135;
 $136 = $pS;
 $137 = (($136) + 40|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $pS;
 $140 = (FUNCTION_TABLE_iiii[$138 & 255]($139,$bmpIH,40)|0);
 $err = $140;
 $141 = ($140|0)<(0);
 if ($141) {
  $142 = $err;
  $err = $142;
  $163 = $err;
  STACKTOP = sp;return ($163|0);
 }
 $143 = $err;
 $err = $143;
 $144 = $pS;
 $145 = (($144) + 40|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = $pS;
 $148 = $cbColorTable;
 $149 = (FUNCTION_TABLE_iiii[$146 & 255]($147,26352,$148)|0);
 $err = $149;
 $150 = ($149|0)<(0);
 if ($150) {
  $151 = $err;
  $err = $151;
  $163 = $err;
  STACKTOP = sp;return ($163|0);
 }
 $152 = $err;
 $err = $152;
 $153 = $0;
 $154 = (($153) + 64|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = (($bmpFH) + 10|0);
 $157 = HEAPU8[$156>>0]|(HEAPU8[$156+1>>0]<<8)|(HEAPU8[$156+2>>0]<<16)|(HEAPU8[$156+3>>0]<<24);
 $158 = (($155) + ($157))|0;
 $159 = $0;
 $160 = (($159) + 112|0);
 HEAP32[$160>>2] = $158;
 $161 = $0;
 $162 = (($161) + 108|0);
 HEAP32[$162>>2] = 1;
 $163 = $err;
 STACKTOP = sp;return ($163|0);
}
function _PKImageEncode_WritePixels_BMP($pIE,$cLine,$pbPixel,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixel = $pbPixel|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $cbLineM = 0, $cbLineS = 0, $err = 0;
 var $i = 0, $offM = 0, $offS = 0, $pS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixel;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $pS = $6;
 $cbLineM = 0;
 $cbLineS = 0;
 $i = 0;
 $7 = $0;
 $8 = (($7) + 108|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if (!($10)) {
   $11 = $0;
   $12 = (_WriteBMPHeader($11)|0);
   $err = $12;
   $13 = ($12|0)<(0);
   if ($13) {
    $14 = $err;
    $err = $14;
    $96 = $err;
    STACKTOP = sp;return ($96|0);
   } else {
    $15 = $err;
    $err = $15;
    break;
   }
  }
 } while(0);
 $16 = $0;
 $17 = (($16) + 116|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = (($19) + 84|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($18, $21)|0;
 $cbLineM = $22;
 $23 = $cbLineM;
 $24 = (($23) + 3)|0;
 $25 = (($24>>>0) / 4)&-1;
 $26 = $25<<2;
 $cbLineS = $26;
 $27 = $3;
 $28 = $cbLineM;
 $29 = ($27>>>0)<($28>>>0);
 $30 = $29 ? -104 : 0;
 $err = $30;
 $31 = ($30|0)<(0);
 if ($31) {
  $32 = $err;
  $err = $32;
  $96 = $err;
  STACKTOP = sp;return ($96|0);
 }
 $33 = $err;
 $err = $33;
 $34 = $1;
 $35 = (($34) - 1)|0;
 $i = $35;
 while(1) {
  $36 = $i;
  $37 = (0)<=($36|0);
  if (!($37)) {
   label = 19;
   break;
  }
  $38 = $3;
  $39 = $i;
  $40 = Math_imul($38, $39)|0;
  $offM = $40;
  $41 = $cbLineS;
  $42 = $0;
  $43 = (($42) + 88|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $0;
  $46 = (($45) + 92|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $i;
  $49 = (($47) + ($48))|0;
  $50 = (($49) + 1)|0;
  $51 = (($44) - ($50))|0;
  $52 = Math_imul($41, $51)|0;
  $offS = $52;
  $53 = $pS;
  $54 = (($53) + 44|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $pS;
  $57 = $0;
  $58 = (($57) + 112|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $offS;
  $61 = (($59) + ($60))|0;
  $62 = (FUNCTION_TABLE_iii[$55 & 255]($56,$61)|0);
  $err = $62;
  $63 = ($62|0)<(0);
  if ($63) {
   label = 12;
   break;
  }
  $65 = $err;
  $err = $65;
  $66 = $pS;
  $67 = (($66) + 40|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $pS;
  $70 = $2;
  $71 = $offM;
  $72 = (($70) + ($71)|0);
  $73 = $cbLineM;
  $74 = (FUNCTION_TABLE_iiii[$68 & 255]($69,$72,$73)|0);
  $err = $74;
  $75 = ($74|0)<(0);
  if ($75) {
   label = 15;
   break;
  }
  $77 = $err;
  $err = $77;
  $78 = $i;
  $79 = (($78) + -1)|0;
  $i = $79;
 }
 if ((label|0) == 12) {
  $64 = $err;
  $err = $64;
  $96 = $err;
  STACKTOP = sp;return ($96|0);
 }
 else if ((label|0) == 15) {
  $76 = $err;
  $err = $76;
  $96 = $err;
  STACKTOP = sp;return ($96|0);
 }
 else if ((label|0) == 19) {
  $80 = $pS;
  $81 = (($80) + 40|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $pS;
  $84 = $cbLineS;
  $85 = $cbLineM;
  $86 = (($84) - ($85))|0;
  $87 = (FUNCTION_TABLE_iiii[$82 & 255]($83,27376,$86)|0);
  $err = $87;
  $88 = ($87|0)<(0);
  if ($88) {
   $89 = $err;
   $err = $89;
   $96 = $err;
   STACKTOP = sp;return ($96|0);
  }
  $90 = $err;
  $err = $90;
  $91 = $1;
  $92 = $0;
  $93 = (($92) + 92|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + ($91))|0;
  HEAP32[$93>>2] = $95;
  $96 = $err;
  STACKTOP = sp;return ($96|0);
 }
 return 0|0;
}
function _PKImageEncode_Create_BMP($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $pIE = 0;
 $1 = $0;
 $2 = (_PKImageEncode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $10 = $err;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pIE = $7;
 $8 = $pIE;
 $9 = (($8) + 28|0);
 HEAP32[$9>>2] = 177;
 $10 = $err;
 STACKTOP = sp;return ($10|0);
}
function _ParseBMPHeader($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bmpFH = 0, $bmpIH = 0, $c = 0;
 var $err = 0, $i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bmpFH = sp + 64|0;
 $bmpIH = sp + 24|0;
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 dest=$bmpFH+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$bmpIH+0|0; stop=dest+40|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 $2 = $1;
 $3 = (($2) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (FUNCTION_TABLE_iiii[$4 & 255]($5,$bmpFH,14)|0);
 $err = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $err;
  $err = $8;
  $176 = $err;
  STACKTOP = sp;return ($176|0);
 }
 $9 = $err;
 $err = $9;
 $10 = (_strstr($bmpFH,28536)|0);
 $11 = ($bmpFH|0)!=($10|0);
 $12 = $11 ? -106 : 0;
 $err = $12;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $err;
  $err = $14;
  $176 = $err;
  STACKTOP = sp;return ($176|0);
 }
 $15 = $err;
 $err = $15;
 $16 = $1;
 $17 = (($16) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = (FUNCTION_TABLE_iiii[$18 & 255]($19,$bmpIH,40)|0);
 $err = $20;
 $21 = ($20|0)<(0);
 if ($21) {
  $22 = $err;
  $err = $22;
  $176 = $err;
  STACKTOP = sp;return ($176|0);
 }
 $23 = $err;
 $err = $23;
 $24 = HEAPU8[$bmpIH>>0]|(HEAPU8[$bmpIH+1>>0]<<8)|(HEAPU8[$bmpIH+2>>0]<<16)|(HEAPU8[$bmpIH+3>>0]<<24);
 $25 = (40)>($24>>>0);
 if ($25) {
  $29 = 1;
 } else {
  $26 = HEAPU8[$bmpIH>>0]|(HEAPU8[$bmpIH+1>>0]<<8)|(HEAPU8[$bmpIH+2>>0]<<16)|(HEAPU8[$bmpIH+3>>0]<<24);
  $27 = (168)<($26>>>0);
  $29 = $27;
 }
 $28 = $29 ? -106 : 0;
 $err = $28;
 $30 = ($28|0)<(0);
 if ($30) {
  $31 = $err;
  $err = $31;
  $176 = $err;
  STACKTOP = sp;return ($176|0);
 }
 $32 = $err;
 $err = $32;
 $33 = HEAPU8[$bmpIH>>0]|(HEAPU8[$bmpIH+1>>0]<<8)|(HEAPU8[$bmpIH+2>>0]<<16)|(HEAPU8[$bmpIH+3>>0]<<24);
 $34 = (40)<($33>>>0);
 do {
  if ($34) {
   $35 = $1;
   $36 = (($35) + 32|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $1;
   $39 = HEAPU8[$bmpIH>>0]|(HEAPU8[$bmpIH+1>>0]<<8)|(HEAPU8[$bmpIH+2>>0]<<16)|(HEAPU8[$bmpIH+3>>0]<<24);
   $40 = (($39) - 40)|0;
   $41 = (FUNCTION_TABLE_iiii[$37 & 255]($38,27384,$40)|0);
   $err = $41;
   $42 = ($41|0)<(0);
   if ($42) {
    $43 = $err;
    $err = $43;
    $176 = $err;
    STACKTOP = sp;return ($176|0);
   } else {
    $44 = $err;
    $err = $44;
    break;
   }
  }
 } while(0);
 $45 = (($bmpIH) + 14|0);
 $46 = HEAPU8[$45>>0]|(HEAPU8[$45+1>>0]<<8);
 $47 = $46 << 16 >> 16;
 do {
  if ((($47|0) == 24)) {
   $110 = $0;
   $111 = (($110) + 56|0);
   ;HEAP32[$111+0>>2]=HEAP32[15512+0>>2]|0;HEAP32[$111+4>>2]=HEAP32[15512+4>>2]|0;HEAP32[$111+8>>2]=HEAP32[15512+8>>2]|0;HEAP32[$111+12>>2]=HEAP32[15512+12>>2]|0;
   $112 = $0;
   $113 = (($112) + 96|0);
   $114 = (($113) + 4|0);
   HEAP32[$114>>2] = 3;
  } else if ((($47|0) == 32)) {
   $115 = $1;
   $116 = (($115) + 32|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $1;
   $119 = (FUNCTION_TABLE_iiii[$117 & 255]($118,27512,4)|0);
   $err = $119;
   $120 = ($119|0)<(0);
   if ($120) {
    $121 = $err;
    $err = $121;
    $176 = $err;
    STACKTOP = sp;return ($176|0);
   }
   $122 = $err;
   $err = $122;
   $123 = HEAP32[27512>>2]|0;
   $124 = (1023)==($123|0);
   if ($124) {
    $125 = HEAP32[((27512 + 4|0))>>2]|0;
    $126 = (1047552)==($125|0);
    if ($126) {
     $127 = HEAP32[((27512 + 8|0))>>2]|0;
     $128 = (1072693248)==($127|0);
     if ($128) {
      $129 = $0;
      $130 = (($129) + 56|0);
      ;HEAP32[$130+0>>2]=HEAP32[15688+0>>2]|0;HEAP32[$130+4>>2]=HEAP32[15688+4>>2]|0;HEAP32[$130+8>>2]=HEAP32[15688+8>>2]|0;HEAP32[$130+12>>2]=HEAP32[15688+12>>2]|0;
     } else {
      label = 56;
     }
    } else {
     label = 56;
    }
   } else {
    label = 56;
   }
   if ((label|0) == 56) {
    $131 = $0;
    $132 = (($131) + 56|0);
    ;HEAP32[$132+0>>2]=HEAP32[15560+0>>2]|0;HEAP32[$132+4>>2]=HEAP32[15560+4>>2]|0;HEAP32[$132+8>>2]=HEAP32[15560+8>>2]|0;HEAP32[$132+12>>2]=HEAP32[15560+12>>2]|0;
   }
   $133 = $0;
   $134 = (($133) + 96|0);
   $135 = (($134) + 4|0);
   HEAP32[$135>>2] = 4;
  } else if ((($47|0) == 16)) {
   $81 = $1;
   $82 = (($81) + 32|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (FUNCTION_TABLE_iiii[$83 & 255]($84,27512,4)|0);
   $err = $85;
   $86 = ($85|0)<(0);
   if ($86) {
    $87 = $err;
    $err = $87;
    $176 = $err;
    STACKTOP = sp;return ($176|0);
   }
   $88 = $err;
   $err = $88;
   $89 = HEAP32[27512>>2]|0;
   $90 = (31)==($89|0);
   if ($90) {
    $91 = HEAP32[((27512 + 4|0))>>2]|0;
    $92 = (992)==($91|0);
    if ($92) {
     $93 = HEAP32[((27512 + 8|0))>>2]|0;
     $94 = (31744)==($93|0);
     if ($94) {
      $95 = $0;
      $96 = (($95) + 56|0);
      ;HEAP32[$96+0>>2]=HEAP32[15464+0>>2]|0;HEAP32[$96+4>>2]=HEAP32[15464+4>>2]|0;HEAP32[$96+8>>2]=HEAP32[15464+8>>2]|0;HEAP32[$96+12>>2]=HEAP32[15464+12>>2]|0;
     }
    }
   }
   $97 = HEAP32[27512>>2]|0;
   $98 = (31)==($97|0);
   if ($98) {
    $99 = HEAP32[((27512 + 4|0))>>2]|0;
    $100 = (2016)==($99|0);
    if ($100) {
     $101 = HEAP32[((27512 + 8|0))>>2]|0;
     $102 = (63488)==($101|0);
     if ($102) {
      $103 = $0;
      $104 = (($103) + 56|0);
      ;HEAP32[$104+0>>2]=HEAP32[15480+0>>2]|0;HEAP32[$104+4>>2]=HEAP32[15480+4>>2]|0;HEAP32[$104+8>>2]=HEAP32[15480+8>>2]|0;HEAP32[$104+12>>2]=HEAP32[15480+12>>2]|0;
     } else {
      label = 43;
     }
    } else {
     label = 43;
    }
   } else {
    label = 43;
   }
   do {
    if ((label|0) == 43) {
     $err = -106;
     if (1) {
      $105 = $err;
      $err = $105;
      $176 = $err;
      STACKTOP = sp;return ($176|0);
     } else {
      $106 = $err;
      $err = $106;
      break;
     }
    }
   } while(0);
   $107 = $0;
   $108 = (($107) + 96|0);
   $109 = (($108) + 4|0);
   HEAP32[$109>>2] = 2;
  } else if ((($47|0) == 8)) {
   $48 = $1;
   $49 = (($48) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $1;
   $52 = (FUNCTION_TABLE_iiii[$50 & 255]($51,27512,1024)|0);
   $err = $52;
   $53 = ($52|0)<(0);
   if ($53) {
    $54 = $err;
    $err = $54;
    $176 = $err;
    STACKTOP = sp;return ($176|0);
   }
   $55 = $err;
   $err = $55;
   $i = 0;
   while(1) {
    $56 = $i;
    $57 = ($56>>>0)<(256);
    if (!($57)) {
     label = 31;
     break;
    }
    $58 = $i;
    $59 = $i;
    $60 = $59 << 8;
    $61 = $58 | $60;
    $62 = $i;
    $63 = $62 << 16;
    $64 = $61 | $63;
    $c = $64;
    $65 = $c;
    $66 = $i;
    $67 = (27512 + ($66<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($65|0)!=($68|0);
    $70 = $69 ? -106 : 0;
    $err = $70;
    $71 = ($70|0)<(0);
    if ($71) {
     break;
    }
    $73 = $err;
    $err = $73;
    $74 = $i;
    $75 = (($74) + 1)|0;
    $i = $75;
   }
   if ((label|0) == 31) {
    $76 = $0;
    $77 = (($76) + 56|0);
    ;HEAP32[$77+0>>2]=HEAP32[15448+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[15448+4>>2]|0;HEAP32[$77+8>>2]=HEAP32[15448+8>>2]|0;HEAP32[$77+12>>2]=HEAP32[15448+12>>2]|0;
    $78 = $0;
    $79 = (($78) + 96|0);
    $80 = (($79) + 4|0);
    HEAP32[$80>>2] = 1;
    break;
   }
   $72 = $err;
   $err = $72;
   $176 = $err;
   STACKTOP = sp;return ($176|0);
  } else {
   $err = -106;
   if (1) {
    $136 = $err;
    $err = $136;
    $176 = $err;
    STACKTOP = sp;return ($176|0);
   } else {
    $137 = $err;
    $err = $137;
    break;
   }
  }
 } while(0);
 $138 = (($bmpIH) + 4|0);
 $139 = HEAPU8[$138>>0]|(HEAPU8[$138+1>>0]<<8)|(HEAPU8[$138+2>>0]<<16)|(HEAPU8[$138+3>>0]<<24);
 $140 = $0;
 $141 = (($140) + 72|0);
 HEAP32[$141>>2] = $139;
 $142 = (($bmpIH) + 8|0);
 $143 = HEAPU8[$142>>0]|(HEAPU8[$142+1>>0]<<8)|(HEAPU8[$142+2>>0]<<16)|(HEAPU8[$142+3>>0]<<24);
 $144 = $0;
 $145 = (($144) + 76|0);
 HEAP32[$145>>2] = $143;
 $146 = (($bmpIH) + 24|0);
 $147 = HEAPU8[$146>>0]|(HEAPU8[$146+1>>0]<<8)|(HEAPU8[$146+2>>0]<<16)|(HEAPU8[$146+3>>0]<<24);
 $148 = (0)==($147|0);
 if ($148) {
  $156 = 96.0;
 } else {
  $149 = (($bmpIH) + 24|0);
  $150 = HEAPU8[$149>>0]|(HEAPU8[$149+1>>0]<<8)|(HEAPU8[$149+2>>0]<<16)|(HEAPU8[$149+3>>0]<<24);
  $151 = (+($150|0));
  $152 = $151 * 0.025399999999999999;
  $153 = $152;
  $156 = $153;
 }
 $154 = $0;
 $155 = (($154) + 84|0);
 HEAPF32[$155>>2] = $156;
 $157 = (($bmpIH) + 28|0);
 $158 = HEAPU8[$157>>0]|(HEAPU8[$157+1>>0]<<8)|(HEAPU8[$157+2>>0]<<16)|(HEAPU8[$157+3>>0]<<24);
 $159 = (0)==($158|0);
 if ($159) {
  $167 = 96.0;
 } else {
  $160 = (($bmpIH) + 28|0);
  $161 = HEAPU8[$160>>0]|(HEAPU8[$160+1>>0]<<8)|(HEAPU8[$160+2>>0]<<16)|(HEAPU8[$160+3>>0]<<24);
  $162 = (+($161|0));
  $163 = $162 * 0.025399999999999999;
  $164 = $163;
  $167 = $164;
 }
 $165 = $0;
 $166 = (($165) + 88|0);
 HEAPF32[$166>>2] = $167;
 $168 = $0;
 $169 = (($168) + 52|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = (($bmpFH) + 10|0);
 $172 = HEAPU8[$171>>0]|(HEAPU8[$171+1>>0]<<8)|(HEAPU8[$171+2>>0]<<16)|(HEAPU8[$171+3>>0]<<24);
 $173 = (($170) + ($172))|0;
 $174 = $0;
 $175 = (($174) + 96|0);
 HEAP32[$175>>2] = $173;
 $176 = $err;
 STACKTOP = sp;return ($176|0);
}
function _PKImageDecode_Initialize_BMP($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_PKTestDecode_Initialize($2,$3)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $6 = $err;
   $err = $6;
  } else {
   $7 = $err;
   $err = $7;
   $8 = $0;
   $9 = $1;
   $10 = (_ParseBMPHeader($8,$9)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    $12 = $err;
    $err = $12;
    break;
   }
   $13 = $err;
   $err = $13;
  }
 } while(0);
 $14 = $err;
 STACKTOP = sp;return ($14|0);
}
function _PKImageDecode_Copy_BMP($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cbLineM = 0, $cbLineS = 0, $err = 0, $i = 0, $offLine = 0, $offM = 0, $offS = 0, $pS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $pS = $6;
 $7 = $0;
 $8 = (($7) + 96|0);
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = (($11) + 72|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($10, $13)|0;
 $15 = (($14) + 3)|0;
 $16 = (($15>>>0) / 4)&-1;
 $17 = $16<<2;
 $cbLineS = $17;
 $18 = $0;
 $19 = (($18) + 96|0);
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = Math_imul($21, $24)|0;
 $cbLineM = $25;
 $i = 0;
 $26 = $3;
 $27 = $cbLineM;
 $28 = ($26>>>0)<($27>>>0);
 $29 = $28 ? -104 : 0;
 $err = $29;
 $30 = ($29|0)<(0);
 if ($30) {
  $31 = $err;
  $err = $31;
  $99 = $err;
  STACKTOP = sp;return ($99|0);
 }
 $32 = $err;
 $err = $32;
 $33 = $1;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $1;
 $37 = (($36) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38))|0;
 $40 = (($39) - 1)|0;
 $i = $40;
 while(1) {
  $41 = $1;
  $42 = (($41) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $i;
  $45 = ($43|0)<=($44|0);
  if (!($45)) {
   label = 14;
   break;
  }
  $46 = $0;
  $47 = (($46) + 96|0);
  $48 = (($47) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $1;
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($49, $51)|0;
  $offLine = $52;
  $53 = $cbLineS;
  $54 = $0;
  $55 = (($54) + 76|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $i;
  $58 = (($56) - ($57))|0;
  $59 = (($58) - 1)|0;
  $60 = Math_imul($53, $59)|0;
  $61 = $offLine;
  $62 = (($60) + ($61))|0;
  $offS = $62;
  $63 = $3;
  $64 = $i;
  $65 = $1;
  $66 = (($65) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($64) - ($67))|0;
  $69 = Math_imul($63, $68)|0;
  $70 = $offLine;
  $71 = (($69) + ($70))|0;
  $offM = $71;
  $72 = $pS;
  $73 = (($72) + 44|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $pS;
  $76 = $0;
  $77 = (($76) + 96|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $offS;
  $80 = (($78) + ($79))|0;
  $81 = (FUNCTION_TABLE_iii[$74 & 255]($75,$80)|0);
  $err = $81;
  $82 = ($81|0)<(0);
  if ($82) {
   label = 7;
   break;
  }
  $84 = $err;
  $err = $84;
  $85 = $pS;
  $86 = (($85) + 32|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $pS;
  $89 = $2;
  $90 = $offM;
  $91 = (($89) + ($90)|0);
  $92 = $cbLineM;
  $93 = (FUNCTION_TABLE_iiii[$87 & 255]($88,$91,$92)|0);
  $err = $93;
  $94 = ($93|0)<(0);
  if ($94) {
   label = 10;
   break;
  }
  $96 = $err;
  $err = $96;
  $97 = $i;
  $98 = (($97) + -1)|0;
  $i = $98;
 }
 if ((label|0) == 7) {
  $83 = $err;
  $err = $83;
  $99 = $err;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 10) {
  $95 = $err;
  $err = $95;
  $99 = $err;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 14) {
  $99 = $err;
  STACKTOP = sp;return ($99|0);
 }
 return 0|0;
}
function _PKImageDecode_Create_BMP($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKTestDecode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 178;
 $9 = $pID;
 $10 = (($9) + 28|0);
 HEAP32[$10>>2] = 179;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _WriteHDRHeader($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $err = 0, $pS = 0, $txtbuff = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $txtbuff = sp + 20|0;
 $0 = $pIE;
 $err = 0;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $pS = $3;
 (_strcpy(($txtbuff|0),(28544|0))|0);
 $4 = $pS;
 $5 = (($4) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $pS;
 $8 = (_strlen(($txtbuff|0))|0);
 $9 = (FUNCTION_TABLE_iiii[$6 & 255]($7,$txtbuff,$8)|0);
 $err = $9;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = $err;
  $err = $11;
  $40 = $err;
  STACKTOP = sp;return ($40|0);
 }
 $12 = $err;
 $err = $12;
 $13 = (_strlen(($txtbuff|0))|0);
 $14 = $0;
 $15 = (($14) + 112|0);
 HEAP32[$15>>2] = $13;
 $16 = $0;
 $17 = (($16) + 88|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = (($19) + 84|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$vararg_buffer>>2] = $18;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $21;
 (_sprintf($txtbuff,28584,$vararg_buffer)|0);
 $22 = $pS;
 $23 = (($22) + 40|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $pS;
 $26 = (_strlen(($txtbuff|0))|0);
 $27 = (FUNCTION_TABLE_iiii[$24 & 255]($25,$txtbuff,$26)|0);
 $err = $27;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = $err;
  $err = $29;
  $40 = $err;
  STACKTOP = sp;return ($40|0);
 }
 $30 = $err;
 $err = $30;
 $31 = (_strlen(($txtbuff|0))|0);
 $32 = $0;
 $33 = (($32) + 112|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($31))|0;
 HEAP32[$33>>2] = $35;
 $36 = $0;
 $37 = (($36) + 116|0);
 HEAP32[$37>>2] = 4;
 $38 = $0;
 $39 = (($38) + 108|0);
 HEAP32[$39>>2] = 1;
 $40 = $err;
 STACKTOP = sp;return ($40|0);
}
function _PKImageEncode_WritePixels_HDR($pIE,$cLine,$pbPixel,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixel = $pbPixel|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $cbLineM = 0, $cbLineS = 0, $err = 0, $i = 0, $offM = 0, $offS = 0, $pS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixel;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $pS = $6;
 $cbLineM = 0;
 $cbLineS = 0;
 $i = 0;
 $7 = $0;
 $8 = (($7) + 108|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if (!($10)) {
   $11 = $0;
   $12 = (_WriteHDRHeader($11)|0);
   $err = $12;
   $13 = ($12|0)<(0);
   if ($13) {
    $14 = $err;
    $err = $14;
    $80 = $err;
    STACKTOP = sp;return ($80|0);
   } else {
    $15 = $err;
    $err = $15;
    break;
   }
  }
 } while(0);
 $16 = $0;
 $17 = (($16) + 116|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = (($19) + 84|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($18, $21)|0;
 $cbLineM = $22;
 $23 = $cbLineM;
 $24 = (($23) + 3)|0;
 $25 = (($24>>>0) / 4)&-1;
 $26 = $25<<2;
 $cbLineS = $26;
 $27 = $3;
 $28 = $cbLineM;
 $29 = ($27>>>0)<($28>>>0);
 $30 = $29 ? -104 : 0;
 $err = $30;
 $31 = ($30|0)<(0);
 if ($31) {
  $32 = $err;
  $err = $32;
  $80 = $err;
  STACKTOP = sp;return ($80|0);
 }
 $33 = $err;
 $err = $33;
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = $1;
  $36 = (($35) - 1)|0;
  $37 = ($34>>>0)<=($36>>>0);
  if (!($37)) {
   label = 19;
   break;
  }
  $38 = $3;
  $39 = $i;
  $40 = Math_imul($38, $39)|0;
  $offM = $40;
  $41 = $cbLineS;
  $42 = $0;
  $43 = (($42) + 92|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $i;
  $46 = (($44) + ($45))|0;
  $47 = Math_imul($41, $46)|0;
  $offS = $47;
  $48 = $pS;
  $49 = (($48) + 44|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $pS;
  $52 = $0;
  $53 = (($52) + 112|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $offS;
  $56 = (($54) + ($55))|0;
  $57 = (FUNCTION_TABLE_iii[$50 & 255]($51,$56)|0);
  $err = $57;
  $58 = ($57|0)<(0);
  if ($58) {
   label = 12;
   break;
  }
  $60 = $err;
  $err = $60;
  $61 = $pS;
  $62 = (($61) + 40|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $pS;
  $65 = $2;
  $66 = $offM;
  $67 = (($65) + ($66)|0);
  $68 = $cbLineM;
  $69 = (FUNCTION_TABLE_iiii[$63 & 255]($64,$67,$68)|0);
  $err = $69;
  $70 = ($69|0)<(0);
  if ($70) {
   label = 15;
   break;
  }
  $72 = $err;
  $err = $72;
  $73 = $i;
  $74 = (($73) + 1)|0;
  $i = $74;
 }
 if ((label|0) == 12) {
  $59 = $err;
  $err = $59;
  $80 = $err;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 15) {
  $71 = $err;
  $err = $71;
  $80 = $err;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 19) {
  $75 = $1;
  $76 = $0;
  $77 = (($76) + 92|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + ($75))|0;
  HEAP32[$77>>2] = $79;
  $80 = $err;
  STACKTOP = sp;return ($80|0);
 }
 return 0|0;
}
function _PKImageEncode_Create_HDR($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $pIE = 0;
 $1 = $0;
 $2 = (_PKImageEncode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $10 = $err;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pIE = $7;
 $8 = $pIE;
 $9 = (($8) + 28|0);
 HEAP32[$9>>2] = 180;
 $10 = $err;
 STACKTOP = sp;return ($10|0);
}
function _ParseHDRHeader($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $done = 0, $err = 0, $txtbuff = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $txtbuff = sp + 32|0;
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $done = 0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_fgets(($txtbuff|0),12,($3|0))|0);
 $5 = (0|0)==($4|0);
 $6 = $5 ? -106 : 0;
 $err = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $err;
  $err = $8;
  $102 = $err;
  STACKTOP = sp;return ($102|0);
 }
 $9 = $err;
 $err = $9;
 $10 = (_strcmp($txtbuff,28600)|0);
 $11 = (0)!=($10|0);
 $12 = $11 ? -106 : 0;
 $err = $12;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $err;
  $err = $14;
  $102 = $err;
  STACKTOP = sp;return ($102|0);
 }
 $15 = $err;
 $err = $15;
 while(1) {
  $16 = $done;
  $17 = ($16|0)!=(0);
  $18 = $17 ^ 1;
  if (!($18)) {
   label = 20;
   break;
  }
  $19 = $1;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_fgets(($txtbuff|0),512,($20|0))|0);
  $22 = (0|0)==($21|0);
  $23 = $22 ? -106 : 0;
  $err = $23;
  $24 = ($23|0)<(0);
  if ($24) {
   label = 10;
   break;
  }
  $26 = $err;
  $err = $26;
  $27 = (_strncmp($txtbuff,28616,6)|0);
  $28 = (0)==($27|0);
  if ($28) {
   $29 = (_strcmp($txtbuff,28624)|0);
   $30 = (0)!=($29|0);
   $31 = $30 ? -106 : 0;
   $err = $31;
   $32 = ($31|0)<(0);
   if ($32) {
    label = 14;
    break;
   }
   $34 = $err;
   $err = $34;
  }
  $35 = (_strncmp($txtbuff,28648,2)|0);
  $36 = (0)==($35|0);
  if ($36) {
   $37 = $0;
   $38 = (($37) + 76|0);
   $39 = $0;
   $40 = (($39) + 72|0);
   HEAP32[$vararg_buffer>>2] = $38;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $40;
   (_sscanf($txtbuff,28584,$vararg_buffer)|0);
   $done = 1;
  }
 }
 if ((label|0) == 10) {
  $25 = $err;
  $err = $25;
  $102 = $err;
  STACKTOP = sp;return ($102|0);
 }
 else if ((label|0) == 14) {
  $33 = $err;
  $err = $33;
  $102 = $err;
  STACKTOP = sp;return ($102|0);
 }
 else if ((label|0) == 20) {
  $41 = $1;
  $42 = (($41) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $1;
  $45 = (FUNCTION_TABLE_iiii[$43 & 255]($44,$txtbuff,3)|0);
  $err = $45;
  $46 = ($45|0)<(0);
  if ($46) {
   $47 = $err;
   $err = $47;
   $102 = $err;
   STACKTOP = sp;return ($102|0);
  }
  $48 = $err;
  $err = $48;
  $49 = HEAP8[$txtbuff>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = (2)==($50|0);
  if ($51) {
   $52 = (($txtbuff) + 1|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = (2)==($54|0);
   if ($55) {
    $56 = (($txtbuff) + 2|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $59 = $58 & 128;
    $60 = (0)==($59|0);
    if (!($60)) {
     label = 26;
    }
   } else {
    label = 26;
   }
  } else {
   label = 26;
  }
  do {
   if ((label|0) == 26) {
    $61 = HEAP8[$txtbuff>>0]|0;
    $62 = $61 << 24 >> 24;
    $63 = (1)==($62|0);
    if ($63) {
     $64 = (($txtbuff) + 1|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = (1)==($66|0);
     if ($67) {
      $68 = (($txtbuff) + 2|0);
      $69 = HEAP8[$68>>0]|0;
      $70 = $69 << 24 >> 24;
      $71 = (1)==($70|0);
      if ($71) {
       break;
      }
     }
    }
    $72 = $0;
    $73 = (($72) + 56|0);
    ;HEAP32[$73+0>>2]=HEAP32[15960+0>>2]|0;HEAP32[$73+4>>2]=HEAP32[15960+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[15960+8>>2]|0;HEAP32[$73+12>>2]=HEAP32[15960+12>>2]|0;
    $74 = $0;
    $75 = (($74) + 96|0);
    $76 = (($75) + 4|0);
    HEAP32[$76>>2] = 4;
    $77 = $1;
    $78 = (($77) + 48|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $1;
    $81 = $0;
    $82 = (($81) + 96|0);
    $83 = (FUNCTION_TABLE_iii[$79 & 255]($80,$82)|0);
    $err = $83;
    $84 = ($83|0)<(0);
    if ($84) {
     $85 = $err;
     $err = $85;
     $102 = $err;
     STACKTOP = sp;return ($102|0);
    }
    $86 = $err;
    $err = $86;
    $87 = $0;
    $88 = (($87) + 96|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) - 3)|0;
    HEAP32[$88>>2] = $90;
    $91 = $1;
    $92 = (($91) + 44|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $1;
    $95 = $0;
    $96 = (($95) + 96|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (FUNCTION_TABLE_iii[$93 & 255]($94,$97)|0);
    $err = $98;
    $99 = ($98|0)<(0);
    if ($99) {
     $100 = $err;
     $err = $100;
     $102 = $err;
     STACKTOP = sp;return ($102|0);
    }
    $101 = $err;
    $err = $101;
    $102 = $err;
    STACKTOP = sp;return ($102|0);
   }
  } while(0);
  (_printf((28656|0),($vararg_buffer2|0))|0);
  $err = -106;
  $102 = $err;
  STACKTOP = sp;return ($102|0);
 }
 return 0|0;
}
function _PKImageDecode_Initialize_HDR($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_PKTestDecode_Initialize($2,$3)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $6 = $err;
   $err = $6;
  } else {
   $7 = $err;
   $err = $7;
   $8 = $0;
   $9 = $1;
   $10 = (_ParseHDRHeader($8,$9)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    $12 = $err;
    $err = $12;
    break;
   }
   $13 = $err;
   $err = $13;
  }
 } while(0);
 $14 = $err;
 STACKTOP = sp;return ($14|0);
}
function _PKImageDecode_Copy_HDR($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $cbLineM = 0, $cbLineS = 0, $err = 0, $i = 0, $offLine = 0, $offM = 0;
 var $offS = 0, $pS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $pS = $6;
 $7 = $0;
 $8 = (($7) + 96|0);
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = (($11) + 72|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($10, $13)|0;
 $15 = (($14) + 3)|0;
 $16 = (($15>>>0) / 4)&-1;
 $17 = $16<<2;
 $cbLineS = $17;
 $18 = $0;
 $19 = (($18) + 96|0);
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = Math_imul($21, $24)|0;
 $cbLineM = $25;
 $i = 0;
 $26 = $3;
 $27 = $cbLineM;
 $28 = ($26>>>0)<($27>>>0);
 $29 = $28 ? -104 : 0;
 $err = $29;
 $30 = ($29|0)<(0);
 if ($30) {
  $31 = $err;
  $err = $31;
  $93 = $err;
  STACKTOP = sp;return ($93|0);
 }
 $32 = $err;
 $err = $32;
 $33 = $1;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $i = $35;
 while(1) {
  $36 = $i;
  $37 = $1;
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $1;
  $41 = (($40) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($39) + ($42))|0;
  $44 = ($36|0)<($43|0);
  if (!($44)) {
   label = 14;
   break;
  }
  $45 = $0;
  $46 = (($45) + 96|0);
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $1;
  $50 = HEAP32[$49>>2]|0;
  $51 = Math_imul($48, $50)|0;
  $offLine = $51;
  $52 = $cbLineS;
  $53 = $i;
  $54 = Math_imul($52, $53)|0;
  $55 = $offLine;
  $56 = (($54) + ($55))|0;
  $offS = $56;
  $57 = $3;
  $58 = $i;
  $59 = $1;
  $60 = (($59) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($58) - ($61))|0;
  $63 = Math_imul($57, $62)|0;
  $64 = $offLine;
  $65 = (($63) + ($64))|0;
  $offM = $65;
  $66 = $pS;
  $67 = (($66) + 44|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $pS;
  $70 = $0;
  $71 = (($70) + 96|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $offS;
  $74 = (($72) + ($73))|0;
  $75 = (FUNCTION_TABLE_iii[$68 & 255]($69,$74)|0);
  $err = $75;
  $76 = ($75|0)<(0);
  if ($76) {
   label = 7;
   break;
  }
  $78 = $err;
  $err = $78;
  $79 = $pS;
  $80 = (($79) + 32|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $pS;
  $83 = $2;
  $84 = $offM;
  $85 = (($83) + ($84)|0);
  $86 = $cbLineM;
  $87 = (FUNCTION_TABLE_iiii[$81 & 255]($82,$85,$86)|0);
  $err = $87;
  $88 = ($87|0)<(0);
  if ($88) {
   label = 10;
   break;
  }
  $90 = $err;
  $err = $90;
  $91 = $i;
  $92 = (($91) + 1)|0;
  $i = $92;
 }
 if ((label|0) == 7) {
  $77 = $err;
  $err = $77;
  $93 = $err;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 10) {
  $89 = $err;
  $err = $89;
  $93 = $err;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 14) {
  $93 = $err;
  STACKTOP = sp;return ($93|0);
 }
 return 0|0;
}
function _PKImageDecode_Create_HDR($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKTestDecode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 181;
 $9 = $pID;
 $10 = (($9) + 28|0);
 HEAP32[$10>>2] = 182;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _WritePNMHeader($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $PI = 0, $buf = 0, $cb = 0, $err = 0, $pS = 0, $szSig = 0;
 var $uMaxVal = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $PI = sp + 48|0;
 $buf = sp + 112|0;
 $szSig = sp + 104|0;
 $0 = $pIE;
 $err = 0;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $pS = $3;
 dest=$buf+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $cb = 0;
 $uMaxVal = 0;
 $4 = $0;
 $5 = (($4) + 68|0);
 HEAP32[$PI>>2] = $5;
 (_PixelFormatLookup($PI,0)|0);
 $6 = HEAP32[$PI>>2]|0;
 $7 = (_memcmp(15432,$6,16)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $10 = HEAP32[$PI>>2]|0;
  $11 = (_memcmp(15448,$10,16)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $14 = HEAP32[$PI>>2]|0;
   $15 = (_memcmp(15528,$14,16)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    $18 = HEAP32[$PI>>2]|0;
    $19 = (_memcmp(15704,$18,16)|0);
    $20 = ($19|0)!=(0);
    if ($20) {
     $22 = HEAP32[$PI>>2]|0;
     $23 = (_memcmp(15496,$22,16)|0);
     $24 = ($23|0)!=(0);
     if ($24) {
      $26 = HEAP32[$PI>>2]|0;
      $27 = (_memcmp(15768,$26,16)|0);
      $28 = ($27|0)!=(0);
      do {
       if ($28) {
        $err = -106;
        if (1) {
         $30 = $err;
         $err = $30;
         $93 = $err;
         STACKTOP = sp;return ($93|0);
        } else {
         $31 = $err;
         $err = $31;
         break;
        }
       } else {
        HEAP8[$szSig>>0] = 80;
        $29 = (($szSig) + 1|0);
        HEAP8[$29>>0] = 70;
       }
      } while(0);
     } else {
      HEAP8[$szSig>>0] = 80;
      $25 = (($szSig) + 1|0);
      HEAP8[$25>>0] = 54;
      $uMaxVal = 65535;
     }
    } else {
     HEAP8[$szSig>>0] = 80;
     $21 = (($szSig) + 1|0);
     HEAP8[$21>>0] = 54;
     $uMaxVal = 65535;
    }
   } else {
    HEAP8[$szSig>>0] = 80;
    $17 = (($szSig) + 1|0);
    HEAP8[$17>>0] = 54;
    $uMaxVal = 255;
   }
  } else {
   HEAP8[$szSig>>0] = 80;
   $13 = (($szSig) + 1|0);
   HEAP8[$13>>0] = 53;
   $uMaxVal = 255;
  }
 } else {
  HEAP8[$szSig>>0] = 80;
  $9 = (($szSig) + 1|0);
  HEAP8[$9>>0] = 53;
  $uMaxVal = 1;
 }
 $32 = HEAP8[$szSig>>0]|0;
 $33 = $32 << 24 >> 24;
 $34 = (80)==($33|0);
 if ($34) {
  $35 = (($szSig) + 1|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = (70)==($37|0);
  if ($38) {
   $39 = HEAP8[$szSig>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = (($szSig) + 1|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 << 24 >> 24;
   $44 = $0;
   $45 = (($44) + 84|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $0;
   $48 = (($47) + 88|0);
   $49 = HEAP32[$48>>2]|0;
   HEAP32[$vararg_buffer>>2] = $40;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $43;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $46;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $49;
   $vararg_ptr4 = (($vararg_buffer) + 16|0);
   HEAP32[$vararg_ptr4>>2] = 28712;
   $50 = (_sprintf($buf,28696,$vararg_buffer)|0);
   $cb = $50;
  } else {
   label = 25;
  }
 } else {
  label = 25;
 }
 if ((label|0) == 25) {
  $51 = HEAP8[$szSig>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = (($szSig) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = $0;
  $57 = (($56) + 84|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $0;
  $60 = (($59) + 88|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $uMaxVal;
  HEAP32[$vararg_buffer5>>2] = $52;
  $vararg_ptr8 = (($vararg_buffer5) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $55;
  $vararg_ptr9 = (($vararg_buffer5) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $58;
  $vararg_ptr10 = (($vararg_buffer5) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $61;
  $vararg_ptr11 = (($vararg_buffer5) + 16|0);
  HEAP32[$vararg_ptr11>>2] = $62;
  $63 = (_sprintf($buf,28720,$vararg_buffer5)|0);
  $cb = $63;
 }
 $64 = $cb;
 $65 = ($64>>>0)<(64);
 if (!($65)) {
  ___assert_fail((28736|0),(28760|0),94,(28784|0));
  // unreachable;
 }
 $66 = $pS;
 $67 = (($66) + 40|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $pS;
 $70 = $cb;
 $71 = (FUNCTION_TABLE_iiii[$68 & 255]($69,$buf,$70)|0);
 $err = $71;
 $72 = ($71|0)<(0);
 if ($72) {
  $73 = $err;
  $err = $73;
  $93 = $err;
  STACKTOP = sp;return ($93|0);
 }
 $74 = $err;
 $err = $74;
 $75 = $pS;
 $76 = (($75) + 48|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $pS;
 $79 = $0;
 $80 = (($79) + 112|0);
 $81 = (FUNCTION_TABLE_iii[$77 & 255]($78,$80)|0);
 $err = $81;
 $82 = ($81|0)<(0);
 if ($82) {
  $83 = $err;
  $err = $83;
  $93 = $err;
  STACKTOP = sp;return ($93|0);
 }
 $84 = $err;
 $err = $84;
 $85 = (($PI) + 16|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + 7)|0;
 $88 = $87 >>> 3;
 $89 = $0;
 $90 = (($89) + 116|0);
 HEAP32[$90>>2] = $88;
 $91 = $0;
 $92 = (($91) + 108|0);
 HEAP32[$92>>2] = 1;
 $93 = $err;
 STACKTOP = sp;return ($93|0);
}
function _PKImageEncode_WritePixels_PNM($pIE,$cLine,$pbPixel,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixel = $pbPixel|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $cbLine = 0, $err = 0, $i = 0, $offPos = 0, $pS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixel;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $pS = $6;
 $cbLine = 0;
 $offPos = 0;
 $i = 0;
 $7 = $0;
 $8 = (($7) + 108|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if (!($10)) {
   $11 = $0;
   $12 = (_WritePNMHeader($11)|0);
   $err = $12;
   $13 = ($12|0)<(0);
   if ($13) {
    $14 = $err;
    $err = $14;
    $72 = $err;
    STACKTOP = sp;return ($72|0);
   } else {
    $15 = $err;
    $err = $15;
    break;
   }
  }
 } while(0);
 $16 = $0;
 $17 = (($16) + 116|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = (($19) + 84|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($18, $21)|0;
 $cbLine = $22;
 $23 = $3;
 $24 = $cbLine;
 $25 = ($23>>>0)<($24>>>0);
 $26 = $25 ? -104 : 0;
 $err = $26;
 $27 = ($26|0)<(0);
 if ($27) {
  $28 = $err;
  $err = $28;
  $72 = $err;
  STACKTOP = sp;return ($72|0);
 }
 $29 = $err;
 $err = $29;
 $30 = $0;
 $31 = (($30) + 112|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $cbLine;
 $34 = $0;
 $35 = (($34) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = Math_imul($33, $36)|0;
 $38 = (($32) + ($37))|0;
 $offPos = $38;
 $39 = $pS;
 $40 = (($39) + 44|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $pS;
 $43 = $offPos;
 $44 = (FUNCTION_TABLE_iii[$41 & 255]($42,$43)|0);
 $err = $44;
 $45 = ($44|0)<(0);
 if ($45) {
  $46 = $err;
  $err = $46;
  $72 = $err;
  STACKTOP = sp;return ($72|0);
 }
 $47 = $err;
 $err = $47;
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = $1;
  $50 = ($48>>>0)<($49>>>0);
  if (!($50)) {
   label = 19;
   break;
  }
  $51 = $pS;
  $52 = (($51) + 40|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $pS;
  $55 = $2;
  $56 = $3;
  $57 = $i;
  $58 = Math_imul($56, $57)|0;
  $59 = (($55) + ($58)|0);
  $60 = $cbLine;
  $61 = (FUNCTION_TABLE_iiii[$53 & 255]($54,$59,$60)|0);
  $err = $61;
  $62 = ($61|0)<(0);
  if ($62) {
   label = 15;
   break;
  }
  $64 = $err;
  $err = $64;
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 if ((label|0) == 15) {
  $63 = $err;
  $err = $63;
  $72 = $err;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 19) {
  $67 = $1;
  $68 = $0;
  $69 = (($68) + 92|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + ($67))|0;
  HEAP32[$69>>2] = $71;
  $72 = $err;
  STACKTOP = sp;return ($72|0);
 }
 return 0|0;
}
function _PKImageEncode_Create_PNM($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $pIE = 0;
 $1 = $0;
 $2 = (_PKImageEncode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $10 = $err;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pIE = $7;
 $8 = $pIE;
 $9 = (($8) + 28|0);
 HEAP32[$9>>2] = 183;
 $10 = $err;
 STACKTOP = sp;return ($10|0);
}
function _GetLineSkipPound($pWS,$pb,$cb) {
 $pWS = $pWS|0;
 $pb = $pb|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cb1 = 0, $err = 0, $pb1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $pb;
 $2 = $cb;
 $err = 0;
 L1: while(1) {
  $3 = $1;
  $pb1 = $3;
  $4 = $2;
  $cb1 = $4;
  while(1) {
   $5 = $0;
   $6 = (($5) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $0;
   $9 = $pb1;
   $10 = (FUNCTION_TABLE_iiii[$7 & 255]($8,$9,1)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    label = 4;
    break L1;
   }
   $13 = $err;
   $err = $13;
   $14 = $cb1;
   $15 = (($14) + -1)|0;
   $cb1 = $15;
   $16 = $pb1;
   $17 = (($16) + 1|0);
   $pb1 = $17;
   $18 = $cb1;
   $19 = ($18>>>0)>(0);
   if ($19) {
    $20 = $pb1;
    $21 = (($20) + -1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = ($23|0)!=(10);
    $30 = $24;
   } else {
    $30 = 0;
   }
   if (!($30)) {
    break;
   }
  }
  $25 = $1;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (35)==($27|0);
  if (!($28)) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 4) {
  $12 = $err;
  $err = $12;
  $29 = $err;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 12) {
  $29 = $err;
  STACKTOP = sp;return ($29|0);
 }
 return 0|0;
}
function _ParsePNMHeader($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $height = 0, $idxBitDepth = 0, $idxChannel = 0, $line = 0, $maxval = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $width = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $line = sp + 72|0;
 $width = sp + 36|0;
 $height = sp + 52|0;
 $maxval = sp + 40|0;
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 dest=$line+0|0; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $idxChannel = 0;
 $idxBitDepth = 0;
 HEAP32[$width>>2] = 0;
 HEAP32[$height>>2] = 0;
 HEAP32[$maxval>>2] = 0;
 $2 = $1;
 $3 = (_GetLineSkipPound($2,$line,128)|0);
 $err = $3;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = $err;
  $err = $5;
  $124 = $err;
  STACKTOP = sp;return ($124|0);
 }
 $6 = $err;
 $err = $6;
 $7 = (_strstr($line,28816)|0);
 $8 = ($line|0)==($7|0);
 do {
  if ($8) {
   $idxChannel = 0;
   $9 = $1;
   $10 = (_GetLineSkipPound($9,$line,128)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    $12 = $err;
    $err = $12;
    $124 = $err;
    STACKTOP = sp;return ($124|0);
   }
   $13 = $err;
   $err = $13;
   HEAP32[$vararg_buffer>>2] = $width;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $height;
   $14 = (_sscanf($line,28824,$vararg_buffer)|0);
   $15 = (2)!=($14|0);
   $16 = $15 ? -106 : 0;
   $err = $16;
   $17 = ($16|0)<(0);
   if ($17) {
    $18 = $err;
    $err = $18;
    $124 = $err;
    STACKTOP = sp;return ($124|0);
   } else {
    $19 = $err;
    $err = $19;
    break;
   }
  } else {
   $20 = (_strstr($line,28832)|0);
   $21 = ($line|0)==($20|0);
   do {
    if ($21) {
     $idxChannel = 1;
     $22 = $1;
     $23 = (_GetLineSkipPound($22,$line,128)|0);
     $err = $23;
     $24 = ($23|0)<(0);
     if ($24) {
      $25 = $err;
      $err = $25;
      $124 = $err;
      STACKTOP = sp;return ($124|0);
     }
     $26 = $err;
     $err = $26;
     HEAP32[$vararg_buffer2>>2] = $width;
     $vararg_ptr5 = (($vararg_buffer2) + 4|0);
     HEAP32[$vararg_ptr5>>2] = $height;
     $27 = (_sscanf($line,28824,$vararg_buffer2)|0);
     $28 = (2)!=($27|0);
     $29 = $28 ? -106 : 0;
     $err = $29;
     $30 = ($29|0)<(0);
     if ($30) {
      $31 = $err;
      $err = $31;
      $124 = $err;
      STACKTOP = sp;return ($124|0);
     } else {
      $32 = $err;
      $err = $32;
      break;
     }
    } else {
     $33 = (_strstr($line,28840)|0);
     $34 = ($line|0)==($33|0);
     do {
      if ($34) {
       $idxChannel = 2;
       $35 = $1;
       $36 = (_GetLineSkipPound($35,$line,128)|0);
       $err = $36;
       $37 = ($36|0)<(0);
       if ($37) {
        $38 = $err;
        $err = $38;
        $124 = $err;
        STACKTOP = sp;return ($124|0);
       }
       $39 = $err;
       $err = $39;
       HEAP32[$vararg_buffer6>>2] = $width;
       $40 = (_sscanf($line,28848,$vararg_buffer6)|0);
       $41 = (1)!=($40|0);
       $42 = $41 ? -106 : 0;
       $err = $42;
       $43 = ($42|0)<(0);
       if ($43) {
        $44 = $err;
        $err = $44;
        $124 = $err;
        STACKTOP = sp;return ($124|0);
       }
       $45 = $err;
       $err = $45;
       $46 = $1;
       $47 = (_GetLineSkipPound($46,$line,128)|0);
       $err = $47;
       $48 = ($47|0)<(0);
       if ($48) {
        $49 = $err;
        $err = $49;
        $124 = $err;
        STACKTOP = sp;return ($124|0);
       }
       $50 = $err;
       $err = $50;
       HEAP32[$vararg_buffer9>>2] = $height;
       $51 = (_sscanf($line,28848,$vararg_buffer9)|0);
       $52 = (1)!=($51|0);
       $53 = $52 ? -106 : 0;
       $err = $53;
       $54 = ($53|0)<(0);
       if ($54) {
        $55 = $err;
        $err = $55;
        $124 = $err;
        STACKTOP = sp;return ($124|0);
       } else {
        $56 = $err;
        $err = $56;
        break;
       }
      } else {
       $err = -106;
       if (1) {
        $57 = $err;
        $err = $57;
        $124 = $err;
        STACKTOP = sp;return ($124|0);
       } else {
        $58 = $err;
        $err = $58;
        break;
       }
      }
     } while(0);
    }
   } while(0);
  }
 } while(0);
 $59 = HEAP32[$width>>2]|0;
 $60 = (0)==($59|0);
 if ($60) {
  $64 = 1;
 } else {
  $61 = HEAP32[$height>>2]|0;
  $62 = (0)==($61|0);
  $64 = $62;
 }
 $63 = $64 ? -106 : 0;
 $err = $63;
 $65 = ($63|0)<(0);
 if ($65) {
  $66 = $err;
  $err = $66;
  $124 = $err;
  STACKTOP = sp;return ($124|0);
 }
 $67 = $err;
 $err = $67;
 $68 = HEAP32[$width>>2]|0;
 $69 = $0;
 $70 = (($69) + 72|0);
 HEAP32[$70>>2] = $68;
 $71 = HEAP32[$height>>2]|0;
 $72 = $0;
 $73 = (($72) + 76|0);
 HEAP32[$73>>2] = $71;
 $74 = $1;
 $75 = (_GetLineSkipPound($74,$line,128)|0);
 $err = $75;
 $76 = ($75|0)<(0);
 if ($76) {
  $77 = $err;
  $err = $77;
  $124 = $err;
  STACKTOP = sp;return ($124|0);
 }
 $78 = $err;
 $err = $78;
 HEAP32[$vararg_buffer12>>2] = $maxval;
 $79 = (_sscanf($line,28848,$vararg_buffer12)|0);
 $80 = (1)!=($79|0);
 $81 = $80 ? -106 : 0;
 $err = $81;
 $82 = ($81|0)<(0);
 if ($82) {
  $83 = $err;
  $err = $83;
  $124 = $err;
  STACKTOP = sp;return ($124|0);
 }
 $84 = $err;
 $err = $84;
 $85 = $idxChannel;
 $86 = (2)==($85|0);
 do {
  if ($86) {
   $87 = HEAP32[$maxval>>2]|0;
   $88 = ($87|0)!=(-1);
   $89 = $88 ? -106 : 0;
   $err = $89;
   $90 = ($89|0)<(0);
   if ($90) {
    $91 = $err;
    $err = $91;
    $124 = $err;
    STACKTOP = sp;return ($124|0);
   } else {
    $92 = $err;
    $err = $92;
    $93 = $0;
    $94 = (($93) + 56|0);
    ;HEAP32[$94+0>>2]=HEAP32[15768+0>>2]|0;HEAP32[$94+4>>2]=HEAP32[15768+4>>2]|0;HEAP32[$94+8>>2]=HEAP32[15768+8>>2]|0;HEAP32[$94+12>>2]=HEAP32[15768+12>>2]|0;
    break;
   }
  } else {
   $95 = HEAP32[$maxval>>2]|0;
   $96 = ($95>>>0)<(1);
   if ($96) {
    $100 = 1;
   } else {
    $97 = HEAP32[$maxval>>2]|0;
    $98 = (65535)<($97>>>0);
    $100 = $98;
   }
   $99 = $100 ? -106 : 0;
   $err = $99;
   $101 = ($99|0)<(0);
   if ($101) {
    $102 = $err;
    $err = $102;
    $124 = $err;
    STACKTOP = sp;return ($124|0);
   } else {
    $103 = $err;
    $err = $103;
    $104 = HEAP32[$maxval>>2]|0;
    $105 = (255)<($104>>>0);
    $106 = $105&1;
    $idxBitDepth = $106;
    $107 = $0;
    $108 = (($107) + 56|0);
    $109 = $idxBitDepth;
    $110 = $idxChannel;
    $111 = (28800 + ($110<<3)|0);
    $112 = (($111) + ($109<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    ;HEAP32[$108+0>>2]=HEAP32[$113+0>>2]|0;HEAP32[$108+4>>2]=HEAP32[$113+4>>2]|0;HEAP32[$108+8>>2]=HEAP32[$113+8>>2]|0;HEAP32[$108+12>>2]=HEAP32[$113+12>>2]|0;
    break;
   }
  }
 } while(0);
 $114 = $1;
 $115 = (($114) + 48|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $1;
 $118 = $0;
 $119 = (($118) + 96|0);
 $120 = (FUNCTION_TABLE_iii[$116 & 255]($117,$119)|0);
 $err = $120;
 $121 = ($120|0)<(0);
 if ($121) {
  $122 = $err;
  $err = $122;
  $124 = $err;
  STACKTOP = sp;return ($124|0);
 }
 $123 = $err;
 $err = $123;
 $124 = $err;
 STACKTOP = sp;return ($124|0);
}
function _PKImageDecode_Initialize_PNM($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_PKTestDecode_Initialize($2,$3)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $6 = $err;
   $err = $6;
  } else {
   $7 = $err;
   $err = $7;
   $8 = $0;
   $9 = $1;
   $10 = (_ParsePNMHeader($8,$9)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    $12 = $err;
    $err = $12;
    break;
   }
   $13 = $err;
   $err = $13;
  }
 } while(0);
 $14 = $err;
 STACKTOP = sp;return ($14|0);
}
function _PKImageDecode_Copy_PNM($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $PI = 0, $cbLineM = 0, $cbLineS = 0, $err = 0, $i = 0, $offLine = 0, $offM = 0, $offS = 0, $pS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $PI = sp + 24|0;
 $0 = $pID;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $pS = $6;
 $cbLineS = 0;
 $cbLineM = 0;
 $i = 0;
 $7 = $0;
 $8 = (($7) + 56|0);
 HEAP32[$PI>>2] = $8;
 (_PixelFormatLookup($PI,0)|0);
 $9 = (($PI) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (0)==($10|0);
 if ($11) {
  $12 = (($PI) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  $15 = (($14) + 72|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = Math_imul($13, $16)|0;
  $18 = (($17) + 7)|0;
  $19 = $18 >>> 3;
  $28 = $19;
 } else {
  $20 = (($PI) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 7)|0;
  $23 = $22 >>> 3;
  $24 = $0;
  $25 = (($24) + 72|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = Math_imul($23, $26)|0;
  $28 = $27;
 }
 $cbLineS = $28;
 $29 = (($PI) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (0)==($30|0);
 if ($31) {
  $32 = (($PI) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $1;
  $35 = (($34) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = Math_imul($33, $36)|0;
  $38 = (($37) + 7)|0;
  $39 = $38 >>> 3;
  $48 = $39;
 } else {
  $40 = (($PI) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 7)|0;
  $43 = $42 >>> 3;
  $44 = $1;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = Math_imul($43, $46)|0;
  $48 = $47;
 }
 $cbLineM = $48;
 $49 = $3;
 $50 = $cbLineM;
 $51 = ($49>>>0)<($50>>>0);
 $52 = $51 ? -104 : 0;
 $err = $52;
 $53 = ($52|0)<(0);
 if ($53) {
  $54 = $err;
  $err = $54;
  $120 = $err;
  STACKTOP = sp;return ($120|0);
 }
 $55 = $err;
 $err = $55;
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = $1;
  $58 = (($57) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56|0)<($59|0);
  if (!($60)) {
   label = 23;
   break;
  }
  $61 = (($PI) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (0)==($62|0);
  if ($63) {
   $64 = (($PI) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $1;
   $67 = HEAP32[$66>>2]|0;
   $68 = Math_imul($65, $67)|0;
   $69 = (($68) + 7)|0;
   $70 = $69 >>> 3;
   $78 = $70;
  } else {
   $71 = (($PI) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + 7)|0;
   $74 = $73 >>> 3;
   $75 = $1;
   $76 = HEAP32[$75>>2]|0;
   $77 = Math_imul($74, $76)|0;
   $78 = $77;
  }
  $offLine = $78;
  $79 = $cbLineS;
  $80 = $1;
  $81 = (($80) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $i;
  $84 = (($82) + ($83))|0;
  $85 = Math_imul($79, $84)|0;
  $86 = $offLine;
  $87 = (($85) + ($86))|0;
  $offS = $87;
  $88 = $3;
  $89 = $i;
  $90 = Math_imul($88, $89)|0;
  $91 = $offLine;
  $92 = (($90) + ($91))|0;
  $offM = $92;
  $93 = $pS;
  $94 = (($93) + 44|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $pS;
  $97 = $0;
  $98 = (($97) + 96|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $offS;
  $101 = (($99) + ($100))|0;
  $102 = (FUNCTION_TABLE_iii[$95 & 255]($96,$101)|0);
  $err = $102;
  $103 = ($102|0)<(0);
  if ($103) {
   label = 16;
   break;
  }
  $105 = $err;
  $err = $105;
  $106 = $pS;
  $107 = (($106) + 32|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $pS;
  $110 = $2;
  $111 = $offM;
  $112 = (($110) + ($111)|0);
  $113 = $cbLineM;
  $114 = (FUNCTION_TABLE_iiii[$108 & 255]($109,$112,$113)|0);
  $err = $114;
  $115 = ($114|0)<(0);
  if ($115) {
   label = 19;
   break;
  }
  $117 = $err;
  $err = $117;
  $118 = $i;
  $119 = (($118) + 1)|0;
  $i = $119;
 }
 if ((label|0) == 16) {
  $104 = $err;
  $err = $104;
  $120 = $err;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 19) {
  $116 = $err;
  $err = $116;
  $120 = $err;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 23) {
  $120 = $err;
  STACKTOP = sp;return ($120|0);
 }
 return 0|0;
}
function _PKImageDecode_Create_PNM($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKTestDecode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 184;
 $9 = $pID;
 $10 = (($9) + 28|0);
 HEAP32[$10>>2] = 185;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _PutTifUShort($pS,$offPos,$uValue) {
 $pS = $pS|0;
 $offPos = $offPos|0;
 $uValue = $uValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 12|0;
 $0 = $pS;
 $1 = $offPos;
 HEAP16[$2>>1] = $uValue;
 $err = 0;
 $3 = $0;
 $4 = (($3) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $1;
 $8 = (FUNCTION_TABLE_iii[$5 & 255]($6,$7)|0);
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $20 = $err;
  STACKTOP = sp;return ($20|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $0;
 $13 = (($12) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (FUNCTION_TABLE_iiii[$14 & 255]($15,$2,2)|0);
 $err = $16;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $err;
  $err = $18;
  $20 = $err;
  STACKTOP = sp;return ($20|0);
 }
 $19 = $err;
 $err = $19;
 $20 = $err;
 STACKTOP = sp;return ($20|0);
}
function _PutTifULong($pS,$offPos,$uValue) {
 $pS = $pS|0;
 $offPos = $offPos|0;
 $uValue = $uValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $0 = $pS;
 $1 = $offPos;
 HEAP32[$2>>2] = $uValue;
 $err = 0;
 $3 = $0;
 $4 = (($3) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $1;
 $8 = (FUNCTION_TABLE_iii[$5 & 255]($6,$7)|0);
 $err = $8;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $err;
  $err = $10;
  $20 = $err;
  STACKTOP = sp;return ($20|0);
 }
 $11 = $err;
 $err = $11;
 $12 = $0;
 $13 = (($12) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (FUNCTION_TABLE_iiii[$14 & 255]($15,$2,4)|0);
 $err = $16;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $err;
  $err = $18;
  $20 = $err;
  STACKTOP = sp;return ($20|0);
 }
 $19 = $err;
 $err = $19;
 $20 = $err;
 STACKTOP = sp;return ($20|0);
}
function _WriteTifDE($pS,$offPos,$pDE) {
 $pS = $pS|0;
 $offPos = $offPos|0;
 $pDE = $pDE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pS;
 $1 = $offPos;
 $2 = $pDE;
 $err = 0;
 $3 = $2;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (-1)!=($5|0);
 if (!($6)) {
  ___assert_fail((28856|0),(28880|0),138,(28904|0));
  // unreachable;
 }
 $7 = $2;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (-1)!=($9|0);
 if (!($10)) {
  ___assert_fail((28920|0),(28880|0),139,(28904|0));
  // unreachable;
 }
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = HEAP16[$13>>1]|0;
 $15 = (_PutTifUShort($11,$12,$14)|0);
 $err = $15;
 $16 = ($15|0)<(0);
 if ($16) {
  $17 = $err;
  $err = $17;
  $84 = $err;
  STACKTOP = sp;return ($84|0);
 }
 $18 = $err;
 $err = $18;
 $19 = $1;
 $20 = (($19) + 2)|0;
 $1 = $20;
 $21 = $0;
 $22 = $1;
 $23 = $2;
 $24 = (($23) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = (_PutTifUShort($21,$22,$25)|0);
 $err = $26;
 $27 = ($26|0)<(0);
 if ($27) {
  $28 = $err;
  $err = $28;
  $84 = $err;
  STACKTOP = sp;return ($84|0);
 }
 $29 = $err;
 $err = $29;
 $30 = $1;
 $31 = (($30) + 2)|0;
 $1 = $31;
 $32 = $0;
 $33 = $1;
 $34 = $2;
 $35 = (($34) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (_PutTifULong($32,$33,$36)|0);
 $err = $37;
 $38 = ($37|0)<(0);
 if ($38) {
  $39 = $err;
  $err = $39;
  $84 = $err;
  STACKTOP = sp;return ($84|0);
 }
 $40 = $err;
 $err = $40;
 $41 = $1;
 $42 = (($41) + 4)|0;
 $1 = $42;
 $43 = $2;
 $44 = (($43) + 2|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 do {
  if ((($46|0) == 3)) {
   $47 = $2;
   $48 = (($47) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (1)==($49|0);
   if (!($50)) {
    label = 24;
    break;
   }
   $51 = $0;
   $52 = $1;
   $53 = $2;
   $54 = (($53) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $55&65535;
   $57 = (_PutTifUShort($51,$52,$56)|0);
   $err = $57;
   $58 = ($57|0)<(0);
   if ($58) {
    $59 = $err;
    $err = $59;
    $84 = $err;
    STACKTOP = sp;return ($84|0);
   }
   $60 = $err;
   $err = $60;
   $61 = $1;
   $62 = (($61) + 2)|0;
   $1 = $62;
   $63 = $0;
   $64 = $1;
   $65 = (_PutTifUShort($63,$64,0)|0);
   $err = $65;
   $66 = ($65|0)<(0);
   if ($66) {
    $67 = $err;
    $err = $67;
    $84 = $err;
    STACKTOP = sp;return ($84|0);
   } else {
    $68 = $err;
    $err = $68;
    $69 = $1;
    $70 = (($69) + 2)|0;
    $1 = $70;
    break;
   }
  } else if ((($46|0) == 5) | (($46|0) == 4)) {
   label = 24;
  } else {
   $err = -104;
   if (1) {
    $82 = $err;
    $err = $82;
    $84 = $err;
    STACKTOP = sp;return ($84|0);
   } else {
    $83 = $err;
    $err = $83;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 24) {
   $71 = $0;
   $72 = $1;
   $73 = $2;
   $74 = (($73) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (_PutTifULong($71,$72,$75)|0);
   $err = $76;
   $77 = ($76|0)<(0);
   if ($77) {
    $78 = $err;
    $err = $78;
    $84 = $err;
    STACKTOP = sp;return ($84|0);
   } else {
    $79 = $err;
    $err = $79;
    $80 = $1;
    $81 = (($80) + 4)|0;
    $1 = $81;
    break;
   }
  }
 } while(0);
 $84 = $err;
 STACKTOP = sp;return ($84|0);
}
function _WriteTifHeader($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $IIMM = 0, $PI = 0;
 var $cTifDEs = 0, $cbLine = 0, $err = 0, $i = 0, $j = 0, $offPos = 0, $pS = 0, $tifDE = 0, $tifDE1 = 0, $tifDE2 = 0, $tifDEMisc = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offPos = sp + 140|0;
 $IIMM = sp + 154|0;
 $tifDEMisc = sp + 88|0;
 $tifDE = sp + 76|0;
 $PI = sp + 24|0;
 $tifDE1 = sp;
 $tifDE2 = sp + 64|0;
 $0 = $pIE;
 $err = 0;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $pS = $3;
 HEAP32[$offPos>>2] = 0;
 ;HEAP8[$IIMM+0>>0]=HEAP8[28952+0>>0]|0;HEAP8[$IIMM+1>>0]=HEAP8[28952+1>>0]|0;HEAP8[$IIMM+2>>0]=HEAP8[28952+2>>0]|0;
 dest=$tifDEMisc+0|0; src=28960+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $cTifDEs = 15;
 ;HEAP32[$tifDE+0>>2]=0|0;HEAP32[$tifDE+4>>2]=0|0;HEAP32[$tifDE+8>>2]=0|0;
 $cbLine = 0;
 $i = 0;
 $4 = $0;
 $5 = (($4) + 96|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6 * 1.0E+4;
 $8 = (~~(($7))>>>0);
 $9 = (($tifDEMisc) + 28|0);
 HEAP32[$9>>2] = $8;
 $10 = $0;
 $11 = (($10) + 100|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 * 1.0E+4;
 $14 = (~~(($13))>>>0);
 $15 = (($tifDEMisc) + 40|0);
 HEAP32[$15>>2] = $14;
 $16 = $pS;
 $17 = (($16) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $pS;
 $20 = (FUNCTION_TABLE_iii[$18 & 255]($19,$offPos)|0);
 $err = $20;
 $21 = ($20|0)<(0);
 if ($21) {
  $22 = $err;
  $err = $22;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $23 = $err;
 $err = $23;
 $24 = HEAP32[$offPos>>2]|0;
 $25 = (0)!=($24|0);
 $26 = $25 ? -106 : 0;
 $err = $26;
 $27 = ($26|0)<(0);
 if ($27) {
  $28 = $err;
  $err = $28;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $29 = $err;
 $err = $29;
 $30 = $pS;
 $31 = (($30) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $pS;
 $34 = (FUNCTION_TABLE_iiii[$32 & 255]($33,$IIMM,2)|0);
 $err = $34;
 $35 = ($34|0)<(0);
 if ($35) {
  $36 = $err;
  $err = $36;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $37 = $err;
 $err = $37;
 $38 = HEAP32[$offPos>>2]|0;
 $39 = (($38) + 2)|0;
 HEAP32[$offPos>>2] = $39;
 $40 = $pS;
 $41 = HEAP32[$offPos>>2]|0;
 $42 = (_PutTifUShort($40,$41,42)|0);
 $err = $42;
 $43 = ($42|0)<(0);
 if ($43) {
  $44 = $err;
  $err = $44;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $45 = $err;
 $err = $45;
 $46 = HEAP32[$offPos>>2]|0;
 $47 = (($46) + 2)|0;
 HEAP32[$offPos>>2] = $47;
 $48 = $pS;
 $49 = HEAP32[$offPos>>2]|0;
 $50 = HEAP32[$offPos>>2]|0;
 $51 = (($50) + 4)|0;
 $52 = (_PutTifULong($48,$49,$51)|0);
 $err = $52;
 $53 = ($52|0)<(0);
 if ($53) {
  $54 = $err;
  $err = $54;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $55 = $err;
 $err = $55;
 $56 = HEAP32[$offPos>>2]|0;
 $57 = (($56) + 4)|0;
 HEAP32[$offPos>>2] = $57;
 $58 = $0;
 $59 = (($58) + 68|0);
 HEAP32[$PI>>2] = $59;
 (_PixelFormatLookup($PI,0)|0);
 $60 = (($PI) + 24|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(100);
 if ($62) {
  label = 18;
 } else {
  $63 = (($PI) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(101);
  if ($65) {
   label = 18;
  } else {
   $66 = (($PI) + 24|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(1);
   if ($68) {
    $69 = $0;
    $70 = (($69) + 284|0);
    $71 = (($70) + 168|0);
    $72 = (($71) + 32844|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)!=(0);
    if ($74) {
     $597 = 0;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    $75 = (($PI) + 24|0);
    $76 = HEAP32[$75>>2]|0;
    $597 = $76;
   }
   $78 = $597;
  }
 }
 if ((label|0) == 18) {
  $78 = 2;
 }
 $77 = (($tifDEMisc) + 20|0);
 HEAP32[$77>>2] = $78;
 $79 = (($PI) + 28|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($tifDEMisc) + 12|0);
 HEAP32[$81>>2] = $80;
 $82 = (($PI) + 32|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($tifDEMisc) + 8|0);
 HEAP32[$84>>2] = $83;
 $85 = (($PI) + 36|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($tifDEMisc) + 16|0);
 HEAP32[$87>>2] = $86;
 $88 = (($tifDEMisc) + 20|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(5);
 if ($90) {
  $91 = $cTifDEs;
  $92 = (($91) + 1)<<16>>16;
  $cTifDEs = $92;
 }
 $93 = (($PI) + 20|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 16;
 $96 = ($95|0)!=(0);
 if ($96) {
  $97 = $cTifDEs;
  $98 = (($97) + 1)<<16>>16;
  $cTifDEs = $98;
 }
 $99 = HEAP32[$offPos>>2]|0;
 $100 = (($99) + 2)|0;
 $101 = $cTifDEs;
 $102 = $101&65535;
 $103 = ($102*12)|0;
 $104 = (($100) + ($103))|0;
 $105 = (($104) + 4)|0;
 HEAP32[$tifDEMisc>>2] = $105;
 $106 = HEAP32[$tifDEMisc>>2]|0;
 $107 = (($tifDEMisc) + 12|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)==(1);
 if ($109) {
  $114 = 0;
 } else {
  $110 = (($tifDEMisc) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111<<1;
  $114 = $112;
 }
 $113 = (($106) + ($114))|0;
 $115 = (($tifDEMisc) + 4|0);
 HEAP32[$115>>2] = $113;
 $116 = (($tifDEMisc) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($tifDEMisc) + 12|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)==(1);
 if ($120) {
  $125 = 0;
 } else {
  $121 = (($tifDEMisc) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122<<1;
  $125 = $123;
 }
 $124 = (($117) + ($125))|0;
 $126 = (($tifDEMisc) + 24|0);
 HEAP32[$126>>2] = $124;
 $127 = (($tifDEMisc) + 24|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + 8)|0;
 $130 = (($tifDEMisc) + 36|0);
 HEAP32[$130>>2] = $129;
 $131 = (($tifDEMisc) + 36|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + 8)|0;
 $134 = $0;
 $135 = (($134) + 112|0);
 HEAP32[$135>>2] = $133;
 $136 = $pS;
 $137 = HEAP32[$offPos>>2]|0;
 $138 = $cTifDEs;
 $139 = (_PutTifUShort($136,$137,$138)|0);
 $err = $139;
 $140 = ($139|0)<(0);
 if ($140) {
  $141 = $err;
  $err = $141;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $142 = $err;
 $err = $142;
 $143 = HEAP32[$offPos>>2]|0;
 $144 = (($143) + 2)|0;
 HEAP32[$offPos>>2] = $144;
 $145 = $i;
 $146 = (($145) + 1)|0;
 $i = $146;
 $147 = (29008 + (($145*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$147+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$147+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$147+8>>2]|0;
 $148 = HEAP16[$tifDE>>1]|0;
 $149 = $148&65535;
 $150 = (256)==($149|0);
 if (!($150)) {
  ___assert_fail((29192|0),(28880|0),259,(29224|0));
  // unreachable;
 }
 $151 = $0;
 $152 = (($151) + 84|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = (($tifDE) + 8|0);
 HEAP32[$154>>2] = $153;
 $155 = $pS;
 $156 = HEAP32[$offPos>>2]|0;
 $157 = (_WriteTifDE($155,$156,$tifDE)|0);
 $err = $157;
 $158 = ($157|0)<(0);
 if ($158) {
  $159 = $err;
  $err = $159;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $160 = $err;
 $err = $160;
 $161 = HEAP32[$offPos>>2]|0;
 $162 = (($161) + 12)|0;
 HEAP32[$offPos>>2] = $162;
 $163 = $i;
 $164 = (($163) + 1)|0;
 $i = $164;
 $165 = (29008 + (($163*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$165+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$165+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$165+8>>2]|0;
 $166 = HEAP16[$tifDE>>1]|0;
 $167 = $166&65535;
 $168 = (257)==($167|0);
 if (!($168)) {
  ___assert_fail((29240|0),(28880|0),264,(29224|0));
  // unreachable;
 }
 $169 = $0;
 $170 = (($169) + 88|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = (($tifDE) + 8|0);
 HEAP32[$172>>2] = $171;
 $173 = $pS;
 $174 = HEAP32[$offPos>>2]|0;
 $175 = (_WriteTifDE($173,$174,$tifDE)|0);
 $err = $175;
 $176 = ($175|0)<(0);
 if ($176) {
  $177 = $err;
  $err = $177;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $178 = $err;
 $err = $178;
 $179 = HEAP32[$offPos>>2]|0;
 $180 = (($179) + 12)|0;
 HEAP32[$offPos>>2] = $180;
 $181 = $i;
 $182 = (($181) + 1)|0;
 $i = $182;
 $183 = (29008 + (($181*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$183+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$183+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$183+8>>2]|0;
 $184 = HEAP16[$tifDE>>1]|0;
 $185 = $184&65535;
 $186 = (258)==($185|0);
 if (!($186)) {
  ___assert_fail((29280|0),(28880|0),269,(29224|0));
  // unreachable;
 }
 $187 = (($tifDEMisc) + 12|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = (($tifDE) + 4|0);
 HEAP32[$189>>2] = $188;
 $190 = (($tifDE) + 4|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = (1)==($191|0);
 if ($192) {
  $193 = (($tifDEMisc) + 8|0);
  $194 = HEAP32[$193>>2]|0;
  $197 = $194;
 } else {
  $195 = HEAP32[$tifDEMisc>>2]|0;
  $197 = $195;
 }
 $196 = (($tifDE) + 8|0);
 HEAP32[$196>>2] = $197;
 $198 = $pS;
 $199 = HEAP32[$offPos>>2]|0;
 $200 = (_WriteTifDE($198,$199,$tifDE)|0);
 $err = $200;
 $201 = ($200|0)<(0);
 if ($201) {
  $202 = $err;
  $err = $202;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $203 = $err;
 $err = $203;
 $204 = HEAP32[$offPos>>2]|0;
 $205 = (($204) + 12)|0;
 HEAP32[$offPos>>2] = $205;
 $206 = $i;
 $207 = (($206) + 1)|0;
 $i = $207;
 $208 = (29008 + (($206*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$208+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$208+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$208+8>>2]|0;
 $209 = HEAP16[$tifDE>>1]|0;
 $210 = $209&65535;
 $211 = (259)==($210|0);
 if (!($211)) {
  ___assert_fail((29320|0),(28880|0),275,(29224|0));
  // unreachable;
 }
 $212 = $pS;
 $213 = HEAP32[$offPos>>2]|0;
 $214 = (_WriteTifDE($212,$213,$tifDE)|0);
 $err = $214;
 $215 = ($214|0)<(0);
 if ($215) {
  $216 = $err;
  $err = $216;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $217 = $err;
 $err = $217;
 $218 = HEAP32[$offPos>>2]|0;
 $219 = (($218) + 12)|0;
 HEAP32[$offPos>>2] = $219;
 $220 = $i;
 $221 = (($220) + 1)|0;
 $i = $221;
 $222 = (29008 + (($220*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$222+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$222+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$222+8>>2]|0;
 $223 = HEAP16[$tifDE>>1]|0;
 $224 = $223&65535;
 $225 = (262)==($224|0);
 if (!($225)) {
  ___assert_fail((29360|0),(28880|0),279,(29224|0));
  // unreachable;
 }
 $226 = (($tifDEMisc) + 20|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = (($tifDE) + 8|0);
 HEAP32[$228>>2] = $227;
 $229 = $pS;
 $230 = HEAP32[$offPos>>2]|0;
 $231 = (_WriteTifDE($229,$230,$tifDE)|0);
 $err = $231;
 $232 = ($231|0)<(0);
 if ($232) {
  $233 = $err;
  $err = $233;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $234 = $err;
 $err = $234;
 $235 = HEAP32[$offPos>>2]|0;
 $236 = (($235) + 12)|0;
 HEAP32[$offPos>>2] = $236;
 $237 = $i;
 $238 = (($237) + 1)|0;
 $i = $238;
 $239 = (29008 + (($237*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$239+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$239+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$239+8>>2]|0;
 $240 = HEAP16[$tifDE>>1]|0;
 $241 = $240&65535;
 $242 = (273)==($241|0);
 if (!($242)) {
  ___assert_fail((29408|0),(28880|0),284,(29224|0));
  // unreachable;
 }
 $243 = $0;
 $244 = (($243) + 112|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = (($tifDE) + 8|0);
 HEAP32[$246>>2] = $245;
 $247 = $pS;
 $248 = HEAP32[$offPos>>2]|0;
 $249 = (_WriteTifDE($247,$248,$tifDE)|0);
 $err = $249;
 $250 = ($249|0)<(0);
 if ($250) {
  $251 = $err;
  $err = $251;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $252 = $err;
 $err = $252;
 $253 = HEAP32[$offPos>>2]|0;
 $254 = (($253) + 12)|0;
 HEAP32[$offPos>>2] = $254;
 $255 = $i;
 $256 = (($255) + 1)|0;
 $i = $256;
 $257 = (29008 + (($255*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$257+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$257+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$257+8>>2]|0;
 $258 = HEAP16[$tifDE>>1]|0;
 $259 = $258&65535;
 $260 = (274)==($259|0);
 if (!($260)) {
  ___assert_fail((29448|0),(28880|0),289,(29224|0));
  // unreachable;
 }
 $261 = $pS;
 $262 = HEAP32[$offPos>>2]|0;
 $263 = (_WriteTifDE($261,$262,$tifDE)|0);
 $err = $263;
 $264 = ($263|0)<(0);
 if ($264) {
  $265 = $err;
  $err = $265;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $266 = $err;
 $err = $266;
 $267 = HEAP32[$offPos>>2]|0;
 $268 = (($267) + 12)|0;
 HEAP32[$offPos>>2] = $268;
 $269 = $i;
 $270 = (($269) + 1)|0;
 $i = $270;
 $271 = (29008 + (($269*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$271+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$271+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$271+8>>2]|0;
 $272 = HEAP16[$tifDE>>1]|0;
 $273 = $272&65535;
 $274 = (277)==($273|0);
 if (!($274)) {
  ___assert_fail((29488|0),(28880|0),293,(29224|0));
  // unreachable;
 }
 $275 = (($tifDEMisc) + 12|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = (($tifDE) + 8|0);
 HEAP32[$277>>2] = $276;
 $278 = $pS;
 $279 = HEAP32[$offPos>>2]|0;
 $280 = (_WriteTifDE($278,$279,$tifDE)|0);
 $err = $280;
 $281 = ($280|0)<(0);
 if ($281) {
  $282 = $err;
  $err = $282;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $283 = $err;
 $err = $283;
 $284 = HEAP32[$offPos>>2]|0;
 $285 = (($284) + 12)|0;
 HEAP32[$offPos>>2] = $285;
 $286 = $i;
 $287 = (($286) + 1)|0;
 $i = $287;
 $288 = (29008 + (($286*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$288+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$288+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$288+8>>2]|0;
 $289 = HEAP16[$tifDE>>1]|0;
 $290 = $289&65535;
 $291 = (278)==($290|0);
 if (!($291)) {
  ___assert_fail((29528|0),(28880|0),298,(29224|0));
  // unreachable;
 }
 $292 = $0;
 $293 = (($292) + 88|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = (($tifDE) + 8|0);
 HEAP32[$295>>2] = $294;
 $296 = $pS;
 $297 = HEAP32[$offPos>>2]|0;
 $298 = (_WriteTifDE($296,$297,$tifDE)|0);
 $err = $298;
 $299 = ($298|0)<(0);
 if ($299) {
  $300 = $err;
  $err = $300;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $301 = $err;
 $err = $301;
 $302 = HEAP32[$offPos>>2]|0;
 $303 = (($302) + 12)|0;
 HEAP32[$offPos>>2] = $303;
 $304 = $i;
 $305 = (($304) + 1)|0;
 $i = $305;
 $306 = (29008 + (($304*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$306+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$306+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$306+8>>2]|0;
 $307 = HEAP16[$tifDE>>1]|0;
 $308 = $307&65535;
 $309 = (279)==($308|0);
 if (!($309)) {
  ___assert_fail((29568|0),(28880|0),303,(29224|0));
  // unreachable;
 }
 $310 = (($PI) + 12|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = (0)==($311|0);
 if ($312) {
  $313 = (($PI) + 16|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = $0;
  $316 = (($315) + 84|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = Math_imul($314, $317)|0;
  $319 = (($318) + 7)|0;
  $320 = $319 >>> 3;
  $329 = $320;
 } else {
  $321 = (($PI) + 16|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = (($322) + 7)|0;
  $324 = $323 >>> 3;
  $325 = $0;
  $326 = (($325) + 84|0);
  $327 = HEAP32[$326>>2]|0;
  $328 = Math_imul($324, $327)|0;
  $329 = $328;
 }
 $cbLine = $329;
 $330 = $cbLine;
 $331 = $0;
 $332 = (($331) + 88|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = Math_imul($330, $333)|0;
 $335 = (($tifDE) + 8|0);
 HEAP32[$335>>2] = $334;
 $336 = $pS;
 $337 = HEAP32[$offPos>>2]|0;
 $338 = (_WriteTifDE($336,$337,$tifDE)|0);
 $err = $338;
 $339 = ($338|0)<(0);
 if ($339) {
  $340 = $err;
  $err = $340;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $341 = $err;
 $err = $341;
 $342 = HEAP32[$offPos>>2]|0;
 $343 = (($342) + 12)|0;
 HEAP32[$offPos>>2] = $343;
 $344 = $i;
 $345 = (($344) + 1)|0;
 $i = $345;
 $346 = (29008 + (($344*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$346+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$346+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$346+8>>2]|0;
 $347 = HEAP16[$tifDE>>1]|0;
 $348 = $347&65535;
 $349 = (282)==($348|0);
 if (!($349)) {
  ___assert_fail((29608|0),(28880|0),309,(29224|0));
  // unreachable;
 }
 $350 = (($tifDEMisc) + 24|0);
 $351 = HEAP32[$350>>2]|0;
 $352 = (($tifDE) + 8|0);
 HEAP32[$352>>2] = $351;
 $353 = $pS;
 $354 = HEAP32[$offPos>>2]|0;
 $355 = (_WriteTifDE($353,$354,$tifDE)|0);
 $err = $355;
 $356 = ($355|0)<(0);
 if ($356) {
  $357 = $err;
  $err = $357;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $358 = $err;
 $err = $358;
 $359 = HEAP32[$offPos>>2]|0;
 $360 = (($359) + 12)|0;
 HEAP32[$offPos>>2] = $360;
 $361 = $i;
 $362 = (($361) + 1)|0;
 $i = $362;
 $363 = (29008 + (($361*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$363+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$363+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$363+8>>2]|0;
 $364 = HEAP16[$tifDE>>1]|0;
 $365 = $364&65535;
 $366 = (283)==($365|0);
 if (!($366)) {
  ___assert_fail((29648|0),(28880|0),314,(29224|0));
  // unreachable;
 }
 $367 = (($tifDEMisc) + 36|0);
 $368 = HEAP32[$367>>2]|0;
 $369 = (($tifDE) + 8|0);
 HEAP32[$369>>2] = $368;
 $370 = $pS;
 $371 = HEAP32[$offPos>>2]|0;
 $372 = (_WriteTifDE($370,$371,$tifDE)|0);
 $err = $372;
 $373 = ($372|0)<(0);
 if ($373) {
  $374 = $err;
  $err = $374;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $375 = $err;
 $err = $375;
 $376 = HEAP32[$offPos>>2]|0;
 $377 = (($376) + 12)|0;
 HEAP32[$offPos>>2] = $377;
 $378 = $i;
 $379 = (($378) + 1)|0;
 $i = $379;
 $380 = (29008 + (($378*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$380+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$380+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$380+8>>2]|0;
 $381 = HEAP16[$tifDE>>1]|0;
 $382 = $381&65535;
 $383 = (284)==($382|0);
 if (!($383)) {
  ___assert_fail((29688|0),(28880|0),319,(29224|0));
  // unreachable;
 }
 $384 = $pS;
 $385 = HEAP32[$offPos>>2]|0;
 $386 = (_WriteTifDE($384,$385,$tifDE)|0);
 $err = $386;
 $387 = ($386|0)<(0);
 if ($387) {
  $388 = $err;
  $err = $388;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $389 = $err;
 $err = $389;
 $390 = HEAP32[$offPos>>2]|0;
 $391 = (($390) + 12)|0;
 HEAP32[$offPos>>2] = $391;
 $392 = $i;
 $393 = (($392) + 1)|0;
 $i = $393;
 $394 = (29008 + (($392*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$394+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$394+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$394+8>>2]|0;
 $395 = HEAP16[$tifDE>>1]|0;
 $396 = $395&65535;
 $397 = (296)==($396|0);
 if (!($397)) {
  ___assert_fail((29736|0),(28880|0),323,(29224|0));
  // unreachable;
 }
 $398 = $pS;
 $399 = HEAP32[$offPos>>2]|0;
 $400 = (_WriteTifDE($398,$399,$tifDE)|0);
 $err = $400;
 $401 = ($400|0)<(0);
 if ($401) {
  $402 = $err;
  $err = $402;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $403 = $err;
 $err = $403;
 $404 = HEAP32[$offPos>>2]|0;
 $405 = (($404) + 12)|0;
 HEAP32[$offPos>>2] = $405;
 $406 = (($tifDEMisc) + 20|0);
 $407 = HEAP32[$406>>2]|0;
 $408 = ($407|0)==(5);
 do {
  if ($408) {
   ;HEAP32[$tifDE1+0>>2]=HEAP32[29776+0>>2]|0;HEAP32[$tifDE1+4>>2]=HEAP32[29776+4>>2]|0;HEAP32[$tifDE1+8>>2]=HEAP32[29776+8>>2]|0;
   $409 = $pS;
   $410 = HEAP32[$offPos>>2]|0;
   $411 = (_WriteTifDE($409,$410,$tifDE1)|0);
   $err = $411;
   $412 = ($411|0)<(0);
   if ($412) {
    $413 = $err;
    $err = $413;
    $596 = $err;
    STACKTOP = sp;return ($596|0);
   } else {
    $414 = $err;
    $err = $414;
    $415 = HEAP32[$offPos>>2]|0;
    $416 = (($415) + 12)|0;
    HEAP32[$offPos>>2] = $416;
    break;
   }
  }
 } while(0);
 $417 = (($PI) + 20|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = $418 & 16;
 $420 = ($419|0)!=(0);
 do {
  if ($420) {
   ;HEAP32[$tifDE2+0>>2]=HEAP32[29792+0>>2]|0;HEAP32[$tifDE2+4>>2]=HEAP32[29792+4>>2]|0;HEAP32[$tifDE2+8>>2]=HEAP32[29792+8>>2]|0;
   $421 = (($PI) + 20|0);
   $422 = HEAP32[$421>>2]|0;
   $423 = $422 & 32;
   $424 = ($423|0)!=(0);
   if (!($424)) {
    $425 = (($tifDE2) + 8|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = (($426) + 1)|0;
    HEAP32[$425>>2] = $427;
   }
   $428 = $pS;
   $429 = HEAP32[$offPos>>2]|0;
   $430 = (_WriteTifDE($428,$429,$tifDE2)|0);
   $err = $430;
   $431 = ($430|0)<(0);
   if ($431) {
    $432 = $err;
    $err = $432;
    $596 = $err;
    STACKTOP = sp;return ($596|0);
   } else {
    $433 = $err;
    $err = $433;
    $434 = HEAP32[$offPos>>2]|0;
    $435 = (($434) + 12)|0;
    HEAP32[$offPos>>2] = $435;
    break;
   }
  }
 } while(0);
 $436 = $i;
 $437 = (($436) + 1)|0;
 $i = $437;
 $438 = (29008 + (($436*12)|0)|0);
 ;HEAP32[$tifDE+0>>2]=HEAP32[$438+0>>2]|0;HEAP32[$tifDE+4>>2]=HEAP32[$438+4>>2]|0;HEAP32[$tifDE+8>>2]=HEAP32[$438+8>>2]|0;
 $439 = HEAP16[$tifDE>>1]|0;
 $440 = $439&65535;
 $441 = (339)==($440|0);
 if (!($441)) {
  ___assert_fail((29808|0),(28880|0),341,(29224|0));
  // unreachable;
 }
 $442 = (($tifDEMisc) + 12|0);
 $443 = HEAP32[$442>>2]|0;
 $444 = (($tifDE) + 4|0);
 HEAP32[$444>>2] = $443;
 $445 = (($tifDE) + 4|0);
 $446 = HEAP32[$445>>2]|0;
 $447 = (1)==($446|0);
 if ($447) {
  $448 = (($tifDEMisc) + 16|0);
  $449 = HEAP32[$448>>2]|0;
  $453 = $449;
 } else {
  $450 = (($tifDEMisc) + 4|0);
  $451 = HEAP32[$450>>2]|0;
  $453 = $451;
 }
 $452 = (($tifDE) + 8|0);
 HEAP32[$452>>2] = $453;
 $454 = $pS;
 $455 = HEAP32[$offPos>>2]|0;
 $456 = (_WriteTifDE($454,$455,$tifDE)|0);
 $err = $456;
 $457 = ($456|0)<(0);
 if ($457) {
  $458 = $err;
  $err = $458;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $459 = $err;
 $err = $459;
 $460 = HEAP32[$offPos>>2]|0;
 $461 = (($460) + 12)|0;
 HEAP32[$offPos>>2] = $461;
 $462 = $pS;
 $463 = HEAP32[$offPos>>2]|0;
 $464 = (_PutTifULong($462,$463,0)|0);
 $err = $464;
 $465 = ($464|0)<(0);
 if ($465) {
  $466 = $err;
  $err = $466;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $467 = $err;
 $err = $467;
 $468 = HEAP32[$offPos>>2]|0;
 $469 = (($468) + 4)|0;
 HEAP32[$offPos>>2] = $469;
 $470 = (($tifDE) + 4|0);
 $471 = HEAP32[$470>>2]|0;
 $472 = ($471>>>0)>(1);
 do {
  if ($472) {
   $473 = HEAP32[$tifDEMisc>>2]|0;
   $474 = HEAP32[$offPos>>2]|0;
   $475 = ($473|0)==($474|0);
   if (!($475)) {
    ___assert_fail((29848|0),(28880|0),353,(29224|0));
    // unreachable;
   }
   $476 = (($PI) + 12|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = ($477|0)==(10);
   do {
    if ($478) {
     $479 = $pS;
     $480 = HEAP32[$offPos>>2]|0;
     $481 = (_PutTifUShort($479,$480,5)|0);
     $err = $481;
     $482 = ($481|0)<(0);
     if ($482) {
      $483 = $err;
      $err = $483;
      $596 = $err;
      STACKTOP = sp;return ($596|0);
     }
     $484 = $err;
     $err = $484;
     $485 = HEAP32[$offPos>>2]|0;
     $486 = (($485) + 2)|0;
     HEAP32[$offPos>>2] = $486;
     $487 = $pS;
     $488 = HEAP32[$offPos>>2]|0;
     $489 = (_PutTifUShort($487,$488,6)|0);
     $err = $489;
     $490 = ($489|0)<(0);
     if ($490) {
      $491 = $err;
      $err = $491;
      $596 = $err;
      STACKTOP = sp;return ($596|0);
     }
     $492 = $err;
     $err = $492;
     $493 = HEAP32[$offPos>>2]|0;
     $494 = (($493) + 2)|0;
     HEAP32[$offPos>>2] = $494;
     $495 = $pS;
     $496 = HEAP32[$offPos>>2]|0;
     $497 = (_PutTifUShort($495,$496,5)|0);
     $err = $497;
     $498 = ($497|0)<(0);
     if ($498) {
      $499 = $err;
      $err = $499;
      $596 = $err;
      STACKTOP = sp;return ($596|0);
     } else {
      $500 = $err;
      $err = $500;
      $501 = HEAP32[$offPos>>2]|0;
      $502 = (($501) + 2)|0;
      HEAP32[$offPos>>2] = $502;
      break;
     }
    } else {
     $j = 0;
     while(1) {
      $503 = $j;
      $504 = (($tifDE) + 4|0);
      $505 = HEAP32[$504>>2]|0;
      $506 = ($503>>>0)<($505>>>0);
      if (!($506)) {
       label = 157;
       break;
      }
      $507 = $pS;
      $508 = HEAP32[$offPos>>2]|0;
      $509 = (($tifDEMisc) + 8|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = $510&65535;
      $512 = (_PutTifUShort($507,$508,$511)|0);
      $err = $512;
      $513 = ($512|0)<(0);
      if ($513) {
       break;
      }
      $515 = $err;
      $err = $515;
      $516 = HEAP32[$offPos>>2]|0;
      $517 = (($516) + 2)|0;
      HEAP32[$offPos>>2] = $517;
      $518 = $j;
      $519 = (($518) + 1)|0;
      $j = $519;
     }
     if ((label|0) == 157) {
      break;
     }
     $514 = $err;
     $err = $514;
     $596 = $err;
     STACKTOP = sp;return ($596|0);
    }
   } while(0);
   $520 = (($tifDEMisc) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = HEAP32[$offPos>>2]|0;
   $523 = ($521|0)==($522|0);
   if (!($523)) {
    ___assert_fail((29888|0),(28880|0),368,(29224|0));
    // unreachable;
   }
   $j = 0;
   while(1) {
    $524 = $j;
    $525 = (($tifDE) + 4|0);
    $526 = HEAP32[$525>>2]|0;
    $527 = ($524>>>0)<($526>>>0);
    if (!($527)) {
     label = 167;
     break;
    }
    $528 = $pS;
    $529 = HEAP32[$offPos>>2]|0;
    $530 = (($tifDEMisc) + 16|0);
    $531 = HEAP32[$530>>2]|0;
    $532 = $531&65535;
    $533 = (_PutTifUShort($528,$529,$532)|0);
    $err = $533;
    $534 = ($533|0)<(0);
    if ($534) {
     break;
    }
    $536 = $err;
    $err = $536;
    $537 = HEAP32[$offPos>>2]|0;
    $538 = (($537) + 2)|0;
    HEAP32[$offPos>>2] = $538;
    $539 = $j;
    $540 = (($539) + 1)|0;
    $j = $540;
   }
   if ((label|0) == 167) {
    break;
   }
   $535 = $err;
   $err = $535;
   $596 = $err;
   STACKTOP = sp;return ($596|0);
  }
 } while(0);
 $541 = (($tifDEMisc) + 24|0);
 $542 = HEAP32[$541>>2]|0;
 $543 = HEAP32[$offPos>>2]|0;
 $544 = ($542|0)==($543|0);
 if (!($544)) {
  ___assert_fail((29928|0),(28880|0),375,(29224|0));
  // unreachable;
 }
 $545 = $pS;
 $546 = HEAP32[$offPos>>2]|0;
 $547 = (($tifDEMisc) + 28|0);
 $548 = HEAP32[$547>>2]|0;
 $549 = (_PutTifULong($545,$546,$548)|0);
 $err = $549;
 $550 = ($549|0)<(0);
 if ($550) {
  $551 = $err;
  $err = $551;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $552 = $err;
 $err = $552;
 $553 = HEAP32[$offPos>>2]|0;
 $554 = (($553) + 4)|0;
 HEAP32[$offPos>>2] = $554;
 $555 = $pS;
 $556 = HEAP32[$offPos>>2]|0;
 $557 = (($tifDEMisc) + 32|0);
 $558 = HEAP32[$557>>2]|0;
 $559 = (_PutTifULong($555,$556,$558)|0);
 $err = $559;
 $560 = ($559|0)<(0);
 if ($560) {
  $561 = $err;
  $err = $561;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $562 = $err;
 $err = $562;
 $563 = HEAP32[$offPos>>2]|0;
 $564 = (($563) + 4)|0;
 HEAP32[$offPos>>2] = $564;
 $565 = (($tifDEMisc) + 36|0);
 $566 = HEAP32[$565>>2]|0;
 $567 = HEAP32[$offPos>>2]|0;
 $568 = ($566|0)==($567|0);
 if (!($568)) {
  ___assert_fail((29968|0),(28880|0),379,(29224|0));
  // unreachable;
 }
 $569 = $pS;
 $570 = HEAP32[$offPos>>2]|0;
 $571 = (($tifDEMisc) + 40|0);
 $572 = HEAP32[$571>>2]|0;
 $573 = (_PutTifULong($569,$570,$572)|0);
 $err = $573;
 $574 = ($573|0)<(0);
 if ($574) {
  $575 = $err;
  $err = $575;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $576 = $err;
 $err = $576;
 $577 = HEAP32[$offPos>>2]|0;
 $578 = (($577) + 4)|0;
 HEAP32[$offPos>>2] = $578;
 $579 = $pS;
 $580 = HEAP32[$offPos>>2]|0;
 $581 = (($tifDEMisc) + 44|0);
 $582 = HEAP32[$581>>2]|0;
 $583 = (_PutTifULong($579,$580,$582)|0);
 $err = $583;
 $584 = ($583|0)<(0);
 if ($584) {
  $585 = $err;
  $err = $585;
  $596 = $err;
  STACKTOP = sp;return ($596|0);
 }
 $586 = $err;
 $err = $586;
 $587 = HEAP32[$offPos>>2]|0;
 $588 = (($587) + 4)|0;
 HEAP32[$offPos>>2] = $588;
 $589 = $0;
 $590 = (($589) + 112|0);
 $591 = HEAP32[$590>>2]|0;
 $592 = HEAP32[$offPos>>2]|0;
 $593 = ($591|0)==($592|0);
 if (!($593)) {
  ___assert_fail((30008|0),(28880|0),383,(29224|0));
  // unreachable;
 }
 $594 = $0;
 $595 = (($594) + 108|0);
 HEAP32[$595>>2] = 1;
 $596 = $err;
 STACKTOP = sp;return ($596|0);
}
function _PKImageEncode_WritePixels_TIF($pIE,$cLine,$pbPixel,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixel = $pbPixel|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $PI = 0, $cbLine = 0, $err = 0, $i = 0, $offPos = 0, $pS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $PI = sp + 8|0;
 $0 = $pIE;
 $1 = $cLine;
 $2 = $pbPixel;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $pS = $6;
 $cbLine = 0;
 $offPos = 0;
 $i = 0;
 $7 = $0;
 $8 = (($7) + 108|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if (!($10)) {
   $11 = $0;
   $12 = (_WriteTifHeader($11)|0);
   $err = $12;
   $13 = ($12|0)<(0);
   if ($13) {
    $14 = $err;
    $err = $14;
    $87 = $err;
    STACKTOP = sp;return ($87|0);
   } else {
    $15 = $err;
    $err = $15;
    break;
   }
  }
 } while(0);
 $16 = $0;
 $17 = (($16) + 68|0);
 HEAP32[$PI>>2] = $17;
 (_PixelFormatLookup($PI,0)|0);
 $18 = (($PI) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (0)==($19|0);
 if ($20) {
  $21 = (($PI) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = (($23) + 84|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = Math_imul($22, $25)|0;
  $27 = (($26) + 7)|0;
  $28 = $27 >>> 3;
  $37 = $28;
 } else {
  $29 = (($PI) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 7)|0;
  $32 = $31 >>> 3;
  $33 = $0;
  $34 = (($33) + 84|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = Math_imul($32, $35)|0;
  $37 = $36;
 }
 $cbLine = $37;
 $38 = $3;
 $39 = $cbLine;
 $40 = ($38>>>0)<($39>>>0);
 $41 = $40 ? -104 : 0;
 $err = $41;
 $42 = ($41|0)<(0);
 if ($42) {
  $43 = $err;
  $err = $43;
  $87 = $err;
  STACKTOP = sp;return ($87|0);
 }
 $44 = $err;
 $err = $44;
 $45 = $0;
 $46 = (($45) + 112|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $cbLine;
 $49 = $0;
 $50 = (($49) + 92|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = Math_imul($48, $51)|0;
 $53 = (($47) + ($52))|0;
 $offPos = $53;
 $54 = $pS;
 $55 = (($54) + 44|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $pS;
 $58 = $offPos;
 $59 = (FUNCTION_TABLE_iii[$56 & 255]($57,$58)|0);
 $err = $59;
 $60 = ($59|0)<(0);
 if ($60) {
  $61 = $err;
  $err = $61;
  $87 = $err;
  STACKTOP = sp;return ($87|0);
 }
 $62 = $err;
 $err = $62;
 $i = 0;
 while(1) {
  $63 = $i;
  $64 = $1;
  $65 = ($63>>>0)<($64>>>0);
  if (!($65)) {
   label = 22;
   break;
  }
  $66 = $pS;
  $67 = (($66) + 40|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $pS;
  $70 = $2;
  $71 = $3;
  $72 = $i;
  $73 = Math_imul($71, $72)|0;
  $74 = (($70) + ($73)|0);
  $75 = $cbLine;
  $76 = (FUNCTION_TABLE_iiii[$68 & 255]($69,$74,$75)|0);
  $err = $76;
  $77 = ($76|0)<(0);
  if ($77) {
   label = 18;
   break;
  }
  $79 = $err;
  $err = $79;
  $80 = $i;
  $81 = (($80) + 1)|0;
  $i = $81;
 }
 if ((label|0) == 18) {
  $78 = $err;
  $err = $78;
  $87 = $err;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 22) {
  $82 = $1;
  $83 = $0;
  $84 = (($83) + 92|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($82))|0;
  HEAP32[$84>>2] = $86;
  $87 = $err;
  STACKTOP = sp;return ($87|0);
 }
 return 0|0;
}
function _PKImageEncode_Create_TIF($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $pIE = 0;
 $1 = $0;
 $2 = (_PKImageEncode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $10 = $err;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pIE = $7;
 $8 = $pIE;
 $9 = (($8) + 28|0);
 HEAP32[$9>>2] = 186;
 $10 = $err;
 STACKTOP = sp;return ($10|0);
}
function _GetTifUShort($pWS,$offPos,$fLittleEndian,$puValue) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 $fLittleEndian = $fLittleEndian|0;
 $puValue = $puValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 20|0;
 $0 = $pWS;
 $1 = $offPos;
 $2 = $fLittleEndian;
 $3 = $puValue;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $1;
 $9 = (FUNCTION_TABLE_iii[$6 & 255]($7,$8)|0);
 $err = $9;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = $err;
  $err = $11;
  $43 = $err;
  STACKTOP = sp;return ($43|0);
 }
 $12 = $err;
 $err = $12;
 $13 = $0;
 $14 = (($13) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (FUNCTION_TABLE_iiii[$15 & 255]($16,$buf,2)|0);
 $err = $17;
 $18 = ($17|0)<(0);
 if ($18) {
  $19 = $err;
  $err = $19;
  $43 = $err;
  STACKTOP = sp;return ($43|0);
 }
 $20 = $err;
 $err = $20;
 $21 = $2;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = HEAP8[$buf>>0]|0;
  $24 = $23&255;
  $25 = (($buf) + 1|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27&65535;
  $29 = $28 << 8;
  $30 = (($24) + ($29))|0;
  $31 = $30&65535;
  $32 = $3;
  HEAP16[$32>>1] = $31;
 } else {
  $33 = HEAP8[$buf>>0]|0;
  $34 = $33&255;
  $35 = $34&65535;
  $36 = $35 << 8;
  $37 = (($buf) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($36) + ($39))|0;
  $41 = $40&65535;
  $42 = $3;
  HEAP16[$42>>1] = $41;
 }
 $43 = $err;
 STACKTOP = sp;return ($43|0);
}
function _GetTifULong($pWS,$offPos,$fLittleEndian,$puValue) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 $fLittleEndian = $fLittleEndian|0;
 $puValue = $puValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 20|0;
 $0 = $pWS;
 $1 = $offPos;
 $2 = $fLittleEndian;
 $3 = $puValue;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $1;
 $9 = (FUNCTION_TABLE_iii[$6 & 255]($7,$8)|0);
 $err = $9;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = $err;
  $err = $11;
  $59 = $err;
  STACKTOP = sp;return ($59|0);
 }
 $12 = $err;
 $err = $12;
 $13 = $0;
 $14 = (($13) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (FUNCTION_TABLE_iiii[$15 & 255]($16,$buf,4)|0);
 $err = $17;
 $18 = ($17|0)<(0);
 if ($18) {
  $19 = $err;
  $err = $19;
  $59 = $err;
  STACKTOP = sp;return ($59|0);
 }
 $20 = $err;
 $err = $20;
 $21 = $2;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = HEAP8[$buf>>0]|0;
  $24 = $23&255;
  $25 = (($buf) + 1|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 << 8;
  $29 = (($24) + ($28))|0;
  $30 = (($buf) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 << 16;
  $34 = (($29) + ($33))|0;
  $35 = (($buf) + 3|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $37 << 24;
  $39 = (($34) + ($38))|0;
  $40 = $3;
  HEAP32[$40>>2] = $39;
 } else {
  $41 = HEAP8[$buf>>0]|0;
  $42 = $41&255;
  $43 = $42 << 24;
  $44 = (($buf) + 1|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $46 << 16;
  $48 = (($43) + ($47))|0;
  $49 = (($buf) + 2|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 << 8;
  $53 = (($48) + ($52))|0;
  $54 = (($buf) + 3|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = (($53) + ($56))|0;
  $58 = $3;
  HEAP32[$58>>2] = $57;
 }
 $59 = $err;
 STACKTOP = sp;return ($59|0);
}
function _GetTifULongArray($pWS,$offPos,$cElements,$fLittleEndian,$puValue) {
 $pWS = $pWS|0;
 $offPos = $offPos|0;
 $cElements = $cElements|0;
 $fLittleEndian = $fLittleEndian|0;
 $puValue = $puValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pWS;
 $1 = $offPos;
 $2 = $cElements;
 $3 = $fLittleEndian;
 $4 = $puValue;
 $err = 0;
 $5 = $2;
 $6 = (1)==($5|0);
 do {
  if ($6) {
   $7 = $1;
   $8 = $4;
   HEAP32[$8>>2] = $7;
  } else {
   $i = 0;
   $i = 0;
   while(1) {
    $9 = $i;
    $10 = $2;
    $11 = ($9>>>0)<($10>>>0);
    if (!($11)) {
     label = 10;
     break;
    }
    $12 = $0;
    $13 = $1;
    $14 = $3;
    $15 = $i;
    $16 = $4;
    $17 = (($16) + ($15<<2)|0);
    $18 = (_GetTifULong($12,$13,$14,$17)|0);
    $err = $18;
    $19 = ($18|0)<(0);
    if ($19) {
     break;
    }
    $21 = $err;
    $err = $21;
    $22 = $1;
    $23 = (($22) + 4)|0;
    $1 = $23;
    $24 = $i;
    $25 = (($24) + 1)|0;
    $i = $25;
   }
   if ((label|0) == 10) {
    break;
   }
   $20 = $err;
   $err = $20;
   $26 = $err;
   STACKTOP = sp;return ($26|0);
  }
 } while(0);
 $26 = $err;
 STACKTOP = sp;return ($26|0);
}
function _ParseTifDEValue($pID,$uTag,$uType,$uCount) {
 $pID = $pID|0;
 $uTag = $uTag|0;
 $uType = $uType|0;
 $uCount = $uCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0.0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bpc = 0, $bpcAnd = 0, $err = 0, $i = 0, $offPos = 0, $pWS = 0, $sf = 0, $sfAnd = 0, $uPos = 0, $uValue0 = 0, $uValue1 = 0, $usValue = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $bpc = sp + 84|0;
 $sf = sp + 64|0;
 $uPos = sp + 32|0;
 $usValue = sp + 82|0;
 $uValue0 = sp + 28|0;
 $uValue1 = sp + 24|0;
 $offPos = sp + 16|0;
 $0 = $pID;
 $1 = $uTag;
 $2 = $uType;
 $3 = $uCount;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $pWS = $6;
 dest=$bpc+0|0; stop=dest+18|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=$sf+0|0; stop=dest+18|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 HEAP32[$uPos>>2] = 0;
 HEAP16[$usValue>>1] = 0;
 HEAP32[$uValue0>>2] = 0;
 HEAP32[$uValue1>>2] = 0;
 HEAP32[$offPos>>2] = 0;
 $7 = $pWS;
 $8 = (($7) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $pWS;
 $11 = (FUNCTION_TABLE_iii[$9 & 255]($10,$offPos)|0);
 $err = $11;
 $12 = ($11|0)<(0);
 if ($12) {
  $13 = $err;
  $err = $13;
  $405 = $err;
  STACKTOP = sp;return ($405|0);
 }
 $14 = $err;
 $err = $14;
 $15 = $2;
 $16 = $15&65535;
 do {
  if ((($16|0) == 3)) {
   $17 = $pWS;
   $18 = HEAP32[$offPos>>2]|0;
   $19 = $0;
   $20 = (($19) + 96|0);
   $21 = (($20) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_GetTifUShort($17,$18,$22,$usValue)|0);
   $err = $23;
   $24 = ($23|0)<(0);
   if ($24) {
    $25 = $err;
    $err = $25;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $26 = $err;
    $err = $26;
    $27 = HEAP16[$usValue>>1]|0;
    $28 = $27&65535;
    HEAP32[$uValue0>>2] = $28;
    break;
   }
  } else if ((($16|0) == 4)) {
   $29 = $pWS;
   $30 = HEAP32[$offPos>>2]|0;
   $31 = $0;
   $32 = (($31) + 96|0);
   $33 = (($32) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_GetTifULong($29,$30,$34,$uValue0)|0);
   $err = $35;
   $36 = ($35|0)<(0);
   if ($36) {
    $37 = $err;
    $err = $37;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $38 = $err;
    $err = $38;
    break;
   }
  }
 } while(0);
 $39 = $1;
 $40 = $39&65535;
 L20: do {
  switch ($40|0) {
  case 320: case 305: case 284:  {
   break;
  }
  case 296:  {
   $394 = HEAP16[$usValue>>1]|0;
   $395 = $0;
   $396 = (($395) + 96|0);
   $397 = (($396) + 32|0);
   HEAP16[$397>>1] = $394;
   break;
  }
  case 283:  {
   $354 = $pWS;
   $355 = HEAP32[$offPos>>2]|0;
   $356 = $0;
   $357 = (($356) + 96|0);
   $358 = (($357) + 44|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = (_GetTifULong($354,$355,$359,$uPos)|0);
   $err = $360;
   $361 = ($360|0)<(0);
   if ($361) {
    $362 = $err;
    $err = $362;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   }
   $363 = $err;
   $err = $363;
   $364 = HEAP32[$uPos>>2]|0;
   HEAP32[$offPos>>2] = $364;
   $365 = $pWS;
   $366 = HEAP32[$offPos>>2]|0;
   $367 = $0;
   $368 = (($367) + 96|0);
   $369 = (($368) + 44|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = (_GetTifULong($365,$366,$370,$uValue0)|0);
   $err = $371;
   $372 = ($371|0)<(0);
   if ($372) {
    $373 = $err;
    $err = $373;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   }
   $374 = $err;
   $err = $374;
   $375 = $pWS;
   $376 = HEAP32[$offPos>>2]|0;
   $377 = (($376) + 4)|0;
   $378 = $0;
   $379 = (($378) + 96|0);
   $380 = (($379) + 44|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = (_GetTifULong($375,$377,$381,$uValue1)|0);
   $err = $382;
   $383 = ($382|0)<(0);
   if ($383) {
    $384 = $err;
    $err = $384;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $385 = $err;
    $err = $385;
    $386 = HEAP32[$uValue0>>2]|0;
    $387 = (+($386>>>0));
    $388 = HEAP32[$uValue1>>2]|0;
    $389 = (+($388>>>0));
    $390 = $387 / $389;
    $391 = $0;
    $392 = (($391) + 96|0);
    $393 = (($392) + 40|0);
    HEAPF32[$393>>2] = $390;
    break L20;
   }
   break;
  }
  case 338:  {
   $126 = HEAP32[$uValue0>>2]|0;
   $127 = (0)!=($126|0);
   if ($127) {
    $128 = HEAP32[$uValue0>>2]|0;
    $129 = (1)!=($128|0);
    if ($129) {
     $130 = HEAP32[$uValue0>>2]|0;
     $131 = (2)!=($130|0);
     $133 = $131;
    } else {
     $133 = 0;
    }
   } else {
    $133 = 0;
   }
   $132 = $133 ? -106 : 0;
   $err = $132;
   $134 = ($132|0)<(0);
   if ($134) {
    $135 = $err;
    $err = $135;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $136 = $err;
    $err = $136;
    $137 = HEAP32[$uValue0>>2]|0;
    $138 = $0;
    $139 = (($138) + 96|0);
    $140 = (($139) + 28|0);
    HEAP32[$140>>2] = $137;
    break L20;
   }
   break;
  }
  case 258:  {
   $59 = $3;
   $60 = (1)==($59|0);
   if ($60) {
    $61 = HEAP32[$uValue0>>2]|0;
    $62 = $0;
    $63 = (($62) + 96|0);
    $64 = (($63) + 20|0);
    HEAP32[$64>>2] = $61;
   } else {
    $bpcAnd = 1;
    $65 = $pWS;
    $66 = HEAP32[$offPos>>2]|0;
    $67 = $0;
    $68 = (($67) + 96|0);
    $69 = (($68) + 44|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (_GetTifULong($65,$66,$70,$uPos)|0);
    $err = $71;
    $72 = ($71|0)<(0);
    if ($72) {
     $73 = $err;
     $err = $73;
     $405 = $err;
     STACKTOP = sp;return ($405|0);
    }
    $74 = $err;
    $err = $74;
    $75 = HEAP32[$uPos>>2]|0;
    HEAP32[$offPos>>2] = $75;
    $76 = $pWS;
    $77 = HEAP32[$offPos>>2]|0;
    $78 = $0;
    $79 = (($78) + 96|0);
    $80 = (($79) + 44|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (_GetTifUShort($76,$77,$81,$bpc)|0);
    $err = $82;
    $83 = ($82|0)<(0);
    if ($83) {
     $84 = $err;
     $err = $84;
     $405 = $err;
     STACKTOP = sp;return ($405|0);
    }
    $85 = $err;
    $err = $85;
    $i = 1;
    while(1) {
     $86 = $i;
     $87 = $3;
     $88 = ($86>>>0)<($87>>>0);
     if (!($88)) {
      break;
     }
     $89 = $pWS;
     $90 = HEAP32[$offPos>>2]|0;
     $91 = $i;
     $92 = $91 << 1;
     $93 = (($90) + ($92))|0;
     $94 = $0;
     $95 = (($94) + 96|0);
     $96 = (($95) + 44|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $i;
     $99 = (($bpc) + ($98<<1)|0);
     $100 = (_GetTifUShort($89,$93,$97,$99)|0);
     $err = $100;
     $101 = ($100|0)<(0);
     if ($101) {
      label = 35;
      break;
     }
     $103 = $err;
     $err = $103;
     $104 = $bpcAnd;
     $105 = ($104|0)!=(0);
     if ($105) {
      $106 = HEAP16[$bpc>>1]|0;
      $107 = $106&65535;
      $108 = $i;
      $109 = (($bpc) + ($108<<1)|0);
      $110 = HEAP16[$109>>1]|0;
      $111 = $110&65535;
      $112 = ($107|0)==($111|0);
      $114 = $112;
     } else {
      $114 = 0;
     }
     $113 = $114&1;
     $bpcAnd = $113;
     $115 = $i;
     $116 = (($115) + 1)|0;
     $i = $116;
    }
    if ((label|0) == 35) {
     $102 = $err;
     $err = $102;
     $405 = $err;
     STACKTOP = sp;return ($405|0);
    }
    $117 = $bpcAnd;
    $118 = ($117|0)!=(0);
    do {
     if ($118) {
      $119 = HEAP16[$bpc>>1]|0;
      $120 = $119&65535;
      $121 = $0;
      $122 = (($121) + 96|0);
      $123 = (($122) + 20|0);
      HEAP32[$123>>2] = $120;
     } else {
      $err = -106;
      if (1) {
       $124 = $err;
       $err = $124;
       $405 = $err;
       STACKTOP = sp;return ($405|0);
      } else {
       $125 = $err;
       $err = $125;
       break;
      }
     }
    } while(0);
   }
   break;
  }
  case 339:  {
   $141 = $3;
   $142 = (1)==($141|0);
   if ($142) {
    $143 = HEAP32[$uValue0>>2]|0;
    $144 = $0;
    $145 = (($144) + 96|0);
    $146 = (($145) + 24|0);
    HEAP32[$146>>2] = $143;
   } else {
    $sfAnd = 1;
    $147 = $pWS;
    $148 = HEAP32[$offPos>>2]|0;
    $149 = $0;
    $150 = (($149) + 96|0);
    $151 = (($150) + 44|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (_GetTifULong($147,$148,$152,$uPos)|0);
    $err = $153;
    $154 = ($153|0)<(0);
    if ($154) {
     $155 = $err;
     $err = $155;
     $405 = $err;
     STACKTOP = sp;return ($405|0);
    }
    $156 = $err;
    $err = $156;
    $157 = HEAP32[$uPos>>2]|0;
    HEAP32[$offPos>>2] = $157;
    $158 = $pWS;
    $159 = HEAP32[$offPos>>2]|0;
    $160 = $0;
    $161 = (($160) + 96|0);
    $162 = (($161) + 44|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = (_GetTifUShort($158,$159,$163,$sf)|0);
    $err = $164;
    $165 = ($164|0)<(0);
    if ($165) {
     $166 = $err;
     $err = $166;
     $405 = $err;
     STACKTOP = sp;return ($405|0);
    }
    $167 = $err;
    $err = $167;
    $i = 1;
    while(1) {
     $168 = $i;
     $169 = $3;
     $170 = ($168>>>0)<($169>>>0);
     if (!($170)) {
      break;
     }
     $171 = $pWS;
     $172 = HEAP32[$offPos>>2]|0;
     $173 = $i;
     $174 = $173 << 1;
     $175 = (($172) + ($174))|0;
     $176 = $0;
     $177 = (($176) + 96|0);
     $178 = (($177) + 44|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $i;
     $181 = (($sf) + ($180<<1)|0);
     $182 = (_GetTifUShort($171,$175,$179,$181)|0);
     $err = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      label = 67;
      break;
     }
     $185 = $err;
     $err = $185;
     $186 = $sfAnd;
     $187 = ($186|0)!=(0);
     if ($187) {
      $188 = HEAP16[$sf>>1]|0;
      $189 = $188&65535;
      $190 = $i;
      $191 = (($sf) + ($190<<1)|0);
      $192 = HEAP16[$191>>1]|0;
      $193 = $192&65535;
      $194 = ($189|0)==($193|0);
      $196 = $194;
     } else {
      $196 = 0;
     }
     $195 = $196&1;
     $sfAnd = $195;
     $197 = $i;
     $198 = (($197) + 1)|0;
     $i = $198;
    }
    if ((label|0) == 67) {
     $184 = $err;
     $err = $184;
     $405 = $err;
     STACKTOP = sp;return ($405|0);
    }
    $199 = $sfAnd;
    $200 = ($199|0)!=(0);
    do {
     if ($200) {
      $201 = HEAP16[$sf>>1]|0;
      $202 = $201&65535;
      $203 = $0;
      $204 = (($203) + 96|0);
      $205 = (($204) + 24|0);
      HEAP32[$205>>2] = $202;
     } else {
      $err = -106;
      if (1) {
       $206 = $err;
       $err = $206;
       $405 = $err;
       STACKTOP = sp;return ($405|0);
      } else {
       $207 = $err;
       $err = $207;
       break;
      }
     }
    } while(0);
   }
   break;
  }
  case 256:  {
   $53 = HEAP32[$uValue0>>2]|0;
   $54 = $0;
   $55 = (($54) + 72|0);
   HEAP32[$55>>2] = $53;
   break;
  }
  case 254:  {
   $41 = HEAP32[$uValue0>>2]|0;
   $42 = (0)!=($41|0);
   $43 = $42 ? -106 : 0;
   $err = $43;
   $44 = ($43|0)<(0);
   if ($44) {
    $45 = $err;
    $err = $45;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $46 = $err;
    $err = $46;
    break L20;
   }
   break;
  }
  case 257:  {
   $56 = HEAP32[$uValue0>>2]|0;
   $57 = $0;
   $58 = (($57) + 76|0);
   HEAP32[$58>>2] = $56;
   break;
  }
  case 317: case 255:  {
   $47 = HEAP32[$uValue0>>2]|0;
   $48 = (1)!=($47|0);
   $49 = $48 ? -106 : 0;
   $err = $49;
   $50 = ($49|0)<(0);
   if ($50) {
    $51 = $err;
    $err = $51;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $52 = $err;
    $err = $52;
    break L20;
   }
   break;
  }
  case 279:  {
   $280 = $0;
   $281 = (($280) + 96|0);
   $282 = (($281) + 8|0);
   $283 = $3;
   $284 = $283<<2;
   $285 = (_WMPAlloc($282,$284)|0);
   $err = $285;
   $286 = ($285|0)<(0);
   if ($286) {
    $287 = $err;
    $err = $287;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   }
   $288 = $err;
   $err = $288;
   $289 = $pWS;
   $290 = HEAP32[$offPos>>2]|0;
   $291 = $0;
   $292 = (($291) + 96|0);
   $293 = (($292) + 44|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = (_GetTifULong($289,$290,$294,$uValue0)|0);
   $err = $295;
   $296 = ($295|0)<(0);
   if ($296) {
    $297 = $err;
    $err = $297;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   }
   $298 = $err;
   $err = $298;
   $299 = $pWS;
   $300 = HEAP32[$uValue0>>2]|0;
   $301 = $3;
   $302 = $0;
   $303 = (($302) + 96|0);
   $304 = (($303) + 44|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = $0;
   $307 = (($306) + 96|0);
   $308 = (($307) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = (_GetTifULongArray($299,$300,$301,$305,$309)|0);
   $err = $310;
   $311 = ($310|0)<(0);
   if ($311) {
    $312 = $err;
    $err = $312;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $313 = $err;
    $err = $313;
    break L20;
   }
   break;
  }
  case 282:  {
   $314 = $pWS;
   $315 = HEAP32[$offPos>>2]|0;
   $316 = $0;
   $317 = (($316) + 96|0);
   $318 = (($317) + 44|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (_GetTifULong($314,$315,$319,$uPos)|0);
   $err = $320;
   $321 = ($320|0)<(0);
   if ($321) {
    $322 = $err;
    $err = $322;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   }
   $323 = $err;
   $err = $323;
   $324 = HEAP32[$uPos>>2]|0;
   HEAP32[$offPos>>2] = $324;
   $325 = $pWS;
   $326 = HEAP32[$offPos>>2]|0;
   $327 = $0;
   $328 = (($327) + 96|0);
   $329 = (($328) + 44|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = (_GetTifULong($325,$326,$330,$uValue0)|0);
   $err = $331;
   $332 = ($331|0)<(0);
   if ($332) {
    $333 = $err;
    $err = $333;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   }
   $334 = $err;
   $err = $334;
   $335 = $pWS;
   $336 = HEAP32[$offPos>>2]|0;
   $337 = (($336) + 4)|0;
   $338 = $0;
   $339 = (($338) + 96|0);
   $340 = (($339) + 44|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = (_GetTifULong($335,$337,$341,$uValue1)|0);
   $err = $342;
   $343 = ($342|0)<(0);
   if ($343) {
    $344 = $err;
    $err = $344;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $345 = $err;
    $err = $345;
    $346 = HEAP32[$uValue0>>2]|0;
    $347 = (+($346>>>0));
    $348 = HEAP32[$uValue1>>2]|0;
    $349 = (+($348>>>0));
    $350 = $347 / $349;
    $351 = $0;
    $352 = (($351) + 96|0);
    $353 = (($352) + 36|0);
    HEAPF32[$353>>2] = $350;
    break L20;
   }
   break;
  }
  case 278:  {
   $277 = HEAP32[$uValue0>>2]|0;
   $278 = $0;
   $279 = (($278) + 96|0);
   HEAP32[$279>>2] = $277;
   break;
  }
  case 277: case 274:  {
   $273 = HEAP32[$uValue0>>2]|0;
   $274 = $0;
   $275 = (($274) + 96|0);
   $276 = (($275) + 16|0);
   HEAP32[$276>>2] = $273;
   break;
  }
  case 259:  {
   $208 = HEAP32[$uValue0>>2]|0;
   $209 = (1)!=($208|0);
   $210 = $209 ? -106 : 0;
   $err = $210;
   $211 = ($210|0)<(0);
   if ($211) {
    $212 = $err;
    $err = $212;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $213 = $err;
    $err = $213;
    break L20;
   }
   break;
  }
  case 273:  {
   $239 = $0;
   $240 = (($239) + 96|0);
   $241 = (($240) + 4|0);
   $242 = $3;
   $243 = $242<<2;
   $244 = (_WMPAlloc($241,$243)|0);
   $err = $244;
   $245 = ($244|0)<(0);
   if ($245) {
    $246 = $err;
    $err = $246;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   }
   $247 = $err;
   $err = $247;
   $248 = $pWS;
   $249 = HEAP32[$offPos>>2]|0;
   $250 = $0;
   $251 = (($250) + 96|0);
   $252 = (($251) + 44|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = (_GetTifULong($248,$249,$253,$uValue0)|0);
   $err = $254;
   $255 = ($254|0)<(0);
   if ($255) {
    $256 = $err;
    $err = $256;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   }
   $257 = $err;
   $err = $257;
   $258 = $pWS;
   $259 = HEAP32[$uValue0>>2]|0;
   $260 = $3;
   $261 = $0;
   $262 = (($261) + 96|0);
   $263 = (($262) + 44|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = $0;
   $266 = (($265) + 96|0);
   $267 = (($266) + 4|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = (_GetTifULongArray($258,$259,$260,$264,$268)|0);
   $err = $269;
   $270 = ($269|0)<(0);
   if ($270) {
    $271 = $err;
    $err = $271;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $272 = $err;
    $err = $272;
    break L20;
   }
   break;
  }
  case 262:  {
   $214 = HEAP32[$uValue0>>2]|0;
   $215 = (0)==($214|0);
   if ($215) {
    $231 = 1;
   } else {
    $216 = HEAP32[$uValue0>>2]|0;
    $217 = (1)==($216|0);
    if ($217) {
     $231 = 1;
    } else {
     $218 = HEAP32[$uValue0>>2]|0;
     $219 = (2)==($218|0);
     if ($219) {
      $231 = 1;
     } else {
      $220 = HEAP32[$uValue0>>2]|0;
      $221 = (3)==($220|0);
      if ($221) {
       $231 = 1;
      } else {
       $222 = HEAP32[$uValue0>>2]|0;
       $223 = (4)==($222|0);
       if ($223) {
        $231 = 1;
       } else {
        $224 = HEAP32[$uValue0>>2]|0;
        $225 = (5)==($224|0);
        if ($225) {
         $231 = 1;
        } else {
         $226 = HEAP32[$uValue0>>2]|0;
         $227 = (6)==($226|0);
         if ($227) {
          $231 = 1;
         } else {
          $228 = HEAP32[$uValue0>>2]|0;
          $229 = (8)==($228|0);
          $231 = $229;
         }
        }
       }
      }
     }
    }
   }
   $230 = $231 ? 0 : -106;
   $err = $230;
   $232 = ($230|0)<(0);
   if ($232) {
    $233 = $err;
    $err = $233;
    $405 = $err;
    STACKTOP = sp;return ($405|0);
   } else {
    $234 = $err;
    $err = $234;
    $235 = HEAP32[$uValue0>>2]|0;
    $236 = $0;
    $237 = (($236) + 96|0);
    $238 = (($237) + 12|0);
    HEAP32[$238>>2] = $235;
    break L20;
   }
   break;
  }
  default: {
   $398 = $1;
   $399 = $398&65535;
   $400 = $1;
   $401 = $400&65535;
   $402 = $2;
   $403 = $402&65535;
   $404 = $3;
   HEAP32[$vararg_buffer>>2] = $399;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $401;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $403;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $404;
   (_printf((30032|0),($vararg_buffer|0))|0);
  }
  }
 } while(0);
 $405 = $err;
 STACKTOP = sp;return ($405|0);
}
function _ParseTifDEArray($pID,$offPos) {
 $pID = $pID|0;
 $offPos = $offPos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pWS = 0, $uCount = 0, $uTag = 0, $uType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uTag = sp + 22|0;
 $uType = sp + 20|0;
 $uCount = sp + 12|0;
 $0 = $pID;
 $1 = $offPos;
 $err = 0;
 $2 = $0;
 $3 = (($2) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $pWS = $4;
 HEAP16[$uTag>>1] = 0;
 HEAP16[$uType>>1] = 0;
 HEAP32[$uCount>>2] = 0;
 $5 = $pWS;
 $6 = $1;
 $7 = $0;
 $8 = (($7) + 96|0);
 $9 = (($8) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_GetTifUShort($5,$6,$10,$uTag)|0);
 $err = $11;
 $12 = ($11|0)<(0);
 if ($12) {
  $13 = $err;
  $err = $13;
  $49 = $err;
  STACKTOP = sp;return ($49|0);
 }
 $14 = $err;
 $err = $14;
 $15 = $1;
 $16 = (($15) + 2)|0;
 $1 = $16;
 $17 = $pWS;
 $18 = $1;
 $19 = $0;
 $20 = (($19) + 96|0);
 $21 = (($20) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_GetTifUShort($17,$18,$22,$uType)|0);
 $err = $23;
 $24 = ($23|0)<(0);
 if ($24) {
  $25 = $err;
  $err = $25;
  $49 = $err;
  STACKTOP = sp;return ($49|0);
 }
 $26 = $err;
 $err = $26;
 $27 = $1;
 $28 = (($27) + 2)|0;
 $1 = $28;
 $29 = $pWS;
 $30 = $1;
 $31 = $0;
 $32 = (($31) + 96|0);
 $33 = (($32) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_GetTifULong($29,$30,$34,$uCount)|0);
 $err = $35;
 $36 = ($35|0)<(0);
 if ($36) {
  $37 = $err;
  $err = $37;
  $49 = $err;
  STACKTOP = sp;return ($49|0);
 }
 $38 = $err;
 $err = $38;
 $39 = $1;
 $40 = (($39) + 4)|0;
 $1 = $40;
 $41 = $0;
 $42 = HEAP16[$uTag>>1]|0;
 $43 = HEAP16[$uType>>1]|0;
 $44 = HEAP32[$uCount>>2]|0;
 $45 = (_ParseTifDEValue($41,$42,$43,$44)|0);
 $err = $45;
 $46 = ($45|0)<(0);
 if ($46) {
  $47 = $err;
  $err = $47;
  $49 = $err;
  STACKTOP = sp;return ($49|0);
 }
 $48 = $err;
 $err = $48;
 $49 = $err;
 STACKTOP = sp;return ($49|0);
}
function _ParseTifHeader($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $PI = 0, $err = 0, $i = 0, $offPos = 0, $offPosBase = 0, $szSig = 0, $uCountDE = 0, $uOffNextIFD = 0, $uTiffId = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $PI = sp + 8|0;
 $offPosBase = sp + 48|0;
 $szSig = sp + 70|0;
 $uTiffId = sp + 64|0;
 $uOffNextIFD = sp;
 $uCountDE = sp + 66|0;
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 HEAP32[$offPosBase>>2] = 0;
 $offPos = 0;
 ;HEAP8[$szSig+0>>0]=0|0;HEAP8[$szSig+1>>0]=0|0;HEAP8[$szSig+2>>0]=0|0;
 HEAP16[$uTiffId>>1] = 0;
 HEAP32[$uOffNextIFD>>2] = 0;
 HEAP16[$uCountDE>>1] = 0;
 $i = 0;
 $2 = $0;
 $3 = (($2) + 96|0);
 HEAP32[$3>>2] = -1;
 $4 = $0;
 $5 = (($4) + 96|0);
 $6 = (($5) + 12|0);
 HEAP32[$6>>2] = -1;
 $7 = $0;
 $8 = (($7) + 96|0);
 $9 = (($8) + 16|0);
 HEAP32[$9>>2] = -1;
 $10 = $0;
 $11 = (($10) + 96|0);
 $12 = (($11) + 20|0);
 HEAP32[$12>>2] = -1;
 $13 = $0;
 $14 = (($13) + 96|0);
 $15 = (($14) + 24|0);
 HEAP32[$15>>2] = 1;
 $16 = $0;
 $17 = (($16) + 96|0);
 $18 = (($17) + 32|0);
 HEAP16[$18>>1] = 2;
 $19 = $0;
 $20 = (($19) + 96|0);
 $21 = (($20) + 36|0);
 HEAPF32[$21>>2] = 96.0;
 $22 = $0;
 $23 = (($22) + 96|0);
 $24 = (($23) + 40|0);
 HEAPF32[$24>>2] = 96.0;
 $25 = $1;
 $26 = (($25) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $1;
 $29 = (FUNCTION_TABLE_iii[$27 & 255]($28,$offPosBase)|0);
 $err = $29;
 $30 = ($29|0)<(0);
 if ($30) {
  $31 = $err;
  $err = $31;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $32 = $err;
 $err = $32;
 $33 = HEAP32[$offPosBase>>2]|0;
 $34 = (0)!=($33|0);
 $35 = $34 ? -106 : 0;
 $err = $35;
 $36 = ($35|0)<(0);
 if ($36) {
  $37 = $err;
  $err = $37;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $38 = $err;
 $err = $38;
 $39 = $1;
 $40 = (($39) + 32|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = (FUNCTION_TABLE_iiii[$41 & 255]($42,$szSig,2)|0);
 $err = $43;
 $44 = ($43|0)<(0);
 if ($44) {
  $45 = $err;
  $err = $45;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $46 = $err;
 $err = $46;
 $47 = $offPos;
 $48 = (($47) + 2)|0;
 $offPos = $48;
 $49 = (_strstr($szSig,30072)|0);
 $50 = ($szSig|0)==($49|0);
 if ($50) {
  $51 = $0;
  $52 = (($51) + 96|0);
  $53 = (($52) + 44|0);
  HEAP32[$53>>2] = 1;
 } else {
  $54 = (_strstr($szSig,30080)|0);
  $55 = ($szSig|0)==($54|0);
  do {
   if ($55) {
    $56 = $0;
    $57 = (($56) + 96|0);
    $58 = (($57) + 44|0);
    HEAP32[$58>>2] = 0;
   } else {
    $err = -106;
    if (1) {
     $59 = $err;
     $err = $59;
     $248 = $err;
     STACKTOP = sp;return ($248|0);
    } else {
     $60 = $err;
     $err = $60;
     break;
    }
   }
  } while(0);
 }
 $61 = $1;
 $62 = $offPos;
 $63 = $0;
 $64 = (($63) + 96|0);
 $65 = (($64) + 44|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (_GetTifUShort($61,$62,$66,$uTiffId)|0);
 $err = $67;
 $68 = ($67|0)<(0);
 if ($68) {
  $69 = $err;
  $err = $69;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $70 = $err;
 $err = $70;
 $71 = $offPos;
 $72 = (($71) + 2)|0;
 $offPos = $72;
 $73 = HEAP16[$uTiffId>>1]|0;
 $74 = $73&65535;
 $75 = (42)!=($74|0);
 $76 = $75 ? -106 : 0;
 $err = $76;
 $77 = ($76|0)<(0);
 if ($77) {
  $78 = $err;
  $err = $78;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $79 = $err;
 $err = $79;
 $80 = $1;
 $81 = $offPos;
 $82 = $0;
 $83 = (($82) + 96|0);
 $84 = (($83) + 44|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (_GetTifULong($80,$81,$85,$uOffNextIFD)|0);
 $err = $86;
 $87 = ($86|0)<(0);
 if ($87) {
  $88 = $err;
  $err = $88;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $89 = $err;
 $err = $89;
 $90 = $offPos;
 $91 = (($90) + 4)|0;
 $offPos = $91;
 $92 = HEAP32[$uOffNextIFD>>2]|0;
 $offPos = $92;
 $93 = $1;
 $94 = $offPos;
 $95 = $0;
 $96 = (($95) + 96|0);
 $97 = (($96) + 44|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (_GetTifUShort($93,$94,$98,$uCountDE)|0);
 $err = $99;
 $100 = ($99|0)<(0);
 if ($100) {
  $101 = $err;
  $err = $101;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $102 = $err;
 $err = $102;
 $103 = $offPos;
 $104 = (($103) + 2)|0;
 $offPos = $104;
 $i = 0;
 while(1) {
  $105 = $i;
  $106 = $105&65535;
  $107 = HEAP16[$uCountDE>>1]|0;
  $108 = $107&65535;
  $109 = ($106|0)<($108|0);
  if (!($109)) {
   break;
  }
  $110 = $0;
  $111 = $offPos;
  $112 = (_ParseTifDEArray($110,$111)|0);
  $err = $112;
  $113 = ($112|0)<(0);
  if ($113) {
   label = 34;
   break;
  }
  $115 = $err;
  $err = $115;
  $116 = $offPos;
  $117 = (($116) + 12)|0;
  $offPos = $117;
  $118 = $i;
  $119 = (($118) + 1)<<16>>16;
  $i = $119;
 }
 if ((label|0) == 34) {
  $114 = $err;
  $err = $114;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $120 = $0;
 $121 = (($120) + 96|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)==(-1);
 if ($123) {
  $124 = $0;
  $125 = (($124) + 76|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $0;
  $128 = (($127) + 96|0);
  HEAP32[$128>>2] = $126;
 }
 $129 = $0;
 $130 = (($129) + 96|0);
 $131 = (($130) + 12|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (-1)==($132|0);
 if ($133) {
  $145 = 1;
 } else {
  $134 = $0;
  $135 = (($134) + 96|0);
  $136 = (($135) + 16|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (-1)==($137|0);
  if ($138) {
   $145 = 1;
  } else {
   $139 = $0;
   $140 = (($139) + 96|0);
   $141 = (($140) + 20|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (-1)==($142|0);
   $145 = $143;
  }
 }
 $144 = $145 ? -106 : 0;
 $err = $144;
 $146 = ($144|0)<(0);
 if ($146) {
  $147 = $err;
  $err = $147;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $148 = $err;
 $err = $148;
 $149 = $0;
 $150 = (($149) + 96|0);
 $151 = (($150) + 12|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($PI) + 24|0);
 HEAP32[$153>>2] = $152;
 $154 = $0;
 $155 = (($154) + 96|0);
 $156 = (($155) + 16|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = (($PI) + 28|0);
 HEAP32[$158>>2] = $157;
 $159 = $0;
 $160 = (($159) + 96|0);
 $161 = (($160) + 20|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($PI) + 32|0);
 HEAP32[$163>>2] = $162;
 $164 = $0;
 $165 = (($164) + 96|0);
 $166 = (($165) + 24|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = (($PI) + 36|0);
 HEAP32[$168>>2] = $167;
 $169 = $0;
 $170 = (($169) + 96|0);
 $171 = (($170) + 28|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)==(1);
 if ($173) {
  $190 = 1;
 } else {
  $174 = $0;
  $175 = (($174) + 96|0);
  $176 = (($175) + 28|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ($177|0)==(2);
  if ($178) {
   $190 = 1;
  } else {
   $179 = $0;
   $180 = (($179) + 96|0);
   $181 = (($180) + 28|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ($182|0)==(0);
   if ($183) {
    $184 = $0;
    $185 = (($184) + 96|0);
    $186 = (($185) + 16|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = ($187>>>0)>(3);
    $249 = $188;
   } else {
    $249 = 0;
   }
   $190 = $249;
  }
 }
 $189 = $190 ? 16 : 0;
 $191 = (($PI) + 20|0);
 HEAP32[$191>>2] = $189;
 $192 = $0;
 $193 = (($192) + 96|0);
 $194 = (($193) + 28|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ($195|0)==(1);
 $197 = $196 ? 32 : 0;
 $198 = (($PI) + 20|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = $199 | $197;
 HEAP32[$198>>2] = $200;
 $201 = $0;
 $202 = (($201) + 96|0);
 $203 = (($202) + 32|0);
 $204 = HEAP16[$203>>1]|0;
 $205 = $204&65535;
 $206 = (3)==($205|0);
 if ($206) {
  $207 = $0;
  $208 = (($207) + 96|0);
  $209 = (($208) + 36|0);
  $210 = +HEAPF32[$209>>2];
  $211 = $210;
  $212 = $211 * 2.54;
  $213 = $212;
  $220 = $213;
 } else {
  $214 = $0;
  $215 = (($214) + 96|0);
  $216 = (($215) + 36|0);
  $217 = +HEAPF32[$216>>2];
  $220 = $217;
 }
 $218 = $0;
 $219 = (($218) + 84|0);
 HEAPF32[$219>>2] = $220;
 $221 = $0;
 $222 = (($221) + 96|0);
 $223 = (($222) + 32|0);
 $224 = HEAP16[$223>>1]|0;
 $225 = $224&65535;
 $226 = (3)==($225|0);
 if ($226) {
  $227 = $0;
  $228 = (($227) + 96|0);
  $229 = (($228) + 40|0);
  $230 = +HEAPF32[$229>>2];
  $231 = $230;
  $232 = $231 * 2.54;
  $233 = $232;
  $240 = $233;
 } else {
  $234 = $0;
  $235 = (($234) + 96|0);
  $236 = (($235) + 40|0);
  $237 = +HEAPF32[$236>>2];
  $240 = $237;
 }
 $238 = $0;
 $239 = (($238) + 88|0);
 HEAPF32[$239>>2] = $240;
 $241 = (_PixelFormatLookup($PI,1)|0);
 $err = $241;
 $242 = ($241|0)<(0);
 if ($242) {
  $243 = $err;
  $err = $243;
  $248 = $err;
  STACKTOP = sp;return ($248|0);
 }
 $244 = $err;
 $err = $244;
 $245 = $0;
 $246 = (($245) + 56|0);
 $247 = HEAP32[$PI>>2]|0;
 ;HEAP32[$246+0>>2]=HEAP32[$247+0>>2]|0;HEAP32[$246+4>>2]=HEAP32[$247+4>>2]|0;HEAP32[$246+8>>2]=HEAP32[$247+8>>2]|0;HEAP32[$246+12>>2]=HEAP32[$247+12>>2]|0;
 $248 = $err;
 STACKTOP = sp;return ($248|0);
}
function _PKImageDecode_Initialize_TIF($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_PKTestDecode_Initialize($2,$3)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $6 = $err;
   $err = $6;
  } else {
   $7 = $err;
   $err = $7;
   $8 = $0;
   $9 = $1;
   $10 = (_ParseTifHeader($8,$9)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    $12 = $err;
    $err = $12;
    break;
   }
   $13 = $err;
   $err = $13;
  }
 } while(0);
 $14 = $err;
 STACKTOP = sp;return ($14|0);
}
function _GetScanLineOffset($pID,$iLine,$cbLine,$offLine) {
 $pID = $pID|0;
 $iLine = $iLine|0;
 $cbLine = $cbLine|0;
 $offLine = $offLine|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $iLine;
 $2 = $cbLine;
 $3 = $offLine;
 $4 = $0;
 $5 = (($4) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = $0;
  $10 = (($9) + 96|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($8>>>0) / ($11>>>0))&-1;
  $13 = $0;
  $14 = (($13) + 96|0);
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($12<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = $1;
  $21 = $0;
  $22 = (($21) + 96|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($20>>>0) % ($23>>>0))&-1;
  $25 = Math_imul($19, $24)|0;
  $26 = (($18) + ($25))|0;
  $28 = $26;
  $27 = $3;
  HEAP32[$27>>2] = $28;
  STACKTOP = sp;return 0;
 } else {
  $28 = 0;
  $27 = $3;
  HEAP32[$27>>2] = $28;
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _PKImageDecode_Copy_TIF($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $PI = 0, $begin = 0, $cbLine = 0, $end = 0, $err = 0, $i = 0, $j = 0, $offPixels = 0, $pS = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $PI = sp + 24|0;
 $offPixels = sp + 8|0;
 $0 = $pID;
 $1 = $pRect;
 $2 = $pb;
 $3 = $cbStride;
 $err = 0;
 $4 = $0;
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $pS = $6;
 $cbLine = 0;
 $i = 0;
 $7 = $0;
 $8 = (($7) + 56|0);
 HEAP32[$PI>>2] = $8;
 (_PixelFormatLookup($PI,0)|0);
 $9 = (($PI) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (0)==($10|0);
 if ($11) {
  $12 = (($PI) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = (($14) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = Math_imul($13, $16)|0;
  $18 = (($17) + 7)|0;
  $19 = $18 >>> 3;
  $28 = $19;
 } else {
  $20 = (($PI) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 7)|0;
  $23 = $22 >>> 3;
  $24 = $1;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = Math_imul($23, $26)|0;
  $28 = $27;
 }
 $cbLine = $28;
 $29 = $1;
 $30 = HEAP32[$29>>2]|0;
 $31 = (0)==($30|0);
 if (!($31)) {
  ___assert_fail((30088|0),(28880|0),881,(30144|0));
  // unreachable;
 }
 $32 = $0;
 $33 = (($32) + 72|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $1;
 $36 = (($35) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($34|0)==($37|0);
 if (!($38)) {
  ___assert_fail((30088|0),(28880|0),881,(30144|0));
  // unreachable;
 }
 $39 = $cbLine;
 $40 = $3;
 $41 = ($39>>>0)<=($40>>>0);
 if (!($41)) {
  ___assert_fail((30168|0),(28880|0),882,(30144|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $1;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   label = 28;
   break;
  }
  HEAP32[$offPixels>>2] = 0;
  $47 = $0;
  $48 = $1;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $i;
  $52 = (($50) + ($51))|0;
  $53 = $cbLine;
  $54 = (_GetScanLineOffset($47,$52,$53,$offPixels)|0);
  $err = $54;
  $55 = ($54|0)<(0);
  if ($55) {
   label = 12;
   break;
  }
  $57 = $err;
  $err = $57;
  $58 = $pS;
  $59 = (($58) + 44|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $pS;
  $62 = HEAP32[$offPixels>>2]|0;
  $63 = (FUNCTION_TABLE_iii[$60 & 255]($61,$62)|0);
  $err = $63;
  $64 = ($63|0)<(0);
  if ($64) {
   label = 15;
   break;
  }
  $66 = $err;
  $err = $66;
  $67 = $pS;
  $68 = (($67) + 32|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $pS;
  $71 = $2;
  $72 = $3;
  $73 = $i;
  $74 = Math_imul($72, $73)|0;
  $75 = (($71) + ($74)|0);
  $76 = $cbLine;
  $77 = (FUNCTION_TABLE_iiii[$69 & 255]($70,$75,$76)|0);
  $err = $77;
  $78 = ($77|0)<(0);
  if ($78) {
   label = 18;
   break;
  }
  $80 = $err;
  $err = $80;
  $81 = $0;
  $82 = (($81) + 96|0);
  $83 = (($82) + 12|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (0)==($84|0);
  if ($85) {
   $86 = $3;
   $87 = $i;
   $88 = Math_imul($86, $87)|0;
   $begin = $88;
   $89 = $begin;
   $90 = $cbLine;
   $91 = (($89) + ($90))|0;
   $end = $91;
   $92 = $begin;
   $j = $92;
   while(1) {
    $93 = $j;
    $94 = $end;
    $95 = ($93>>>0)<($94>>>0);
    if (!($95)) {
     break;
    }
    $96 = $j;
    $97 = $2;
    $98 = (($97) + ($96)|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = $100 ^ -1;
    $102 = $101&255;
    $103 = $j;
    $104 = $2;
    $105 = (($104) + ($103)|0);
    HEAP8[$105>>0] = $102;
    $106 = $j;
    $107 = (($106) + 1)|0;
    $j = $107;
   }
  }
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 if ((label|0) == 12) {
  $56 = $err;
  $err = $56;
  $110 = $err;
  STACKTOP = sp;return ($110|0);
 }
 else if ((label|0) == 15) {
  $65 = $err;
  $err = $65;
  $110 = $err;
  STACKTOP = sp;return ($110|0);
 }
 else if ((label|0) == 18) {
  $79 = $err;
  $err = $79;
  $110 = $err;
  STACKTOP = sp;return ($110|0);
 }
 else if ((label|0) == 28) {
  $110 = $err;
  STACKTOP = sp;return ($110|0);
 }
 return 0|0;
}
function _PKImageDecode_Release_TIF($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $pID = $2;
 $3 = $pID;
 $4 = (($3) + 96|0);
 $5 = (($4) + 4|0);
 $6 = (_WMPFree($5)|0);
 $err = $6;
 $7 = ($6|0)<(0);
 do {
  if ($7) {
   $8 = $err;
   $err = $8;
  } else {
   $9 = $err;
   $err = $9;
   $10 = $pID;
   $11 = (($10) + 96|0);
   $12 = (($11) + 8|0);
   $13 = (_WMPFree($12)|0);
   $err = $13;
   $14 = ($13|0)<(0);
   if ($14) {
    $15 = $err;
    $err = $15;
    break;
   }
   $16 = $err;
   $err = $16;
   $17 = $0;
   $18 = (_PKTestDecode_Release($17)|0);
   $err = $18;
   $19 = ($18|0)<(0);
   if ($19) {
    $20 = $err;
    $err = $20;
    break;
   }
   $21 = $err;
   $err = $21;
  }
 } while(0);
 $22 = $err;
 STACKTOP = sp;return ($22|0);
}
function _PKImageDecode_Create_TIF($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKTestDecode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $13 = $err;
  STACKTOP = sp;return ($13|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 187;
 $9 = $pID;
 $10 = (($9) + 28|0);
 HEAP32[$10>>2] = 188;
 $11 = $pID;
 $12 = (($11) + 40|0);
 HEAP32[$12>>2] = 189;
 $13 = $err;
 STACKTOP = sp;return ($13|0);
}
function _WriteIYUVHeader($pIE) {
 $pIE = $pIE|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pIE;
 $err = 0;
 $1 = $0;
 $2 = (($1) + 112|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = (($3) + 116|0);
 HEAP32[$4>>2] = 3;
 $5 = $0;
 $6 = (($5) + 108|0);
 HEAP32[$6>>2] = 1;
 $7 = $err;
 STACKTOP = sp;return ($7|0);
}
function _PKImageEncode_WritePixels_IYUV($pIE,$cLine,$pbPixel,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixel = $pbPixel|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $err = 0, $iCol = 0, $iRow = 0, $pS = 0, $pU = 0, $pV = 0, $pY = 0, $uUVSize = 0, $uYSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pIE;
 $2 = $cLine;
 $3 = $pbPixel;
 $4 = $cbStride;
 $err = 0;
 $5 = $1;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $pS = $7;
 $8 = $4;
 $4 = $8;
 $9 = $1;
 $10 = (($9) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 do {
  if ($12) {
   label = 6;
  } else {
   $13 = $1;
   $14 = (_WriteIYUVHeader($13)|0);
   $err = $14;
   $15 = ($14|0)<(0);
   if ($15) {
    $16 = $err;
    $err = $16;
    break;
   }
   $17 = $err;
   $err = $17;
   label = 6;
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $18 = $2;
   $19 = $1;
   $20 = (($19) + 84|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = Math_imul($18, $21)|0;
   $uYSize = $22;
   $23 = $uYSize;
   $24 = $23 >>> 2;
   $uUVSize = $24;
   $25 = $uYSize;
   $26 = (_malloc($25)|0);
   $pY = $26;
   $27 = $uUVSize;
   $28 = (_malloc($27)|0);
   $pU = $28;
   $29 = $uUVSize;
   $30 = (_malloc($29)|0);
   $pV = $30;
   $31 = $pY;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    $33 = $pU;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $35 = $pV;
     $36 = ($35|0)==(0|0);
     if (!($36)) {
      $iRow = 0;
      while(1) {
       $37 = $iRow;
       $38 = $1;
       $39 = (($38) + 88|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($37>>>0)<($40>>>0);
       if (!($41)) {
        break;
       }
       $iCol = 0;
       while(1) {
        $42 = $iCol;
        $43 = $1;
        $44 = (($43) + 84|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($42>>>0)<($45>>>0);
        if (!($46)) {
         break;
        }
        $47 = $3;
        $48 = HEAP8[$47>>0]|0;
        $49 = $pY;
        HEAP8[$49>>0] = $48;
        $50 = $3;
        $51 = (($50) + 1|0);
        $3 = $51;
        $52 = $3;
        $53 = HEAP8[$52>>0]|0;
        $54 = $pY;
        $55 = (($54) + 1|0);
        HEAP8[$55>>0] = $53;
        $56 = $3;
        $57 = (($56) + 1|0);
        $3 = $57;
        $58 = $3;
        $59 = HEAP8[$58>>0]|0;
        $60 = $pY;
        $61 = $1;
        $62 = (($61) + 84|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = (($60) + ($63)|0);
        HEAP8[$64>>0] = $59;
        $65 = $3;
        $66 = (($65) + 1|0);
        $3 = $66;
        $67 = $3;
        $68 = HEAP8[$67>>0]|0;
        $69 = $pY;
        $70 = $1;
        $71 = (($70) + 84|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = (($69) + ($72)|0);
        $74 = (($73) + 1|0);
        HEAP8[$74>>0] = $68;
        $75 = $3;
        $76 = (($75) + 1|0);
        $3 = $76;
        $77 = $3;
        $78 = HEAP8[$77>>0]|0;
        $79 = $pU;
        HEAP8[$79>>0] = $78;
        $80 = $3;
        $81 = (($80) + 1|0);
        $3 = $81;
        $82 = $pU;
        $83 = (($82) + 1|0);
        $pU = $83;
        $84 = $3;
        $85 = HEAP8[$84>>0]|0;
        $86 = $pV;
        HEAP8[$86>>0] = $85;
        $87 = $3;
        $88 = (($87) + 1|0);
        $3 = $88;
        $89 = $pV;
        $90 = (($89) + 1|0);
        $pV = $90;
        $91 = $iCol;
        $92 = (($91) + 2)|0;
        $iCol = $92;
        $93 = $pY;
        $94 = (($93) + 2|0);
        $pY = $94;
       }
       $95 = $iRow;
       $96 = (($95) + 2)|0;
       $iRow = $96;
       $97 = $1;
       $98 = (($97) + 84|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = $pY;
       $101 = (($100) + ($99)|0);
       $pY = $101;
      }
      $102 = $uYSize;
      $103 = $pY;
      $104 = (0 - ($102))|0;
      $105 = (($103) + ($104)|0);
      $pY = $105;
      $106 = $uUVSize;
      $107 = $pU;
      $108 = (0 - ($106))|0;
      $109 = (($107) + ($108)|0);
      $pU = $109;
      $110 = $uUVSize;
      $111 = $pV;
      $112 = (0 - ($110))|0;
      $113 = (($111) + ($112)|0);
      $pV = $113;
      $114 = $pS;
      $115 = (($114) + 40|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $pS;
      $118 = $pY;
      $119 = $uYSize;
      $120 = (FUNCTION_TABLE_iiii[$116 & 255]($117,$118,$119)|0);
      $err = $120;
      $121 = ($120|0)<(0);
      if ($121) {
       $122 = $err;
       $err = $122;
       break;
      }
      $123 = $err;
      $err = $123;
      $124 = $pS;
      $125 = (($124) + 40|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = $pS;
      $128 = $pU;
      $129 = $uUVSize;
      $130 = (FUNCTION_TABLE_iiii[$126 & 255]($127,$128,$129)|0);
      $err = $130;
      $131 = ($130|0)<(0);
      if ($131) {
       $132 = $err;
       $err = $132;
       break;
      }
      $133 = $err;
      $err = $133;
      $134 = $pS;
      $135 = (($134) + 40|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $pS;
      $138 = $pV;
      $139 = $uUVSize;
      $140 = (FUNCTION_TABLE_iiii[$136 & 255]($137,$138,$139)|0);
      $err = $140;
      $141 = ($140|0)<(0);
      if ($141) {
       $142 = $err;
       $err = $142;
       break;
      }
      $143 = $err;
      $err = $143;
      $144 = $pY;
      $145 = ($144|0)!=(0|0);
      if ($145) {
       $146 = $pY;
       _free($146);
      }
      $147 = $pU;
      $148 = ($147|0)!=(0|0);
      if ($148) {
       $149 = $pU;
       _free($149);
      }
      $150 = $pV;
      $151 = ($150|0)!=(0|0);
      if ($151) {
       $152 = $pV;
       _free($152);
      }
      $153 = $2;
      $154 = $1;
      $155 = (($154) + 92|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (($156) + ($153))|0;
      HEAP32[$155>>2] = $157;
      break;
     }
    }
   }
   $0 = -1;
   $159 = $0;
   STACKTOP = sp;return ($159|0);
  }
 } while(0);
 $158 = $err;
 $0 = $158;
 $159 = $0;
 STACKTOP = sp;return ($159|0);
}
function _PKImageEncode_WritePixels_YUV422($pIE,$cLine,$pbPixel,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixel = $pbPixel|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $iCol = 0, $iRow = 0;
 var $pS = 0, $pU = 0, $pV = 0, $pY = 0, $uUVSize = 0, $uYSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pIE;
 $2 = $cLine;
 $3 = $pbPixel;
 $4 = $cbStride;
 $err = 0;
 $5 = $1;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $pS = $7;
 $8 = $4;
 $4 = $8;
 $9 = $1;
 $10 = (($9) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 do {
  if ($12) {
   label = 6;
  } else {
   $13 = $1;
   $14 = (_WriteIYUVHeader($13)|0);
   $err = $14;
   $15 = ($14|0)<(0);
   if ($15) {
    $16 = $err;
    $err = $16;
    break;
   }
   $17 = $err;
   $err = $17;
   label = 6;
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $18 = $2;
   $19 = $1;
   $20 = (($19) + 84|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = Math_imul($18, $21)|0;
   $uYSize = $22;
   $23 = $uYSize;
   $24 = $23 >>> 1;
   $uUVSize = $24;
   $25 = $uYSize;
   $26 = (_malloc($25)|0);
   $pY = $26;
   $27 = $uUVSize;
   $28 = (_malloc($27)|0);
   $pU = $28;
   $29 = $uUVSize;
   $30 = (_malloc($29)|0);
   $pV = $30;
   $31 = $pY;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    $33 = $pU;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $35 = $pV;
     $36 = ($35|0)==(0|0);
     if (!($36)) {
      $iRow = 0;
      while(1) {
       $37 = $iRow;
       $38 = $1;
       $39 = (($38) + 88|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($37>>>0)<($40>>>0);
       if (!($41)) {
        break;
       }
       $iCol = 0;
       while(1) {
        $42 = $iCol;
        $43 = $1;
        $44 = (($43) + 84|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($42>>>0)<($45>>>0);
        if (!($46)) {
         break;
        }
        $47 = $3;
        $48 = HEAP8[$47>>0]|0;
        $49 = $pU;
        HEAP8[$49>>0] = $48;
        $50 = $3;
        $51 = (($50) + 1|0);
        $3 = $51;
        $52 = $pU;
        $53 = (($52) + 1|0);
        $pU = $53;
        $54 = $3;
        $55 = HEAP8[$54>>0]|0;
        $56 = $pY;
        HEAP8[$56>>0] = $55;
        $57 = $3;
        $58 = (($57) + 1|0);
        $3 = $58;
        $59 = $pY;
        $60 = (($59) + 1|0);
        $pY = $60;
        $61 = $3;
        $62 = HEAP8[$61>>0]|0;
        $63 = $pV;
        HEAP8[$63>>0] = $62;
        $64 = $3;
        $65 = (($64) + 1|0);
        $3 = $65;
        $66 = $pV;
        $67 = (($66) + 1|0);
        $pV = $67;
        $68 = $3;
        $69 = HEAP8[$68>>0]|0;
        $70 = $pY;
        HEAP8[$70>>0] = $69;
        $71 = $3;
        $72 = (($71) + 1|0);
        $3 = $72;
        $73 = $pY;
        $74 = (($73) + 1|0);
        $pY = $74;
        $75 = $iCol;
        $76 = (($75) + 2)|0;
        $iCol = $76;
       }
       $77 = $iRow;
       $78 = (($77) + 1)|0;
       $iRow = $78;
      }
      $79 = $uYSize;
      $80 = $pY;
      $81 = (0 - ($79))|0;
      $82 = (($80) + ($81)|0);
      $pY = $82;
      $83 = $uUVSize;
      $84 = $pU;
      $85 = (0 - ($83))|0;
      $86 = (($84) + ($85)|0);
      $pU = $86;
      $87 = $uUVSize;
      $88 = $pV;
      $89 = (0 - ($87))|0;
      $90 = (($88) + ($89)|0);
      $pV = $90;
      $91 = $pS;
      $92 = (($91) + 40|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $pS;
      $95 = $pY;
      $96 = $uYSize;
      $97 = (FUNCTION_TABLE_iiii[$93 & 255]($94,$95,$96)|0);
      $err = $97;
      $98 = ($97|0)<(0);
      if ($98) {
       $99 = $err;
       $err = $99;
       break;
      }
      $100 = $err;
      $err = $100;
      $101 = $pS;
      $102 = (($101) + 40|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = $pS;
      $105 = $pU;
      $106 = $uUVSize;
      $107 = (FUNCTION_TABLE_iiii[$103 & 255]($104,$105,$106)|0);
      $err = $107;
      $108 = ($107|0)<(0);
      if ($108) {
       $109 = $err;
       $err = $109;
       break;
      }
      $110 = $err;
      $err = $110;
      $111 = $pS;
      $112 = (($111) + 40|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $pS;
      $115 = $pV;
      $116 = $uUVSize;
      $117 = (FUNCTION_TABLE_iiii[$113 & 255]($114,$115,$116)|0);
      $err = $117;
      $118 = ($117|0)<(0);
      if ($118) {
       $119 = $err;
       $err = $119;
       break;
      }
      $120 = $err;
      $err = $120;
      $121 = $pY;
      $122 = ($121|0)!=(0|0);
      if ($122) {
       $123 = $pY;
       _free($123);
      }
      $124 = $pU;
      $125 = ($124|0)!=(0|0);
      if ($125) {
       $126 = $pU;
       _free($126);
      }
      $127 = $pV;
      $128 = ($127|0)!=(0|0);
      if ($128) {
       $129 = $pV;
       _free($129);
      }
      $130 = $2;
      $131 = $1;
      $132 = (($131) + 92|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (($133) + ($130))|0;
      HEAP32[$132>>2] = $134;
      break;
     }
    }
   }
   $0 = -1;
   $136 = $0;
   STACKTOP = sp;return ($136|0);
  }
 } while(0);
 $135 = $err;
 $0 = $135;
 $136 = $0;
 STACKTOP = sp;return ($136|0);
}
function _PKImageEncode_WritePixels_YUV444($pIE,$cLine,$pbPixel,$cbStride) {
 $pIE = $pIE|0;
 $cLine = $cLine|0;
 $pbPixel = $pbPixel|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $iCol = 0, $iRow = 0, $pS = 0, $pU = 0, $pV = 0, $pY = 0, $uUVSize = 0, $uYSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pIE;
 $2 = $cLine;
 $3 = $pbPixel;
 $4 = $cbStride;
 $err = 0;
 $5 = $1;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $pS = $7;
 $8 = $4;
 $4 = $8;
 $9 = $1;
 $10 = (($9) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 do {
  if ($12) {
   label = 6;
  } else {
   $13 = $1;
   $14 = (_WriteIYUVHeader($13)|0);
   $err = $14;
   $15 = ($14|0)<(0);
   if ($15) {
    $16 = $err;
    $err = $16;
    break;
   }
   $17 = $err;
   $err = $17;
   label = 6;
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $18 = $2;
   $19 = $1;
   $20 = (($19) + 84|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = Math_imul($18, $21)|0;
   $uYSize = $22;
   $23 = $uYSize;
   $uUVSize = $23;
   $24 = $uYSize;
   $25 = (_malloc($24)|0);
   $pY = $25;
   $26 = $uUVSize;
   $27 = (_malloc($26)|0);
   $pU = $27;
   $28 = $uUVSize;
   $29 = (_malloc($28)|0);
   $pV = $29;
   $30 = $pY;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $32 = $pU;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $34 = $pV;
     $35 = ($34|0)==(0|0);
     if (!($35)) {
      $iRow = 0;
      while(1) {
       $36 = $iRow;
       $37 = $1;
       $38 = (($37) + 88|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($36>>>0)<($39>>>0);
       if (!($40)) {
        break;
       }
       $iCol = 0;
       while(1) {
        $41 = $iCol;
        $42 = $1;
        $43 = (($42) + 84|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = ($41>>>0)<($44>>>0);
        if (!($45)) {
         break;
        }
        $46 = $3;
        $47 = HEAP8[$46>>0]|0;
        $48 = $pY;
        HEAP8[$48>>0] = $47;
        $49 = $3;
        $50 = (($49) + 1|0);
        $3 = $50;
        $51 = $pY;
        $52 = (($51) + 1|0);
        $pY = $52;
        $53 = $3;
        $54 = HEAP8[$53>>0]|0;
        $55 = $pU;
        HEAP8[$55>>0] = $54;
        $56 = $3;
        $57 = (($56) + 1|0);
        $3 = $57;
        $58 = $pU;
        $59 = (($58) + 1|0);
        $pU = $59;
        $60 = $3;
        $61 = HEAP8[$60>>0]|0;
        $62 = $pV;
        HEAP8[$62>>0] = $61;
        $63 = $3;
        $64 = (($63) + 1|0);
        $3 = $64;
        $65 = $pV;
        $66 = (($65) + 1|0);
        $pV = $66;
        $67 = $iCol;
        $68 = (($67) + 1)|0;
        $iCol = $68;
       }
       $69 = $iRow;
       $70 = (($69) + 1)|0;
       $iRow = $70;
      }
      $71 = $uYSize;
      $72 = $pY;
      $73 = (0 - ($71))|0;
      $74 = (($72) + ($73)|0);
      $pY = $74;
      $75 = $uUVSize;
      $76 = $pU;
      $77 = (0 - ($75))|0;
      $78 = (($76) + ($77)|0);
      $pU = $78;
      $79 = $uUVSize;
      $80 = $pV;
      $81 = (0 - ($79))|0;
      $82 = (($80) + ($81)|0);
      $pV = $82;
      $83 = $pS;
      $84 = (($83) + 40|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = $pS;
      $87 = $pY;
      $88 = $uYSize;
      $89 = (FUNCTION_TABLE_iiii[$85 & 255]($86,$87,$88)|0);
      $err = $89;
      $90 = ($89|0)<(0);
      if ($90) {
       $91 = $err;
       $err = $91;
       break;
      }
      $92 = $err;
      $err = $92;
      $93 = $pS;
      $94 = (($93) + 40|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $pS;
      $97 = $pU;
      $98 = $uUVSize;
      $99 = (FUNCTION_TABLE_iiii[$95 & 255]($96,$97,$98)|0);
      $err = $99;
      $100 = ($99|0)<(0);
      if ($100) {
       $101 = $err;
       $err = $101;
       break;
      }
      $102 = $err;
      $err = $102;
      $103 = $pS;
      $104 = (($103) + 40|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $pS;
      $107 = $pV;
      $108 = $uUVSize;
      $109 = (FUNCTION_TABLE_iiii[$105 & 255]($106,$107,$108)|0);
      $err = $109;
      $110 = ($109|0)<(0);
      if ($110) {
       $111 = $err;
       $err = $111;
       break;
      }
      $112 = $err;
      $err = $112;
      $113 = $pY;
      $114 = ($113|0)!=(0|0);
      if ($114) {
       $115 = $pY;
       _free($115);
      }
      $116 = $pU;
      $117 = ($116|0)!=(0|0);
      if ($117) {
       $118 = $pU;
       _free($118);
      }
      $119 = $pV;
      $120 = ($119|0)!=(0|0);
      if ($120) {
       $121 = $pV;
       _free($121);
      }
      $122 = $2;
      $123 = $1;
      $124 = (($123) + 92|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = (($125) + ($122))|0;
      HEAP32[$124>>2] = $126;
      break;
     }
    }
   }
   $0 = -1;
   $128 = $0;
   STACKTOP = sp;return ($128|0);
  }
 } while(0);
 $127 = $err;
 $0 = $127;
 $128 = $0;
 STACKTOP = sp;return ($128|0);
}
function _PKImageEncode_Create_IYUV($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $pIE = 0;
 $1 = $0;
 $2 = (_PKImageEncode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $10 = $err;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pIE = $7;
 $8 = $pIE;
 $9 = (($8) + 28|0);
 HEAP32[$9>>2] = 190;
 $10 = $err;
 STACKTOP = sp;return ($10|0);
}
function _PKImageEncode_Create_YUV422($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $pIE = 0;
 $1 = $0;
 $2 = (_PKImageEncode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $10 = $err;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pIE = $7;
 $8 = $pIE;
 $9 = (($8) + 28|0);
 HEAP32[$9>>2] = 191;
 $10 = $err;
 STACKTOP = sp;return ($10|0);
}
function _PKImageEncode_Create_YUV444($ppIE) {
 $ppIE = $ppIE|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pIE = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppIE;
 $err = 0;
 $pIE = 0;
 $1 = $0;
 $2 = (_PKImageEncode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $10 = $err;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pIE = $7;
 $8 = $pIE;
 $9 = (($8) + 28|0);
 HEAP32[$9>>2] = 192;
 $10 = $err;
 STACKTOP = sp;return ($10|0);
}
function _ParseIYUVHeader($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $1;
 $1 = $2;
 $3 = $0;
 $4 = (($3) + 56|0);
 ;HEAP32[$4+0>>2]=HEAP32[16440+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[16440+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[16440+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[16440+12>>2]|0;
 $5 = $0;
 $6 = (($5) + 76|0);
 HEAP32[$6>>2] = 144;
 $7 = $0;
 $8 = (($7) + 72|0);
 HEAP32[$8>>2] = 176;
 $9 = $err;
 STACKTOP = sp;return ($9|0);
}
function _ParseYUV422Header($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $1;
 $1 = $2;
 $3 = $0;
 $4 = (($3) + 56|0);
 ;HEAP32[$4+0>>2]=HEAP32[16456+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[16456+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[16456+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[16456+12>>2]|0;
 $5 = $0;
 $6 = (($5) + 76|0);
 HEAP32[$6>>2] = 144;
 $7 = $0;
 $8 = (($7) + 72|0);
 HEAP32[$8>>2] = 176;
 $9 = $err;
 STACKTOP = sp;return ($9|0);
}
function _ParseYUV444Header($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $1;
 $1 = $2;
 $3 = $0;
 $4 = (($3) + 56|0);
 ;HEAP32[$4+0>>2]=HEAP32[16472+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[16472+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[16472+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[16472+12>>2]|0;
 $5 = $0;
 $6 = (($5) + 76|0);
 HEAP32[$6>>2] = 144;
 $7 = $0;
 $8 = (($7) + 72|0);
 HEAP32[$8>>2] = 176;
 $9 = $err;
 STACKTOP = sp;return ($9|0);
}
function _PKImageDecode_Initialize_IYUV($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_PKImageDecode_Initialize($2,$3)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $6 = $err;
   $err = $6;
  } else {
   $7 = $err;
   $err = $7;
   $8 = $0;
   $9 = $1;
   $10 = (_ParseIYUVHeader($8,$9)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    $12 = $err;
    $err = $12;
    break;
   }
   $13 = $err;
   $err = $13;
  }
 } while(0);
 $14 = $err;
 STACKTOP = sp;return ($14|0);
}
function _PKImageDecode_Initialize_YUV422($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_PKImageDecode_Initialize($2,$3)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $6 = $err;
   $err = $6;
  } else {
   $7 = $err;
   $err = $7;
   $8 = $0;
   $9 = $1;
   $10 = (_ParseYUV422Header($8,$9)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    $12 = $err;
    $err = $12;
    break;
   }
   $13 = $err;
   $err = $13;
  }
 } while(0);
 $14 = $err;
 STACKTOP = sp;return ($14|0);
}
function _PKImageDecode_Initialize_YUV444($pID,$pWS) {
 $pID = $pID|0;
 $pWS = $pWS|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pID;
 $1 = $pWS;
 $err = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_PKImageDecode_Initialize($2,$3)|0);
 $err = $4;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $6 = $err;
   $err = $6;
  } else {
   $7 = $err;
   $err = $7;
   $8 = $0;
   $9 = $1;
   $10 = (_ParseYUV444Header($8,$9)|0);
   $err = $10;
   $11 = ($10|0)<(0);
   if ($11) {
    $12 = $err;
    $err = $12;
    break;
   }
   $13 = $err;
   $err = $13;
  }
 } while(0);
 $14 = $err;
 STACKTOP = sp;return ($14|0);
}
function _PKImageDecode_Copy_IYUV($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $iCol = 0, $iRow = 0, $pS = 0, $pU = 0, $pV = 0, $pY = 0, $uUVSize = 0, $uYSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pID;
 $2 = $pRect;
 $3 = $pb;
 $4 = $cbStride;
 $err = 0;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $pS = $7;
 $8 = $2;
 $2 = $8;
 $9 = $4;
 $4 = $9;
 $10 = $1;
 $11 = (($10) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $uYSize = $16;
 $17 = $uYSize;
 $18 = $17 >>> 2;
 $uUVSize = $18;
 $19 = $uYSize;
 $20 = (_malloc($19)|0);
 $pY = $20;
 $21 = $uUVSize;
 $22 = (_malloc($21)|0);
 $pU = $22;
 $23 = $uUVSize;
 $24 = (_malloc($23)|0);
 $pV = $24;
 $25 = $pY;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  $27 = $pU;
  $28 = ($27|0)==(0|0);
  if (!($28)) {
   $29 = $pV;
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    $31 = $pS;
    $32 = (($31) + 32|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $pS;
    $35 = $pY;
    $36 = $uYSize;
    $37 = (FUNCTION_TABLE_iiii[$33 & 255]($34,$35,$36)|0);
    $err = $37;
    $38 = ($37|0)<(0);
    do {
     if ($38) {
      $39 = $err;
      $err = $39;
     } else {
      $40 = $err;
      $err = $40;
      $41 = $pS;
      $42 = (($41) + 32|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $pS;
      $45 = $pU;
      $46 = $uUVSize;
      $47 = (FUNCTION_TABLE_iiii[$43 & 255]($44,$45,$46)|0);
      $err = $47;
      $48 = ($47|0)<(0);
      if ($48) {
       $49 = $err;
       $err = $49;
       break;
      }
      $50 = $err;
      $err = $50;
      $51 = $pS;
      $52 = (($51) + 32|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = $pS;
      $55 = $pV;
      $56 = $uUVSize;
      $57 = (FUNCTION_TABLE_iiii[$53 & 255]($54,$55,$56)|0);
      $err = $57;
      $58 = ($57|0)<(0);
      if ($58) {
       $59 = $err;
       $err = $59;
       break;
      }
      $60 = $err;
      $err = $60;
      $iRow = 0;
      while(1) {
       $61 = $iRow;
       $62 = $1;
       $63 = (($62) + 76|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($61>>>0)<($64>>>0);
       if (!($65)) {
        break;
       }
       $iCol = 0;
       while(1) {
        $66 = $iCol;
        $67 = $1;
        $68 = (($67) + 72|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($66>>>0)<($69>>>0);
        if (!($70)) {
         break;
        }
        $71 = $pY;
        $72 = HEAP8[$71>>0]|0;
        $73 = $3;
        HEAP8[$73>>0] = $72;
        $74 = $3;
        $75 = (($74) + 1|0);
        $3 = $75;
        $76 = $pY;
        $77 = (($76) + 1|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = $3;
        HEAP8[$79>>0] = $78;
        $80 = $3;
        $81 = (($80) + 1|0);
        $3 = $81;
        $82 = $pY;
        $83 = $1;
        $84 = (($83) + 72|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = (($82) + ($85)|0);
        $87 = HEAP8[$86>>0]|0;
        $88 = $3;
        HEAP8[$88>>0] = $87;
        $89 = $3;
        $90 = (($89) + 1|0);
        $3 = $90;
        $91 = $pY;
        $92 = $1;
        $93 = (($92) + 72|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = (($91) + ($94)|0);
        $96 = (($95) + 1|0);
        $97 = HEAP8[$96>>0]|0;
        $98 = $3;
        HEAP8[$98>>0] = $97;
        $99 = $3;
        $100 = (($99) + 1|0);
        $3 = $100;
        $101 = $pU;
        $102 = HEAP8[$101>>0]|0;
        $103 = $3;
        HEAP8[$103>>0] = $102;
        $104 = $3;
        $105 = (($104) + 1|0);
        $3 = $105;
        $106 = $pU;
        $107 = (($106) + 1|0);
        $pU = $107;
        $108 = $pV;
        $109 = HEAP8[$108>>0]|0;
        $110 = $3;
        HEAP8[$110>>0] = $109;
        $111 = $3;
        $112 = (($111) + 1|0);
        $3 = $112;
        $113 = $pV;
        $114 = (($113) + 1|0);
        $pV = $114;
        $115 = $iCol;
        $116 = (($115) + 2)|0;
        $iCol = $116;
        $117 = $pY;
        $118 = (($117) + 2|0);
        $pY = $118;
       }
       $119 = $iRow;
       $120 = (($119) + 2)|0;
       $iRow = $120;
       $121 = $1;
       $122 = (($121) + 72|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = $pY;
       $125 = (($124) + ($123)|0);
       $pY = $125;
      }
      $126 = $uYSize;
      $127 = $pY;
      $128 = (0 - ($126))|0;
      $129 = (($127) + ($128)|0);
      $pY = $129;
      $130 = $uUVSize;
      $131 = $pU;
      $132 = (0 - ($130))|0;
      $133 = (($131) + ($132)|0);
      $pU = $133;
      $134 = $uUVSize;
      $135 = $pV;
      $136 = (0 - ($134))|0;
      $137 = (($135) + ($136)|0);
      $pV = $137;
      $138 = $pY;
      $139 = ($138|0)!=(0|0);
      if ($139) {
       $140 = $pY;
       _free($140);
      }
      $141 = $pU;
      $142 = ($141|0)!=(0|0);
      if ($142) {
       $143 = $pU;
       _free($143);
      }
      $144 = $pV;
      $145 = ($144|0)!=(0|0);
      if ($145) {
       $146 = $pV;
       _free($146);
      }
     }
    } while(0);
    $147 = $err;
    $0 = $147;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
  }
 }
 $0 = -1;
 $148 = $0;
 STACKTOP = sp;return ($148|0);
}
function _PKImageDecode_Copy_YUV422($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $iCol = 0, $iRow = 0, $pS = 0, $pU = 0, $pV = 0, $pY = 0, $uUVSize = 0, $uYSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pID;
 $2 = $pRect;
 $3 = $pb;
 $4 = $cbStride;
 $err = 0;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $pS = $7;
 $8 = $2;
 $2 = $8;
 $9 = $4;
 $4 = $9;
 $10 = $1;
 $11 = (($10) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $uYSize = $16;
 $17 = $uYSize;
 $18 = $17 >>> 1;
 $uUVSize = $18;
 $19 = $uYSize;
 $20 = (_malloc($19)|0);
 $pY = $20;
 $21 = $uUVSize;
 $22 = (_malloc($21)|0);
 $pU = $22;
 $23 = $uUVSize;
 $24 = (_malloc($23)|0);
 $pV = $24;
 $25 = $pY;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  $27 = $pU;
  $28 = ($27|0)==(0|0);
  if (!($28)) {
   $29 = $pV;
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    $31 = $pS;
    $32 = (($31) + 32|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $pS;
    $35 = $pY;
    $36 = $uYSize;
    $37 = (FUNCTION_TABLE_iiii[$33 & 255]($34,$35,$36)|0);
    $err = $37;
    $38 = ($37|0)<(0);
    do {
     if ($38) {
      $39 = $err;
      $err = $39;
     } else {
      $40 = $err;
      $err = $40;
      $41 = $pS;
      $42 = (($41) + 32|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $pS;
      $45 = $pU;
      $46 = $uUVSize;
      $47 = (FUNCTION_TABLE_iiii[$43 & 255]($44,$45,$46)|0);
      $err = $47;
      $48 = ($47|0)<(0);
      if ($48) {
       $49 = $err;
       $err = $49;
       break;
      }
      $50 = $err;
      $err = $50;
      $51 = $pS;
      $52 = (($51) + 32|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = $pS;
      $55 = $pV;
      $56 = $uUVSize;
      $57 = (FUNCTION_TABLE_iiii[$53 & 255]($54,$55,$56)|0);
      $err = $57;
      $58 = ($57|0)<(0);
      if ($58) {
       $59 = $err;
       $err = $59;
       break;
      }
      $60 = $err;
      $err = $60;
      $iRow = 0;
      while(1) {
       $61 = $iRow;
       $62 = $1;
       $63 = (($62) + 76|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($61>>>0)<($64>>>0);
       if (!($65)) {
        break;
       }
       $iCol = 0;
       while(1) {
        $66 = $iCol;
        $67 = $1;
        $68 = (($67) + 72|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($66>>>0)<($69>>>0);
        if (!($70)) {
         break;
        }
        $71 = $pU;
        $72 = HEAP8[$71>>0]|0;
        $73 = $3;
        HEAP8[$73>>0] = $72;
        $74 = $3;
        $75 = (($74) + 1|0);
        $3 = $75;
        $76 = $pU;
        $77 = (($76) + 1|0);
        $pU = $77;
        $78 = $pY;
        $79 = HEAP8[$78>>0]|0;
        $80 = $3;
        HEAP8[$80>>0] = $79;
        $81 = $3;
        $82 = (($81) + 1|0);
        $3 = $82;
        $83 = $pY;
        $84 = (($83) + 1|0);
        $pY = $84;
        $85 = $pV;
        $86 = HEAP8[$85>>0]|0;
        $87 = $3;
        HEAP8[$87>>0] = $86;
        $88 = $3;
        $89 = (($88) + 1|0);
        $3 = $89;
        $90 = $pV;
        $91 = (($90) + 1|0);
        $pV = $91;
        $92 = $pY;
        $93 = HEAP8[$92>>0]|0;
        $94 = $3;
        HEAP8[$94>>0] = $93;
        $95 = $3;
        $96 = (($95) + 1|0);
        $3 = $96;
        $97 = $pY;
        $98 = (($97) + 1|0);
        $pY = $98;
        $99 = $iCol;
        $100 = (($99) + 2)|0;
        $iCol = $100;
       }
       $101 = $iRow;
       $102 = (($101) + 1)|0;
       $iRow = $102;
      }
      $103 = $uYSize;
      $104 = $pY;
      $105 = (0 - ($103))|0;
      $106 = (($104) + ($105)|0);
      $pY = $106;
      $107 = $uUVSize;
      $108 = $pU;
      $109 = (0 - ($107))|0;
      $110 = (($108) + ($109)|0);
      $pU = $110;
      $111 = $uUVSize;
      $112 = $pV;
      $113 = (0 - ($111))|0;
      $114 = (($112) + ($113)|0);
      $pV = $114;
      $115 = $pY;
      $116 = ($115|0)!=(0|0);
      if ($116) {
       $117 = $pY;
       _free($117);
      }
      $118 = $pU;
      $119 = ($118|0)!=(0|0);
      if ($119) {
       $120 = $pU;
       _free($120);
      }
      $121 = $pV;
      $122 = ($121|0)!=(0|0);
      if ($122) {
       $123 = $pV;
       _free($123);
      }
     }
    } while(0);
    $124 = $err;
    $0 = $124;
    $125 = $0;
    STACKTOP = sp;return ($125|0);
   }
  }
 }
 $0 = -1;
 $125 = $0;
 STACKTOP = sp;return ($125|0);
}
function _PKImageDecode_Copy_YUV444($pID,$pRect,$pb,$cbStride) {
 $pID = $pID|0;
 $pRect = $pRect|0;
 $pb = $pb|0;
 $cbStride = $cbStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $iCol = 0;
 var $iRow = 0, $pS = 0, $pU = 0, $pV = 0, $pY = 0, $uUVSize = 0, $uYSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pID;
 $2 = $pRect;
 $3 = $pb;
 $4 = $cbStride;
 $err = 0;
 $5 = $1;
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $pS = $7;
 $8 = $2;
 $2 = $8;
 $9 = $4;
 $4 = $9;
 $10 = $1;
 $11 = (($10) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $uYSize = $16;
 $17 = $uYSize;
 $uUVSize = $17;
 $18 = $uYSize;
 $19 = (_malloc($18)|0);
 $pY = $19;
 $20 = $uUVSize;
 $21 = (_malloc($20)|0);
 $pU = $21;
 $22 = $uUVSize;
 $23 = (_malloc($22)|0);
 $pV = $23;
 $24 = $pY;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  $26 = $pU;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   $28 = $pV;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    $30 = $pS;
    $31 = (($30) + 32|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $pS;
    $34 = $pY;
    $35 = $uYSize;
    $36 = (FUNCTION_TABLE_iiii[$32 & 255]($33,$34,$35)|0);
    $err = $36;
    $37 = ($36|0)<(0);
    do {
     if ($37) {
      $38 = $err;
      $err = $38;
     } else {
      $39 = $err;
      $err = $39;
      $40 = $pS;
      $41 = (($40) + 32|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = $pS;
      $44 = $pU;
      $45 = $uUVSize;
      $46 = (FUNCTION_TABLE_iiii[$42 & 255]($43,$44,$45)|0);
      $err = $46;
      $47 = ($46|0)<(0);
      if ($47) {
       $48 = $err;
       $err = $48;
       break;
      }
      $49 = $err;
      $err = $49;
      $50 = $pS;
      $51 = (($50) + 32|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $pS;
      $54 = $pV;
      $55 = $uUVSize;
      $56 = (FUNCTION_TABLE_iiii[$52 & 255]($53,$54,$55)|0);
      $err = $56;
      $57 = ($56|0)<(0);
      if ($57) {
       $58 = $err;
       $err = $58;
       break;
      }
      $59 = $err;
      $err = $59;
      $iRow = 0;
      while(1) {
       $60 = $iRow;
       $61 = $1;
       $62 = (($61) + 76|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($60>>>0)<($63>>>0);
       if (!($64)) {
        break;
       }
       $iCol = 0;
       while(1) {
        $65 = $iCol;
        $66 = $1;
        $67 = (($66) + 72|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($65>>>0)<($68>>>0);
        if (!($69)) {
         break;
        }
        $70 = $pY;
        $71 = HEAP8[$70>>0]|0;
        $72 = $3;
        HEAP8[$72>>0] = $71;
        $73 = $3;
        $74 = (($73) + 1|0);
        $3 = $74;
        $75 = $pY;
        $76 = (($75) + 1|0);
        $pY = $76;
        $77 = $pU;
        $78 = HEAP8[$77>>0]|0;
        $79 = $3;
        HEAP8[$79>>0] = $78;
        $80 = $3;
        $81 = (($80) + 1|0);
        $3 = $81;
        $82 = $pU;
        $83 = (($82) + 1|0);
        $pU = $83;
        $84 = $pV;
        $85 = HEAP8[$84>>0]|0;
        $86 = $3;
        HEAP8[$86>>0] = $85;
        $87 = $3;
        $88 = (($87) + 1|0);
        $3 = $88;
        $89 = $pV;
        $90 = (($89) + 1|0);
        $pV = $90;
        $91 = $iCol;
        $92 = (($91) + 1)|0;
        $iCol = $92;
       }
       $93 = $iRow;
       $94 = (($93) + 1)|0;
       $iRow = $94;
      }
      $95 = $uYSize;
      $96 = $pY;
      $97 = (0 - ($95))|0;
      $98 = (($96) + ($97)|0);
      $pY = $98;
      $99 = $uUVSize;
      $100 = $pU;
      $101 = (0 - ($99))|0;
      $102 = (($100) + ($101)|0);
      $pU = $102;
      $103 = $uUVSize;
      $104 = $pV;
      $105 = (0 - ($103))|0;
      $106 = (($104) + ($105)|0);
      $pV = $106;
      $107 = $pY;
      $108 = ($107|0)!=(0|0);
      if ($108) {
       $109 = $pY;
       _free($109);
      }
      $110 = $pU;
      $111 = ($110|0)!=(0|0);
      if ($111) {
       $112 = $pU;
       _free($112);
      }
      $113 = $pV;
      $114 = ($113|0)!=(0|0);
      if ($114) {
       $115 = $pV;
       _free($115);
      }
     }
    } while(0);
    $116 = $err;
    $0 = $116;
    $117 = $0;
    STACKTOP = sp;return ($117|0);
   }
  }
 }
 $0 = -1;
 $117 = $0;
 STACKTOP = sp;return ($117|0);
}
function _PKImageDecode_Create_IYUV($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKImageDecode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 193;
 $9 = $pID;
 $10 = (($9) + 28|0);
 HEAP32[$10>>2] = 194;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _PKImageDecode_Create_YUV422($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKImageDecode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 195;
 $9 = $pID;
 $10 = (($9) + 28|0);
 HEAP32[$10>>2] = 196;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _PKImageDecode_Create_YUV444($ppID) {
 $ppID = $ppID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ppID;
 $err = 0;
 $pID = 0;
 $1 = $0;
 $2 = (_PKImageDecode_Create($1)|0);
 $err = $2;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $err;
  $err = $4;
  $11 = $err;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $err;
 $err = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $pID = $7;
 $8 = $pID;
 HEAP32[$8>>2] = 197;
 $9 = $pID;
 $10 = (($9) + 28|0);
 HEAP32[$10>>2] = 198;
 $11 = $err;
 STACKTOP = sp;return ($11|0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 30400 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (30192 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L17: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L17;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$4 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$lcssa18 = 0, $$matches$0 = 0, $$not = 0, $$pre = 0, $$pre$phi241Z2D = 0, $$pre221 = 0, $$pre234 = 0, $$pre235 = 0, $$pre236 = 0, $$pre237 = 0, $$pre238 = 0, $$pre239 = 0, $$pre240 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$027 = 0, $dest$0 = 0, $factor = 0;
 var $factor14 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph46 = 0, $i$0$ph46$lcssa = 0, $i$0$ph46$us53 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit3 = 0, $isdigit320 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp219 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0130 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond5 = 0, $or$cond6 = 0, $p$0136 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$321 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0;
 var $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0135 = 0, $pos$1 = 0, $pos$2 = 0, $s$0128 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0;
 var $wcs$0129 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph160 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $width$0$lcssa = 0, $width$022 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp;
 $scanset = sp + 33|0;
 $wc = sp + 8|0;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0130 = 0;$p$0136 = $fmt;$pos$0135 = 0;$s$0128 = 0;$wcs$0129 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0136>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0136) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $65 = (($p$0136) + 2|0);
        $dest$0 = 0;$p$2 = $65;
       } else if ((($45<<24>>24) == 37)) {
        break L21;
       } else {
        $66 = $45&255;
        $isdigittmp = (($66) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $67 = (($p$0136) + 2|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(36);
         if ($69) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $70 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $71 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $72 = (($i$0$i) + -1)|0;
           if ($70) {
            $i$0$i = $72;
           } else {
            break;
           }
          }
          $73 = (($p$0136) + 3|0);
          $dest$0 = $71;$p$2 = $73;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $74 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $74;$p$2 = $44;
       }
      } while(0);
      $75 = HEAP8[$p$2>>0]|0;
      $76 = $75&255;
      $isdigittmp219 = (($76) + -48)|0;
      $isdigit320 = ($isdigittmp219>>>0)<(10);
      if ($isdigit320) {
       $80 = $76;$p$321 = $p$2;$width$022 = 0;
       while(1) {
        $77 = ($width$022*10)|0;
        $78 = (($77) + -48)|0;
        $79 = (($78) + ($80))|0;
        $81 = (($p$321) + 1|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82&255;
        $isdigittmp2 = (($83) + -48)|0;
        $isdigit3 = ($isdigittmp2>>>0)<(10);
        if ($isdigit3) {
         $80 = $83;$p$321 = $81;$width$022 = $79;
        } else {
         $$lcssa18 = $82;$p$3$lcssa = $81;$width$0$lcssa = $79;
         break;
        }
       }
      } else {
       $$lcssa18 = $75;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $84 = ($$lcssa18<<24>>24)==(109);
      if ($84) {
       $85 = ($dest$0|0)!=(0|0);
       $86 = $85&1;
       $87 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$87>>0]|0;
       $90 = $$pre;$alloc$0 = $86;$p$4 = $87;$s$1 = 0;$wcs$1 = 0;
      } else {
       $90 = $$lcssa18;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0128;$wcs$1 = $wcs$0129;
      }
      $88 = (($p$4) + 1|0);
      $89 = $90&255;
      switch ($89|0) {
      case 106:  {
       $p$5 = $88;$size$0 = 3;
       break;
      }
      case 76:  {
       $p$5 = $88;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 104:  {
       $91 = HEAP8[$88>>0]|0;
       $92 = ($91<<24>>24)==(104);
       $93 = (($p$4) + 2|0);
       $$7 = $92 ? $93 : $88;
       $$8 = $92 ? -2 : -1;
       $p$5 = $$7;$size$0 = $$8;
       break;
      }
      case 108:  {
       $94 = HEAP8[$88>>0]|0;
       $95 = ($94<<24>>24)==(108);
       $96 = (($p$4) + 2|0);
       $$9 = $95 ? $96 : $88;
       $$10 = $95 ? 3 : 1;
       $p$5 = $$9;$size$0 = $$10;
       break;
      }
      case 116: case 122:  {
       $p$5 = $88;$size$0 = 1;
       break;
      }
      default: {
       $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 162;
       break L4;
      }
      }
      $97 = HEAP8[$p$5>>0]|0;
      $98 = $97&255;
      $99 = $98 & 47;
      $100 = ($99|0)==(3);
      $101 = $98 | 32;
      $$ = $100 ? $101 : $98;
      $$size$0 = $100 ? 1 : $size$0;
      if ((($$|0) == 99)) {
       $102 = ($width$0$lcssa|0)<(1);
       $$width$0 = $102 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0135;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $103 = ($pos$0135|0)<(0);
       $104 = $103 << 31 >> 31;
       $105 = ($dest$0|0)==(0|0);
       if ($105) {
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0135;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $107 = $pos$0135&65535;
        HEAP16[$dest$0>>1] = $107;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0135;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -2:  {
        $106 = $pos$0135&255;
        HEAP8[$dest$0>>0] = $106;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $108 = $dest$0;
        $109 = $108;
        HEAP32[$109>>2] = $pos$0135;
        $110 = (($108) + 4)|0;
        $111 = $110;
        HEAP32[$111>>2] = $104;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0135;$width$1 = $width$0$lcssa;
      } else {
       ___shlim($f,0);
       while(1) {
        $112 = HEAP32[$3>>2]|0;
        $113 = HEAP32[$4>>2]|0;
        $114 = ($112>>>0)<($113>>>0);
        if ($114) {
         $115 = (($112) + 1|0);
         HEAP32[$3>>2] = $115;
         $116 = HEAP8[$112>>0]|0;
         $117 = $116&255;
         $119 = $117;
        } else {
         $118 = (___shgetc($f)|0);
         $119 = $118;
        }
        $120 = (_isspace($119)|0);
        $121 = ($120|0)==(0);
        if ($121) {
         break;
        }
       }
       $122 = HEAP32[$4>>2]|0;
       $123 = ($122|0)==(0|0);
       $$pre234 = HEAP32[$3>>2]|0;
       if ($123) {
        $128 = $$pre234;
       } else {
        $124 = (($$pre234) + -1|0);
        HEAP32[$3>>2] = $124;
        $128 = $124;
       }
       $125 = HEAP32[$5>>2]|0;
       $126 = HEAP32[$6>>2]|0;
       $127 = $128;
       $129 = $126;
       $130 = (($125) + ($pos$0135))|0;
       $131 = (($130) + ($127))|0;
       $132 = (($131) - ($129))|0;
       $pos$1 = $132;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $133 = HEAP32[$3>>2]|0;
      $134 = HEAP32[$4>>2]|0;
      $135 = ($133>>>0)<($134>>>0);
      if ($135) {
       $136 = (($133) + 1|0);
       HEAP32[$3>>2] = $136;
       $140 = $134;
      } else {
       $137 = (___shgetc($f)|0);
       $138 = ($137|0)<(0);
       if ($138) {
        $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $$pre235 = HEAP32[$4>>2]|0;
       $140 = $$pre235;
      }
      $139 = ($140|0)==(0|0);
      if (!($139)) {
       $141 = HEAP32[$3>>2]|0;
       $142 = (($141) + -1|0);
       HEAP32[$3>>2] = $142;
      }
      L78: do {
       switch ($$|0) {
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 91: case 99: case 115:  {
        $143 = ($$|0)==(99);
        $144 = $$ & 239;
        $145 = ($144|0)==(99);
        L83: do {
         if ($145) {
          $146 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($146) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $147 = (($p$5) + 1|0);
          $148 = HEAP8[$147>>0]|0;
          $149 = ($148<<24>>24)==(94);
          $150 = (($p$5) + 2|0);
          $invert$0 = $149&1;
          $p$6 = $149 ? $150 : $147;
          $151 = $149&1;
          _memset(($scanset|0),($151|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $152 = HEAP8[$p$6>>0]|0;
          if ((($152<<24>>24) == 93)) {
           $156 = (($p$6) + 1|0);
           $157 = $invert$0 ^ 1;
           $158 = $157&255;
           HEAP8[$11>>0] = $158;
           $$pre$phi241Z2D = $158;$p$7$ph = $156;
          } else if ((($152<<24>>24) == 45)) {
           $153 = (($p$6) + 1|0);
           $154 = $invert$0 ^ 1;
           $155 = $154&255;
           HEAP8[$10>>0] = $155;
           $$pre$phi241Z2D = $155;$p$7$ph = $153;
          } else {
           $$pre239 = $invert$0 ^ 1;
           $$pre240 = $$pre239&255;
           $$pre$phi241Z2D = $$pre240;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $159 = HEAP8[$p$7>>0]|0;
           if ((($159<<24>>24) == 45)) {
            $160 = (($p$7) + 1|0);
            $161 = HEAP8[$160>>0]|0;
            if ((($161<<24>>24) == 93) | (($161<<24>>24) == 0)) {
             $172 = 45;$p$8 = $p$7;
            } else {
             $162 = (($p$7) + -1|0);
             $163 = HEAP8[$162>>0]|0;
             $164 = ($163&255)<($161&255);
             if ($164) {
              $165 = $163&255;
              $c$027 = $165;
              while(1) {
               $166 = (($c$027) + 1)|0;
               $167 = (($scanset) + ($166)|0);
               HEAP8[$167>>0] = $$pre$phi241Z2D;
               $168 = HEAP8[$160>>0]|0;
               $169 = $168&255;
               $170 = ($166|0)<($169|0);
               if ($170) {
                $c$027 = $166;
               } else {
                $172 = $168;$p$8 = $160;
                break;
               }
              }
             } else {
              $172 = $161;$p$8 = $160;
             }
            }
           } else if ((($159<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L83;
           } else if ((($159<<24>>24) == 0)) {
            $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 162;
            break L4;
           } else {
            $172 = $159;$p$8 = $p$7;
           }
           $171 = $172&255;
           $173 = (($171) + 1)|0;
           $174 = (($scanset) + ($173)|0);
           HEAP8[$174>>0] = $$pre$phi241Z2D;
           $175 = (($p$8) + 1|0);
           $p$7 = $175;
          }
         }
        } while(0);
        $176 = (($width$1) + 1)|0;
        $$4 = $143 ? $176 : 31;
        $177 = ($$size$0|0)==(1);
        $178 = ($alloc$0|0)!=(0);
        L102: do {
         if ($177) {
          if ($178) {
           $179 = $$4 << 2;
           $180 = (_malloc($179)|0);
           $181 = ($180|0)==(0|0);
           if ($181) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $180;
            label = 162;
            break L4;
           } else {
            $wcs$2 = $180;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$4;$wcs$3$ph = $wcs$2;
          L108: while(1) {
           $182 = ($wcs$3$ph|0)==(0|0);
           if ($182) {
            while(1) {
             $185 = HEAP32[$3>>2]|0;
             $196 = HEAP32[$4>>2]|0;
             $197 = ($185>>>0)<($196>>>0);
             if ($197) {
              $184 = (($185) + 1|0);
              HEAP32[$3>>2] = $184;
              $186 = HEAP8[$185>>0]|0;
              $187 = $186&255;
              $189 = $187;
             } else {
              $183 = (___shgetc($f)|0);
              $189 = $183;
             }
             $188 = (($189) + 1)|0;
             $190 = (($scanset) + ($188)|0);
             $191 = HEAP8[$190>>0]|0;
             $192 = ($191<<24>>24)==(0);
             if ($192) {
              $i$0$ph46$lcssa = $i$0$ph;$wcs$3$ph160 = 0;
              break L108;
             }
             $193 = $189&255;
             HEAP8[$0>>0] = $193;
             $194 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($194|0) == -2)) {
              continue;
             } else if ((($194|0) == -1)) {
              $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
              label = 162;
              break L4;
             }
             $195 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $178 & $195;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($178) {
             $i$0$ph46$us53 = $i$0$ph;
            } else {
             $i$0$ph46 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $200 = HEAP32[$3>>2]|0;
              $214 = HEAP32[$4>>2]|0;
              $215 = ($200>>>0)<($214>>>0);
              if ($215) {
               $199 = (($200) + 1|0);
               HEAP32[$3>>2] = $199;
               $201 = HEAP8[$200>>0]|0;
               $202 = $201&255;
               $204 = $202;
              } else {
               $198 = (___shgetc($f)|0);
               $204 = $198;
              }
              $203 = (($204) + 1)|0;
              $205 = (($scanset) + ($203)|0);
              $206 = HEAP8[$205>>0]|0;
              $207 = ($206<<24>>24)==(0);
              if ($207) {
               $i$0$ph46$lcssa = $i$0$ph46$us53;$wcs$3$ph160 = $wcs$3$ph;
               break L108;
              }
              $208 = $204&255;
              HEAP8[$0>>0] = $208;
              $209 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($209|0) == -1)) {
               $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($209|0) == -2))) {
               break;
              }
             }
             $210 = HEAP32[$wc>>2]|0;
             $211 = (($i$0$ph46$us53) + 1)|0;
             $212 = (($wcs$3$ph) + ($i$0$ph46$us53<<2)|0);
             HEAP32[$212>>2] = $210;
             $213 = ($211|0)==($k$0$ph|0);
             if ($213) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph46$us53 = $211;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $233 = $factor | 1;
           $234 = $233 << 2;
           $235 = (_realloc($wcs$3$ph,$234)|0);
           $236 = ($235|0)==(0|0);
           if ($236) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $233;$wcs$3$ph = $235;
          }
          L132: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $216 = HEAP32[$3>>2]|0;
              $217 = HEAP32[$4>>2]|0;
              $218 = ($216>>>0)<($217>>>0);
              if ($218) {
               $219 = (($216) + 1|0);
               HEAP32[$3>>2] = $219;
               $220 = HEAP8[$216>>0]|0;
               $221 = $220&255;
               $224 = $221;
              } else {
               $222 = (___shgetc($f)|0);
               $224 = $222;
              }
              $223 = (($224) + 1)|0;
              $225 = (($scanset) + ($223)|0);
              $226 = HEAP8[$225>>0]|0;
              $227 = ($226<<24>>24)==(0);
              if ($227) {
               $i$0$ph46$lcssa = $i$0$ph46;$wcs$3$ph160 = $wcs$3$ph;
               break L132;
              }
              $228 = $224&255;
              HEAP8[$0>>0] = $228;
              $229 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($229|0) == -1)) {
               $alloc$1 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($229|0) == -2))) {
               break;
              }
             }
             $230 = HEAP32[$wc>>2]|0;
             $231 = (($i$0$ph46) + 1)|0;
             $232 = (($wcs$3$ph) + ($i$0$ph46<<2)|0);
             HEAP32[$232>>2] = $230;
             $i$0$ph46 = $231;
             label = 98;
            }
           }
          } while(0);
          $237 = (_mbsinit($st)|0);
          $238 = ($237|0)==(0);
          if ($238) {
           $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph160;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph46$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph160;
          }
         } else {
          if ($178) {
           $239 = (_malloc($$4)|0);
           $240 = ($239|0)==(0|0);
           if ($240) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$4;$s$2$ph = $239;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $241 = HEAP32[$3>>2]|0;
             $242 = HEAP32[$4>>2]|0;
             $243 = ($241>>>0)<($242>>>0);
             if ($243) {
              $244 = (($241) + 1|0);
              HEAP32[$3>>2] = $244;
              $245 = HEAP8[$241>>0]|0;
              $246 = $245&255;
              $249 = $246;
             } else {
              $247 = (___shgetc($f)|0);
              $249 = $247;
             }
             $248 = (($249) + 1)|0;
             $250 = (($scanset) + ($248)|0);
             $251 = HEAP8[$250>>0]|0;
             $252 = ($251<<24>>24)==(0);
             if ($252) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L102;
             }
             $253 = $249&255;
             $254 = (($i$2) + 1)|0;
             $255 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$255>>0] = $253;
             $256 = ($254|0)==($k$1$ph|0);
             if ($256) {
              break;
             } else {
              $i$2 = $254;
             }
            }
            $factor14 = $k$1$ph << 1;
            $257 = $factor14 | 1;
            $258 = (_realloc($s$2$ph,$257)|0);
            $259 = ($258|0)==(0|0);
            if ($259) {
             $alloc$1 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $257;$s$2$ph = $258;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $260 = ($dest$0|0)==(0|0);
          if ($260) {
           $278 = $140;
           while(1) {
            $276 = HEAP32[$3>>2]|0;
            $277 = ($276>>>0)<($278>>>0);
            if ($277) {
             $279 = (($276) + 1|0);
             HEAP32[$3>>2] = $279;
             $280 = HEAP8[$276>>0]|0;
             $281 = $280&255;
             $284 = $281;
            } else {
             $282 = (___shgetc($f)|0);
             $284 = $282;
            }
            $283 = (($284) + 1)|0;
            $285 = (($scanset) + ($283)|0);
            $286 = HEAP8[$285>>0]|0;
            $287 = ($286<<24>>24)==(0);
            if ($287) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L102;
            }
            $$pre237 = HEAP32[$4>>2]|0;
            $278 = $$pre237;
           }
          } else {
           $263 = $140;$i$3 = 0;
           while(1) {
            $261 = HEAP32[$3>>2]|0;
            $262 = ($261>>>0)<($263>>>0);
            if ($262) {
             $264 = (($261) + 1|0);
             HEAP32[$3>>2] = $264;
             $265 = HEAP8[$261>>0]|0;
             $266 = $265&255;
             $269 = $266;
            } else {
             $267 = (___shgetc($f)|0);
             $269 = $267;
            }
            $268 = (($269) + 1)|0;
            $270 = (($scanset) + ($268)|0);
            $271 = HEAP8[$270>>0]|0;
            $272 = ($271<<24>>24)==(0);
            if ($272) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L102;
            }
            $273 = $269&255;
            $274 = (($i$3) + 1)|0;
            $275 = (($dest$0) + ($i$3)|0);
            HEAP8[$275>>0] = $273;
            $$pre221 = HEAP32[$4>>2]|0;
            $263 = $$pre221;$i$3 = $274;
           }
          }
         }
        } while(0);
        $288 = HEAP32[$4>>2]|0;
        $289 = ($288|0)==(0|0);
        $$pre236 = HEAP32[$3>>2]|0;
        if ($289) {
         $294 = $$pre236;
        } else {
         $290 = (($$pre236) + -1|0);
         HEAP32[$3>>2] = $290;
         $294 = $290;
        }
        $291 = HEAP32[$5>>2]|0;
        $292 = HEAP32[$6>>2]|0;
        $293 = $294;
        $295 = $292;
        $296 = (($293) - ($295))|0;
        $297 = (($296) + ($291))|0;
        $298 = ($297|0)==(0);
        if ($298) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        $$not = $143 ^ 1;
        $299 = ($297|0)==($width$1|0);
        $or$cond5 = $299 | $$not;
        if (!($or$cond5)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        do {
         if ($178) {
          if ($177) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($143) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $300 = ($wcs$4|0)==(0|0);
         if (!($300)) {
          $301 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$301>>2] = 0;
         }
         $302 = ($s$3|0)==(0|0);
         if ($302) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $303 = (($s$3) + ($i$4)|0);
          HEAP8[$303>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $322 = (+___floatscan($f,$$size$0,0));
        $323 = HEAP32[$5>>2]|0;
        $324 = HEAP32[$3>>2]|0;
        $325 = HEAP32[$6>>2]|0;
        $326 = $324;
        $327 = $325;
        $328 = (($327) - ($326))|0;
        $329 = ($323|0)==($328|0);
        if ($329) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $330 = ($dest$0|0)==(0|0);
        if ($330) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 0)) {
          $331 = $322;
          HEAPF32[$dest$0>>2] = $331;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L197: do {
       if ((label|0) == 144) {
        label = 0;
        $304 = (___intscan($f,$base$0,0,-1,-1)|0);
        $305 = tempRet0;
        $306 = HEAP32[$5>>2]|0;
        $307 = HEAP32[$3>>2]|0;
        $308 = HEAP32[$6>>2]|0;
        $309 = $307;
        $310 = $308;
        $311 = (($310) - ($309))|0;
        $312 = ($306|0)==($311|0);
        if ($312) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $313 = ($$|0)!=(112);
        $314 = ($dest$0|0)==(0|0);
        $or$cond6 = $313 | $314;
        if (!($or$cond6)) {
         $315 = $304;
         HEAP32[$dest$0>>2] = $315;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        if ($314) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -1:  {
          $317 = $304&65535;
          HEAP16[$dest$0>>1] = $317;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case -2:  {
          $316 = $304&255;
          HEAP8[$dest$0>>0] = $316;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 3:  {
          $318 = $dest$0;
          $319 = $318;
          HEAP32[$319>>2] = $304;
          $320 = (($318) + 4)|0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
         }
         }
        }
       }
      } while(0);
      $332 = HEAP32[$5>>2]|0;
      $333 = HEAP32[$3>>2]|0;
      $334 = HEAP32[$6>>2]|0;
      $335 = $333;
      $336 = $334;
      $337 = (($332) + ($pos$1))|0;
      $338 = (($337) + ($335))|0;
      $339 = (($338) - ($336))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $340 = $not$&1;
      $matches$0$ = (($340) + ($matches$0130))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $339;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0136) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     label = 19;
     break L4;
    }
    $64 = (($pos$0135) + 1)|0;
    $matches$1 = $matches$0130;$p$11 = $47;$pos$2 = $64;$s$5 = $s$0128;$wcs$6 = $wcs$0129;
   } else {
    $p$1 = $p$0136;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre238 = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre238;
    } else {
     $33 = (($$pre238) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0135))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0130;$p$11 = $p$1;$pos$2 = $41;$s$5 = $s$0128;$wcs$6 = $wcs$0129;
   }
  } while(0);
  $341 = (($p$11) + 1|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = ($342<<24>>24)==(0);
  if ($343) {
   $matches$3 = $matches$1;
   label = 165;
   break;
  } else {
   $13 = $342;$matches$0130 = $matches$1;$p$0136 = $341;$pos$0135 = $pos$2;$s$0128 = $s$5;$wcs$0129 = $wcs$6;
  }
 }
 if ((label|0) == 165) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($58|0)<(0);
  if ($63) {
   $alloc$1 = 0;$s$6 = $s$0128;$wcs$7 = $wcs$0129;
   label = 162;
  } else {
   $matches$3 = $matches$0130;
   STACKTOP = sp;return ($matches$3|0);
  }
 }
 if ((label|0) == 162) {
  $344 = ($matches$0130|0)==(0);
  $345 = $344 << 31 >> 31;
  $$matches$0 = (($345) + ($matches$0130))|0;
  $alloc$2 = $alloc$1;$matches$2 = $$matches$0;$s$7 = $s$6;$wcs$8 = $wcs$7;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$7);
 _free($wcs$8);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 199;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $9 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $8 = $9;
    $10 = $8 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $9;
     break L5;
    } else {
     $$026 = $9;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i16 = 0, $$$i8 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i15 = 0, $$0$lcssa$i7 = 0, $$01$i = 0, $$02$i = 0, $$02$i11 = 0, $$02$i5 = 0, $$02$us$i = 0, $$lcssa$i = 0, $$lcssa$i14 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i10 = 0, $ip$0$ph78$i = 0, $ip$0$ph78146$i = 0;
 var $ip$0$ph81$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph58$i = 0, $ip$1$ph61$i = 0, $jp$0$ph22$ph72$i = 0, $jp$0$ph2266$i = 0, $jp$0$ph82$i = 0, $jp$1$ph11$ph52$i = 0, $jp$1$ph1146$i = 0, $jp$1$ph62$i = 0, $k$030$i = 0, $k$117$i = 0, $k$2$us$i = 0, $k$37$i = 0, $k$37$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $l$039$i = 0, $mem$0$us$i = 0;
 var $notlhs$i = 0, $notrhs$us$i = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond3$us$i = 0, $p$0$ph$ph70$i = 0, $p$0$ph$ph70150$i = 0, $p$0$ph$ph73$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph50$i = 0, $p$1$ph$ph53$i = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $9&255;
  $21 = $19 << 8;
  $22 = $21 | $20;
  $$01$i = $8;$270 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$0$lcssa$i = $$01$i;$32 = $270;
    break;
   }
   $25 = $23 << 8;
   $26 = (($$01$i) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $30 = ($27<<24>>24)==(0);
   if ($30) {
    $$0$lcssa$i = $26;$32 = 0;
    break;
   } else {
    $$01$i = $26;$270 = $27;$hw$0$in2$i = $29;
   }
  }
  $31 = ($32<<24>>24)==(0);
  $33 = (($$0$lcssa$i) + -1|0);
  $$$i = $31 ? 0 : $33;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i7 = $34;$$lcssa$i = 0;
  } else {
   $$02$i5 = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i5) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i7 = $58;$$lcssa$i = $63;
     break;
    } else {
     $$02$i5 = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = (($$0$lcssa$i7) + -2|0);
  $$$i8 = $$lcssa$i ? 0 : $65;
  $$0 = $$$i8;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i15 = $66;$$lcssa$i14 = 0;
  } else {
   $$02$i11 = $66;$hw$03$i10 = $92;
   while(1) {
    $94 = $hw$03$i10 << 8;
    $95 = (($$02$i11) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i12 = $99 | $100;
    if ($or$cond$i12) {
     $$0$lcssa$i15 = $95;$$lcssa$i14 = $99;
     break;
    } else {
     $$02$i11 = $95;$hw$03$i10 = $98;
    }
   }
  }
  $101 = (($$0$lcssa$i15) + -3|0);
  $$$i16 = $$lcssa$i14 ? 0 : $101;
  $$0 = $$$i16;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$039$i = 0;
 while(1) {
  $102 = (($3) + ($l$039$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   $$0 = 0;
   label = 79;
   break;
  }
  $105 = $106&255;
  $107 = $105 & 31;
  $108 = 1 << $107;
  $109 = $105 >>> 5;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$039$i) + 1)|0;
  $114 = (($shift$i) + ($105<<2)|0);
  HEAP32[$114>>2] = $113;
  $115 = (($n) + ($113)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   break;
  } else {
   $106 = $116;$l$039$i = $113;
  }
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 $118 = ($113>>>0)>(1);
 L49: do {
  if ($118) {
   $271 = 1;$ip$0$ph81$i = -1;$jp$0$ph82$i = 0;
   L50: while(1) {
    $272 = $271;$jp$0$ph22$ph72$i = $jp$0$ph82$i;$p$0$ph$ph73$i = 1;
    while(1) {
     $273 = $272;$jp$0$ph2266$i = $jp$0$ph22$ph72$i;
     L54: while(1) {
      $120 = $273;$k$030$i = 1;
      while(1) {
       $125 = (($k$030$i) + ($ip$0$ph81$i))|0;
       $126 = (($n) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = (($n) + ($120)|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = ($127<<24>>24)==($129<<24>>24);
       if (!($130)) {
        break L54;
       }
       $131 = ($k$030$i|0)==($p$0$ph$ph73$i|0);
       $123 = (($k$030$i) + 1)|0;
       if ($131) {
        break;
       }
       $122 = (($123) + ($jp$0$ph2266$i))|0;
       $124 = ($122>>>0)<($113>>>0);
       if ($124) {
        $120 = $122;$k$030$i = $123;
       } else {
        $ip$0$ph78$i = $ip$0$ph81$i;$p$0$ph$ph70$i = $p$0$ph$ph73$i;
        break L50;
       }
      }
      $132 = (($jp$0$ph2266$i) + ($p$0$ph$ph73$i))|0;
      $133 = (($132) + 1)|0;
      $134 = ($133>>>0)<($113>>>0);
      if ($134) {
       $273 = $133;$jp$0$ph2266$i = $132;
      } else {
       $ip$0$ph78$i = $ip$0$ph81$i;$p$0$ph$ph70$i = $p$0$ph$ph73$i;
       break L50;
      }
     }
     $135 = ($127&255)>($129&255);
     $136 = (($120) - ($ip$0$ph81$i))|0;
     if (!($135)) {
      break;
     }
     $119 = (($120) + 1)|0;
     $121 = ($119>>>0)<($113>>>0);
     if ($121) {
      $272 = $119;$jp$0$ph22$ph72$i = $120;$p$0$ph$ph73$i = $136;
     } else {
      $ip$0$ph78$i = $ip$0$ph81$i;$p$0$ph$ph70$i = $136;
      break L50;
     }
    }
    $137 = (($jp$0$ph2266$i) + 1)|0;
    $138 = (($jp$0$ph2266$i) + 2)|0;
    $139 = ($138>>>0)<($113>>>0);
    if ($139) {
     $271 = $138;$ip$0$ph81$i = $jp$0$ph2266$i;$jp$0$ph82$i = $137;
    } else {
     $ip$0$ph78$i = $jp$0$ph2266$i;$p$0$ph$ph70$i = 1;
     break;
    }
   }
   $274 = 1;$ip$1$ph61$i = -1;$jp$1$ph62$i = 0;
   while(1) {
    $276 = $274;$jp$1$ph11$ph52$i = $jp$1$ph62$i;$p$1$ph$ph53$i = 1;
    while(1) {
     $275 = $276;$jp$1$ph1146$i = $jp$1$ph11$ph52$i;
     L69: while(1) {
      $147 = $275;$k$117$i = 1;
      while(1) {
       $143 = (($k$117$i) + ($ip$1$ph61$i))|0;
       $144 = (($n) + ($143)|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = (($n) + ($147)|0);
       $148 = HEAP8[$146>>0]|0;
       $149 = ($145<<24>>24)==($148<<24>>24);
       if (!($149)) {
        break L69;
       }
       $150 = ($k$117$i|0)==($p$1$ph$ph53$i|0);
       $141 = (($k$117$i) + 1)|0;
       if ($150) {
        break;
       }
       $140 = (($141) + ($jp$1$ph1146$i))|0;
       $142 = ($140>>>0)<($113>>>0);
       if ($142) {
        $147 = $140;$k$117$i = $141;
       } else {
        $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $ip$1$ph61$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = $p$1$ph$ph53$i;
        break L49;
       }
      }
      $151 = (($jp$1$ph1146$i) + ($p$1$ph$ph53$i))|0;
      $152 = (($151) + 1)|0;
      $153 = ($152>>>0)<($113>>>0);
      if ($153) {
       $275 = $152;$jp$1$ph1146$i = $151;
      } else {
       $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $ip$1$ph61$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = $p$1$ph$ph53$i;
       break L49;
      }
     }
     $154 = ($145&255)<($148&255);
     $155 = (($147) - ($ip$1$ph61$i))|0;
     if (!($154)) {
      break;
     }
     $156 = (($147) + 1)|0;
     $157 = ($156>>>0)<($113>>>0);
     if ($157) {
      $276 = $156;$jp$1$ph11$ph52$i = $147;$p$1$ph$ph53$i = $155;
     } else {
      $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $ip$1$ph61$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = $155;
      break L49;
     }
    }
    $158 = (($jp$1$ph1146$i) + 1)|0;
    $159 = (($jp$1$ph1146$i) + 2)|0;
    $160 = ($159>>>0)<($113>>>0);
    if ($160) {
     $274 = $159;$ip$1$ph61$i = $jp$1$ph1146$i;$jp$1$ph62$i = $158;
    } else {
     $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $jp$1$ph1146$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = 1;
     break;
    }
   }
  } else {
   $ip$0$ph78146$i = -1;$ip$1$ph58$i = -1;$p$0$ph$ph70150$i = 1;$p$1$ph$ph50$i = 1;
  }
 } while(0);
 $161 = (($ip$1$ph58$i) + 1)|0;
 $162 = (($ip$0$ph78146$i) + 1)|0;
 $163 = ($161>>>0)>($162>>>0);
 $p$1$p$0$i = $163 ? $p$1$ph$ph50$i : $p$0$ph$ph70150$i;
 $ip$1$ip$0$i = $163 ? $ip$1$ph58$i : $ip$0$ph78146$i;
 $164 = (($n) + ($p$1$p$0$i)|0);
 $165 = (($ip$1$ip$0$i) + 1)|0;
 $166 = (_memcmp($n,$164,$165)|0);
 $167 = ($166|0)==(0);
 if ($167) {
  $173 = (($113) - ($p$1$p$0$i))|0;
  $174 = $113 | 63;
  $notlhs$i = ($113|0)==($p$1$p$0$i|0);
  if ($notlhs$i) {
   $228 = $174;$p$3155$i = $113;
  } else {
   $$02$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L83: while(1) {
    $176 = $z$0$us$i;
    $177 = $$02$us$i;
    $178 = (($176) - ($177))|0;
    $179 = ($178>>>0)<($113>>>0);
    do {
     if ($179) {
      $180 = (_memchr($z$0$us$i,0,$174)|0);
      $181 = ($180|0)==(0|0);
      if ($181) {
       $185 = (($z$0$us$i) + ($174)|0);
       $z$1$us$i = $185;
       break;
      } else {
       $182 = $180;
       $183 = (($182) - ($177))|0;
       $184 = ($183>>>0)<($113>>>0);
       if ($184) {
        $$0 = 0;
        label = 79;
        break L83;
       } else {
        $z$1$us$i = $180;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $186 = (($$02$us$i) + ($l$039$i)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = $188 >>> 5;
    $190 = (($byteset$i) + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $188 & 31;
    $193 = 1 << $192;
    $194 = $193 & $191;
    $195 = ($194|0)==(0);
    if ($195) {
     $223 = (($$02$us$i) + ($113)|0);
     $$02$us$i = $223;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $196 = (($shift$i) + ($188<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($113) - ($197))|0;
    $199 = ($113|0)==($197|0);
    if (!($199)) {
     $notrhs$us$i = ($mem$0$us$i|0)!=(0);
     $200 = ($198>>>0)<($p$1$p$0$i>>>0);
     $or$cond3$us$i = $notrhs$us$i & $200;
     $k$2$us$i = $or$cond3$us$i ? $173 : $198;
     $201 = (($$02$us$i) + ($k$2$us$i)|0);
     $$02$us$i = $201;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $202 = ($165>>>0)>($mem$0$us$i>>>0);
    $$mem$0$us$i = $202 ? $165 : $mem$0$us$i;
    $203 = (($n) + ($$mem$0$us$i)|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = ($204<<24>>24)==(0);
    L97: do {
     if ($205) {
      $k$4$us$i = $165;
     } else {
      $$pr$us$i = $204;$k$37$us$i = $$mem$0$us$i;
      while(1) {
       $210 = (($$02$us$i) + ($k$37$us$i)|0);
       $211 = HEAP8[$210>>0]|0;
       $212 = ($$pr$us$i<<24>>24)==($211<<24>>24);
       $207 = (($k$37$us$i) + 1)|0;
       if (!($212)) {
        break;
       }
       $206 = (($n) + ($207)|0);
       $208 = HEAP8[$206>>0]|0;
       $209 = ($208<<24>>24)==(0);
       if ($209) {
        $k$4$us$i = $165;
        break L97;
       } else {
        $$pr$us$i = $208;$k$37$us$i = $207;
       }
      }
      $213 = (($k$37$us$i) - ($ip$1$ip$0$i))|0;
      $214 = (($$02$us$i) + ($213)|0);
      $$02$us$i = $214;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
      continue L83;
     }
    } while(0);
    while(1) {
     $215 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
     if (!($215)) {
      $$0 = $$02$us$i;
      label = 79;
      break L83;
     }
     $216 = (($k$4$us$i) + -1)|0;
     $217 = (($n) + ($216)|0);
     $218 = HEAP8[$217>>0]|0;
     $219 = (($$02$us$i) + ($216)|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = ($218<<24>>24)==($220<<24>>24);
     if ($221) {
      $k$4$us$i = $216;
     } else {
      break;
     }
    }
    $222 = (($$02$us$i) + ($p$1$p$0$i)|0);
    $$02$us$i = $222;$mem$0$us$i = $173;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 79) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $168 = (($113) - ($ip$1$ip$0$i))|0;
  $169 = (($168) + -1)|0;
  $170 = ($ip$1$ip$0$i>>>0)>($169>>>0);
  $ip$1$ip$0$$i = $170 ? $ip$1$ip$0$i : $169;
  $171 = (($ip$1$ip$0$$i) + 1)|0;
  $172 = $113 | 63;
  $228 = $172;$p$3155$i = $171;
 }
 $175 = (($n) + ($165)|0);
 $$02$i = $3;$z$0$i = $3;
 L110: while(1) {
  $224 = $z$0$i;
  $225 = $$02$i;
  $226 = (($224) - ($225))|0;
  $227 = ($226>>>0)<($113>>>0);
  do {
   if ($227) {
    $229 = (_memchr($z$0$i,0,$228)|0);
    $230 = ($229|0)==(0|0);
    if ($230) {
     $234 = (($z$0$i) + ($228)|0);
     $z$1$i = $234;
     break;
    } else {
     $231 = $229;
     $232 = (($231) - ($225))|0;
     $233 = ($232>>>0)<($113>>>0);
     if ($233) {
      $$0 = 0;
      label = 79;
      break L110;
     } else {
      $z$1$i = $229;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $235 = (($$02$i) + ($l$039$i)|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = $237 >>> 5;
  $239 = (($byteset$i) + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $237 & 31;
  $242 = 1 << $241;
  $243 = $242 & $240;
  $244 = ($243|0)==(0);
  if ($244) {
   $250 = (($$02$i) + ($113)|0);
   $$02$i = $250;$z$0$i = $z$1$i;
   continue;
  }
  $245 = (($shift$i) + ($237<<2)|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = ($113|0)==($246|0);
  if (!($247)) {
   $248 = (($113) - ($246))|0;
   $249 = (($$02$i) + ($248)|0);
   $$02$i = $249;$z$0$i = $z$1$i;
   continue;
  }
  $251 = HEAP8[$175>>0]|0;
  $252 = ($251<<24>>24)==(0);
  L124: do {
   if ($252) {
    $k$4$i = $165;
   } else {
    $$pr$i = $251;$k$37$i = $165;
    while(1) {
     $257 = (($$02$i) + ($k$37$i)|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = ($$pr$i<<24>>24)==($258<<24>>24);
     $254 = (($k$37$i) + 1)|0;
     if (!($259)) {
      break;
     }
     $253 = (($n) + ($254)|0);
     $255 = HEAP8[$253>>0]|0;
     $256 = ($255<<24>>24)==(0);
     if ($256) {
      $k$4$i = $165;
      break L124;
     } else {
      $$pr$i = $255;$k$37$i = $254;
     }
    }
    $260 = (($k$37$i) - ($ip$1$ip$0$i))|0;
    $261 = (($$02$i) + ($260)|0);
    $$02$i = $261;$z$0$i = $z$1$i;
    continue L110;
   }
  } while(0);
  while(1) {
   $262 = ($k$4$i|0)==(0);
   if ($262) {
    $$0 = $$02$i;
    label = 79;
    break L110;
   }
   $263 = (($k$4$i) + -1)|0;
   $264 = (($n) + ($263)|0);
   $265 = HEAP8[$264>>0]|0;
   $266 = (($$02$i) + ($263)|0);
   $267 = HEAP8[$266>>0]|0;
   $268 = ($265<<24>>24)==($267<<24>>24);
   if ($268) {
    $k$4$i = $263;
   } else {
    break;
   }
  }
  $269 = (($$02$i) + ($p$3155$i)|0);
  $$02$i = $269;$z$0$i = $z$1$i;
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[30408>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((30408 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((30408 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[30408>>2] = $22;
     } else {
      $23 = HEAP32[((30408 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((30408 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((30408 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((30408 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[30408>>2] = $74;
      } else {
       $75 = HEAP32[((30408 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((30408 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((30408 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((30408 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[30408>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[30408>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((30408 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((30408 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((30408 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((30408 + 8|0))>>2] = $81;
     HEAP32[((30408 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((30408 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((30408 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((30408 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((30408 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((30408 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((30408 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((30408 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((30408 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((30408 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((30408 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((30408 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((30408 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((30408 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[30408>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[30408>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((30408 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((30408 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((30408 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((30408 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((30408 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((30408 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((30408 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L9: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((30408 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((30408 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((30408 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((30408 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((30408 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((30408 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((30408 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((30408 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((30408 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((30408 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((30408 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[30408>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[30408>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((30408 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((30408 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((30408 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((30408 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((30408 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((30408 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L107: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L107;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((30408 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L87;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((30408 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((30408 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((30408 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((30408 + 20|0))>>2] = $516;
   HEAP32[((30408 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((30408 + 8|0))>>2] = 0;
   HEAP32[((30408 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((30408 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((30408 + 12|0))>>2] = $530;
  $531 = HEAP32[((30408 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((30408 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[30880>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((30880 + 8|0))>>2] = $540;
    HEAP32[((30880 + 4|0))>>2] = $540;
    HEAP32[((30880 + 12|0))>>2] = -1;
    HEAP32[((30880 + 16|0))>>2] = -1;
    HEAP32[((30880 + 20|0))>>2] = 0;
    HEAP32[((30408 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[30880>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((30880 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((30408 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((30408 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((30408 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((30408 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((30408 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((30408 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((30880 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((30408 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((30408 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((30880 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((30408 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((30408 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((30408 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((30408 + 432|0))>>2] = $633;
  $634 = HEAP32[((30408 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((30408 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((30408 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((30408 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((30408 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((30408 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((30408 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((30408 + 460|0))>>2] = 0;
    $641 = HEAP32[30880>>2]|0;
    HEAP32[((30408 + 36|0))>>2] = $641;
    HEAP32[((30408 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((30408 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((30408 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((30408 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((30408 + 24|0))>>2] = $654;
    HEAP32[((30408 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((30880 + 16|0))>>2]|0;
    HEAP32[((30408 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((30408 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((30408 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((30408 + 24|0))>>2] = $684;
       HEAP32[((30408 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((30880 + 16|0))>>2]|0;
       HEAP32[((30408 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((30408 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((30408 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((30408 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((30408 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((30408 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((30408 + 12|0))>>2] = $732;
        HEAP32[((30408 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((30408 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((30408 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((30408 + 8|0))>>2] = $738;
         HEAP32[((30408 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L355: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((30408 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((30408 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[30408>>2]|0;
            $765 = $764 & $763;
            HEAP32[30408>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((30408 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((30408 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((30408 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((30408 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((30408 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((30408 + 4|0))>>2] = $811;
             break L355;
            } else {
             $812 = HEAP32[((30408 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L355;
             }
            }
           } while(0);
           $819 = HEAP32[((30408 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((30408 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((30408 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((30408 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[30408>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[30408>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((30408 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((30408 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((30408 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((30408 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((30408 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((30408 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L444: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L444;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((30408 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((30408 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((30408 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((30408 + 24|0))>>2] = $958;
    HEAP32[((30408 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((30880 + 16|0))>>2]|0;
    HEAP32[((30408 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((30408 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((30408 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((30408 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((30408 + 448|0))+12>>2]|0;
    HEAP32[((30408 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((30408 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((30408 + 460|0))>>2] = 0;
    HEAP32[((30408 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((30408 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[30408>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[30408>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((30408 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((30408 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((30408 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((30408 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((30408 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((30408 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((30408 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((30408 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((30408 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((30408 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((30408 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((30408 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((30408 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((30408 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((30408 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((30408 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[30408>>2]|0;
     $36 = $35 & $34;
     HEAP32[30408>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((30408 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((30408 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((30408 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((30408 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((30408 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((30408 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((30408 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((30408 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((30408 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((30408 + 12|0))>>2] = $122;
   HEAP32[((30408 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((30408 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((30408 + 20|0))>>2] = 0;
   HEAP32[((30408 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((30408 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((30408 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((30408 + 8|0))>>2] = $130;
   HEAP32[((30408 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((30408 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((30408 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[30408>>2]|0;
     $154 = $153 & $152;
     HEAP32[30408>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((30408 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((30408 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((30408 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((30408 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((30408 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((30408 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((30408 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((30408 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((30408 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((30408 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((30408 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((30408 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((30408 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[30408>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[30408>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((30408 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((30408 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((30408 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((30408 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((30408 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((30408 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((30408 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((30408 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((30408 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((30408 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((30408 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((30408 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((30408 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((30880 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((30408 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((30408 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((30408 + 24|0))>>2] = $38;
  HEAP32[((30408 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((30408 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((30408 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((30408 + 8|0))>>2] = $storemerge21;
  HEAP32[((30408 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((30408 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[30408>>2]|0;
    $90 = $89 & $88;
    HEAP32[30408>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((30408 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((30408 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((30408 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((30408 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((30408 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((30408 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((30408 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((30408 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((30408 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((30408 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((30408 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[30408>>2]|0;
     $32 = $31 & $30;
     HEAP32[30408>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((30408 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((30408 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((30408 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((30408 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((30408 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((30408 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((30408 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((30408 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((30408 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((30408 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((30408 + 12|0))>>2] = $117;
   HEAP32[((30408 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((30408 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((30408 + 20|0))>>2] = 0;
   HEAP32[((30408 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((30408 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((30408 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((30408 + 8|0))>>2] = $125;
   HEAP32[((30408 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((30408 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[30408>>2]|0;
     $148 = $147 & $146;
     HEAP32[30408>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((30408 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((30408 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((30408 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((30408 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((30408 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((30408 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((30408 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((30408 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((30408 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((30408 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[30408>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[30408>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((30408 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((30408 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((30408 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((30408 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((30408 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((30408 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((30408 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((30408 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (30904 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (30904 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$88 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $87 = ($88|0)<(0);
     $89 = $87 << 31 >> 31;
     $90 = $88 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $88;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($88|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$88 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $252 = $283;$255 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $252 = $281;$255 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (31168 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (30904 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (30904 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$152 = 0;$155 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$152 = 0;$155 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $151 = ($152>>>0)>($147>>>0);
    $153 = ($152|0)==($147|0);
    $154 = ($155>>>0)>($146>>>0);
    $156 = $153 & $154;
    $157 = $151 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $155;$285 = $152;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $155;$159 = $152;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (30904 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (30904 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (30904 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $202 = $287;$205 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $201 = ($202>>>0)>($200>>>0);
     $203 = ($202|0)==($200|0);
     $204 = ($205>>>0)>($199>>>0);
     $206 = $203 & $204;
     $207 = $201 | $206;
     if ($207) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($205|0),($202|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (30904 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $202 = $219;$205 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (30904 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (30904 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $252 = $1;$255 = $0;
  } else {
   $252 = $285;$255 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $251 = ($252>>>0)<($1>>>0);
 $253 = ($252|0)==($1|0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = $253 & $254;
 $257 = $251 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($252>>>0)>($1>>>0);
  $267 = ($252|0)==($1|0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $255 ^ $neg$0;
 $275 = $252 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (31184 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (31200 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L66: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L66;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L79: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L79;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L79;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.7976931348623157E+308;
       $265 = $264 * 1.7976931348623157E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.2250738585072014E-308;
       $278 = $277 * 2.2250738585072014E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L168: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L168;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L182: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L182;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.7976931348623157E+308;
     $448 = $447 * 1.7976931348623157E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.2250738585072014E-308;
     $460 = $459 * 2.2250738585072014E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (31216 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (31216 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (31216 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L280: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L280;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L311: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (31208 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L311;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 31248;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 31248;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 STACKTOP = sp;return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 255]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $8 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   } else if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $65 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((31256 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$229 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$229 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $229;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($229|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 31744;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((31744 + 1|0)) : ((31744 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((31744 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 31768 : 31776;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 31784 : 31792;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (31800 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (31800 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (31800 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (31800 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$582 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$582 = $$pre$i;
    }
    $581 = ($582|0)<(0);
    $$31$i = $581 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $591 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $590 = ($591|0)>(29);
      $592 = $590 ? 29 : $591;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $591 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L228: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $631 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $631;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $630 = ($631|0)==(0);
          if ($630) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $631;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L228;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(31816,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(31816,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($229|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $229;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 31720;
     label = 94;
    } else {
     $$13 = $252 ? 31720 : ((31720 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($229|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($229|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $277 = $271;$279 = $270;$pl$0 = 1;$prefix$0 = 31720;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 31720 : ((31720 + 2|0));
     $277 = $207;$279 = $229;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $277 = $207;$279 = $229;$pl$0 = 1;$prefix$0 = ((31720 + 1|0));
     label = 89;
    }
    break;
   }
   case 117:  {
    $277 = $207;$279 = $229;$pl$0 = 0;$prefix$0 = 31720;
    label = 89;
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $229;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 31720;$z$2 = $2;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 31736 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   default: {
    $1053 = $229;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 31720;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $228 = ($229|0)==(0);
    $230 = $227 & $228;
    if ($230) {
     $308 = $207;$311 = $229;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 31720;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $229;
     while(1) {
      $231 = $232 & 15;
      $233 = (31800 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 31720;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (31720 + ($247)|0);
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $276 = $277;
    $278 = ($279>>>0)>(0);
    $280 = ($279|0)==(0);
    $281 = ($276>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $278 | $282;
    if ($283) {
     $$05$i = $2;$284 = $276;$285 = $279;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $276;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $308 = $277;$311 = $279;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $308 = $277;$311 = $279;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 31720;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 31720;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $335 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $334 = ($335>>>0)<($p$4296>>>0);
     if ($334) {
      $i$0168 = $335;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $335;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $307 = $308;
   $309 = ($307|0)==(0);
   $310 = ($311|0)==(0);
   $312 = $309 & $310;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $311;$1054 = $308;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $311;$1054 = $308;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L479: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L479;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L479;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $229;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L534: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L534;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L534;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L534;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L534;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L534;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L534;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L534;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L534;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L534;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L534;
       break;
      }
      default: {
       break L534;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1041 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1040 = ($1041|0)<(10);
   if ($1040) {
    $i$388 = $1041;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=31824+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _atol($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$5 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $4 = ($5<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $4;
    if (!($or$cond4)) {
     $11 = $5;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$5 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&255](a1|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
  }


  function dynCall_iidd(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=+a2; a3=+a3;
    return FUNCTION_TABLE_iidd[index&255](a1|0,+a2,+a3)|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0) { p0 = p0|0; nullFunc_ii(1);return 0; }
  function b2(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(2); }
  function b3(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_iidd(3);return 0; }
  function b4(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0; }
  function b5(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0; }
  function b6(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(6);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_sn_write,_PKImageEncode_Transcode_WMP,_PKImageEncode_Transcode,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_ReadWS_File,b0,_WriteWS_File,b0,b0,b0,b0,_ReadWS_Memory,b0,_WriteWS_Memory,b0,b0,b0,_ReadWS_List,b0,_WriteWS_List,b0,b0
  ,_DiscardHeadWS_List,b0,_CreateWS_File,_CreateWS_Memory,b0,b0,b0,b0,b0,_PKImageEncode_SetSize,b0,_PKImageEncode_SetColorContext,b0,b0,b0,b0,b0,_PKImageEncode_CreateNewFrame,b0,b0,b0,_PKImageDecode_GetSize,_PKImageDecode_GetResolution,_PKImageDecode_GetColorContext,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,_PKFormatConverter_GetSize,_PKFormatConverter_GetResolution,b0,b0,b0,_PKImageDecode_GetSize_WMP,b0,b0,_PKImageDecode_GetColorContext_WMP,b0,b0,b0,b0,_PKImageEncode_SetColorContext_WMP,b0,b0,b0,b0,b0,_PKImageEncode_CreateNewFrame_WMP,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_do_read,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_ii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,_inputMBRow,_quantizeMacroblock,_processMacroblock,b1,b1,_outputMBRow,_invTransformMacroblock,_invTransformMacroblock_alteredOperators_hard,_processMacroblockDec,_CloseWS_File,_EOSWS_File,b1,b1,b1,b1,b1,_CloseWS_Memory,_EOSWS_Memory,b1,b1,b1,b1,b1,_CloseWS_List,b1,b1,b1,b1,b1
  ,b1,_PKCreateFactory_CreateStream,b1,b1,_PKCreateFactory_Release,_PKCreateCodecFactory_Release,b1,_PKImageEncode_Terminate,b1,b1,b1,b1,b1,b1,b1,b1,_PKImageEncode_WritePixelsBandedEnd,b1,_PKImageEncode_Release,b1,b1,b1,b1,b1,b1,b1,b1,b1,_PKImageDecode_Release,b1
  ,b1,b1,b1,b1,b1,b1,b1,_PKFormatConverter_Release,b1,b1,b1,b1,b1,b1,_PKImageDecode_Release_WMP,b1,_PKImageEncode_Terminate_WMP,b1,b1,b1,b1,b1,_PKImageEncode_WritePixelsBandedEnd_WMP,b1,_PKImageEncode_Release_WMP,b1,b1,_PKTestDecode_Release,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_PKImageDecode_Release_TIF,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_viii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_putBit16
  ,_putBit32,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_iidd = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_PKImageEncode_SetResolution,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_iiiii = [b4,_RGB24_BGR24,_BGR24_RGB24,_RGB24_RGB32,_RGB24_BGR32,_BGR32_RGB24,_RGB24_Gray8,_Gray8_RGB24,_BGR24_Gray8,_Gray8_BGR24,_RGBA128Fixed_RGBA128Float,_RGBA128Float_RGBA128Fixed,_RGB96Fixed_RGB96Float,_RGB96Float_RGB96Fixed,_RGB96Float_RGB128Float,_RGB128Float_RGB96Float,_RGB64Half_RGB48Half,_RGB48Half_RGB64Half,_BGR32_BGR24,_BGR24_BGR32,_RGB96Float_RGB128Fixed,_RGB128Fixed_RGB96Float,_Gray32Fixed_Gray32Float,_Gray32Float_Gray32Fixed,_Gray16Fixed_Gray32Float,_Gray32Float_Gray16Fixed,_RGB48Fixed_RGB96Float,_RGB96Float_RGB48Fixed,_RGB64Fixed_RGB96Float
  ,_RGB96Float_RGB64Fixed,_RGBA64Fixed_RGBA128Float,_RGBA128Float_RGBA64Fixed,_RGBE_RGB96Float,_RGB96Float_RGBE,_RGBA64Half_RGBA128Float,_RGBA128Float_RGBA64Half,_RGB64Half_RGB96Float,_RGB96Float_RGB64Half,_RGB48Half_RGB96Float,_RGB96Float_RGB48Half,_Gray16Half_Gray32Float,_Gray32Float_Gray16Half,_RGB555_RGB24,_RGB24_RGB555,_RGB565_RGB24,_RGB24_RGB565,_RGB101010_RGB48,_RGB48_RGB101010,_RGBA32_BGRA32,_BGRA32_RGBA32,_PRGBA64_RGBA32,_PRGBA64_RGB32,_PRGBA32_RGBA32,_PBGRA32_RGBA32,_PRGBA32_RGB32,_PBGRA32_RGB32,_BlackWhite_Gray8,_Gray16_Gray8,_RGB48_RGB24
  ,_RGBA64_RGBA32,_RGBA64_RGB32,_Gray32Float_Gray8,_RGB96Float_RGB24,_RGB128Float_RGB24,_RGBA128Float_RGBA32,_RGBA128Float_RGB32,_PRGBA128Float_RGBA32,_PRGBA128Float_RGB32,_Gray16Fixed_Gray8,_Gray32Fixed_Gray8,_RGB48Fixed_RGB24,_RGB64Fixed_RGB24,_RGB96Fixed_RGB24,_RGB128Fixed_RGB24,_RGBA64Fixed_RGBA32,_RGBA64Fixed_RGB32,_RGBA128Fixed_RGBA32,_RGBA128Fixed_RGB32,_Gray16Half_Gray8,_RGB48Half_RGB24,_RGB64Half_RGB24,_RGBA64Half_RGBA32,_RGBA64Half_RGB32,_RGB101010_RGB24,_RGBE_RGB24,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_ReadWS_File1,b4,b4,b4,b4,b4,b4,_ReadWS_Memory1,b4,b4,b4,b4,b4,_ReadWS_List1,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,_PKImageEncode_Initialize,b4,b4,b4,b4,b4,b4,_PKImageEncode_WritePixels,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_PKImageDecode_Copy,b4,b4,b4,_PKFormatConverter_Convert
  ,_PKFormatConverter_Initialize,_PKFormatConverter_InitializeConvert,b4,b4,b4,b4,_PKFormatConverter_Copy,b4,b4,b4,b4,_PKImageDecode_Copy_WMP,b4,b4,b4,_PKImageEncode_Initialize_WMP,b4,b4,b4,_PKImageEncode_WritePixels_WMP,b4,b4,b4,b4,b4,b4,_PKTestDecode_Copy,b4,_PKImageEncode_WritePixels_BMP,b4
  ,_PKImageDecode_Copy_BMP,_PKImageEncode_WritePixels_HDR,b4,_PKImageDecode_Copy_HDR,_PKImageEncode_WritePixels_PNM,b4,_PKImageDecode_Copy_PNM,_PKImageEncode_WritePixels_TIF,b4,_PKImageDecode_Copy_TIF,b4,_PKImageEncode_WritePixels_IYUV,_PKImageEncode_WritePixels_YUV422,_PKImageEncode_WritePixels_YUV444,b4,_PKImageDecode_Copy_IYUV,b4,_PKImageDecode_Copy_YUV422,b4,_PKImageDecode_Copy_YUV444,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,__getBit16,_getBit32,b5,b5,b5,b5,b5,b5,b5,b5,b5,_SetPosWS_File,_GetPosWS_File,b5,b5,b5,b5,b5,_SetPosWS_Memory,_GetPosWS_Memory,b5,b5,b5,b5,_SetPosWS_List,_GetPosWS_List
  ,b5,b5,b5,b5,b5,b5,b5,b5,_PKImageEncode_SetPixelFormat,b5,b5,b5,_PKImageEncode_SetDescriptiveMetadata,b5,_PKImageEncode_WritePixelsBandedBegin,b5,b5,b5,b5,_PKImageDecode_Initialize,_PKImageDecode_GetPixelFormat,b5,b5,b5,_PKImageDecode_GetDescriptiveMetadata,b5,_PKImageDecode_GetFrameCount,_PKImageDecode_SelectFrame,b5,b5
  ,b5,b5,_PKFormatConverter_GetPixelFormat,_PKFormatConverter_GetSourcePixelFormat,b5,b5,b5,b5,_PKImageDecode_Initialize_WMP,b5,_PKImageDecode_GetRawStream_WMP,b5,b5,_PKImageDecode_GetDescriptiveMetadata_WMP,b5,b5,b5,b5,_PKImageEncode_SetDescriptiveMetadata_WMP,b5,_PKImageEncode_WritePixelsBandedBegin_WMP,b5,b5,b5,b5,_PKTestDecode_Initialize,b5,b5,b5,_PKImageDecode_Initialize_BMP
  ,b5,b5,_PKImageDecode_Initialize_HDR,b5,b5,_PKImageDecode_Initialize_PNM,b5,b5,_PKImageDecode_Initialize_TIF,b5,b5,b5,b5,b5,_PKImageDecode_Initialize_IYUV,b5,_PKImageDecode_Initialize_YUV422,b5,_PKImageDecode_Initialize_YUV444,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_iiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_PKImageEncode_WritePixelsBanded,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_PKImageEncode_WritePixelsBanded_WMP,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];

  return { _i64Subtract: _i64Subtract, _free: _free, _realloc: _realloc, _i64Add: _i64Add, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _mainFn: _mainFn, _strcpy: _strcpy, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iidd: dynCall_iidd, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__mainFn = asm["_mainFn"]; asm["_mainFn"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__mainFn.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__calloc.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _mainFn = Module["_mainFn"] = asm["_mainFn"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iidd = Module["dynCall_iidd"] = asm["dynCall_iidd"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



